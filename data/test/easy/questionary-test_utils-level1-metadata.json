{
  "dir_path": "/app/questionary",
  "package_name": "questionary",
  "sample_name": "questionary-test_utils",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/test_utils.py",
  "test_code": "from questionary import utils\n\n\ndef test_default_values_of():\n    def f(a, b=2, c=None, *args, **kwargs):\n        pass\n\n    defaults = utils.default_values_of(f)\n    assert defaults == [\"b\", \"c\", \"args\", \"kwargs\"]\n\n\ndef test_default_values_of_no_args():\n    def f():\n        pass\n\n    defaults = utils.default_values_of(f)\n    assert defaults == []\n\n\ndef test_arguments_of():\n    def f(a, b=2, c=None, *args, **kwargs):\n        pass\n\n    defaults = utils.arguments_of(f)\n    assert defaults == [\"a\", \"b\", \"c\", \"args\", \"kwargs\"]\n\n\ndef test_arguments_of_no_args():\n    def f():\n        pass\n\n    defaults = utils.arguments_of(f)\n    assert defaults == []\n\n\ndef test_filter_kwargs():\n    def f(a, b=1, *, c=2):\n        pass\n\n    kwargs = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n    }\n\n    filtered = utils.used_kwargs(kwargs, f)\n    assert \"a\" in filtered\n    assert \"b\" in filtered\n    assert \"c\" in filtered\n    assert \"d\" not in filtered\n\n\ndef test_filter_kwargs_empty():\n    def f():\n        pass\n\n    kwargs = {\n        \"a\": 1,\n        \"b\": 2,\n    }\n\n    filtered = utils.used_kwargs(kwargs, f)\n    assert filtered == {}\n\n\ndef test_required_arguments_of():\n    def f(a, b=2, c=None, *args, **kwargs):\n        pass\n\n    defaults = utils.required_arguments(f)\n    assert defaults == [\"a\"]\n\n\ndef test_required_arguments_of_no_args():\n    def f():\n        pass\n\n    defaults = utils.required_arguments(f)\n    assert defaults == []\n\n\ndef test_missing_arguments():\n    def f(a, b=2, c=None, *args, **kwargs):\n        pass\n\n    assert utils.missing_arguments(f, {}) == {\"a\"}\n    assert utils.missing_arguments(f, {\"a\": 1}) == set()\n    assert utils.missing_arguments(f, {\"a\": 1, \"b\": 2}) == set()\n\n\ndef test_missing_arguments_of_no_args():\n    def f():\n        pass\n\n    defaults = utils.missing_arguments(f, {})\n    assert defaults == set()\n",
  "GT_file_code": {
    "questionary/utils.py": "import inspect\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import List\nfrom typing import Set\n\nACTIVATED_ASYNC_MODE = False\n\n\ndef is_prompt_toolkit_3() -> bool:\n    from prompt_toolkit import __version__ as ptk_version\n\n    return ptk_version.startswith(\"3.\")\n\n\ndef default_values_of(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return all parameter names of ``func`` with a default value.\"\"\"\n\n    signature = inspect.signature(func)\n    return [\n        k\n        for k, v in signature.parameters.items()\n        if v.default is not inspect.Parameter.empty\n        or v.kind != inspect.Parameter.POSITIONAL_OR_KEYWORD\n    ]\n\n\ndef arguments_of(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return the parameter names of the function ``func``.\"\"\"\n\n    return list(inspect.signature(func).parameters.keys())\n\n\ndef used_kwargs(kwargs: Dict[str, Any], func: Callable[..., Any]) -> Dict[str, Any]:\n    \"\"\"Returns only the kwargs which can be used by a function.\n\n    Args:\n        kwargs: All available kwargs.\n        func: The function which should be called.\n\n    Returns:\n        Subset of kwargs which are accepted by ``func``.\n    \"\"\"\n\n    possible_arguments = arguments_of(func)\n\n    return {k: v for k, v in kwargs.items() if k in possible_arguments}\n\n\ndef required_arguments(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return all arguments of a function that do not have a default value.\"\"\"\n    defaults = default_values_of(func)\n    args = arguments_of(func)\n\n    if defaults:\n        args = args[: -len(defaults)]\n    return args  # all args without default values\n\n\ndef missing_arguments(func: Callable[..., Any], argdict: Dict[str, Any]) -> Set[str]:\n    \"\"\"Return all arguments that are missing to call func.\"\"\"\n    return set(required_arguments(func)) - set(argdict.keys())\n\n\nasync def activate_prompt_toolkit_async_mode() -> None:\n    \"\"\"Configure prompt toolkit to use the asyncio event loop.\n\n    Needs to be async, so we use the right event loop in py 3.5\"\"\"\n    global ACTIVATED_ASYNC_MODE\n\n    if not is_prompt_toolkit_3():\n        # Tell prompt_toolkit to use asyncio for the event loop.\n        import prompt_toolkit as pt\n\n        pt.eventloop.use_asyncio_event_loop()  # type: ignore[attr-defined]\n\n    ACTIVATED_ASYNC_MODE = True\n"
  },
  "GT_src_dict": {
    "questionary/utils.py": {
      "default_values_of": {
        "code": "def default_values_of(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return a list of parameter names from the given function `func` that have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve parameter names with default values.\n\nReturns:\n- List[str]: A list containing the names of parameters from `func` that either have a default value or are not of kind POSITIONAL_OR_KEYWORD (e.g., *args or **kwargs).\n\nThis function relies on the `inspect` module to analyze the function's signature and determine its parameters. It utilizes the `inspect.Parameter` class to check whether each parameter has a default value set.\"\"\"\n    'Return all parameter names of ``func`` with a default value.'\n    signature = inspect.signature(func)\n    return [k for k, v in signature.parameters.items() if v.default is not inspect.Parameter.empty or v.kind != inspect.Parameter.POSITIONAL_OR_KEYWORD]",
        "docstring": "Return a list of parameter names from the given function `func` that have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve parameter names with default values.\n\nReturns:\n- List[str]: A list containing the names of parameters from `func` that either have a default value or are not of kind POSITIONAL_OR_KEYWORD (e.g., *args or **kwargs).\n\nThis function relies on the `inspect` module to analyze the function's signature and determine its parameters. It utilizes the `inspect.Parameter` class to check whether each parameter has a default value set.",
        "signature": "def default_values_of(func: Callable[..., Any]) -> List[str]:",
        "type": "Function",
        "class_signature": null
      },
      "arguments_of": {
        "code": "def arguments_of(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return the parameter names of the given function ``func`` as a list.\n\nParameters:\n- func (Callable[..., Any]): The function for which parameter names are to be retrieved.\n\nReturns:\n- List[str]: A list containing the names of all parameters of the function.\n\nDependencies:\nThis function utilizes the `inspect` module to access the function's signature and retrieve parameter names. It is part of a collection of utility functions that help manage function arguments, including identifying default values and required arguments. There are no constants or variables used within this function.\"\"\"\n    'Return the parameter names of the function ``func``.'\n    return list(inspect.signature(func).parameters.keys())",
        "docstring": "Return the parameter names of the given function ``func`` as a list.\n\nParameters:\n- func (Callable[..., Any]): The function for which parameter names are to be retrieved.\n\nReturns:\n- List[str]: A list containing the names of all parameters of the function.\n\nDependencies:\nThis function utilizes the `inspect` module to access the function's signature and retrieve parameter names. It is part of a collection of utility functions that help manage function arguments, including identifying default values and required arguments. There are no constants or variables used within this function.",
        "signature": "def arguments_of(func: Callable[..., Any]) -> List[str]:",
        "type": "Function",
        "class_signature": null
      },
      "used_kwargs": {
        "code": "def used_kwargs(kwargs: Dict[str, Any], func: Callable[..., Any]) -> Dict[str, Any]:\n    \"\"\"Returns a filtered dictionary of keyword arguments (`kwargs`) that are applicable for a given function (`func`). This function checks the parameters of `func` and only retains those keys in `kwargs` that match the parameter names. It utilizes the `arguments_of` function to retrieve the valid parameter names for `func`.\n\nArgs:\n    kwargs (Dict[str, Any]): A dictionary of all available keyword arguments.\n    func (Callable[..., Any]): The function for which the compatibility of `kwargs` is evaluated.\n\nReturns:\n    Dict[str, Any]: A subset of `kwargs` that contains only the keys that are accepted by `func`.\"\"\"\n    'Returns only the kwargs which can be used by a function.\\n\\n    Args:\\n        kwargs: All available kwargs.\\n        func: The function which should be called.\\n\\n    Returns:\\n        Subset of kwargs which are accepted by ``func``.\\n    '\n    possible_arguments = arguments_of(func)\n    return {k: v for k, v in kwargs.items() if k in possible_arguments}",
        "docstring": "Returns a filtered dictionary of keyword arguments (`kwargs`) that are applicable for a given function (`func`). This function checks the parameters of `func` and only retains those keys in `kwargs` that match the parameter names. It utilizes the `arguments_of` function to retrieve the valid parameter names for `func`.\n\nArgs:\n    kwargs (Dict[str, Any]): A dictionary of all available keyword arguments.\n    func (Callable[..., Any]): The function for which the compatibility of `kwargs` is evaluated.\n\nReturns:\n    Dict[str, Any]: A subset of `kwargs` that contains only the keys that are accepted by `func`.",
        "signature": "def used_kwargs(kwargs: Dict[str, Any], func: Callable[..., Any]) -> Dict[str, Any]:",
        "type": "Function",
        "class_signature": null
      },
      "required_arguments": {
        "code": "def required_arguments(func: Callable[..., Any]) -> List[str]:\n    \"\"\"Return a list of parameter names for the given function that do not have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve required parameter names.\n\nReturns:\n- List[str]: A list of parameter names that are required (i.e., those without default values).\n\nThe function relies on `default_values_of` to identify parameters with defaults and `arguments_of` to obtain all parameter names. If the function has any parameters with default values, only the preceding parameters are considered required, effectively filtering out any that can be omitted when calling the function.\"\"\"\n    'Return all arguments of a function that do not have a default value.'\n    defaults = default_values_of(func)\n    args = arguments_of(func)\n    if defaults:\n        args = args[:-len(defaults)]\n    return args",
        "docstring": "Return a list of parameter names for the given function that do not have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve required parameter names.\n\nReturns:\n- List[str]: A list of parameter names that are required (i.e., those without default values).\n\nThe function relies on `default_values_of` to identify parameters with defaults and `arguments_of` to obtain all parameter names. If the function has any parameters with default values, only the preceding parameters are considered required, effectively filtering out any that can be omitted when calling the function.",
        "signature": "def required_arguments(func: Callable[..., Any]) -> List[str]:",
        "type": "Function",
        "class_signature": null
      },
      "missing_arguments": {
        "code": "def missing_arguments(func: Callable[..., Any], argdict: Dict[str, Any]) -> Set[str]:\n    \"\"\"Return a set of arguments that are required by the function `func` but are missing from the provided dictionary `argdict`.\n\nParameters:\n- func (Callable[..., Any]): The function whose required arguments are to be checked.\n- argdict (Dict[str, Any]): A dictionary containing argument names and their corresponding values.\n\nReturns:\n- Set[str]: A set of argument names that are required by `func` but not present in `argdict`.\n\nThis function relies on the `required_arguments` helper function to identify which arguments need to be included and returns the difference between these required arguments and the keys available in `argdict`. It does not use any external constants or variables within its processing.\"\"\"\n    'Return all arguments that are missing to call func.'\n    return set(required_arguments(func)) - set(argdict.keys())",
        "docstring": "Return a set of arguments that are required by the function `func` but are missing from the provided dictionary `argdict`.\n\nParameters:\n- func (Callable[..., Any]): The function whose required arguments are to be checked.\n- argdict (Dict[str, Any]): A dictionary containing argument names and their corresponding values.\n\nReturns:\n- Set[str]: A set of argument names that are required by `func` but not present in `argdict`.\n\nThis function relies on the `required_arguments` helper function to identify which arguments need to be included and returns the difference between these required arguments and the keys available in `argdict`. It does not use any external constants or variables within its processing.",
        "signature": "def missing_arguments(func: Callable[..., Any], argdict: Dict[str, Any]) -> Set[str]:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "questionary/utils.py:used_kwargs": {},
    "questionary/utils.py:required_arguments": {},
    "questionary/utils.py:missing_arguments": {}
  },
  "PRD": "# PROJECT NAME: questionary-test_utils\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 questionary/\n    \u2514\u2500\u2500 utils.py\n        \u251c\u2500\u2500 arguments_of\n        \u251c\u2500\u2500 default_values_of\n        \u251c\u2500\u2500 missing_arguments\n        \u251c\u2500\u2500 required_arguments\n        \u2514\u2500\u2500 used_kwargs\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides utilities for introspecting Python functions to analyze their arguments and default values. It enables developers to extract information such as required arguments, default parameters, positional and keyword arguments, as well as filter and validate provided arguments against a function's signature. By offering capabilities like identifying missing required arguments or detecting unused keyword arguments, the module simplifies the process of function parameter management and validation. This helps developers build more robust and dynamic systems by automating key aspects of argument handling and reducing the potential for errors in function invocation.\n\n## FILE 1: questionary/utils.py\n\n- FUNCTION NAME: used_kwargs\n  - SIGNATURE: def used_kwargs(kwargs: Dict[str, Any], func: Callable[..., Any]) -> Dict[str, Any]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a filtered dictionary of keyword arguments (`kwargs`) that are applicable for a given function (`func`). This function checks the parameters of `func` and only retains those keys in `kwargs` that match the parameter names. It utilizes the `arguments_of` function to retrieve the valid parameter names for `func`.\n\nArgs:\n    kwargs (Dict[str, Any]): A dictionary of all available keyword arguments.\n    func (Callable[..., Any]): The function for which the compatibility of `kwargs` is evaluated.\n\nReturns:\n    Dict[str, Any]: A subset of `kwargs` that contains only the keys that are accepted by `func`.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - questionary/utils.py:arguments_of\n\n- FUNCTION NAME: missing_arguments\n  - SIGNATURE: def missing_arguments(func: Callable[..., Any], argdict: Dict[str, Any]) -> Set[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a set of arguments that are required by the function `func` but are missing from the provided dictionary `argdict`.\n\nParameters:\n- func (Callable[..., Any]): The function whose required arguments are to be checked.\n- argdict (Dict[str, Any]): A dictionary containing argument names and their corresponding values.\n\nReturns:\n- Set[str]: A set of argument names that are required by `func` but not present in `argdict`.\n\nThis function relies on the `required_arguments` helper function to identify which arguments need to be included and returns the difference between these required arguments and the keys available in `argdict`. It does not use any external constants or variables within its processing.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - questionary/utils.py:required_arguments\n\n- FUNCTION NAME: required_arguments\n  - SIGNATURE: def required_arguments(func: Callable[..., Any]) -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a list of parameter names for the given function that do not have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve required parameter names.\n\nReturns:\n- List[str]: A list of parameter names that are required (i.e., those without default values).\n\nThe function relies on `default_values_of` to identify parameters with defaults and `arguments_of` to obtain all parameter names. If the function has any parameters with default values, only the preceding parameters are considered required, effectively filtering out any that can be omitted when calling the function.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - questionary/utils.py:arguments_of\n    - questionary/utils.py:default_values_of\n\n- FUNCTION NAME: default_values_of\n  - SIGNATURE: def default_values_of(func: Callable[..., Any]) -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a list of parameter names from the given function `func` that have a default value.\n\nParameters:\n- func (Callable[..., Any]): The function for which to retrieve parameter names with default values.\n\nReturns:\n- List[str]: A list containing the names of parameters from `func` that either have a default value or are not of kind POSITIONAL_OR_KEYWORD (e.g., *args or **kwargs).\n\nThis function relies on the `inspect` module to analyze the function's signature and determine its parameters. It utilizes the `inspect.Parameter` class to check whether each parameter has a default value set.\n\"\"\"\n```\n\n- FUNCTION NAME: arguments_of\n  - SIGNATURE: def arguments_of(func: Callable[..., Any]) -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturn the parameter names of the given function ``func`` as a list.\n\nParameters:\n- func (Callable[..., Any]): The function for which parameter names are to be retrieved.\n\nReturns:\n- List[str]: A list containing the names of all parameters of the function.\n\nDependencies:\nThis function utilizes the `inspect` module to access the function's signature and retrieve parameter names. It is part of a collection of utility functions that help manage function arguments, including identifying default values and required arguments. There are no constants or variables used within this function.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "questionary/utils.py": "import inspect\nfrom typing import Any\nfrom typing import Callable\nfrom typing import Dict\nfrom typing import List\nfrom typing import Set\nACTIVATED_ASYNC_MODE = False\n\ndef is_prompt_toolkit_3() -> bool:\n    from prompt_toolkit import __version__ as ptk_version\n    return ptk_version.startswith('3.')\n\nasync def activate_prompt_toolkit_async_mode() -> None:\n    \"\"\"Configure prompt toolkit to use the asyncio event loop.\n\n    Needs to be async, so we use the right event loop in py 3.5\"\"\"\n    global ACTIVATED_ASYNC_MODE\n    if not is_prompt_toolkit_3():\n        import prompt_toolkit as pt\n        pt.eventloop.use_asyncio_event_loop()\n    ACTIVATED_ASYNC_MODE = True"
  },
  "call_tree": {
    "tests/test_utils.py:test_default_values_of": {
      "questionary/utils.py:default_values_of": {}
    },
    "tests/test_utils.py:test_default_values_of_no_args": {
      "questionary/utils.py:default_values_of": {}
    },
    "tests/test_utils.py:test_arguments_of": {
      "questionary/utils.py:arguments_of": {}
    },
    "tests/test_utils.py:test_arguments_of_no_args": {
      "questionary/utils.py:arguments_of": {}
    },
    "tests/test_utils.py:test_filter_kwargs": {
      "questionary/utils.py:used_kwargs": {
        "questionary/utils.py:arguments_of": {}
      }
    },
    "tests/test_utils.py:test_filter_kwargs_empty": {
      "questionary/utils.py:used_kwargs": {
        "questionary/utils.py:arguments_of": {}
      }
    },
    "tests/test_utils.py:test_required_arguments_of": {
      "questionary/utils.py:required_arguments": {
        "questionary/utils.py:default_values_of": {},
        "questionary/utils.py:arguments_of": {}
      }
    },
    "tests/test_utils.py:test_required_arguments_of_no_args": {
      "questionary/utils.py:required_arguments": {
        "questionary/utils.py:default_values_of": {},
        "questionary/utils.py:arguments_of": {}
      }
    },
    "tests/test_utils.py:test_missing_arguments": {
      "questionary/utils.py:missing_arguments": {
        "questionary/utils.py:required_arguments": {
          "questionary/utils.py:default_values_of": {},
          "questionary/utils.py:arguments_of": {}
        }
      }
    },
    "tests/test_utils.py:test_missing_arguments_of_no_args": {
      "questionary/utils.py:missing_arguments": {
        "questionary/utils.py:required_arguments": {
          "questionary/utils.py:default_values_of": {},
          "questionary/utils.py:arguments_of": {}
        }
      }
    }
  }
}