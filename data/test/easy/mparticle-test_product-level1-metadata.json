{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_product",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_product.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.product import Product\n\n\nclass TestProduct(unittest.TestCase):\n    \"\"\" Product unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testProduct(self):\n        \"\"\"\n        Test Product\n        \"\"\"\n        model = mparticle.models.product.Product()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/product.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass Product(object):\n\n    def __init__(self, id=None, name=None, brand=None, category=None, variant=None, position=None, price=None, quantity=None, coupon_code=None, added_to_cart_time_ms=None, total_product_amount=None, custom_attributes=None):\n        \"\"\"\n        Product - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'id': 'str',\n            'name': 'str',\n            'brand': 'str',\n            'category': 'str',\n            'variant': 'str',\n            'position': 'int',\n            'price': 'float',\n            'quantity': 'float',\n            'coupon_code': 'str',\n            'added_to_cart_time_ms': 'int',\n            'total_product_amount': 'float',\n            'custom_attributes': 'dict(str, str)'\n        }\n\n        self.attribute_map = {\n            'id': 'id',\n            'name': 'name',\n            'brand': 'brand',\n            'category': 'category',\n            'variant': 'variant',\n            'position': 'position',\n            'price': 'price',\n            'quantity': 'quantity',\n            'coupon_code': 'coupon_code',\n            'added_to_cart_time_ms': 'added_to_cart_time_ms',\n            'total_product_amount': 'total_product_amount',\n            'custom_attributes': 'custom_attributes'\n        }\n\n        self._id = id\n        self._name = name\n        self._brand = brand\n        self._category = category\n        self._variant = variant\n        self._position = position\n        self._price = price\n        self._quantity = quantity\n        self._coupon_code = coupon_code\n        self._added_to_cart_time_ms = added_to_cart_time_ms\n        self._total_product_amount = total_product_amount\n        self._custom_attributes = custom_attributes\n\n    @property\n    def id(self):\n        \"\"\"\n        Gets the id of this Product.\n\n\n        :return: The id of this Product.\n        :rtype: str\n        \"\"\"\n        return self._id\n\n    @id.setter\n    def id(self, id):\n        \"\"\"\n        Sets the id of this Product.\n\n\n        :param id: The id of this Product.\n        :type: str\n        \"\"\"\n\n        self._id = id\n\n    @property\n    def name(self):\n        \"\"\"\n        Gets the name of this Product.\n\n\n        :return: The name of this Product.\n        :rtype: str\n        \"\"\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        \"\"\"\n        Sets the name of this Product.\n\n\n        :param name: The name of this Product.\n        :type: str\n        \"\"\"\n\n        self._name = name\n\n    @property\n    def brand(self):\n        \"\"\"\n        Gets the brand of this Product.\n\n\n        :return: The brand of this Product.\n        :rtype: str\n        \"\"\"\n        return self._brand\n\n    @brand.setter\n    def brand(self, brand):\n        \"\"\"\n        Sets the brand of this Product.\n\n\n        :param brand: The brand of this Product.\n        :type: str\n        \"\"\"\n\n        self._brand = brand\n\n    @property\n    def category(self):\n        \"\"\"\n        Gets the category of this Product.\n\n\n        :return: The category of this Product.\n        :rtype: str\n        \"\"\"\n        return self._category\n\n    @category.setter\n    def category(self, category):\n        \"\"\"\n        Sets the category of this Product.\n\n\n        :param category: The category of this Product.\n        :type: str\n        \"\"\"\n\n        self._category = category\n\n    @property\n    def variant(self):\n        \"\"\"\n        Gets the variant of this Product.\n\n\n        :return: The variant of this Product.\n        :rtype: str\n        \"\"\"\n        return self._variant\n\n    @variant.setter\n    def variant(self, variant):\n        \"\"\"\n        Sets the variant of this Product.\n\n\n        :param variant: The variant of this Product.\n        :type: str\n        \"\"\"\n\n        self._variant = variant\n\n    @property\n    def position(self):\n        \"\"\"\n        Gets the position of this Product.\n\n\n        :return: The position of this Product.\n        :rtype: int\n        \"\"\"\n        return self._position\n\n    @position.setter\n    def position(self, position):\n        \"\"\"\n        Sets the position of this Product.\n\n\n        :param position: The position of this Product.\n        :type: int\n        \"\"\"\n\n        self._position = position\n\n    @property\n    def price(self):\n        \"\"\"\n        Gets the price of this Product.\n\n\n        :return: The price of this Product.\n        :rtype: float\n        \"\"\"\n        return self._price\n\n    @price.setter\n    def price(self, price):\n        \"\"\"\n        Sets the price of this Product.\n\n\n        :param price: The price of this Product.\n        :type: float\n        \"\"\"\n\n        self._price = price\n\n    @property\n    def quantity(self):\n        \"\"\"\n        Gets the quantity of this Product.\n\n\n        :return: The quantity of this Product.\n        :rtype: float\n        \"\"\"\n        return self._quantity\n\n    @quantity.setter\n    def quantity(self, quantity):\n        \"\"\"\n        Sets the quantity of this Product.\n\n\n        :param quantity: The quantity of this Product.\n        :type: float\n        \"\"\"\n\n        self._quantity = quantity\n\n    @property\n    def coupon_code(self):\n        \"\"\"\n        Gets the coupon_code of this Product.\n\n\n        :return: The coupon_code of this Product.\n        :rtype: str\n        \"\"\"\n        return self._coupon_code\n\n    @coupon_code.setter\n    def coupon_code(self, coupon_code):\n        \"\"\"\n        Sets the coupon_code of this Product.\n\n\n        :param coupon_code: The coupon_code of this Product.\n        :type: str\n        \"\"\"\n\n        self._coupon_code = coupon_code\n\n    @property\n    def added_to_cart_time_ms(self):\n        \"\"\"\n        Gets the added_to_cart_time_ms of this Product.\n\n\n        :return: The added_to_cart_time_ms of this Product.\n        :rtype: int\n        \"\"\"\n        return self._added_to_cart_time_ms\n\n    @added_to_cart_time_ms.setter\n    def added_to_cart_time_ms(self, added_to_cart_time_ms):\n        \"\"\"\n        Sets the added_to_cart_time_ms of this Product.\n\n\n        :param added_to_cart_time_ms: The added_to_cart_time_ms of this Product.\n        :type: int\n        \"\"\"\n\n        self._added_to_cart_time_ms = added_to_cart_time_ms\n\n    @property\n    def total_product_amount(self):\n        \"\"\"\n        Gets the total_product_amount of this Product.\n\n\n        :return: The total_product_amount of this Product.\n        :rtype: float\n        \"\"\"\n        return self._total_product_amount\n\n    @total_product_amount.setter\n    def total_product_amount(self, total_product_amount):\n        \"\"\"\n        Sets the total_product_amount of this Product.\n\n\n        :param total_product_amount: The total_product_amount of this Product.\n        :type: float\n        \"\"\"\n\n        self._total_product_amount = total_product_amount\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this Product.\n\n\n        :return: The custom_attributes of this Product.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this Product.\n\n\n        :param custom_attributes: The custom_attributes of this Product.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_attributes = custom_attributes\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/product.py": {
      "Product.__init__": {
        "code": "    def __init__(self, id=None, name=None, brand=None, category=None, variant=None, position=None, price=None, quantity=None, coupon_code=None, added_to_cart_time_ms=None, total_product_amount=None, custom_attributes=None):\n        \"\"\"Initializes a Product instance, representing a product model in the mParticle Event API.\n\n    This constructor sets the attributes for a product, including its identifier, name, brand, category, variant, position in a list, price, quantity, applicable coupon code, timestamp when it was added to the cart, total product amount, and any custom attributes.\n\n    Parameters:\n    - id (str, optional): Unique identifier for the product.\n    - name (str, optional): Name of the product.\n    - brand (str, optional): Brand of the product.\n    - category (str, optional): Category of the product.\n    - variant (str, optional): Variant of the product (e.g., size, color).\n    - position (int, optional): Position of the product in a list (e.g., order in the cart).\n    - price (float, optional): Price of the product.\n    - quantity (float, optional): Quantity of the product being purchased.\n    - coupon_code (str, optional): Coupon code applicable to the product.\n    - added_to_cart_time_ms (int, optional): Timestamp in milliseconds when the product was added to the cart.\n    - total_product_amount (float, optional): Total amount for the product based on price and quantity.\n    - custom_attributes (dict, optional): Custom attributes related to the product, specified as key-value pairs.\n\n    The constructor also initializes two dictionaries: `swagger_types`, which maps attribute names to their data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys. These mappings assist in serialization and deserialization of product instances when communicating with the mParticle API.\"\"\"\n        '\\n        Product - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'id': 'str', 'name': 'str', 'brand': 'str', 'category': 'str', 'variant': 'str', 'position': 'int', 'price': 'float', 'quantity': 'float', 'coupon_code': 'str', 'added_to_cart_time_ms': 'int', 'total_product_amount': 'float', 'custom_attributes': 'dict(str, str)'}\n        self.attribute_map = {'id': 'id', 'name': 'name', 'brand': 'brand', 'category': 'category', 'variant': 'variant', 'position': 'position', 'price': 'price', 'quantity': 'quantity', 'coupon_code': 'coupon_code', 'added_to_cart_time_ms': 'added_to_cart_time_ms', 'total_product_amount': 'total_product_amount', 'custom_attributes': 'custom_attributes'}\n        self._id = id\n        self._name = name\n        self._brand = brand\n        self._category = category\n        self._variant = variant\n        self._position = position\n        self._price = price\n        self._quantity = quantity\n        self._coupon_code = coupon_code\n        self._added_to_cart_time_ms = added_to_cart_time_ms\n        self._total_product_amount = total_product_amount\n        self._custom_attributes = custom_attributes",
        "docstring": "Initializes a Product instance, representing a product model in the mParticle Event API.\n\nThis constructor sets the attributes for a product, including its identifier, name, brand, category, variant, position in a list, price, quantity, applicable coupon code, timestamp when it was added to the cart, total product amount, and any custom attributes.\n\nParameters:\n- id (str, optional): Unique identifier for the product.\n- name (str, optional): Name of the product.\n- brand (str, optional): Brand of the product.\n- category (str, optional): Category of the product.\n- variant (str, optional): Variant of the product (e.g., size, color).\n- position (int, optional): Position of the product in a list (e.g., order in the cart).\n- price (float, optional): Price of the product.\n- quantity (float, optional): Quantity of the product being purchased.\n- coupon_code (str, optional): Coupon code applicable to the product.\n- added_to_cart_time_ms (int, optional): Timestamp in milliseconds when the product was added to the cart.\n- total_product_amount (float, optional): Total amount for the product based on price and quantity.\n- custom_attributes (dict, optional): Custom attributes related to the product, specified as key-value pairs.\n\nThe constructor also initializes two dictionaries: `swagger_types`, which maps attribute names to their data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys. These mappings assist in serialization and deserialization of product instances when communicating with the mParticle API.",
        "signature": "def __init__(self, id=None, name=None, brand=None, category=None, variant=None, position=None, price=None, quantity=None, coupon_code=None, added_to_cart_time_ms=None, total_product_amount=None, custom_attributes=None):",
        "type": "Method",
        "class_signature": "class Product(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_product\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 product.py\n            \u2514\u2500\u2500 Product.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe mParticle module facilitates interaction with the mParticle Event API, enabling seamless integration of product-related data into the mParticle ecosystem. This module provides functionality for defining, managing, and validating product objects, allowing developers to efficiently structure and send event data for products. By streamlining the integration and testing process for product-level data, it addresses the challenge of ensuring consistent, high-quality data flow between an application\u2019s backend and mParticle's customer data platform. This ensures that developers can focus on enhancing their applications' functionality while leveraging mParticle for analytics and data-driven decision-making.\n\n## FILE 1: mparticle/models/product.py\n\n- CLASS METHOD: Product.__init__\n  - CLASS SIGNATURE: class Product(object):\n  - SIGNATURE: def __init__(self, id=None, name=None, brand=None, category=None, variant=None, position=None, price=None, quantity=None, coupon_code=None, added_to_cart_time_ms=None, total_product_amount=None, custom_attributes=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a Product instance, representing a product model in the mParticle Event API.\n\nThis constructor sets the attributes for a product, including its identifier, name, brand, category, variant, position in a list, price, quantity, applicable coupon code, timestamp when it was added to the cart, total product amount, and any custom attributes.\n\nParameters:\n- id (str, optional): Unique identifier for the product.\n- name (str, optional): Name of the product.\n- brand (str, optional): Brand of the product.\n- category (str, optional): Category of the product.\n- variant (str, optional): Variant of the product (e.g., size, color).\n- position (int, optional): Position of the product in a list (e.g., order in the cart).\n- price (float, optional): Price of the product.\n- quantity (float, optional): Quantity of the product being purchased.\n- coupon_code (str, optional): Coupon code applicable to the product.\n- added_to_cart_time_ms (int, optional): Timestamp in milliseconds when the product was added to the cart.\n- total_product_amount (float, optional): Total amount for the product based on price and quantity.\n- custom_attributes (dict, optional): Custom attributes related to the product, specified as key-value pairs.\n\nThe constructor also initializes two dictionaries: `swagger_types`, which maps attribute names to their data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys. These mappings assist in serialization and deserialization of product instances when communicating with the mParticle API.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/product.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass Product(object):\n\n    @property\n    def id(self):\n        \"\"\"\n        Gets the id of this Product.\n\n\n        :return: The id of this Product.\n        :rtype: str\n        \"\"\"\n        return self._id\n\n    @id.setter\n    def id(self, id):\n        \"\"\"\n        Sets the id of this Product.\n\n\n        :param id: The id of this Product.\n        :type: str\n        \"\"\"\n        self._id = id\n\n    @property\n    def name(self):\n        \"\"\"\n        Gets the name of this Product.\n\n\n        :return: The name of this Product.\n        :rtype: str\n        \"\"\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        \"\"\"\n        Sets the name of this Product.\n\n\n        :param name: The name of this Product.\n        :type: str\n        \"\"\"\n        self._name = name\n\n    @property\n    def brand(self):\n        \"\"\"\n        Gets the brand of this Product.\n\n\n        :return: The brand of this Product.\n        :rtype: str\n        \"\"\"\n        return self._brand\n\n    @brand.setter\n    def brand(self, brand):\n        \"\"\"\n        Sets the brand of this Product.\n\n\n        :param brand: The brand of this Product.\n        :type: str\n        \"\"\"\n        self._brand = brand\n\n    @property\n    def category(self):\n        \"\"\"\n        Gets the category of this Product.\n\n\n        :return: The category of this Product.\n        :rtype: str\n        \"\"\"\n        return self._category\n\n    @category.setter\n    def category(self, category):\n        \"\"\"\n        Sets the category of this Product.\n\n\n        :param category: The category of this Product.\n        :type: str\n        \"\"\"\n        self._category = category\n\n    @property\n    def variant(self):\n        \"\"\"\n        Gets the variant of this Product.\n\n\n        :return: The variant of this Product.\n        :rtype: str\n        \"\"\"\n        return self._variant\n\n    @variant.setter\n    def variant(self, variant):\n        \"\"\"\n        Sets the variant of this Product.\n\n\n        :param variant: The variant of this Product.\n        :type: str\n        \"\"\"\n        self._variant = variant\n\n    @property\n    def position(self):\n        \"\"\"\n        Gets the position of this Product.\n\n\n        :return: The position of this Product.\n        :rtype: int\n        \"\"\"\n        return self._position\n\n    @position.setter\n    def position(self, position):\n        \"\"\"\n        Sets the position of this Product.\n\n\n        :param position: The position of this Product.\n        :type: int\n        \"\"\"\n        self._position = position\n\n    @property\n    def price(self):\n        \"\"\"\n        Gets the price of this Product.\n\n\n        :return: The price of this Product.\n        :rtype: float\n        \"\"\"\n        return self._price\n\n    @price.setter\n    def price(self, price):\n        \"\"\"\n        Sets the price of this Product.\n\n\n        :param price: The price of this Product.\n        :type: float\n        \"\"\"\n        self._price = price\n\n    @property\n    def quantity(self):\n        \"\"\"\n        Gets the quantity of this Product.\n\n\n        :return: The quantity of this Product.\n        :rtype: float\n        \"\"\"\n        return self._quantity\n\n    @quantity.setter\n    def quantity(self, quantity):\n        \"\"\"\n        Sets the quantity of this Product.\n\n\n        :param quantity: The quantity of this Product.\n        :type: float\n        \"\"\"\n        self._quantity = quantity\n\n    @property\n    def coupon_code(self):\n        \"\"\"\n        Gets the coupon_code of this Product.\n\n\n        :return: The coupon_code of this Product.\n        :rtype: str\n        \"\"\"\n        return self._coupon_code\n\n    @coupon_code.setter\n    def coupon_code(self, coupon_code):\n        \"\"\"\n        Sets the coupon_code of this Product.\n\n\n        :param coupon_code: The coupon_code of this Product.\n        :type: str\n        \"\"\"\n        self._coupon_code = coupon_code\n\n    @property\n    def added_to_cart_time_ms(self):\n        \"\"\"\n        Gets the added_to_cart_time_ms of this Product.\n\n\n        :return: The added_to_cart_time_ms of this Product.\n        :rtype: int\n        \"\"\"\n        return self._added_to_cart_time_ms\n\n    @added_to_cart_time_ms.setter\n    def added_to_cart_time_ms(self, added_to_cart_time_ms):\n        \"\"\"\n        Sets the added_to_cart_time_ms of this Product.\n\n\n        :param added_to_cart_time_ms: The added_to_cart_time_ms of this Product.\n        :type: int\n        \"\"\"\n        self._added_to_cart_time_ms = added_to_cart_time_ms\n\n    @property\n    def total_product_amount(self):\n        \"\"\"\n        Gets the total_product_amount of this Product.\n\n\n        :return: The total_product_amount of this Product.\n        :rtype: float\n        \"\"\"\n        return self._total_product_amount\n\n    @total_product_amount.setter\n    def total_product_amount(self, total_product_amount):\n        \"\"\"\n        Sets the total_product_amount of this Product.\n\n\n        :param total_product_amount: The total_product_amount of this Product.\n        :type: float\n        \"\"\"\n        self._total_product_amount = total_product_amount\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this Product.\n\n\n        :return: The custom_attributes of this Product.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this Product.\n\n\n        :param custom_attributes: The custom_attributes of this Product.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_attributes = custom_attributes\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_product.py:TestProduct:testProduct": {
      "mparticle/models/product.py:Product:__init__": {}
    }
  }
}