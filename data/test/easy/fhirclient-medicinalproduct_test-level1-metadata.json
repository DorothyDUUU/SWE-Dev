{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproduct_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproduct_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproduct\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProduct\", js[\"resourceType\"])\n        return medicinalproduct.MedicinalProduct(js)\n    \n    def testMedicinalProduct1(self):\n        inst = self.instantiate_from(\"medicinalproduct-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProduct instance\")\n        self.implMedicinalProduct1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProduct\", js[\"resourceType\"])\n        inst2 = medicinalproduct.MedicinalProduct(js)\n        self.implMedicinalProduct1(inst2)\n    \n    def implMedicinalProduct1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://ema.europa.eu/example/MPID\")\n        self.assertEqual(inst.identifier[0].value, \"{mpid}\")\n        self.assertEqual(inst.manufacturingBusinessOperation[0].authorisationReferenceNumber.system, \"http://ema.europa.eu/example/manufacturingAuthorisationReferenceNumber\")\n        self.assertEqual(inst.manufacturingBusinessOperation[0].authorisationReferenceNumber.value, \"1324TZ\")\n        self.assertEqual(inst.manufacturingBusinessOperation[0].effectiveDate.datetime, FHIRDateTime(\"2013-03-15\").datetime)\n        self.assertEqual(inst.manufacturingBusinessOperation[0].effectiveDate.as_json(), \"2013-03-15\")\n        self.assertEqual(inst.manufacturingBusinessOperation[0].operationType.coding[0].code, \"Batchrelease\")\n        self.assertEqual(inst.manufacturingBusinessOperation[0].operationType.coding[0].system, \"http://ema.europa.eu/example/manufacturingOperationType\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name[0].countryLanguage[0].country.coding[0].code, \"EU\")\n        self.assertEqual(inst.name[0].countryLanguage[0].country.coding[0].system, \"http://ema.europa.eu/example/countryCode\")\n        self.assertEqual(inst.name[0].countryLanguage[0].jurisdiction.coding[0].code, \"EU\")\n        self.assertEqual(inst.name[0].countryLanguage[0].jurisdiction.coding[0].system, \"http://ema.europa.eu/example/jurisdictionCode\")\n        self.assertEqual(inst.name[0].countryLanguage[0].language.coding[0].code, \"EN\")\n        self.assertEqual(inst.name[0].countryLanguage[0].language.coding[0].system, \"http://ema.europa.eu/example/languageCode\")\n        self.assertEqual(inst.name[0].namePart[0].part, \"Equilidem\")\n        self.assertEqual(inst.name[0].namePart[0].type.code, \"INV\")\n        self.assertEqual(inst.name[0].namePart[1].part, \"2.5 mg\")\n        self.assertEqual(inst.name[0].namePart[1].type.code, \"STR\")\n        self.assertEqual(inst.name[0].namePart[2].part, \"film-coated tablets\")\n        self.assertEqual(inst.name[0].namePart[2].type.code, \"FRM\")\n        self.assertEqual(inst.name[0].productName, \"Equilidem 2.5 mg film-coated tablets\")\n        self.assertEqual(inst.productClassification[0].coding[0].code, \"WHOAnatomicalTherapeuticChemicalATCClassificationSystem|B01AF02\")\n        self.assertEqual(inst.productClassification[0].coding[0].system, \"http://ema.europa.eu/example/WHOAnatomicalTherapeuticChemicalATCClassificationSystem\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/medicinalproduct.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProduct).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProduct(domainresource.DomainResource):\n    \"\"\" Detailed definition of a medicinal product, typically for uses other than\n    direct patient care (e.g. regulatory use).\n    \"\"\"\n    \n    resource_type = \"MedicinalProduct\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additionalMonitoringIndicator = None\n        \"\"\" Whether the Medicinal Product is subject to additional monitoring\n        for regulatory reasons.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.attachedDocument = None\n        \"\"\" Supporting documentation, typically for regulatory submission.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.clinicalTrial = None\n        \"\"\" Clinical trials or studies that this product is involved in.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.combinedPharmaceuticalDoseForm = None\n        \"\"\" The dose form for a single part product, or combined form of a\n        multiple part product.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" A product specific contact, person (in a role), or an organization.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.crossReference = None\n        \"\"\" Reference to another product, e.g. for linking authorised to\n        investigational product.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.domain = None\n        \"\"\" If this medicine applies to human or veterinary uses.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier for this product. Could be an MPID.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.legalStatusOfSupply = None\n        \"\"\" The legal status of supply of the medicinal product as classified\n        by the regulator.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturingBusinessOperation = None\n        \"\"\" An operation applied to the product, for manufacturing or\n        adminsitrative purpose.\n        List of `MedicinalProductManufacturingBusinessOperation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.marketingStatus = None\n        \"\"\" Marketing status of the medicinal product, in contrast to marketing\n        authorizaton.\n        List of `MarketingStatus` items (represented as `dict` in JSON). \"\"\"\n        \n        self.masterFile = None\n        \"\"\" A master file for to the medicinal product (e.g. Pharmacovigilance\n        System Master File).\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" The product's name, including full name and possibly coded parts.\n        List of `MedicinalProductName` items (represented as `dict` in JSON). \"\"\"\n        \n        self.packagedMedicinalProduct = None\n        \"\"\" Package representation for the product.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.paediatricUseIndicator = None\n        \"\"\" If authorised for use in children.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.pharmaceuticalProduct = None\n        \"\"\" Pharmaceutical aspects of product.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.productClassification = None\n        \"\"\" Allows the product to be classified by various systems.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specialDesignation = None\n        \"\"\" Indicates if the medicinal product has an orphan designation for\n        the treatment of a rare disease.\n        List of `MedicinalProductSpecialDesignation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specialMeasures = None\n        \"\"\" Whether the Medicinal Product is subject to special measures for\n        regulatory reasons.\n        List of `str` items. \"\"\"\n        \n        self.type = None\n        \"\"\" Regulatory type, e.g. Investigational or Authorized.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProduct, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProduct, self).elementProperties()\n        js.extend([\n            (\"additionalMonitoringIndicator\", \"additionalMonitoringIndicator\", codeableconcept.CodeableConcept, False, None, False),\n            (\"attachedDocument\", \"attachedDocument\", fhirreference.FHIRReference, True, None, False),\n            (\"clinicalTrial\", \"clinicalTrial\", fhirreference.FHIRReference, True, None, False),\n            (\"combinedPharmaceuticalDoseForm\", \"combinedPharmaceuticalDoseForm\", codeableconcept.CodeableConcept, False, None, False),\n            (\"contact\", \"contact\", fhirreference.FHIRReference, True, None, False),\n            (\"crossReference\", \"crossReference\", identifier.Identifier, True, None, False),\n            (\"domain\", \"domain\", coding.Coding, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"legalStatusOfSupply\", \"legalStatusOfSupply\", codeableconcept.CodeableConcept, False, None, False),\n            (\"manufacturingBusinessOperation\", \"manufacturingBusinessOperation\", MedicinalProductManufacturingBusinessOperation, True, None, False),\n            (\"marketingStatus\", \"marketingStatus\", marketingstatus.MarketingStatus, True, None, False),\n            (\"masterFile\", \"masterFile\", fhirreference.FHIRReference, True, None, False),\n            (\"name\", \"name\", MedicinalProductName, True, None, True),\n            (\"packagedMedicinalProduct\", \"packagedMedicinalProduct\", fhirreference.FHIRReference, True, None, False),\n            (\"paediatricUseIndicator\", \"paediatricUseIndicator\", codeableconcept.CodeableConcept, False, None, False),\n            (\"pharmaceuticalProduct\", \"pharmaceuticalProduct\", fhirreference.FHIRReference, True, None, False),\n            (\"productClassification\", \"productClassification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"specialDesignation\", \"specialDesignation\", MedicinalProductSpecialDesignation, True, None, False),\n            (\"specialMeasures\", \"specialMeasures\", str, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductManufacturingBusinessOperation(backboneelement.BackboneElement):\n    \"\"\" An operation applied to the product, for manufacturing or adminsitrative\n    purpose.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductManufacturingBusinessOperation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.authorisationReferenceNumber = None\n        \"\"\" Regulatory authorization reference number.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.confidentialityIndicator = None\n        \"\"\" To indicate if this proces is commercially confidential.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.effectiveDate = None\n        \"\"\" Regulatory authorization date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" The manufacturer or establishment associated with the process.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.operationType = None\n        \"\"\" The type of manufacturing operation.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.regulator = None\n        \"\"\" A regulator which oversees the operation.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductManufacturingBusinessOperation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductManufacturingBusinessOperation, self).elementProperties()\n        js.extend([\n            (\"authorisationReferenceNumber\", \"authorisationReferenceNumber\", identifier.Identifier, False, None, False),\n            (\"confidentialityIndicator\", \"confidentialityIndicator\", codeableconcept.CodeableConcept, False, None, False),\n            (\"effectiveDate\", \"effectiveDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, True, None, False),\n            (\"operationType\", \"operationType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"regulator\", \"regulator\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductName(backboneelement.BackboneElement):\n    \"\"\" The product's name, including full name and possibly coded parts.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductName\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.countryLanguage = None\n        \"\"\" Country where the name applies.\n        List of `MedicinalProductNameCountryLanguage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.namePart = None\n        \"\"\" Coding words or phrases of the name.\n        List of `MedicinalProductNameNamePart` items (represented as `dict` in JSON). \"\"\"\n        \n        self.productName = None\n        \"\"\" The full product name.\n        Type `str`. \"\"\"\n        \n        super(MedicinalProductName, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductName, self).elementProperties()\n        js.extend([\n            (\"countryLanguage\", \"countryLanguage\", MedicinalProductNameCountryLanguage, True, None, False),\n            (\"namePart\", \"namePart\", MedicinalProductNameNamePart, True, None, False),\n            (\"productName\", \"productName\", str, False, None, True),\n        ])\n        return js\n\n\nclass MedicinalProductNameCountryLanguage(backboneelement.BackboneElement):\n    \"\"\" Country where the name applies.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductNameCountryLanguage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.country = None\n        \"\"\" Country code for where this name applies.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Jurisdiction code for where this name applies.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.language = None\n        \"\"\" Language code for this name.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductNameCountryLanguage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductNameCountryLanguage, self).elementProperties()\n        js.extend([\n            (\"country\", \"country\", codeableconcept.CodeableConcept, False, None, True),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, False, None, False),\n            (\"language\", \"language\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicinalProductNameNamePart(backboneelement.BackboneElement):\n    \"\"\" Coding words or phrases of the name.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductNameNamePart\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.part = None\n        \"\"\" A fragment of a product name.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Idenifying type for this part of the name (e.g. strength part).\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductNameNamePart, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductNameNamePart, self).elementProperties()\n        js.extend([\n            (\"part\", \"part\", str, False, None, True),\n            (\"type\", \"type\", coding.Coding, False, None, True),\n        ])\n        return js\n\n\nclass MedicinalProductSpecialDesignation(backboneelement.BackboneElement):\n    \"\"\" Indicates if the medicinal product has an orphan designation for the\n    treatment of a rare disease.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductSpecialDesignation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.date = None\n        \"\"\" Date when the designation was granted.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Identifier for the designation, or procedure number.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.indicationCodeableConcept = None\n        \"\"\" Condition for which the medicinal use applies.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.indicationReference = None\n        \"\"\" Condition for which the medicinal use applies.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.intendedUse = None\n        \"\"\" The intended use of the product, e.g. prevention, treatment.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.species = None\n        \"\"\" Animal species for which this applies.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" For example granted, pending, expired or withdrawn.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The type of special designation, e.g. orphan drug, minor use.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductSpecialDesignation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductSpecialDesignation, self).elementProperties()\n        js.extend([\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"indicationCodeableConcept\", \"indicationCodeableConcept\", codeableconcept.CodeableConcept, False, \"indication\", False),\n            (\"indicationReference\", \"indicationReference\", fhirreference.FHIRReference, False, \"indication\", False),\n            (\"intendedUse\", \"intendedUse\", codeableconcept.CodeableConcept, False, None, False),\n            (\"species\", \"species\", codeableconcept.CodeableConcept, False, None, False),\n            (\"status\", \"status\", codeableconcept.CodeableConcept, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import marketingstatus\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/medicinalproduct.py": {
      "MedicinalProduct.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProduct instance with valid properties representing a detailed definition of a medicinal product, typically for regulatory use.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the attributes of the MedicinalProduct. Each key corresponds to a valid property such as `additionalMonitoringIndicator`, `attachedDocument`, `clinicalTrial`, etc.\n- strict (bool, optional): If set to True (default), invalid variables in jsondict will raise a TypeError; if False, they will not.\n\nAttributes initialized:\n- additionalMonitoringIndicator: Indicates if the product is subject to additional monitoring.\n- attachedDocument: List of supporting documentation items.\n- clinicalTrial: List of clinical trial references.\n- combinedPharmaceuticalDoseForm: Represents the dose form of the product.\n- contact: List of product-specific contacts.\n- crossReference: List of references to other products.\n- domain: Indicates whether the product is for human or veterinary use.\n- identifier: List of business identifiers.\n- legalStatusOfSupply: Represents the legal classification.\n- manufacturingBusinessOperation: List of operations related to the product's manufacturing.\n- marketingStatus: List of marketing status items.\n- masterFile: List of references to associated master files.\n- name: List of names associated with the product.\n- packagedMedicinalProduct: List of packaged product references.\n- paediatricUseIndicator: Indicates if the product is authorized for children.\n- pharmaceuticalProduct: List of pharmaceutical references.\n- productClassification: Allows classification of the product.\n- specialDesignation: List indicating orphan designation status.\n- specialMeasures: List indicating regulatory special measures.\n- type: Represents the regulatory type of the product.\n\nThis class depends on other classes such as CodeableConcept, FHIRReference, Identifier, etc., which define the structure of the attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.additionalMonitoringIndicator = None\n        ' Whether the Medicinal Product is subject to additional monitoring\\n        for regulatory reasons.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.attachedDocument = None\n        ' Supporting documentation, typically for regulatory submission.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.clinicalTrial = None\n        ' Clinical trials or studies that this product is involved in.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.combinedPharmaceuticalDoseForm = None\n        ' The dose form for a single part product, or combined form of a\\n        multiple part product.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.contact = None\n        ' A product specific contact, person (in a role), or an organization.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.crossReference = None\n        ' Reference to another product, e.g. for linking authorised to\\n        investigational product.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.domain = None\n        ' If this medicine applies to human or veterinary uses.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier for this product. Could be an MPID.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.legalStatusOfSupply = None\n        ' The legal status of supply of the medicinal product as classified\\n        by the regulator.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.manufacturingBusinessOperation = None\n        ' An operation applied to the product, for manufacturing or\\n        adminsitrative purpose.\\n        List of `MedicinalProductManufacturingBusinessOperation` items (represented as `dict` in JSON). '\n        self.marketingStatus = None\n        ' Marketing status of the medicinal product, in contrast to marketing\\n        authorizaton.\\n        List of `MarketingStatus` items (represented as `dict` in JSON). '\n        self.masterFile = None\n        ' A master file for to the medicinal product (e.g. Pharmacovigilance\\n        System Master File).\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.name = None\n        \" The product's name, including full name and possibly coded parts.\\n        List of `MedicinalProductName` items (represented as `dict` in JSON). \"\n        self.packagedMedicinalProduct = None\n        ' Package representation for the product.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.paediatricUseIndicator = None\n        ' If authorised for use in children.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.pharmaceuticalProduct = None\n        ' Pharmaceutical aspects of product.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.productClassification = None\n        ' Allows the product to be classified by various systems.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.specialDesignation = None\n        ' Indicates if the medicinal product has an orphan designation for\\n        the treatment of a rare disease.\\n        List of `MedicinalProductSpecialDesignation` items (represented as `dict` in JSON). '\n        self.specialMeasures = None\n        ' Whether the Medicinal Product is subject to special measures for\\n        regulatory reasons.\\n        List of `str` items. '\n        self.type = None\n        ' Regulatory type, e.g. Investigational or Authorized.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProduct, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProduct instance with valid properties representing a detailed definition of a medicinal product, typically for regulatory use.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the attributes of the MedicinalProduct. Each key corresponds to a valid property such as `additionalMonitoringIndicator`, `attachedDocument`, `clinicalTrial`, etc.\n- strict (bool, optional): If set to True (default), invalid variables in jsondict will raise a TypeError; if False, they will not.\n\nAttributes initialized:\n- additionalMonitoringIndicator: Indicates if the product is subject to additional monitoring.\n- attachedDocument: List of supporting documentation items.\n- clinicalTrial: List of clinical trial references.\n- combinedPharmaceuticalDoseForm: Represents the dose form of the product.\n- contact: List of product-specific contacts.\n- crossReference: List of references to other products.\n- domain: Indicates whether the product is for human or veterinary use.\n- identifier: List of business identifiers.\n- legalStatusOfSupply: Represents the legal classification.\n- manufacturingBusinessOperation: List of operations related to the product's manufacturing.\n- marketingStatus: List of marketing status items.\n- masterFile: List of references to associated master files.\n- name: List of names associated with the product.\n- packagedMedicinalProduct: List of packaged product references.\n- paediatricUseIndicator: Indicates if the product is authorized for children.\n- pharmaceuticalProduct: List of pharmaceutical references.\n- productClassification: Allows classification of the product.\n- specialDesignation: List indicating orphan designation status.\n- specialMeasures: List indicating regulatory special measures.\n- type: Represents the regulatory type of the product.\n\nThis class depends on other classes such as CodeableConcept, FHIRReference, Identifier, etc., which define the structure of the attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProduct(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available, it will be returned directly; otherwise, the method will return the ISO 8601 formatted string representation of the date (`isostring`). \n\nThe `origval` attribute is set during initialization and holds the input value provided in the constructor, allowing for reconstruction of the original input if needed. The `isostring` property, computed from the `date` attribute, ensures a standardized output, albeit with potential alterations for incomplete dates. This method provides a way to retrieve either the exact initial value or the formatted date representation, serving both FHIR compliance and usability in Python date handling.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available, it will be returned directly; otherwise, the method will return the ISO 8601 formatted string representation of the date (`isostring`). \n\nThe `origval` attribute is set during initialization and holds the input value provided in the constructor, allowing for reconstruction of the original input if needed. The `isostring` property, computed from the `date` attribute, ensures a standardized output, albeit with potential alterations for incomplete dates. This method provides a way to retrieve either the exact initial value or the formatted date representation, serving both FHIR compliance and usability in Python date handling.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class.\n\nThis constructor accepts an optional JSON value, which may be a string representing a FHIR datetime format. It initializes the `datetime` attribute to None and calls the parent constructor of FHIRDate with the provided JSON value to handle the base functionality.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime or None. If provided, it may be processed to extract a datetime representation.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property that will hold a Python datetime object derived from the FHIR datetime string. Initially set to None.\n\nInteractions:\nThis method relies on the superclass FHIRDate for its initialization logic. The parent class manages the underlying JSON representation and any relevant parsing. The class constant `_FIELD` is not used within this method, but it is associated with the FHIR datetime specification for other parts of the class.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class.\n\nThis constructor accepts an optional JSON value, which may be a string representing a FHIR datetime format. It initializes the `datetime` attribute to None and calls the parent constructor of FHIRDate with the provided JSON value to handle the base functionality.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime or None. If provided, it may be processed to extract a datetime representation.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property that will hold a Python datetime object derived from the FHIR datetime string. Initially set to None.\n\nInteractions:\nThis method relies on the superclass FHIRDate for its initialization logic. The parent class manages the underlying JSON representation and any relevant parsing. The class constant `_FIELD` is not used within this method, but it is associated with the FHIR datetime specification for other parts of the class.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the returned JSON representation. The `resourceType` is a constant indicating the type of FHIR resource that this instance represents, defined as the class-level attribute `resource_type`. \n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    This method relies on the superclass's `as_json` method to generate the base JSON structure before appending the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the returned JSON representation. The `resourceType` is a constant indicating the type of FHIR resource that this instance represents, defined as the class-level attribute `resource_type`. \n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    This method relies on the superclass's `as_json` method to generate the base JSON structure before appending the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproduct.py:MedicinalProduct:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/medicinalproduct_test.py:MedicinalProductTests:testMedicinalProduct1": {
      "tests/models/medicinalproduct_test.py:MedicinalProductTests:instantiate_from": {
        "fhirclient/models/medicinalproduct.py:MedicinalProduct:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproduct.py:MedicinalProduct:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproduct_test.py:MedicinalProductTests:implMedicinalProduct1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproduct.py:MedicinalProduct:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproduct.py:MedicinalProduct:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproduct.py:MedicinalProduct:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproduct_test.py:MedicinalProductTests:instantiate_from": {
      "fhirclient/models/medicinalproduct.py:MedicinalProduct:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproduct.py:MedicinalProduct:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproduct_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 medicinalproduct.py\n            \u2514\u2500\u2500 MedicinalProduct.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the testing and validation of the \"MedicinalProduct\" resource within the FHIR (Fast Healthcare Interoperability Resources) standard, specifically targeting its compliance with the FHIR 4.0.1 specification. It provides capabilities to create, parse, and verify \"MedicinalProduct\" instances by loading FHIR-compliant JSON representations, comparing their fields against expected values, and asserting their adherence to regulatory metadata and terminology standards defined by entities like the European Medicines Agency (EMA). By ensuring the integrity and correctness of medicinal product data, the module addresses critical quality assurance needs for developers and organizations building FHIR-based healthcare applications, aiding in the accurate representation and interoperability of structured medicinal product information.\n\n## FILE 1: fhirclient/models/medicinalproduct.py\n\n- CLASS METHOD: MedicinalProduct.__init__\n  - CLASS SIGNATURE: class MedicinalProduct(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProduct instance with valid properties representing a detailed definition of a medicinal product, typically for regulatory use.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the attributes of the MedicinalProduct. Each key corresponds to a valid property such as `additionalMonitoringIndicator`, `attachedDocument`, `clinicalTrial`, etc.\n- strict (bool, optional): If set to True (default), invalid variables in jsondict will raise a TypeError; if False, they will not.\n\nAttributes initialized:\n- additionalMonitoringIndicator: Indicates if the product is subject to additional monitoring.\n- attachedDocument: List of supporting documentation items.\n- clinicalTrial: List of clinical trial references.\n- combinedPharmaceuticalDoseForm: Represents the dose form of the product.\n- contact: List of product-specific contacts.\n- crossReference: List of references to other products.\n- domain: Indicates whether the product is for human or veterinary use.\n- identifier: List of business identifiers.\n- legalStatusOfSupply: Represents the legal classification.\n- manufacturingBusinessOperation: List of operations related to the product's manufacturing.\n- marketingStatus: List of marketing status items.\n- masterFile: List of references to associated master files.\n- name: List of names associated with the product.\n- packagedMedicinalProduct: List of packaged product references.\n- paediatricUseIndicator: Indicates if the product is authorized for children.\n- pharmaceuticalProduct: List of pharmaceutical references.\n- productClassification: Allows classification of the product.\n- specialDesignation: List indicating orphan designation status.\n- specialMeasures: List indicating regulatory special measures.\n- type: Represents the regulatory type of the product.\n\nThis class depends on other classes such as CodeableConcept, FHIRReference, Identifier, etc., which define the structure of the attributes.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available, it will be returned directly; otherwise, the method will return the ISO 8601 formatted string representation of the date (`isostring`). \n\nThe `origval` attribute is set during initialization and holds the input value provided in the constructor, allowing for reconstruction of the original input if needed. The `isostring` property, computed from the `date` attribute, ensures a standardized output, albeit with potential alterations for incomplete dates. This method provides a way to retrieve either the exact initial value or the formatted date representation, serving both FHIR compliance and usability in Python date handling.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class.\n\nThis constructor accepts an optional JSON value, which may be a string representing a FHIR datetime format. It initializes the `datetime` attribute to None and calls the parent constructor of FHIRDate with the provided JSON value to handle the base functionality.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime or None. If provided, it may be processed to extract a datetime representation.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property that will hold a Python datetime object derived from the FHIR datetime string. Initially set to None.\n\nInteractions:\nThis method relies on the superclass FHIRDate for its initialization logic. The parent class manages the underlying JSON representation and any relevant parsing. The class constant `_FIELD` is not used within this method, but it is associated with the FHIR datetime specification for other parts of the class.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the returned JSON representation. The `resourceType` is a constant indicating the type of FHIR resource that this instance represents, defined as the class-level attribute `resource_type`. \n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    This method relies on the superclass's `as_json` method to generate the base JSON structure before appending the `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/medicinalproduct.py": "from . import domainresource\n\nclass MedicinalProduct(domainresource.DomainResource):\n    \"\"\" Detailed definition of a medicinal product, typically for uses other than\n    direct patient care (e.g. regulatory use).\n    \"\"\"\n    resource_type = 'MedicinalProduct'\n\n    def elementProperties(self):\n        js = super(MedicinalProduct, self).elementProperties()\n        js.extend([('additionalMonitoringIndicator', 'additionalMonitoringIndicator', codeableconcept.CodeableConcept, False, None, False), ('attachedDocument', 'attachedDocument', fhirreference.FHIRReference, True, None, False), ('clinicalTrial', 'clinicalTrial', fhirreference.FHIRReference, True, None, False), ('combinedPharmaceuticalDoseForm', 'combinedPharmaceuticalDoseForm', codeableconcept.CodeableConcept, False, None, False), ('contact', 'contact', fhirreference.FHIRReference, True, None, False), ('crossReference', 'crossReference', identifier.Identifier, True, None, False), ('domain', 'domain', coding.Coding, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('legalStatusOfSupply', 'legalStatusOfSupply', codeableconcept.CodeableConcept, False, None, False), ('manufacturingBusinessOperation', 'manufacturingBusinessOperation', MedicinalProductManufacturingBusinessOperation, True, None, False), ('marketingStatus', 'marketingStatus', marketingstatus.MarketingStatus, True, None, False), ('masterFile', 'masterFile', fhirreference.FHIRReference, True, None, False), ('name', 'name', MedicinalProductName, True, None, True), ('packagedMedicinalProduct', 'packagedMedicinalProduct', fhirreference.FHIRReference, True, None, False), ('paediatricUseIndicator', 'paediatricUseIndicator', codeableconcept.CodeableConcept, False, None, False), ('pharmaceuticalProduct', 'pharmaceuticalProduct', fhirreference.FHIRReference, True, None, False), ('productClassification', 'productClassification', codeableconcept.CodeableConcept, True, None, False), ('specialDesignation', 'specialDesignation', MedicinalProductSpecialDesignation, True, None, False), ('specialMeasures', 'specialMeasures', str, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MedicinalProductManufacturingBusinessOperation(backboneelement.BackboneElement):\n    \"\"\" An operation applied to the product, for manufacturing or adminsitrative\n    purpose.\n    \"\"\"\n    resource_type = 'MedicinalProductManufacturingBusinessOperation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.authorisationReferenceNumber = None\n        ' Regulatory authorization reference number.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.confidentialityIndicator = None\n        ' To indicate if this proces is commercially confidential.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.effectiveDate = None\n        ' Regulatory authorization date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.manufacturer = None\n        ' The manufacturer or establishment associated with the process.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.operationType = None\n        ' The type of manufacturing operation.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.regulator = None\n        ' A regulator which oversees the operation.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(MedicinalProductManufacturingBusinessOperation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductManufacturingBusinessOperation, self).elementProperties()\n        js.extend([('authorisationReferenceNumber', 'authorisationReferenceNumber', identifier.Identifier, False, None, False), ('confidentialityIndicator', 'confidentialityIndicator', codeableconcept.CodeableConcept, False, None, False), ('effectiveDate', 'effectiveDate', fhirdatetime.FHIRDateTime, False, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, True, None, False), ('operationType', 'operationType', codeableconcept.CodeableConcept, False, None, False), ('regulator', 'regulator', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass MedicinalProductName(backboneelement.BackboneElement):\n    \"\"\" The product's name, including full name and possibly coded parts.\n    \"\"\"\n    resource_type = 'MedicinalProductName'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.countryLanguage = None\n        ' Country where the name applies.\\n        List of `MedicinalProductNameCountryLanguage` items (represented as `dict` in JSON). '\n        self.namePart = None\n        ' Coding words or phrases of the name.\\n        List of `MedicinalProductNameNamePart` items (represented as `dict` in JSON). '\n        self.productName = None\n        ' The full product name.\\n        Type `str`. '\n        super(MedicinalProductName, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductName, self).elementProperties()\n        js.extend([('countryLanguage', 'countryLanguage', MedicinalProductNameCountryLanguage, True, None, False), ('namePart', 'namePart', MedicinalProductNameNamePart, True, None, False), ('productName', 'productName', str, False, None, True)])\n        return js\n\nclass MedicinalProductNameCountryLanguage(backboneelement.BackboneElement):\n    \"\"\" Country where the name applies.\n    \"\"\"\n    resource_type = 'MedicinalProductNameCountryLanguage'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.country = None\n        ' Country code for where this name applies.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Jurisdiction code for where this name applies.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.language = None\n        ' Language code for this name.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductNameCountryLanguage, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductNameCountryLanguage, self).elementProperties()\n        js.extend([('country', 'country', codeableconcept.CodeableConcept, False, None, True), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, False, None, False), ('language', 'language', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicinalProductNameNamePart(backboneelement.BackboneElement):\n    \"\"\" Coding words or phrases of the name.\n    \"\"\"\n    resource_type = 'MedicinalProductNameNamePart'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.part = None\n        ' A fragment of a product name.\\n        Type `str`. '\n        self.type = None\n        ' Idenifying type for this part of the name (e.g. strength part).\\n        Type `Coding` (represented as `dict` in JSON). '\n        super(MedicinalProductNameNamePart, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductNameNamePart, self).elementProperties()\n        js.extend([('part', 'part', str, False, None, True), ('type', 'type', coding.Coding, False, None, True)])\n        return js\n\nclass MedicinalProductSpecialDesignation(backboneelement.BackboneElement):\n    \"\"\" Indicates if the medicinal product has an orphan designation for the\n    treatment of a rare disease.\n    \"\"\"\n    resource_type = 'MedicinalProductSpecialDesignation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.date = None\n        ' Date when the designation was granted.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.identifier = None\n        ' Identifier for the designation, or procedure number.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.indicationCodeableConcept = None\n        ' Condition for which the medicinal use applies.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.indicationReference = None\n        ' Condition for which the medicinal use applies.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.intendedUse = None\n        ' The intended use of the product, e.g. prevention, treatment.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.species = None\n        ' Animal species for which this applies.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.status = None\n        ' For example granted, pending, expired or withdrawn.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.type = None\n        ' The type of special designation, e.g. orphan drug, minor use.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductSpecialDesignation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductSpecialDesignation, self).elementProperties()\n        js.extend([('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('indicationCodeableConcept', 'indicationCodeableConcept', codeableconcept.CodeableConcept, False, 'indication', False), ('indicationReference', 'indicationReference', fhirreference.FHIRReference, False, 'indication', False), ('intendedUse', 'intendedUse', codeableconcept.CodeableConcept, False, None, False), ('species', 'species', codeableconcept.CodeableConcept, False, None, False), ('status', 'status', codeableconcept.CodeableConcept, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import marketingstatus",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}