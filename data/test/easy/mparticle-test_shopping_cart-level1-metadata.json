{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_shopping_cart",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_shopping_cart.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.shopping_cart import ShoppingCart\n\n\nclass TestShoppingCart(unittest.TestCase):\n    \"\"\" ShoppingCart unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testShoppingCart(self):\n        \"\"\"\n        Test ShoppingCart\n        \"\"\"\n        model = mparticle.models.shopping_cart.ShoppingCart()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/shopping_cart.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ShoppingCart(object):\n\n    def __init__(self, products=None):\n        \"\"\"\n        ShoppingCart - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'products': 'list[Product]'\n        }\n\n        self.attribute_map = {\n            'products': 'products'\n        }\n\n        self._products = products\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ShoppingCart.\n\n\n        :return: The products of this ShoppingCart.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ShoppingCart.\n\n\n        :param products: The products of this ShoppingCart.\n        :type: list[Product]\n        \"\"\"\n\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/shopping_cart.py": {
      "ShoppingCart.__init__": {
        "code": "    def __init__(self, products=None):\n        \"\"\"Initializes a new instance of the ShoppingCart class, designed to model a shopping cart containing a list of products.\n\n    :param products: A list of Product objects to be included in the shopping cart. If no products are provided, the cart is initialized as empty.\n    :type products: list[Product]\n\n    The initializer sets up the `swagger_types` and `attribute_map` dictionaries that define the types and JSON mapping for class attributes. The `swagger_types` dictionary indicates that the `products` attribute is expected to be a list of `Product` instances. The `_products` attribute is then initialized with the provided products list or set to None if no products are given.\"\"\"\n        '\\n        ShoppingCart - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'products': 'list[Product]'}\n        self.attribute_map = {'products': 'products'}\n        self._products = products",
        "docstring": "Initializes a new instance of the ShoppingCart class, designed to model a shopping cart containing a list of products.\n\n:param products: A list of Product objects to be included in the shopping cart. If no products are provided, the cart is initialized as empty.\n:type products: list[Product]\n\nThe initializer sets up the `swagger_types` and `attribute_map` dictionaries that define the types and JSON mapping for class attributes. The `swagger_types` dictionary indicates that the `products` attribute is expected to be a list of `Product` instances. The `_products` attribute is then initialized with the provided products list or set to None if no products are given.",
        "signature": "def __init__(self, products=None):",
        "type": "Method",
        "class_signature": "class ShoppingCart(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_shopping_cart\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 shopping_cart.py\n            \u2514\u2500\u2500 ShoppingCart.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module interfaces with the mParticle Event API to facilitate the handling and testing of shopping cart data models in the context of event-based consumer data systems. Its primary purpose is to represent, validate, and manage the functionality of shopping cart objects, ensuring compatibility with mParticle's data pipeline. By providing a defined structure for shopping cart events, it allows developers to efficiently simulate and verify how transactional data, such as cart updates, is processed within the mParticle platform. This solves the problem of maintaining accurate and scalable integrations for e-commerce and event-based analytics workflows.\n\n## FILE 1: mparticle/models/shopping_cart.py\n\n- CLASS METHOD: ShoppingCart.__init__\n  - CLASS SIGNATURE: class ShoppingCart(object):\n  - SIGNATURE: def __init__(self, products=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the ShoppingCart class, designed to model a shopping cart containing a list of products.\n\n:param products: A list of Product objects to be included in the shopping cart. If no products are provided, the cart is initialized as empty.\n:type products: list[Product]\n\nThe initializer sets up the `swagger_types` and `attribute_map` dictionaries that define the types and JSON mapping for class attributes. The `swagger_types` dictionary indicates that the `products` attribute is expected to be a list of `Product` instances. The `_products` attribute is then initialized with the provided products list or set to None if no products are given.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/shopping_cart.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass ShoppingCart(object):\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ShoppingCart.\n\n\n        :return: The products of this ShoppingCart.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ShoppingCart.\n\n\n        :param products: The products of this ShoppingCart.\n        :type: list[Product]\n        \"\"\"\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_shopping_cart.py:TestShoppingCart:testShoppingCart": {
      "mparticle/models/shopping_cart.py:ShoppingCart:__init__": {}
    }
  }
}