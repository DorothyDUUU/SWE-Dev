{
  "dir_path": "/app/elasticsearch_curator",
  "package_name": "elasticsearch_curator",
  "sample_name": "elasticsearch_curator-test_action_reindex",
  "src_dir": "curator/",
  "test_dir": "tests/",
  "test_file": "tests/unit/test_action_reindex.py",
  "test_code": "\"\"\"test_action_reindex\"\"\"\n# pylint: disable=missing-function-docstring, missing-class-docstring, protected-access, attribute-defined-outside-init\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom curator.actions import Reindex\nfrom curator.exceptions import ConfigurationError, CuratorException, FailedExecution, NoIndices\nfrom curator import IndexList\n# Get test variables and constants from a single source\nfrom . import testvars\n\nclass TestActionReindex(TestCase):\n    VERSION = {'version': {'number': '8.0.0'} }\n    def builder(self):\n        self.client = Mock()\n        self.client.info.return_value = self.VERSION\n        self.client.cat.indices.return_value = testvars.state_four\n        self.client.indices.get_settings.return_value = testvars.settings_four\n        self.client.indices.stats.return_value = testvars.stats_four\n        self.client.indices.exists_alias.return_value = False\n        self.ilo = IndexList(self.client)\n    def test_init_bad_ilo(self):\n        self.assertRaises(TypeError, Reindex, 'foo', 'invalid')\n    def test_init_raise_bad_request_body(self):\n        self.builder()\n        self.assertRaises(ConfigurationError, Reindex, self.ilo, 'invalid')\n    def test_init_raise_local_migration_no_prefix_or_suffix(self):\n        self.builder()\n        self.assertRaises(ConfigurationError, Reindex, self.ilo, testvars.reindex_migration)\n    def test_init(self):\n        self.builder()\n        rio = Reindex(self.ilo, testvars.reindex_basic)\n        self.assertEqual(self.ilo, rio.index_list)\n        self.assertEqual(self.client, rio.client)\n    def test_do_dry_run(self):\n        self.builder()\n        rio = Reindex(self.ilo, testvars.reindex_basic)\n        self.assertIsNone(rio.do_dry_run())\n    def test_replace_index_list(self):\n        self.builder()\n        rio = Reindex(self.ilo, testvars.reindex_replace)\n        self.assertEqual(rio.index_list.indices, rio.body['source']['index'])\n    def test_reindex_with_wait(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        rio = Reindex(self.ilo, testvars.reindex_basic)\n        self.assertIsNone(rio.do_action())\n    def test_reindex_with_wait_zero_total(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task_zero_total\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        rio = Reindex(self.ilo, testvars.reindex_basic)\n        self.assertIsNone(rio.do_action())\n    def test_reindex_with_wait_zero_total_fail(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.side_effect = testvars.fake_fail\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        rio = Reindex(self.ilo, testvars.reindex_basic)\n        self.assertRaises(CuratorException, rio.do_action)\n    def test_reindex_without_wait(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        rio = Reindex(self.ilo, testvars.reindex_basic,\n            wait_for_completion=False)\n        self.assertIsNone(rio.do_action())\n    def test_reindex_timedout(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.incomplete_task\n        rio = Reindex(self.ilo, testvars.reindex_basic,\n             max_wait=1, wait_interval=1)\n        self.assertRaises(FailedExecution, rio.do_action)\n    def test_remote_with_no_host_key(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        badval = {\n            'source': {\n                'index': 'irrelevant',\n                'remote': {'wrong': 'invalid'}\n            },\n            'dest': { 'index': 'other_index' }\n        }\n        self.assertRaises(\n            ConfigurationError, Reindex, self.ilo, badval)\n    def test_remote_with_bad_host(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        badval = {\n            'source': {\n                'index': 'irrelevant',\n                'remote': {'host': 'invalid'}\n            },\n            'dest': { 'index': 'other_index' }\n        }\n        self.assertRaises(\n            ConfigurationError, Reindex, self.ilo, badval)\n    def test_remote_with_bad_url(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        badval = {\n            'source': {\n                'index': 'irrelevant',\n                'remote': {'host': 'asdf://hostname:1234'}\n            },\n            'dest': { 'index': 'other_index' }\n        }\n        self.assertRaises(\n            ConfigurationError, Reindex, self.ilo, badval)\n    def test_remote_with_bad_connection(self):\n        self.builder()\n        self.client.reindex.return_value = testvars.generic_task\n        self.client.tasks.get.return_value = testvars.completed_task\n        # After building ilo, we need a different return value\n        self.client.indices.get_settings.return_value = {'other_index':{}}\n        badval = {\n            'source': {\n                'index': 'REINDEX_SELECTION',\n                'remote': {'host': 'https://example.org:XXXX'}\n            },\n            'dest': { 'index': 'other_index' }\n        }\n        urllib3 = Mock()\n        urllib3.util.retry.side_effect = testvars.fake_fail\n        self.assertRaises(Exception, Reindex, self.ilo, badval)\n    def test_init_raise_empty_source_list(self):\n        self.builder()\n        badval = {\n            'source': { 'index': [] },\n            'dest': { 'index': 'other_index' }\n        }\n        rio = Reindex(self.ilo, badval)\n        self.assertRaises(NoIndices, rio.do_action)\n",
  "GT_file_code": {
    "curator/actions/reindex.py": "\"\"\"Reindex action class\"\"\"\n\nimport logging\nfrom copy import deepcopy\nfrom dotmap import DotMap  # type: ignore\n\n# pylint: disable=broad-except, R0902,R0912,R0913,R0914,R0915\nfrom es_client.builder import Builder\nfrom es_client.helpers.utils import ensure_list, verify_url_schema\nfrom es_client.exceptions import ConfigurationError\nfrom curator.exceptions import CuratorException, FailedExecution, NoIndices\n\n# Separate from es_client\nfrom curator.exceptions import ConfigurationError as CuratorConfigError\nfrom curator.helpers.testers import verify_index_list\nfrom curator.helpers.utils import report_failure\nfrom curator.helpers.waiters import wait_for_it\nfrom curator import IndexList\n\n\nclass Reindex:\n    \"\"\"Reindex Action Class\"\"\"\n\n    def __init__(\n        self,\n        ilo,\n        request_body,\n        refresh=True,\n        requests_per_second=-1,\n        slices=1,\n        timeout=60,\n        wait_for_active_shards=1,\n        wait_for_completion=True,\n        max_wait=-1,\n        wait_interval=9,\n        remote_certificate=None,\n        remote_client_cert=None,\n        remote_client_key=None,\n        remote_filters=None,\n        migration_prefix='',\n        migration_suffix='',\n    ):\n        \"\"\"\n        :param ilo: An IndexList Object\n        :param request_body: The body to send to\n            :py:meth:`~.elasticsearch.Elasticsearch.reindex`, which must be\n            complete and usable, as Curator will do no vetting of the request_body.\n            If it fails to function, Curator will return an exception.\n        :param refresh: Whether to refresh the entire target index after the\n            operation is complete.\n        :param requests_per_second: The throttle to set on this request in\n            sub-requests per second. ``-1`` means set no throttle as does\n            ``unlimited`` which is the only non-float this accepts.\n        :param slices: The number of slices this task  should be divided into.\n            ``1`` means the task will not be sliced into subtasks. (Default: ``1``)\n        :param timeout: The length in seconds each individual bulk request should\n            wait for shards that are unavailable. (default: ``60``)\n        :param wait_for_active_shards: Sets the number of shard copies that must be\n            active before proceeding with the reindex operation. (Default: ``1``)\n            means the primary shard only. Set to ``all`` for all shard copies,\n            otherwise set to any non-negative value less than or equal to the total\n            number of copies for the shard (number of replicas + 1)\n        :param wait_for_completion: Wait for completion before returning.\n        :param wait_interval: Seconds to wait between completion checks.\n        :param max_wait: Maximum number of seconds to ``wait_for_completion``\n        :param remote_certificate: Path to SSL/TLS certificate\n        :param remote_client_cert: Path to SSL/TLS client certificate (public key)\n        :param remote_client_key: Path to SSL/TLS private key\n        :param migration_prefix: When migrating, prepend this value to the index name.\n        :param migration_suffix: When migrating, append this value to the index name.\n\n        :type ilo: :py:class:`~.curator.indexlist.IndexList`\n        :type request_body: dict\n        :type refresh: bool\n        :type requests_per_second: int\n        :type slices: int\n        :type timeout: int\n        :type wait_for_active_shards: int\n        :type wait_for_completion: bool\n        :type wait_interval: int\n        :type max_wait: int\n        :type remote_certificate: str\n        :type remote_cclient_cert: str\n        :type remote_cclient_key: str\n        :type migration_prefix: str\n        :type migration_suffix: str\n        \"\"\"\n        if remote_filters is None:\n            remote_filters = {}\n        self.loggit = logging.getLogger('curator.actions.reindex')\n        verify_index_list(ilo)\n        if not isinstance(request_body, dict):\n            raise CuratorConfigError('\"request_body\" is not of type dictionary')\n        #: Object attribute that gets the value of param ``request_body``.\n        self.body = request_body\n        self.loggit.debug('REQUEST_BODY = %s', request_body)\n        #: The :py:class:`~.curator.indexlist.IndexList` object passed from\n        #: param ``ilo``\n        self.index_list = ilo\n        #: The :py:class:`~.elasticsearch.Elasticsearch` client object derived from\n        #: :py:attr:`index_list`\n        self.client = ilo.client\n        #: Object attribute that gets the value of param ``refresh``.\n        self.refresh = refresh\n        #: Object attribute that gets the value of param ``requests_per_second``.\n        self.requests_per_second = requests_per_second\n        #: Object attribute that gets the value of param ``slices``.\n        self.slices = slices\n        #: Object attribute that gets the value of param ``timeout``, convert to\n        #: :py:class:`str` and add ``s`` for seconds.\n        self.timeout = f'{timeout}s'\n        #: Object attribute that gets the value of param ``wait_for_active_shards``.\n        self.wait_for_active_shards = wait_for_active_shards\n        #: Object attribute that gets the value of param ``wait_for_completion``.\n        self.wfc = wait_for_completion\n        #: Object attribute that gets the value of param ``wait_interval``.\n        self.wait_interval = wait_interval\n        #: Object attribute that gets the value of param ``max_wait``.\n        self.max_wait = max_wait\n        #: Object attribute that gets the value of param ``migration_prefix``.\n        self.mpfx = migration_prefix\n        #: Object attribute that gets the value of param ``migration_suffix``.\n        self.msfx = migration_suffix\n\n        #: Object attribute that is set ``False`` unless :py:attr:`body` has\n        #: ``{'source': {'remote': {}}}``, then it is set ``True``\n        self.remote = False\n        if 'remote' in self.body['source']:\n            self.remote = True\n\n        #: Object attribute that is set ``False`` unless :py:attr:`body` has\n        #: ``{'dest': {'index': 'MIGRATION'}}``, then it is set ``True``\n        self.migration = False\n        if self.body['dest']['index'] == 'MIGRATION':\n            self.migration = True\n\n        if self.migration:\n            if not self.remote and not self.mpfx and not self.msfx:\n                raise CuratorConfigError(\n                    'MIGRATION can only be used locally with one or both of '\n                    'migration_prefix or migration_suffix.'\n                )\n\n        # REINDEX_SELECTION is the designated token.  If you use this for the\n        # source \"index,\" it will be replaced with the list of indices from the\n        # provided 'ilo' (index list object).\n        if self.body['source']['index'] == 'REINDEX_SELECTION' and not self.remote:\n            self.body['source']['index'] = self.index_list.indices\n\n        # Remote section\n        elif self.remote:\n            rclient_args = DotMap()\n            rother_args = DotMap()\n            self.loggit.debug('Remote reindex request detected')\n            if 'host' not in self.body['source']['remote']:\n                raise CuratorConfigError('Missing remote \"host\"')\n            try:\n                rclient_args.hosts = verify_url_schema(\n                    self.body['source']['remote']['host']\n                )\n            except ConfigurationError as exc:\n                raise CuratorConfigError(exc) from exc\n\n            # Now that the URL schema is verified, these will pass.\n            self.remote_host = rclient_args.hosts.split(':')[-2]\n            self.remote_host = self.remote_host.split('/')[2]\n            self.remote_port = rclient_args.hosts.split(':')[-1]\n\n            if 'username' in self.body['source']['remote']:\n                rother_args.username = self.body['source']['remote']['username']\n            if 'password' in self.body['source']['remote']:\n                rother_args.password = self.body['source']['remote']['password']\n            if remote_certificate:\n                rclient_args.ca_certs = remote_certificate\n            if remote_client_cert:\n                rclient_args.client_cert = remote_client_cert\n            if remote_client_key:\n                rclient_args.client_key = remote_client_key\n\n            # Let's set a decent remote timeout for initially reading\n            # the indices on the other side, and collecting their metadata\n            rclient_args.request_timeout = 180\n\n            # The rest only applies if using filters for remote indices\n            if self.body['source']['index'] == 'REINDEX_SELECTION':\n                self.loggit.debug('Filtering indices from remote')\n                msg = (\n                    f'Remote client args: '\n                    f'hosts={rclient_args.hosts} '\n                    f'username=REDACTED '\n                    f'password=REDACTED '\n                    f'certificate={remote_certificate} '\n                    f'client_cert={remote_client_cert} '\n                    f'client_key={remote_client_key} '\n                    f'request_timeout={rclient_args.request_timeout} '\n                    f'skip_version_test=True'\n                )\n                self.loggit.debug(msg)\n                remote_config = {\n                    'elasticsearch': {\n                        'client': rclient_args.toDict(),\n                        'other_settings': rother_args.toDict(),\n                    }\n                }\n                try:  # let's try to build a remote connection with these!\n                    builder = Builder(configdict=remote_config)\n                    builder.version_min = (1, 0, 0)\n                    builder.connect()\n                    rclient = builder.client\n                except Exception as err:\n                    self.loggit.error(\n                        'Unable to establish connection to remote Elasticsearch'\n                        ' with provided credentials/certificates/settings.'\n                    )\n                    report_failure(err)\n                try:\n                    rio = IndexList(rclient)\n                    rio.iterate_filters({'filters': remote_filters})\n                    try:\n                        rio.empty_list_check()\n                    except NoIndices as exc:\n                        raise FailedExecution(\n                            'No actionable remote indices selected after applying '\n                            'filters.'\n                        ) from exc\n                    self.body['source']['index'] = rio.indices\n                except Exception as err:\n                    self.loggit.error('Unable to get/filter list of remote indices.')\n                    report_failure(err)\n\n        self.loggit.debug('Reindexing indices: %s', self.body['source']['index'])\n\n    def _get_request_body(self, source, dest):\n        body = deepcopy(self.body)\n        body['source']['index'] = source\n        body['dest']['index'] = dest\n        return body\n\n    def _get_reindex_args(self, source, dest):\n        # Always set wait_for_completion to False. Let 'wait_for_it' do its\n        # thing if wait_for_completion is set to True. Report the task_id\n        # either way.\n        reindex_args = {\n            'refresh': self.refresh,\n            'requests_per_second': self.requests_per_second,\n            'slices': self.slices,\n            'timeout': self.timeout,\n            'wait_for_active_shards': self.wait_for_active_shards,\n            'wait_for_completion': False,\n        }\n        for keyname in [\n            'dest',\n            'source',\n            'conflicts',\n            'max_docs',\n            'size',\n            '_source',\n            'script',\n        ]:\n            if keyname in self.body:\n                reindex_args[keyname] = self.body[keyname]\n        # Mimic the _get_request_body(source, dest) behavior by casting these values\n        # here instead\n        reindex_args['dest']['index'] = dest\n        reindex_args['source']['index'] = source\n        return reindex_args\n\n    def get_processed_items(self, task_id):\n        \"\"\"\n        This function calls :py:func:`~.elasticsearch.client.TasksClient.get` with\n        the provided ``task_id``.  It will get the value from ``'response.total'``\n        as the total number of elements processed during reindexing. If the value is\n        not found, it will return ``-1``\n\n        :param task_id: A task_id which ostensibly matches a task searchable in the\n            tasks API.\n        \"\"\"\n        try:\n            task_data = self.client.tasks.get(task_id=task_id)\n        except Exception as exc:\n            raise CuratorException(\n                f'Unable to obtain task information for task_id \"{task_id}\". '\n                f'Exception {exc}'\n            ) from exc\n        total_processed_items = -1\n        task = task_data['task']\n        if task['action'] == 'indices:data/write/reindex':\n            self.loggit.debug(\"It's a REINDEX TASK'\")\n            self.loggit.debug('TASK_DATA: %s', task_data)\n            self.loggit.debug('TASK_DATA keys: %s', list(task_data.keys()))\n            if 'response' in task_data:\n                response = task_data['response']\n                total_processed_items = response['total']\n                self.loggit.debug('total_processed_items = %s', total_processed_items)\n        return total_processed_items\n\n    def _post_run_quick_check(self, index_name, task_id):\n        # Check whether any documents were processed\n        # if no documents processed, the target index \"dest\" won't exist\n        processed_items = self.get_processed_items(task_id)\n        if processed_items == 0:\n            msg = (\n                f'No items were processed. Will not check if target index '\n                f'\"{index_name}\" exists'\n            )\n            self.loggit.info(msg)\n        else:\n            # Verify the destination index is there after the fact\n            index_exists = self.client.indices.exists(index=index_name)\n            alias_instead = self.client.indices.exists_alias(name=index_name)\n            if not index_exists and not alias_instead:\n                # pylint: disable=logging-fstring-interpolation\n                self.loggit.error(\n                    f'The index described as \"{index_name}\" was not found after the '\n                    f'reindex operation. Check Elasticsearch logs for more '\n                    f'information.'\n                )\n                if self.remote:\n                    # pylint: disable=logging-fstring-interpolation\n                    self.loggit.error(\n                        f'Did you forget to add \"reindex.remote.whitelist: '\n                        f'{self.remote_host}:{self.remote_port}\" to the '\n                        f'elasticsearch.yml file on the \"dest\" node?'\n                    )\n                raise FailedExecution(\n                    f'Reindex failed. The index or alias identified by \"{index_name}\" '\n                    f'was not found.'\n                )\n\n    def sources(self):\n        \"\"\"Generator for Reindexing ``sources`` & ``dests``\"\"\"\n        dest = self.body['dest']['index']\n        source_list = ensure_list(self.body['source']['index'])\n        self.loggit.debug('source_list: %s', source_list)\n        if not source_list or source_list == ['REINDEX_SELECTED']:  # Empty list\n            raise NoIndices\n        if not self.migration:\n            yield self.body['source']['index'], dest\n\n        # Loop over all sources (default will only be one)\n        else:\n            for source in source_list:\n                if self.migration:\n                    dest = self.mpfx + source + self.msfx\n                yield source, dest\n\n    def show_run_args(self, source, dest):\n        \"\"\"Show what will run\"\"\"\n        return (\n            f'request body: {self._get_request_body(source, dest)} with arguments: '\n            f'refresh={self.refresh} '\n            f'requests_per_second={self.requests_per_second} '\n            f'slices={self.slices} '\n            f'timeout={self.timeout} '\n            f'wait_for_active_shards={self.wait_for_active_shards} '\n            f'wait_for_completion={self.wfc}'\n        )\n\n    def do_dry_run(self):\n        \"\"\"Log what the output would be, but take no action.\"\"\"\n        self.loggit.info('DRY-RUN MODE.  No changes will be made.')\n        for source, dest in self.sources():\n            self.loggit.info('DRY-RUN: REINDEX: %s', self.show_run_args(source, dest))\n\n    def do_action(self):\n        \"\"\"\n        Execute :py:meth:`~.elasticsearch.Elasticsearch.reindex` operation with the\n        ``request_body`` from :py:meth:`_get_request_body` and arguments\n        :py:attr:`refresh`, :py:attr:`requests_per_second`, :py:attr:`slices`,\n        :py:attr:`timeout`, :py:attr:`wait_for_active_shards`, and :py:attr:`wfc`.\n        \"\"\"\n        try:\n            # Loop over all sources (default will only be one)\n            for source, dest in self.sources():\n                self.loggit.info('Commencing reindex operation')\n                self.loggit.debug('REINDEX: %s', self.show_run_args(source, dest))\n                response = self.client.reindex(**self._get_reindex_args(source, dest))\n\n                self.loggit.debug('TASK ID = %s', response['task'])\n                if self.wfc:\n                    wait_for_it(\n                        self.client,\n                        'reindex',\n                        task_id=response['task'],\n                        wait_interval=self.wait_interval,\n                        max_wait=self.max_wait,\n                    )\n                    self._post_run_quick_check(dest, response['task'])\n\n                else:\n                    msg = (\n                        f'\"wait_for_completion\" set to {self.wfc}.  Remember to check '\n                        f\"task_id \\\"{response['task']}\\\" for successful completion \"\n                        f\"manually.\"\n                    )\n                    self.loggit.warning(msg)\n        except NoIndices as exc:\n            raise NoIndices(\n                'Source index must be list of actual indices. It must not be an empty '\n                'list.'\n            ) from exc\n        except Exception as exc:\n            report_failure(exc)\n",
    "curator/exceptions.py": "\"\"\"Curator Exceptions\"\"\"\nclass CuratorException(Exception):\n    \"\"\"\n    Base class for all exceptions raised by Curator which are not Elasticsearch\n    exceptions.\n    \"\"\"\n\nclass ConfigurationError(CuratorException):\n    \"\"\"\n    Exception raised when a misconfiguration is detected\n    \"\"\"\n\nclass MissingArgument(CuratorException):\n    \"\"\"\n    Exception raised when a needed argument is not passed.\n    \"\"\"\n\nclass NoIndices(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty index_list\n    \"\"\"\n\nclass NoSnapshots(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty snapshot_list\n    \"\"\"\n\nclass ActionError(CuratorException):\n    \"\"\"\n    Exception raised when an action (against an index_list or snapshot_list) cannot be taken.\n    \"\"\"\n\nclass FailedExecution(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to execute for some reason.\n    \"\"\"\n\nclass SnapshotInProgress(ActionError):\n    \"\"\"\n    Exception raised when a snapshot is already in progress\n    \"\"\"\n\nclass ActionTimeout(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to complete in the allotted time\n    \"\"\"\n\nclass FailedSnapshot(CuratorException):\n    \"\"\"\n    Exception raised when a snapshot does not complete with state SUCCESS\n    \"\"\"\n\nclass FailedRestore(CuratorException):\n    \"\"\"\n    Exception raised when a Snapshot Restore does not restore all selected indices\n    \"\"\"\n\nclass FailedReindex(CuratorException):\n    \"\"\"\n    Exception raised when failures are found in the reindex task response\n    \"\"\"\n\nclass ClientException(CuratorException):\n    \"\"\"\n    Exception raised when the Elasticsearch client and/or connection is the source of the problem.\n    \"\"\"\n\nclass LoggingException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot either log or configure logging\n    \"\"\"\n\nclass RepositoryException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot verify a snapshot repository\n    \"\"\"\n\nclass SearchableSnapshotException(CuratorException):\n    \"\"\"\n    Exception raised when Curator finds something out of order with a Searchable Snapshot\n    \"\"\"\n",
    "curator/indexlist.py": "\"\"\"Index List Class\"\"\"\n\nimport re\nimport itertools\nimport logging\nfrom elasticsearch8.exceptions import NotFoundError, TransportError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import ensure_list\nfrom curator.defaults import settings\nfrom curator.exceptions import (\n    ActionError,\n    ConfigurationError,\n    MissingArgument,\n    NoIndices,\n)\nfrom curator.helpers.date_ops import (\n    absolute_date_range,\n    date_range,\n    fix_epoch,\n    get_date_regex,\n    get_point_of_reference,\n    get_unit_count_from_name,\n    TimestringSearch,\n)\nfrom curator.helpers.getters import byte_size, get_indices\nfrom curator.helpers.testers import verify_client_object\nfrom curator.helpers.utils import chunk_index_list, report_failure, to_csv\nfrom curator.validators.filter_functions import filterstructure\n\n\nclass IndexList:\n    \"\"\"IndexList class\"\"\"\n\n    def __init__(self, client, search_pattern='_all'):\n        verify_client_object(client)\n        self.loggit = logging.getLogger('curator.indexlist')\n        #: An :py:class:`~.elasticsearch.Elasticsearch` client object passed from\n        #: param ``client``\n        self.client = client\n        #: Information extracted from indices, such as segment count, age, etc.\n        #: Populated at instance creation time by private helper methods.\n        #: **Type:** :py:class:`dict`\n        self.index_info = {}\n        #: The running list of indices which will be used by one of the\n        #: :py:mod:`~.curator.actions` classes. Populated at instance creation\n        #: time by private helper methods. **Type:** :py:class:`list`\n        self.indices = []\n        #: All indices in the cluster at instance creation time.\n        #: **Type:** :py:class:`list`\n        self.all_indices = []\n        self.__get_indices(search_pattern)\n        self.age_keyfield = None\n\n    def __actionable(self, idx):\n        self.loggit.debug('Index %s is actionable and remains in the list.', idx)\n\n    def __not_actionable(self, idx):\n        self.loggit.debug('Index %s is not actionable, removing from list.', idx)\n        self.indices.remove(idx)\n\n    def __excludify(self, condition, exclude, index, msg=None):\n        if condition is True:\n            if exclude:\n                text = \"Removed from actionable list\"\n                self.__not_actionable(index)\n            else:\n                text = \"Remains in actionable list\"\n                self.__actionable(index)\n        else:\n            if exclude:\n                text = \"Remains in actionable list\"\n                self.__actionable(index)\n            else:\n                text = \"Removed from actionable list\"\n                self.__not_actionable(index)\n        if msg:\n            self.loggit.debug('%s: %s', text, msg)\n\n    def __get_indices(self, pattern):\n        \"\"\"\n        Pull all indices into ``all_indices``, then populate ``indices`` and\n        ``index_info``\n        \"\"\"\n        self.loggit.debug('Getting indices matching search_pattern: \"%s\"', pattern)\n        self.all_indices = get_indices(self.client, search_pattern=pattern)\n        self.indices = self.all_indices[:]\n        # if self.indices:\n        #     for index in self.indices:\n        #         self.__build_index_info(index)\n\n    def __build_index_info(self, index):\n        \"\"\"\n        Ensure that ``index`` is a key in ``index_info``. If not, create a\n        sub-dictionary structure under that key.\n        \"\"\"\n        self.loggit.debug('Building preliminary index metadata for %s', index)\n        if index not in self.index_info:\n            self.index_info[index] = self.__zero_values()\n\n    def __map_method(self, ftype):\n        methods = {\n            'alias': self.filter_by_alias,\n            'age': self.filter_by_age,\n            'allocated': self.filter_allocated,\n            'closed': self.filter_closed,\n            'count': self.filter_by_count,\n            'empty': self.filter_empty,\n            'forcemerged': self.filter_forceMerged,\n            'ilm': self.filter_ilm,\n            'kibana': self.filter_kibana,\n            'none': self.filter_none,\n            'opened': self.filter_opened,\n            'period': self.filter_period,\n            'pattern': self.filter_by_regex,\n            'space': self.filter_by_space,\n            'shards': self.filter_by_shards,\n            'size': self.filter_by_size,\n        }\n        return methods[ftype]\n\n    def __remove_missing(self, err):\n        \"\"\"\n        Remove missing index found in ``err`` from self.indices and return that name\n        \"\"\"\n        missing = err.info['error']['index']\n        self.loggit.warning('Index was initiallly present, but now is not: %s', missing)\n        self.loggit.debug('Removing %s from active IndexList', missing)\n        self.indices.remove(missing)\n        return missing\n\n    def __zero_values(self):\n        \"\"\"The default values for index metadata\"\"\"\n        return {\n            'age': {'creation_date': 0, 'name': 0},\n            'docs': 0,\n            'number_of_replicas': 0,\n            'number_of_shards': 0,\n            'primary_size_in_bytes': 0,\n            'routing': {},\n            'segments': 0,\n            'size_in_bytes': 0,\n            'state': '',\n        }\n\n    def _get_indices_segments(self, data):\n        return self.client.indices.segments(index=to_csv(data))['indices'].copy()\n\n    def _get_indices_settings(self, data):\n        return self.client.indices.get_settings(index=to_csv(data))\n\n    def _get_indices_stats(self, data):\n        return self.client.indices.stats(index=to_csv(data), metric='store,docs')[\n            'indices'\n        ]\n\n    def _bulk_queries(self, data, exec_func):\n        slice_number = 10\n        query_result = {}\n        loop_number = (\n            round(len(data) / slice_number)\n            if round(len(data) / slice_number) > 0\n            else 1\n        )\n        self.loggit.debug(\"Bulk Queries - number requests created: %s\", loop_number)\n        for num in range(0, loop_number):\n            if num == (loop_number - 1):\n                data_sliced = data[num * slice_number :]\n            else:\n                data_sliced = data[num * slice_number : (num + 1) * slice_number]\n            query_result.update(exec_func(data_sliced))\n        return query_result\n\n    def mitigate_alias(self, index):\n        \"\"\"\n        Mitigate when an alias is detected instead of an index name\n\n        :param index: The index name that is showing up *instead* of what was expected\n\n        :type index: str\n\n        :returns: No return value:\n        :rtype: None\n        \"\"\"\n        self.loggit.debug('BEGIN mitigate_alias')\n        self.loggit.debug(\n            'Correcting an instance where an alias name points to index \"%s\"', index\n        )\n        data = self.client.indices.get(index=index)\n        aliases = list(data[index]['aliases'])\n        if aliases:\n            for alias in aliases:\n                if alias in self.indices:\n                    self.loggit.warning(\n                        'Removing alias \"%s\" from IndexList.indices', alias\n                    )\n                    self.indices.remove(alias)\n                if alias in list(self.index_info):\n                    self.loggit.warning(\n                        'Removing alias \"%s\" from IndexList.index_info', alias\n                    )\n                    del self.index_info[alias]\n        self.loggit.debug('Adding \"%s\" to IndexList.indices', index)\n        self.indices.append(index)\n        self.loggit.debug(\n            'Adding preliminary metadata for \"%s\" to IndexList.index_info', index\n        )\n        self.__build_index_info(index)\n        self.loggit.debug('END mitigate_alias')\n\n    def alias_index_check(self, data):\n        \"\"\"\n        Check each index in data to see if it's an alias.\n        \"\"\"\n        # self.loggit.debug('BEGIN alias_index_check')\n        working_list = data[:]\n        for entry in working_list:\n            if self.client.indices.exists_alias(name=entry):\n                index = list(self.client.indices.get_alias(name=entry).keys())[0]\n                self.loggit.warning(\n                    '\"%s\" is actually an alias for index \"%s\"', entry, index\n                )\n                self.mitigate_alias(index)\n                # The mitigate_alias step ensures that the class ivars are handled\n                # properly. The following ensure that we pass back a modified list\n                data.remove(entry)\n                data.append(index)\n        # self.loggit.debug('END alias_index_check')\n        return data\n\n    def indices_exist(self, data, exec_func):\n        \"\"\"Check if indices exist. If one doesn't, remove it. Loop until all exist\"\"\"\n        self.loggit.debug('BEGIN indices_exist')\n        checking = True\n        working_list = {}\n        verified_data = self.alias_index_check(data)\n        while checking:\n            try:\n                working_list.update(exec_func(verified_data))\n            except NotFoundError as err:\n                data.remove(self.__remove_missing(err))\n                continue\n            except TransportError as err:\n                if '413' in err.errors:\n                    msg = (\n                        'Huge Payload 413 Err - Trying to get information via '\n                        'multiple requests'\n                    )\n                    self.loggit.debug(msg)\n                    working_list.update(self._bulk_queries(verified_data, exec_func))\n            checking = False\n        # self.loggit.debug('END indices_exist')\n        return working_list\n\n    def data_getter(self, data, exec_func):\n        \"\"\"\n        Function that prevents unnecessary code repetition for different data\n        getter methods\n        \"\"\"\n        self.loggit.debug('BEGIN data_getter')\n        checking = True\n        while checking:\n            working_list = self.indices_exist(data, exec_func)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        sii = self.index_info[index]\n                    except KeyError:\n                        self.loggit.warning(\n                            'Index %s was not present at IndexList initialization, '\n                            ' and may be behind an alias',\n                            index,\n                        )\n                        self.mitigate_alias(index)\n                        sii = self.index_info[index]\n                        working_list = {}\n                        try:\n                            working_list.update(self._bulk_queries(data, exec_func))\n                        except NotFoundError as err:\n                            data.remove(self.__remove_missing(err))\n                            continue\n                    yield sii, working_list[index], index\n            checking = False\n        # self.loggit.debug('END data_getter')\n\n    def population_check(self, index, key):\n        \"\"\"Verify that key is in self.index_info[index], and that it is populated\"\"\"\n        retval = True\n        # self.loggit.debug('BEGIN population_check')\n        # self.loggit.debug('population_check: %s, %s', index, key)\n        if index not in self.index_info:\n            # This is just in case the index was somehow not populated\n            self.__build_index_info(index)\n        if key not in self.index_info[index]:\n            self.index_info[index][key] = self.__zero_values()[key]\n        if self.index_info[index][key] == self.__zero_values()[key]:\n            retval = False\n        # self.loggit.debug('END population_check')\n        return retval\n\n    def needs_data(self, indices, fields):\n        \"\"\"Check for data population in self.index_info\"\"\"\n        self.loggit.debug('Indices: %s, Fields: %s', indices, fields)\n        needful = []\n        working_list = self.indices_exist(indices, self._get_indices_settings)\n        for idx in working_list:\n            count = 0\n            for field in fields:\n                # If the return value is True for this field, it means it's populated\n                if self.population_check(idx, field):\n                    count += 1\n            if count == 0:\n                # All values are the default/zero\n                needful.append(idx)\n        if fields == ['state']:\n            self.loggit.debug('Always check open/close for all passed indices')\n            needful = list(working_list.keys())\n        self.loggit.debug('These indices need data in index_info: %s', needful)\n        return needful\n\n    def get_index_settings(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n            creation_date\n            number_of_replicas\n            number_of_shards\n            routing information (if present)\n        \"\"\"\n        self.loggit.debug('Getting index settings -- BEGIN')\n        self.empty_list_check()\n        fields = ['age', 'number_of_replicas', 'number_of_shards', 'routing']\n        for lst in chunk_index_list(self.indices):\n            # This portion here is to ensure that we're not polling for data\n            # unless we must\n            needful = self.needs_data(lst, fields)\n            if not needful:\n                # All indices are populated with some data, so we can skip\n                # data collection\n                continue\n            # Now we only need to run on the 'needful'\n            for sii, wli, _ in self.data_getter(needful, self._get_indices_settings):\n                sii['age']['creation_date'] = fix_epoch(\n                    wli['settings']['index']['creation_date']\n                )\n                sii['number_of_replicas'] = wli['settings']['index'][\n                    'number_of_replicas'\n                ]\n                sii['number_of_shards'] = wli['settings']['index']['number_of_shards']\n                if 'routing' in wli['settings']['index']:\n                    sii['routing'] = wli['settings']['index']['routing']\n        self.loggit.debug('Getting index settings -- END')\n\n    def get_index_state(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n\n            state (open or closed)\n\n        from the cat API\n        \"\"\"\n        self.loggit.debug('Getting index state -- BEGIN')\n        self.empty_list_check()\n        fields = ['state']\n        for lst in chunk_index_list(self.indices):\n            # This portion here is to ensure that we're not polling for data\n            # unless we must\n            needful = self.needs_data(lst, fields)\n            # Checking state is _always_ needful.\n            resp = self.client.cat.indices(\n                index=to_csv(needful), format='json', h='index,status'\n            )\n            for entry in resp:\n                try:\n                    self.index_info[entry['index']]['state'] = entry['status']\n                except KeyError:\n                    self.loggit.warning(\n                        'Index %s was not present at IndexList initialization, '\n                        'and may be behind an alias',\n                        entry['index'],\n                    )\n                    self.mitigate_alias(entry['index'])\n                    self.index_info[entry['index']]['state'] = entry['status']\n        # self.loggit.debug('Getting index state -- END')\n\n    def get_index_stats(self):\n        \"\"\"\n        Populate ``index_info`` with index ``size_in_bytes``,\n        ``primary_size_in_bytes`` and doc count information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index stats -- BEGIN')\n        self.empty_list_check()\n        fields = ['size_in_bytes', 'docs', 'primary_size_in_bytes']\n        # This ensures that the index state is populated\n        self.get_index_state()\n        # Don't populate working_list until after the get_index state as it\n        # can and will remove missing indices\n        working_list = self.working_list()\n        for index in self.working_list():\n            if self.index_info[index]['state'] == 'close':\n                working_list.remove(index)\n        if working_list:\n            index_lists = chunk_index_list(working_list)\n            for lst in index_lists:\n                # This portion here is to ensure that we're not polling for data\n                # unless we must\n                needful = self.needs_data(lst, fields)\n                if not needful:\n                    # All indices are populated with some data, so we can skip\n                    # data collection\n                    continue\n                # Now we only need to run on the 'needful'\n                for sii, wli, index in self.data_getter(\n                    needful, self._get_indices_stats\n                ):\n                    try:\n                        size = wli['total']['store']['size_in_bytes']\n                        docs = wli['total']['docs']['count']\n                        primary_size = wli['primaries']['store']['size_in_bytes']\n                        msg = (\n                            f'Index: {index}  Size: {byte_size(size)}  Docs: {docs} '\n                            f'PrimarySize: {byte_size(primary_size)}'\n                        )\n                        self.loggit.debug(msg)\n                        sii['size_in_bytes'] = size\n                        sii['docs'] = docs\n                        sii['primary_size_in_bytes'] = primary_size\n                    except KeyError:\n                        msg = f'Index stats missing for \"{index}\" -- might be closed'\n                        self.loggit.warning(msg)\n        # self.loggit.debug('Getting index stats -- END')\n\n    def get_segment_counts(self):\n        \"\"\"\n        Populate ``index_info`` with segment information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index segment counts')\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            for sii, wli, _ in self.data_getter(lst, self._get_indices_segments):\n                shards = wli['shards']\n                segmentcount = 0\n                for shardnum in shards:\n                    for shard in range(0, len(shards[shardnum])):\n                        segmentcount += shards[shardnum][shard]['num_search_segments']\n                sii['segments'] = segmentcount\n\n    def empty_list_check(self):\n        \"\"\"Raise :py:exc:`~.curator.exceptions.NoIndices` if ``indices`` is empty\"\"\"\n        self.loggit.debug('Checking for empty list')\n        if not self.indices:\n            raise NoIndices('index_list object is empty.')\n\n    def working_list(self):\n        \"\"\"\n        Return the current value of ``indices`` as copy-by-value to prevent list\n        stomping during iterations\n        \"\"\"\n        # Copy by value, rather than reference to prevent list stomping during\n        # iterations\n        self.loggit.debug('Generating working list of indices')\n        return self.indices[:]\n\n    def _get_name_based_ages(self, timestring):\n        \"\"\"\n        Add indices to ``index_info`` based on the age as indicated by the index\n        name pattern, if it matches ``timestring``\n\n        :param timestring: An :py:func:`time.strftime` pattern\n        \"\"\"\n        # Check for empty list before proceeding here to prevent non-iterable condition\n        self.loggit.debug('Getting ages of indices by \"name\"')\n        self.empty_list_check()\n        tstr = TimestringSearch(timestring)\n        for index in self.working_list():\n            epoch = tstr.get_epoch(index)\n            if isinstance(epoch, int):\n                self.index_info[index]['age']['name'] = epoch\n            else:\n                msg = (\n                    f'Timestring {timestring} was not found in index {index}. '\n                    f'Removing from actionable list'\n                )\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def _get_field_stats_dates(self, field='@timestamp'):\n        \"\"\"\n        Add indices to ``index_info`` based on the values the queries return, as\n        determined by the min and max aggregated values of ``field``\n\n        :param field: The field with the date value.  The field must be mapped in\n            elasticsearch as a date datatype. Default: ``@timestamp``\n        \"\"\"\n        self.loggit.debug('Cannot query closed indices. Omitting any closed indices.')\n        self.filter_closed()\n        self.loggit.debug(\n            'Cannot use field_stats with empty indices. Omitting any empty indices.'\n        )\n        self.filter_empty()\n        self.loggit.debug(\n            'Getting index date by querying indices for min & max value of %s field',\n            field,\n        )\n        self.empty_list_check()\n        index_lists = chunk_index_list(self.indices)\n        for lst in index_lists:\n            for index in lst:\n                aggs = {\n                    'min': {'min': {'field': field}},\n                    'max': {'max': {'field': field}},\n                }\n                response = self.client.search(index=index, size=0, aggs=aggs)\n                self.loggit.debug('RESPONSE: %s', response)\n                if response:\n                    try:\n                        res = response['aggregations']\n                        self.loggit.debug('res: %s', res)\n                        data = self.index_info[index]['age']\n                        data['min_value'] = fix_epoch(res['min']['value'])\n                        data['max_value'] = fix_epoch(res['max']['value'])\n                        self.loggit.debug('data: %s', data)\n                    except KeyError as exc:\n                        raise ActionError(\n                            f'Field \"{field}\" not found in index \"{index}\"'\n                        ) from exc\n\n    def _calculate_ages(\n        self, source=None, timestring=None, field=None, stats_result=None\n    ):\n        \"\"\"\n        This method initiates index age calculation based on the given parameters.\n        Exceptions are raised when they are improperly configured.\n\n        Set instance variable ``age_keyfield`` for use later, if needed.\n\n        :param source: Source of index age. Can be: ``name``, ``creation_date``,\n            or ``field_stats``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the min or max result value.\n        \"\"\"\n        self.age_keyfield = source\n        if source == 'name':\n            if not timestring:\n                raise MissingArgument(\n                    'source \"name\" requires the \"timestring\" keyword argument'\n                )\n            self._get_name_based_ages(timestring)\n        elif source == 'creation_date':\n            # Nothing to do here as this comes from `get_settings` in __init__\n            pass\n        elif source == 'field_stats':\n            if not field:\n                raise MissingArgument(\n                    'source \"field_stats\" requires the \"field\" keyword argument'\n                )\n            if stats_result not in ['min_value', 'max_value']:\n                raise ValueError(f'Invalid value for \"stats_result\": {stats_result}')\n            self.age_keyfield = stats_result\n            self._get_field_stats_dates(field=field)\n        else:\n            raise ValueError(\n                f'Invalid source: {source}. Must be one of \"name\", \"creation_date\", '\n                f'\"field_stats\".'\n            )\n\n    def _sort_by_age(self, index_list, reverse=True):\n        \"\"\"\n        Take a list of indices and sort them by date.\n\n        By default, the youngest are first with ``reverse=True``, but the oldest\n        can be first by setting ``reverse=False``\n        \"\"\"\n        # Do the age-based sorting here.\n        # Build an temporary dictionary with just index and age as the key and\n        # value, respectively\n        temp = {}\n        for index in index_list:\n            try:\n                if self.index_info[index]['age'][self.age_keyfield]:\n                    temp[index] = self.index_info[index]['age'][self.age_keyfield]\n                else:\n                    msg = (\n                        f'No date for \"{index}\" in IndexList metadata. '\n                        f'Possible timestring mismatch. Excluding index \"{index}\".'\n                    )\n                    self.__excludify(True, True, index, msg)\n            except KeyError:\n                msg = (\n                    f'{index} does not have key \"{self.age_keyfield}\" in IndexList '\n                    f'metadata'\n                )\n                self.__excludify(True, True, index, msg)\n        # Sort alphabetically prior to age sort to keep sorting consistent\n        temp_tuple = sorted(temp.items(), key=lambda k: k[0], reverse=reverse)\n        # If reverse is True, this will sort so the youngest indices are first.\n        # However, if you want oldest first, set reverse to False.\n        # Effectively, this should set us up to act on everything older than\n        # meets the other set criteria. It starts as a tuple, but then becomes a list.\n        sorted_tuple = sorted(temp_tuple, key=lambda k: k[1], reverse=reverse)\n        return [x[0] for x in sorted_tuple]\n\n    def filter_by_regex(self, kind=None, value=None, exclude=False):\n        \"\"\"\n        Match indices by regular expression (pattern).\n\n        :param kind: Can be one of: ``suffix``, ``prefix``, ``regex``, or\n            ``timestring``. This option defines what ``kind`` of filter you will\n            be building.\n        :param value: Depends on ``kind``. It is the :py:func:`time.strftime` string if\n            ``kind`` is ``timestring``. It's used to build the regular expression\n            for other kinds.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by regex')\n        if kind not in ['regex', 'prefix', 'suffix', 'timestring']:\n            raise ValueError(f'{kind}: Invalid value for kind')\n        # Stop here if None or empty value, but zero is okay\n        if value == 0:\n            pass\n        elif not value:\n            raise ValueError(\n                'Invalid None value for \"value\". Cannot be \"None\" type, empty, or False'\n            )\n        if kind == 'timestring':\n            regex = settings.regex_map()[kind].format(get_date_regex(value))\n        else:\n            regex = settings.regex_map()[kind].format(value)\n        self.empty_list_check()\n        pattern = re.compile(regex)\n        for index in self.working_list():\n            self.loggit.debug('Filter by regex: Index: %s', index)\n            match = pattern.search(index)\n            if match:\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_by_age(\n        self,\n        source='name',\n        direction=None,\n        timestring=None,\n        unit=None,\n        unit_count=None,\n        field=None,\n        stats_result='min_value',\n        epoch=None,\n        exclude=False,\n        unit_count_pattern=False,\n    ):\n        \"\"\"\n        Match indices by relative age calculations.\n\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``\n        :param direction: Time to filter, either ``older`` or ``younger``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``seconds``, ``minutes``, ``hours``, ``days``, ``weeks``,\n            ``months``, or ``years``.\n        :param unit_count: The count of ``unit``. ``unit_count`` * ``unit`` will\n            be calculated out to the relative number of seconds.\n        :param unit_count_pattern: A regular expression whose capture group identifies\n            the value for ``unit_count``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the minimum or maximum result value.\n        :param epoch: An epoch timestamp used in conjunction with ``unit`` and\n            ``unit_count`` to establish a point of reference for calculations.\n            If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude`` is `False`, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by age')\n        # Get timestamp point of reference, por\n        por = get_point_of_reference(unit, unit_count, epoch)\n        if not direction:\n            raise MissingArgument('Must provide a value for \"direction\"')\n        if direction not in ['older', 'younger']:\n            raise ValueError(f'Invalid value for \"direction\": {direction}')\n        # This filter requires index settings.\n        self.get_index_settings()\n        self._calculate_ages(\n            source=source, timestring=timestring, field=field, stats_result=stats_result\n        )\n        if unit_count_pattern:\n            try:\n                unit_count_matcher = re.compile(unit_count_pattern)\n            # pylint: disable=broad-except\n            except Exception as exc:\n                # We got an illegal regex, so won't be able to match anything\n                self.loggit.error(\n                    'Regular expression failure. Will not match unit count. Error: %s',\n                    exc,\n                )\n                unit_count_matcher = None\n        for index in self.working_list():\n            try:\n                remove_this_index = False\n                age = int(self.index_info[index]['age'][self.age_keyfield])\n                # if age == 0:\n                #     msg = (\n                #         f'Evaluating {index} resulted in an epoch timestamp of '\n                #         f'0, meaning there is no associated date. Removing from '\n                #         f'the actionable list.'\n                #     )\n                #     self.loggit.debug(msg)\n                #     self.indices.remove(index)\n                #     continue\n                msg = (\n                    f'Index \"{index}\" age ({age}), direction: \"{direction}\", point of '\n                    f'reference, ({por})'\n                )\n                # Because time adds to epoch, smaller numbers are actually older\n                # timestamps.\n                if unit_count_pattern:\n                    msg = (\n                        f'unit_count_pattern is set, trying to match pattern to '\n                        f'index \"{index}\"'\n                    )\n                    self.loggit.debug(msg)\n                    unit_count_from_index = get_unit_count_from_name(\n                        index, unit_count_matcher\n                    )\n                    if unit_count_from_index:\n                        self.loggit.debug(\n                            'Pattern matched, applying unit_count of  \"%s\"',\n                            unit_count_from_index,\n                        )\n                        adjustedpor = get_point_of_reference(\n                            unit, unit_count_from_index, epoch\n                        )\n                        msg = (\n                            f'Adjusting point of reference from {por} to {adjustedpor} '\n                            f'based on unit_count of {unit_count_from_index} from '\n                            f'index name'\n                        )\n                        self.loggit.debug(msg)\n                    elif unit_count == -1:\n                        # Unable to match pattern and unit_count is -1, meaning no\n                        # fallback, so this index is removed from the list\n                        msg = (\n                            f'Unable to match pattern and no fallback value set. '\n                            f'Removing index \"{index}\" from actionable list'\n                        )\n                        self.loggit.debug(msg)\n                        remove_this_index = True\n                        adjustedpor = por\n                        # necessary to avoid exception if the first index is excluded\n                    else:\n                        # Unable to match the pattern and unit_count is set, so\n                        # fall back to using unit_count for determining whether\n                        # to keep this index in the list\n                        self.loggit.debug(\n                            'Unable to match pattern using fallback value of \"%s\"',\n                            unit_count,\n                        )\n                        adjustedpor = por\n                else:\n                    adjustedpor = por\n                if direction == 'older':\n                    agetest = age < adjustedpor\n                else:\n                    agetest = age > adjustedpor\n                self.__excludify(agetest and not remove_this_index, exclude, index, msg)\n            except KeyError:\n                msg = (\n                    f'Index \"{index}\" does not meet provided criteria. '\n                    f'Removing from list.'\n                )\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def filter_by_space(\n        self,\n        disk_space=None,\n        reverse=True,\n        use_age=False,\n        source='creation_date',\n        timestring=None,\n        field=None,\n        stats_result='min_value',\n        exclude=False,\n        threshold_behavior='greater_than',\n    ):\n        \"\"\"\n        Remove indices from the actionable list based on space consumed, sorted\n        reverse-alphabetically by default.  If you set ``reverse`` to ``False``,\n        it will be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` --then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse`` to ``False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the\n        index creation date by default, but you can specify an ``source`` of\n        ``name``, ``max_value``, or ``min_value``. The ``name`` ``source`` requires\n        the timestring argument.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``disk_space``. When set to\n        ``less_than``, it includes if the index is smaller than ``disk_space``\n\n        :param disk_space: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param reverse: The filtering direction. (default: ``True``).  Ignored if\n            ``use_age`` is ``True``\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name`` is selected.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``\n            is selected.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats`` is selected. It determines whether to reference\n            the minimum or maximum value of `field` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by disk space')\n        # Ensure that disk_space is a float\n        if not disk_space:\n            raise MissingArgument('No value for \"disk_space\" provided')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(\n                f'Invalid value for \"threshold_behavior\": {threshold_behavior}'\n            )\n        # This filter requires both index stats and index settings\n        self.get_index_stats()\n        self.get_index_settings()\n        disk_space = float(disk_space)\n        disk_usage = 0.0\n        disk_limit = disk_space * 2**30\n        msg = (\n            'Cannot get disk usage info from closed indices. Omitting any '\n            'closed indices.'\n        )\n        self.loggit.debug(msg)\n        self.filter_closed()\n        if use_age:\n            self._calculate_ages(\n                source=source,\n                timestring=timestring,\n                field=field,\n                stats_result=stats_result,\n            )\n            # Using default value of reverse=True in self._sort_by_age()\n            self.loggit.debug('SORTING BY AGE')\n            sorted_indices = self._sort_by_age(self.working_list())\n        else:\n            # Default to sorting by index name\n            sorted_indices = sorted(self.working_list(), reverse=reverse)\n        for index in sorted_indices:\n            disk_usage += self.index_info[index]['size_in_bytes']\n            msg = (\n                f'{index}, summed disk usage is {byte_size(disk_usage)} and disk limit '\n                f'is {byte_size(disk_limit)}.'\n            )\n            if threshold_behavior == 'greater_than':\n                self.__excludify((disk_usage > disk_limit), exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify((disk_usage < disk_limit), exclude, index, msg)\n\n    def filter_kibana(self, exclude=True):\n        \"\"\"\n        Match any index named ``.kibana*`` in ``indices``. Older releases addressed\n        index names that no longer exist.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering kibana indices')\n        self.empty_list_check()\n        for index in self.working_list():\n            pattern = re.compile(r'^\\.kibana.*$')\n            if pattern.match(index):\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_forceMerged(self, max_num_segments=None, exclude=True):\n        \"\"\"\n        Match any index which has ``max_num_segments`` per shard or fewer in the\n        actionable list.\n\n        :param max_num_segments: Cutoff number of segments per shard.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering forceMerged indices')\n        if not max_num_segments:\n            raise MissingArgument('Missing value for \"max_num_segments\"')\n        self.loggit.debug(\n            'Cannot get segment count of closed indices. Omitting any closed indices.'\n        )\n        # This filter requires the index state (open/close), and index settings.\n        self.get_index_state()\n        self.get_index_settings()\n        self.filter_closed()\n        self.get_segment_counts()\n        for index in self.working_list():\n            # Do this to reduce long lines and make it more readable...\n            shards = int(self.index_info[index]['number_of_shards'])\n            replicas = int(self.index_info[index]['number_of_replicas'])\n            segments = int(self.index_info[index]['segments'])\n            msg = (\n                f'{index} has {shards} shard(s) + {replicas} replica(s) '\n                f'with a sum total of {segments} segments.'\n            )\n            expected_count = (shards + (shards * replicas)) * max_num_segments\n            self.__excludify((segments <= expected_count), exclude, index, msg)\n\n    def filter_closed(self, exclude=True):\n        \"\"\"\n        Filter out closed indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering closed indices')\n        # This filter requires index state (open/close)\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'close'\n            self.loggit.debug(\n                'Index %s state: %s', index, self.index_info[index]['state']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_empty(self, exclude=True):\n        \"\"\"\n        Filter indices with a document count of zero. Indices that are closed\n        are automatically excluded from consideration due to closed indices reporting\n        a document count of zero.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering empty indices')\n        # This index requires index state (open/close) and index stats\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['docs'] == 0\n            self.loggit.debug(\n                'Index %s doc count: %s', index, self.index_info[index]['docs']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_opened(self, exclude=True):\n        \"\"\"\n        Filter out opened indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering open indices')\n        # This filter requires index state (open/close)\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'open'\n            self.loggit.debug(\n                'Index %s state: %s', index, self.index_info[index]['state']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_allocated(\n        self, key=None, value=None, allocation_type='require', exclude=True\n    ):\n        \"\"\"\n        Match indices that have the routing allocation rule of ``key=value`` from\n        ``indices``\n\n        :param key: The allocation attribute to check for\n        :param value: The value to check for\n        :param allocation_type: Type of allocation to apply\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is `T`rue`\n        \"\"\"\n        self.loggit.debug('Filtering indices with shard routing allocation rules')\n        if not key:\n            raise MissingArgument('No value for \"key\" provided')\n        if not value:\n            raise MissingArgument('No value for \"value\" provided')\n        if allocation_type not in ['include', 'exclude', 'require']:\n            raise ValueError(f'Invalid \"allocation_type\": {allocation_type}')\n        # This filter requires index settings\n        self.get_index_settings()\n        self.get_index_state()\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        has_routing = (\n                            working_list[index]['settings']['index']['routing'][\n                                'allocation'\n                            ][allocation_type][key]\n                            == value\n                        )\n                    except KeyError:\n                        has_routing = False\n                    # if has_routing:\n                    msg = (\n                        f'{index}: Routing (mis)match: '\n                        f'index.routing.allocation.{allocation_type}.{key}={value}.'\n                    )\n                    self.__excludify(has_routing, exclude, index, msg)\n\n    def filter_none(self):\n        \"\"\"The legendary NULL filter\"\"\"\n        self.loggit.debug('\"None\" filter selected.  No filtering will be done.')\n\n    def filter_by_alias(self, aliases=None, exclude=False):\n        \"\"\"\n        Match indices which are associated with the alias or list of aliases\n        identified by ``aliases``. Indices must appear in all aliases in list\n        ``aliases`` or a 404 error will result, leading to no indices being matched.\n\n        :param aliases: A list of alias names.\n        :type aliases: list\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices matching aliases: \"%s\"', aliases)\n        if not aliases:\n            raise MissingArgument('No value for \"aliases\" provided')\n        aliases = ensure_list(aliases)\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            try:\n                # get_alias will either return {} or a NotFoundError.\n                has_alias = list(\n                    self.client.indices.get_alias(\n                        index=to_csv(lst), name=to_csv(aliases)\n                    ).keys()\n                )\n                self.loggit.debug('has_alias: %s', has_alias)\n            except NotFoundError:\n                # if we see the NotFoundError, we need to set working_list to {}\n                has_alias = []\n            for index in lst:\n                if index in has_alias:\n                    isness = 'is'\n                    condition = True\n                else:\n                    isness = 'is not'\n                    condition = False\n                msg = f'{index} {isness} associated with aliases: {aliases}'\n                self.__excludify(condition, exclude, index, msg)\n\n    def filter_by_count(\n        self,\n        count=None,\n        reverse=True,\n        use_age=False,\n        pattern=None,\n        source='creation_date',\n        timestring=None,\n        field=None,\n        stats_result='min_value',\n        exclude=True,\n    ):\n        \"\"\"\n        Remove indices from the actionable list beyond the number ``count``, sorted\n        reverse-alphabetically by default.  If you set ``reverse=False``, it will\n        be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` -- then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse=False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the index\n        creation date by default, but you can specify an ``source`` of ``name``,\n        ``max_value``, or ``min_value``. The ``name`` `source` requires the\n        timestring argument.\n\n        :param count: Filter indices beyond ``count``.\n        :param reverse: The filtering direction. (default: ``True``).\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param pattern: Select indices to count from a regular expression pattern.\n            This pattern must have one and only one capture group. This can allow\n            a single ``count`` filter instance to operate against any number of\n            matching patterns, and keep ``count`` of each index in that group.\n            For example, given a ``pattern`` of ``'^(.*)-\\\\d{6}$'``, it will match\n            both ``rollover-000001`` and ``index-999990``, but not\n            ``logstash-2017.10.12``. Following the same example, if my cluster\n            also had ``rollover-000002`` through ``rollover-000010`` and\n            ``index-888888`` through ``index-999999``, it will process both groups\n            of indices, and include or exclude the ``count`` of each.\n        :param source: Source of index age. Can be one of ``name``,\n            ``creation_date``, or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name``.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats``. It determines whether to reference the minimum\n            or maximum value of ``field`` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices by count')\n        if not count:\n            raise MissingArgument('No value for \"count\" provided')\n        # This filter requires index state (open/close) and index settings\n        self.get_index_state()\n        self.get_index_settings()\n        # Create a copy-by-value working list\n        working_list = self.working_list()\n        if pattern:\n            try:\n                regex = re.compile(pattern)\n                if regex.groups < 1:\n                    raise ConfigurationError(\n                        f'No regular expression group found in {pattern}'\n                    )\n                if regex.groups > 1:\n                    raise ConfigurationError(\n                        f'More than 1 regular expression group found in {pattern}'\n                    )\n                # Prune indices not matching the regular expression the object\n                # (And filtered_indices) We do not want to act on them by accident.\n                prune_these = list(\n                    filter(lambda x: regex.match(x) is None, working_list)\n                )\n                filtered_indices = working_list\n                for index in prune_these:\n                    msg = '{index} does not match regular expression {pattern}.'\n                    condition = True\n                    exclude = True\n                    self.__excludify(condition, exclude, index, msg)\n                    # also remove it from filtered_indices\n                    filtered_indices.remove(index)\n                # Presort these filtered_indices using the lambda\n                presorted = sorted(\n                    filtered_indices, key=lambda x: regex.match(x).group(1)\n                )\n            except Exception as exc:\n                raise ActionError(\n                    f'Unable to process pattern: \"{pattern}\". Error: {exc}'\n                ) from exc\n            # Initialize groups here\n            groups = []\n            # We have to pull keys k this way, but we don't need to keep them\n            # We only need g for groups\n            for _, g in itertools.groupby(\n                presorted, key=lambda x: regex.match(x).group(1)\n            ):\n                groups.append(list(g))\n        else:\n            # Since pattern will create a list of lists, and we iterate over that,\n            # we need to put our single list inside a list\n            groups = [working_list]\n        for group in groups:\n            if use_age:\n                if source != 'name':\n                    self.loggit.warning(\n                        'Cannot get age information from closed indices unless '\n                        'source=\"name\".  Omitting any closed indices.'\n                    )\n                    self.filter_closed()\n                self._calculate_ages(\n                    source=source,\n                    timestring=timestring,\n                    field=field,\n                    stats_result=stats_result,\n                )\n                # Using default value of reverse=True in self._sort_by_age()\n                sorted_indices = self._sort_by_age(group, reverse=reverse)\n            else:\n                # Default to sorting by index name\n                sorted_indices = sorted(group, reverse=reverse)\n            idx = 1\n            for index in sorted_indices:\n                msg = f'{index} is {idx} of specified count of {count}.'\n                condition = True if idx <= count else False\n                self.__excludify(condition, exclude, index, msg)\n                idx += 1\n\n    def filter_by_shards(\n        self, number_of_shards=None, shard_filter_behavior='greater_than', exclude=False\n    ):\n        \"\"\"\n        Match ``indices`` with a given shard count.\n\n        Selects all indices with a shard count ``greater_than`` ``number_of_shards``\n        by default. Use ``shard_filter_behavior`` to select indices with shard\n        count ``greater_than``, ``greater_than_or_equal``, ``less_than``,\n        ``less_than_or_equal``, or ``equal`` to ``number_of_shards``.\n\n        :param number_of_shards: shard threshold\n        :param shard_filter_behavior: Do you want to filter on ``greater_than``,\n            ``greater_than_or_equal``, ``less_than``, ``less_than_or_equal``,\n            or ``equal``?\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug(\"Filtering indices by number of shards\")\n        if not number_of_shards:\n            raise MissingArgument('No value for \"number_of_shards\" provided')\n        if shard_filter_behavior not in [\n            'greater_than',\n            'less_than',\n            'greater_than_or_equal',\n            'less_than_or_equal',\n            'equal',\n        ]:\n            raise ValueError(\n                f'Invalid value for \"shard_filter_behavior\": {shard_filter_behavior}'\n            )\n        if number_of_shards < 1 or (\n            shard_filter_behavior == 'less_than' and number_of_shards == 1\n        ):\n            raise ValueError(\n                f'Unacceptable value: {number_of_shards} -- \"number_of_shards\" cannot '\n                f'be less than 1. A valid index will have at least one shard.'\n            )\n        # This filter requires index_settings to count shards\n        self.get_index_settings()\n        self.empty_list_check()\n        for index in self.working_list():\n            self.loggit.debug('Filter by number of shards: Index: %s', index)\n            if shard_filter_behavior == 'greater_than':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) > number_of_shards\n                )\n            elif shard_filter_behavior == 'less_than':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) < number_of_shards\n                )\n            elif shard_filter_behavior == 'greater_than_or_equal':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) >= number_of_shards\n                )\n            elif shard_filter_behavior == 'less_than_or_equal':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) <= number_of_shards\n                )\n            else:\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) == number_of_shards\n                )\n            self.__excludify(condition, exclude, index)\n\n    def filter_period(\n        self,\n        period_type='relative',\n        source='name',\n        range_from=None,\n        range_to=None,\n        date_from=None,\n        date_to=None,\n        date_from_format=None,\n        date_to_format=None,\n        timestring=None,\n        unit=None,\n        field=None,\n        stats_result='min_value',\n        intersect=False,\n        week_starts_on='sunday',\n        epoch=None,\n        exclude=False,\n    ):\n        \"\"\"\n        Match ``indices`` with ages within a given period.\n\n        :param period_type: Can be either ``absolute`` or ``relative``.  Default\n            is ``relative``. ``date_from`` and ``date_to`` are required when using\n            ``period_type='absolute'``. ``range_from`` and ``range_to`` are required\n            with ``period_type='relative'``.\n        :param source: Source of index age. Can be ``name``, ``creation_date``,\n            or ``field_stats``\n        :param range_from: How many ``unit`` (s) in the past/future is the origin?\n        :param range_to: How many ``unit`` (s) in the past/future is the end point?\n        :param date_from: The simplified date for the start of the range\n        :param date_to: The simplified date for the end of the range.  If this\n            value is the same as ``date_from``, the full value of ``unit`` will be\n            extrapolated for the range.  For example, if ``unit=months``, and\n            ``date_from`` and ``date_to`` are both ``2017.01``, then the entire\n            month of January 2017 will be the absolute date range.\n        :param date_from_format: The :py:func:`time.strftime` string used to\n            parse ``date_from``\n        :param date_to_format: The :py:func:`time.strftime` string used to\n            parse ``date_to``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``hours``, ``days``, ``weeks``, ``months``, or ``years``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used in\n            conjunction with ``source='field_stats'`` to choose whether to reference\n            the min or max result value.\n        :param intersect: Only used when ``source='field_stats'``. If ``True``,\n            only indices where both ``min_value`` and ``max_value`` are within the\n            period will be selected. If ``False``, it will use whichever you specified.\n            Default is ``False`` to preserve expected behavior.\n        :param week_starts_on: Either ``sunday`` or ``monday``. Default is ``sunday``\n        :param epoch: An epoch timestamp used to establish a point of reference for\n            calculations. If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by period')\n        if period_type not in ['absolute', 'relative']:\n            raise ValueError(\n                f'Unacceptable value: {period_type} -- \"period_type\" must be either '\n                f'\"absolute\" or \"relative\".'\n            )\n        if period_type == 'relative':\n            func = date_range\n            args = [unit, range_from, range_to, epoch]\n            kwgs = {'week_starts_on': week_starts_on}\n            if (not isinstance(range_from, int)) or (not isinstance(range_to, int)):\n                raise ConfigurationError(\n                    '\"range_from\" and \"range_to\" must be integer values'\n                )\n        else:\n            func = absolute_date_range\n            args = [unit, date_from, date_to]\n            kwgs = {\n                'date_from_format': date_from_format,\n                'date_to_format': date_to_format,\n            }\n            for reqd in [date_from, date_to, date_from_format, date_to_format]:\n                if not reqd:\n                    raise ConfigurationError(\n                        'Must provide \"date_from\", \"date_to\", \"date_from_format\", and '\n                        '\"date_to_format\" with absolute period_type'\n                    )\n        # This filter requires index settings\n        self.get_index_settings()\n        try:\n            start, end = func(*args, **kwgs)\n        # pylint: disable=broad-except\n        except Exception as exc:\n            report_failure(exc)\n        self._calculate_ages(\n            source=source, timestring=timestring, field=field, stats_result=stats_result\n        )\n        for index in self.working_list():\n            try:\n                if source == 'field_stats' and intersect:\n                    min_age = int(self.index_info[index]['age']['min_value'])\n                    max_age = int(self.index_info[index]['age']['max_value'])\n                    msg = (\n                        f'Index \"{index}\", timestamp field \"{field}\", min_value '\n                        f'({min_age}), max_value ({max_age}), period start: '\n                        f'\"{start}\", period end, \"{end}\"'\n                    )\n                    # Because time adds to epoch, smaller numbers are actually older\n                    # timestamps.\n                    inrange = (min_age >= start) and (max_age <= end)\n                else:\n                    age = int(self.index_info[index]['age'][self.age_keyfield])\n                    msg = (\n                        f'Index \"{index}\" age ({age}), period start: \"{start}\", period '\n                        f'end, \"{end}\"'\n                    )\n                    # Because time adds to epoch, smaller numbers are actually older\n                    # timestamps.\n                    inrange = (age >= start) and (age <= end)\n                self.__excludify(inrange, exclude, index, msg)\n            except KeyError:\n                self.loggit.debug(\n                    'Index \"%s\" does not meet provided criteria. Removing from list.',\n                    index,\n                )\n                self.indices.remove(index)\n\n    def filter_ilm(self, exclude=True):\n        \"\"\"\n        Match indices that have the setting ``index.lifecycle.name``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            ``indices``. If ``exclude=False``, then only matching indices will be\n            kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices with index.lifecycle.name')\n        index_lists = chunk_index_list(self.indices)\n        if index_lists == [['']]:\n            self.loggit.debug('Empty working list. No ILM indices to filter.')\n            return\n        for lst in index_lists:\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        subvalue = working_list[index]['settings']['index']['lifecycle']\n                        has_ilm = 'name' in subvalue\n                        msg = f\"{index} has index.lifecycle.name {subvalue['name']}\"\n                    except KeyError:\n                        has_ilm = False\n                        msg = f'index.lifecycle.name is not set for index {index}'\n                    self.__excludify(has_ilm, exclude, index, msg)\n\n    def iterate_filters(self, filter_dict):\n        \"\"\"\n        Iterate over the filters defined in ``config`` and execute them.\n\n        :param filter_dict: The configuration dictionary\n\n        .. note:: ``filter_dict`` should be a dictionary with the following form:\n        .. code-block:: python\n\n                { 'filters' : [\n                        {\n                            'filtertype': 'the_filter_type',\n                            'key1' : 'value1',\n                            ...\n                            'keyN' : 'valueN'\n                        }\n                    ]\n                }\n\n        \"\"\"\n        self.loggit.debug('Iterating over a list of filters')\n        # Make sure we actually _have_ filters to act on\n        if 'filters' not in filter_dict or len(filter_dict['filters']) < 1:\n            self.loggit.info('No filters in config.  Returning unaltered object.')\n            return\n        self.loggit.debug('All filters: %s', filter_dict['filters'])\n        for fil in filter_dict['filters']:\n            self.loggit.debug('Top of the loop: %s', self.indices)\n            self.loggit.debug('Un-parsed filter args: %s', fil)\n            # Make sure we got at least this much in the configuration\n            chk = SchemaCheck(\n                fil, filterstructure(), 'filter', 'IndexList.iterate_filters'\n            ).result()\n            msg = f'Parsed filter args: {chk}'\n            self.loggit.debug(msg)\n            method = self.__map_method(fil['filtertype'])\n            del fil['filtertype']\n            # If it's a filtertype with arguments, update the defaults with the\n            # provided settings.\n            if fil:\n                self.loggit.debug('Filter args: %s', fil)\n                self.loggit.debug('Pre-instance: %s', self.indices)\n                method(**fil)\n                self.loggit.debug('Post-instance: %s', self.indices)\n            else:\n                # Otherwise, it's a settingless filter.\n                method()\n\n    def filter_by_size(\n        self,\n        size_threshold=None,\n        threshold_behavior='greater_than',\n        exclude=False,\n        size_behavior='primary',\n    ):\n        \"\"\"\n        Remove indices from the actionable list based on index size.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``size_threshold``. When set to\n        ``less_than``, it includes if the index is smaller than ``size_threshold``\n\n        :param size_threshold: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param size_behavior: Size that used to filter, either ``primary`` or\n            ``total``. Defaults to ``primary``\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by index size')\n        # Ensure that disk_space is a float\n        if not size_threshold:\n            raise MissingArgument('No value for \"size_threshold\" provided')\n        if size_behavior not in ['primary', 'total']:\n            raise ValueError(f'Invalid value for \"size_behavior\": {size_behavior}')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(\n                f'Invalid value for \"threshold_behavior\": {threshold_behavior}'\n            )\n        index_size_limit = float(size_threshold) * 2**30\n        msg = (\n            'Cannot get disk usage info from closed indices. '\n            'Omitting any closed indices.'\n        )\n        self.loggit.debug(msg)\n        # This filter requires index state (open/close) and index stats\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        # Create a copy-by-value working list\n        working_list = self.working_list()\n        for index in working_list:\n            if size_behavior == 'primary':\n                index_size = self.index_info[index]['primary_size_in_bytes']\n            else:\n                index_size = self.index_info[index]['size_in_bytes']\n            msg = (\n                f'{index}, index size is {byte_size(index_size)} and '\n                f'size limit is {byte_size(index_size_limit)}.'\n            )\n            if threshold_behavior == 'greater_than':\n                self.__excludify((index_size > index_size_limit), exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify((index_size < index_size_limit), exclude, index, msg)\n"
  },
  "GT_src_dict": {
    "curator/actions/reindex.py": {
      "Reindex.__init__": {
        "code": "    def __init__(self, ilo, request_body, refresh=True, requests_per_second=-1, slices=1, timeout=60, wait_for_active_shards=1, wait_for_completion=True, max_wait=-1, wait_interval=9, remote_certificate=None, remote_client_cert=None, remote_client_key=None, remote_filters=None, migration_prefix='', migration_suffix=''):\n        \"\"\"Initializes the Reindex action class with various parameters essential for performing a reindex operation in Elasticsearch.\n\n    Parameters:\n        ilo (IndexList): An instance of IndexList that provides the indices to be reindexed and the Elasticsearch client.\n        request_body (dict): The body containing request parameters for Elasticsearch's reindex API, which must be validated by the user.\n        refresh (bool): Indicates whether to refresh the target index after the operation (default is True).\n        requests_per_second (int): Throttling for the request in sub-requests per second; -1 signifies no throttling (default is -1).\n        slices (int): Number of slices to divide the task into (default is 1).\n        timeout (int): Time in seconds for bulk requests to wait for unavailable shards (default is 60).\n        wait_for_active_shards (int): Specifies how many shard copies must be active before proceeding (default is 1).\n        wait_for_completion (bool): Indicates whether to wait for the reindexing to complete (default is True).\n        max_wait (int): Maximum duration to wait for completion before timing out (default is -1).\n        wait_interval (int): Time in seconds to wait between checks when waiting for completion (default is 9).\n        remote_certificate (str): Path to SSL/TLS certificate for remote connections (default is None).\n        remote_client_cert (str): Path to SSL/TLS client certificate (default is None).\n        remote_client_key (str): Path to SSL/TLS private key (default is None).\n        remote_filters (dict): Filters to apply when accessing remote indices (default is empty dict).\n        migration_prefix (str): String to prepend to index names when migrating (default is empty).\n        migration_suffix (str): String to append to index names when migrating (default is empty).\n\n    Attributes:\n        loggit (Logger): Logger instance for logging messages related to the reindexing process.\n        body (dict): The request body for the reindexing operation.\n        index_list (IndexList): The IndexList object containing the indices and ES client.\n        client (Elasticsearch): The Elasticsearch client object for executing requests.\n        refresh (bool): Value of refresh parameter.\n        requests_per_second (int): Value of requests_per_second parameter.\n        slices (int): Value of slices parameter.\n        timeout (str): Timeout formatted as a string with suffix 's'.\n        wait_for_active_shards (int): Value of wait_for_active_shards parameter.\n        wfc (bool): Value of wait_for_completion parameter.\n        wait_interval (int): Value of wait_interval parameter.\n        max_wait (int): Value of max_wait parameter.\n        mpfx (str): Migration prefix value.\n        msfx (str): Migration suffix value.\n        remote (bool): Indicates if the reindexing involves a remote source.\n        migration (bool): Indicates if the operation involves migrating indices.\n\n    The method also validates the request body, sets up remote connection parameters if applicable, and retrieves the source indices based on the provided IndexList.\"\"\"\n        '\\n        :param ilo: An IndexList Object\\n        :param request_body: The body to send to\\n            :py:meth:`~.elasticsearch.Elasticsearch.reindex`, which must be\\n            complete and usable, as Curator will do no vetting of the request_body.\\n            If it fails to function, Curator will return an exception.\\n        :param refresh: Whether to refresh the entire target index after the\\n            operation is complete.\\n        :param requests_per_second: The throttle to set on this request in\\n            sub-requests per second. ``-1`` means set no throttle as does\\n            ``unlimited`` which is the only non-float this accepts.\\n        :param slices: The number of slices this task  should be divided into.\\n            ``1`` means the task will not be sliced into subtasks. (Default: ``1``)\\n        :param timeout: The length in seconds each individual bulk request should\\n            wait for shards that are unavailable. (default: ``60``)\\n        :param wait_for_active_shards: Sets the number of shard copies that must be\\n            active before proceeding with the reindex operation. (Default: ``1``)\\n            means the primary shard only. Set to ``all`` for all shard copies,\\n            otherwise set to any non-negative value less than or equal to the total\\n            number of copies for the shard (number of replicas + 1)\\n        :param wait_for_completion: Wait for completion before returning.\\n        :param wait_interval: Seconds to wait between completion checks.\\n        :param max_wait: Maximum number of seconds to ``wait_for_completion``\\n        :param remote_certificate: Path to SSL/TLS certificate\\n        :param remote_client_cert: Path to SSL/TLS client certificate (public key)\\n        :param remote_client_key: Path to SSL/TLS private key\\n        :param migration_prefix: When migrating, prepend this value to the index name.\\n        :param migration_suffix: When migrating, append this value to the index name.\\n\\n        :type ilo: :py:class:`~.curator.indexlist.IndexList`\\n        :type request_body: dict\\n        :type refresh: bool\\n        :type requests_per_second: int\\n        :type slices: int\\n        :type timeout: int\\n        :type wait_for_active_shards: int\\n        :type wait_for_completion: bool\\n        :type wait_interval: int\\n        :type max_wait: int\\n        :type remote_certificate: str\\n        :type remote_cclient_cert: str\\n        :type remote_cclient_key: str\\n        :type migration_prefix: str\\n        :type migration_suffix: str\\n        '\n        if remote_filters is None:\n            remote_filters = {}\n        self.loggit = logging.getLogger('curator.actions.reindex')\n        verify_index_list(ilo)\n        if not isinstance(request_body, dict):\n            raise CuratorConfigError('\"request_body\" is not of type dictionary')\n        self.body = request_body\n        self.loggit.debug('REQUEST_BODY = %s', request_body)\n        self.index_list = ilo\n        self.client = ilo.client\n        self.refresh = refresh\n        self.requests_per_second = requests_per_second\n        self.slices = slices\n        self.timeout = f'{timeout}s'\n        self.wait_for_active_shards = wait_for_active_shards\n        self.wfc = wait_for_completion\n        self.wait_interval = wait_interval\n        self.max_wait = max_wait\n        self.mpfx = migration_prefix\n        self.msfx = migration_suffix\n        self.remote = False\n        if 'remote' in self.body['source']:\n            self.remote = True\n        self.migration = False\n        if self.body['dest']['index'] == 'MIGRATION':\n            self.migration = True\n        if self.migration:\n            if not self.remote and (not self.mpfx) and (not self.msfx):\n                raise CuratorConfigError('MIGRATION can only be used locally with one or both of migration_prefix or migration_suffix.')\n        if self.body['source']['index'] == 'REINDEX_SELECTION' and (not self.remote):\n            self.body['source']['index'] = self.index_list.indices\n        elif self.remote:\n            rclient_args = DotMap()\n            rother_args = DotMap()\n            self.loggit.debug('Remote reindex request detected')\n            if 'host' not in self.body['source']['remote']:\n                raise CuratorConfigError('Missing remote \"host\"')\n            try:\n                rclient_args.hosts = verify_url_schema(self.body['source']['remote']['host'])\n            except ConfigurationError as exc:\n                raise CuratorConfigError(exc) from exc\n            self.remote_host = rclient_args.hosts.split(':')[-2]\n            self.remote_host = self.remote_host.split('/')[2]\n            self.remote_port = rclient_args.hosts.split(':')[-1]\n            if 'username' in self.body['source']['remote']:\n                rother_args.username = self.body['source']['remote']['username']\n            if 'password' in self.body['source']['remote']:\n                rother_args.password = self.body['source']['remote']['password']\n            if remote_certificate:\n                rclient_args.ca_certs = remote_certificate\n            if remote_client_cert:\n                rclient_args.client_cert = remote_client_cert\n            if remote_client_key:\n                rclient_args.client_key = remote_client_key\n            rclient_args.request_timeout = 180\n            if self.body['source']['index'] == 'REINDEX_SELECTION':\n                self.loggit.debug('Filtering indices from remote')\n                msg = f'Remote client args: hosts={rclient_args.hosts} username=REDACTED password=REDACTED certificate={remote_certificate} client_cert={remote_client_cert} client_key={remote_client_key} request_timeout={rclient_args.request_timeout} skip_version_test=True'\n                self.loggit.debug(msg)\n                remote_config = {'elasticsearch': {'client': rclient_args.toDict(), 'other_settings': rother_args.toDict()}}\n                try:\n                    builder = Builder(configdict=remote_config)\n                    builder.version_min = (1, 0, 0)\n                    builder.connect()\n                    rclient = builder.client\n                except Exception as err:\n                    self.loggit.error('Unable to establish connection to remote Elasticsearch with provided credentials/certificates/settings.')\n                    report_failure(err)\n                try:\n                    rio = IndexList(rclient)\n                    rio.iterate_filters({'filters': remote_filters})\n                    try:\n                        rio.empty_list_check()\n                    except NoIndices as exc:\n                        raise FailedExecution('No actionable remote indices selected after applying filters.') from exc\n                    self.body['source']['index'] = rio.indices\n                except Exception as err:\n                    self.loggit.error('Unable to get/filter list of remote indices.')\n                    report_failure(err)\n        self.loggit.debug('Reindexing indices: %s', self.body['source']['index'])",
        "docstring": "Initializes the Reindex action class with various parameters essential for performing a reindex operation in Elasticsearch.\n\nParameters:\n    ilo (IndexList): An instance of IndexList that provides the indices to be reindexed and the Elasticsearch client.\n    request_body (dict): The body containing request parameters for Elasticsearch's reindex API, which must be validated by the user.\n    refresh (bool): Indicates whether to refresh the target index after the operation (default is True).\n    requests_per_second (int): Throttling for the request in sub-requests per second; -1 signifies no throttling (default is -1).\n    slices (int): Number of slices to divide the task into (default is 1).\n    timeout (int): Time in seconds for bulk requests to wait for unavailable shards (default is 60).\n    wait_for_active_shards (int): Specifies how many shard copies must be active before proceeding (default is 1).\n    wait_for_completion (bool): Indicates whether to wait for the reindexing to complete (default is True).\n    max_wait (int): Maximum duration to wait for completion before timing out (default is -1).\n    wait_interval (int): Time in seconds to wait between checks when waiting for completion (default is 9).\n    remote_certificate (str): Path to SSL/TLS certificate for remote connections (default is None).\n    remote_client_cert (str): Path to SSL/TLS client certificate (default is None).\n    remote_client_key (str): Path to SSL/TLS private key (default is None).\n    remote_filters (dict): Filters to apply when accessing remote indices (default is empty dict).\n    migration_prefix (str): String to prepend to index names when migrating (default is empty).\n    migration_suffix (str): String to append to index names when migrating (default is empty).\n\nAttributes:\n    loggit (Logger): Logger instance for logging messages related to the reindexing process.\n    body (dict): The request body for the reindexing operation.\n    index_list (IndexList): The IndexList object containing the indices and ES client.\n    client (Elasticsearch): The Elasticsearch client object for executing requests.\n    refresh (bool): Value of refresh parameter.\n    requests_per_second (int): Value of requests_per_second parameter.\n    slices (int): Value of slices parameter.\n    timeout (str): Timeout formatted as a string with suffix 's'.\n    wait_for_active_shards (int): Value of wait_for_active_shards parameter.\n    wfc (bool): Value of wait_for_completion parameter.\n    wait_interval (int): Value of wait_interval parameter.\n    max_wait (int): Value of max_wait parameter.\n    mpfx (str): Migration prefix value.\n    msfx (str): Migration suffix value.\n    remote (bool): Indicates if the reindexing involves a remote source.\n    migration (bool): Indicates if the operation involves migrating indices.\n\nThe method also validates the request body, sets up remote connection parameters if applicable, and retrieves the source indices based on the provided IndexList.",
        "signature": "def __init__(self, ilo, request_body, refresh=True, requests_per_second=-1, slices=1, timeout=60, wait_for_active_shards=1, wait_for_completion=True, max_wait=-1, wait_interval=9, remote_certificate=None, remote_client_cert=None, remote_client_key=None, remote_filters=None, migration_prefix='', migration_suffix=''):",
        "type": "Method",
        "class_signature": "class Reindex:"
      },
      "Reindex.do_dry_run": {
        "code": "    def do_dry_run(self):\n        \"\"\"Logs the details of the reindex operation that would be performed without executing any changes. This method outputs the source and destination indices, along with the reindexing parameters determined in the `Reindex` class. It serves as a dry run to inform the user about what would happen if the reindex operation were executed.\n\nThere are no input parameters or return values for this method. The method relies on the `sources()` method to retrieve the source and destination index pairs, and the `show_run_args()` method to construct a log message that details the request body and operational parameters. The `self.loggit` logger is used to log messages at the info level, indicating the operation mode.\n\nThis method is useful for validating the reindex setup before actually making any changes to the data in Elasticsearch.\"\"\"\n        'Log what the output would be, but take no action.'\n        self.loggit.info('DRY-RUN MODE.  No changes will be made.')\n        for source, dest in self.sources():\n            self.loggit.info('DRY-RUN: REINDEX: %s', self.show_run_args(source, dest))",
        "docstring": "Logs the details of the reindex operation that would be performed without executing any changes. This method outputs the source and destination indices, along with the reindexing parameters determined in the `Reindex` class. It serves as a dry run to inform the user about what would happen if the reindex operation were executed.\n\nThere are no input parameters or return values for this method. The method relies on the `sources()` method to retrieve the source and destination index pairs, and the `show_run_args()` method to construct a log message that details the request body and operational parameters. The `self.loggit` logger is used to log messages at the info level, indicating the operation mode.\n\nThis method is useful for validating the reindex setup before actually making any changes to the data in Elasticsearch.",
        "signature": "def do_dry_run(self):",
        "type": "Method",
        "class_signature": "class Reindex:"
      },
      "Reindex.do_action": {
        "code": "    def do_action(self):\n        \"\"\"Executes the reindex operation using the provided `request_body` and reindex arguments from `_get_reindex_args`. This method iterates over the source indices obtained from the `sources` generator and performs a reindex for each source-destination pair. It logs the commencement of the reindexing process and the arguments used, including the task ID returned by Elasticsearch. If `wait_for_completion` is set to True, it waits for the reindexing task to complete and verifies the existence of the destination index. If an error occurs during reindexing, it reports the failure.\n\nParameters:\n- `self`: The Reindex instance containing the configuration for the reindexing operation.\n\nReturns:\n- None. The method performs an action rather than returning a value.\n\nDependencies:\n- Uses the `self.client` to perform the reindex operation via the Elasticsearch client.\n- Utilizes `self.sources()` to obtain source and destination index pairs.\n- If `self.wfc` (wait for completion) is True, it relies on `wait_for_it` to monitor the reindexing task.\n- Calls `_post_run_quick_check` to confirm the destination index's existence after completion.\n\nConstants:\n- `self.loggit`: Logger for recording operational details and errors.\n- `response['task']`: The task ID returned from the reindex operation used for tracking the status of the operation.\n- `self.waiting_if_completed`, `self.wait_interval`, and `self.max_wait`: Toggles and parameters that dictate how the completion wait is managed.\"\"\"\n        '\\n        Execute :py:meth:`~.elasticsearch.Elasticsearch.reindex` operation with the\\n        ``request_body`` from :py:meth:`_get_request_body` and arguments\\n        :py:attr:`refresh`, :py:attr:`requests_per_second`, :py:attr:`slices`,\\n        :py:attr:`timeout`, :py:attr:`wait_for_active_shards`, and :py:attr:`wfc`.\\n        '\n        try:\n            for source, dest in self.sources():\n                self.loggit.info('Commencing reindex operation')\n                self.loggit.debug('REINDEX: %s', self.show_run_args(source, dest))\n                response = self.client.reindex(**self._get_reindex_args(source, dest))\n                self.loggit.debug('TASK ID = %s', response['task'])\n                if self.wfc:\n                    wait_for_it(self.client, 'reindex', task_id=response['task'], wait_interval=self.wait_interval, max_wait=self.max_wait)\n                    self._post_run_quick_check(dest, response['task'])\n                else:\n                    msg = f'\"wait_for_completion\" set to {self.wfc}.  Remember to check task_id \"{response['task']}\" for successful completion manually.'\n                    self.loggit.warning(msg)\n        except NoIndices as exc:\n            raise NoIndices('Source index must be list of actual indices. It must not be an empty list.') from exc\n        except Exception as exc:\n            report_failure(exc)",
        "docstring": "Executes the reindex operation using the provided `request_body` and reindex arguments from `_get_reindex_args`. This method iterates over the source indices obtained from the `sources` generator and performs a reindex for each source-destination pair. It logs the commencement of the reindexing process and the arguments used, including the task ID returned by Elasticsearch. If `wait_for_completion` is set to True, it waits for the reindexing task to complete and verifies the existence of the destination index. If an error occurs during reindexing, it reports the failure.\n\nParameters:\n- `self`: The Reindex instance containing the configuration for the reindexing operation.\n\nReturns:\n- None. The method performs an action rather than returning a value.\n\nDependencies:\n- Uses the `self.client` to perform the reindex operation via the Elasticsearch client.\n- Utilizes `self.sources()` to obtain source and destination index pairs.\n- If `self.wfc` (wait for completion) is True, it relies on `wait_for_it` to monitor the reindexing task.\n- Calls `_post_run_quick_check` to confirm the destination index's existence after completion.\n\nConstants:\n- `self.loggit`: Logger for recording operational details and errors.\n- `response['task']`: The task ID returned from the reindex operation used for tracking the status of the operation.\n- `self.waiting_if_completed`, `self.wait_interval`, and `self.max_wait`: Toggles and parameters that dictate how the completion wait is managed.",
        "signature": "def do_action(self):",
        "type": "Method",
        "class_signature": "class Reindex:"
      }
    },
    "curator/exceptions.py": {},
    "curator/indexlist.py": {
      "IndexList.__init__": {
        "code": "    def __init__(self, client, search_pattern='_all'):\n        \"\"\"Initialize an IndexList object that manages Elasticsearch index data.\n\nParameters:\n- client (Elasticsearch): An instance of the Elasticsearch client, validated by the `verify_client_object` function.\n- search_pattern (str): A pattern to specify which indices to include; defaults to '_all', which includes all indices in the cluster.\n\nAttributes:\n- loggit (Logger): A logger instance for logging actions and events specific to the IndexList class.\n- client (Elasticsearch): The provided Elasticsearch client object for interacting with the Elasticsearch service.\n- index_info (dict): A dictionary storing metadata about indices, such as their segment count, age, and other properties.\n- indices (list): A list of indices that are currently considered actionable in this instance.\n- all_indices (list): A complete list of indices in the cluster at the time of initialization.\n- age_keyfield (str or None): A placeholder for storing the age reference field used in filtering operations.\n\nThis constructor calls the private method `__get_indices` to populate the `all_indices` and `indices` attributes based on the provided search pattern.\"\"\"\n        verify_client_object(client)\n        self.loggit = logging.getLogger('curator.indexlist')\n        self.client = client\n        self.index_info = {}\n        self.indices = []\n        self.all_indices = []\n        self.__get_indices(search_pattern)\n        self.age_keyfield = None",
        "docstring": "Initialize an IndexList object that manages Elasticsearch index data.\n\nParameters:\n- client (Elasticsearch): An instance of the Elasticsearch client, validated by the `verify_client_object` function.\n- search_pattern (str): A pattern to specify which indices to include; defaults to '_all', which includes all indices in the cluster.\n\nAttributes:\n- loggit (Logger): A logger instance for logging actions and events specific to the IndexList class.\n- client (Elasticsearch): The provided Elasticsearch client object for interacting with the Elasticsearch service.\n- index_info (dict): A dictionary storing metadata about indices, such as their segment count, age, and other properties.\n- indices (list): A list of indices that are currently considered actionable in this instance.\n- all_indices (list): A complete list of indices in the cluster at the time of initialization.\n- age_keyfield (str or None): A placeholder for storing the age reference field used in filtering operations.\n\nThis constructor calls the private method `__get_indices` to populate the `all_indices` and `indices` attributes based on the provided search pattern.",
        "signature": "def __init__(self, client, search_pattern='_all'):",
        "type": "Method",
        "class_signature": "class IndexList:"
      }
    }
  },
  "dependency_dict": {
    "curator/indexlist.py:IndexList:__init__": {
      "curator/indexlist.py": {
        "IndexList.__get_indices": {
          "code": "    def __get_indices(self, pattern):\n        \"\"\"\n        Pull all indices into ``all_indices``, then populate ``indices`` and\n        ``index_info``\n        \"\"\"\n        self.loggit.debug('Getting indices matching search_pattern: \"%s\"', pattern)\n        self.all_indices = get_indices(self.client, search_pattern=pattern)\n        self.indices = self.all_indices[:]",
          "docstring": "Pull all indices into ``all_indices``, then populate ``indices`` and\n``index_info``",
          "signature": "def __get_indices(self, pattern):",
          "type": "Method",
          "class_signature": "class IndexList:"
        }
      },
      "curator/helpers/testers.py": {
        "verify_client_object": {
          "code": "def verify_client_object(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :returns: ``True`` if ``test`` is a proper :py:class:`~.elasticsearch.Elasticsearch`\n        client object and raise a :py:exc:`TypeError` exception if it is not.\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    # Ignore mock type for testing\n    if str(type(test)) == \"<class 'unittest.mock.Mock'>\":\n        pass\n    elif not isinstance(test, Elasticsearch):\n        msg = f'Not a valid client object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)",
          "docstring": ":param test: The variable or object to test\n\n:type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n:returns: ``True`` if ``test`` is a proper :py:class:`~.elasticsearch.Elasticsearch`\n    client object and raise a :py:exc:`TypeError` exception if it is not.\n:rtype: bool",
          "signature": "def verify_client_object(test):",
          "type": "Function",
          "class_signature": null
        }
      }
    },
    "curator/actions/reindex.py:Reindex:__init__": {
      "curator/helpers/testers.py": {
        "verify_index_list": {
          "code": "def verify_index_list(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.curator.IndexList`\n\n    :returns: ``None`` if ``test`` is a proper :py:class:`~.curator.indexlist.IndexList`\n        object, else raise a :py:class:`TypeError` exception.\n    :rtype: None\n    \"\"\"\n    # It breaks if this import isn't local to this function:\n    # ImportError: cannot import name 'IndexList' from partially initialized module\n    # 'curator.indexlist' (most likely due to a circular import)\n    # pylint: disable=import-outside-toplevel\n    from curator.indexlist import IndexList\n\n    logger = logging.getLogger(__name__)\n    if not isinstance(test, IndexList):\n        msg = f'Not a valid IndexList object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)",
          "docstring": ":param test: The variable or object to test\n\n:type test: :py:class:`~.curator.IndexList`\n\n:returns: ``None`` if ``test`` is a proper :py:class:`~.curator.indexlist.IndexList`\n    object, else raise a :py:class:`TypeError` exception.\n:rtype: None",
          "signature": "def verify_index_list(test):",
          "type": "Function",
          "class_signature": null
        }
      },
      "curator/helpers/utils.py": {
        "report_failure": {
          "code": "def report_failure(exception):\n    \"\"\"\n    Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\n    message.\n\n    :param exception: The upstream exception.\n\n    :type exception: :py:exc:Exception\n\n    :rtype: None\n    \"\"\"\n    raise FailedExecution(\n        f'Exception encountered.  Rerun with loglevel DEBUG and/or check Elasticsearch logs for'\n        f'more information. Exception: {exception}'\n    )",
          "docstring": "Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\nmessage.\n\n:param exception: The upstream exception.\n\n:type exception: :py:exc:Exception\n\n:rtype: None",
          "signature": "def report_failure(exception):",
          "type": "Function",
          "class_signature": null
        }
      }
    },
    "curator/actions/reindex.py:Reindex:do_dry_run": {
      "curator/actions/reindex.py": {
        "Reindex.sources": {
          "code": "    def sources(self):\n        \"\"\"Generator for Reindexing ``sources`` & ``dests``\"\"\"\n        dest = self.body['dest']['index']\n        source_list = ensure_list(self.body['source']['index'])\n        self.loggit.debug('source_list: %s', source_list)\n        if not source_list or source_list == ['REINDEX_SELECTED']:\n            raise NoIndices\n        if not self.migration:\n            yield (self.body['source']['index'], dest)\n        else:\n            for source in source_list:\n                if self.migration:\n                    dest = self.mpfx + source + self.msfx\n                yield (source, dest)",
          "docstring": "Generator for Reindexing ``sources`` & ``dests``",
          "signature": "def sources(self):",
          "type": "Method",
          "class_signature": "class Reindex:"
        },
        "Reindex.show_run_args": {
          "code": "    def show_run_args(self, source, dest):\n        \"\"\"Show what will run\"\"\"\n        return f'request body: {self._get_request_body(source, dest)} with arguments: refresh={self.refresh} requests_per_second={self.requests_per_second} slices={self.slices} timeout={self.timeout} wait_for_active_shards={self.wait_for_active_shards} wait_for_completion={self.wfc}'",
          "docstring": "Show what will run",
          "signature": "def show_run_args(self, source, dest):",
          "type": "Method",
          "class_signature": "class Reindex:"
        }
      }
    },
    "curator/actions/reindex.py:Reindex:do_action": {
      "curator/helpers/waiters.py": {
        "wait_for_it": {
          "code": "def wait_for_it(\n        client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None,\n        wait_interval=9, max_wait=-1\n    ):\n    \"\"\"\n    This function becomes one place to do all ``wait_for_completion`` type behaviors\n\n    :param client: A client connection object\n    :param action: The action name that will identify how to wait\n    :param task_id: If the action provided a task_id, this is where it must be declared.\n    :param snapshot: The name of the snapshot.\n    :param repository: The Elasticsearch snapshot repository to use\n    :param wait_interval: Seconds to wait between completion checks.\n    :param max_wait: Maximum number of seconds to ``wait_for_completion``\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type action: str\n    :type task_id: str\n    :type snapshot: str\n    :type repository: str\n    :type wait_interval: int\n    :type max_wait: int\n    :rtype: None\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    action_map = {\n        'allocation':{'function': health_check, 'args': {'relocating_shards':0}},\n        'replicas':{'function': health_check, 'args': {'status':'green'}},\n        'cluster_routing':{'function': health_check, 'args': {'relocating_shards':0}},\n        'snapshot':{\n            'function':snapshot_check, 'args':{'snapshot':snapshot, 'repository':repository}},\n        'restore':{'function':restore_check, 'args':{'index_list':index_list}},\n        'reindex':{'function':task_check, 'args':{'task_id':task_id}},\n        'shrink':{'function': health_check, 'args': {'status':'green'}},\n        'relocate':{'function': relocate_check, 'args': {'index':index}},\n    }\n    wait_actions = list(action_map.keys())\n\n    if action not in wait_actions:\n        raise ConfigurationError(f'\"action\" must be one of {wait_actions}')\n    if action == 'reindex' and task_id is None:\n        raise MissingArgument(f'A task_id must accompany \"action\" {action}')\n    if action == 'snapshot' and ((snapshot is None) or (repository is None)):\n        raise MissingArgument(\n            f'A snapshot and repository must accompany \"action\" {action}. snapshot: '\n            f'{snapshot}, repository: {repository}'\n        )\n    if action == 'restore' and index_list is None:\n        raise MissingArgument(f'An index_list must accompany \"action\" {action}')\n    if action == 'reindex':\n        try:\n            _ = client.tasks.get(task_id=task_id)\n        except Exception as err:\n            # This exception should only exist in API usage. It should never\n            # occur in regular Curator usage.\n            raise CuratorException(f'Unable to find task_id {task_id}. Exception: {err}') from err\n\n    # Now with this mapped, we can perform the wait as indicated.\n    start_time = datetime.now()\n    result = False\n    while True:\n        elapsed = int((datetime.now() - start_time).total_seconds())\n        logger.debug('Elapsed time: %s seconds', elapsed)\n        response = action_map[action]['function'](client, **action_map[action]['args'])\n        logger.debug('Response: %s', response)\n        # Success\n        if response:\n            logger.debug(\n                'Action \"%s\" finished executing (may or may not have been successful)', action)\n            result = True\n            break\n        # Not success, and reached maximum wait (if defined)\n        if (max_wait != -1) and (elapsed >= max_wait):\n            msg = f'Unable to complete action \"{action}\" within max_wait ({max_wait}) seconds.'\n            logger.error(msg)\n            break\n        # Not success, so we wait.\n        msg = (\n            f'Action \"{action}\" not yet complete, {elapsed} total seconds elapsed. '\n            f'Waiting {wait_interval} seconds before checking again.'\n        )\n        logger.debug(msg)\n        sleep(wait_interval)\n\n    logger.debug('Result: %s', result)\n    if not result:\n        raise ActionTimeout(\n            f'Action \"{action}\" failed to complete in the max_wait period of {max_wait} seconds'\n        )",
          "docstring": "This function becomes one place to do all ``wait_for_completion`` type behaviors\n\n:param client: A client connection object\n:param action: The action name that will identify how to wait\n:param task_id: If the action provided a task_id, this is where it must be declared.\n:param snapshot: The name of the snapshot.\n:param repository: The Elasticsearch snapshot repository to use\n:param wait_interval: Seconds to wait between completion checks.\n:param max_wait: Maximum number of seconds to ``wait_for_completion``\n\n:type client: :py:class:`~.elasticsearch.Elasticsearch`\n:type action: str\n:type task_id: str\n:type snapshot: str\n:type repository: str\n:type wait_interval: int\n:type max_wait: int\n:rtype: None",
          "signature": "def wait_for_it(client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None, wait_interval=9, max_wait=-1):",
          "type": "Function",
          "class_signature": null
        }
      },
      "curator/actions/reindex.py": {
        "Reindex._get_reindex_args": {
          "code": "    def _get_reindex_args(self, source, dest):\n        reindex_args = {'refresh': self.refresh, 'requests_per_second': self.requests_per_second, 'slices': self.slices, 'timeout': self.timeout, 'wait_for_active_shards': self.wait_for_active_shards, 'wait_for_completion': False}\n        for keyname in ['dest', 'source', 'conflicts', 'max_docs', 'size', '_source', 'script']:\n            if keyname in self.body:\n                reindex_args[keyname] = self.body[keyname]\n        reindex_args['dest']['index'] = dest\n        reindex_args['source']['index'] = source\n        return reindex_args",
          "docstring": "",
          "signature": "def _get_reindex_args(self, source, dest):",
          "type": "Method",
          "class_signature": "class Reindex:"
        },
        "Reindex._post_run_quick_check": {
          "code": "    def _post_run_quick_check(self, index_name, task_id):\n        processed_items = self.get_processed_items(task_id)\n        if processed_items == 0:\n            msg = f'No items were processed. Will not check if target index \"{index_name}\" exists'\n            self.loggit.info(msg)\n        else:\n            index_exists = self.client.indices.exists(index=index_name)\n            alias_instead = self.client.indices.exists_alias(name=index_name)\n            if not index_exists and (not alias_instead):\n                self.loggit.error(f'The index described as \"{index_name}\" was not found after the reindex operation. Check Elasticsearch logs for more information.')\n                if self.remote:\n                    self.loggit.error(f'Did you forget to add \"reindex.remote.whitelist: {self.remote_host}:{self.remote_port}\" to the elasticsearch.yml file on the \"dest\" node?')\n                raise FailedExecution(f'Reindex failed. The index or alias identified by \"{index_name}\" was not found.')",
          "docstring": "",
          "signature": "def _post_run_quick_check(self, index_name, task_id):",
          "type": "Method",
          "class_signature": "class Reindex:"
        },
        "Reindex.sources": {
          "code": "    def sources(self):\n        \"\"\"Generator for Reindexing ``sources`` & ``dests``\"\"\"\n        dest = self.body['dest']['index']\n        source_list = ensure_list(self.body['source']['index'])\n        self.loggit.debug('source_list: %s', source_list)\n        if not source_list or source_list == ['REINDEX_SELECTED']:\n            raise NoIndices\n        if not self.migration:\n            yield (self.body['source']['index'], dest)\n        else:\n            for source in source_list:\n                if self.migration:\n                    dest = self.mpfx + source + self.msfx\n                yield (source, dest)",
          "docstring": "Generator for Reindexing ``sources`` & ``dests``",
          "signature": "def sources(self):",
          "type": "Method",
          "class_signature": "class Reindex:"
        },
        "Reindex.show_run_args": {
          "code": "    def show_run_args(self, source, dest):\n        \"\"\"Show what will run\"\"\"\n        return f'request body: {self._get_request_body(source, dest)} with arguments: refresh={self.refresh} requests_per_second={self.requests_per_second} slices={self.slices} timeout={self.timeout} wait_for_active_shards={self.wait_for_active_shards} wait_for_completion={self.wfc}'",
          "docstring": "Show what will run",
          "signature": "def show_run_args(self, source, dest):",
          "type": "Method",
          "class_signature": "class Reindex:"
        }
      },
      "curator/helpers/utils.py": {
        "report_failure": {
          "code": "def report_failure(exception):\n    \"\"\"\n    Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\n    message.\n\n    :param exception: The upstream exception.\n\n    :type exception: :py:exc:Exception\n\n    :rtype: None\n    \"\"\"\n    raise FailedExecution(\n        f'Exception encountered.  Rerun with loglevel DEBUG and/or check Elasticsearch logs for'\n        f'more information. Exception: {exception}'\n    )",
          "docstring": "Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\nmessage.\n\n:param exception: The upstream exception.\n\n:type exception: :py:exc:Exception\n\n:rtype: None",
          "signature": "def report_failure(exception):",
          "type": "Function",
          "class_signature": null
        }
      }
    }
  },
  "call_tree": {
    "tests/unit/test_action_reindex.py:TestActionReindex:test_do_dry_run": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {
          "curator/indexlist.py:IndexList:IndexList": {}
        }
      },
      "curator/actions/reindex.py:Reindex:do_dry_run": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        }
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_init": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_init_bad_ilo": {
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_init_raise_bad_request_body": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_init_raise_empty_source_list": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_init_raise_local_migration_no_prefix_or_suffix": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_reindex_timedout": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        },
        "curator/actions/reindex.py:Reindex:_get_reindex_args": {},
        "curator/helpers/waiters.py:wait_for_it": {
          "curator/helpers/waiters.py:task_check": {}
        },
        "curator/helpers/utils.py:report_failure": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_reindex_with_wait": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        },
        "curator/actions/reindex.py:Reindex:_get_reindex_args": {},
        "curator/helpers/waiters.py:wait_for_it": {
          "curator/helpers/waiters.py:task_check": {}
        },
        "curator/actions/reindex.py:Reindex:_post_run_quick_check": {
          "curator/actions/reindex.py:Reindex:get_processed_items": {}
        }
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_reindex_with_wait_zero_total": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        },
        "curator/actions/reindex.py:Reindex:_get_reindex_args": {},
        "curator/helpers/waiters.py:wait_for_it": {
          "curator/helpers/waiters.py:task_check": {}
        },
        "curator/actions/reindex.py:Reindex:_post_run_quick_check": {
          "curator/actions/reindex.py:Reindex:get_processed_items": {}
        }
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_reindex_with_wait_zero_total_fail": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        },
        "curator/actions/reindex.py:Reindex:_get_reindex_args": {},
        "curator/helpers/waiters.py:wait_for_it": {},
        "curator/helpers/utils.py:report_failure": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_reindex_without_wait": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/reindex.py:Reindex:do_action": {
        "curator/actions/reindex.py:Reindex:sources": {},
        "curator/actions/reindex.py:Reindex:show_run_args": {
          "curator/actions/reindex.py:Reindex:_get_request_body": {}
        },
        "curator/actions/reindex.py:Reindex:_get_reindex_args": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_remote_with_bad_connection": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {},
        "curator/helpers/utils.py:report_failure": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_remote_with_bad_host": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_remote_with_bad_url": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_remote_with_no_host_key": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_reindex.py:TestActionReindex:test_replace_index_list": {
      "tests/unit/test_action_reindex.py:TestActionReindex:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/reindex.py:Reindex:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_reindex/elasticsearch_curator-test_action_reindex/tests/integration/test_cli.py:TestCLIMethods:test_action_is_none": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_reindex/elasticsearch_curator-test_action_reindex/tests/integration/test_cli.py:TestCLIMethods:test_no_action": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_reindex/elasticsearch_curator-test_action_reindex/tests/integration/test_integrations.py:TestFilters:test_filter_by_alias_bad_aliases": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    }
  },
  "PRD": "# PROJECT NAME: elasticsearch_curator-test_action_reindex\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 curator/\n    \u251c\u2500\u2500 actions/\n    \u2502   \u2514\u2500\u2500 reindex.py\n    \u2502       \u251c\u2500\u2500 Reindex.__init__\n    \u2502       \u251c\u2500\u2500 Reindex.do_action\n    \u2502       \u2514\u2500\u2500 Reindex.do_dry_run\n    \u251c\u2500\u2500 exceptions.py\n    \u2502   \u2514\u2500\u2500 ConfigurationError.ConfigurationError\n    \u2514\u2500\u2500 indexlist.py\n        \u2514\u2500\u2500 IndexList.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Reindex Action Testing Module is designed to validate the functionality and robustness of reindexing operations within an Elasticsearch environment. It ensures that the reindexing process, which involves duplicating or migrating data between indices, is configured correctly, handles various error conditions, and supports advanced functionalities such as dry-run execution, wait-for-completion handling, source-to-destination mappings, and remote cluster integration. By testing scenarios like malformed configuration, empty source indices, task failures, and invalid remote connections, the module helps ensure that reindexing workflows are reliable and error-resilient. This module streamlines the development and maintenance of reindexing functionality, providing developers with confidence that their operations comply with expected behaviors and edge cases.\n\n## FILE 1: curator/actions/reindex.py\n\n- CLASS METHOD: Reindex.do_dry_run\n  - CLASS SIGNATURE: class Reindex:\n  - SIGNATURE: def do_dry_run(self):\n  - DOCSTRING: \n```python\n\"\"\"\nLogs the details of the reindex operation that would be performed without executing any changes. This method outputs the source and destination indices, along with the reindexing parameters determined in the `Reindex` class. It serves as a dry run to inform the user about what would happen if the reindex operation were executed.\n\nThere are no input parameters or return values for this method. The method relies on the `sources()` method to retrieve the source and destination index pairs, and the `show_run_args()` method to construct a log message that details the request body and operational parameters. The `self.loggit` logger is used to log messages at the info level, indicating the operation mode.\n\nThis method is useful for validating the reindex setup before actually making any changes to the data in Elasticsearch.\n\"\"\"\n```\n\n- CLASS METHOD: Reindex.do_action\n  - CLASS SIGNATURE: class Reindex:\n  - SIGNATURE: def do_action(self):\n  - DOCSTRING: \n```python\n\"\"\"\nExecutes the reindex operation using the provided `request_body` and reindex arguments from `_get_reindex_args`. This method iterates over the source indices obtained from the `sources` generator and performs a reindex for each source-destination pair. It logs the commencement of the reindexing process and the arguments used, including the task ID returned by Elasticsearch. If `wait_for_completion` is set to True, it waits for the reindexing task to complete and verifies the existence of the destination index. If an error occurs during reindexing, it reports the failure.\n\nParameters:\n- `self`: The Reindex instance containing the configuration for the reindexing operation.\n\nReturns:\n- None. The method performs an action rather than returning a value.\n\nDependencies:\n- Uses the `self.client` to perform the reindex operation via the Elasticsearch client.\n- Utilizes `self.sources()` to obtain source and destination index pairs.\n- If `self.wfc` (wait for completion) is True, it relies on `wait_for_it` to monitor the reindexing task.\n- Calls `_post_run_quick_check` to confirm the destination index's existence after completion.\n\nConstants:\n- `self.loggit`: Logger for recording operational details and errors.\n- `response['task']`: The task ID returned from the reindex operation used for tracking the status of the operation.\n- `self.waiting_if_completed`, `self.wait_interval`, and `self.max_wait`: Toggles and parameters that dictate how the completion wait is managed.\n\"\"\"\n```\n\n- CLASS METHOD: Reindex.__init__\n  - CLASS SIGNATURE: class Reindex:\n  - SIGNATURE: def __init__(self, ilo, request_body, refresh=True, requests_per_second=-1, slices=1, timeout=60, wait_for_active_shards=1, wait_for_completion=True, max_wait=-1, wait_interval=9, remote_certificate=None, remote_client_cert=None, remote_client_key=None, remote_filters=None, migration_prefix='', migration_suffix=''):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes the Reindex action class with various parameters essential for performing a reindex operation in Elasticsearch.\n\nParameters:\n    ilo (IndexList): An instance of IndexList that provides the indices to be reindexed and the Elasticsearch client.\n    request_body (dict): The body containing request parameters for Elasticsearch's reindex API, which must be validated by the user.\n    refresh (bool): Indicates whether to refresh the target index after the operation (default is True).\n    requests_per_second (int): Throttling for the request in sub-requests per second; -1 signifies no throttling (default is -1).\n    slices (int): Number of slices to divide the task into (default is 1).\n    timeout (int): Time in seconds for bulk requests to wait for unavailable shards (default is 60).\n    wait_for_active_shards (int): Specifies how many shard copies must be active before proceeding (default is 1).\n    wait_for_completion (bool): Indicates whether to wait for the reindexing to complete (default is True).\n    max_wait (int): Maximum duration to wait for completion before timing out (default is -1).\n    wait_interval (int): Time in seconds to wait between checks when waiting for completion (default is 9).\n    remote_certificate (str): Path to SSL/TLS certificate for remote connections (default is None).\n    remote_client_cert (str): Path to SSL/TLS client certificate (default is None).\n    remote_client_key (str): Path to SSL/TLS private key (default is None).\n    remote_filters (dict): Filters to apply when accessing remote indices (default is empty dict).\n    migration_prefix (str): String to prepend to index names when migrating (default is empty).\n    migration_suffix (str): String to append to index names when migrating (default is empty).\n\nAttributes:\n    loggit (Logger): Logger instance for logging messages related to the reindexing process.\n    body (dict): The request body for the reindexing operation.\n    index_list (IndexList): The IndexList object containing the indices and ES client.\n    client (Elasticsearch): The Elasticsearch client object for executing requests.\n    refresh (bool): Value of refresh parameter.\n    requests_per_second (int): Value of requests_per_second parameter.\n    slices (int): Value of slices parameter.\n    timeout (str): Timeout formatted as a string with suffix 's'.\n    wait_for_active_shards (int): Value of wait_for_active_shards parameter.\n    wfc (bool): Value of wait_for_completion parameter.\n    wait_interval (int): Value of wait_interval parameter.\n    max_wait (int): Value of max_wait parameter.\n    mpfx (str): Migration prefix value.\n    msfx (str): Migration suffix value.\n    remote (bool): Indicates if the reindexing involves a remote source.\n    migration (bool): Indicates if the operation involves migrating indices.\n\nThe method also validates the request body, sets up remote connection parameters if applicable, and retrieves the source indices based on the provided IndexList.\n\"\"\"\n```\n\n## FILE 2: curator/exceptions.py\n\n## FILE 3: curator/indexlist.py\n\n- CLASS METHOD: IndexList.__init__\n  - CLASS SIGNATURE: class IndexList:\n  - SIGNATURE: def __init__(self, client, search_pattern='_all'):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an IndexList object that manages Elasticsearch index data.\n\nParameters:\n- client (Elasticsearch): An instance of the Elasticsearch client, validated by the `verify_client_object` function.\n- search_pattern (str): A pattern to specify which indices to include; defaults to '_all', which includes all indices in the cluster.\n\nAttributes:\n- loggit (Logger): A logger instance for logging actions and events specific to the IndexList class.\n- client (Elasticsearch): The provided Elasticsearch client object for interacting with the Elasticsearch service.\n- index_info (dict): A dictionary storing metadata about indices, such as their segment count, age, and other properties.\n- indices (list): A list of indices that are currently considered actionable in this instance.\n- all_indices (list): A complete list of indices in the cluster at the time of initialization.\n- age_keyfield (str or None): A placeholder for storing the age reference field used in filtering operations.\n\nThis constructor calls the private method `__get_indices` to populate the `all_indices` and `indices` attributes based on the provided search pattern.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "curator/actions/reindex.py": "\"\"\"Reindex action class\"\"\"\nimport logging\nfrom copy import deepcopy\nfrom dotmap import DotMap\nfrom es_client.builder import Builder\nfrom es_client.helpers.utils import ensure_list, verify_url_schema\nfrom es_client.exceptions import ConfigurationError\nfrom curator.exceptions import CuratorException, FailedExecution, NoIndices\nfrom curator.exceptions import ConfigurationError as CuratorConfigError\nfrom curator.helpers.testers import verify_index_list\nfrom curator.helpers.utils import report_failure\nfrom curator.helpers.waiters import wait_for_it\nfrom curator import IndexList\n\nclass Reindex:\n    \"\"\"Reindex Action Class\"\"\"\n\n    def _get_request_body(self, source, dest):\n        body = deepcopy(self.body)\n        body['source']['index'] = source\n        body['dest']['index'] = dest\n        return body\n\n    def _get_reindex_args(self, source, dest):\n        reindex_args = {'refresh': self.refresh, 'requests_per_second': self.requests_per_second, 'slices': self.slices, 'timeout': self.timeout, 'wait_for_active_shards': self.wait_for_active_shards, 'wait_for_completion': False}\n        for keyname in ['dest', 'source', 'conflicts', 'max_docs', 'size', '_source', 'script']:\n            if keyname in self.body:\n                reindex_args[keyname] = self.body[keyname]\n        reindex_args['dest']['index'] = dest\n        reindex_args['source']['index'] = source\n        return reindex_args\n\n    def get_processed_items(self, task_id):\n        \"\"\"\n        This function calls :py:func:`~.elasticsearch.client.TasksClient.get` with\n        the provided ``task_id``.  It will get the value from ``'response.total'``\n        as the total number of elements processed during reindexing. If the value is\n        not found, it will return ``-1``\n\n        :param task_id: A task_id which ostensibly matches a task searchable in the\n            tasks API.\n        \"\"\"\n        try:\n            task_data = self.client.tasks.get(task_id=task_id)\n        except Exception as exc:\n            raise CuratorException(f'Unable to obtain task information for task_id \"{task_id}\". Exception {exc}') from exc\n        total_processed_items = -1\n        task = task_data['task']\n        if task['action'] == 'indices:data/write/reindex':\n            self.loggit.debug(\"It's a REINDEX TASK'\")\n            self.loggit.debug('TASK_DATA: %s', task_data)\n            self.loggit.debug('TASK_DATA keys: %s', list(task_data.keys()))\n            if 'response' in task_data:\n                response = task_data['response']\n                total_processed_items = response['total']\n                self.loggit.debug('total_processed_items = %s', total_processed_items)\n        return total_processed_items\n\n    def _post_run_quick_check(self, index_name, task_id):\n        processed_items = self.get_processed_items(task_id)\n        if processed_items == 0:\n            msg = f'No items were processed. Will not check if target index \"{index_name}\" exists'\n            self.loggit.info(msg)\n        else:\n            index_exists = self.client.indices.exists(index=index_name)\n            alias_instead = self.client.indices.exists_alias(name=index_name)\n            if not index_exists and (not alias_instead):\n                self.loggit.error(f'The index described as \"{index_name}\" was not found after the reindex operation. Check Elasticsearch logs for more information.')\n                if self.remote:\n                    self.loggit.error(f'Did you forget to add \"reindex.remote.whitelist: {self.remote_host}:{self.remote_port}\" to the elasticsearch.yml file on the \"dest\" node?')\n                raise FailedExecution(f'Reindex failed. The index or alias identified by \"{index_name}\" was not found.')\n\n    def sources(self):\n        \"\"\"Generator for Reindexing ``sources`` & ``dests``\"\"\"\n        dest = self.body['dest']['index']\n        source_list = ensure_list(self.body['source']['index'])\n        self.loggit.debug('source_list: %s', source_list)\n        if not source_list or source_list == ['REINDEX_SELECTED']:\n            raise NoIndices\n        if not self.migration:\n            yield (self.body['source']['index'], dest)\n        else:\n            for source in source_list:\n                if self.migration:\n                    dest = self.mpfx + source + self.msfx\n                yield (source, dest)\n\n    def show_run_args(self, source, dest):\n        \"\"\"Show what will run\"\"\"\n        return f'request body: {self._get_request_body(source, dest)} with arguments: refresh={self.refresh} requests_per_second={self.requests_per_second} slices={self.slices} timeout={self.timeout} wait_for_active_shards={self.wait_for_active_shards} wait_for_completion={self.wfc}'",
    "curator/exceptions.py": "\"\"\"Curator Exceptions\"\"\"\n\nclass CuratorException(Exception):\n    \"\"\"\n    Base class for all exceptions raised by Curator which are not Elasticsearch\n    exceptions.\n    \"\"\"\n\nclass ConfigurationError(CuratorException):\n    \"\"\"\n    Exception raised when a misconfiguration is detected\n    \"\"\"\n\nclass MissingArgument(CuratorException):\n    \"\"\"\n    Exception raised when a needed argument is not passed.\n    \"\"\"\n\nclass NoIndices(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty index_list\n    \"\"\"\n\nclass NoSnapshots(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty snapshot_list\n    \"\"\"\n\nclass ActionError(CuratorException):\n    \"\"\"\n    Exception raised when an action (against an index_list or snapshot_list) cannot be taken.\n    \"\"\"\n\nclass FailedExecution(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to execute for some reason.\n    \"\"\"\n\nclass SnapshotInProgress(ActionError):\n    \"\"\"\n    Exception raised when a snapshot is already in progress\n    \"\"\"\n\nclass ActionTimeout(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to complete in the allotted time\n    \"\"\"\n\nclass FailedSnapshot(CuratorException):\n    \"\"\"\n    Exception raised when a snapshot does not complete with state SUCCESS\n    \"\"\"\n\nclass FailedRestore(CuratorException):\n    \"\"\"\n    Exception raised when a Snapshot Restore does not restore all selected indices\n    \"\"\"\n\nclass FailedReindex(CuratorException):\n    \"\"\"\n    Exception raised when failures are found in the reindex task response\n    \"\"\"\n\nclass ClientException(CuratorException):\n    \"\"\"\n    Exception raised when the Elasticsearch client and/or connection is the source of the problem.\n    \"\"\"\n\nclass LoggingException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot either log or configure logging\n    \"\"\"\n\nclass RepositoryException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot verify a snapshot repository\n    \"\"\"\n\nclass SearchableSnapshotException(CuratorException):\n    \"\"\"\n    Exception raised when Curator finds something out of order with a Searchable Snapshot\n    \"\"\"",
    "curator/indexlist.py": "\"\"\"Index List Class\"\"\"\nimport re\nimport itertools\nimport logging\nfrom elasticsearch8.exceptions import NotFoundError, TransportError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import ensure_list\nfrom curator.defaults import settings\nfrom curator.exceptions import ActionError, ConfigurationError, MissingArgument, NoIndices\nfrom curator.helpers.date_ops import absolute_date_range, date_range, fix_epoch, get_date_regex, get_point_of_reference, get_unit_count_from_name, TimestringSearch\nfrom curator.helpers.getters import byte_size, get_indices\nfrom curator.helpers.testers import verify_client_object\nfrom curator.helpers.utils import chunk_index_list, report_failure, to_csv\nfrom curator.validators.filter_functions import filterstructure\n\nclass IndexList:\n    \"\"\"IndexList class\"\"\"\n\n    def __actionable(self, idx):\n        self.loggit.debug('Index %s is actionable and remains in the list.', idx)\n\n    def __not_actionable(self, idx):\n        self.loggit.debug('Index %s is not actionable, removing from list.', idx)\n        self.indices.remove(idx)\n\n    def __excludify(self, condition, exclude, index, msg=None):\n        if condition is True:\n            if exclude:\n                text = 'Removed from actionable list'\n                self.__not_actionable(index)\n            else:\n                text = 'Remains in actionable list'\n                self.__actionable(index)\n        elif exclude:\n            text = 'Remains in actionable list'\n            self.__actionable(index)\n        else:\n            text = 'Removed from actionable list'\n            self.__not_actionable(index)\n        if msg:\n            self.loggit.debug('%s: %s', text, msg)\n\n    def __get_indices(self, pattern):\n        \"\"\"\n        Pull all indices into ``all_indices``, then populate ``indices`` and\n        ``index_info``\n        \"\"\"\n        self.loggit.debug('Getting indices matching search_pattern: \"%s\"', pattern)\n        self.all_indices = get_indices(self.client, search_pattern=pattern)\n        self.indices = self.all_indices[:]\n\n    def __build_index_info(self, index):\n        \"\"\"\n        Ensure that ``index`` is a key in ``index_info``. If not, create a\n        sub-dictionary structure under that key.\n        \"\"\"\n        self.loggit.debug('Building preliminary index metadata for %s', index)\n        if index not in self.index_info:\n            self.index_info[index] = self.__zero_values()\n\n    def __map_method(self, ftype):\n        methods = {'alias': self.filter_by_alias, 'age': self.filter_by_age, 'allocated': self.filter_allocated, 'closed': self.filter_closed, 'count': self.filter_by_count, 'empty': self.filter_empty, 'forcemerged': self.filter_forceMerged, 'ilm': self.filter_ilm, 'kibana': self.filter_kibana, 'none': self.filter_none, 'opened': self.filter_opened, 'period': self.filter_period, 'pattern': self.filter_by_regex, 'space': self.filter_by_space, 'shards': self.filter_by_shards, 'size': self.filter_by_size}\n        return methods[ftype]\n\n    def __remove_missing(self, err):\n        \"\"\"\n        Remove missing index found in ``err`` from self.indices and return that name\n        \"\"\"\n        missing = err.info['error']['index']\n        self.loggit.warning('Index was initiallly present, but now is not: %s', missing)\n        self.loggit.debug('Removing %s from active IndexList', missing)\n        self.indices.remove(missing)\n        return missing\n\n    def __zero_values(self):\n        \"\"\"The default values for index metadata\"\"\"\n        return {'age': {'creation_date': 0, 'name': 0}, 'docs': 0, 'number_of_replicas': 0, 'number_of_shards': 0, 'primary_size_in_bytes': 0, 'routing': {}, 'segments': 0, 'size_in_bytes': 0, 'state': ''}\n\n    def _get_indices_segments(self, data):\n        return self.client.indices.segments(index=to_csv(data))['indices'].copy()\n\n    def _get_indices_settings(self, data):\n        return self.client.indices.get_settings(index=to_csv(data))\n\n    def _get_indices_stats(self, data):\n        return self.client.indices.stats(index=to_csv(data), metric='store,docs')['indices']\n\n    def _bulk_queries(self, data, exec_func):\n        slice_number = 10\n        query_result = {}\n        loop_number = round(len(data) / slice_number) if round(len(data) / slice_number) > 0 else 1\n        self.loggit.debug('Bulk Queries - number requests created: %s', loop_number)\n        for num in range(0, loop_number):\n            if num == loop_number - 1:\n                data_sliced = data[num * slice_number:]\n            else:\n                data_sliced = data[num * slice_number:(num + 1) * slice_number]\n            query_result.update(exec_func(data_sliced))\n        return query_result\n\n    def mitigate_alias(self, index):\n        \"\"\"\n        Mitigate when an alias is detected instead of an index name\n\n        :param index: The index name that is showing up *instead* of what was expected\n\n        :type index: str\n\n        :returns: No return value:\n        :rtype: None\n        \"\"\"\n        self.loggit.debug('BEGIN mitigate_alias')\n        self.loggit.debug('Correcting an instance where an alias name points to index \"%s\"', index)\n        data = self.client.indices.get(index=index)\n        aliases = list(data[index]['aliases'])\n        if aliases:\n            for alias in aliases:\n                if alias in self.indices:\n                    self.loggit.warning('Removing alias \"%s\" from IndexList.indices', alias)\n                    self.indices.remove(alias)\n                if alias in list(self.index_info):\n                    self.loggit.warning('Removing alias \"%s\" from IndexList.index_info', alias)\n                    del self.index_info[alias]\n        self.loggit.debug('Adding \"%s\" to IndexList.indices', index)\n        self.indices.append(index)\n        self.loggit.debug('Adding preliminary metadata for \"%s\" to IndexList.index_info', index)\n        self.__build_index_info(index)\n        self.loggit.debug('END mitigate_alias')\n\n    def alias_index_check(self, data):\n        \"\"\"\n        Check each index in data to see if it's an alias.\n        \"\"\"\n        working_list = data[:]\n        for entry in working_list:\n            if self.client.indices.exists_alias(name=entry):\n                index = list(self.client.indices.get_alias(name=entry).keys())[0]\n                self.loggit.warning('\"%s\" is actually an alias for index \"%s\"', entry, index)\n                self.mitigate_alias(index)\n                data.remove(entry)\n                data.append(index)\n        return data\n\n    def indices_exist(self, data, exec_func):\n        \"\"\"Check if indices exist. If one doesn't, remove it. Loop until all exist\"\"\"\n        self.loggit.debug('BEGIN indices_exist')\n        checking = True\n        working_list = {}\n        verified_data = self.alias_index_check(data)\n        while checking:\n            try:\n                working_list.update(exec_func(verified_data))\n            except NotFoundError as err:\n                data.remove(self.__remove_missing(err))\n                continue\n            except TransportError as err:\n                if '413' in err.errors:\n                    msg = 'Huge Payload 413 Err - Trying to get information via multiple requests'\n                    self.loggit.debug(msg)\n                    working_list.update(self._bulk_queries(verified_data, exec_func))\n            checking = False\n        return working_list\n\n    def data_getter(self, data, exec_func):\n        \"\"\"\n        Function that prevents unnecessary code repetition for different data\n        getter methods\n        \"\"\"\n        self.loggit.debug('BEGIN data_getter')\n        checking = True\n        while checking:\n            working_list = self.indices_exist(data, exec_func)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        sii = self.index_info[index]\n                    except KeyError:\n                        self.loggit.warning('Index %s was not present at IndexList initialization,  and may be behind an alias', index)\n                        self.mitigate_alias(index)\n                        sii = self.index_info[index]\n                        working_list = {}\n                        try:\n                            working_list.update(self._bulk_queries(data, exec_func))\n                        except NotFoundError as err:\n                            data.remove(self.__remove_missing(err))\n                            continue\n                    yield (sii, working_list[index], index)\n            checking = False\n\n    def population_check(self, index, key):\n        \"\"\"Verify that key is in self.index_info[index], and that it is populated\"\"\"\n        retval = True\n        if index not in self.index_info:\n            self.__build_index_info(index)\n        if key not in self.index_info[index]:\n            self.index_info[index][key] = self.__zero_values()[key]\n        if self.index_info[index][key] == self.__zero_values()[key]:\n            retval = False\n        return retval\n\n    def needs_data(self, indices, fields):\n        \"\"\"Check for data population in self.index_info\"\"\"\n        self.loggit.debug('Indices: %s, Fields: %s', indices, fields)\n        needful = []\n        working_list = self.indices_exist(indices, self._get_indices_settings)\n        for idx in working_list:\n            count = 0\n            for field in fields:\n                if self.population_check(idx, field):\n                    count += 1\n            if count == 0:\n                needful.append(idx)\n        if fields == ['state']:\n            self.loggit.debug('Always check open/close for all passed indices')\n            needful = list(working_list.keys())\n        self.loggit.debug('These indices need data in index_info: %s', needful)\n        return needful\n\n    def get_index_settings(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n            creation_date\n            number_of_replicas\n            number_of_shards\n            routing information (if present)\n        \"\"\"\n        self.loggit.debug('Getting index settings -- BEGIN')\n        self.empty_list_check()\n        fields = ['age', 'number_of_replicas', 'number_of_shards', 'routing']\n        for lst in chunk_index_list(self.indices):\n            needful = self.needs_data(lst, fields)\n            if not needful:\n                continue\n            for sii, wli, _ in self.data_getter(needful, self._get_indices_settings):\n                sii['age']['creation_date'] = fix_epoch(wli['settings']['index']['creation_date'])\n                sii['number_of_replicas'] = wli['settings']['index']['number_of_replicas']\n                sii['number_of_shards'] = wli['settings']['index']['number_of_shards']\n                if 'routing' in wli['settings']['index']:\n                    sii['routing'] = wli['settings']['index']['routing']\n        self.loggit.debug('Getting index settings -- END')\n\n    def get_index_state(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n\n            state (open or closed)\n\n        from the cat API\n        \"\"\"\n        self.loggit.debug('Getting index state -- BEGIN')\n        self.empty_list_check()\n        fields = ['state']\n        for lst in chunk_index_list(self.indices):\n            needful = self.needs_data(lst, fields)\n            resp = self.client.cat.indices(index=to_csv(needful), format='json', h='index,status')\n            for entry in resp:\n                try:\n                    self.index_info[entry['index']]['state'] = entry['status']\n                except KeyError:\n                    self.loggit.warning('Index %s was not present at IndexList initialization, and may be behind an alias', entry['index'])\n                    self.mitigate_alias(entry['index'])\n                    self.index_info[entry['index']]['state'] = entry['status']\n\n    def get_index_stats(self):\n        \"\"\"\n        Populate ``index_info`` with index ``size_in_bytes``,\n        ``primary_size_in_bytes`` and doc count information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index stats -- BEGIN')\n        self.empty_list_check()\n        fields = ['size_in_bytes', 'docs', 'primary_size_in_bytes']\n        self.get_index_state()\n        working_list = self.working_list()\n        for index in self.working_list():\n            if self.index_info[index]['state'] == 'close':\n                working_list.remove(index)\n        if working_list:\n            index_lists = chunk_index_list(working_list)\n            for lst in index_lists:\n                needful = self.needs_data(lst, fields)\n                if not needful:\n                    continue\n                for sii, wli, index in self.data_getter(needful, self._get_indices_stats):\n                    try:\n                        size = wli['total']['store']['size_in_bytes']\n                        docs = wli['total']['docs']['count']\n                        primary_size = wli['primaries']['store']['size_in_bytes']\n                        msg = f'Index: {index}  Size: {byte_size(size)}  Docs: {docs} PrimarySize: {byte_size(primary_size)}'\n                        self.loggit.debug(msg)\n                        sii['size_in_bytes'] = size\n                        sii['docs'] = docs\n                        sii['primary_size_in_bytes'] = primary_size\n                    except KeyError:\n                        msg = f'Index stats missing for \"{index}\" -- might be closed'\n                        self.loggit.warning(msg)\n\n    def get_segment_counts(self):\n        \"\"\"\n        Populate ``index_info`` with segment information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index segment counts')\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            for sii, wli, _ in self.data_getter(lst, self._get_indices_segments):\n                shards = wli['shards']\n                segmentcount = 0\n                for shardnum in shards:\n                    for shard in range(0, len(shards[shardnum])):\n                        segmentcount += shards[shardnum][shard]['num_search_segments']\n                sii['segments'] = segmentcount\n\n    def empty_list_check(self):\n        \"\"\"Raise :py:exc:`~.curator.exceptions.NoIndices` if ``indices`` is empty\"\"\"\n        self.loggit.debug('Checking for empty list')\n        if not self.indices:\n            raise NoIndices('index_list object is empty.')\n\n    def working_list(self):\n        \"\"\"\n        Return the current value of ``indices`` as copy-by-value to prevent list\n        stomping during iterations\n        \"\"\"\n        self.loggit.debug('Generating working list of indices')\n        return self.indices[:]\n\n    def _get_name_based_ages(self, timestring):\n        \"\"\"\n        Add indices to ``index_info`` based on the age as indicated by the index\n        name pattern, if it matches ``timestring``\n\n        :param timestring: An :py:func:`time.strftime` pattern\n        \"\"\"\n        self.loggit.debug('Getting ages of indices by \"name\"')\n        self.empty_list_check()\n        tstr = TimestringSearch(timestring)\n        for index in self.working_list():\n            epoch = tstr.get_epoch(index)\n            if isinstance(epoch, int):\n                self.index_info[index]['age']['name'] = epoch\n            else:\n                msg = f'Timestring {timestring} was not found in index {index}. Removing from actionable list'\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def _get_field_stats_dates(self, field='@timestamp'):\n        \"\"\"\n        Add indices to ``index_info`` based on the values the queries return, as\n        determined by the min and max aggregated values of ``field``\n\n        :param field: The field with the date value.  The field must be mapped in\n            elasticsearch as a date datatype. Default: ``@timestamp``\n        \"\"\"\n        self.loggit.debug('Cannot query closed indices. Omitting any closed indices.')\n        self.filter_closed()\n        self.loggit.debug('Cannot use field_stats with empty indices. Omitting any empty indices.')\n        self.filter_empty()\n        self.loggit.debug('Getting index date by querying indices for min & max value of %s field', field)\n        self.empty_list_check()\n        index_lists = chunk_index_list(self.indices)\n        for lst in index_lists:\n            for index in lst:\n                aggs = {'min': {'min': {'field': field}}, 'max': {'max': {'field': field}}}\n                response = self.client.search(index=index, size=0, aggs=aggs)\n                self.loggit.debug('RESPONSE: %s', response)\n                if response:\n                    try:\n                        res = response['aggregations']\n                        self.loggit.debug('res: %s', res)\n                        data = self.index_info[index]['age']\n                        data['min_value'] = fix_epoch(res['min']['value'])\n                        data['max_value'] = fix_epoch(res['max']['value'])\n                        self.loggit.debug('data: %s', data)\n                    except KeyError as exc:\n                        raise ActionError(f'Field \"{field}\" not found in index \"{index}\"') from exc\n\n    def _calculate_ages(self, source=None, timestring=None, field=None, stats_result=None):\n        \"\"\"\n        This method initiates index age calculation based on the given parameters.\n        Exceptions are raised when they are improperly configured.\n\n        Set instance variable ``age_keyfield`` for use later, if needed.\n\n        :param source: Source of index age. Can be: ``name``, ``creation_date``,\n            or ``field_stats``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the min or max result value.\n        \"\"\"\n        self.age_keyfield = source\n        if source == 'name':\n            if not timestring:\n                raise MissingArgument('source \"name\" requires the \"timestring\" keyword argument')\n            self._get_name_based_ages(timestring)\n        elif source == 'creation_date':\n            pass\n        elif source == 'field_stats':\n            if not field:\n                raise MissingArgument('source \"field_stats\" requires the \"field\" keyword argument')\n            if stats_result not in ['min_value', 'max_value']:\n                raise ValueError(f'Invalid value for \"stats_result\": {stats_result}')\n            self.age_keyfield = stats_result\n            self._get_field_stats_dates(field=field)\n        else:\n            raise ValueError(f'Invalid source: {source}. Must be one of \"name\", \"creation_date\", \"field_stats\".')\n\n    def _sort_by_age(self, index_list, reverse=True):\n        \"\"\"\n        Take a list of indices and sort them by date.\n\n        By default, the youngest are first with ``reverse=True``, but the oldest\n        can be first by setting ``reverse=False``\n        \"\"\"\n        temp = {}\n        for index in index_list:\n            try:\n                if self.index_info[index]['age'][self.age_keyfield]:\n                    temp[index] = self.index_info[index]['age'][self.age_keyfield]\n                else:\n                    msg = f'No date for \"{index}\" in IndexList metadata. Possible timestring mismatch. Excluding index \"{index}\".'\n                    self.__excludify(True, True, index, msg)\n            except KeyError:\n                msg = f'{index} does not have key \"{self.age_keyfield}\" in IndexList metadata'\n                self.__excludify(True, True, index, msg)\n        temp_tuple = sorted(temp.items(), key=lambda k: k[0], reverse=reverse)\n        sorted_tuple = sorted(temp_tuple, key=lambda k: k[1], reverse=reverse)\n        return [x[0] for x in sorted_tuple]\n\n    def filter_by_regex(self, kind=None, value=None, exclude=False):\n        \"\"\"\n        Match indices by regular expression (pattern).\n\n        :param kind: Can be one of: ``suffix``, ``prefix``, ``regex``, or\n            ``timestring``. This option defines what ``kind`` of filter you will\n            be building.\n        :param value: Depends on ``kind``. It is the :py:func:`time.strftime` string if\n            ``kind`` is ``timestring``. It's used to build the regular expression\n            for other kinds.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by regex')\n        if kind not in ['regex', 'prefix', 'suffix', 'timestring']:\n            raise ValueError(f'{kind}: Invalid value for kind')\n        if value == 0:\n            pass\n        elif not value:\n            raise ValueError('Invalid None value for \"value\". Cannot be \"None\" type, empty, or False')\n        if kind == 'timestring':\n            regex = settings.regex_map()[kind].format(get_date_regex(value))\n        else:\n            regex = settings.regex_map()[kind].format(value)\n        self.empty_list_check()\n        pattern = re.compile(regex)\n        for index in self.working_list():\n            self.loggit.debug('Filter by regex: Index: %s', index)\n            match = pattern.search(index)\n            if match:\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_by_age(self, source='name', direction=None, timestring=None, unit=None, unit_count=None, field=None, stats_result='min_value', epoch=None, exclude=False, unit_count_pattern=False):\n        \"\"\"\n        Match indices by relative age calculations.\n\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``\n        :param direction: Time to filter, either ``older`` or ``younger``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``seconds``, ``minutes``, ``hours``, ``days``, ``weeks``,\n            ``months``, or ``years``.\n        :param unit_count: The count of ``unit``. ``unit_count`` * ``unit`` will\n            be calculated out to the relative number of seconds.\n        :param unit_count_pattern: A regular expression whose capture group identifies\n            the value for ``unit_count``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the minimum or maximum result value.\n        :param epoch: An epoch timestamp used in conjunction with ``unit`` and\n            ``unit_count`` to establish a point of reference for calculations.\n            If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude`` is `False`, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by age')\n        por = get_point_of_reference(unit, unit_count, epoch)\n        if not direction:\n            raise MissingArgument('Must provide a value for \"direction\"')\n        if direction not in ['older', 'younger']:\n            raise ValueError(f'Invalid value for \"direction\": {direction}')\n        self.get_index_settings()\n        self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n        if unit_count_pattern:\n            try:\n                unit_count_matcher = re.compile(unit_count_pattern)\n            except Exception as exc:\n                self.loggit.error('Regular expression failure. Will not match unit count. Error: %s', exc)\n                unit_count_matcher = None\n        for index in self.working_list():\n            try:\n                remove_this_index = False\n                age = int(self.index_info[index]['age'][self.age_keyfield])\n                msg = f'Index \"{index}\" age ({age}), direction: \"{direction}\", point of reference, ({por})'\n                if unit_count_pattern:\n                    msg = f'unit_count_pattern is set, trying to match pattern to index \"{index}\"'\n                    self.loggit.debug(msg)\n                    unit_count_from_index = get_unit_count_from_name(index, unit_count_matcher)\n                    if unit_count_from_index:\n                        self.loggit.debug('Pattern matched, applying unit_count of  \"%s\"', unit_count_from_index)\n                        adjustedpor = get_point_of_reference(unit, unit_count_from_index, epoch)\n                        msg = f'Adjusting point of reference from {por} to {adjustedpor} based on unit_count of {unit_count_from_index} from index name'\n                        self.loggit.debug(msg)\n                    elif unit_count == -1:\n                        msg = f'Unable to match pattern and no fallback value set. Removing index \"{index}\" from actionable list'\n                        self.loggit.debug(msg)\n                        remove_this_index = True\n                        adjustedpor = por\n                    else:\n                        self.loggit.debug('Unable to match pattern using fallback value of \"%s\"', unit_count)\n                        adjustedpor = por\n                else:\n                    adjustedpor = por\n                if direction == 'older':\n                    agetest = age < adjustedpor\n                else:\n                    agetest = age > adjustedpor\n                self.__excludify(agetest and (not remove_this_index), exclude, index, msg)\n            except KeyError:\n                msg = f'Index \"{index}\" does not meet provided criteria. Removing from list.'\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def filter_by_space(self, disk_space=None, reverse=True, use_age=False, source='creation_date', timestring=None, field=None, stats_result='min_value', exclude=False, threshold_behavior='greater_than'):\n        \"\"\"\n        Remove indices from the actionable list based on space consumed, sorted\n        reverse-alphabetically by default.  If you set ``reverse`` to ``False``,\n        it will be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` --then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse`` to ``False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the\n        index creation date by default, but you can specify an ``source`` of\n        ``name``, ``max_value``, or ``min_value``. The ``name`` ``source`` requires\n        the timestring argument.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``disk_space``. When set to\n        ``less_than``, it includes if the index is smaller than ``disk_space``\n\n        :param disk_space: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param reverse: The filtering direction. (default: ``True``).  Ignored if\n            ``use_age`` is ``True``\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name`` is selected.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``\n            is selected.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats`` is selected. It determines whether to reference\n            the minimum or maximum value of `field` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by disk space')\n        if not disk_space:\n            raise MissingArgument('No value for \"disk_space\" provided')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(f'Invalid value for \"threshold_behavior\": {threshold_behavior}')\n        self.get_index_stats()\n        self.get_index_settings()\n        disk_space = float(disk_space)\n        disk_usage = 0.0\n        disk_limit = disk_space * 2 ** 30\n        msg = 'Cannot get disk usage info from closed indices. Omitting any closed indices.'\n        self.loggit.debug(msg)\n        self.filter_closed()\n        if use_age:\n            self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n            self.loggit.debug('SORTING BY AGE')\n            sorted_indices = self._sort_by_age(self.working_list())\n        else:\n            sorted_indices = sorted(self.working_list(), reverse=reverse)\n        for index in sorted_indices:\n            disk_usage += self.index_info[index]['size_in_bytes']\n            msg = f'{index}, summed disk usage is {byte_size(disk_usage)} and disk limit is {byte_size(disk_limit)}.'\n            if threshold_behavior == 'greater_than':\n                self.__excludify(disk_usage > disk_limit, exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify(disk_usage < disk_limit, exclude, index, msg)\n\n    def filter_kibana(self, exclude=True):\n        \"\"\"\n        Match any index named ``.kibana*`` in ``indices``. Older releases addressed\n        index names that no longer exist.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering kibana indices')\n        self.empty_list_check()\n        for index in self.working_list():\n            pattern = re.compile('^\\\\.kibana.*$')\n            if pattern.match(index):\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_forceMerged(self, max_num_segments=None, exclude=True):\n        \"\"\"\n        Match any index which has ``max_num_segments`` per shard or fewer in the\n        actionable list.\n\n        :param max_num_segments: Cutoff number of segments per shard.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering forceMerged indices')\n        if not max_num_segments:\n            raise MissingArgument('Missing value for \"max_num_segments\"')\n        self.loggit.debug('Cannot get segment count of closed indices. Omitting any closed indices.')\n        self.get_index_state()\n        self.get_index_settings()\n        self.filter_closed()\n        self.get_segment_counts()\n        for index in self.working_list():\n            shards = int(self.index_info[index]['number_of_shards'])\n            replicas = int(self.index_info[index]['number_of_replicas'])\n            segments = int(self.index_info[index]['segments'])\n            msg = f'{index} has {shards} shard(s) + {replicas} replica(s) with a sum total of {segments} segments.'\n            expected_count = (shards + shards * replicas) * max_num_segments\n            self.__excludify(segments <= expected_count, exclude, index, msg)\n\n    def filter_closed(self, exclude=True):\n        \"\"\"\n        Filter out closed indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering closed indices')\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'close'\n            self.loggit.debug('Index %s state: %s', index, self.index_info[index]['state'])\n            self.__excludify(condition, exclude, index)\n\n    def filter_empty(self, exclude=True):\n        \"\"\"\n        Filter indices with a document count of zero. Indices that are closed\n        are automatically excluded from consideration due to closed indices reporting\n        a document count of zero.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering empty indices')\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['docs'] == 0\n            self.loggit.debug('Index %s doc count: %s', index, self.index_info[index]['docs'])\n            self.__excludify(condition, exclude, index)\n\n    def filter_opened(self, exclude=True):\n        \"\"\"\n        Filter out opened indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering open indices')\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'open'\n            self.loggit.debug('Index %s state: %s', index, self.index_info[index]['state'])\n            self.__excludify(condition, exclude, index)\n\n    def filter_allocated(self, key=None, value=None, allocation_type='require', exclude=True):\n        \"\"\"\n        Match indices that have the routing allocation rule of ``key=value`` from\n        ``indices``\n\n        :param key: The allocation attribute to check for\n        :param value: The value to check for\n        :param allocation_type: Type of allocation to apply\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is `T`rue`\n        \"\"\"\n        self.loggit.debug('Filtering indices with shard routing allocation rules')\n        if not key:\n            raise MissingArgument('No value for \"key\" provided')\n        if not value:\n            raise MissingArgument('No value for \"value\" provided')\n        if allocation_type not in ['include', 'exclude', 'require']:\n            raise ValueError(f'Invalid \"allocation_type\": {allocation_type}')\n        self.get_index_settings()\n        self.get_index_state()\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        has_routing = working_list[index]['settings']['index']['routing']['allocation'][allocation_type][key] == value\n                    except KeyError:\n                        has_routing = False\n                    msg = f'{index}: Routing (mis)match: index.routing.allocation.{allocation_type}.{key}={value}.'\n                    self.__excludify(has_routing, exclude, index, msg)\n\n    def filter_none(self):\n        \"\"\"The legendary NULL filter\"\"\"\n        self.loggit.debug('\"None\" filter selected.  No filtering will be done.')\n\n    def filter_by_alias(self, aliases=None, exclude=False):\n        \"\"\"\n        Match indices which are associated with the alias or list of aliases\n        identified by ``aliases``. Indices must appear in all aliases in list\n        ``aliases`` or a 404 error will result, leading to no indices being matched.\n\n        :param aliases: A list of alias names.\n        :type aliases: list\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices matching aliases: \"%s\"', aliases)\n        if not aliases:\n            raise MissingArgument('No value for \"aliases\" provided')\n        aliases = ensure_list(aliases)\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            try:\n                has_alias = list(self.client.indices.get_alias(index=to_csv(lst), name=to_csv(aliases)).keys())\n                self.loggit.debug('has_alias: %s', has_alias)\n            except NotFoundError:\n                has_alias = []\n            for index in lst:\n                if index in has_alias:\n                    isness = 'is'\n                    condition = True\n                else:\n                    isness = 'is not'\n                    condition = False\n                msg = f'{index} {isness} associated with aliases: {aliases}'\n                self.__excludify(condition, exclude, index, msg)\n\n    def filter_by_count(self, count=None, reverse=True, use_age=False, pattern=None, source='creation_date', timestring=None, field=None, stats_result='min_value', exclude=True):\n        \"\"\"\n        Remove indices from the actionable list beyond the number ``count``, sorted\n        reverse-alphabetically by default.  If you set ``reverse=False``, it will\n        be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` -- then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse=False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the index\n        creation date by default, but you can specify an ``source`` of ``name``,\n        ``max_value``, or ``min_value``. The ``name`` `source` requires the\n        timestring argument.\n\n        :param count: Filter indices beyond ``count``.\n        :param reverse: The filtering direction. (default: ``True``).\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param pattern: Select indices to count from a regular expression pattern.\n            This pattern must have one and only one capture group. This can allow\n            a single ``count`` filter instance to operate against any number of\n            matching patterns, and keep ``count`` of each index in that group.\n            For example, given a ``pattern`` of ``'^(.*)-\\\\d{6}$'``, it will match\n            both ``rollover-000001`` and ``index-999990``, but not\n            ``logstash-2017.10.12``. Following the same example, if my cluster\n            also had ``rollover-000002`` through ``rollover-000010`` and\n            ``index-888888`` through ``index-999999``, it will process both groups\n            of indices, and include or exclude the ``count`` of each.\n        :param source: Source of index age. Can be one of ``name``,\n            ``creation_date``, or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name``.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats``. It determines whether to reference the minimum\n            or maximum value of ``field`` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices by count')\n        if not count:\n            raise MissingArgument('No value for \"count\" provided')\n        self.get_index_state()\n        self.get_index_settings()\n        working_list = self.working_list()\n        if pattern:\n            try:\n                regex = re.compile(pattern)\n                if regex.groups < 1:\n                    raise ConfigurationError(f'No regular expression group found in {pattern}')\n                if regex.groups > 1:\n                    raise ConfigurationError(f'More than 1 regular expression group found in {pattern}')\n                prune_these = list(filter(lambda x: regex.match(x) is None, working_list))\n                filtered_indices = working_list\n                for index in prune_these:\n                    msg = '{index} does not match regular expression {pattern}.'\n                    condition = True\n                    exclude = True\n                    self.__excludify(condition, exclude, index, msg)\n                    filtered_indices.remove(index)\n                presorted = sorted(filtered_indices, key=lambda x: regex.match(x).group(1))\n            except Exception as exc:\n                raise ActionError(f'Unable to process pattern: \"{pattern}\". Error: {exc}') from exc\n            groups = []\n            for _, g in itertools.groupby(presorted, key=lambda x: regex.match(x).group(1)):\n                groups.append(list(g))\n        else:\n            groups = [working_list]\n        for group in groups:\n            if use_age:\n                if source != 'name':\n                    self.loggit.warning('Cannot get age information from closed indices unless source=\"name\".  Omitting any closed indices.')\n                    self.filter_closed()\n                self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n                sorted_indices = self._sort_by_age(group, reverse=reverse)\n            else:\n                sorted_indices = sorted(group, reverse=reverse)\n            idx = 1\n            for index in sorted_indices:\n                msg = f'{index} is {idx} of specified count of {count}.'\n                condition = True if idx <= count else False\n                self.__excludify(condition, exclude, index, msg)\n                idx += 1\n\n    def filter_by_shards(self, number_of_shards=None, shard_filter_behavior='greater_than', exclude=False):\n        \"\"\"\n        Match ``indices`` with a given shard count.\n\n        Selects all indices with a shard count ``greater_than`` ``number_of_shards``\n        by default. Use ``shard_filter_behavior`` to select indices with shard\n        count ``greater_than``, ``greater_than_or_equal``, ``less_than``,\n        ``less_than_or_equal``, or ``equal`` to ``number_of_shards``.\n\n        :param number_of_shards: shard threshold\n        :param shard_filter_behavior: Do you want to filter on ``greater_than``,\n            ``greater_than_or_equal``, ``less_than``, ``less_than_or_equal``,\n            or ``equal``?\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by number of shards')\n        if not number_of_shards:\n            raise MissingArgument('No value for \"number_of_shards\" provided')\n        if shard_filter_behavior not in ['greater_than', 'less_than', 'greater_than_or_equal', 'less_than_or_equal', 'equal']:\n            raise ValueError(f'Invalid value for \"shard_filter_behavior\": {shard_filter_behavior}')\n        if number_of_shards < 1 or (shard_filter_behavior == 'less_than' and number_of_shards == 1):\n            raise ValueError(f'Unacceptable value: {number_of_shards} -- \"number_of_shards\" cannot be less than 1. A valid index will have at least one shard.')\n        self.get_index_settings()\n        self.empty_list_check()\n        for index in self.working_list():\n            self.loggit.debug('Filter by number of shards: Index: %s', index)\n            if shard_filter_behavior == 'greater_than':\n                condition = int(self.index_info[index]['number_of_shards']) > number_of_shards\n            elif shard_filter_behavior == 'less_than':\n                condition = int(self.index_info[index]['number_of_shards']) < number_of_shards\n            elif shard_filter_behavior == 'greater_than_or_equal':\n                condition = int(self.index_info[index]['number_of_shards']) >= number_of_shards\n            elif shard_filter_behavior == 'less_than_or_equal':\n                condition = int(self.index_info[index]['number_of_shards']) <= number_of_shards\n            else:\n                condition = int(self.index_info[index]['number_of_shards']) == number_of_shards\n            self.__excludify(condition, exclude, index)\n\n    def filter_period(self, period_type='relative', source='name', range_from=None, range_to=None, date_from=None, date_to=None, date_from_format=None, date_to_format=None, timestring=None, unit=None, field=None, stats_result='min_value', intersect=False, week_starts_on='sunday', epoch=None, exclude=False):\n        \"\"\"\n        Match ``indices`` with ages within a given period.\n\n        :param period_type: Can be either ``absolute`` or ``relative``.  Default\n            is ``relative``. ``date_from`` and ``date_to`` are required when using\n            ``period_type='absolute'``. ``range_from`` and ``range_to`` are required\n            with ``period_type='relative'``.\n        :param source: Source of index age. Can be ``name``, ``creation_date``,\n            or ``field_stats``\n        :param range_from: How many ``unit`` (s) in the past/future is the origin?\n        :param range_to: How many ``unit`` (s) in the past/future is the end point?\n        :param date_from: The simplified date for the start of the range\n        :param date_to: The simplified date for the end of the range.  If this\n            value is the same as ``date_from``, the full value of ``unit`` will be\n            extrapolated for the range.  For example, if ``unit=months``, and\n            ``date_from`` and ``date_to`` are both ``2017.01``, then the entire\n            month of January 2017 will be the absolute date range.\n        :param date_from_format: The :py:func:`time.strftime` string used to\n            parse ``date_from``\n        :param date_to_format: The :py:func:`time.strftime` string used to\n            parse ``date_to``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``hours``, ``days``, ``weeks``, ``months``, or ``years``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used in\n            conjunction with ``source='field_stats'`` to choose whether to reference\n            the min or max result value.\n        :param intersect: Only used when ``source='field_stats'``. If ``True``,\n            only indices where both ``min_value`` and ``max_value`` are within the\n            period will be selected. If ``False``, it will use whichever you specified.\n            Default is ``False`` to preserve expected behavior.\n        :param week_starts_on: Either ``sunday`` or ``monday``. Default is ``sunday``\n        :param epoch: An epoch timestamp used to establish a point of reference for\n            calculations. If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by period')\n        if period_type not in ['absolute', 'relative']:\n            raise ValueError(f'Unacceptable value: {period_type} -- \"period_type\" must be either \"absolute\" or \"relative\".')\n        if period_type == 'relative':\n            func = date_range\n            args = [unit, range_from, range_to, epoch]\n            kwgs = {'week_starts_on': week_starts_on}\n            if not isinstance(range_from, int) or not isinstance(range_to, int):\n                raise ConfigurationError('\"range_from\" and \"range_to\" must be integer values')\n        else:\n            func = absolute_date_range\n            args = [unit, date_from, date_to]\n            kwgs = {'date_from_format': date_from_format, 'date_to_format': date_to_format}\n            for reqd in [date_from, date_to, date_from_format, date_to_format]:\n                if not reqd:\n                    raise ConfigurationError('Must provide \"date_from\", \"date_to\", \"date_from_format\", and \"date_to_format\" with absolute period_type')\n        self.get_index_settings()\n        try:\n            start, end = func(*args, **kwgs)\n        except Exception as exc:\n            report_failure(exc)\n        self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n        for index in self.working_list():\n            try:\n                if source == 'field_stats' and intersect:\n                    min_age = int(self.index_info[index]['age']['min_value'])\n                    max_age = int(self.index_info[index]['age']['max_value'])\n                    msg = f'Index \"{index}\", timestamp field \"{field}\", min_value ({min_age}), max_value ({max_age}), period start: \"{start}\", period end, \"{end}\"'\n                    inrange = min_age >= start and max_age <= end\n                else:\n                    age = int(self.index_info[index]['age'][self.age_keyfield])\n                    msg = f'Index \"{index}\" age ({age}), period start: \"{start}\", period end, \"{end}\"'\n                    inrange = age >= start and age <= end\n                self.__excludify(inrange, exclude, index, msg)\n            except KeyError:\n                self.loggit.debug('Index \"%s\" does not meet provided criteria. Removing from list.', index)\n                self.indices.remove(index)\n\n    def filter_ilm(self, exclude=True):\n        \"\"\"\n        Match indices that have the setting ``index.lifecycle.name``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            ``indices``. If ``exclude=False``, then only matching indices will be\n            kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices with index.lifecycle.name')\n        index_lists = chunk_index_list(self.indices)\n        if index_lists == [['']]:\n            self.loggit.debug('Empty working list. No ILM indices to filter.')\n            return\n        for lst in index_lists:\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        subvalue = working_list[index]['settings']['index']['lifecycle']\n                        has_ilm = 'name' in subvalue\n                        msg = f'{index} has index.lifecycle.name {subvalue['name']}'\n                    except KeyError:\n                        has_ilm = False\n                        msg = f'index.lifecycle.name is not set for index {index}'\n                    self.__excludify(has_ilm, exclude, index, msg)\n\n    def iterate_filters(self, filter_dict):\n        \"\"\"\n        Iterate over the filters defined in ``config`` and execute them.\n\n        :param filter_dict: The configuration dictionary\n\n        .. note:: ``filter_dict`` should be a dictionary with the following form:\n        .. code-block:: python\n\n                { 'filters' : [\n                        {\n                            'filtertype': 'the_filter_type',\n                            'key1' : 'value1',\n                            ...\n                            'keyN' : 'valueN'\n                        }\n                    ]\n                }\n\n        \"\"\"\n        self.loggit.debug('Iterating over a list of filters')\n        if 'filters' not in filter_dict or len(filter_dict['filters']) < 1:\n            self.loggit.info('No filters in config.  Returning unaltered object.')\n            return\n        self.loggit.debug('All filters: %s', filter_dict['filters'])\n        for fil in filter_dict['filters']:\n            self.loggit.debug('Top of the loop: %s', self.indices)\n            self.loggit.debug('Un-parsed filter args: %s', fil)\n            chk = SchemaCheck(fil, filterstructure(), 'filter', 'IndexList.iterate_filters').result()\n            msg = f'Parsed filter args: {chk}'\n            self.loggit.debug(msg)\n            method = self.__map_method(fil['filtertype'])\n            del fil['filtertype']\n            if fil:\n                self.loggit.debug('Filter args: %s', fil)\n                self.loggit.debug('Pre-instance: %s', self.indices)\n                method(**fil)\n                self.loggit.debug('Post-instance: %s', self.indices)\n            else:\n                method()\n\n    def filter_by_size(self, size_threshold=None, threshold_behavior='greater_than', exclude=False, size_behavior='primary'):\n        \"\"\"\n        Remove indices from the actionable list based on index size.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``size_threshold``. When set to\n        ``less_than``, it includes if the index is smaller than ``size_threshold``\n\n        :param size_threshold: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param size_behavior: Size that used to filter, either ``primary`` or\n            ``total``. Defaults to ``primary``\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by index size')\n        if not size_threshold:\n            raise MissingArgument('No value for \"size_threshold\" provided')\n        if size_behavior not in ['primary', 'total']:\n            raise ValueError(f'Invalid value for \"size_behavior\": {size_behavior}')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(f'Invalid value for \"threshold_behavior\": {threshold_behavior}')\n        index_size_limit = float(size_threshold) * 2 ** 30\n        msg = 'Cannot get disk usage info from closed indices. Omitting any closed indices.'\n        self.loggit.debug(msg)\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        working_list = self.working_list()\n        for index in working_list:\n            if size_behavior == 'primary':\n                index_size = self.index_info[index]['primary_size_in_bytes']\n            else:\n                index_size = self.index_info[index]['size_in_bytes']\n            msg = f'{index}, index size is {byte_size(index_size)} and size limit is {byte_size(index_size_limit)}.'\n            if threshold_behavior == 'greater_than':\n                self.__excludify(index_size > index_size_limit, exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify(index_size < index_size_limit, exclude, index, msg)"
  }
}