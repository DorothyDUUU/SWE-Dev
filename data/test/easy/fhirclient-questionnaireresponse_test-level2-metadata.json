{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-questionnaireresponse_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "modified_testcases/models/questionnaireresponse_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import questionnaireresponse\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass QuestionnaireResponseTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        return questionnaireresponse.QuestionnaireResponse(js)\n    \n    def testQuestionnaireResponse1(self):\n        inst = self.instantiate_from(\"questionnaireresponse-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a QuestionnaireResponse instance\")\n        self.implQuestionnaireResponse1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        inst2 = questionnaireresponse.QuestionnaireResponse(js)\n        self.implQuestionnaireResponse1(inst2)\n    \n    def implQuestionnaireResponse1(self, inst):\n        self.assertEqual(inst.authored.datetime, FHIRDateTime(\"2013-02-19T14:15:00-05:00\").datetime)\n        self.assertEqual(inst.authored.as_json(), \"2013-02-19T14:15:00-05:00\")\n        self.assertEqual(inst.contained[0].id, \"patsub\")\n        self.assertEqual(inst.contained[1].id, \"order\")\n        self.assertEqual(inst.contained[2].id, \"questauth\")\n        self.assertEqual(inst.id, \"3141\")\n        self.assertEqual(inst.identifier.system, \"http://example.org/fhir/NamingSystem/questionnaire-ids\")\n        self.assertEqual(inst.identifier.value, \"Q12349876\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[0].answer[0].valueCoding.code, \"1\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[0].answer[0].valueCoding.system, \"http://cancer.questionnaire.org/system/code/yesno\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[0].linkId, \"1.1.1.1\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[1].answer[0].valueCoding.code, \"1\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[1].answer[0].valueCoding.system, \"http://cancer.questionnaire.org/system/code/yesno\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[1].linkId, \"1.1.1.2\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[2].answer[0].valueCoding.code, \"0\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[2].answer[0].valueCoding.system, \"http://cancer.questionnaire.org/system/code/yesno\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].item[2].linkId, \"1.1.1.3\")\n        self.assertEqual(inst.item[0].item[0].answer[0].item[0].linkId, \"1.1.1\")\n        self.assertEqual(inst.item[0].item[0].answer[0].valueCoding.code, \"1\")\n        self.assertEqual(inst.item[0].item[0].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[0].item[0].answer[0].valueCoding.system, \"http://cancer.questionnaire.org/system/code/yesno\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[0].linkId, \"1\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testQuestionnaireResponse2(self):\n        inst = self.instantiate_from(\"questionnaireresponse-example-f201-lifelines.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a QuestionnaireResponse instance\")\n        self.implQuestionnaireResponse2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        inst2 = questionnaireresponse.QuestionnaireResponse(js)\n        self.implQuestionnaireResponse2(inst2)\n    \n    def implQuestionnaireResponse2(self, inst):\n        self.assertEqual(inst.authored.datetime, FHIRDateTime(\"2013-06-18T00:00:00+01:00\").datetime)\n        self.assertEqual(inst.authored.as_json(), \"2013-06-18T00:00:00+01:00\")\n        self.assertEqual(inst.id, \"f201\")\n        self.assertEqual(inst.item[0].item[0].answer[0].valueString, \"I am allergic to house dust\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[0].item[0].text, \"Do you have allergies?\")\n        self.assertEqual(inst.item[0].linkId, \"1\")\n        self.assertEqual(inst.item[1].item[0].answer[0].valueString, \"Male\")\n        self.assertEqual(inst.item[1].item[0].linkId, \"2.1\")\n        self.assertEqual(inst.item[1].item[0].text, \"What is your gender?\")\n        self.assertEqual(inst.item[1].item[1].answer[0].valueDate.date, FHIRDate(\"1960-03-13\").date)\n        self.assertEqual(inst.item[1].item[1].answer[0].valueDate.as_json(), \"1960-03-13\")\n        self.assertEqual(inst.item[1].item[1].linkId, \"2.2\")\n        self.assertEqual(inst.item[1].item[1].text, \"What is your date of birth?\")\n        self.assertEqual(inst.item[1].item[2].answer[0].valueString, \"The Netherlands\")\n        self.assertEqual(inst.item[1].item[2].linkId, \"2.3\")\n        self.assertEqual(inst.item[1].item[2].text, \"What is your country of birth?\")\n        self.assertEqual(inst.item[1].item[3].answer[0].valueString, \"married\")\n        self.assertEqual(inst.item[1].item[3].linkId, \"2.4\")\n        self.assertEqual(inst.item[1].item[3].text, \"What is your marital status?\")\n        self.assertEqual(inst.item[1].linkId, \"2\")\n        self.assertEqual(inst.item[1].text, \"General questions\")\n        self.assertEqual(inst.item[2].item[0].answer[0].valueString, \"No\")\n        self.assertEqual(inst.item[2].item[0].linkId, \"3.1\")\n        self.assertEqual(inst.item[2].item[0].text, \"Do you smoke?\")\n        self.assertEqual(inst.item[2].item[1].answer[0].valueString, \"No, but I used to drink\")\n        self.assertEqual(inst.item[2].item[1].linkId, \"3.2\")\n        self.assertEqual(inst.item[2].item[1].text, \"Do you drink alchohol?\")\n        self.assertEqual(inst.item[2].linkId, \"3\")\n        self.assertEqual(inst.item[2].text, \"Intoxications\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testQuestionnaireResponse3(self):\n        inst = self.instantiate_from(\"questionnaireresponse-example-ussg-fht-answers.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a QuestionnaireResponse instance\")\n        self.implQuestionnaireResponse3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        inst2 = questionnaireresponse.QuestionnaireResponse(js)\n        self.implQuestionnaireResponse3(inst2)\n    \n    def implQuestionnaireResponse3(self, inst):\n        self.assertEqual(inst.authored.datetime, FHIRDateTime(\"2008-01-17\").datetime)\n        self.assertEqual(inst.authored.as_json(), \"2008-01-17\")\n        self.assertEqual(inst.id, \"ussg-fht-answers\")\n        self.assertEqual(inst.item[0].item[0].answer[0].valueDate.date, FHIRDate(\"2008-01-17\").date)\n        self.assertEqual(inst.item[0].item[0].answer[0].valueDate.as_json(), \"2008-01-17\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"0.1\")\n        self.assertEqual(inst.item[0].item[0].text, \"Date Done\")\n        self.assertEqual(inst.item[0].linkId, \"0\")\n        self.assertEqual(inst.item[1].definition, \"http://loinc.org/fhir/DataElement/54126-8\")\n        self.assertEqual(inst.item[1].item[0].item[0].answer[0].valueString, \"Annie Proband\")\n        self.assertEqual(inst.item[1].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54125-0\")\n        self.assertEqual(inst.item[1].item[0].item[0].linkId, \"1.1.1\")\n        self.assertEqual(inst.item[1].item[0].item[0].text, \"Name\")\n        self.assertEqual(inst.item[1].item[0].item[1].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[1].item[0].item[1].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[1].item[0].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54131-8\")\n        self.assertEqual(inst.item[1].item[0].item[1].linkId, \"1.1.2\")\n        self.assertEqual(inst.item[1].item[0].item[1].text, \"Gender\")\n        self.assertEqual(inst.item[1].item[0].item[2].answer[0].valueDate.date, FHIRDate(\"1966-04-04\").date)\n        self.assertEqual(inst.item[1].item[0].item[2].answer[0].valueDate.as_json(), \"1966-04-04\")\n        self.assertEqual(inst.item[1].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/21112-8\")\n        self.assertEqual(inst.item[1].item[0].item[2].linkId, \"1.1.3\")\n        self.assertEqual(inst.item[1].item[0].item[2].text, \"Date of Birth\")\n        self.assertEqual(inst.item[1].item[0].item[3].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[1].item[0].item[3].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[1].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54132-6\")\n        self.assertEqual(inst.item[1].item[0].item[3].linkId, \"1.1.4\")\n        self.assertEqual(inst.item[1].item[0].item[3].text, \"Were you born a twin?\")\n        self.assertEqual(inst.item[1].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[1].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[1].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54128-4\")\n        self.assertEqual(inst.item[1].item[0].item[4].linkId, \"1.1.5\")\n        self.assertEqual(inst.item[1].item[0].item[4].text, \"Were you adopted?\")\n        self.assertEqual(inst.item[1].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[1].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[1].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54135-9\")\n        self.assertEqual(inst.item[1].item[0].item[5].linkId, \"1.1.6\")\n        self.assertEqual(inst.item[1].item[0].item[5].text, \"Are your parents related to each other in any way other than marriage?\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].item[0].answer[0].valueCoding.code, \"[in_i]\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].item[0].answer[0].valueCoding.display, \"inches\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].item[0].answer[0].valueCoding.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].item[0].linkId, \"1.1.7.1.1\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].item[0].text, \"Units\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].item[0].linkId, \"1.1.7.1\")\n        self.assertEqual(inst.item[1].item[0].item[6].answer[0].valueDecimal, 63)\n        self.assertEqual(inst.item[1].item[0].item[6].definition, \"http://loinc.org/fhir/DataElement/8302-2\")\n        self.assertEqual(inst.item[1].item[0].item[6].linkId, \"1.1.7\")\n        self.assertEqual(inst.item[1].item[0].item[6].text, \"Height\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].item[0].answer[0].valueCoding.code, \"[lb_av]\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].item[0].answer[0].valueCoding.display, \"pounds\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].item[0].answer[0].valueCoding.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].item[0].linkId, \"1.1.8.1.1\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].item[0].text, \"Units\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].item[0].linkId, \"1.1.8.1\")\n        self.assertEqual(inst.item[1].item[0].item[7].answer[0].valueDecimal, 127)\n        self.assertEqual(inst.item[1].item[0].item[7].definition, \"http://loinc.org/fhir/DataElement/29463-7\")\n        self.assertEqual(inst.item[1].item[0].item[7].linkId, \"1.1.8\")\n        self.assertEqual(inst.item[1].item[0].item[7].text, \"Weight\")\n        self.assertEqual(inst.item[1].item[0].item[8].answer[0].valueDecimal, 22.5)\n        self.assertEqual(inst.item[1].item[0].item[8].definition, \"http://loinc.org/fhir/DataElement/39156-5\")\n        self.assertEqual(inst.item[1].item[0].item[8].linkId, \"1.1.9\")\n        self.assertEqual(inst.item[1].item[0].item[8].text, \"Body mass index (BMI) [Ratio]\")\n        self.assertEqual(inst.item[1].item[0].item[9].answer[0].valueCoding.code, \"LA4457-3\")\n        self.assertEqual(inst.item[1].item[0].item[9].answer[0].valueCoding.display, \"White\")\n        self.assertEqual(inst.item[1].item[0].item[9].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].item[0].item[9].definition, \"http://loinc.org/fhir/DataElement/54134-2\")\n        self.assertEqual(inst.item[1].item[0].item[9].linkId, \"1.1.10\")\n        self.assertEqual(inst.item[1].item[0].item[9].text, \"Race\")\n        self.assertEqual(inst.item[1].item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[1].linkId, \"1\")\n        self.assertEqual(inst.item[1].text, \"Your health information\")\n        self.assertEqual(inst.item[2].definition, \"http://loinc.org/fhir/DataElement/54114-4\")\n        self.assertEqual(inst.item[2].item[0].item[0].answer[0].valueCoding.code, \"LA10405-1\")\n        self.assertEqual(inst.item[2].item[0].item[0].answer[0].valueCoding.display, \"Daughter\")\n        self.assertEqual(inst.item[2].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[0].item[1].answer[0].valueString, \"Susan\")\n        self.assertEqual(inst.item[2].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[0].item[2].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[2].item[0].item[2].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[2].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 17)\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[0].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].answer[0].valueCoding.code, \"LA10415-0\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].answer[0].valueCoding.display, \"Brother\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[1].answer[0].valueString, \"Brian\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].answer[0].valueCoding.code, \"LA2-8\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].answer[0].valueCoding.display, \"Male\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 32)\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[1].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[1].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[0].answer[0].valueCoding.code, \"LA10550-4\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[0].answer[0].valueCoding.display, \"-- Other Cancer\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[0].linkId, \"2.1.2.1\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[0].text, \"Disease or Condition\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[1].answer[0].valueCoding.code, \"LA10397-0\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[1].answer[0].valueCoding.display, \"30-39\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[1].linkId, \"2.1.2.2\")\n        self.assertEqual(inst.item[2].item[1].item[1].item[1].text, \"Age at Diagnosis\")\n        self.assertEqual(inst.item[2].item[1].item[1].linkId, \"2.1.2\")\n        self.assertEqual(inst.item[2].item[1].item[1].text, \"This family member's history of disease\")\n        self.assertEqual(inst.item[2].item[1].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].answer[0].valueCoding.code, \"LA10418-4\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].answer[0].valueCoding.display, \"Sister\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[1].answer[0].valueString, \"Janet\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 36)\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[2].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[2].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[0].answer[0].valueCoding.code, \"LA10536-3\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[0].answer[0].valueCoding.display, \"-- Breast Cancer\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[0].linkId, \"2.1.2.1\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[0].text, \"Disease or Condition\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[1].answer[0].valueCoding.code, \"LA10397-0\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[1].answer[0].valueCoding.display, \"30-39\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[1].linkId, \"2.1.2.2\")\n        self.assertEqual(inst.item[2].item[2].item[1].item[1].text, \"Age at Diagnosis\")\n        self.assertEqual(inst.item[2].item[2].item[1].linkId, \"2.1.2\")\n        self.assertEqual(inst.item[2].item[2].item[1].text, \"This family member's history of disease\")\n        self.assertEqual(inst.item[2].item[2].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].answer[0].valueCoding.code, \"LA10419-2\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].answer[0].valueCoding.display, \"Nephew\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[1].answer[0].valueString, \"Ian\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].answer[0].valueCoding.code, \"LA2-8\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].answer[0].valueCoding.display, \"Male\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 16)\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[3].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[3].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[3].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].answer[0].valueCoding.code, \"LA10420-0\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].answer[0].valueCoding.display, \"Niece\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[1].answer[0].valueString, \"Helen\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 15)\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[4].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[4].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[4].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].answer[0].valueCoding.code, \"LA10416-8\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].answer[0].valueCoding.display, \"Father\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[1].answer[0].valueString, \"Donald\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].answer[0].valueCoding.code, \"LA2-8\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].answer[0].valueCoding.display, \"Male\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 52)\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[5].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[5].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[5].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].answer[0].valueCoding.code, \"LA10425-9\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].answer[0].valueCoding.display, \"Paternal Uncle\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[1].answer[0].valueString, \"Eric\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].answer[0].valueCoding.code, \"LA2-8\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].answer[0].valueCoding.display, \"Male\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 56)\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[6].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[6].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[6].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].answer[0].valueCoding.code, \"LA10421-8\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].answer[0].valueCoding.display, \"Paternal Aunt\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[1].answer[0].valueString, \"Fiona\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].item[0].item[0].answer[0].valueDecimal, 57)\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54141-7\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.2.2\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].item[0].item[0].text, \"Age\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.2\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].valueCoding.code, \"LA33-6\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].valueCoding.display, \"Yes\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[7].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[7].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[7].item[1].item[0].answer[0].valueCoding.code, \"LA10543-9\")\n        self.assertEqual(inst.item[2].item[7].item[1].item[0].answer[0].valueCoding.display, \"-- Skin Cancer\")\n        self.assertEqual(inst.item[2].item[7].item[1].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[7].item[1].item[0].linkId, \"2.1.2.1\")\n        self.assertEqual(inst.item[2].item[7].item[1].item[0].text, \"Disease or Condition\")\n        self.assertEqual(inst.item[2].item[7].item[1].linkId, \"2.1.2\")\n        self.assertEqual(inst.item[2].item[7].item[1].text, \"This family member's history of disease\")\n        self.assertEqual(inst.item[2].item[7].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].answer[0].valueCoding.code, \"LA10423-4\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].answer[0].valueCoding.display, \"Paternal Grandfather\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[1].answer[0].valueString, \"Bob\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].answer[0].valueCoding.code, \"LA2-8\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].answer[0].valueCoding.display, \"Male\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.code, \"LA10537-1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.display, \"-- Colon Cancer\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54112-8\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.1.1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[0].text, \"Cause of Death\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.code, \"LA10400-2\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.display, \"OVER 60\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54113-6\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].linkId, \"2.1.1.4.1.2\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].item[1].text, \"Age at Death\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[8].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[8].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[0].answer[0].valueCoding.code, \"LA10537-1\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[0].answer[0].valueCoding.display, \"-- Colon Cancer\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[0].linkId, \"2.1.2.1\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[0].text, \"Disease or Condition\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[1].answer[0].valueCoding.code, \"LA10400-2\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[1].answer[0].valueCoding.display, \"OVER 60\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[1].linkId, \"2.1.2.2\")\n        self.assertEqual(inst.item[2].item[8].item[1].item[1].text, \"Age at Diagnosis\")\n        self.assertEqual(inst.item[2].item[8].item[1].linkId, \"2.1.2\")\n        self.assertEqual(inst.item[2].item[8].item[1].text, \"This family member's history of disease\")\n        self.assertEqual(inst.item[2].item[8].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].answer[0].valueCoding.code, \"LA10424-2\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].answer[0].valueCoding.display, \"Paternal Grandmother\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54136-7\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].linkId, \"2.1.1.1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[0].text, \"Relationship to you\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[1].answer[0].valueString, \"Claire\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54138-3\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[1].linkId, \"2.1.1.2\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[1].text, \"Name\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].answer[0].valueCoding.code, \"LA3-6\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].answer[0].valueCoding.display, \"Female\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].definition, \"http://loinc.org/fhir/DataElement/54123-5\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].linkId, \"2.1.1.3\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[2].text, \"Gender\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].item[0].answer[0].valueString, \"Lou Gehrigs\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].item[0].linkId, \"2.1.1.4.1.1.1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].item[0].text, \"Please specify\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.code, \"LA10589-2\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.display, \"-- Other/Unexpected\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].definition, \"http://loinc.org/fhir/DataElement/54112-8\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].linkId, \"2.1.1.4.1.1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[0].text, \"Cause of Death\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.code, \"LA10400-2\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.display, \"OVER 60\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].definition, \"http://loinc.org/fhir/DataElement/54113-6\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].linkId, \"2.1.1.4.1.2\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].item[1].text, \"Age at Death\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].item[0].linkId, \"2.1.1.4.1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].definition, \"http://loinc.org/fhir/DataElement/54139-1\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].linkId, \"2.1.1.4\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[3].text, \"Living?\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].definition, \"http://loinc.org/fhir/DataElement/54121-9\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].linkId, \"2.1.1.5\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[4].text, \"Was this person born a twin?\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].answer[0].valueCoding.code, \"LA32-8\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].answer[0].valueCoding.display, \"No\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].definition, \"http://loinc.org/fhir/DataElement/54122-7\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].linkId, \"2.1.1.6\")\n        self.assertEqual(inst.item[2].item[9].item[0].item[5].text, \"Was this person adopted?\")\n        self.assertEqual(inst.item[2].item[9].item[0].linkId, \"2.1.1\")\n        self.assertEqual(inst.item[2].item[9].linkId, \"2.1\")\n        self.assertEqual(inst.item[2].linkId, \"2\")\n        self.assertEqual(inst.item[2].text, \"Family member health information\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.questionnaire, \"Questionnaire/ussg-fht\")\n        self.assertEqual(inst.status, \"in-progress\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testQuestionnaireResponse4(self):\n        inst = self.instantiate_from(\"questionnaireresponse-example-gcs.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a QuestionnaireResponse instance\")\n        self.implQuestionnaireResponse4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        inst2 = questionnaireresponse.QuestionnaireResponse(js)\n        self.implQuestionnaireResponse4(inst2)\n    \n    def implQuestionnaireResponse4(self, inst):\n        self.assertEqual(inst.authored.datetime, FHIRDateTime(\"2014-12-11T04:44:16Z\").datetime)\n        self.assertEqual(inst.authored.as_json(), \"2014-12-11T04:44:16Z\")\n        self.assertEqual(inst.id, \"gcs\")\n        self.assertEqual(inst.item[0].answer[0].valueCoding.code, \"LA6560-2\")\n        self.assertEqual(inst.item[0].answer[0].valueCoding.display, \"Confused\")\n        self.assertEqual(inst.item[0].answer[0].valueCoding.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/ordinalValue\")\n        self.assertEqual(inst.item[0].answer[0].valueCoding.extension[0].valueDecimal, 4)\n        self.assertEqual(inst.item[0].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[1].answer[0].valueCoding.code, \"LA6566-9\")\n        self.assertEqual(inst.item[1].answer[0].valueCoding.display, \"Localizing pain\")\n        self.assertEqual(inst.item[1].answer[0].valueCoding.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/ordinalValue\")\n        self.assertEqual(inst.item[1].answer[0].valueCoding.extension[0].valueDecimal, 5)\n        self.assertEqual(inst.item[1].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].linkId, \"1.2\")\n        self.assertEqual(inst.item[2].answer[0].valueCoding.code, \"LA6556-0\")\n        self.assertEqual(inst.item[2].answer[0].valueCoding.display, \"Eyes open spontaneously\")\n        self.assertEqual(inst.item[2].answer[0].valueCoding.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/ordinalValue\")\n        self.assertEqual(inst.item[2].answer[0].valueCoding.extension[0].valueDecimal, 4)\n        self.assertEqual(inst.item[2].answer[0].valueCoding.system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].linkId, \"1.3\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.questionnaire, \"Questionnaire/gcs\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testQuestionnaireResponse5(self):\n        inst = self.instantiate_from(\"questionnaireresponse-example-bluebook.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a QuestionnaireResponse instance\")\n        self.implQuestionnaireResponse5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"QuestionnaireResponse\", js[\"resourceType\"])\n        inst2 = questionnaireresponse.QuestionnaireResponse(js)\n        self.implQuestionnaireResponse5(inst2)\n    \n    def implQuestionnaireResponse5(self, inst):\n        self.assertEqual(inst.authored.datetime, FHIRDateTime(\"2013-02-19T14:15:00+10:00\").datetime)\n        self.assertEqual(inst.authored.as_json(), \"2013-02-19T14:15:00+10:00\")\n        self.assertEqual(inst.id, \"bb\")\n        self.assertEqual(inst.item[0].item[0].item[0].answer[0].valueString, \"Cathy Jones\")\n        self.assertEqual(inst.item[0].item[0].item[0].linkId, \"nameOfChild\")\n        self.assertEqual(inst.item[0].item[0].item[0].text, \"Name of child\")\n        self.assertEqual(inst.item[0].item[0].item[1].answer[0].valueCoding.code, \"f\")\n        self.assertEqual(inst.item[0].item[0].item[1].linkId, \"sex\")\n        self.assertEqual(inst.item[0].item[0].item[1].text, \"Sex\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"group\")\n        self.assertEqual(inst.item[0].item[1].item[0].answer[0].valueDecimal, 3.25)\n        self.assertEqual(inst.item[0].item[1].item[0].linkId, \"birthWeight\")\n        self.assertEqual(inst.item[0].item[1].item[0].text, \"Birth weight (kg)\")\n        self.assertEqual(inst.item[0].item[1].item[1].answer[0].valueDecimal, 44.3)\n        self.assertEqual(inst.item[0].item[1].item[1].linkId, \"birthLength\")\n        self.assertEqual(inst.item[0].item[1].item[1].text, \"Birth length (cm)\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[0].answer[0].valueDate.date, FHIRDate(\"1972-11-30\").date)\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[0].answer[0].valueDate.as_json(), \"1972-11-30\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[0].linkId, \"vitaminKDose1\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[0].text, \"1st dose\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[1].answer[0].valueDate.date, FHIRDate(\"1972-12-11\").date)\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[1].answer[0].valueDate.as_json(), \"1972-12-11\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[1].linkId, \"vitaminKDose2\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].item[1].text, \"2nd dose\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].item[0].linkId, \"vitaminKgivenDoses\")\n        self.assertEqual(inst.item[0].item[1].item[2].answer[0].valueCoding.code, \"INJECTION\")\n        self.assertEqual(inst.item[0].item[1].item[2].linkId, \"vitaminKgiven\")\n        self.assertEqual(inst.item[0].item[1].item[2].text, \"Vitamin K given\")\n        self.assertEqual(inst.item[0].item[1].item[3].answer[0].item[0].answer[0].valueDate.date, FHIRDate(\"1972-12-04\").date)\n        self.assertEqual(inst.item[0].item[1].item[3].answer[0].item[0].answer[0].valueDate.as_json(), \"1972-12-04\")\n        self.assertEqual(inst.item[0].item[1].item[3].answer[0].item[0].linkId, \"hepBgivenDate\")\n        self.assertEqual(inst.item[0].item[1].item[3].answer[0].item[0].text, \"Date given\")\n        self.assertTrue(inst.item[0].item[1].item[3].answer[0].valueBoolean)\n        self.assertEqual(inst.item[0].item[1].item[3].linkId, \"hepBgiven\")\n        self.assertEqual(inst.item[0].item[1].item[3].text, \"Hep B given y / n\")\n        self.assertEqual(inst.item[0].item[1].item[4].answer[0].valueString, \"Already able to speak Chinese\")\n        self.assertEqual(inst.item[0].item[1].item[4].linkId, \"abnormalitiesAtBirth\")\n        self.assertEqual(inst.item[0].item[1].item[4].text, \"Abnormalities noted at birth\")\n        self.assertEqual(inst.item[0].item[1].linkId, \"neonatalInformation\")\n        self.assertEqual(inst.item[0].item[1].text, \"Neonatal Information\")\n        self.assertEqual(inst.item[0].linkId, \"birthDetails\")\n        self.assertEqual(inst.item[0].text, \"Birth details - To be completed by health professional\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/questionnaireresponse.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass QuestionnaireResponse(domainresource.DomainResource):\n    \"\"\" A structured set of questions and their answers.\n    \n    A structured set of questions and their answers. The questions are ordered\n    and grouped into coherent subsets, corresponding to the structure of the\n    grouping of the questionnaire being responded to.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireResponse\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.author = None\n        \"\"\" Person who received and recorded the answers.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.authored = None\n        \"\"\" Date the answers were gathered.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Request fulfilled by this QuestionnaireResponse.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique id for this set of answers.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Groups and questions.\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.partOf = None\n        \"\"\" Part of this action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.questionnaire = None\n        \"\"\" Form being answered.\n        Type `str`. \"\"\"\n        \n        self.source = None\n        \"\"\" The person who answered the questions.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" in-progress | completed | amended | entered-in-error | stopped.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" The subject of the questions.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(QuestionnaireResponse, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireResponse, self).elementProperties()\n        js.extend([\n            (\"author\", \"author\", fhirreference.FHIRReference, False, None, False),\n            (\"authored\", \"authored\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"item\", \"item\", QuestionnaireResponseItem, True, None, False),\n            (\"partOf\", \"partOf\", fhirreference.FHIRReference, True, None, False),\n            (\"questionnaire\", \"questionnaire\", str, False, None, False),\n            (\"source\", \"source\", fhirreference.FHIRReference, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass QuestionnaireResponseItem(backboneelement.BackboneElement):\n    \"\"\" Groups and questions.\n    \n    A group or question item from the original questionnaire for which answers\n    are provided.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireResponseItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.answer = None\n        \"\"\" The response(s) to the question.\n        List of `QuestionnaireResponseItemAnswer` items (represented as `dict` in JSON). \"\"\"\n        \n        self.definition = None\n        \"\"\" ElementDefinition - details for the item.\n        Type `str`. \"\"\"\n        \n        self.item = None\n        \"\"\" Nested questionnaire response items.\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Pointer to specific item from Questionnaire.\n        Type `str`. \"\"\"\n        \n        self.text = None\n        \"\"\" Name for group or question text.\n        Type `str`. \"\"\"\n        \n        super(QuestionnaireResponseItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireResponseItem, self).elementProperties()\n        js.extend([\n            (\"answer\", \"answer\", QuestionnaireResponseItemAnswer, True, None, False),\n            (\"definition\", \"definition\", str, False, None, False),\n            (\"item\", \"item\", QuestionnaireResponseItem, True, None, False),\n            (\"linkId\", \"linkId\", str, False, None, True),\n            (\"text\", \"text\", str, False, None, False),\n        ])\n        return js\n\n\nclass QuestionnaireResponseItemAnswer(backboneelement.BackboneElement):\n    \"\"\" The response(s) to the question.\n    \n    The respondent's answer(s) to the question.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireResponseItemAnswer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.item = None\n        \"\"\" Nested groups and questions.\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" Single-valued answer to the question.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Single-valued answer to the question.\n        Type `bool`. \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Single-valued answer to the question.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" Single-valued answer to the question.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" Single-valued answer to the question.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Single-valued answer to the question.\n        Type `float`. \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Single-valued answer to the question.\n        Type `int`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Single-valued answer to the question.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Single-valued answer to the question.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Single-valued answer to the question.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" Single-valued answer to the question.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueUri = None\n        \"\"\" Single-valued answer to the question.\n        Type `str`. \"\"\"\n        \n        super(QuestionnaireResponseItemAnswer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireResponseItemAnswer, self).elementProperties()\n        js.extend([\n            (\"item\", \"item\", QuestionnaireResponseItem, True, None, False),\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", False),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", False),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", False),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", False),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", False),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", False),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", False),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", False),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", False),\n            (\"valueString\", \"valueString\", str, False, \"value\", False),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", False),\n            (\"valueUri\", \"valueUri\", str, False, \"value\", False),\n        ])\n        return js\n\n\nfrom . import attachment\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import quantity\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/questionnaireresponse.py": {
      "QuestionnaireResponse.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a QuestionnaireResponse instance, representing a structured set of questions and answers related to a specific questionnaire.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the QuestionnaireResponse. This allows for populating the instance from pre-existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError, ensuring the integrity of the data. If False, errors are tolerated.\n\nAttributes:\n- author (FHIRReference): Person responsible for recording the answers.\n- authored (FHIRDateTime): Date when the responses were collected.\n- basedOn (list of FHIRReference): References to requests fulfilled by this response.\n- encounter (FHIRReference): Encounter associated with this response.\n- identifier (Identifier): Unique identifier for this set of responses.\n- item (list of QuestionnaireResponseItem): List of questions and groups included in the response.\n- partOf (list of FHIRReference): References to broader actions this response is part of.\n- questionnaire (str): The identifier or reference to the form being answered.\n- source (FHIRReference): The person who provided the answers.\n- status (str): The status of the response (e.g., in-progress, completed).\n- subject (FHIRReference): The individual or entity that the questions pertain to.\n\nThis initialization method ensures that each of these attributes is set to None by default and prepares the instance for data assignment or further processing.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.author = None\n        ' Person who received and recorded the answers.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.authored = None\n        ' Date the answers were gathered.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.basedOn = None\n        ' Request fulfilled by this QuestionnaireResponse.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique id for this set of answers.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.item = None\n        ' Groups and questions.\\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). '\n        self.partOf = None\n        ' Part of this action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.questionnaire = None\n        ' Form being answered.\\n        Type `str`. '\n        self.source = None\n        ' The person who answered the questions.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' in-progress | completed | amended | entered-in-error | stopped.\\n        Type `str`. '\n        self.subject = None\n        ' The subject of the questions.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(QuestionnaireResponse, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a QuestionnaireResponse instance, representing a structured set of questions and answers related to a specific questionnaire.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the QuestionnaireResponse. This allows for populating the instance from pre-existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError, ensuring the integrity of the data. If False, errors are tolerated.\n\nAttributes:\n- author (FHIRReference): Person responsible for recording the answers.\n- authored (FHIRDateTime): Date when the responses were collected.\n- basedOn (list of FHIRReference): References to requests fulfilled by this response.\n- encounter (FHIRReference): Encounter associated with this response.\n- identifier (Identifier): Unique identifier for this set of responses.\n- item (list of QuestionnaireResponseItem): List of questions and groups included in the response.\n- partOf (list of FHIRReference): References to broader actions this response is part of.\n- questionnaire (str): The identifier or reference to the form being answered.\n- source (FHIRReference): The person who provided the answers.\n- status (str): The status of the response (e.g., in-progress, completed).\n- subject (FHIRReference): The individual or entity that the questions pertain to.\n\nThis initialization method ensures that each of these attributes is set to None by default and prepares the instance for data assignment or further processing.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class QuestionnaireResponse(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format, or None. \n  If provided, it must meet specific formatting standards, as enforced by the _REGEX constant, \n  which is defined within the class. \n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed FHIR date,\n  converted into a Python datetime object. This attribute is initialized to None if jsonval is not provided \n  or does not meet the standards.\n- origval (Union[str, None]): Stores the original JSON value used to create the instance.\n\nThe _REGEX constant is a compiled regular expression used to validate the format of jsonval. If jsonval is \nvalid, the date attribute is populated using the _from_string method, which converts the ISO 8601 date string \ninto a Python date representation.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format, or None. \n  If provided, it must meet specific formatting standards, as enforced by the _REGEX constant, \n  which is defined within the class. \n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed FHIR date,\n  converted into a Python datetime object. This attribute is initialized to None if jsonval is not provided \n  or does not meet the standards.\n- origval (Union[str, None]): Stores the original JSON value used to create the instance.\n\nThe _REGEX constant is a compiled regular expression used to validate the format of jsonval. If jsonval is \nvalid, the date attribute is populated using the _from_string method, which converts the ISO 8601 date string \ninto a Python date representation.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets an attribute for the FHIRDate instance, with special handling for the 'date' property. If the 'date' or the constant '_FIELD' (which is also 'date') is being set, it clears the original JSON value (`origval`) and synchronizes both the `date` field and `_FIELD`. For all other attributes, it simply assigns the provided value. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nThis method modifies the `origval` attribute based on the conditions stated and interacts with `self._FIELD`, which is defined as \"date\", ensuring consistency between the internal `date` representation and its original JSON source.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets an attribute for the FHIRDate instance, with special handling for the 'date' property. If the 'date' or the constant '_FIELD' (which is also 'date') is being set, it clears the original JSON value (`origval`) and synchronizes both the `date` field and `_FIELD`. For all other attributes, it simply assigns the provided value. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nThis method modifies the `origval` attribute based on the conditions stated and interacts with `self._FIELD`, which is defined as \"date\", ensuring consistency between the internal `date` representation and its original JSON source.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance, or a standardized ISO 8601 representation if the original value is not available. \n\nIf `origval` was set during initialization, it will be returned; otherwise, the method calls the `isostring` property to provide a formatted string representation of the `date`. This behavior ensures that the exact input used to initialize the instance can be retrieved, which is particularly useful for maintaining fidelity in FHIR data representation.\n\nThe `isostring` property normalizes the date into an ISO 8601 format, accounting for partial dates and timezones, making it convenient for further date manipulations within the context of the FHIR specification.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance, or a standardized ISO 8601 representation if the original value is not available. \n\nIf `origval` was set during initialization, it will be returned; otherwise, the method calls the `isostring` property to provide a formatted string representation of the `date`. This behavior ensures that the exact input used to initialize the instance can be retrieved, which is particularly useful for maintaining fidelity in FHIR data representation.\n\nThe `isostring` property normalizes the date into an ISO 8601 format, accounting for partial dates and timezones, making it convenient for further date manipulations within the context of the FHIR specification.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate._from_string": {
        "code": "    def _from_string(value: str) -> Any:\n        \"\"\"Convert a FHIR date string to a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a FHIR date. The string must adhere to the FHIR date format, as validated by the regular expression defined in the class.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nDependencies:\n- This method utilizes the `_parse_date` static method to perform the actual parsing of the input string. The `_parse_date` method calls `_parse_partial`, which handles partial dates by constructing full dates based on the provided string. It ensures compatibility with dates represented in reduced precision formats (e.g., \"2024\" interpreted as \"2024-01-01\").\"\"\"\n        return FHIRDate._parse_date(value)",
        "docstring": "Convert a FHIR date string to a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a FHIR date. The string must adhere to the FHIR date format, as validated by the regular expression defined in the class.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nDependencies:\n- This method utilizes the `_parse_date` static method to perform the actual parsing of the input string. The `_parse_date` method calls `_parse_partial`, which handles partial dates by constructing full dates based on the provided string. It ensures compatibility with dates represented in reduced precision formats (e.g., \"2024\" interpreted as \"2024-01-01\").",
        "signature": "def _from_string(value: str) -> Any:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of the `FHIRAbstractBase` class to a JSON-compatible dictionary. The method inspects the output of `elementProperties()` to construct the JSON representation, ensuring that all non-optional properties are present and that all provided property values are of the correct type.\n\nRaises:\n- FHIRValidationError: If properties are missing (for non-optional properties) or have the wrong type, indicating issues with the instance's data validity.\n\nReturns:\n- dict: A validated dictionary that is ready for JSON serialization.\n\nThe method relies on:\n- `elementProperties()`: To obtain the properties that should be included in the JSON output.\n- `_matches_type(value, typ)`: To validate types of assigned values against expected types.\n- `as_json()`: This is called on nested objects to ensure they are also serialized correctly if they support this operation.\n\nAttributes:\n- `js`: A dictionary used to store the serialized JSON data.\n- `errs`: A list for collecting any validation errors encountered during serialization.\n- `found`: A set that tracks which properties have been populated during serialization.\n- `nonoptionals`: A set that records properties marked as non-optional to check their presence in the final output.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of the `FHIRAbstractBase` class to a JSON-compatible dictionary. The method inspects the output of `elementProperties()` to construct the JSON representation, ensuring that all non-optional properties are present and that all provided property values are of the correct type.\n\nRaises:\n- FHIRValidationError: If properties are missing (for non-optional properties) or have the wrong type, indicating issues with the instance's data validity.\n\nReturns:\n- dict: A validated dictionary that is ready for JSON serialization.\n\nThe method relies on:\n- `elementProperties()`: To obtain the properties that should be included in the JSON output.\n- `_matches_type(value, typ)`: To validate types of assigned values against expected types.\n- `as_json()`: This is called on nested objects to ensure they are also serialized correctly if they support this operation.\n\nAttributes:\n- `js`: A dictionary used to store the serialized JSON data.\n- `errs`: A list for collecting any validation errors encountered during serialization.\n- `found`: A set that tracks which properties have been populated during serialization.\n- `nonoptionals`: A set that records properties marked as non-optional to check their presence in the final output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class.\n\nThis constructor takes an optional JSON string representation of a FHIR date-time value. It initializes the `datetime` attribute to hold a Python datetime object (which can be either naive or aware). The constructor also calls the parent class (FHIRDate) initializer to handle any JSON parsing and storage necessary for the base class.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representation of the FHIR date-time. If `None`, the instance will have no initialized datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Stores the corresponding Python datetime object derived from the provided JSON string, initialized to `None` if no valid JSON is provided.\n\nThe `FHIRDateTime` class is designed to work with FHIR date-time formats, which can be partial and carry nuances that are handled to the extent possible given Python's capabilities. The interaction with the superclass, FHIRDate, is crucial as it may provide foundational handling of the input format.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class.\n\nThis constructor takes an optional JSON string representation of a FHIR date-time value. It initializes the `datetime` attribute to hold a Python datetime object (which can be either naive or aware). The constructor also calls the parent class (FHIRDate) initializer to handle any JSON parsing and storage necessary for the base class.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representation of the FHIR date-time. If `None`, the instance will have no initialized datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Stores the corresponding Python datetime object derived from the provided JSON string, initialized to `None` if no valid JSON is provided.\n\nThe `FHIRDateTime` class is designed to work with FHIR date-time formats, which can be partial and carry nuances that are handled to the extent possible given Python's capabilities. The interaction with the superclass, FHIRDate, is crucial as it may provide foundational handling of the input format.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method overrides the as_json method of the superclass to include the 'resourceType' key in the resulting JSON dictionary, which specifies the type of the resource as defined by the class attribute `resource_type`. \n\n:returns: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method overrides the as_json method of the superclass to include the 'resourceType' key in the resulting JSON dictionary, which specifies the type of the resource as defined by the class attribute `resource_type`. \n\n:returns: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance with attributes for FHIR resource representation.\n\nThis constructor initializes the DomainResource, a type of FHIR resource that includes narrative text, extensions, and embedded resources. It accepts an optional JSON dictionary for initializing attributes and enforces strict validation of input unless specified otherwise.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the DomainResource.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid values; if False, allows invalid values without raising an error.\n\nAttributes initialized:\n- contained (list of Resource): Holds inline resources as defined in the FHIR specification.\n- extension (list of Extension): Supports additional information defined by implementations.\n- modifierExtension (list of Extension): Contains extensions that are critical and should not be ignored.\n- text (Narrative): Represents a human-readable summary of the resource.\n\nThis constructor calls the superclass (resource.Resource) initializer to properly construct the base Resource elements with the provided jsondict and strict parameters.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance with attributes for FHIR resource representation.\n\nThis constructor initializes the DomainResource, a type of FHIR resource that includes narrative text, extensions, and embedded resources. It accepts an optional JSON dictionary for initializing attributes and enforces strict validation of input unless specified otherwise.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the DomainResource.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid values; if False, allows invalid values without raising an error.\n\nAttributes initialized:\n- contained (list of Resource): Holds inline resources as defined in the FHIR specification.\n- extension (list of Extension): Supports additional information defined by implementations.\n- modifierExtension (list of Extension): Contains extensions that are critical and should not be ignored.\n- text (Narrative): Represents a human-readable summary of the resource.\n\nThis constructor calls the superclass (resource.Resource) initializer to properly construct the base Resource elements with the provided jsondict and strict parameters.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/questionnaireresponse.py": {
        "QuestionnaireResponse.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(QuestionnaireResponse, self).elementProperties()\n        js.extend([('author', 'author', fhirreference.FHIRReference, False, None, False), ('authored', 'authored', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('item', 'item', QuestionnaireResponseItem, True, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('questionnaire', 'questionnaire', str, False, None, False), ('source', 'source', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class QuestionnaireResponse(domainresource.DomainResource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate._parse_date": {
          "code": "    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)",
          "docstring": "",
          "signature": "def _parse_date(value: str) -> datetime.date:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:testQuestionnaireResponse1": {
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
        "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:implQuestionnaireResponse1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:testQuestionnaireResponse2": {
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
        "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:implQuestionnaireResponse2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:testQuestionnaireResponse3": {
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
        "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:implQuestionnaireResponse3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:testQuestionnaireResponse4": {
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
        "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:implQuestionnaireResponse4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:testQuestionnaireResponse5": {
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:instantiate_from": {
        "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "modified_testcases/models/questionnaireresponse_test.py:QuestionnaireResponseTests:implQuestionnaireResponse5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaireresponse.py:QuestionnaireResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-questionnaireresponse_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u251c\u2500\u2500 FHIRDate._from_string\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 questionnaireresponse.py\n            \u2514\u2500\u2500 QuestionnaireResponse.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate, test, and ensure compliance of `QuestionnaireResponse` resources with the FHIR (Fast Healthcare Interoperability Resources) 4.0.1 standard. It provides functionality to instantiate, parse, and evaluate `QuestionnaireResponse` objects by verifying their structure, metadata, content, and conformity to FHIR's schema. The module allows for the assessment of essential attributes such as authored dates, status, identifiers, and nested response hierarchies, demonstrating its ability to handle complex use cases like coded values, patient data, and questionnaires. This enables developers to ascertain the integrity and correctness of data exchanged between healthcare interoperability systems, significantly reducing errors and enhancing compliance with standardized data protocols.\n\n## FILE 1: fhirclient/models/questionnaireresponse.py\n\n- CLASS METHOD: QuestionnaireResponse.__init__\n  - CLASS SIGNATURE: class QuestionnaireResponse(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a QuestionnaireResponse instance, representing a structured set of questions and answers related to a specific questionnaire.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the QuestionnaireResponse. This allows for populating the instance from pre-existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError, ensuring the integrity of the data. If False, errors are tolerated.\n\nAttributes:\n- author (FHIRReference): Person responsible for recording the answers.\n- authored (FHIRDateTime): Date when the responses were collected.\n- basedOn (list of FHIRReference): References to requests fulfilled by this response.\n- encounter (FHIRReference): Encounter associated with this response.\n- identifier (Identifier): Unique identifier for this set of responses.\n- item (list of QuestionnaireResponseItem): List of questions and groups included in the response.\n- partOf (list of FHIRReference): References to broader actions this response is part of.\n- questionnaire (str): The identifier or reference to the form being answered.\n- source (FHIRReference): The person who provided the answers.\n- status (str): The status of the response (e.g., in-progress, completed).\n- subject (FHIRReference): The individual or entity that the questions pertain to.\n\nThis initialization method ensures that each of these attributes is set to None by default and prepares the instance for data assignment or further processing.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format, or None. \n  If provided, it must meet specific formatting standards, as enforced by the _REGEX constant, \n  which is defined within the class. \n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed FHIR date,\n  converted into a Python datetime object. This attribute is initialized to None if jsonval is not provided \n  or does not meet the standards.\n- origval (Union[str, None]): Stores the original JSON value used to create the instance.\n\nThe _REGEX constant is a compiled regular expression used to validate the format of jsonval. If jsonval is \nvalid, the date attribute is populated using the _from_string method, which converts the ISO 8601 date string \ninto a Python date representation.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate._from_string\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def _from_string(value: str) -> Any:\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a FHIR date string to a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a FHIR date. The string must adhere to the FHIR date format, as validated by the regular expression defined in the class.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nDependencies:\n- This method utilizes the `_parse_date` static method to perform the actual parsing of the input string. The `_parse_date` method calls `_parse_partial`, which handles partial dates by constructing full dates based on the provided string. It ensures compatibility with dates represented in reduced precision formats (e.g., \"2024\" interpreted as \"2024-01-01\").\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance, or a standardized ISO 8601 representation if the original value is not available. \n\nIf `origval` was set during initialization, it will be returned; otherwise, the method calls the `isostring` property to provide a formatted string representation of the `date`. This behavior ensures that the exact input used to initialize the instance can be retrieved, which is particularly useful for maintaining fidelity in FHIR data representation.\n\nThe `isostring` property normalizes the date into an ISO 8601 format, accounting for partial dates and timezones, making it convenient for further date manipulations within the context of the FHIR specification.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets an attribute for the FHIRDate instance, with special handling for the 'date' property. If the 'date' or the constant '_FIELD' (which is also 'date') is being set, it clears the original JSON value (`origval`) and synchronizes both the `date` field and `_FIELD`. For all other attributes, it simply assigns the provided value. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nThis method modifies the `origval` attribute based on the conditions stated and interacts with `self._FIELD`, which is defined as \"date\", ensuring consistency between the internal `date` representation and its original JSON source.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of the `FHIRAbstractBase` class to a JSON-compatible dictionary. The method inspects the output of `elementProperties()` to construct the JSON representation, ensuring that all non-optional properties are present and that all provided property values are of the correct type.\n\nRaises:\n- FHIRValidationError: If properties are missing (for non-optional properties) or have the wrong type, indicating issues with the instance's data validity.\n\nReturns:\n- dict: A validated dictionary that is ready for JSON serialization.\n\nThe method relies on:\n- `elementProperties()`: To obtain the properties that should be included in the JSON output.\n- `_matches_type(value, typ)`: To validate types of assigned values against expected types.\n- `as_json()`: This is called on nested objects to ensure they are also serialized correctly if they support this operation.\n\nAttributes:\n- `js`: A dictionary used to store the serialized JSON data.\n- `errs`: A list for collecting any validation errors encountered during serialization.\n- `found`: A set that tracks which properties have been populated during serialization.\n- `nonoptionals`: A set that records properties marked as non-optional to check their presence in the final output.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class.\n\nThis constructor takes an optional JSON string representation of a FHIR date-time value. It initializes the `datetime` attribute to hold a Python datetime object (which can be either naive or aware). The constructor also calls the parent class (FHIRDate) initializer to handle any JSON parsing and storage necessary for the base class.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representation of the FHIR date-time. If `None`, the instance will have no initialized datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Stores the corresponding Python datetime object derived from the provided JSON string, initialized to `None` if no valid JSON is provided.\n\nThe `FHIRDateTime` class is designed to work with FHIR date-time formats, which can be partial and carry nuances that are handled to the extent possible given Python's capabilities. The interaction with the superclass, FHIRDate, is crucial as it may provide foundational handling of the input format.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method overrides the as_json method of the superclass to include the 'resourceType' key in the resulting JSON dictionary, which specifies the type of the resource as defined by the class attribute `resource_type`. \n\n:returns: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance with attributes for FHIR resource representation.\n\nThis constructor initializes the DomainResource, a type of FHIR resource that includes narrative text, extensions, and embedded resources. It accepts an optional JSON dictionary for initializing attributes and enforces strict validation of input unless specified otherwise.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the DomainResource.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid values; if False, allows invalid values without raising an error.\n\nAttributes initialized:\n- contained (list of Resource): Holds inline resources as defined in the FHIR specification.\n- extension (list of Extension): Supports additional information defined by implementations.\n- modifierExtension (list of Extension): Contains extensions that are critical and should not be ignored.\n- text (Narrative): Represents a human-readable summary of the resource.\n\nThis constructor calls the superclass (resource.Resource) initializer to properly construct the base Resource elements with the provided jsondict and strict parameters.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/questionnaireresponse.py": "from . import domainresource\n\nclass QuestionnaireResponse(domainresource.DomainResource):\n    \"\"\" A structured set of questions and their answers.\n    \n    A structured set of questions and their answers. The questions are ordered\n    and grouped into coherent subsets, corresponding to the structure of the\n    grouping of the questionnaire being responded to.\n    \"\"\"\n    resource_type = 'QuestionnaireResponse'\n\n    def elementProperties(self):\n        js = super(QuestionnaireResponse, self).elementProperties()\n        js.extend([('author', 'author', fhirreference.FHIRReference, False, None, False), ('authored', 'authored', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('item', 'item', QuestionnaireResponseItem, True, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('questionnaire', 'questionnaire', str, False, None, False), ('source', 'source', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass QuestionnaireResponseItem(backboneelement.BackboneElement):\n    \"\"\" Groups and questions.\n    \n    A group or question item from the original questionnaire for which answers\n    are provided.\n    \"\"\"\n    resource_type = 'QuestionnaireResponseItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.answer = None\n        ' The response(s) to the question.\\n        List of `QuestionnaireResponseItemAnswer` items (represented as `dict` in JSON). '\n        self.definition = None\n        ' ElementDefinition - details for the item.\\n        Type `str`. '\n        self.item = None\n        ' Nested questionnaire response items.\\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Pointer to specific item from Questionnaire.\\n        Type `str`. '\n        self.text = None\n        ' Name for group or question text.\\n        Type `str`. '\n        super(QuestionnaireResponseItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireResponseItem, self).elementProperties()\n        js.extend([('answer', 'answer', QuestionnaireResponseItemAnswer, True, None, False), ('definition', 'definition', str, False, None, False), ('item', 'item', QuestionnaireResponseItem, True, None, False), ('linkId', 'linkId', str, False, None, True), ('text', 'text', str, False, None, False)])\n        return js\n\nclass QuestionnaireResponseItemAnswer(backboneelement.BackboneElement):\n    \"\"\" The response(s) to the question.\n    \n    The respondent's answer(s) to the question.\n    \"\"\"\n    resource_type = 'QuestionnaireResponseItemAnswer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.item = None\n        ' Nested groups and questions.\\n        List of `QuestionnaireResponseItem` items (represented as `dict` in JSON). '\n        self.valueAttachment = None\n        ' Single-valued answer to the question.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' Single-valued answer to the question.\\n        Type `bool`. '\n        self.valueCoding = None\n        ' Single-valued answer to the question.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' Single-valued answer to the question.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueDateTime = None\n        ' Single-valued answer to the question.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' Single-valued answer to the question.\\n        Type `float`. '\n        self.valueInteger = None\n        ' Single-valued answer to the question.\\n        Type `int`. '\n        self.valueQuantity = None\n        ' Single-valued answer to the question.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Single-valued answer to the question.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Single-valued answer to the question.\\n        Type `str`. '\n        self.valueTime = None\n        ' Single-valued answer to the question.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.valueUri = None\n        ' Single-valued answer to the question.\\n        Type `str`. '\n        super(QuestionnaireResponseItemAnswer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireResponseItemAnswer, self).elementProperties()\n        js.extend([('item', 'item', QuestionnaireResponseItem, True, None, False), ('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', False), ('valueBoolean', 'valueBoolean', bool, False, 'value', False), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', False), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', False), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', False), ('valueDecimal', 'valueDecimal', float, False, 'value', False), ('valueInteger', 'valueInteger', int, False, 'value', False), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', False), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', False), ('valueString', 'valueString', str, False, 'value', False), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', False), ('valueUri', 'valueUri', str, False, 'value', False)])\n        return js\nfrom . import attachment\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import quantity",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}