{
  "dir_path": "/app/pymonetdb",
  "package_name": "pymonetdb",
  "sample_name": "pymonetdb-test_monetize",
  "src_dir": "pymonetdb/",
  "test_dir": "tests/",
  "test_file": "tests/test_monetize.py",
  "test_code": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0.  If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.\n\nimport datetime\nimport unittest\nimport uuid\nfrom pymonetdb.sql.monetize import convert\nfrom pymonetdb.exceptions import ProgrammingError\n\n\nclass TestMonetize(unittest.TestCase):\n    def test_str_subclass(self):\n        class StrSubClass(str):\n            pass\n        x = StrSubClass('test')\n        csub = convert(x)\n        cstr = convert('test')\n        self.assertEqual(csub, cstr)\n\n    def test_unknown_type(self):\n        class Unknown:\n            pass\n        x = Unknown()\n        self.assertRaises(ProgrammingError, convert, x)\n\n    def test_datetime(self):\n        x = datetime.datetime(2017, 12, 6, 12, 30)\n        self.assertEqual(convert(x), \"TIMESTAMP '2017-12-06 12:30:00'\")\n\n    def test_datetime_tz(self):\n        x = datetime.datetime(2017, 12, 6, 12, 30).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=3)))\n        self.assertEqual(convert(x), \"TIMESTAMPTZ '2017-12-06 12:30:00+03:00'\")\n\n    def test_date(self):\n        x = datetime.date(2017, 12, 6)\n        self.assertEqual(convert(x), \"DATE '2017-12-06'\")\n\n    def test_time(self):\n        x = datetime.time(12, 5)\n        self.assertEqual(convert(x), \"TIME '12:05:00'\")\n\n    def test_time_tz(self):\n        x = datetime.time(12, 5).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=3)))\n        self.assertEqual(convert(x), \"TIMETZ '12:05:00+03:00'\")\n\n    def test_timedelta(self):\n        x = datetime.timedelta(days=5, hours=2, minutes=10)\n        self.assertEqual(convert(x), \"INTERVAL '439800' SECOND\")\n\n    def test_uuids(self):\n        x = uuid.UUID('334e6185-dd64-33d8-a052-d93371d3d20d')\n        self.assertEqual(convert(x), \"'334e6185-dd64-33d8-a052-d93371d3d20d'\")\n",
  "GT_file_code": {
    "pymonetdb/sql/monetize.py": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0.  If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.\n\n\"\"\"\nfunctions for converting python objects to monetdb SQL format. If you want\nto add support for a specific type you should add a function as a value to\nthe mapping dict and the datatype as key.\n\"\"\"\n\nimport datetime\nimport decimal\nimport uuid\n\nfrom pymonetdb.exceptions import ProgrammingError\n\n\ndef monet_none(_):\n    \"\"\"\n    returns a NULL string\n    \"\"\"\n    return \"NULL\"\n\n\ndef monet_bool(data):\n    \"\"\"\n    returns \"true\" or \"false\"\n    \"\"\"\n    return [\"false\", \"true\"][bool(data)]\n\n\ndef monet_escape(data):\n    \"\"\"\n    returns an escaped string\n    \"\"\"\n    data = str(data).replace(\"\\\\\", \"\\\\\\\\\")\n    data = data.replace(\"\\'\", \"\\\\\\'\")\n    return \"'%s'\" % str(data)\n\n\ndef monet_bytes(data):\n    \"\"\"\n    converts bytes to string\n    \"\"\"\n    return \"BLOB '%s'\" % data.hex()\n\n\ndef _tzaware(time_or_datetime):\n    \"\"\"\n    returns True if the time or datetime is timezone aware, False otherwise.\n    \"\"\"\n    return time_or_datetime.utcoffset() is not None\n\n\ndef monet_datetime(data):\n    \"\"\"\n    returns a casted timestamp\n    \"\"\"\n    if _tzaware(data):\n        return \"TIMESTAMPTZ %s\" % monet_escape(data)\n    else:\n        return \"TIMESTAMP %s\" % monet_escape(data)\n\n\ndef monet_date(data):\n    \"\"\"\n    returns a casted date\n    \"\"\"\n    return \"DATE %s\" % monet_escape(data)\n\n\ndef monet_time(data):\n    \"\"\"\n    returns a casted time\n    \"\"\"\n    if _tzaware(data):\n        return \"TIMETZ %s\" % monet_escape(data)\n    else:\n        return \"TIME %s\" % monet_escape(data)\n\n\ndef monet_timedelta(data):\n    \"\"\"\n    returns timedelta casted to interval seconds\n    \"\"\"\n    return \"INTERVAL %s SECOND\" % monet_escape(int(data.total_seconds()))\n\n\ndef monet_unicode(data):\n    return monet_escape(data.encode('utf-8'))\n\n\nmapping = [\n\n    (str, monet_escape),\n    (bytes, monet_bytes),\n    (int, str),\n    (complex, str),\n    (float, str),\n    (uuid.UUID, monet_escape),\n    (decimal.Decimal, str),\n    (datetime.datetime, monet_datetime),\n    (datetime.time, monet_time),\n    (datetime.date, monet_date),\n    (datetime.timedelta, monet_timedelta),\n    (bool, monet_bool),\n    (type(None), monet_none),\n]\n\nmapping_dict = dict(mapping)\n\n\ndef convert(data):\n    \"\"\"\n    Return the appropriate convertion function based upon the python type.\n    \"\"\"\n    if type(data) in mapping_dict:\n        return mapping_dict[type(data)](data)\n    else:\n        for type_, func in mapping:\n            if issubclass(type(data), type_):\n                return func(data)\n    raise ProgrammingError(\"type %s not supported as value\" % type(data))\n"
  },
  "GT_src_dict": {
    "pymonetdb/sql/monetize.py": {
      "monet_escape": {
        "code": "def monet_escape(data):\n    \"\"\"Escapes a given string for safe inclusion in a MonetDB SQL statement by replacing certain characters. \n\nParameters:\n- data: The input data to be escaped. Can be any object that can be converted to a string.\n\nReturns:\n- A string that represents the escaped version of the input, enclosed in single quotes. Backslashes and single quotes in the input are escaped to prevent SQL injection and ensure proper formatting in SQL queries.\n\nThis function is used in the context of converting various Python data types to their corresponding MonetDB SQL formats, as outlined in the mapping dictionary. It is essential for safely handling string data types in SQL interactions.\"\"\"\n    '\\n    returns an escaped string\\n    '\n    data = str(data).replace('\\\\', '\\\\\\\\')\n    data = data.replace(\"'\", \"\\\\'\")\n    return \"'%s'\" % str(data)",
        "docstring": "Escapes a given string for safe inclusion in a MonetDB SQL statement by replacing certain characters. \n\nParameters:\n- data: The input data to be escaped. Can be any object that can be converted to a string.\n\nReturns:\n- A string that represents the escaped version of the input, enclosed in single quotes. Backslashes and single quotes in the input are escaped to prevent SQL injection and ensure proper formatting in SQL queries.\n\nThis function is used in the context of converting various Python data types to their corresponding MonetDB SQL formats, as outlined in the mapping dictionary. It is essential for safely handling string data types in SQL interactions.",
        "signature": "def monet_escape(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_datetime": {
        "code": "def monet_datetime(data):\n    \"\"\"Converts a Python datetime or time object into a MonetDB-compatible timestamp string.\n\nParameters:\n- data (datetime.datetime or datetime.time): A datetime or time object to be converted.\n\nReturns:\n- str: A string representation of the timestamp in MonetDB format. The output will be either in TIMESTAMP or TIMESTAMPTZ format depending on the timezone awareness of the input.\n\nDependencies:\n- Utilizes the helper function `_tzaware` to determine if the input time or datetime object has timezone information. \n- Uses the `monet_escape` function to safely escape the string representation of the datetime.\n\nRaises:\n- ProgrammingError: If the input is neither a datetime nor a time object.\"\"\"\n    '\\n    returns a casted timestamp\\n    '\n    if _tzaware(data):\n        return 'TIMESTAMPTZ %s' % monet_escape(data)\n    else:\n        return 'TIMESTAMP %s' % monet_escape(data)",
        "docstring": "Converts a Python datetime or time object into a MonetDB-compatible timestamp string.\n\nParameters:\n- data (datetime.datetime or datetime.time): A datetime or time object to be converted.\n\nReturns:\n- str: A string representation of the timestamp in MonetDB format. The output will be either in TIMESTAMP or TIMESTAMPTZ format depending on the timezone awareness of the input.\n\nDependencies:\n- Utilizes the helper function `_tzaware` to determine if the input time or datetime object has timezone information. \n- Uses the `monet_escape` function to safely escape the string representation of the datetime.\n\nRaises:\n- ProgrammingError: If the input is neither a datetime nor a time object.",
        "signature": "def monet_datetime(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_date": {
        "code": "def monet_date(data):\n    \"\"\"Converts a Python `date` object into a MonetDB compatible SQL date format.\n\nParameters:\n- data (datetime.date): A date object to be converted.\n\nReturns:\n- str: A string representing the SQL date in the format \"DATE 'YYYY-MM-DD'\".\n\nThe function relies on the `monet_escape` function to ensure that the date is properly escaped for SQL compatibility. It is part of a broader mapping system where various Python types are associated with their corresponding formatting functions for MonetDB. If the input type is not compatible, a ProgrammingError will be raised in the parent `convert` function.\"\"\"\n    '\\n    returns a casted date\\n    '\n    return 'DATE %s' % monet_escape(data)",
        "docstring": "Converts a Python `date` object into a MonetDB compatible SQL date format.\n\nParameters:\n- data (datetime.date): A date object to be converted.\n\nReturns:\n- str: A string representing the SQL date in the format \"DATE 'YYYY-MM-DD'\".\n\nThe function relies on the `monet_escape` function to ensure that the date is properly escaped for SQL compatibility. It is part of a broader mapping system where various Python types are associated with their corresponding formatting functions for MonetDB. If the input type is not compatible, a ProgrammingError will be raised in the parent `convert` function.",
        "signature": "def monet_date(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_time": {
        "code": "def monet_time(data):\n    \"\"\"Converts a Python `time` object to its appropriate MonetDB SQL format.\n\nParameters:\n- data (datetime.time): A Python time object to be converted.\n\nReturns:\n- str: A string representing the SQL time in either TIMETZ (if the time is timezone aware) or TIME format.\n\nDependencies:\n- Utilizes the `_tzaware` function to check if the provided time object is timezone aware.\n- Uses the `monet_escape` function to safely escape the SQL string and prevent SQL injection.\n\nThis function is part of a larger mapping system that converts various Python types into corresponding MonetDB SQL representations.\"\"\"\n    '\\n    returns a casted time\\n    '\n    if _tzaware(data):\n        return 'TIMETZ %s' % monet_escape(data)\n    else:\n        return 'TIME %s' % monet_escape(data)",
        "docstring": "Converts a Python `time` object to its appropriate MonetDB SQL format.\n\nParameters:\n- data (datetime.time): A Python time object to be converted.\n\nReturns:\n- str: A string representing the SQL time in either TIMETZ (if the time is timezone aware) or TIME format.\n\nDependencies:\n- Utilizes the `_tzaware` function to check if the provided time object is timezone aware.\n- Uses the `monet_escape` function to safely escape the SQL string and prevent SQL injection.\n\nThis function is part of a larger mapping system that converts various Python types into corresponding MonetDB SQL representations.",
        "signature": "def monet_time(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_timedelta": {
        "code": "def monet_timedelta(data):\n    \"\"\"Converts a `datetime.timedelta` object to a MonetDB SQL interval representation in seconds.\n\nParameters:\n- data (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string representing the interval in the format \"INTERVAL X SECOND\", where X is the total number of seconds as an integer. This value is generated by calling `total_seconds()` on the timedelta object.\n\nDependencies:\n- The function utilizes `monet_escape`, which ensures that the integer value of total seconds is properly escaped for SQL formatting.\n- This function is part of a larger framework for converting various Python data types to their MonetDB SQL format as defined by the `mapping` and `mapping_dict` in the complete code context.\"\"\"\n    '\\n    returns timedelta casted to interval seconds\\n    '\n    return 'INTERVAL %s SECOND' % monet_escape(int(data.total_seconds()))",
        "docstring": "Converts a `datetime.timedelta` object to a MonetDB SQL interval representation in seconds.\n\nParameters:\n- data (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string representing the interval in the format \"INTERVAL X SECOND\", where X is the total number of seconds as an integer. This value is generated by calling `total_seconds()` on the timedelta object.\n\nDependencies:\n- The function utilizes `monet_escape`, which ensures that the integer value of total seconds is properly escaped for SQL formatting.\n- This function is part of a larger framework for converting various Python data types to their MonetDB SQL format as defined by the `mapping` and `mapping_dict` in the complete code context.",
        "signature": "def monet_timedelta(data):",
        "type": "Function",
        "class_signature": null
      },
      "convert": {
        "code": "def convert(data):\n    \"\"\"Converts a Python object to its corresponding MonetDB SQL representation based on its type.\n\nParameters:\n- data: An object of any type that may require conversion into a MonetDB SQL format.\n\nReturns:\n- A string representing the MonetDB SQL formatted value of the given data.\n\nThe function utilizes a predefined mapping dictionary (`mapping_dict`) that associates various Python types (like `str`, `int`, `datetime.datetime`, etc.) with their respective conversion functions. If the data type is not directly found in this mapping, it checks for subclasses of the defined types in the `mapping` list. If no compatible type is found, a `ProgrammingError` is raised to indicate unsupported types.\"\"\"\n    '\\n    Return the appropriate convertion function based upon the python type.\\n    '\n    if type(data) in mapping_dict:\n        return mapping_dict[type(data)](data)\n    else:\n        for type_, func in mapping:\n            if issubclass(type(data), type_):\n                return func(data)\n    raise ProgrammingError('type %s not supported as value' % type(data))",
        "docstring": "Converts a Python object to its corresponding MonetDB SQL representation based on its type.\n\nParameters:\n- data: An object of any type that may require conversion into a MonetDB SQL format.\n\nReturns:\n- A string representing the MonetDB SQL formatted value of the given data.\n\nThe function utilizes a predefined mapping dictionary (`mapping_dict`) that associates various Python types (like `str`, `int`, `datetime.datetime`, etc.) with their respective conversion functions. If the data type is not directly found in this mapping, it checks for subclasses of the defined types in the `mapping` list. If no compatible type is found, a `ProgrammingError` is raised to indicate unsupported types.",
        "signature": "def convert(data):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "pymonetdb/sql/monetize.py:convert": {},
    "pymonetdb/sql/monetize.py:monet_date": {},
    "pymonetdb/sql/monetize.py:monet_datetime": {
      "pymonetdb/sql/monetize.py": {
        "_tzaware": {
          "code": "def _tzaware(time_or_datetime):\n    \"\"\"\n    returns True if the time or datetime is timezone aware, False otherwise.\n    \"\"\"\n    return time_or_datetime.utcoffset() is not None",
          "docstring": "returns True if the time or datetime is timezone aware, False otherwise.",
          "signature": "def _tzaware(time_or_datetime):",
          "type": "Function",
          "class_signature": null
        }
      }
    },
    "pymonetdb/sql/monetize.py:monet_escape": {},
    "pymonetdb/sql/monetize.py:monet_time": {
      "pymonetdb/sql/monetize.py": {
        "_tzaware": {
          "code": "def _tzaware(time_or_datetime):\n    \"\"\"\n    returns True if the time or datetime is timezone aware, False otherwise.\n    \"\"\"\n    return time_or_datetime.utcoffset() is not None",
          "docstring": "returns True if the time or datetime is timezone aware, False otherwise.",
          "signature": "def _tzaware(time_or_datetime):",
          "type": "Function",
          "class_signature": null
        }
      }
    },
    "pymonetdb/sql/monetize.py:monet_timedelta": {}
  },
  "PRD": "# PROJECT NAME: pymonetdb-test_monetize\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 pymonetdb/\n    \u2514\u2500\u2500 sql/\n        \u2514\u2500\u2500 monetize.py\n            \u251c\u2500\u2500 convert\n            \u251c\u2500\u2500 monet_date\n            \u251c\u2500\u2500 monet_datetime\n            \u251c\u2500\u2500 monet_escape\n            \u251c\u2500\u2500 monet_time\n            \u2514\u2500\u2500 monet_timedelta\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates seamless data type conversions for Python objects into MonetDB-compatible SQL representations, ensuring alignment with the database's syntax and data handling requirements. It enables the transformation of common Python types, such as strings, dates, times, timestamps with or without time zones, UUIDs, and timedeltas, into their appropriate SQL equivalents and formats. By providing robust type introspection and handling for supported and unsupported data types, the module streamlines the process of preparing Python objects for database queries, reducing developer effort and minimizing errors. This helps bridge the gap between Python applications and the MonetDB SQL engine, enhancing interoperability and simplifying database integration workflows.\n\n## FILE 1: pymonetdb/sql/monetize.py\n\n- FUNCTION NAME: convert\n  - SIGNATURE: def convert(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python object to its corresponding MonetDB SQL representation based on its type.\n\nParameters:\n- data: An object of any type that may require conversion into a MonetDB SQL format.\n\nReturns:\n- A string representing the MonetDB SQL formatted value of the given data.\n\nThe function utilizes a predefined mapping dictionary (`mapping_dict`) that associates various Python types (like `str`, `int`, `datetime.datetime`, etc.) with their respective conversion functions. If the data type is not directly found in this mapping, it checks for subclasses of the defined types in the `mapping` list. If no compatible type is found, a `ProgrammingError` is raised to indicate unsupported types.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_date\n    - pymonetdb/sql/monetize.py:monet_time\n    - pymonetdb/sql/monetize.py:monet_datetime\n    - pymonetdb/sql/monetize.py:monet_timedelta\n    - pymonetdb/sql/monetize.py:monet_escape\n\n- FUNCTION NAME: monet_date\n  - SIGNATURE: def monet_date(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python `date` object into a MonetDB compatible SQL date format.\n\nParameters:\n- data (datetime.date): A date object to be converted.\n\nReturns:\n- str: A string representing the SQL date in the format \"DATE 'YYYY-MM-DD'\".\n\nThe function relies on the `monet_escape` function to ensure that the date is properly escaped for SQL compatibility. It is part of a broader mapping system where various Python types are associated with their corresponding formatting functions for MonetDB. If the input type is not compatible, a ProgrammingError will be raised in the parent `convert` function.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n\n- FUNCTION NAME: monet_time\n  - SIGNATURE: def monet_time(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python `time` object to its appropriate MonetDB SQL format.\n\nParameters:\n- data (datetime.time): A Python time object to be converted.\n\nReturns:\n- str: A string representing the SQL time in either TIMETZ (if the time is timezone aware) or TIME format.\n\nDependencies:\n- Utilizes the `_tzaware` function to check if the provided time object is timezone aware.\n- Uses the `monet_escape` function to safely escape the SQL string and prevent SQL injection.\n\nThis function is part of a larger mapping system that converts various Python types into corresponding MonetDB SQL representations.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n    - pymonetdb/sql/monetize.py:_tzaware\n\n- FUNCTION NAME: monet_datetime\n  - SIGNATURE: def monet_datetime(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python datetime or time object into a MonetDB-compatible timestamp string.\n\nParameters:\n- data (datetime.datetime or datetime.time): A datetime or time object to be converted.\n\nReturns:\n- str: A string representation of the timestamp in MonetDB format. The output will be either in TIMESTAMP or TIMESTAMPTZ format depending on the timezone awareness of the input.\n\nDependencies:\n- Utilizes the helper function `_tzaware` to determine if the input time or datetime object has timezone information. \n- Uses the `monet_escape` function to safely escape the string representation of the datetime.\n\nRaises:\n- ProgrammingError: If the input is neither a datetime nor a time object.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n    - pymonetdb/sql/monetize.py:_tzaware\n\n- FUNCTION NAME: monet_timedelta\n  - SIGNATURE: def monet_timedelta(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a `datetime.timedelta` object to a MonetDB SQL interval representation in seconds.\n\nParameters:\n- data (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string representing the interval in the format \"INTERVAL X SECOND\", where X is the total number of seconds as an integer. This value is generated by calling `total_seconds()` on the timedelta object.\n\nDependencies:\n- The function utilizes `monet_escape`, which ensures that the integer value of total seconds is properly escaped for SQL formatting.\n- This function is part of a larger framework for converting various Python data types to their MonetDB SQL format as defined by the `mapping` and `mapping_dict` in the complete code context.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n\n- FUNCTION NAME: monet_escape\n  - SIGNATURE: def monet_escape(data):\n  - DOCSTRING: \n```python\n\"\"\"\nEscapes a given string for safe inclusion in a MonetDB SQL statement by replacing certain characters. \n\nParameters:\n- data: The input data to be escaped. Can be any object that can be converted to a string.\n\nReturns:\n- A string that represents the escaped version of the input, enclosed in single quotes. Backslashes and single quotes in the input are escaped to prevent SQL injection and ensure proper formatting in SQL queries.\n\nThis function is used in the context of converting various Python data types to their corresponding MonetDB SQL formats, as outlined in the mapping dictionary. It is essential for safely handling string data types in SQL interactions.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:convert\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "pymonetdb/sql/monetize.py": "\"\"\"\nfunctions for converting python objects to monetdb SQL format. If you want\nto add support for a specific type you should add a function as a value to\nthe mapping dict and the datatype as key.\n\"\"\"\nimport datetime\nimport decimal\nimport uuid\nfrom pymonetdb.exceptions import ProgrammingError\n\ndef monet_none(_):\n    \"\"\"\n    returns a NULL string\n    \"\"\"\n    return 'NULL'\n\ndef monet_bool(data):\n    \"\"\"\n    returns \"true\" or \"false\"\n    \"\"\"\n    return ['false', 'true'][bool(data)]\n\ndef monet_bytes(data):\n    \"\"\"\n    converts bytes to string\n    \"\"\"\n    return \"BLOB '%s'\" % data.hex()\n\ndef _tzaware(time_or_datetime):\n    \"\"\"\n    returns True if the time or datetime is timezone aware, False otherwise.\n    \"\"\"\n    return time_or_datetime.utcoffset() is not None\n\ndef monet_unicode(data):\n    return monet_escape(data.encode('utf-8'))\nmapping = [(str, monet_escape), (bytes, monet_bytes), (int, str), (complex, str), (float, str), (uuid.UUID, monet_escape), (decimal.Decimal, str), (datetime.datetime, monet_datetime), (datetime.time, monet_time), (datetime.date, monet_date), (datetime.timedelta, monet_timedelta), (bool, monet_bool), (type(None), monet_none)]\nmapping_dict = dict(mapping)"
  },
  "call_tree": {
    "tests/test_monetize.py:TestMonetize:test_date": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_date": {
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_datetime": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_datetime": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_datetime_tz": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_datetime": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_str_subclass": {
      "tests/test_monetize.py:TestMonetize:StrSubClass": {},
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_escape": {}
      }
    },
    "tests/test_monetize.py:TestMonetize:test_time": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_time": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_time_tz": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_time": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_timedelta": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_timedelta": {
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_unknown_type": {
      "tests/test_monetize.py:TestMonetize:Unknown": {},
      "pymonetdb/sql/monetize.py:convert": {}
    },
    "tests/test_monetize.py:TestMonetize:test_uuids": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_escape": {}
      }
    }
  }
}