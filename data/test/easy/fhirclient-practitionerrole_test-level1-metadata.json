{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-practitionerrole_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/practitionerrole_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import practitionerrole\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass PractitionerRoleTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"PractitionerRole\", js[\"resourceType\"])\n        return practitionerrole.PractitionerRole(js)\n    \n    def testPractitionerRole1(self):\n        inst = self.instantiate_from(\"practitionerrole-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PractitionerRole instance\")\n        self.implPractitionerRole1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PractitionerRole\", js[\"resourceType\"])\n        inst2 = practitionerrole.PractitionerRole(js)\n        self.implPractitionerRole1(inst2)\n    \n    def implPractitionerRole1(self, inst):\n        self.assertTrue(inst.active)\n        self.assertEqual(inst.availabilityExceptions, \"Adam is generally unavailable on public holidays and during the Christmas/New Year break\")\n        self.assertEqual(inst.availableTime[0].availableEndTime.time, FHIRTime(\"16:30:00\").time)\n        self.assertEqual(inst.availableTime[0].availableEndTime.as_json(), \"16:30:00\")\n        self.assertEqual(inst.availableTime[0].availableStartTime.time, FHIRTime(\"09:00:00\").time)\n        self.assertEqual(inst.availableTime[0].availableStartTime.as_json(), \"09:00:00\")\n        self.assertEqual(inst.availableTime[0].daysOfWeek[0], \"mon\")\n        self.assertEqual(inst.availableTime[0].daysOfWeek[1], \"tue\")\n        self.assertEqual(inst.availableTime[0].daysOfWeek[2], \"wed\")\n        self.assertEqual(inst.availableTime[1].availableEndTime.time, FHIRTime(\"12:00:00\").time)\n        self.assertEqual(inst.availableTime[1].availableEndTime.as_json(), \"12:00:00\")\n        self.assertEqual(inst.availableTime[1].availableStartTime.time, FHIRTime(\"09:00:00\").time)\n        self.assertEqual(inst.availableTime[1].availableStartTime.as_json(), \"09:00:00\")\n        self.assertEqual(inst.availableTime[1].daysOfWeek[0], \"thu\")\n        self.assertEqual(inst.availableTime[1].daysOfWeek[1], \"fri\")\n        self.assertEqual(inst.code[0].coding[0].code, \"RP\")\n        self.assertEqual(inst.code[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0286\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.acme.org/practitioners\")\n        self.assertEqual(inst.identifier[0].value, \"23\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.notAvailable[0].description, \"Adam will be on extended leave during May 2017\")\n        self.assertEqual(inst.notAvailable[0].during.end.datetime, FHIRDateTime(\"2017-05-20\").datetime)\n        self.assertEqual(inst.notAvailable[0].during.end.as_json(), \"2017-05-20\")\n        self.assertEqual(inst.notAvailable[0].during.start.datetime, FHIRDateTime(\"2017-05-01\").datetime)\n        self.assertEqual(inst.notAvailable[0].during.start.as_json(), \"2017-05-01\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2012-03-31\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2012-03-31\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2012-01-01\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2012-01-01\")\n        self.assertEqual(inst.specialty[0].coding[0].code, \"408443003\")\n        self.assertEqual(inst.specialty[0].coding[0].display, \"General medical practice\")\n        self.assertEqual(inst.specialty[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].use, \"work\")\n        self.assertEqual(inst.telecom[0].value, \"(03) 5555 6473\")\n        self.assertEqual(inst.telecom[1].system, \"email\")\n        self.assertEqual(inst.telecom[1].use, \"work\")\n        self.assertEqual(inst.telecom[1].value, \"adam.southern@example.org\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/practitionerrole.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/PractitionerRole).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass PractitionerRole(domainresource.DomainResource):\n    \"\"\" Roles/organizations the practitioner is associated with.\n    \n    A specific set of Roles/Locations/specialties/services that a practitioner\n    may perform at an organization for a period of time.\n    \"\"\"\n    \n    resource_type = \"PractitionerRole\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.active = None\n        \"\"\" Whether this practitioner role record is in active use.\n        Type `bool`. \"\"\"\n        \n        self.availabilityExceptions = None\n        \"\"\" Description of availability exceptions.\n        Type `str`. \"\"\"\n        \n        self.availableTime = None\n        \"\"\" Times the Service Site is available.\n        List of `PractitionerRoleAvailableTime` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Roles which this practitioner may perform.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.endpoint = None\n        \"\"\" Technical endpoints providing access to services operated for the\n        practitioner with this role.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.healthcareService = None\n        \"\"\" The list of healthcare services that this worker provides for this\n        role's Organization/Location(s).\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifiers that are specific to a role/location.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.location = None\n        \"\"\" The location(s) at which this practitioner provides care.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.notAvailable = None\n        \"\"\" Not available during this time due to provided reason.\n        List of `PractitionerRoleNotAvailable` items (represented as `dict` in JSON). \"\"\"\n        \n        self.organization = None\n        \"\"\" Organization where the roles are available.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" The period during which the practitioner is authorized to perform\n        in these role(s).\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.practitioner = None\n        \"\"\" Practitioner that is able to provide the defined services for the\n        organization.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.specialty = None\n        \"\"\" Specific specialty of the practitioner.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.telecom = None\n        \"\"\" Contact details that are specific to the role/location/service.\n        List of `ContactPoint` items (represented as `dict` in JSON). \"\"\"\n        \n        super(PractitionerRole, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PractitionerRole, self).elementProperties()\n        js.extend([\n            (\"active\", \"active\", bool, False, None, False),\n            (\"availabilityExceptions\", \"availabilityExceptions\", str, False, None, False),\n            (\"availableTime\", \"availableTime\", PractitionerRoleAvailableTime, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"endpoint\", \"endpoint\", fhirreference.FHIRReference, True, None, False),\n            (\"healthcareService\", \"healthcareService\", fhirreference.FHIRReference, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"location\", \"location\", fhirreference.FHIRReference, True, None, False),\n            (\"notAvailable\", \"notAvailable\", PractitionerRoleNotAvailable, True, None, False),\n            (\"organization\", \"organization\", fhirreference.FHIRReference, False, None, False),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"practitioner\", \"practitioner\", fhirreference.FHIRReference, False, None, False),\n            (\"specialty\", \"specialty\", codeableconcept.CodeableConcept, True, None, False),\n            (\"telecom\", \"telecom\", contactpoint.ContactPoint, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass PractitionerRoleAvailableTime(backboneelement.BackboneElement):\n    \"\"\" Times the Service Site is available.\n    \n    A collection of times the practitioner is available or performing this role\n    at the location and/or healthcareservice.\n    \"\"\"\n    \n    resource_type = \"PractitionerRoleAvailableTime\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allDay = None\n        \"\"\" Always available? e.g. 24 hour service.\n        Type `bool`. \"\"\"\n        \n        self.availableEndTime = None\n        \"\"\" Closing time of day (ignored if allDay = true).\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.availableStartTime = None\n        \"\"\" Opening time of day (ignored if allDay = true).\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.daysOfWeek = None\n        \"\"\" mon | tue | wed | thu | fri | sat | sun.\n        List of `str` items. \"\"\"\n        \n        super(PractitionerRoleAvailableTime, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PractitionerRoleAvailableTime, self).elementProperties()\n        js.extend([\n            (\"allDay\", \"allDay\", bool, False, None, False),\n            (\"availableEndTime\", \"availableEndTime\", fhirtime.FHIRTime, False, None, False),\n            (\"availableStartTime\", \"availableStartTime\", fhirtime.FHIRTime, False, None, False),\n            (\"daysOfWeek\", \"daysOfWeek\", str, True, None, False),\n        ])\n        return js\n\n\nclass PractitionerRoleNotAvailable(backboneelement.BackboneElement):\n    \"\"\" Not available during this time due to provided reason.\n    \n    The practitioner is not available or performing this role during this\n    period of time due to the provided reason.\n    \"\"\"\n    \n    resource_type = \"PractitionerRoleNotAvailable\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Reason presented to the user explaining why time not available.\n        Type `str`. \"\"\"\n        \n        self.during = None\n        \"\"\" Service not available from this date.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(PractitionerRoleNotAvailable, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PractitionerRoleNotAvailable, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, True),\n            (\"during\", \"during\", period.Period, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirtime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR times in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#time\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `time`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `time`: datetime.time representing the JSON value\n    - `date`: backwards-compatibility alias for `time`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.time: Union[datetime.time, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for time\n    _REGEX = re.compile(r\"([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?\")\n    _FIELD = \"time\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_time(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/practitionerrole.py": {
      "PractitionerRole.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a PractitionerRole instance representing the roles and organizations a practitioner is associated with.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance properties. If provided, it should map to the expected attributes of a PractitionerRole.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization, enforcing strict validation of the input.\n\nAttributes:\n- active (bool): Indicates if the practitioner role record is currently in use.\n- availabilityExceptions (str): Text description of any exceptions to the practitioner's availability.\n- availableTime (list of PractitionerRoleAvailableTime): Specifies the times when the service site is available for the role.\n- code (list of CodeableConcept): Defines the specific roles the practitioner may perform.\n- endpoint (list of FHIRReference): Technical endpoints related to services for the practitioner role.\n- healthcareService (list of FHIRReference): Identifies the healthcare services associated with this role.\n- identifier (list of Identifier): Business identifiers specific to the role or location.\n- location (list of FHIRReference): Locations where care is provided by the practitioner.\n- notAvailable (list of PractitionerRoleNotAvailable): Details periods when the practitioner is unavailable.\n- organization (FHIRReference): The organization associating with this role.\n- period (Period): The time period during which the practitioner is authorized for the role.\n- practitioner (FHIRReference): References the practitioner who can provide the services.\n- specialty (list of CodeableConcept): Specific specialties of the practitioner.\n- telecom (list of ContactPoint): Contact details for the role or location.\n\nThis class reflects the FHIR standard and facilitates the creation of well-structured data for healthcare practitioners' roles.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.active = None\n        ' Whether this practitioner role record is in active use.\\n        Type `bool`. '\n        self.availabilityExceptions = None\n        ' Description of availability exceptions.\\n        Type `str`. '\n        self.availableTime = None\n        ' Times the Service Site is available.\\n        List of `PractitionerRoleAvailableTime` items (represented as `dict` in JSON). '\n        self.code = None\n        ' Roles which this practitioner may perform.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.endpoint = None\n        ' Technical endpoints providing access to services operated for the\\n        practitioner with this role.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.healthcareService = None\n        \" The list of healthcare services that this worker provides for this\\n        role's Organization/Location(s).\\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\n        self.identifier = None\n        ' Business Identifiers that are specific to a role/location.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.location = None\n        ' The location(s) at which this practitioner provides care.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.notAvailable = None\n        ' Not available during this time due to provided reason.\\n        List of `PractitionerRoleNotAvailable` items (represented as `dict` in JSON). '\n        self.organization = None\n        ' Organization where the roles are available.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.period = None\n        ' The period during which the practitioner is authorized to perform\\n        in these role(s).\\n        Type `Period` (represented as `dict` in JSON). '\n        self.practitioner = None\n        ' Practitioner that is able to provide the defined services for the\\n        organization.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.specialty = None\n        ' Specific specialty of the practitioner.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.telecom = None\n        ' Contact details that are specific to the role/location/service.\\n        List of `ContactPoint` items (represented as `dict` in JSON). '\n        super(PractitionerRole, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a PractitionerRole instance representing the roles and organizations a practitioner is associated with.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance properties. If provided, it should map to the expected attributes of a PractitionerRole.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization, enforcing strict validation of the input.\n\nAttributes:\n- active (bool): Indicates if the practitioner role record is currently in use.\n- availabilityExceptions (str): Text description of any exceptions to the practitioner's availability.\n- availableTime (list of PractitionerRoleAvailableTime): Specifies the times when the service site is available for the role.\n- code (list of CodeableConcept): Defines the specific roles the practitioner may perform.\n- endpoint (list of FHIRReference): Technical endpoints related to services for the practitioner role.\n- healthcareService (list of FHIRReference): Identifies the healthcare services associated with this role.\n- identifier (list of Identifier): Business identifiers specific to the role or location.\n- location (list of FHIRReference): Locations where care is provided by the practitioner.\n- notAvailable (list of PractitionerRoleNotAvailable): Details periods when the practitioner is unavailable.\n- organization (FHIRReference): The organization associating with this role.\n- period (Period): The time period during which the practitioner is authorized for the role.\n- practitioner (FHIRReference): References the practitioner who can provide the services.\n- specialty (list of CodeableConcept): Specific specialties of the practitioner.\n- telecom (list of ContactPoint): Contact details for the role or location.\n\nThis class reflects the FHIR standard and facilitates the creation of well-structured data for healthcare practitioners' roles.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class PractitionerRole(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the original JSON value (`origval`) is available, it will be returned; otherwise, it will provide the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated by the `date` property, which converts the stored date to a standardized format. This method does not take any parameters and returns either a string (if available) or `None` (if no date was provided during initialization).\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the original JSON value (`origval`) is available, it will be returned; otherwise, it will provide the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated by the `date` property, which converts the stored date to a standardized format. This method does not take any parameters and returns either a string (if available) or `None` (if no date was provided during initialization).",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirtime.py": {
      "FHIRTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes an instance of the FHIRTime class, which is a convenience class for handling FHIR (Fast Healthcare Interoperability Resources) time fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR time value in ISO 8601 format. If None, the instance is initialized with no time value.\n\nAttributes:\n- time (Union[datetime.time, None]): A Python datetime.time object representing the parsed time from the provided jsonval, initialized to None if jsonval is not provided.\n\nThis constructor also calls the parent class's (FHIRDate) constructor to handle the JSON parsing and validation.\n\nDependencies:\n- FHIRDate: The superclass provides methods for JSON parsing and deals with the underlying representation of date and time values.\"\"\"\n        self.time: Union[datetime.time, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes an instance of the FHIRTime class, which is a convenience class for handling FHIR (Fast Healthcare Interoperability Resources) time fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR time value in ISO 8601 format. If None, the instance is initialized with no time value.\n\nAttributes:\n- time (Union[datetime.time, None]): A Python datetime.time object representing the parsed time from the provided jsonval, initialized to None if jsonval is not provided.\n\nThis constructor also calls the parent class's (FHIRDate) constructor to handle the JSON parsing and validation.\n\nDependencies:\n- FHIRDate: The superclass provides methods for JSON parsing and deals with the underlying representation of date and time values.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance with an optional JSON value.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format to initialize the instance. Defaults to None.\n\nThis constructor initializes the `datetime` attribute as None and calls the parent class's initializer (FHIRDate) to handle the JSON value. The class inherits from FHIRDate for backward compatibility, retaining the ability for users to check instance types using isinstance. The `_from_string` method, defined later in the class, utilizes the `_parse_datetime` method from the FHIRDate class to interpret the `jsonval`.\n\nDependencies:\n- `datetime`: Imported from the standard library to manage the datetime representation.\n- `FHIRDate`: The superclass which implements methods for handling FHIR-compatible date formats.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance with an optional JSON value.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format to initialize the instance. Defaults to None.\n\nThis constructor initializes the `datetime` attribute as None and calls the parent class's initializer (FHIRDate) to handle the JSON value. The class inherits from FHIRDate for backward compatibility, retaining the ability for users to check instance types using isinstance. The `_from_string` method, defined later in the class, utilizes the `_parse_datetime` method from the FHIRDate class to interpret the `jsonval`.\n\nDependencies:\n- `datetime`: Imported from the standard library to manage the datetime representation.\n- `FHIRDate`: The superclass which implements methods for handling FHIR-compatible date formats.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIR resource instance to a JSON-serializable dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` indicating the type of the FHIR resource. The method packages the resource data into a format suitable for JSON serialization, ensuring compatibility with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method to build the initial JSON representation, using `super(FHIRAbstractResource, self).as_json()`.\n    - The `resource_type` attribute, which is class-level constant, indicates the type of the FHIR resource and is included as part of the returned JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIR resource instance to a JSON-serializable dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` indicating the type of the FHIR resource. The method packages the resource data into a format suitable for JSON serialization, ensuring compatibility with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method to build the initial JSON representation, using `super(FHIRAbstractResource, self).as_json()`.\n    - The `resource_type` attribute, which is class-level constant, indicates the type of the FHIR resource and is included as part of the returned JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/practitionerrole.py:PractitionerRole:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirtime.py:FHIRTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/practitionerrole_test.py:PractitionerRoleTests:testPractitionerRole1": {
      "tests/models/practitionerrole_test.py:PractitionerRoleTests:instantiate_from": {
        "fhirclient/models/practitionerrole.py:PractitionerRole:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/practitionerrole.py:PractitionerRole:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/practitionerrole_test.py:PractitionerRoleTests:implPractitionerRole1": {
        "fhirclient/models/fhirtime.py:FHIRTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirtime.py:FHIRTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_time": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/practitionerrole.py:PractitionerRole:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/practitionerrole.py:PractitionerRole:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/practitionerrole.py:PractitionerRole:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/practitionerrole_test.py:PractitionerRoleTests:instantiate_from": {
      "fhirclient/models/practitionerrole.py:PractitionerRole:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/practitionerrole.py:PractitionerRole:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-practitionerrole_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u251c\u2500\u2500 fhirtime.py\n        \u2502   \u2514\u2500\u2500 FHIRTime.__init__\n        \u2514\u2500\u2500 practitionerrole.py\n            \u2514\u2500\u2500 PractitionerRole.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe PractitionerRole module serves as a validator and serializer for healthcare provider roles within the FHIR (Fast Healthcare Interoperability Resources) framework. This module enables the instantiation and validation of PractitionerRole resources, ensuring compliance with FHIR standards by verifying resource attributes such as availability, specialties, identifiers, contact information, and active status. Additionally, it provides functionality to serialize and deserialize PractitionerRole data to and from JSON format, supporting seamless data exchange in healthcare applications. By automating the validation and serialization processes, the module facilitates accurate and standardized representation of healthcare practitioners' roles, reducing the risk of errors and enhancing interoperability between systems.\n\n## FILE 1: fhirclient/models/practitionerrole.py\n\n- CLASS METHOD: PractitionerRole.__init__\n  - CLASS SIGNATURE: class PractitionerRole(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a PractitionerRole instance representing the roles and organizations a practitioner is associated with.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance properties. If provided, it should map to the expected attributes of a PractitionerRole.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization, enforcing strict validation of the input.\n\nAttributes:\n- active (bool): Indicates if the practitioner role record is currently in use.\n- availabilityExceptions (str): Text description of any exceptions to the practitioner's availability.\n- availableTime (list of PractitionerRoleAvailableTime): Specifies the times when the service site is available for the role.\n- code (list of CodeableConcept): Defines the specific roles the practitioner may perform.\n- endpoint (list of FHIRReference): Technical endpoints related to services for the practitioner role.\n- healthcareService (list of FHIRReference): Identifies the healthcare services associated with this role.\n- identifier (list of Identifier): Business identifiers specific to the role or location.\n- location (list of FHIRReference): Locations where care is provided by the practitioner.\n- notAvailable (list of PractitionerRoleNotAvailable): Details periods when the practitioner is unavailable.\n- organization (FHIRReference): The organization associating with this role.\n- period (Period): The time period during which the practitioner is authorized for the role.\n- practitioner (FHIRReference): References the practitioner who can provide the services.\n- specialty (list of CodeableConcept): Specific specialties of the practitioner.\n- telecom (list of ContactPoint): Contact details for the role or location.\n\nThis class reflects the FHIR standard and facilitates the creation of well-structured data for healthcare practitioners' roles.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the original JSON value (`origval`) is available, it will be returned; otherwise, it will provide the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated by the `date` property, which converts the stored date to a standardized format. This method does not take any parameters and returns either a string (if available) or `None` (if no date was provided during initialization).\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirtime.py\n\n- CLASS METHOD: FHIRTime.__init__\n  - CLASS SIGNATURE: class FHIRTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRTime class, which is a convenience class for handling FHIR (Fast Healthcare Interoperability Resources) time fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR time value in ISO 8601 format. If None, the instance is initialized with no time value.\n\nAttributes:\n- time (Union[datetime.time, None]): A Python datetime.time object representing the parsed time from the provided jsonval, initialized to None if jsonval is not provided.\n\nThis constructor also calls the parent class's (FHIRDate) constructor to handle the JSON parsing and validation.\n\nDependencies:\n- FHIRDate: The superclass provides methods for JSON parsing and deals with the underlying representation of date and time values.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance with an optional JSON value.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format to initialize the instance. Defaults to None.\n\nThis constructor initializes the `datetime` attribute as None and calls the parent class's initializer (FHIRDate) to handle the JSON value. The class inherits from FHIRDate for backward compatibility, retaining the ability for users to check instance types using isinstance. The `_from_string` method, defined later in the class, utilizes the `_parse_datetime` method from the FHIRDate class to interpret the `jsonval`.\n\nDependencies:\n- `datetime`: Imported from the standard library to manage the datetime representation.\n- `FHIRDate`: The superclass which implements methods for handling FHIR-compatible date formats.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIR resource instance to a JSON-serializable dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` indicating the type of the FHIR resource. The method packages the resource data into a format suitable for JSON serialization, ensuring compatibility with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method to build the initial JSON representation, using `super(FHIRAbstractResource, self).as_json()`.\n    - The `resource_type` attribute, which is class-level constant, indicates the type of the FHIR resource and is included as part of the returned JSON.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/practitionerrole.py": "from . import domainresource\n\nclass PractitionerRole(domainresource.DomainResource):\n    \"\"\" Roles/organizations the practitioner is associated with.\n    \n    A specific set of Roles/Locations/specialties/services that a practitioner\n    may perform at an organization for a period of time.\n    \"\"\"\n    resource_type = 'PractitionerRole'\n\n    def elementProperties(self):\n        js = super(PractitionerRole, self).elementProperties()\n        js.extend([('active', 'active', bool, False, None, False), ('availabilityExceptions', 'availabilityExceptions', str, False, None, False), ('availableTime', 'availableTime', PractitionerRoleAvailableTime, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('endpoint', 'endpoint', fhirreference.FHIRReference, True, None, False), ('healthcareService', 'healthcareService', fhirreference.FHIRReference, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('location', 'location', fhirreference.FHIRReference, True, None, False), ('notAvailable', 'notAvailable', PractitionerRoleNotAvailable, True, None, False), ('organization', 'organization', fhirreference.FHIRReference, False, None, False), ('period', 'period', period.Period, False, None, False), ('practitioner', 'practitioner', fhirreference.FHIRReference, False, None, False), ('specialty', 'specialty', codeableconcept.CodeableConcept, True, None, False), ('telecom', 'telecom', contactpoint.ContactPoint, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass PractitionerRoleAvailableTime(backboneelement.BackboneElement):\n    \"\"\" Times the Service Site is available.\n    \n    A collection of times the practitioner is available or performing this role\n    at the location and/or healthcareservice.\n    \"\"\"\n    resource_type = 'PractitionerRoleAvailableTime'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.allDay = None\n        ' Always available? e.g. 24 hour service.\\n        Type `bool`. '\n        self.availableEndTime = None\n        ' Closing time of day (ignored if allDay = true).\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.availableStartTime = None\n        ' Opening time of day (ignored if allDay = true).\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.daysOfWeek = None\n        ' mon | tue | wed | thu | fri | sat | sun.\\n        List of `str` items. '\n        super(PractitionerRoleAvailableTime, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PractitionerRoleAvailableTime, self).elementProperties()\n        js.extend([('allDay', 'allDay', bool, False, None, False), ('availableEndTime', 'availableEndTime', fhirtime.FHIRTime, False, None, False), ('availableStartTime', 'availableStartTime', fhirtime.FHIRTime, False, None, False), ('daysOfWeek', 'daysOfWeek', str, True, None, False)])\n        return js\n\nclass PractitionerRoleNotAvailable(backboneelement.BackboneElement):\n    \"\"\" Not available during this time due to provided reason.\n    \n    The practitioner is not available or performing this role during this\n    period of time due to the provided reason.\n    \"\"\"\n    resource_type = 'PractitionerRoleNotAvailable'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Reason presented to the user explaining why time not available.\\n        Type `str`. '\n        self.during = None\n        ' Service not available from this date.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(PractitionerRoleNotAvailable, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PractitionerRoleNotAvailable, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, True), ('during', 'during', period.Period, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirtime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR times in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#time\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `time`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `time`: datetime.time representing the JSON value\n    - `date`: backwards-compatibility alias for `time`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?')\n    _FIELD = 'time'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_time(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}