{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_setmergeopts",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_setmergeopts.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.setmergeopts import SetMergeOpts\n\n\nclass Test_merger_enums_setmergeopts():\n\t\"\"\"Tests for the SetMergeOpts enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert SetMergeOpts.get_names() == [\n\t\t\t\"LEFT\",\n\t\t\t\"RIGHT\",\n\t\t\t\"UNIQUE\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert SetMergeOpts.get_choices() == [\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t\t\"unique\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"LEFT\", SetMergeOpts.LEFT),\n\t\t(\"RIGHT\", SetMergeOpts.RIGHT),\n\t\t(\"UNIQUE\", SetMergeOpts.UNIQUE),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == SetMergeOpts.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tSetMergeOpts.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/setmergeopts.py": "\"\"\"\nImplements the SetMergeOpts enumeration.\n\nCopyright 2021 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass SetMergeOpts(Enum):\n    \"\"\"\n    Supported Set Merge Options.\n\n    Options include:\n\n    `LEFT`\n        LHS Sets are not overwritten/appended by RHS Sets (no merge).\n\n    `RIGHT`\n        RHS Sets fully replace LHS Sets (no merge).\n\n    `UNIQUE`\n        Only RHS Set elements not alread in LHS Sets are appended to LHS Sets\n        (merge).\n    \"\"\"\n\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in SetMergeOpts]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in SetMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"SetMergeOpts\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (SetMergeOpts) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in SetMergeOpts.get_names():\n            return SetMergeOpts[check]\n        raise NameError(\n            \"SetMergeOpts has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/setmergeopts.py": {
      "SetMergeOpts.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all upper-cased names for the SetMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members of the SetMergeOpts class, converting each name to upper case. It utilizes the Enum class's inherent iteration capabilities to access each member through the `entry.name` attribute.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of strings containing the upper-cased names of the enumeration members.\n\nRaises:  \n    N/A\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in SetMergeOpts]",
        "docstring": "Get all upper-cased names for the SetMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members of the SetMergeOpts class, converting each name to upper case. It utilizes the Enum class's inherent iteration capabilities to access each member through the `entry.name` attribute.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of strings containing the upper-cased names of the enumeration members.\n\nRaises:  \n    N/A",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class SetMergeOpts(Enum):"
      },
      "SetMergeOpts.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Get all entry names of the SetMergeOpts enumeration in lower-case format.\n\nThis static method retrieves and returns a list of lower-cased names corresponding to the enumeration members. The function first calls SetMergeOpts.get_names() to obtain the upper-case names of all enumeration entries, converts them to lower-case, removes duplicates, and sorts the result.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of unique lower-case names representing the enumeration entries.\n\nRaises:  \n    N/A\n\nDependencies:  \n    This method relies on the SetMergeOpts.get_names() method to fetch the enumeration names. The unique names are derived from the enumeration values defined within the SetMergeOpts class.\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in SetMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Get all entry names of the SetMergeOpts enumeration in lower-case format.\n\nThis static method retrieves and returns a list of lower-cased names corresponding to the enumeration members. The function first calls SetMergeOpts.get_names() to obtain the upper-case names of all enumeration entries, converts them to lower-case, removes duplicates, and sorts the result.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of unique lower-case names representing the enumeration entries.\n\nRaises:  \n    N/A\n\nDependencies:  \n    This method relies on the SetMergeOpts.get_names() method to fetch the enumeration names. The unique names are derived from the enumeration values defined within the SetMergeOpts class.",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class SetMergeOpts(Enum):"
      },
      "SetMergeOpts.from_str": {
        "code": "    def from_str(name: str) -> 'SetMergeOpts':\n        \"\"\"Convert a string representation of a SetMergeOpts enumeration value to its corresponding enumeration instance.\n\nParameters:\n    name (str): The name of the enumeration value to be converted, which should match one of the defined entries in the SetMergeOpts enumeration.\n\nReturns:\n    SetMergeOpts: The corresponding enumeration instance of SetMergeOpts based on the provided name.\n\nRaises:\n    NameError: If the provided name does not match any enumeration values in SetMergeOpts.\n\nThis method interacts with the `get_names` static method to validate the input string against the existing enumeration names. The input string is first converted to uppercase to ensure case-insensitive matching, facilitating robust string conversion to enumeration values.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (SetMergeOpts) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in SetMergeOpts.get_names():\n            return SetMergeOpts[check]\n        raise NameError('SetMergeOpts has no such item:  {}'.format(name))",
        "docstring": "Convert a string representation of a SetMergeOpts enumeration value to its corresponding enumeration instance.\n\nParameters:\n    name (str): The name of the enumeration value to be converted, which should match one of the defined entries in the SetMergeOpts enumeration.\n\nReturns:\n    SetMergeOpts: The corresponding enumeration instance of SetMergeOpts based on the provided name.\n\nRaises:\n    NameError: If the provided name does not match any enumeration values in SetMergeOpts.\n\nThis method interacts with the `get_names` static method to validate the input string against the existing enumeration names. The input string is first converted to uppercase to ensure case-insensitive matching, facilitating robust string conversion to enumeration values.",
        "signature": "def from_str(name: str) -> 'SetMergeOpts':",
        "type": "Method",
        "class_signature": "class SetMergeOpts(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_choices": {},
    "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_setmergeopts\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 setmergeopts.py\n                \u251c\u2500\u2500 SetMergeOpts.from_str\n                \u251c\u2500\u2500 SetMergeOpts.get_choices\n                \u2514\u2500\u2500 SetMergeOpts.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to test the functionality of the `SetMergeOpts` enumeration, specifically its ability to handle and manage predefined options for set merging operations. It validates the enumeration's core features, such as retrieving the names and choices of available options and converting string inputs into corresponding enumeration values. By ensuring consistent behavior and accurate mappings between input strings and enumeration members, the module facilitates reliable usage of the `SetMergeOpts` enumeration in applications that perform set merge operations. This helps developers avoid errors and ensures the integrity of configuration or merge-related workflows where these options are utilized.\n\n## FILE 1: yamlpath/merger/enums/setmergeopts.py\n\n- CLASS METHOD: SetMergeOpts.get_names\n  - CLASS SIGNATURE: class SetMergeOpts(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all upper-cased names for the SetMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members of the SetMergeOpts class, converting each name to upper case. It utilizes the Enum class's inherent iteration capabilities to access each member through the `entry.name` attribute.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of strings containing the upper-cased names of the enumeration members.\n\nRaises:  \n    N/A\n\"\"\"\n```\n\n- CLASS METHOD: SetMergeOpts.from_str\n  - CLASS SIGNATURE: class SetMergeOpts(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'SetMergeOpts':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string representation of a SetMergeOpts enumeration value to its corresponding enumeration instance.\n\nParameters:\n    name (str): The name of the enumeration value to be converted, which should match one of the defined entries in the SetMergeOpts enumeration.\n\nReturns:\n    SetMergeOpts: The corresponding enumeration instance of SetMergeOpts based on the provided name.\n\nRaises:\n    NameError: If the provided name does not match any enumeration values in SetMergeOpts.\n\nThis method interacts with the `get_names` static method to validate the input string against the existing enumeration names. The input string is first converted to uppercase to ensure case-insensitive matching, facilitating robust string conversion to enumeration values.\n\"\"\"\n```\n\n- CLASS METHOD: SetMergeOpts.get_choices\n  - CLASS SIGNATURE: class SetMergeOpts(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names of the SetMergeOpts enumeration in lower-case format.\n\nThis static method retrieves and returns a list of lower-cased names corresponding to the enumeration members. The function first calls SetMergeOpts.get_names() to obtain the upper-case names of all enumeration entries, converts them to lower-case, removes duplicates, and sorts the result.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of unique lower-case names representing the enumeration entries.\n\nRaises:  \n    N/A\n\nDependencies:  \n    This method relies on the SetMergeOpts.get_names() method to fetch the enumeration names. The unique names are derived from the enumeration values defined within the SetMergeOpts class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/setmergeopts.py": "\"\"\"\nImplements the SetMergeOpts enumeration.\n\nCopyright 2021 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass SetMergeOpts(Enum):\n    \"\"\"\n    Supported Set Merge Options.\n\n    Options include:\n\n    `LEFT`\n        LHS Sets are not overwritten/appended by RHS Sets (no merge).\n\n    `RIGHT`\n        RHS Sets fully replace LHS Sets (no merge).\n\n    `UNIQUE`\n        Only RHS Set elements not alread in LHS Sets are appended to LHS Sets\n        (merge).\n    \"\"\"\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_setmergeopts.py:Test_merger_enums_setmergeopts:test_get_names": {
      "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_names": {}
    },
    "tests/test_merger_enums_setmergeopts.py:Test_merger_enums_setmergeopts:test_get_choices": {
      "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_choices": {
        "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_setmergeopts.py:Test_merger_enums_setmergeopts:test_from_str": {
      "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:from_str": {
        "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_setmergeopts.py:Test_merger_enums_setmergeopts:test_from_str_nameerror": {
      "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:from_str": {
        "yamlpath/merger/enums/setmergeopts.py:SetMergeOpts:get_names": {}
      }
    }
  }
}