{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-messageheader_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/messageheader_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import messageheader\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MessageHeaderTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MessageHeader\", js[\"resourceType\"])\n        return messageheader.MessageHeader(js)\n    \n    def testMessageHeader1(self):\n        inst = self.instantiate_from(\"messageheader-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MessageHeader instance\")\n        self.implMessageHeader1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MessageHeader\", js[\"resourceType\"])\n        inst2 = messageheader.MessageHeader(js)\n        self.implMessageHeader1(inst2)\n    \n    def implMessageHeader1(self, inst):\n        self.assertEqual(inst.definition, \"http:////acme.com/ehr/fhir/messagedefinition/patientrequest\")\n        self.assertEqual(inst.destination[0].endpoint, \"llp:10.11.12.14:5432\")\n        self.assertEqual(inst.destination[0].name, \"Acme Message Gateway\")\n        self.assertEqual(inst.eventCoding.code, \"admin-notify\")\n        self.assertEqual(inst.eventCoding.system, \"http://example.org/fhir/message-events\")\n        self.assertEqual(inst.id, \"1cbdfb97-5859-48a4-8301-d54eab818d68\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.reason.coding[0].code, \"admit\")\n        self.assertEqual(inst.reason.coding[0].system, \"http://terminology.hl7.org/CodeSystem/message-reasons-encounter\")\n        self.assertEqual(inst.response.code, \"ok\")\n        self.assertEqual(inst.response.identifier, \"5015fe84-8e76-4526-89d8-44b322e8d4fb\")\n        self.assertEqual(inst.source.contact.system, \"phone\")\n        self.assertEqual(inst.source.contact.value, \"+1 (555) 123 4567\")\n        self.assertEqual(inst.source.endpoint, \"llp:10.11.12.13:5432\")\n        self.assertEqual(inst.source.name, \"Acme Central Patient Registry\")\n        self.assertEqual(inst.source.software, \"FooBar Patient Manager\")\n        self.assertEqual(inst.source.version, \"3.1.45.AABB\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/messageheader.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MessageHeader).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MessageHeader(domainresource.DomainResource):\n    \"\"\" A resource that describes a message that is exchanged between systems.\n    \n    The header for a message exchange that is either requesting or responding\n    to an action.  The reference(s) that are the subject of the action as well\n    as other information related to the action are typically transmitted in a\n    bundle in which the MessageHeader resource instance is the first resource\n    in the bundle.\n    \"\"\"\n    \n    resource_type = \"MessageHeader\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.author = None\n        \"\"\" The source of the decision.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.definition = None\n        \"\"\" Link to the definition for this message.\n        Type `str`. \"\"\"\n        \n        self.destination = None\n        \"\"\" Message destination application(s).\n        List of `MessageHeaderDestination` items (represented as `dict` in JSON). \"\"\"\n        \n        self.enterer = None\n        \"\"\" The source of the data entry.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.eventCoding = None\n        \"\"\" Code for the event this message represents or link to event\n        definition.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.eventUri = None\n        \"\"\" Code for the event this message represents or link to event\n        definition.\n        Type `str`. \"\"\"\n        \n        self.focus = None\n        \"\"\" The actual content of the message.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Cause of event.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.response = None\n        \"\"\" If this is a reply to prior message.\n        Type `MessageHeaderResponse` (represented as `dict` in JSON). \"\"\"\n        \n        self.responsible = None\n        \"\"\" Final responsibility for event.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.sender = None\n        \"\"\" Real world sender of the message.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.source = None\n        \"\"\" Message source application.\n        Type `MessageHeaderSource` (represented as `dict` in JSON). \"\"\"\n        \n        super(MessageHeader, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageHeader, self).elementProperties()\n        js.extend([\n            (\"author\", \"author\", fhirreference.FHIRReference, False, None, False),\n            (\"definition\", \"definition\", str, False, None, False),\n            (\"destination\", \"destination\", MessageHeaderDestination, True, None, False),\n            (\"enterer\", \"enterer\", fhirreference.FHIRReference, False, None, False),\n            (\"eventCoding\", \"eventCoding\", coding.Coding, False, \"event\", True),\n            (\"eventUri\", \"eventUri\", str, False, \"event\", True),\n            (\"focus\", \"focus\", fhirreference.FHIRReference, True, None, False),\n            (\"reason\", \"reason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"response\", \"response\", MessageHeaderResponse, False, None, False),\n            (\"responsible\", \"responsible\", fhirreference.FHIRReference, False, None, False),\n            (\"sender\", \"sender\", fhirreference.FHIRReference, False, None, False),\n            (\"source\", \"source\", MessageHeaderSource, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MessageHeaderDestination(backboneelement.BackboneElement):\n    \"\"\" Message destination application(s).\n    \n    The destination application which the message is intended for.\n    \"\"\"\n    \n    resource_type = \"MessageHeaderDestination\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.endpoint = None\n        \"\"\" Actual destination address or id.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name of system.\n        Type `str`. \"\"\"\n        \n        self.receiver = None\n        \"\"\" Intended \"real-world\" recipient for the data.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" Particular delivery destination within the destination.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(MessageHeaderDestination, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageHeaderDestination, self).elementProperties()\n        js.extend([\n            (\"endpoint\", \"endpoint\", str, False, None, True),\n            (\"name\", \"name\", str, False, None, False),\n            (\"receiver\", \"receiver\", fhirreference.FHIRReference, False, None, False),\n            (\"target\", \"target\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass MessageHeaderResponse(backboneelement.BackboneElement):\n    \"\"\" If this is a reply to prior message.\n    \n    Information about the message that this message is a response to.  Only\n    present if this message is a response.\n    \"\"\"\n    \n    resource_type = \"MessageHeaderResponse\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" ok | transient-error | fatal-error.\n        Type `str`. \"\"\"\n        \n        self.details = None\n        \"\"\" Specific list of hints/warnings/errors.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Id of original message.\n        Type `str`. \"\"\"\n        \n        super(MessageHeaderResponse, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageHeaderResponse, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"details\", \"details\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", str, False, None, True),\n        ])\n        return js\n\n\nclass MessageHeaderSource(backboneelement.BackboneElement):\n    \"\"\" Message source application.\n    \n    The source application from which this message originated.\n    \"\"\"\n    \n    resource_type = \"MessageHeaderSource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contact = None\n        \"\"\" Human contact for problems.\n        Type `ContactPoint` (represented as `dict` in JSON). \"\"\"\n        \n        self.endpoint = None\n        \"\"\" Actual message source address or id.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name of system.\n        Type `str`. \"\"\"\n        \n        self.software = None\n        \"\"\" Name of software running the system.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" Version of software running.\n        Type `str`. \"\"\"\n        \n        super(MessageHeaderSource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageHeaderSource, self).elementProperties()\n        js.extend([\n            (\"contact\", \"contact\", contactpoint.ContactPoint, False, None, False),\n            (\"endpoint\", \"endpoint\", str, False, None, True),\n            (\"name\", \"name\", str, False, None, False),\n            (\"software\", \"software\", str, False, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactpoint\nfrom . import fhirreference\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/messageheader.py": {
      "MessageHeader.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MessageHeader resource instance representing a message exchanged between systems.\n\nThis constructor initializes various properties of the MessageHeader resource, including details about the message's sender, destination, event, and any associated content. It raises a FHIRValidationError if any provided values are invalid when `strict` is set to True.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): When True, raises a TypeError for invalid variables. If False, allows flexibility in the initialization.\n\nAttributes:\n- author: The source of the decision as a `FHIRReference`.\n- definition: A string linking to the message's definition.\n- destination: A list of `MessageHeaderDestination` representing the message's destination applications.\n- enterer: The source of the data entry as a `FHIRReference`.\n- eventCoding: A `Coding` instance for the event this message represents or links to its definition.\n- eventUri: A string representing the event's URI.\n- focus: A list of `FHIRReference` representing the message's content.\n- reason: The cause of the event as a `CodeableConcept`.\n- response: A `MessageHeaderResponse` if this message replies to a previous one.\n- responsible: The final responsible entity for the event as a `FHIRReference`.\n- sender: The real-world sender of the message as a `FHIRReference`.\n- source: A `MessageHeaderSource` instance representing the application that sent the message.\n\nThis class extends `domainresource.DomainResource`, inheriting its methods and properties for a FHIR-compatible representation of the resource.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.author = None\n        ' The source of the decision.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.definition = None\n        ' Link to the definition for this message.\\n        Type `str`. '\n        self.destination = None\n        ' Message destination application(s).\\n        List of `MessageHeaderDestination` items (represented as `dict` in JSON). '\n        self.enterer = None\n        ' The source of the data entry.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.eventCoding = None\n        ' Code for the event this message represents or link to event\\n        definition.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.eventUri = None\n        ' Code for the event this message represents or link to event\\n        definition.\\n        Type `str`. '\n        self.focus = None\n        ' The actual content of the message.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.reason = None\n        ' Cause of event.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.response = None\n        ' If this is a reply to prior message.\\n        Type `MessageHeaderResponse` (represented as `dict` in JSON). '\n        self.responsible = None\n        ' Final responsibility for event.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.sender = None\n        ' Real world sender of the message.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.source = None\n        ' Message source application.\\n        Type `MessageHeaderSource` (represented as `dict` in JSON). '\n        super(MessageHeader, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MessageHeader resource instance representing a message exchanged between systems.\n\nThis constructor initializes various properties of the MessageHeader resource, including details about the message's sender, destination, event, and any associated content. It raises a FHIRValidationError if any provided values are invalid when `strict` is set to True.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): When True, raises a TypeError for invalid variables. If False, allows flexibility in the initialization.\n\nAttributes:\n- author: The source of the decision as a `FHIRReference`.\n- definition: A string linking to the message's definition.\n- destination: A list of `MessageHeaderDestination` representing the message's destination applications.\n- enterer: The source of the data entry as a `FHIRReference`.\n- eventCoding: A `Coding` instance for the event this message represents or links to its definition.\n- eventUri: A string representing the event's URI.\n- focus: A list of `FHIRReference` representing the message's content.\n- reason: The cause of the event as a `CodeableConcept`.\n- response: A `MessageHeaderResponse` if this message replies to a previous one.\n- responsible: The final responsible entity for the event as a `FHIRReference`.\n- sender: The real-world sender of the message as a `FHIRReference`.\n- source: A `MessageHeaderSource` instance representing the application that sent the message.\n\nThis class extends `domainresource.DomainResource`, inheriting its methods and properties for a FHIR-compatible representation of the resource.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MessageHeader(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON-serializable dictionary.\n\nThis method first calls the `as_json()` method of its superclass (`FHIRAbstractBase`) to obtain the base JSON representation, then adds the `resourceType` key, setting its value to the current class's `resource_type`. This ensures that the resulting JSON representation is compliant with FHIR resource specifications by including the required `resourceType` field.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance including the `resourceType`.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the superclass's method to get a base JSON representation.\n    - `self.resource_type`: A class-level constant that defines the type of resource the instance represents, ensuring the JSON output is correctly labeled.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON-serializable dictionary.\n\nThis method first calls the `as_json()` method of its superclass (`FHIRAbstractBase`) to obtain the base JSON representation, then adds the `resourceType` key, setting its value to the current class's `resource_type`. This ensures that the resulting JSON representation is compliant with FHIR resource specifications by including the required `resourceType` field.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance including the `resourceType`.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the superclass's method to get a base JSON representation.\n    - `self.resource_type`: A class-level constant that defines the type of resource the instance represents, ensuring the JSON output is correctly labeled.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/messageheader.py:MessageHeader:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/messageheader_test.py:MessageHeaderTests:testMessageHeader1": {
      "tests/models/messageheader_test.py:MessageHeaderTests:instantiate_from": {
        "fhirclient/models/messageheader.py:MessageHeader:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/messageheader.py:MessageHeader:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/messageheader_test.py:MessageHeaderTests:implMessageHeader1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/messageheader.py:MessageHeader:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/messageheader.py:MessageHeader:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/messageheader.py:MessageHeader:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/messageheader_test.py:MessageHeaderTests:instantiate_from": {
      "fhirclient/models/messageheader.py:MessageHeader:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/messageheader.py:MessageHeader:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-messageheader_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 messageheader.py\n            \u2514\u2500\u2500 MessageHeader.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and testing of FHIR-compliant `MessageHeader` resources, a fundamental component of the HL7 FHIR standard used for healthcare interoperability. It ensures accurate instantiation, serialization, and deserialization of `MessageHeader` data, verifying compliance with predefined FHIR specifications. By validating key attributes such as event coding, source, destination, and metadata, it supports consistent and reliable message exchange in healthcare systems. This module addresses the critical need for streamlining the development and testing of FHIR-based integrations, enabling developers to ensure robustness and correctness in the communication workflows between healthcare applications.\n\n## FILE 1: fhirclient/models/messageheader.py\n\n- CLASS METHOD: MessageHeader.__init__\n  - CLASS SIGNATURE: class MessageHeader(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MessageHeader resource instance representing a message exchanged between systems.\n\nThis constructor initializes various properties of the MessageHeader resource, including details about the message's sender, destination, event, and any associated content. It raises a FHIRValidationError if any provided values are invalid when `strict` is set to True.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): When True, raises a TypeError for invalid variables. If False, allows flexibility in the initialization.\n\nAttributes:\n- author: The source of the decision as a `FHIRReference`.\n- definition: A string linking to the message's definition.\n- destination: A list of `MessageHeaderDestination` representing the message's destination applications.\n- enterer: The source of the data entry as a `FHIRReference`.\n- eventCoding: A `Coding` instance for the event this message represents or links to its definition.\n- eventUri: A string representing the event's URI.\n- focus: A list of `FHIRReference` representing the message's content.\n- reason: The cause of the event as a `CodeableConcept`.\n- response: A `MessageHeaderResponse` if this message replies to a previous one.\n- responsible: The final responsible entity for the event as a `FHIRReference`.\n- sender: The real-world sender of the message as a `FHIRReference`.\n- source: A `MessageHeaderSource` instance representing the application that sent the message.\n\nThis class extends `domainresource.DomainResource`, inheriting its methods and properties for a FHIR-compatible representation of the resource.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON-serializable dictionary.\n\nThis method first calls the `as_json()` method of its superclass (`FHIRAbstractBase`) to obtain the base JSON representation, then adds the `resourceType` key, setting its value to the current class's `resource_type`. This ensures that the resulting JSON representation is compliant with FHIR resource specifications by including the required `resourceType` field.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance including the `resourceType`.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the superclass's method to get a base JSON representation.\n    - `self.resource_type`: A class-level constant that defines the type of resource the instance represents, ensuring the JSON output is correctly labeled.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/messageheader.py": "from . import domainresource\n\nclass MessageHeader(domainresource.DomainResource):\n    \"\"\" A resource that describes a message that is exchanged between systems.\n    \n    The header for a message exchange that is either requesting or responding\n    to an action.  The reference(s) that are the subject of the action as well\n    as other information related to the action are typically transmitted in a\n    bundle in which the MessageHeader resource instance is the first resource\n    in the bundle.\n    \"\"\"\n    resource_type = 'MessageHeader'\n\n    def elementProperties(self):\n        js = super(MessageHeader, self).elementProperties()\n        js.extend([('author', 'author', fhirreference.FHIRReference, False, None, False), ('definition', 'definition', str, False, None, False), ('destination', 'destination', MessageHeaderDestination, True, None, False), ('enterer', 'enterer', fhirreference.FHIRReference, False, None, False), ('eventCoding', 'eventCoding', coding.Coding, False, 'event', True), ('eventUri', 'eventUri', str, False, 'event', True), ('focus', 'focus', fhirreference.FHIRReference, True, None, False), ('reason', 'reason', codeableconcept.CodeableConcept, False, None, False), ('response', 'response', MessageHeaderResponse, False, None, False), ('responsible', 'responsible', fhirreference.FHIRReference, False, None, False), ('sender', 'sender', fhirreference.FHIRReference, False, None, False), ('source', 'source', MessageHeaderSource, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass MessageHeaderDestination(backboneelement.BackboneElement):\n    \"\"\" Message destination application(s).\n    \n    The destination application which the message is intended for.\n    \"\"\"\n    resource_type = 'MessageHeaderDestination'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.endpoint = None\n        ' Actual destination address or id.\\n        Type `str`. '\n        self.name = None\n        ' Name of system.\\n        Type `str`. '\n        self.receiver = None\n        ' Intended \"real-world\" recipient for the data.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.target = None\n        ' Particular delivery destination within the destination.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(MessageHeaderDestination, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MessageHeaderDestination, self).elementProperties()\n        js.extend([('endpoint', 'endpoint', str, False, None, True), ('name', 'name', str, False, None, False), ('receiver', 'receiver', fhirreference.FHIRReference, False, None, False), ('target', 'target', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass MessageHeaderResponse(backboneelement.BackboneElement):\n    \"\"\" If this is a reply to prior message.\n    \n    Information about the message that this message is a response to.  Only\n    present if this message is a response.\n    \"\"\"\n    resource_type = 'MessageHeaderResponse'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' ok | transient-error | fatal-error.\\n        Type `str`. '\n        self.details = None\n        ' Specific list of hints/warnings/errors.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Id of original message.\\n        Type `str`. '\n        super(MessageHeaderResponse, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MessageHeaderResponse, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('details', 'details', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', str, False, None, True)])\n        return js\n\nclass MessageHeaderSource(backboneelement.BackboneElement):\n    \"\"\" Message source application.\n    \n    The source application from which this message originated.\n    \"\"\"\n    resource_type = 'MessageHeaderSource'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.contact = None\n        ' Human contact for problems.\\n        Type `ContactPoint` (represented as `dict` in JSON). '\n        self.endpoint = None\n        ' Actual message source address or id.\\n        Type `str`. '\n        self.name = None\n        ' Name of system.\\n        Type `str`. '\n        self.software = None\n        ' Name of software running the system.\\n        Type `str`. '\n        self.version = None\n        ' Version of software running.\\n        Type `str`. '\n        super(MessageHeaderSource, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MessageHeaderSource, self).elementProperties()\n        js.extend([('contact', 'contact', contactpoint.ContactPoint, False, None, False), ('endpoint', 'endpoint', str, False, None, True), ('name', 'name', str, False, None, False), ('software', 'software', str, False, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactpoint\nfrom . import fhirreference",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}