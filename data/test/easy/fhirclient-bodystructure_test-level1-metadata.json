{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-bodystructure_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/bodystructure_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import bodystructure\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass BodyStructureTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"BodyStructure\", js[\"resourceType\"])\n        return bodystructure.BodyStructure(js)\n    \n    def testBodyStructure1(self):\n        inst = self.instantiate_from(\"bodystructure-example-skin-patch.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a BodyStructure instance\")\n        self.implBodyStructure1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"BodyStructure\", js[\"resourceType\"])\n        inst2 = bodystructure.BodyStructure(js)\n        self.implBodyStructure1(inst2)\n    \n    def implBodyStructure1(self, inst):\n        self.assertFalse(inst.active)\n        self.assertEqual(inst.description, \"inner surface (volar) of the left forearm\")\n        self.assertEqual(inst.id, \"skin-patch\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealth.org/bodystructure/identifiers\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.location.coding[0].code, \"14975008\")\n        self.assertEqual(inst.location.coding[0].display, \"Forearm\")\n        self.assertEqual(inst.location.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.location.text, \"Forearm\")\n        self.assertEqual(inst.locationQualifier[0].coding[0].code, \"419161000\")\n        self.assertEqual(inst.locationQualifier[0].coding[0].display, \"Unilateral left\")\n        self.assertEqual(inst.locationQualifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.locationQualifier[0].text, \"Left\")\n        self.assertEqual(inst.locationQualifier[1].coding[0].code, \"263929005\")\n        self.assertEqual(inst.locationQualifier[1].coding[0].display, \"Volar\")\n        self.assertEqual(inst.locationQualifier[1].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.locationQualifier[1].text, \"Volar\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.morphology.text, \"Skin patch\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testBodyStructure2(self):\n        inst = self.instantiate_from(\"bodystructure-example-tumor.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a BodyStructure instance\")\n        self.implBodyStructure2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"BodyStructure\", js[\"resourceType\"])\n        inst2 = bodystructure.BodyStructure(js)\n        self.implBodyStructure2(inst2)\n    \n    def implBodyStructure2(self, inst):\n        self.assertEqual(inst.description, \"7 cm maximum diameter\")\n        self.assertEqual(inst.id, \"tumor\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealth.org/bodystructure/identifiers\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.image[0].contentType, \"application/dicom\")\n        self.assertEqual(inst.image[0].url, \"http://imaging.acme.com/wado/server?requestType=WADO&amp;wado_details\")\n        self.assertEqual(inst.location.coding[0].code, \"78961009\")\n        self.assertEqual(inst.location.coding[0].display, \"Splenic structure (body structure)\")\n        self.assertEqual(inst.location.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.location.text, \"Spleen\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.morphology.coding[0].code, \"4147007\")\n        self.assertEqual(inst.morphology.coding[0].display, \"Mass (morphologic abnormality)\")\n        self.assertEqual(inst.morphology.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.morphology.text, \"Splenic mass\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testBodyStructure3(self):\n        inst = self.instantiate_from(\"bodystructure-example-fetus.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a BodyStructure instance\")\n        self.implBodyStructure3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"BodyStructure\", js[\"resourceType\"])\n        inst2 = bodystructure.BodyStructure(js)\n        self.implBodyStructure3(inst2)\n    \n    def implBodyStructure3(self, inst):\n        self.assertEqual(inst.description, \"EDD 1/1/2017 confirmation by LMP\")\n        self.assertEqual(inst.id, \"fetus\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealth.org/bodystructure/identifiers\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.location.coding[0].code, \"83418008\")\n        self.assertEqual(inst.location.coding[0].display, \"Entire fetus (body structure)\")\n        self.assertEqual(inst.location.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.location.text, \"Fetus\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/bodystructure.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/BodyStructure).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass BodyStructure(domainresource.DomainResource):\n    \"\"\" Specific and identified anatomical structure.\n    \n    Record details about an anatomical structure.  This resource may be used\n    when a coded concept does not provide the necessary detail needed for the\n    use case.\n    \"\"\"\n    \n    resource_type = \"BodyStructure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.active = None\n        \"\"\" Whether this record is in active use.\n        Type `bool`. \"\"\"\n        \n        self.description = None\n        \"\"\" Text description.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Bodystructure identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.image = None\n        \"\"\" Attached images.\n        List of `Attachment` items (represented as `dict` in JSON). \"\"\"\n        \n        self.location = None\n        \"\"\" Body site.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationQualifier = None\n        \"\"\" Body site modifier.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.morphology = None\n        \"\"\" Kind of Structure.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.patient = None\n        \"\"\" Who this is about.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(BodyStructure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BodyStructure, self).elementProperties()\n        js.extend([\n            (\"active\", \"active\", bool, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"image\", \"image\", attachment.Attachment, True, None, False),\n            (\"location\", \"location\", codeableconcept.CodeableConcept, False, None, False),\n            (\"locationQualifier\", \"locationQualifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"morphology\", \"morphology\", codeableconcept.CodeableConcept, False, None, False),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/bodystructure.py": {
      "BodyStructure.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a BodyStructure instance representing a specific anatomical structure. This constructor allows for the creation of a BodyStructure resource that can hold various properties related to the anatomical structure, such as its active status, description, identifiers, images, location, morphology, and associated patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the properties of the BodyStructure. Each key in the dictionary corresponds to an attribute defined in the class.\n- strict (bool, optional): If True (default), any invalid variables provided will raise a TypeError. If False, the method will allow for flexibility in validation.\n\nRaises:\n- FHIRValidationError: If strict is True and validation fails on the initialization (indicating that invalid or missing fields in the JSON dictionary do not conform to the FHIR standard).\n\nAttributes:\n- active (bool): Indicates whether this record is in active use.\n- description (str): A textual description of the body structure.\n- identifier (List[Identifier]): A list of identifiers for the body structure, represented as dictionaries.\n- image (List[Attachment]): Attached images related to the body structure.\n- location (CodeableConcept): The anatomical site of the body structure.\n- locationQualifier (List[CodeableConcept]): Modifiers for the anatomical site.\n- morphology (CodeableConcept): The type of structure or morphology of the body part.\n- patient (FHIRReference): A reference to the patient for whom this body structure is relevant.\n\nThis method also calls the superclass constructor (domainresource.DomainResource) to initialize base properties that may be extended in this specialized resource.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.active = None\n        ' Whether this record is in active use.\\n        Type `bool`. '\n        self.description = None\n        ' Text description.\\n        Type `str`. '\n        self.identifier = None\n        ' Bodystructure identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.image = None\n        ' Attached images.\\n        List of `Attachment` items (represented as `dict` in JSON). '\n        self.location = None\n        ' Body site.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.locationQualifier = None\n        ' Body site modifier.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.morphology = None\n        ' Kind of Structure.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.patient = None\n        ' Who this is about.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(BodyStructure, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a BodyStructure instance representing a specific anatomical structure. This constructor allows for the creation of a BodyStructure resource that can hold various properties related to the anatomical structure, such as its active status, description, identifiers, images, location, morphology, and associated patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the properties of the BodyStructure. Each key in the dictionary corresponds to an attribute defined in the class.\n- strict (bool, optional): If True (default), any invalid variables provided will raise a TypeError. If False, the method will allow for flexibility in validation.\n\nRaises:\n- FHIRValidationError: If strict is True and validation fails on the initialization (indicating that invalid or missing fields in the JSON dictionary do not conform to the FHIR standard).\n\nAttributes:\n- active (bool): Indicates whether this record is in active use.\n- description (str): A textual description of the body structure.\n- identifier (List[Identifier]): A list of identifiers for the body structure, represented as dictionaries.\n- image (List[Attachment]): Attached images related to the body structure.\n- location (CodeableConcept): The anatomical site of the body structure.\n- locationQualifier (List[CodeableConcept]): Modifiers for the anatomical site.\n- morphology (CodeableConcept): The type of structure or morphology of the body part.\n- patient (FHIRReference): A reference to the patient for whom this body structure is relevant.\n\nThis method also calls the superclass constructor (domainresource.DomainResource) to initialize base properties that may be extended in this specialized resource.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class BodyStructure(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` attribute specific to the resource. It first calls the parent class's `as_json` method to get the base JSON representation and then appends the `resourceType`, which is defined as a class-level constant (`resource_type`), indicating the type of FHIR resource this instance represents.\n\nReturns:\n    dict: A dictionary representation of the resource including the `resourceType` field.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the initial JSON conversion functionality.\n    - The `resource_type` constant is defined in the class to specify the type of resource, ensuring the proper format for FHIR resources.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` attribute specific to the resource. It first calls the parent class's `as_json` method to get the base JSON representation and then appends the `resourceType`, which is defined as a class-level constant (`resource_type`), indicating the type of FHIR resource this instance represents.\n\nReturns:\n    dict: A dictionary representation of the resource including the `resourceType` field.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the initial JSON conversion functionality.\n    - The `resource_type` constant is defined in the class to specify the type of resource, ensuring the proper format for FHIR resources.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/bodystructure_test.py:BodyStructureTests:testBodyStructure1": {
      "tests/models/bodystructure_test.py:BodyStructureTests:instantiate_from": {
        "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/bodystructure_test.py:BodyStructureTests:implBodyStructure1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/bodystructure_test.py:BodyStructureTests:instantiate_from": {
      "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/bodystructure_test.py:BodyStructureTests:testBodyStructure2": {
      "tests/models/bodystructure_test.py:BodyStructureTests:instantiate_from": {
        "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/bodystructure_test.py:BodyStructureTests:implBodyStructure2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/bodystructure_test.py:BodyStructureTests:testBodyStructure3": {
      "tests/models/bodystructure_test.py:BodyStructureTests:instantiate_from": {
        "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/bodystructure_test.py:BodyStructureTests:implBodyStructure3": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/bodystructure.py:BodyStructure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/bodystructure.py:BodyStructure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-bodystructure_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 bodystructure.py\n        \u2502   \u2514\u2500\u2500 BodyStructure.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module facilitates the validation and testing of FHIR-compliant BodyStructure resources by ensuring proper instantiation, serialization, and data integrity against predefined examples. It provides the ability to parse JSON representations of BodyStructure resources, verify their structure and content against specific requirements, and validate the preservation of data consistency through serialization and deserialization processes. By enabling automated verification of key properties such as identifiers, descriptions, location, morphology, and metadata tags, this module ensures adherence to the FHIR standard. It addresses the need for developers to reliably test and validate healthcare data interoperability, particularly within systems that leverage SMART Health IT and FHIR standards.\n\n## FILE 1: fhirclient/models/bodystructure.py\n\n- CLASS METHOD: BodyStructure.__init__\n  - CLASS SIGNATURE: class BodyStructure(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a BodyStructure instance representing a specific anatomical structure. This constructor allows for the creation of a BodyStructure resource that can hold various properties related to the anatomical structure, such as its active status, description, identifiers, images, location, morphology, and associated patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the properties of the BodyStructure. Each key in the dictionary corresponds to an attribute defined in the class.\n- strict (bool, optional): If True (default), any invalid variables provided will raise a TypeError. If False, the method will allow for flexibility in validation.\n\nRaises:\n- FHIRValidationError: If strict is True and validation fails on the initialization (indicating that invalid or missing fields in the JSON dictionary do not conform to the FHIR standard).\n\nAttributes:\n- active (bool): Indicates whether this record is in active use.\n- description (str): A textual description of the body structure.\n- identifier (List[Identifier]): A list of identifiers for the body structure, represented as dictionaries.\n- image (List[Attachment]): Attached images related to the body structure.\n- location (CodeableConcept): The anatomical site of the body structure.\n- locationQualifier (List[CodeableConcept]): Modifiers for the anatomical site.\n- morphology (CodeableConcept): The type of structure or morphology of the body part.\n- patient (FHIRReference): A reference to the patient for whom this body structure is relevant.\n\nThis method also calls the superclass constructor (domainresource.DomainResource) to initialize base properties that may be extended in this specialized resource.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` attribute specific to the resource. It first calls the parent class's `as_json` method to get the base JSON representation and then appends the `resourceType`, which is defined as a class-level constant (`resource_type`), indicating the type of FHIR resource this instance represents.\n\nReturns:\n    dict: A dictionary representation of the resource including the `resourceType` field.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the initial JSON conversion functionality.\n    - The `resource_type` constant is defined in the class to specify the type of resource, ensuring the proper format for FHIR resources.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/bodystructure.py": "from . import domainresource\n\nclass BodyStructure(domainresource.DomainResource):\n    \"\"\" Specific and identified anatomical structure.\n    \n    Record details about an anatomical structure.  This resource may be used\n    when a coded concept does not provide the necessary detail needed for the\n    use case.\n    \"\"\"\n    resource_type = 'BodyStructure'\n\n    def elementProperties(self):\n        js = super(BodyStructure, self).elementProperties()\n        js.extend([('active', 'active', bool, False, None, False), ('description', 'description', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('image', 'image', attachment.Attachment, True, None, False), ('location', 'location', codeableconcept.CodeableConcept, False, None, False), ('locationQualifier', 'locationQualifier', codeableconcept.CodeableConcept, True, None, False), ('morphology', 'morphology', codeableconcept.CodeableConcept, False, None, False), ('patient', 'patient', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}