{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-verificationresult_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/verificationresult_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import verificationresult\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass VerificationResultTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"VerificationResult\", js[\"resourceType\"])\n        return verificationresult.VerificationResult(js)\n    \n    def testVerificationResult1(self):\n        inst = self.instantiate_from(\"verificationresult-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a VerificationResult instance\")\n        self.implVerificationResult1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"VerificationResult\", js[\"resourceType\"])\n        inst2 = verificationresult.VerificationResult(js)\n        self.implVerificationResult1(inst2)\n    \n    def implVerificationResult1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"attested\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>status</b>: attested</p></div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/verificationresult.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/VerificationResult).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass VerificationResult(domainresource.DomainResource):\n    \"\"\" Describes validation requirements, source(s), status and dates for one or\n    more elements.\n    \"\"\"\n    \n    resource_type = \"VerificationResult\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.attestation = None\n        \"\"\" Information about the entity attesting to information.\n        Type `VerificationResultAttestation` (represented as `dict` in JSON). \"\"\"\n        \n        self.failureAction = None\n        \"\"\" fatal | warn | rec-only | none.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.frequency = None\n        \"\"\" Frequency of revalidation.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.lastPerformed = None\n        \"\"\" The date/time validation was last completed (including failed\n        validations).\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.need = None\n        \"\"\" none | initial | periodic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.nextScheduled = None\n        \"\"\" The date when target is next validated, if appropriate.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.primarySource = None\n        \"\"\" Information about the primary source(s) involved in validation.\n        List of `VerificationResultPrimarySource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" attested | validated | in-process | req-revalid | val-fail | reval-\n        fail.\n        Type `str`. \"\"\"\n        \n        self.statusDate = None\n        \"\"\" When the validation status was updated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" A resource that was validated.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.targetLocation = None\n        \"\"\" The fhirpath location(s) within the resource that was validated.\n        List of `str` items. \"\"\"\n        \n        self.validationProcess = None\n        \"\"\" The primary process by which the target is validated (edit check;\n        value set; primary source; multiple sources; standalone; in\n        context).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.validationType = None\n        \"\"\" nothing | primary | multiple.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.validator = None\n        \"\"\" Information about the entity validating information.\n        List of `VerificationResultValidator` items (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResult, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResult, self).elementProperties()\n        js.extend([\n            (\"attestation\", \"attestation\", VerificationResultAttestation, False, None, False),\n            (\"failureAction\", \"failureAction\", codeableconcept.CodeableConcept, False, None, False),\n            (\"frequency\", \"frequency\", timing.Timing, False, None, False),\n            (\"lastPerformed\", \"lastPerformed\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"need\", \"need\", codeableconcept.CodeableConcept, False, None, False),\n            (\"nextScheduled\", \"nextScheduled\", fhirdate.FHIRDate, False, None, False),\n            (\"primarySource\", \"primarySource\", VerificationResultPrimarySource, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusDate\", \"statusDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"target\", \"target\", fhirreference.FHIRReference, True, None, False),\n            (\"targetLocation\", \"targetLocation\", str, True, None, False),\n            (\"validationProcess\", \"validationProcess\", codeableconcept.CodeableConcept, True, None, False),\n            (\"validationType\", \"validationType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"validator\", \"validator\", VerificationResultValidator, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass VerificationResultAttestation(backboneelement.BackboneElement):\n    \"\"\" Information about the entity attesting to information.\n    \"\"\"\n    \n    resource_type = \"VerificationResultAttestation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.communicationMethod = None\n        \"\"\" The method by which attested information was submitted/retrieved.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" The date the information was attested to.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.onBehalfOf = None\n        \"\"\" When the who is asserting on behalf of another (organization or\n        individual).\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.proxyIdentityCertificate = None\n        \"\"\" A digital identity certificate associated with the proxy entity\n        submitting attested information on behalf of the attestation source.\n        Type `str`. \"\"\"\n        \n        self.proxySignature = None\n        \"\"\" Proxy signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.sourceIdentityCertificate = None\n        \"\"\" A digital identity certificate associated with the attestation\n        source.\n        Type `str`. \"\"\"\n        \n        self.sourceSignature = None\n        \"\"\" Attester signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.who = None\n        \"\"\" The individual or organization attesting to information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultAttestation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultAttestation, self).elementProperties()\n        js.extend([\n            (\"communicationMethod\", \"communicationMethod\", codeableconcept.CodeableConcept, False, None, False),\n            (\"date\", \"date\", fhirdate.FHIRDate, False, None, False),\n            (\"onBehalfOf\", \"onBehalfOf\", fhirreference.FHIRReference, False, None, False),\n            (\"proxyIdentityCertificate\", \"proxyIdentityCertificate\", str, False, None, False),\n            (\"proxySignature\", \"proxySignature\", signature.Signature, False, None, False),\n            (\"sourceIdentityCertificate\", \"sourceIdentityCertificate\", str, False, None, False),\n            (\"sourceSignature\", \"sourceSignature\", signature.Signature, False, None, False),\n            (\"who\", \"who\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass VerificationResultPrimarySource(backboneelement.BackboneElement):\n    \"\"\" Information about the primary source(s) involved in validation.\n    \"\"\"\n    \n    resource_type = \"VerificationResultPrimarySource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.canPushUpdates = None\n        \"\"\" yes | no | undetermined.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.communicationMethod = None\n        \"\"\" Method for exchanging information with the primary source.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.pushTypeAvailable = None\n        \"\"\" specific | any | source.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of primary source (License Board; Primary Education;\n        Continuing Education; Postal Service; Relationship owner;\n        Registration Authority; legal source; issuing source; authoritative\n        source).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.validationDate = None\n        \"\"\" When the target was validated against the primary source.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.validationStatus = None\n        \"\"\" successful | failed | unknown.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.who = None\n        \"\"\" Reference to the primary source.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultPrimarySource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultPrimarySource, self).elementProperties()\n        js.extend([\n            (\"canPushUpdates\", \"canPushUpdates\", codeableconcept.CodeableConcept, False, None, False),\n            (\"communicationMethod\", \"communicationMethod\", codeableconcept.CodeableConcept, True, None, False),\n            (\"pushTypeAvailable\", \"pushTypeAvailable\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n            (\"validationDate\", \"validationDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"validationStatus\", \"validationStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"who\", \"who\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass VerificationResultValidator(backboneelement.BackboneElement):\n    \"\"\" Information about the entity validating information.\n    \"\"\"\n    \n    resource_type = \"VerificationResultValidator\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.attestationSignature = None\n        \"\"\" Validator signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.identityCertificate = None\n        \"\"\" A digital identity certificate associated with the validator.\n        Type `str`. \"\"\"\n        \n        self.organization = None\n        \"\"\" Reference to the organization validating information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultValidator, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultValidator, self).elementProperties()\n        js.extend([\n            (\"attestationSignature\", \"attestationSignature\", signature.Signature, False, None, False),\n            (\"identityCertificate\", \"identityCertificate\", str, False, None, False),\n            (\"organization\", \"organization\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import signature\nfrom . import timing\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialization method for the FHIRAbstractResource class, which extends FHIRAbstractBase to include server communication capabilities. This method sets up the resource by checking if the provided JSON dictionary matches the expected resource type and initializes the base class.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data in JSON format. If provided, it is validated to ensure the 'resourceType' matches this class's resource_type.\n- strict (bool, optional): Indicates whether to enforce strict validation of the JSON data against the resource structure. Default is True.\n\nReturns:\n- None: This method initializes the instance and does not return any value.\n\nRaises:\n- Exception: If the provided jsondict has a 'resourceType' that does not match the expected resource_type of this class.\n\nAttributes:\n- _server (None): Represents the server instance from which the resource data was read, initialized to None during instantiation.\n\nDependencies:\n- The method calls the initializer of the superclass (super), which may handle additional setup based on the jsondict and strict parameters.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialization method for the FHIRAbstractResource class, which extends FHIRAbstractBase to include server communication capabilities. This method sets up the resource by checking if the provided JSON dictionary matches the expected resource type and initializes the base class.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data in JSON format. If provided, it is validated to ensure the 'resourceType' matches this class's resource_type.\n- strict (bool, optional): Indicates whether to enforce strict validation of the JSON data against the resource structure. Default is True.\n\nReturns:\n- None: This method initializes the instance and does not return any value.\n\nRaises:\n- Exception: If the provided jsondict has a 'resourceType' that does not match the expected resource_type of this class.\n\nAttributes:\n- _server (None): Represents the server instance from which the resource data was read, initialized to None during instantiation.\n\nDependencies:\n- The method calls the initializer of the superclass (super), which may handle additional setup based on the jsondict and strict parameters.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON representation.\n\nThis method overrides the as_json() method from the superclass FHIRAbstractBase to include the resourceType of the instance in the resulting JSON. It ensures that the JSON representation accurately reflects the type of FHIR resource being serialized.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including a 'resourceType' key set to the value of `self.resource_type`.\n\nDependencies:\n    - The method relies on the superclass's as_json() to generate the base JSON structure, and therefore any modifications or conditions set in that method will apply here as well.\n    \nAttributes:\n    - self.resource_type: A class attribute that indicates the type of FHIR resource represented by the instance, which is added to the resulting JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON representation.\n\nThis method overrides the as_json() method from the superclass FHIRAbstractBase to include the resourceType of the instance in the resulting JSON. It ensures that the JSON representation accurately reflects the type of FHIR resource being serialized.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including a 'resourceType' key set to the value of `self.resource_type`.\n\nDependencies:\n    - The method relies on the superclass's as_json() to generate the base JSON structure, and therefore any modifications or conditions set in that method will apply here as well.\n    \nAttributes:\n    - self.resource_type: A class attribute that indicates the type of FHIR resource represented by the instance, which is added to the resulting JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR (Fast Healthcare Interoperability Resources) elements. This constructor prepares the instance by initializing attributes, and optionally populates the object with data from a provided JSON dictionary. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the instance. If provided, the instance is populated with its contents.\n- strict (bool, optional): If True (the default), invalid variables will raise a FHIRValidationError during JSON updates. If False, warnings will be logged instead of raising errors.\n\nAttributes:\n- self._resolved: A dictionary that holds references to resolved resources, initialized to None.\n- self._owner: A reference to the parent resource if one exists, also initialized to None.\n\nThis constructor interacts with the `update_with_json` method to populate the object, relying on the validation rules depending on the `strict` parameter. If `strict` is False and an error occurs during updating, it logs the error instead of raising it.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR (Fast Healthcare Interoperability Resources) elements. This constructor prepares the instance by initializing attributes, and optionally populates the object with data from a provided JSON dictionary. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the instance. If provided, the instance is populated with its contents.\n- strict (bool, optional): If True (the default), invalid variables will raise a FHIRValidationError during JSON updates. If False, warnings will be logged instead of raising errors.\n\nAttributes:\n- self._resolved: A dictionary that holds references to resolved resources, initialized to None.\n- self._owner: A reference to the parent resource if one exists, also initialized to None.\n\nThis constructor interacts with the `update_with_json` method to populate the object, relying on the validation rules depending on the `strict` parameter. If `strict` is False and an error occurs during updating, it logs the error instead of raising it.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initialize an element from a provided JSON dictionary or an array of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` for instantiation. If the input is a list, it attempts to instantiate each dictionary in the list, appending the results to an array. Any validation errors during instantiation are prefixed with the index of the instance in the list to provide context.\n\nRaises a `TypeError` if the input is neither a dictionary nor a list of dictionaries. Raises a `FHIRValidationError` if the instantiation of any element fails.\n\nParameters:\n- jsonobj: A single dictionary or a list of dictionaries representing the data to instantiate FHIR elements.\n\nReturns:\n- An instance of the class if jsonobj is a dictionary, or a list of instances if it is a list of dictionaries.\n\nDependencies:\n- Relies on the internal method `_with_json_dict` for the actual instantiation of individual dictionaries into class instances.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initialize an element from a provided JSON dictionary or an array of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` for instantiation. If the input is a list, it attempts to instantiate each dictionary in the list, appending the results to an array. Any validation errors during instantiation are prefixed with the index of the instance in the list to provide context.\n\nRaises a `TypeError` if the input is neither a dictionary nor a list of dictionaries. Raises a `FHIRValidationError` if the instantiation of any element fails.\n\nParameters:\n- jsonobj: A single dictionary or a list of dictionaries representing the data to instantiate FHIR elements.\n\nReturns:\n- An instance of the class if jsonobj is a dictionary, or a list of instances if it is a list of dictionaries.\n\nDependencies:\n- Relies on the internal method `_with_json_dict` for the actual instantiation of individual dictionaries into class instances.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal method to create an instance of the class from a provided JSON dictionary. This method ensures that the provided data is a dictionary; if not, it raises a TypeError indicating the expected type. On successful verification, it invokes the class constructor using the supplied dictionary.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing the data to initialize the instance.\n\nReturns:\n- An instance of the class created from the JSON data.\n\nRaises:\n- TypeError: If the provided jsondict is not a dictionary.\n\nThis method interacts with the class's constructor to instantiate the object, and it's primarily used in the context of deserializing JSON data into Python objects, ensuring that data adheres to the expected format defined by the FHIR (Fast Healthcare Interoperability Resources) specifications.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal method to create an instance of the class from a provided JSON dictionary. This method ensures that the provided data is a dictionary; if not, it raises a TypeError indicating the expected type. On successful verification, it invokes the class constructor using the supplied dictionary.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing the data to initialize the instance.\n\nReturns:\n- An instance of the class created from the JSON data.\n\nRaises:\n- TypeError: If the provided jsondict is not a dictionary.\n\nThis method interacts with the class's constructor to instantiate the object, and it's primarily used in the context of deserializing JSON data into Python objects, ensuring that data adheres to the expected format defined by the FHIR (Fast Healthcare Interoperability Resources) specifications.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates an FHIR element from a given JSON object while also setting its owner, allowing for resource resolution in contained resources. \n\nThis method first calls `with_json()` to create an instance (or list of instances) from the provided JSON data. It then assigns the specified `owner` to each instantiated element, ensuring that the relationship between the parent resource and its children is maintained for resolving references.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list thereof used to instantiate the element(s).\n- owner (FHIRElement): The parent resource, which serves as the owner of the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dict or a list of dicts.\n- FHIRValidationError: If instantiation from the JSON data fails.\n\nThis method is dependent on `with_json()` for the actual instantiation of the object(s), and it assumes that the `FHIRElement` class (from which this class is derived) is capable of handling the JSON data structure specified.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates an FHIR element from a given JSON object while also setting its owner, allowing for resource resolution in contained resources. \n\nThis method first calls `with_json()` to create an instance (or list of instances) from the provided JSON data. It then assigns the specified `owner` to each instantiated element, ensuring that the relationship between the parent resource and its children is maintained for resolving references.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list thereof used to instantiate the element(s).\n- owner (FHIRElement): The parent resource, which serves as the owner of the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dict or a list of dicts.\n- FHIRValidationError: If instantiation from the JSON data fails.\n\nThis method is dependent on `with_json()` for the actual instantiation of the object(s), and it assumes that the `FHIRElement` class (from which this class is derived) is capable of handling the JSON data structure specified.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples representing properties of the FHIR element that should be serialized into JSON format. Each tuple contains the following elements: the property name, the corresponding JSON key name, the data type, a boolean indicating if it is a list, the name of a specific type if applicable, and a boolean indicating whether the property is not optional.\n\nThis method is essential for serialization and validation of FHIR elements, enabling the dynamic creation of JSON representations based on defined properties. It should be overridden by subclasses to define their specific properties for serialization.\n\nNo constants are defined within this method, but it relies on the overarching structure and behavior of the `FHIRAbstractBase` class to ensure correct serialization.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples representing properties of the FHIR element that should be serialized into JSON format. Each tuple contains the following elements: the property name, the corresponding JSON key name, the data type, a boolean indicating if it is a list, the name of a specific type if applicable, and a boolean indicating whether the property is not optional.\n\nThis method is essential for serialization and validation of FHIR elements, enabling the dynamic creation of JSON representations based on defined properties. It should be overridden by subclasses to define their specific properties for serialization.\n\nNo constants are defined within this method, but it relies on the overarching structure and behavior of the `FHIRAbstractBase` class to ensure correct serialization.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Updates the receiver instance's attributes using data from a given JSON dictionary.\n\n:param dict jsondict: The JSON dictionary containing data to update the receiver. It raises a FHIRValidationError if the `jsondict` is not a dictionary or if validation errors occur during the update process.\n:raises: FHIRValidationError on validation errors, including missing non-optional properties or incorrect types.\n:return: None on successful update. Raises FHIRValidationError with a list of encountered errors if any issues occur during the update.\n\nThis method interacts with `elementProperties()`, which defines the properties that should be considered during the update, including their names, types, and whether they are required or can be lists. It maintains validity using a set `valid`, and it tracks found properties and non-optional properties with the sets `found` and `nonoptionals`. If there are superfluous keys in the dictionary, it also captures those as errors to be reported.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Updates the receiver instance's attributes using data from a given JSON dictionary.\n\n:param dict jsondict: The JSON dictionary containing data to update the receiver. It raises a FHIRValidationError if the `jsondict` is not a dictionary or if validation errors occur during the update process.\n:raises: FHIRValidationError on validation errors, including missing non-optional properties or incorrect types.\n:return: None on successful update. Raises FHIRValidationError with a list of encountered errors if any issues occur during the update.\n\nThis method interacts with `elementProperties()`, which defines the properties that should be considered during the update, including their names, types, and whether they are required or can be lists. It maintains validity using a set `valid`, and it tracks found properties and non-optional properties with the sets `found` and `nonoptionals`. If there are superfluous keys in the dictionary, it also captures those as errors to be reported.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of `FHIRAbstractBase` to a JSON-compatible dictionary by checking the properties defined in `elementProperties()`. This method validates that required properties are present and of the correct type before returning the constructed dictionary.\n\nReturns:\n    dict: A validated JSON dictionary representation of the instance.\n\nRaises:\n    FHIRValidationError: If any property does not comply with its expected type or if required properties are missing.\n\nThe function accesses `self.elementProperties()`, which provides the structure of the attributes to be serialized. It also utilizes `self._matches_type()` to verify that each attribute has the correct type, ensuring the integrity of the serialized output. The `found` set tracks which attributes have been included, while `nonoptionals` keeps track of properties that are mandatory. Errors encountered during the serialization process are collected and raised as a `FHIRValidationError`.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of `FHIRAbstractBase` to a JSON-compatible dictionary by checking the properties defined in `elementProperties()`. This method validates that required properties are present and of the correct type before returning the constructed dictionary.\n\nReturns:\n    dict: A validated JSON dictionary representation of the instance.\n\nRaises:\n    FHIRValidationError: If any property does not comply with its expected type or if required properties are missing.\n\nThe function accesses `self.elementProperties()`, which provides the structure of the attributes to be serialized. It also utilizes `self._matches_type()` to verify that each attribute has the correct type, ensuring the integrity of the serialized output. The `found` set tracks which attributes have been included, while `nonoptionals` keeps track of properties that are mandatory. Errors encountered during the serialization process are collected and raised as a `FHIRValidationError`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if a given value matches the expected type.\n\n:param value: The value to be tested against the expected type.\n:param typ: The expected type that the value should conform to.\n:returns: True if the value is None (indicating an optional value), or if it is an instance of the expected type; otherwise, False.\n\nThis method also accommodates compatibility between Python 2 and 3, specifically checking for `str` and `unicode` types when the Python version is less than 3. Additionally, it handles both `int` and `float` types, confirming that the value is either type if the expected type is one of them.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if a given value matches the expected type.\n\n:param value: The value to be tested against the expected type.\n:param typ: The expected type that the value should conform to.\n:returns: True if the value is None (indicating an optional value), or if it is an instance of the expected type; otherwise, False.\n\nThis method also accommodates compatibility between Python 2 and 3, specifically checking for `str` and `unicode` types when the Python version is less than 3. Additionally, it handles both `int` and `float` types, confirming that the value is either type if the expected type is one of them.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/verificationresult.py": {
      "VerificationResult.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a VerificationResult instance, which describes validation requirements, source(s), status, and dates for one or more elements.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors. If False, allows invalid variables without raising an error.\n\nAttributes:\n- attestation (VerificationResultAttestation): Information about the entity attesting to the information.\n- failureAction (CodeableConcept): Indicates the action taken on validation failure (e.g., 'fatal', 'warn').\n- frequency (Timing): Describes the frequency of revalidation.\n- lastPerformed (FHIRDateTime): The date/time when the last validation was completed.\n- need (CodeableConcept): Indicates the need for validation (e.g., 'none', 'initial', 'periodic').\n- nextScheduled (FHIRDate): The date when the target will be next validated.\n- primarySource (list of VerificationResultPrimarySource): Details about the primary sources involved in validation.\n- status (str): The current validation status (e.g., 'attested', 'validated').\n- statusDate (FHIRDateTime): The date the validation status was last updated.\n- target (list of FHIRReference): A list of resources that were validated.\n- targetLocation (list of str): The FHIRPath locations within the resource that were validated.\n- validationProcess (list of CodeableConcept): The primary processes used for validation.\n- validationType (CodeableConcept): Indicates the type of validation performed (e.g., 'nothing', 'primary').\n- validator (list of VerificationResultValidator): Information about the entities validating the information.\n\nThis constructor calls the parent class's constructor from domainresource.DomainResource to initialize common properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.attestation = None\n        ' Information about the entity attesting to information.\\n        Type `VerificationResultAttestation` (represented as `dict` in JSON). '\n        self.failureAction = None\n        ' fatal | warn | rec-only | none.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.frequency = None\n        ' Frequency of revalidation.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.lastPerformed = None\n        ' The date/time validation was last completed (including failed\\n        validations).\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.need = None\n        ' none | initial | periodic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.nextScheduled = None\n        ' The date when target is next validated, if appropriate.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.primarySource = None\n        ' Information about the primary source(s) involved in validation.\\n        List of `VerificationResultPrimarySource` items (represented as `dict` in JSON). '\n        self.status = None\n        ' attested | validated | in-process | req-revalid | val-fail | reval-\\n        fail.\\n        Type `str`. '\n        self.statusDate = None\n        ' When the validation status was updated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.target = None\n        ' A resource that was validated.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.targetLocation = None\n        ' The fhirpath location(s) within the resource that was validated.\\n        List of `str` items. '\n        self.validationProcess = None\n        ' The primary process by which the target is validated (edit check;\\n        value set; primary source; multiple sources; standalone; in\\n        context).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.validationType = None\n        ' nothing | primary | multiple.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.validator = None\n        ' Information about the entity validating information.\\n        List of `VerificationResultValidator` items (represented as `dict` in JSON). '\n        super(VerificationResult, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a VerificationResult instance, which describes validation requirements, source(s), status, and dates for one or more elements.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors. If False, allows invalid variables without raising an error.\n\nAttributes:\n- attestation (VerificationResultAttestation): Information about the entity attesting to the information.\n- failureAction (CodeableConcept): Indicates the action taken on validation failure (e.g., 'fatal', 'warn').\n- frequency (Timing): Describes the frequency of revalidation.\n- lastPerformed (FHIRDateTime): The date/time when the last validation was completed.\n- need (CodeableConcept): Indicates the need for validation (e.g., 'none', 'initial', 'periodic').\n- nextScheduled (FHIRDate): The date when the target will be next validated.\n- primarySource (list of VerificationResultPrimarySource): Details about the primary sources involved in validation.\n- status (str): The current validation status (e.g., 'attested', 'validated').\n- statusDate (FHIRDateTime): The date the validation status was last updated.\n- target (list of FHIRReference): A list of resources that were validated.\n- targetLocation (list of str): The FHIRPath locations within the resource that were validated.\n- validationProcess (list of CodeableConcept): The primary processes used for validation.\n- validationType (CodeableConcept): Indicates the type of validation performed (e.g., 'nothing', 'primary').\n- validator (list of VerificationResultValidator): Information about the entities validating the information.\n\nThis constructor calls the parent class's constructor from domainresource.DomainResource to initialize common properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class VerificationResult(domainresource.DomainResource):"
      },
      "VerificationResult.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns the properties of the VerificationResult resource, including details about attestation, validation status, and validation sources. This method builds on the properties defined in the parent class `DomainResource`, by extending the properties specific to the `VerificationResult` class.\n\nParameters:\n- None\n\nReturns:\n- List of tuples, where each tuple contains:\n    - A string representing the property name.\n    - A string representing the JSON key associated with the property.\n    - The expected data type or class for the property.\n    - A boolean indicating if the property is repeating.\n    - A default value (None in this case).\n    - A boolean indicating if the property is required.\n\nDependencies:\n- Uses the `VerificationResultAttestation`, `VerificationResultPrimarySource`, and `VerificationResultValidator` classes to define complex data types.\n- Utilizes `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, `timing.Timing`, `fhirdatetime.FHIRDateTime`, and `fhirdate.FHIRDate` for specific properties, which are imported from respective modules.\n- Each property corresponds to elements defined in the FHIR (Fast Healthcare Interoperability Resources) specification, indicating its significance in healthcare data validation processes.\"\"\"\n        js = super(VerificationResult, self).elementProperties()\n        js.extend([('attestation', 'attestation', VerificationResultAttestation, False, None, False), ('failureAction', 'failureAction', codeableconcept.CodeableConcept, False, None, False), ('frequency', 'frequency', timing.Timing, False, None, False), ('lastPerformed', 'lastPerformed', fhirdatetime.FHIRDateTime, False, None, False), ('need', 'need', codeableconcept.CodeableConcept, False, None, False), ('nextScheduled', 'nextScheduled', fhirdate.FHIRDate, False, None, False), ('primarySource', 'primarySource', VerificationResultPrimarySource, True, None, False), ('status', 'status', str, False, None, True), ('statusDate', 'statusDate', fhirdatetime.FHIRDateTime, False, None, False), ('target', 'target', fhirreference.FHIRReference, True, None, False), ('targetLocation', 'targetLocation', str, True, None, False), ('validationProcess', 'validationProcess', codeableconcept.CodeableConcept, True, None, False), ('validationType', 'validationType', codeableconcept.CodeableConcept, False, None, False), ('validator', 'validator', VerificationResultValidator, True, None, False)])\n        return js",
        "docstring": "Returns the properties of the VerificationResult resource, including details about attestation, validation status, and validation sources. This method builds on the properties defined in the parent class `DomainResource`, by extending the properties specific to the `VerificationResult` class.\n\nParameters:\n- None\n\nReturns:\n- List of tuples, where each tuple contains:\n    - A string representing the property name.\n    - A string representing the JSON key associated with the property.\n    - The expected data type or class for the property.\n    - A boolean indicating if the property is repeating.\n    - A default value (None in this case).\n    - A boolean indicating if the property is required.\n\nDependencies:\n- Uses the `VerificationResultAttestation`, `VerificationResultPrimarySource`, and `VerificationResultValidator` classes to define complex data types.\n- Utilizes `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, `timing.Timing`, `fhirdatetime.FHIRDateTime`, and `fhirdate.FHIRDate` for specific properties, which are imported from respective modules.\n- Each property corresponds to elements defined in the FHIR (Fast Healthcare Interoperability Resources) specification, indicating its significance in healthcare data validation processes.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class VerificationResult(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Resource instance.\n\nThis constructor initializes the basic properties of a FHIR resource, including its logical ID, implicit rules, language, and metadata. It accepts an optional JSON dictionary for initialization and a strict mode for validation. If strict is enabled (default), invalid properties will raise a TypeError; otherwise, they may be ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the resource properties.\n- strict (bool, optional): If True (default), invalid parameters will raise a FHIRValidationError.\n\nAttributes:\n- id (str): The logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which the content is created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nDependencies:\n- The Resource class inherits from FHIRAbstractResource, invoking its initializer for extended properties.\n- The `meta` module is imported and provides the Meta type for the 'meta' attribute.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Resource instance.\n\nThis constructor initializes the basic properties of a FHIR resource, including its logical ID, implicit rules, language, and metadata. It accepts an optional JSON dictionary for initialization and a strict mode for validation. If strict is enabled (default), invalid properties will raise a TypeError; otherwise, they may be ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the resource properties.\n- strict (bool, optional): If True (default), invalid parameters will raise a FHIRValidationError.\n\nAttributes:\n- id (str): The logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which the content is created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nDependencies:\n- The Resource class inherits from FHIRAbstractResource, invoking its initializer for extended properties.\n- The `meta` module is imported and provides the Meta type for the 'meta' attribute.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the properties of the Resource class as a list of tuples.\n\nThis method extends the properties inherited from the parent class `FHIRAbstractResource`. It includes the following properties for the Resource class:\n- `id`: Logical id of this artifact (`str`).\n- `implicitRules`: A set of rules under which this content was created (`str`).\n- `language`: Language of the resource content (`str`).\n- `meta`: Metadata about the resource, represented as `meta.Meta` (a dictionary in JSON).\n\nThe method returns a list of tuples, each containing the property name, the corresponding attribute name, the data type, whether the property is required, any specific conditions, and a flag for whether the property can repeat.\n\nDependencies:\n- This method relies on `meta` for the `Meta` type.\n- It also utilizes the `elementProperties` method from the parent class, `FHIRAbstractResource`.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Retrieve the properties of the Resource class as a list of tuples.\n\nThis method extends the properties inherited from the parent class `FHIRAbstractResource`. It includes the following properties for the Resource class:\n- `id`: Logical id of this artifact (`str`).\n- `implicitRules`: A set of rules under which this content was created (`str`).\n- `language`: Language of the resource content (`str`).\n- `meta`: Metadata about the resource, represented as `meta.Meta` (a dictionary in JSON).\n\nThe method returns a list of tuples, each containing the property name, the corresponding attribute name, the data type, whether the property is required, any specific conditions, and a flag for whether the property can repeat.\n\nDependencies:\n- This method relies on `meta` for the `Meta` type.\n- It also utilizes the `elementProperties` method from the parent class, `FHIRAbstractResource`.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource object, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. This can define the properties of the resource as specified in the FHIR standard.\n- strict (bool, optional): If set to True (the default), invalid properties in the jsondict will raise a TypeError; otherwise, these errors will be ignored.\n\nAttributes initialized:\n- contained (list of Resource): Holds contained, inline resources represented as dictionaries.\n- extension (list of Extension): Holds additional content defined by implementations as dictionaries.\n- modifierExtension (list of Extension): Holds extensions that cannot be ignored, also represented as dictionaries.\n- text (Narrative): Holds a text summary of the resource for human interpretation, represented as a dictionary.\n\nThis initialization interacts with the superclass `resource.Resource` to ensure proper construction of the resource hierarchy, enabling further extensions and modifications as defined by FHIR. The `elementProperties` method facilitates defining how the properties of this resource are serialized and deserialized when converting to and from JSON.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource object, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. This can define the properties of the resource as specified in the FHIR standard.\n- strict (bool, optional): If set to True (the default), invalid properties in the jsondict will raise a TypeError; otherwise, these errors will be ignored.\n\nAttributes initialized:\n- contained (list of Resource): Holds contained, inline resources represented as dictionaries.\n- extension (list of Extension): Holds additional content defined by implementations as dictionaries.\n- modifierExtension (list of Extension): Holds extensions that cannot be ignored, also represented as dictionaries.\n- text (Narrative): Holds a text summary of the resource for human interpretation, represented as a dictionary.\n\nThis initialization interacts with the superclass `resource.Resource` to ensure proper construction of the resource hierarchy, enabling further extensions and modifications as defined by FHIR. The `elementProperties` method facilitates defining how the properties of this resource are serialized and deserialized when converting to and from JSON.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the list of element properties for the DomainResource.\n\nThis method extends the properties defined in the parent class `Resource` to include additional attributes specific to the `DomainResource`. These attributes include:\n- `contained`: Inline resources contained within this resource.\n- `extension`: Custom extensions defined by FHIR implementations.\n- `modifierExtension`: Extensions that should not be ignored.\n- `text`: A narrative summary for human interpretation.\n\nReturns:\n    list: A list of tuples, where each tuple contains the attribute name, its corresponding JSON field name, the expected data type, whether it is repeated, and other relevant properties.\n\nDependencies:\n- This method relies on `super()` to call the `elementProperties` method from the parent class `Resource`.\n- The `extension` and `narrative` modules are imported for the respective types used in extensions and narrative text.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Retrieve the list of element properties for the DomainResource.\n\nThis method extends the properties defined in the parent class `Resource` to include additional attributes specific to the `DomainResource`. These attributes include:\n- `contained`: Inline resources contained within this resource.\n- `extension`: Custom extensions defined by FHIR implementations.\n- `modifierExtension`: Extensions that should not be ignored.\n- `text`: A narrative summary for human interpretation.\n\nReturns:\n    list: A list of tuples, where each tuple contains the attribute name, its corresponding JSON field name, the expected data type, whether it is repeated, and other relevant properties.\n\nDependencies:\n- This method relies on `super()` to call the `elementProperties` method from the parent class `Resource`.\n- The `extension` and `narrative` modules are imported for the respective types used in extensions and narrative text.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/verificationresult.py:VerificationResult:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/verificationresult_test.py:VerificationResultTests:testVerificationResult1": {
      "tests/models/verificationresult_test.py:VerificationResultTests:instantiate_from": {
        "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/verificationresult_test.py:VerificationResultTests:implVerificationResult1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/verificationresult_test.py:VerificationResultTests:instantiate_from": {
      "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-verificationresult_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 resource.py\n        \u2502   \u251c\u2500\u2500 Resource.__init__\n        \u2502   \u2514\u2500\u2500 Resource.elementProperties\n        \u2514\u2500\u2500 verificationresult.py\n            \u251c\u2500\u2500 VerificationResult.__init__\n            \u2514\u2500\u2500 VerificationResult.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and process FHIR (Fast Healthcare Interoperability Resources) VerificationResult resources, which are essential for determining the status and integrity of healthcare-related verifications. Its primary functionality includes instantiating and verifying JSON representations of VerificationResult resources, ensuring correctness and compliance with FHIR standards. The module provides robust capabilities for parsing resource data, validating structure and values, and converting instances to and from JSON format while maintaining data integrity and semantic alignment. This facilitates developers in integrating and testing interoperability features within healthcare applications by automating validation processes, reducing manual errors, and ensuring reliable handling of verification resources in compliance with the FHIR 4.0.1 specification.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialization method for the FHIRAbstractResource class, which extends FHIRAbstractBase to include server communication capabilities. This method sets up the resource by checking if the provided JSON dictionary matches the expected resource type and initializes the base class.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data in JSON format. If provided, it is validated to ensure the 'resourceType' matches this class's resource_type.\n- strict (bool, optional): Indicates whether to enforce strict validation of the JSON data against the resource structure. Default is True.\n\nReturns:\n- None: This method initializes the instance and does not return any value.\n\nRaises:\n- Exception: If the provided jsondict has a 'resourceType' that does not match the expected resource_type of this class.\n\nAttributes:\n- _server (None): Represents the server instance from which the resource data was read, initialized to None during instantiation.\n\nDependencies:\n- The method calls the initializer of the superclass (super), which may handle additional setup based on the jsondict and strict parameters.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON representation.\n\nThis method overrides the as_json() method from the superclass FHIRAbstractBase to include the resourceType of the instance in the resulting JSON. It ensures that the JSON representation accurately reflects the type of FHIR resource being serialized.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including a 'resourceType' key set to the value of `self.resource_type`.\n\nDependencies:\n    - The method relies on the superclass's as_json() to generate the base JSON structure, and therefore any modifications or conditions set in that method will apply here as well.\n    \nAttributes:\n    - self.resource_type: A class attribute that indicates the type of FHIR resource represented by the instance, which is added to the resulting JSON.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR (Fast Healthcare Interoperability Resources) elements. This constructor prepares the instance by initializing attributes, and optionally populates the object with data from a provided JSON dictionary. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the instance. If provided, the instance is populated with its contents.\n- strict (bool, optional): If True (the default), invalid variables will raise a FHIRValidationError during JSON updates. If False, warnings will be logged instead of raising errors.\n\nAttributes:\n- self._resolved: A dictionary that holds references to resolved resources, initialized to None.\n- self._owner: A reference to the parent resource if one exists, also initialized to None.\n\nThis constructor interacts with the `update_with_json` method to populate the object, relying on the validation rules depending on the `strict` parameter. If `strict` is False and an error occurs during updating, it logs the error instead of raising it.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal method to create an instance of the class from a provided JSON dictionary. This method ensures that the provided data is a dictionary; if not, it raises a TypeError indicating the expected type. On successful verification, it invokes the class constructor using the supplied dictionary.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing the data to initialize the instance.\n\nReturns:\n- An instance of the class created from the JSON data.\n\nRaises:\n- TypeError: If the provided jsondict is not a dictionary.\n\nThis method interacts with the class's constructor to instantiate the object, and it's primarily used in the context of deserializing JSON data into Python objects, ensuring that data adheres to the expected format defined by the FHIR (Fast Healthcare Interoperability Resources) specifications.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if a given value matches the expected type.\n\n:param value: The value to be tested against the expected type.\n:param typ: The expected type that the value should conform to.\n:returns: True if the value is None (indicating an optional value), or if it is an instance of the expected type; otherwise, False.\n\nThis method also accommodates compatibility between Python 2 and 3, specifically checking for `str` and `unicode` types when the Python version is less than 3. Additionally, it handles both `int` and `float` types, confirming that the value is either type if the expected type is one of them.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates an FHIR element from a given JSON object while also setting its owner, allowing for resource resolution in contained resources. \n\nThis method first calls `with_json()` to create an instance (or list of instances) from the provided JSON data. It then assigns the specified `owner` to each instantiated element, ensuring that the relationship between the parent resource and its children is maintained for resolving references.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list thereof used to instantiate the element(s).\n- owner (FHIRElement): The parent resource, which serves as the owner of the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dict or a list of dicts.\n- FHIRValidationError: If instantiation from the JSON data fails.\n\nThis method is dependent on `with_json()` for the actual instantiation of the object(s), and it assumes that the `FHIRElement` class (from which this class is derived) is capable of handling the JSON data structure specified.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples representing properties of the FHIR element that should be serialized into JSON format. Each tuple contains the following elements: the property name, the corresponding JSON key name, the data type, a boolean indicating if it is a list, the name of a specific type if applicable, and a boolean indicating whether the property is not optional.\n\nThis method is essential for serialization and validation of FHIR elements, enabling the dynamic creation of JSON representations based on defined properties. It should be overridden by subclasses to define their specific properties for serialization.\n\nNo constants are defined within this method, but it relies on the overarching structure and behavior of the `FHIRAbstractBase` class to ensure correct serialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an element from a provided JSON dictionary or an array of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` for instantiation. If the input is a list, it attempts to instantiate each dictionary in the list, appending the results to an array. Any validation errors during instantiation are prefixed with the index of the instance in the list to provide context.\n\nRaises a `TypeError` if the input is neither a dictionary nor a list of dictionaries. Raises a `FHIRValidationError` if the instantiation of any element fails.\n\nParameters:\n- jsonobj: A single dictionary or a list of dictionaries representing the data to instantiate FHIR elements.\n\nReturns:\n- An instance of the class if jsonobj is a dictionary, or a list of instances if it is a list of dictionaries.\n\nDependencies:\n- Relies on the internal method `_with_json_dict` for the actual instantiation of individual dictionaries into class instances.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of `FHIRAbstractBase` to a JSON-compatible dictionary by checking the properties defined in `elementProperties()`. This method validates that required properties are present and of the correct type before returning the constructed dictionary.\n\nReturns:\n    dict: A validated JSON dictionary representation of the instance.\n\nRaises:\n    FHIRValidationError: If any property does not comply with its expected type or if required properties are missing.\n\nThe function accesses `self.elementProperties()`, which provides the structure of the attributes to be serialized. It also utilizes `self._matches_type()` to verify that each attribute has the correct type, ensuring the integrity of the serialized output. The `found` set tracks which attributes have been included, while `nonoptionals` keeps track of properties that are mandatory. Errors encountered during the serialization process are collected and raised as a `FHIRValidationError`.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdates the receiver instance's attributes using data from a given JSON dictionary.\n\n:param dict jsondict: The JSON dictionary containing data to update the receiver. It raises a FHIRValidationError if the `jsondict` is not a dictionary or if validation errors occur during the update process.\n:raises: FHIRValidationError on validation errors, including missing non-optional properties or incorrect types.\n:return: None on successful update. Raises FHIRValidationError with a list of encountered errors if any issues occur during the update.\n\nThis method interacts with `elementProperties()`, which defines the properties that should be considered during the update, including their names, types, and whether they are required or can be lists. It maintains validity using a set `valid`, and it tracks found properties and non-optional properties with the sets `found` and `nonoptionals`. If there are superfluous keys in the dictionary, it also captures those as errors to be reported.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/verificationresult.py\n\n- CLASS METHOD: VerificationResult.elementProperties\n  - CLASS SIGNATURE: class VerificationResult(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the properties of the VerificationResult resource, including details about attestation, validation status, and validation sources. This method builds on the properties defined in the parent class `DomainResource`, by extending the properties specific to the `VerificationResult` class.\n\nParameters:\n- None\n\nReturns:\n- List of tuples, where each tuple contains:\n    - A string representing the property name.\n    - A string representing the JSON key associated with the property.\n    - The expected data type or class for the property.\n    - A boolean indicating if the property is repeating.\n    - A default value (None in this case).\n    - A boolean indicating if the property is required.\n\nDependencies:\n- Uses the `VerificationResultAttestation`, `VerificationResultPrimarySource`, and `VerificationResultValidator` classes to define complex data types.\n- Utilizes `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, `timing.Timing`, `fhirdatetime.FHIRDateTime`, and `fhirdate.FHIRDate` for specific properties, which are imported from respective modules.\n- Each property corresponds to elements defined in the FHIR (Fast Healthcare Interoperability Resources) specification, indicating its significance in healthcare data validation processes.\n\"\"\"\n```\n\n- CLASS METHOD: VerificationResult.__init__\n  - CLASS SIGNATURE: class VerificationResult(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a VerificationResult instance, which describes validation requirements, source(s), status, and dates for one or more elements.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors. If False, allows invalid variables without raising an error.\n\nAttributes:\n- attestation (VerificationResultAttestation): Information about the entity attesting to the information.\n- failureAction (CodeableConcept): Indicates the action taken on validation failure (e.g., 'fatal', 'warn').\n- frequency (Timing): Describes the frequency of revalidation.\n- lastPerformed (FHIRDateTime): The date/time when the last validation was completed.\n- need (CodeableConcept): Indicates the need for validation (e.g., 'none', 'initial', 'periodic').\n- nextScheduled (FHIRDate): The date when the target will be next validated.\n- primarySource (list of VerificationResultPrimarySource): Details about the primary sources involved in validation.\n- status (str): The current validation status (e.g., 'attested', 'validated').\n- statusDate (FHIRDateTime): The date the validation status was last updated.\n- target (list of FHIRReference): A list of resources that were validated.\n- targetLocation (list of str): The FHIRPath locations within the resource that were validated.\n- validationProcess (list of CodeableConcept): The primary processes used for validation.\n- validationType (CodeableConcept): Indicates the type of validation performed (e.g., 'nothing', 'primary').\n- validator (list of VerificationResultValidator): Information about the entities validating the information.\n\nThis constructor calls the parent class's constructor from domainresource.DomainResource to initialize common properties.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the properties of the Resource class as a list of tuples.\n\nThis method extends the properties inherited from the parent class `FHIRAbstractResource`. It includes the following properties for the Resource class:\n- `id`: Logical id of this artifact (`str`).\n- `implicitRules`: A set of rules under which this content was created (`str`).\n- `language`: Language of the resource content (`str`).\n- `meta`: Metadata about the resource, represented as `meta.Meta` (a dictionary in JSON).\n\nThe method returns a list of tuples, each containing the property name, the corresponding attribute name, the data type, whether the property is required, any specific conditions, and a flag for whether the property can repeat.\n\nDependencies:\n- This method relies on `meta` for the `Meta` type.\n- It also utilizes the `elementProperties` method from the parent class, `FHIRAbstractResource`.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Resource instance.\n\nThis constructor initializes the basic properties of a FHIR resource, including its logical ID, implicit rules, language, and metadata. It accepts an optional JSON dictionary for initialization and a strict mode for validation. If strict is enabled (default), invalid properties will raise a TypeError; otherwise, they may be ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the resource properties.\n- strict (bool, optional): If True (default), invalid parameters will raise a FHIRValidationError.\n\nAttributes:\n- id (str): The logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which the content is created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nDependencies:\n- The Resource class inherits from FHIRAbstractResource, invoking its initializer for extended properties.\n- The `meta` module is imported and provides the Meta type for the 'meta' attribute.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the list of element properties for the DomainResource.\n\nThis method extends the properties defined in the parent class `Resource` to include additional attributes specific to the `DomainResource`. These attributes include:\n- `contained`: Inline resources contained within this resource.\n- `extension`: Custom extensions defined by FHIR implementations.\n- `modifierExtension`: Extensions that should not be ignored.\n- `text`: A narrative summary for human interpretation.\n\nReturns:\n    list: A list of tuples, where each tuple contains the attribute name, its corresponding JSON field name, the expected data type, whether it is repeated, and other relevant properties.\n\nDependencies:\n- This method relies on `super()` to call the `elementProperties` method from the parent class `Resource`.\n- The `extension` and `narrative` modules are imported for the respective types used in extensions and narrative text.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource object, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. This can define the properties of the resource as specified in the FHIR standard.\n- strict (bool, optional): If set to True (the default), invalid properties in the jsondict will raise a TypeError; otherwise, these errors will be ignored.\n\nAttributes initialized:\n- contained (list of Resource): Holds contained, inline resources represented as dictionaries.\n- extension (list of Extension): Holds additional content defined by implementations as dictionaries.\n- modifierExtension (list of Extension): Holds extensions that cannot be ignored, also represented as dictionaries.\n- text (Narrative): Holds a text summary of the resource for human interpretation, represented as a dictionary.\n\nThis initialization interacts with the superclass `resource.Resource` to ensure proper construction of the resource hierarchy, enabling further extensions and modifications as defined by FHIR. The `elementProperties` method facilitates defining how the properties of this resource are serialized and deserialized when converting to and from JSON.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/verificationresult.py": "from . import domainresource\n\nclass VerificationResult(domainresource.DomainResource):\n    \"\"\" Describes validation requirements, source(s), status and dates for one or\n    more elements.\n    \"\"\"\n    resource_type = 'VerificationResult'\nfrom . import backboneelement\n\nclass VerificationResultAttestation(backboneelement.BackboneElement):\n    \"\"\" Information about the entity attesting to information.\n    \"\"\"\n    resource_type = 'VerificationResultAttestation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.communicationMethod = None\n        ' The method by which attested information was submitted/retrieved.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.date = None\n        ' The date the information was attested to.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.onBehalfOf = None\n        ' When the who is asserting on behalf of another (organization or\\n        individual).\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.proxyIdentityCertificate = None\n        ' A digital identity certificate associated with the proxy entity\\n        submitting attested information on behalf of the attestation source.\\n        Type `str`. '\n        self.proxySignature = None\n        ' Proxy signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.sourceIdentityCertificate = None\n        ' A digital identity certificate associated with the attestation\\n        source.\\n        Type `str`. '\n        self.sourceSignature = None\n        ' Attester signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.who = None\n        ' The individual or organization attesting to information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultAttestation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultAttestation, self).elementProperties()\n        js.extend([('communicationMethod', 'communicationMethod', codeableconcept.CodeableConcept, False, None, False), ('date', 'date', fhirdate.FHIRDate, False, None, False), ('onBehalfOf', 'onBehalfOf', fhirreference.FHIRReference, False, None, False), ('proxyIdentityCertificate', 'proxyIdentityCertificate', str, False, None, False), ('proxySignature', 'proxySignature', signature.Signature, False, None, False), ('sourceIdentityCertificate', 'sourceIdentityCertificate', str, False, None, False), ('sourceSignature', 'sourceSignature', signature.Signature, False, None, False), ('who', 'who', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass VerificationResultPrimarySource(backboneelement.BackboneElement):\n    \"\"\" Information about the primary source(s) involved in validation.\n    \"\"\"\n    resource_type = 'VerificationResultPrimarySource'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.canPushUpdates = None\n        ' yes | no | undetermined.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.communicationMethod = None\n        ' Method for exchanging information with the primary source.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.pushTypeAvailable = None\n        ' specific | any | source.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of primary source (License Board; Primary Education;\\n        Continuing Education; Postal Service; Relationship owner;\\n        Registration Authority; legal source; issuing source; authoritative\\n        source).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.validationDate = None\n        ' When the target was validated against the primary source.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.validationStatus = None\n        ' successful | failed | unknown.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.who = None\n        ' Reference to the primary source.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultPrimarySource, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultPrimarySource, self).elementProperties()\n        js.extend([('canPushUpdates', 'canPushUpdates', codeableconcept.CodeableConcept, False, None, False), ('communicationMethod', 'communicationMethod', codeableconcept.CodeableConcept, True, None, False), ('pushTypeAvailable', 'pushTypeAvailable', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False), ('validationDate', 'validationDate', fhirdatetime.FHIRDateTime, False, None, False), ('validationStatus', 'validationStatus', codeableconcept.CodeableConcept, False, None, False), ('who', 'who', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass VerificationResultValidator(backboneelement.BackboneElement):\n    \"\"\" Information about the entity validating information.\n    \"\"\"\n    resource_type = 'VerificationResultValidator'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.attestationSignature = None\n        ' Validator signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.identityCertificate = None\n        ' A digital identity certificate associated with the validator.\\n        Type `str`. '\n        self.organization = None\n        ' Reference to the organization validating information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultValidator, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultValidator, self).elementProperties()\n        js.extend([('attestationSignature', 'attestationSignature', signature.Signature, False, None, False), ('identityCertificate', 'identityCertificate', str, False, None, False), ('organization', 'organization', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import signature\nfrom . import timing",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative"
  }
}