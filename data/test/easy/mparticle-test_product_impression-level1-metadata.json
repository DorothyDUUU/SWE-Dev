{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_product_impression",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_product_impression.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.product_impression import ProductImpression\n\n\nclass TestProductImpression(unittest.TestCase):\n    \"\"\" ProductImpression unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testProductImpression(self):\n        \"\"\"\n        Test ProductImpression\n        \"\"\"\n        model = mparticle.models.product_impression.ProductImpression()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/product_impression.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ProductImpression(object):\n\n    def __init__(self, product_impression_list=None, products=None):\n        \"\"\"\n        ProductImpression - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'product_impression_list': 'str',\n            'products': 'list[Product]'\n        }\n\n        self.attribute_map = {\n            'product_impression_list': 'product_impression_list',\n            'products': 'products'\n        }\n\n        self._product_impression_list = product_impression_list\n        self._products = products\n\n    @property\n    def product_impression_list(self):\n        \"\"\"\n        Gets the product_impression_list of this ProductImpression.\n\n\n        :return: The product_impression_list of this ProductImpression.\n        :rtype: str\n        \"\"\"\n        return self._product_impression_list\n\n    @product_impression_list.setter\n    def product_impression_list(self, product_impression_list):\n        \"\"\"\n        Sets the product_impression_list of this ProductImpression.\n\n\n        :param product_impression_list: The product_impression_list of this ProductImpression.\n        :type: str\n        \"\"\"\n\n        self._product_impression_list = product_impression_list\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ProductImpression.\n\n\n        :return: The products of this ProductImpression.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ProductImpression.\n\n\n        :param products: The products of this ProductImpression.\n        :type: list[Product]\n        \"\"\"\n\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/product_impression.py": {
      "ProductImpression.__init__": {
        "code": "    def __init__(self, product_impression_list=None, products=None):\n        \"\"\"Initializes a ProductImpression instance, representing a collection of product impressions.\n\n    The ProductImpression class is designed to model and manage product impression data according to the mParticle Event API.\n\n    Parameters:\n    - product_impression_list (str, optional): A string representing the list of product impressions.\n    - products (list[Product], optional): A list of Product objects representing the individual products associated with the impressions.\n\n    Attributes:\n    - swagger_types (dict): A mapping of attribute names to their data types, used for serialization.\n    - attribute_map (dict): A mapping of attribute names to their corresponding JSON keys, facilitating API integration.\n    - _product_impression_list (str): Internal variable holding the product impression list.\n    - _products (list[Product]): Internal variable holding the list of Product objects.\n\n    The method has no return value.\"\"\"\n        '\\n        ProductImpression - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'product_impression_list': 'str', 'products': 'list[Product]'}\n        self.attribute_map = {'product_impression_list': 'product_impression_list', 'products': 'products'}\n        self._product_impression_list = product_impression_list\n        self._products = products",
        "docstring": "Initializes a ProductImpression instance, representing a collection of product impressions.\n\nThe ProductImpression class is designed to model and manage product impression data according to the mParticle Event API.\n\nParameters:\n- product_impression_list (str, optional): A string representing the list of product impressions.\n- products (list[Product], optional): A list of Product objects representing the individual products associated with the impressions.\n\nAttributes:\n- swagger_types (dict): A mapping of attribute names to their data types, used for serialization.\n- attribute_map (dict): A mapping of attribute names to their corresponding JSON keys, facilitating API integration.\n- _product_impression_list (str): Internal variable holding the product impression list.\n- _products (list[Product]): Internal variable holding the list of Product objects.\n\nThe method has no return value.",
        "signature": "def __init__(self, product_impression_list=None, products=None):",
        "type": "Method",
        "class_signature": "class ProductImpression(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_product_impression\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 product_impression.py\n            \u2514\u2500\u2500 ProductImpression.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to facilitate integration with the mParticle Event API by providing functionality to model and handle product impressions, a key component of tracking user interactions and e-commerce analytics. It enables developers to instantiate and manage instances of the `ProductImpression` object, which captures details related to user engagement with products during their session or journey. By offering this abstraction, the module simplifies the process of structuring and transmitting event data, ensuring alignment with mParticle\u2019s data model. This helps developers streamline event tracking implementation, reducing complexity and ensuring consistency across analytics workflows and marketing platforms.\n\n## FILE 1: mparticle/models/product_impression.py\n\n- CLASS METHOD: ProductImpression.__init__\n  - CLASS SIGNATURE: class ProductImpression(object):\n  - SIGNATURE: def __init__(self, product_impression_list=None, products=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a ProductImpression instance, representing a collection of product impressions.\n\nThe ProductImpression class is designed to model and manage product impression data according to the mParticle Event API.\n\nParameters:\n- product_impression_list (str, optional): A string representing the list of product impressions.\n- products (list[Product], optional): A list of Product objects representing the individual products associated with the impressions.\n\nAttributes:\n- swagger_types (dict): A mapping of attribute names to their data types, used for serialization.\n- attribute_map (dict): A mapping of attribute names to their corresponding JSON keys, facilitating API integration.\n- _product_impression_list (str): Internal variable holding the product impression list.\n- _products (list[Product]): Internal variable holding the list of Product objects.\n\nThe method has no return value.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/product_impression.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass ProductImpression(object):\n\n    @property\n    def product_impression_list(self):\n        \"\"\"\n        Gets the product_impression_list of this ProductImpression.\n\n\n        :return: The product_impression_list of this ProductImpression.\n        :rtype: str\n        \"\"\"\n        return self._product_impression_list\n\n    @product_impression_list.setter\n    def product_impression_list(self, product_impression_list):\n        \"\"\"\n        Sets the product_impression_list of this ProductImpression.\n\n\n        :param product_impression_list: The product_impression_list of this ProductImpression.\n        :type: str\n        \"\"\"\n        self._product_impression_list = product_impression_list\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ProductImpression.\n\n\n        :return: The products of this ProductImpression.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ProductImpression.\n\n\n        :param products: The products of this ProductImpression.\n        :type: list[Product]\n        \"\"\"\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_product_impression.py:TestProductImpression:testProductImpression": {
      "mparticle/models/product_impression.py:ProductImpression:__init__": {}
    }
  }
}