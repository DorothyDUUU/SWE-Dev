{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_aohmergeopts",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_aohmergeopts.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.aohmergeopts import (\n\tAoHMergeOpts)\n\n\nclass Test_merger_enums_aohmergeopts():\n\t\"\"\"Tests for the AoHMergeOpts enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert AoHMergeOpts.get_names() == [\n\t\t\t\"ALL\",\n\t\t\t\"DEEP\",\n\t\t\t\"LEFT\",\n\t\t\t\"RIGHT\",\n\t\t\t\"UNIQUE\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert AoHMergeOpts.get_choices() == [\n\t\t\t\"all\",\n\t\t\t\"deep\",\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t\t\"unique\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"ALL\", AoHMergeOpts.ALL),\n\t\t(\"DEEP\", AoHMergeOpts.DEEP),\n\t\t(\"LEFT\", AoHMergeOpts.LEFT),\n\t\t(\"RIGHT\", AoHMergeOpts.RIGHT),\n\t\t(\"UNIQUE\", AoHMergeOpts.UNIQUE),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == AoHMergeOpts.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tAoHMergeOpts.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/aohmergeopts.py": "\"\"\"\nImplements the AoHMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass AoHMergeOpts(Enum):\n    \"\"\"\n    Supported Array-of-Hash (AKA: List of Map, list of dict) Merge Options.\n\n    Options include:\n\n    `ALL`\n        RHS Hashes are appended to the LHS Array (shallow merge with no\n        de-duplication).\n\n    `DEEP`\n        RHS Hashes are deeply merged into LHS Hashes (full merge) IIF an\n        identifier key is also provided via the --aohkey option.\n\n    `LEFT`\n        RHS Hashes are neither merged with nor appended to LHS Hashes (no\n        merge).\n\n    `RIGHT`\n        LHS Hashes are discarded and fully replaced by RHS Hashes (no merge).\n\n    `UNIQUE`\n        RHS Hashes which do not already exist IN FULL within LHS are appended\n        to the LHS Array (no merge).\n    \"\"\"\n\n    ALL = auto()\n    DEEP = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in AoHMergeOpts]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in AoHMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"AoHMergeOpts\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (AoHMergeOpts) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in AoHMergeOpts.get_names():\n            return AoHMergeOpts[check]\n        raise NameError(\n            \"AoHMergeOpts has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/aohmergeopts.py": {
      "AoHMergeOpts.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all upper-cased entry names from the AoHMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the AoHMergeOpts class, converting them to upper case. It interacts with the members of the AoHMergeOpts enum, which represent different merging options for array-of-hash operations. The method does not accept any parameters and returns a list of strings that represent the upper-cased names of the enumeration values.\n\nReturns:\n    List[str]: A list containing the upper-cased names of all entries in the AoHMergeOpts enumeration.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in AoHMergeOpts]",
        "docstring": "Get all upper-cased entry names from the AoHMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the AoHMergeOpts class, converting them to upper case. It interacts with the members of the AoHMergeOpts enum, which represent different merging options for array-of-hash operations. The method does not accept any parameters and returns a list of strings that represent the upper-cased names of the enumeration values.\n\nReturns:\n    List[str]: A list containing the upper-cased names of all entries in the AoHMergeOpts enumeration.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class AoHMergeOpts(Enum):"
      },
      "AoHMergeOpts.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Get all entry names in lower-case for the AoHMergeOpts enumeration.\n\nThis method retrieves the names of all enumeration members, converts them to lower-case, and returns them as a sorted list. It relies on the `get_names` static method to obtain the original names, ensuring consistency with the defined enumeration values.\n\nReturns:\n    List[str]: A sorted list of lower-case names representing the enumeration options.\n\nNo parameters or side effects are involved in this method.\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in AoHMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Get all entry names in lower-case for the AoHMergeOpts enumeration.\n\nThis method retrieves the names of all enumeration members, converts them to lower-case, and returns them as a sorted list. It relies on the `get_names` static method to obtain the original names, ensuring consistency with the defined enumeration values.\n\nReturns:\n    List[str]: A sorted list of lower-case names representing the enumeration options.\n\nNo parameters or side effects are involved in this method.",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class AoHMergeOpts(Enum):"
      },
      "AoHMergeOpts.from_str": {
        "code": "    def from_str(name: str) -> 'AoHMergeOpts':\n        \"\"\"Convert a string to its corresponding AoHMergeOpts enumeration value.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This string is converted to uppercase before comparison.\n\nReturns:\n    AoHMergeOpts: The corresponding enumeration value.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `AoHMergeOpts` class by utilizing the `get_names` static method to validate the input name against the defined enumeration options. The valid options are defined as class constants within the AoHMergeOpts enumeration. If the provided name is valid, it returns the matching enumeration; otherwise, it raises a NameError to indicate the invalid input.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (AoHMergeOpts) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in AoHMergeOpts.get_names():\n            return AoHMergeOpts[check]\n        raise NameError('AoHMergeOpts has no such item:  {}'.format(name))",
        "docstring": "Convert a string to its corresponding AoHMergeOpts enumeration value.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This string is converted to uppercase before comparison.\n\nReturns:\n    AoHMergeOpts: The corresponding enumeration value.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `AoHMergeOpts` class by utilizing the `get_names` static method to validate the input name against the defined enumeration options. The valid options are defined as class constants within the AoHMergeOpts enumeration. If the provided name is valid, it returns the matching enumeration; otherwise, it raises a NameError to indicate the invalid input.",
        "signature": "def from_str(name: str) -> 'AoHMergeOpts':",
        "type": "Method",
        "class_signature": "class AoHMergeOpts(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_choices": {},
    "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_aohmergeopts\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 aohmergeopts.py\n                \u251c\u2500\u2500 AoHMergeOpts.from_str\n                \u251c\u2500\u2500 AoHMergeOpts.get_choices\n                \u2514\u2500\u2500 AoHMergeOpts.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module provides functionality for verifying and testing the behavior of the `AoHMergeOpts` enumeration, which defines options for merging arrays of hashes (AoH) in YAML data structures. It ensures that the enumeration's key utility methods, such as retrieving all available option names, mapping string inputs to enumeration values, and validating input correctness, operate as intended. By facilitating thorough testing of these enumeration capabilities, the module addresses the need for dependable and predictable behavior when handling complex YAML data merges, reducing the risk of errors in applications that utilize this functionality.\n\n## FILE 1: yamlpath/merger/enums/aohmergeopts.py\n\n- CLASS METHOD: AoHMergeOpts.from_str\n  - CLASS SIGNATURE: class AoHMergeOpts(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'AoHMergeOpts':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string to its corresponding AoHMergeOpts enumeration value.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This string is converted to uppercase before comparison.\n\nReturns:\n    AoHMergeOpts: The corresponding enumeration value.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `AoHMergeOpts` class by utilizing the `get_names` static method to validate the input name against the defined enumeration options. The valid options are defined as class constants within the AoHMergeOpts enumeration. If the provided name is valid, it returns the matching enumeration; otherwise, it raises a NameError to indicate the invalid input.\n\"\"\"\n```\n\n- CLASS METHOD: AoHMergeOpts.get_names\n  - CLASS SIGNATURE: class AoHMergeOpts(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all upper-cased entry names from the AoHMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the AoHMergeOpts class, converting them to upper case. It interacts with the members of the AoHMergeOpts enum, which represent different merging options for array-of-hash operations. The method does not accept any parameters and returns a list of strings that represent the upper-cased names of the enumeration values.\n\nReturns:\n    List[str]: A list containing the upper-cased names of all entries in the AoHMergeOpts enumeration.\n\"\"\"\n```\n\n- CLASS METHOD: AoHMergeOpts.get_choices\n  - CLASS SIGNATURE: class AoHMergeOpts(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names in lower-case for the AoHMergeOpts enumeration.\n\nThis method retrieves the names of all enumeration members, converts them to lower-case, and returns them as a sorted list. It relies on the `get_names` static method to obtain the original names, ensuring consistency with the defined enumeration values.\n\nReturns:\n    List[str]: A sorted list of lower-case names representing the enumeration options.\n\nNo parameters or side effects are involved in this method.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/aohmergeopts.py": "\"\"\"\nImplements the AoHMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass AoHMergeOpts(Enum):\n    \"\"\"\n    Supported Array-of-Hash (AKA: List of Map, list of dict) Merge Options.\n\n    Options include:\n\n    `ALL`\n        RHS Hashes are appended to the LHS Array (shallow merge with no\n        de-duplication).\n\n    `DEEP`\n        RHS Hashes are deeply merged into LHS Hashes (full merge) IIF an\n        identifier key is also provided via the --aohkey option.\n\n    `LEFT`\n        RHS Hashes are neither merged with nor appended to LHS Hashes (no\n        merge).\n\n    `RIGHT`\n        LHS Hashes are discarded and fully replaced by RHS Hashes (no merge).\n\n    `UNIQUE`\n        RHS Hashes which do not already exist IN FULL within LHS are appended\n        to the LHS Array (no merge).\n    \"\"\"\n    ALL = auto()\n    DEEP = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_aohmergeopts.py:Test_merger_enums_aohmergeopts:test_get_names": {
      "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_names": {}
    },
    "tests/test_merger_enums_aohmergeopts.py:Test_merger_enums_aohmergeopts:test_get_choices": {
      "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_choices": {
        "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_aohmergeopts.py:Test_merger_enums_aohmergeopts:test_from_str": {
      "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:from_str": {
        "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_aohmergeopts.py:Test_merger_enums_aohmergeopts:test_from_str_nameerror": {
      "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:from_str": {
        "yamlpath/merger/enums/aohmergeopts.py:AoHMergeOpts:get_names": {}
      }
    }
  }
}