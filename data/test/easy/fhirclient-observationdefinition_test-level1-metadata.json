{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-observationdefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/observationdefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import observationdefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ObservationDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ObservationDefinition\", js[\"resourceType\"])\n        return observationdefinition.ObservationDefinition(js)\n    \n    def testObservationDefinition1(self):\n        inst = self.instantiate_from(\"observationdefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ObservationDefinition instance\")\n        self.implObservationDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ObservationDefinition\", js[\"resourceType\"])\n        inst2 = observationdefinition.ObservationDefinition(js)\n        self.implObservationDefinition1(inst2)\n    \n    def implObservationDefinition1(self, inst):\n        self.assertEqual(inst.code.coding[0].code, \"15074-8\")\n        self.assertEqual(inst.code.coding[0].display, \"Glucose [Moles/volume] in Blood\")\n        self.assertEqual(inst.code.coding[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/observationdefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ObservationDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ObservationDefinition(domainresource.DomainResource):\n    \"\"\" Definition of an observation.\n    \n    Set of definitional characteristics for a kind of observation or\n    measurement produced or consumed by an orderable health care service.\n    \"\"\"\n    \n    resource_type = \"ObservationDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.abnormalCodedValueSet = None\n        \"\"\" Value set of abnormal coded values for the observations conforming\n        to this ObservationDefinition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Category of observation.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Type of observation (code / type).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.criticalCodedValueSet = None\n        \"\"\" Value set of critical coded values for the observations conforming\n        to this ObservationDefinition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier for this ObservationDefinition instance.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.method = None\n        \"\"\" Method used to produce the observation.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.multipleResultsAllowed = None\n        \"\"\" Multiple results allowed.\n        Type `bool`. \"\"\"\n        \n        self.normalCodedValueSet = None\n        \"\"\" Value set of normal coded values for the observations conforming to\n        this ObservationDefinition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.permittedDataType = None\n        \"\"\" Quantity | CodeableConcept | string | boolean | integer | Range |\n        Ratio | SampledData | time | dateTime | Period.\n        List of `str` items. \"\"\"\n        \n        self.preferredReportName = None\n        \"\"\" Preferred report name.\n        Type `str`. \"\"\"\n        \n        self.qualifiedInterval = None\n        \"\"\" Qualified range for continuous and ordinal observation results.\n        List of `ObservationDefinitionQualifiedInterval` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantitativeDetails = None\n        \"\"\" Characteristics of quantitative results.\n        Type `ObservationDefinitionQuantitativeDetails` (represented as `dict` in JSON). \"\"\"\n        \n        self.validCodedValueSet = None\n        \"\"\" Value set of valid coded values for the observations conforming to\n        this ObservationDefinition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ObservationDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ObservationDefinition, self).elementProperties()\n        js.extend([\n            (\"abnormalCodedValueSet\", \"abnormalCodedValueSet\", fhirreference.FHIRReference, False, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"criticalCodedValueSet\", \"criticalCodedValueSet\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"method\", \"method\", codeableconcept.CodeableConcept, False, None, False),\n            (\"multipleResultsAllowed\", \"multipleResultsAllowed\", bool, False, None, False),\n            (\"normalCodedValueSet\", \"normalCodedValueSet\", fhirreference.FHIRReference, False, None, False),\n            (\"permittedDataType\", \"permittedDataType\", str, True, None, False),\n            (\"preferredReportName\", \"preferredReportName\", str, False, None, False),\n            (\"qualifiedInterval\", \"qualifiedInterval\", ObservationDefinitionQualifiedInterval, True, None, False),\n            (\"quantitativeDetails\", \"quantitativeDetails\", ObservationDefinitionQuantitativeDetails, False, None, False),\n            (\"validCodedValueSet\", \"validCodedValueSet\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ObservationDefinitionQualifiedInterval(backboneelement.BackboneElement):\n    \"\"\" Qualified range for continuous and ordinal observation results.\n    \n    Multiple  ranges of results qualified by different contexts for ordinal or\n    continuous observations conforming to this ObservationDefinition.\n    \"\"\"\n    \n    resource_type = \"ObservationDefinitionQualifiedInterval\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.age = None\n        \"\"\" Applicable age range, if relevant.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.appliesTo = None\n        \"\"\" Targetted population of the range.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" reference | critical | absolute.\n        Type `str`. \"\"\"\n        \n        self.condition = None\n        \"\"\" Condition associated with the reference range.\n        Type `str`. \"\"\"\n        \n        self.context = None\n        \"\"\" Range context qualifier.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.gender = None\n        \"\"\" male | female | other | unknown.\n        Type `str`. \"\"\"\n        \n        self.gestationalAge = None\n        \"\"\" Applicable gestational age range, if relevant.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.range = None\n        \"\"\" The interval itself, for continuous or ordinal observations.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        super(ObservationDefinitionQualifiedInterval, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ObservationDefinitionQualifiedInterval, self).elementProperties()\n        js.extend([\n            (\"age\", \"age\", range.Range, False, None, False),\n            (\"appliesTo\", \"appliesTo\", codeableconcept.CodeableConcept, True, None, False),\n            (\"category\", \"category\", str, False, None, False),\n            (\"condition\", \"condition\", str, False, None, False),\n            (\"context\", \"context\", codeableconcept.CodeableConcept, False, None, False),\n            (\"gender\", \"gender\", str, False, None, False),\n            (\"gestationalAge\", \"gestationalAge\", range.Range, False, None, False),\n            (\"range\", \"range\", range.Range, False, None, False),\n        ])\n        return js\n\n\nclass ObservationDefinitionQuantitativeDetails(backboneelement.BackboneElement):\n    \"\"\" Characteristics of quantitative results.\n    \n    Characteristics for quantitative results of this observation.\n    \"\"\"\n    \n    resource_type = \"ObservationDefinitionQuantitativeDetails\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.conversionFactor = None\n        \"\"\" SI to Customary unit conversion factor.\n        Type `float`. \"\"\"\n        \n        self.customaryUnit = None\n        \"\"\" Customary unit for quantitative results.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.decimalPrecision = None\n        \"\"\" Decimal precision of observation quantitative results.\n        Type `int`. \"\"\"\n        \n        self.unit = None\n        \"\"\" SI unit for quantitative results.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ObservationDefinitionQuantitativeDetails, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ObservationDefinitionQuantitativeDetails, self).elementProperties()\n        js.extend([\n            (\"conversionFactor\", \"conversionFactor\", float, False, None, False),\n            (\"customaryUnit\", \"customaryUnit\", codeableconcept.CodeableConcept, False, None, False),\n            (\"decimalPrecision\", \"decimalPrecision\", int, False, None, False),\n            (\"unit\", \"unit\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import range\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/observationdefinition.py": {
      "ObservationDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an ObservationDefinition instance, which defines characteristics for a type of observation or measurement in health care.\n\nParameters:\n- jsondict (dict, optional): A dictionary with key-value pairs representing the properties of the observation definition. This is used for initializing the instance. If provided, it can help in setting up attributes based on existing data.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a TypeError during initialization. If False, the validation is relaxed.\n\nAttributes:\n- abnormalCodedValueSet: A reference to a value set of abnormal coded values for this observation. It is of type FHIRReference.\n- category: A list of CodeableConcept items that categorize the observation.\n- code: The type of observation, represented as a CodeableConcept.\n- criticalCodedValueSet: A reference to a value set of critical coded values for the observation.\n- identifier: A list containing identifiers for this ObservationDefinition.\n- method: The method used to perform the observation, represented as a CodeableConcept.\n- multipleResultsAllowed: A boolean indicating whether multiple results are allowed for this observation.\n- normalCodedValueSet: A reference to a value set of normal coded values for the observation.\n- permittedDataType: A list of strings representing the permitted data types for this observation.\n- preferredReportName: A string indicating the preferred name for reporting the observation.\n- qualifiedInterval: A list of qualified intervals that apply to continuous or ordinal observations.\n- quantitativeDetails: Characteristics related to quantitative results of the observation.\n- validCodedValueSet: A reference to a value set of valid coded values for the observation.\n\nThis constructor also invokes the constructor of the superclass DomainResource to ensure that any inherited attributes and methods are appropriately initialized.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.abnormalCodedValueSet = None\n        ' Value set of abnormal coded values for the observations conforming\\n        to this ObservationDefinition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.category = None\n        ' Category of observation.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.code = None\n        ' Type of observation (code / type).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.criticalCodedValueSet = None\n        ' Value set of critical coded values for the observations conforming\\n        to this ObservationDefinition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier for this ObservationDefinition instance.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.method = None\n        ' Method used to produce the observation.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.multipleResultsAllowed = None\n        ' Multiple results allowed.\\n        Type `bool`. '\n        self.normalCodedValueSet = None\n        ' Value set of normal coded values for the observations conforming to\\n        this ObservationDefinition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.permittedDataType = None\n        ' Quantity | CodeableConcept | string | boolean | integer | Range |\\n        Ratio | SampledData | time | dateTime | Period.\\n        List of `str` items. '\n        self.preferredReportName = None\n        ' Preferred report name.\\n        Type `str`. '\n        self.qualifiedInterval = None\n        ' Qualified range for continuous and ordinal observation results.\\n        List of `ObservationDefinitionQualifiedInterval` items (represented as `dict` in JSON). '\n        self.quantitativeDetails = None\n        ' Characteristics of quantitative results.\\n        Type `ObservationDefinitionQuantitativeDetails` (represented as `dict` in JSON). '\n        self.validCodedValueSet = None\n        ' Value set of valid coded values for the observations conforming to\\n        this ObservationDefinition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ObservationDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an ObservationDefinition instance, which defines characteristics for a type of observation or measurement in health care.\n\nParameters:\n- jsondict (dict, optional): A dictionary with key-value pairs representing the properties of the observation definition. This is used for initializing the instance. If provided, it can help in setting up attributes based on existing data.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a TypeError during initialization. If False, the validation is relaxed.\n\nAttributes:\n- abnormalCodedValueSet: A reference to a value set of abnormal coded values for this observation. It is of type FHIRReference.\n- category: A list of CodeableConcept items that categorize the observation.\n- code: The type of observation, represented as a CodeableConcept.\n- criticalCodedValueSet: A reference to a value set of critical coded values for the observation.\n- identifier: A list containing identifiers for this ObservationDefinition.\n- method: The method used to perform the observation, represented as a CodeableConcept.\n- multipleResultsAllowed: A boolean indicating whether multiple results are allowed for this observation.\n- normalCodedValueSet: A reference to a value set of normal coded values for the observation.\n- permittedDataType: A list of strings representing the permitted data types for this observation.\n- preferredReportName: A string indicating the preferred name for reporting the observation.\n- qualifiedInterval: A list of qualified intervals that apply to continuous or ordinal observations.\n- quantitativeDetails: Characteristics related to quantitative results of the observation.\n- validCodedValueSet: A reference to a value set of valid coded values for the observation.\n\nThis constructor also invokes the constructor of the superclass DomainResource to ensure that any inherited attributes and methods are appropriately initialized.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ObservationDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the `as_json` method from the parent class to include the resource type of the instance. It returns a dictionary that contains all the JSON data from the parent class, augmented with the `resourceType` key set to the value of the instance's `resource_type` attribute, which is defined as 'FHIRAbstractResource'.\n\n:return: A dictionary representing the JSON structure of the resource, including its `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the `as_json` method from the parent class to include the resource type of the instance. It returns a dictionary that contains all the JSON data from the parent class, augmented with the `resourceType` key set to the value of the instance's `resource_type` attribute, which is defined as 'FHIRAbstractResource'.\n\n:return: A dictionary representing the JSON structure of the resource, including its `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/observationdefinition.py:ObservationDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/observationdefinition_test.py:ObservationDefinitionTests:testObservationDefinition1": {
      "tests/models/observationdefinition_test.py:ObservationDefinitionTests:instantiate_from": {
        "fhirclient/models/observationdefinition.py:ObservationDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/observationdefinition.py:ObservationDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/observationdefinition_test.py:ObservationDefinitionTests:implObservationDefinition1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/observationdefinition.py:ObservationDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/observationdefinition.py:ObservationDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/observationdefinition.py:ObservationDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/observationdefinition_test.py:ObservationDefinitionTests:instantiate_from": {
      "fhirclient/models/observationdefinition.py:ObservationDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/observationdefinition.py:ObservationDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-observationdefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 observationdefinition.py\n            \u2514\u2500\u2500 ObservationDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the functionality of the `ObservationDefinition` resource in adherence to the FHIR (Fast Healthcare Interoperability Resources) specification. It enables the instantiation and verification of `ObservationDefinition` instances by loading example resource data, assessing its structure, and ensuring the data conforms to expected standards such as code definition, metadata, and associated terminology. By ensuring the integrity and compliance of `ObservationDefinition` resources, the module simplifies the development and verification process for developers working with FHIR-based healthcare applications, ensuring robust data interoperability and correctness within clinical and healthcare systems.\n\n## FILE 1: fhirclient/models/observationdefinition.py\n\n- CLASS METHOD: ObservationDefinition.__init__\n  - CLASS SIGNATURE: class ObservationDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an ObservationDefinition instance, which defines characteristics for a type of observation or measurement in health care.\n\nParameters:\n- jsondict (dict, optional): A dictionary with key-value pairs representing the properties of the observation definition. This is used for initializing the instance. If provided, it can help in setting up attributes based on existing data.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a TypeError during initialization. If False, the validation is relaxed.\n\nAttributes:\n- abnormalCodedValueSet: A reference to a value set of abnormal coded values for this observation. It is of type FHIRReference.\n- category: A list of CodeableConcept items that categorize the observation.\n- code: The type of observation, represented as a CodeableConcept.\n- criticalCodedValueSet: A reference to a value set of critical coded values for the observation.\n- identifier: A list containing identifiers for this ObservationDefinition.\n- method: The method used to perform the observation, represented as a CodeableConcept.\n- multipleResultsAllowed: A boolean indicating whether multiple results are allowed for this observation.\n- normalCodedValueSet: A reference to a value set of normal coded values for the observation.\n- permittedDataType: A list of strings representing the permitted data types for this observation.\n- preferredReportName: A string indicating the preferred name for reporting the observation.\n- qualifiedInterval: A list of qualified intervals that apply to continuous or ordinal observations.\n- quantitativeDetails: Characteristics related to quantitative results of the observation.\n- validCodedValueSet: A reference to a value set of valid coded values for the observation.\n\nThis constructor also invokes the constructor of the superclass DomainResource to ensure that any inherited attributes and methods are appropriately initialized.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the `as_json` method from the parent class to include the resource type of the instance. It returns a dictionary that contains all the JSON data from the parent class, augmented with the `resourceType` key set to the value of the instance's `resource_type` attribute, which is defined as 'FHIRAbstractResource'.\n\n:return: A dictionary representing the JSON structure of the resource, including its `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/observationdefinition.py": "from . import domainresource\n\nclass ObservationDefinition(domainresource.DomainResource):\n    \"\"\" Definition of an observation.\n    \n    Set of definitional characteristics for a kind of observation or\n    measurement produced or consumed by an orderable health care service.\n    \"\"\"\n    resource_type = 'ObservationDefinition'\n\n    def elementProperties(self):\n        js = super(ObservationDefinition, self).elementProperties()\n        js.extend([('abnormalCodedValueSet', 'abnormalCodedValueSet', fhirreference.FHIRReference, False, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('criticalCodedValueSet', 'criticalCodedValueSet', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('method', 'method', codeableconcept.CodeableConcept, False, None, False), ('multipleResultsAllowed', 'multipleResultsAllowed', bool, False, None, False), ('normalCodedValueSet', 'normalCodedValueSet', fhirreference.FHIRReference, False, None, False), ('permittedDataType', 'permittedDataType', str, True, None, False), ('preferredReportName', 'preferredReportName', str, False, None, False), ('qualifiedInterval', 'qualifiedInterval', ObservationDefinitionQualifiedInterval, True, None, False), ('quantitativeDetails', 'quantitativeDetails', ObservationDefinitionQuantitativeDetails, False, None, False), ('validCodedValueSet', 'validCodedValueSet', fhirreference.FHIRReference, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ObservationDefinitionQualifiedInterval(backboneelement.BackboneElement):\n    \"\"\" Qualified range for continuous and ordinal observation results.\n    \n    Multiple  ranges of results qualified by different contexts for ordinal or\n    continuous observations conforming to this ObservationDefinition.\n    \"\"\"\n    resource_type = 'ObservationDefinitionQualifiedInterval'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.age = None\n        ' Applicable age range, if relevant.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.appliesTo = None\n        ' Targetted population of the range.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.category = None\n        ' reference | critical | absolute.\\n        Type `str`. '\n        self.condition = None\n        ' Condition associated with the reference range.\\n        Type `str`. '\n        self.context = None\n        ' Range context qualifier.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.gender = None\n        ' male | female | other | unknown.\\n        Type `str`. '\n        self.gestationalAge = None\n        ' Applicable gestational age range, if relevant.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.range = None\n        ' The interval itself, for continuous or ordinal observations.\\n        Type `Range` (represented as `dict` in JSON). '\n        super(ObservationDefinitionQualifiedInterval, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ObservationDefinitionQualifiedInterval, self).elementProperties()\n        js.extend([('age', 'age', range.Range, False, None, False), ('appliesTo', 'appliesTo', codeableconcept.CodeableConcept, True, None, False), ('category', 'category', str, False, None, False), ('condition', 'condition', str, False, None, False), ('context', 'context', codeableconcept.CodeableConcept, False, None, False), ('gender', 'gender', str, False, None, False), ('gestationalAge', 'gestationalAge', range.Range, False, None, False), ('range', 'range', range.Range, False, None, False)])\n        return js\n\nclass ObservationDefinitionQuantitativeDetails(backboneelement.BackboneElement):\n    \"\"\" Characteristics of quantitative results.\n    \n    Characteristics for quantitative results of this observation.\n    \"\"\"\n    resource_type = 'ObservationDefinitionQuantitativeDetails'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.conversionFactor = None\n        ' SI to Customary unit conversion factor.\\n        Type `float`. '\n        self.customaryUnit = None\n        ' Customary unit for quantitative results.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.decimalPrecision = None\n        ' Decimal precision of observation quantitative results.\\n        Type `int`. '\n        self.unit = None\n        ' SI unit for quantitative results.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ObservationDefinitionQuantitativeDetails, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ObservationDefinitionQuantitativeDetails, self).elementProperties()\n        js.extend([('conversionFactor', 'conversionFactor', float, False, None, False), ('customaryUnit', 'customaryUnit', codeableconcept.CodeableConcept, False, None, False), ('decimalPrecision', 'decimalPrecision', int, False, None, False), ('unit', 'unit', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import range",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}