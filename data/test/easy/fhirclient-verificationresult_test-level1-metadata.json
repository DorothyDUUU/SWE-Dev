{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-verificationresult_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/verificationresult_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import verificationresult\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass VerificationResultTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"VerificationResult\", js[\"resourceType\"])\n        return verificationresult.VerificationResult(js)\n    \n    def testVerificationResult1(self):\n        inst = self.instantiate_from(\"verificationresult-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a VerificationResult instance\")\n        self.implVerificationResult1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"VerificationResult\", js[\"resourceType\"])\n        inst2 = verificationresult.VerificationResult(js)\n        self.implVerificationResult1(inst2)\n    \n    def implVerificationResult1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"attested\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>status</b>: attested</p></div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/verificationresult.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/VerificationResult).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass VerificationResult(domainresource.DomainResource):\n    \"\"\" Describes validation requirements, source(s), status and dates for one or\n    more elements.\n    \"\"\"\n    \n    resource_type = \"VerificationResult\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.attestation = None\n        \"\"\" Information about the entity attesting to information.\n        Type `VerificationResultAttestation` (represented as `dict` in JSON). \"\"\"\n        \n        self.failureAction = None\n        \"\"\" fatal | warn | rec-only | none.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.frequency = None\n        \"\"\" Frequency of revalidation.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.lastPerformed = None\n        \"\"\" The date/time validation was last completed (including failed\n        validations).\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.need = None\n        \"\"\" none | initial | periodic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.nextScheduled = None\n        \"\"\" The date when target is next validated, if appropriate.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.primarySource = None\n        \"\"\" Information about the primary source(s) involved in validation.\n        List of `VerificationResultPrimarySource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" attested | validated | in-process | req-revalid | val-fail | reval-\n        fail.\n        Type `str`. \"\"\"\n        \n        self.statusDate = None\n        \"\"\" When the validation status was updated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" A resource that was validated.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.targetLocation = None\n        \"\"\" The fhirpath location(s) within the resource that was validated.\n        List of `str` items. \"\"\"\n        \n        self.validationProcess = None\n        \"\"\" The primary process by which the target is validated (edit check;\n        value set; primary source; multiple sources; standalone; in\n        context).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.validationType = None\n        \"\"\" nothing | primary | multiple.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.validator = None\n        \"\"\" Information about the entity validating information.\n        List of `VerificationResultValidator` items (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResult, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResult, self).elementProperties()\n        js.extend([\n            (\"attestation\", \"attestation\", VerificationResultAttestation, False, None, False),\n            (\"failureAction\", \"failureAction\", codeableconcept.CodeableConcept, False, None, False),\n            (\"frequency\", \"frequency\", timing.Timing, False, None, False),\n            (\"lastPerformed\", \"lastPerformed\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"need\", \"need\", codeableconcept.CodeableConcept, False, None, False),\n            (\"nextScheduled\", \"nextScheduled\", fhirdate.FHIRDate, False, None, False),\n            (\"primarySource\", \"primarySource\", VerificationResultPrimarySource, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusDate\", \"statusDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"target\", \"target\", fhirreference.FHIRReference, True, None, False),\n            (\"targetLocation\", \"targetLocation\", str, True, None, False),\n            (\"validationProcess\", \"validationProcess\", codeableconcept.CodeableConcept, True, None, False),\n            (\"validationType\", \"validationType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"validator\", \"validator\", VerificationResultValidator, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass VerificationResultAttestation(backboneelement.BackboneElement):\n    \"\"\" Information about the entity attesting to information.\n    \"\"\"\n    \n    resource_type = \"VerificationResultAttestation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.communicationMethod = None\n        \"\"\" The method by which attested information was submitted/retrieved.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" The date the information was attested to.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.onBehalfOf = None\n        \"\"\" When the who is asserting on behalf of another (organization or\n        individual).\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.proxyIdentityCertificate = None\n        \"\"\" A digital identity certificate associated with the proxy entity\n        submitting attested information on behalf of the attestation source.\n        Type `str`. \"\"\"\n        \n        self.proxySignature = None\n        \"\"\" Proxy signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.sourceIdentityCertificate = None\n        \"\"\" A digital identity certificate associated with the attestation\n        source.\n        Type `str`. \"\"\"\n        \n        self.sourceSignature = None\n        \"\"\" Attester signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.who = None\n        \"\"\" The individual or organization attesting to information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultAttestation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultAttestation, self).elementProperties()\n        js.extend([\n            (\"communicationMethod\", \"communicationMethod\", codeableconcept.CodeableConcept, False, None, False),\n            (\"date\", \"date\", fhirdate.FHIRDate, False, None, False),\n            (\"onBehalfOf\", \"onBehalfOf\", fhirreference.FHIRReference, False, None, False),\n            (\"proxyIdentityCertificate\", \"proxyIdentityCertificate\", str, False, None, False),\n            (\"proxySignature\", \"proxySignature\", signature.Signature, False, None, False),\n            (\"sourceIdentityCertificate\", \"sourceIdentityCertificate\", str, False, None, False),\n            (\"sourceSignature\", \"sourceSignature\", signature.Signature, False, None, False),\n            (\"who\", \"who\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass VerificationResultPrimarySource(backboneelement.BackboneElement):\n    \"\"\" Information about the primary source(s) involved in validation.\n    \"\"\"\n    \n    resource_type = \"VerificationResultPrimarySource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.canPushUpdates = None\n        \"\"\" yes | no | undetermined.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.communicationMethod = None\n        \"\"\" Method for exchanging information with the primary source.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.pushTypeAvailable = None\n        \"\"\" specific | any | source.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of primary source (License Board; Primary Education;\n        Continuing Education; Postal Service; Relationship owner;\n        Registration Authority; legal source; issuing source; authoritative\n        source).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.validationDate = None\n        \"\"\" When the target was validated against the primary source.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.validationStatus = None\n        \"\"\" successful | failed | unknown.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.who = None\n        \"\"\" Reference to the primary source.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultPrimarySource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultPrimarySource, self).elementProperties()\n        js.extend([\n            (\"canPushUpdates\", \"canPushUpdates\", codeableconcept.CodeableConcept, False, None, False),\n            (\"communicationMethod\", \"communicationMethod\", codeableconcept.CodeableConcept, True, None, False),\n            (\"pushTypeAvailable\", \"pushTypeAvailable\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n            (\"validationDate\", \"validationDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"validationStatus\", \"validationStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"who\", \"who\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass VerificationResultValidator(backboneelement.BackboneElement):\n    \"\"\" Information about the entity validating information.\n    \"\"\"\n    \n    resource_type = \"VerificationResultValidator\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.attestationSignature = None\n        \"\"\" Validator signature.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.identityCertificate = None\n        \"\"\" A digital identity certificate associated with the validator.\n        Type `str`. \"\"\"\n        \n        self.organization = None\n        \"\"\" Reference to the organization validating information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(VerificationResultValidator, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VerificationResultValidator, self).elementProperties()\n        js.extend([\n            (\"attestationSignature\", \"attestationSignature\", signature.Signature, False, None, False),\n            (\"identityCertificate\", \"identityCertificate\", str, False, None, False),\n            (\"organization\", \"organization\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import signature\nfrom . import timing\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the current FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` of the current class instance in the resulting JSON dictionary. It ensures that the JSON representation conforms to the expectations of FHIR resources.\n\nReturns:\n    dict: A JSON-compatible representation of the resource, including a key \"resourceType\" that holds the class's `resource_type` attribute (which is set to 'FHIRAbstractResource').\n\nDependencies:\n    - The method relies on the superclass's `as_json()` method for the base JSON structure.\n    - `resource_type` is a class attribute defined in the FHIRAbstractResource class itself.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the current FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` of the current class instance in the resulting JSON dictionary. It ensures that the JSON representation conforms to the expectations of FHIR resources.\n\nReturns:\n    dict: A JSON-compatible representation of the resource, including a key \"resourceType\" that holds the class's `resource_type` attribute (which is set to 'FHIRAbstractResource').\n\nDependencies:\n    - The method relies on the superclass's `as_json()` method for the base JSON structure.\n    - `resource_type` is a class attribute defined in the FHIRAbstractResource class itself.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/verificationresult.py": {
      "VerificationResult.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialization method for the VerificationResult class, which represents the validation status and requirements for one or more resources in the FHIR specification. This method sets up attributes related to the verification process, including details about attestation, failure actions, validation frequency, and sources involved in the validation.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the object's attributes, conforming to the FHIR structure.\n- strict (bool, optional): If set to True (default), will raise a TypeError for invalid variables during initialization. If False, it allows for some leniency in attribute validation.\n\nAttributes initialized include:\n- attestation: Information about the entity attesting to the validation (VerificationResultAttestation).\n- failureAction: Specifies the action to take in case of validation failure (CodeableConcept).\n- frequency: Describes how often revalidation should occur (Timing).\n- lastPerformed: Date and time of the last validation attempt (FHIRDateTime).\n- need: Indicates whether validation is required none, initially, or periodically (CodeableConcept).\n- nextScheduled: Date for the next scheduled validation (FHIRDate).\n- primarySource: List of primary sources involved in the validation process (VerificationResultPrimarySource).\n- status: The current validation status as a string.\n- statusDate: The date the validation status was last updated (FHIRDateTime).\n- target: Resources being validated (FHIRReference).\n- targetLocation: Locations within the resource that were validated (list of str).\n- validationProcess: Describes the process by which validation is conducted (list of CodeableConcept).\n- validationType: Classification of the validation type (CodeableConcept).\n- validator: Information about the entity that validates the information (list of VerificationResultValidator).\n\nThis method builds on the functionality of the superclass DomainResource, capturing all attributes needed for the FHIR verification process while also providing validation defaults.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.attestation = None\n        ' Information about the entity attesting to information.\\n        Type `VerificationResultAttestation` (represented as `dict` in JSON). '\n        self.failureAction = None\n        ' fatal | warn | rec-only | none.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.frequency = None\n        ' Frequency of revalidation.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.lastPerformed = None\n        ' The date/time validation was last completed (including failed\\n        validations).\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.need = None\n        ' none | initial | periodic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.nextScheduled = None\n        ' The date when target is next validated, if appropriate.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.primarySource = None\n        ' Information about the primary source(s) involved in validation.\\n        List of `VerificationResultPrimarySource` items (represented as `dict` in JSON). '\n        self.status = None\n        ' attested | validated | in-process | req-revalid | val-fail | reval-\\n        fail.\\n        Type `str`. '\n        self.statusDate = None\n        ' When the validation status was updated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.target = None\n        ' A resource that was validated.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.targetLocation = None\n        ' The fhirpath location(s) within the resource that was validated.\\n        List of `str` items. '\n        self.validationProcess = None\n        ' The primary process by which the target is validated (edit check;\\n        value set; primary source; multiple sources; standalone; in\\n        context).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.validationType = None\n        ' nothing | primary | multiple.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.validator = None\n        ' Information about the entity validating information.\\n        List of `VerificationResultValidator` items (represented as `dict` in JSON). '\n        super(VerificationResult, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialization method for the VerificationResult class, which represents the validation status and requirements for one or more resources in the FHIR specification. This method sets up attributes related to the verification process, including details about attestation, failure actions, validation frequency, and sources involved in the validation.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the object's attributes, conforming to the FHIR structure.\n- strict (bool, optional): If set to True (default), will raise a TypeError for invalid variables during initialization. If False, it allows for some leniency in attribute validation.\n\nAttributes initialized include:\n- attestation: Information about the entity attesting to the validation (VerificationResultAttestation).\n- failureAction: Specifies the action to take in case of validation failure (CodeableConcept).\n- frequency: Describes how often revalidation should occur (Timing).\n- lastPerformed: Date and time of the last validation attempt (FHIRDateTime).\n- need: Indicates whether validation is required none, initially, or periodically (CodeableConcept).\n- nextScheduled: Date for the next scheduled validation (FHIRDate).\n- primarySource: List of primary sources involved in the validation process (VerificationResultPrimarySource).\n- status: The current validation status as a string.\n- statusDate: The date the validation status was last updated (FHIRDateTime).\n- target: Resources being validated (FHIRReference).\n- targetLocation: Locations within the resource that were validated (list of str).\n- validationProcess: Describes the process by which validation is conducted (list of CodeableConcept).\n- validationType: Classification of the validation type (CodeableConcept).\n- validator: Information about the entity that validates the information (list of VerificationResultValidator).\n\nThis method builds on the functionality of the superclass DomainResource, capturing all attributes needed for the FHIR verification process while also providing validation defaults.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class VerificationResult(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/verificationresult_test.py:VerificationResultTests:testVerificationResult1": {
      "tests/models/verificationresult_test.py:VerificationResultTests:instantiate_from": {
        "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/verificationresult_test.py:VerificationResultTests:implVerificationResult1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/verificationresult_test.py:VerificationResultTests:instantiate_from": {
      "fhirclient/models/verificationresult.py:VerificationResult:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/verificationresult.py:VerificationResult:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-verificationresult_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 verificationresult.py\n            \u2514\u2500\u2500 VerificationResult.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the verification and validation of FHIR (Fast Healthcare Interoperability Resources) `VerificationResult` resources, a standardized resource type in the FHIR data model used to capture the outcome and status of information verification within healthcare systems. It enables the instantiation, manipulation, and serialization of `VerificationResult` resources, providing structures to check and ensure the accuracy of associated metadata, status, and narrative. By supporting the automated validation of resources against expected data models and values, this module ensures the integrity and consistency of critical healthcare data, simplifying the development and testing of systems leveraging FHIR standards.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the current FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` of the current class instance in the resulting JSON dictionary. It ensures that the JSON representation conforms to the expectations of FHIR resources.\n\nReturns:\n    dict: A JSON-compatible representation of the resource, including a key \"resourceType\" that holds the class's `resource_type` attribute (which is set to 'FHIRAbstractResource').\n\nDependencies:\n    - The method relies on the superclass's `as_json()` method for the base JSON structure.\n    - `resource_type` is a class attribute defined in the FHIRAbstractResource class itself.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/verificationresult.py\n\n- CLASS METHOD: VerificationResult.__init__\n  - CLASS SIGNATURE: class VerificationResult(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialization method for the VerificationResult class, which represents the validation status and requirements for one or more resources in the FHIR specification. This method sets up attributes related to the verification process, including details about attestation, failure actions, validation frequency, and sources involved in the validation.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the object's attributes, conforming to the FHIR structure.\n- strict (bool, optional): If set to True (default), will raise a TypeError for invalid variables during initialization. If False, it allows for some leniency in attribute validation.\n\nAttributes initialized include:\n- attestation: Information about the entity attesting to the validation (VerificationResultAttestation).\n- failureAction: Specifies the action to take in case of validation failure (CodeableConcept).\n- frequency: Describes how often revalidation should occur (Timing).\n- lastPerformed: Date and time of the last validation attempt (FHIRDateTime).\n- need: Indicates whether validation is required none, initially, or periodically (CodeableConcept).\n- nextScheduled: Date for the next scheduled validation (FHIRDate).\n- primarySource: List of primary sources involved in the validation process (VerificationResultPrimarySource).\n- status: The current validation status as a string.\n- statusDate: The date the validation status was last updated (FHIRDateTime).\n- target: Resources being validated (FHIRReference).\n- targetLocation: Locations within the resource that were validated (list of str).\n- validationProcess: Describes the process by which validation is conducted (list of CodeableConcept).\n- validationType: Classification of the validation type (CodeableConcept).\n- validator: Information about the entity that validates the information (list of VerificationResultValidator).\n\nThis method builds on the functionality of the superclass DomainResource, capturing all attributes needed for the FHIR verification process while also providing validation defaults.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/verificationresult.py": "from . import domainresource\n\nclass VerificationResult(domainresource.DomainResource):\n    \"\"\" Describes validation requirements, source(s), status and dates for one or\n    more elements.\n    \"\"\"\n    resource_type = 'VerificationResult'\n\n    def elementProperties(self):\n        js = super(VerificationResult, self).elementProperties()\n        js.extend([('attestation', 'attestation', VerificationResultAttestation, False, None, False), ('failureAction', 'failureAction', codeableconcept.CodeableConcept, False, None, False), ('frequency', 'frequency', timing.Timing, False, None, False), ('lastPerformed', 'lastPerformed', fhirdatetime.FHIRDateTime, False, None, False), ('need', 'need', codeableconcept.CodeableConcept, False, None, False), ('nextScheduled', 'nextScheduled', fhirdate.FHIRDate, False, None, False), ('primarySource', 'primarySource', VerificationResultPrimarySource, True, None, False), ('status', 'status', str, False, None, True), ('statusDate', 'statusDate', fhirdatetime.FHIRDateTime, False, None, False), ('target', 'target', fhirreference.FHIRReference, True, None, False), ('targetLocation', 'targetLocation', str, True, None, False), ('validationProcess', 'validationProcess', codeableconcept.CodeableConcept, True, None, False), ('validationType', 'validationType', codeableconcept.CodeableConcept, False, None, False), ('validator', 'validator', VerificationResultValidator, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass VerificationResultAttestation(backboneelement.BackboneElement):\n    \"\"\" Information about the entity attesting to information.\n    \"\"\"\n    resource_type = 'VerificationResultAttestation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.communicationMethod = None\n        ' The method by which attested information was submitted/retrieved.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.date = None\n        ' The date the information was attested to.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.onBehalfOf = None\n        ' When the who is asserting on behalf of another (organization or\\n        individual).\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.proxyIdentityCertificate = None\n        ' A digital identity certificate associated with the proxy entity\\n        submitting attested information on behalf of the attestation source.\\n        Type `str`. '\n        self.proxySignature = None\n        ' Proxy signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.sourceIdentityCertificate = None\n        ' A digital identity certificate associated with the attestation\\n        source.\\n        Type `str`. '\n        self.sourceSignature = None\n        ' Attester signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.who = None\n        ' The individual or organization attesting to information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultAttestation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultAttestation, self).elementProperties()\n        js.extend([('communicationMethod', 'communicationMethod', codeableconcept.CodeableConcept, False, None, False), ('date', 'date', fhirdate.FHIRDate, False, None, False), ('onBehalfOf', 'onBehalfOf', fhirreference.FHIRReference, False, None, False), ('proxyIdentityCertificate', 'proxyIdentityCertificate', str, False, None, False), ('proxySignature', 'proxySignature', signature.Signature, False, None, False), ('sourceIdentityCertificate', 'sourceIdentityCertificate', str, False, None, False), ('sourceSignature', 'sourceSignature', signature.Signature, False, None, False), ('who', 'who', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass VerificationResultPrimarySource(backboneelement.BackboneElement):\n    \"\"\" Information about the primary source(s) involved in validation.\n    \"\"\"\n    resource_type = 'VerificationResultPrimarySource'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.canPushUpdates = None\n        ' yes | no | undetermined.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.communicationMethod = None\n        ' Method for exchanging information with the primary source.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.pushTypeAvailable = None\n        ' specific | any | source.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of primary source (License Board; Primary Education;\\n        Continuing Education; Postal Service; Relationship owner;\\n        Registration Authority; legal source; issuing source; authoritative\\n        source).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.validationDate = None\n        ' When the target was validated against the primary source.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.validationStatus = None\n        ' successful | failed | unknown.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.who = None\n        ' Reference to the primary source.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultPrimarySource, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultPrimarySource, self).elementProperties()\n        js.extend([('canPushUpdates', 'canPushUpdates', codeableconcept.CodeableConcept, False, None, False), ('communicationMethod', 'communicationMethod', codeableconcept.CodeableConcept, True, None, False), ('pushTypeAvailable', 'pushTypeAvailable', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False), ('validationDate', 'validationDate', fhirdatetime.FHIRDateTime, False, None, False), ('validationStatus', 'validationStatus', codeableconcept.CodeableConcept, False, None, False), ('who', 'who', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass VerificationResultValidator(backboneelement.BackboneElement):\n    \"\"\" Information about the entity validating information.\n    \"\"\"\n    resource_type = 'VerificationResultValidator'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.attestationSignature = None\n        ' Validator signature.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.identityCertificate = None\n        ' A digital identity certificate associated with the validator.\\n        Type `str`. '\n        self.organization = None\n        ' Reference to the organization validating information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(VerificationResultValidator, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VerificationResultValidator, self).elementProperties()\n        js.extend([('attestationSignature', 'attestationSignature', signature.Signature, False, None, False), ('identityCertificate', 'identityCertificate', str, False, None, False), ('organization', 'organization', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import signature\nfrom . import timing"
  }
}