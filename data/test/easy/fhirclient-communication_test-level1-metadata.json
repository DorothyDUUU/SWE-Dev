{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-communication_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/communication_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import communication\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CommunicationTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Communication\", js[\"resourceType\"])\n        return communication.Communication(js)\n    \n    def testCommunication1(self):\n        inst = self.instantiate_from(\"communication-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Communication instance\")\n        self.implCommunication1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Communication\", js[\"resourceType\"])\n        inst2 = communication.Communication(js)\n        self.implCommunication1(inst2)\n    \n    def implCommunication1(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"Alert\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://acme.org/messagetypes\")\n        self.assertEqual(inst.category[0].text, \"Alert\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"urn:oid:1.3.4.5.6.7\")\n        self.assertEqual(inst.identifier[0].type.text, \"Paging System\")\n        self.assertEqual(inst.identifier[0].value, \"2345678901\")\n        self.assertEqual(inst.instantiatesUri[0], \"http://example.org/hyperkalemia\")\n        self.assertEqual(inst.medium[0].coding[0].code, \"WRITTEN\")\n        self.assertEqual(inst.medium[0].coding[0].display, \"written\")\n        self.assertEqual(inst.medium[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ParticipationMode\")\n        self.assertEqual(inst.medium[0].text, \"written\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.payload[0].contentString, \"Patient 1 has a very high serum potassium value (7.2 mmol/L on 2014-Dec-12 at 5:55 pm)\")\n        self.assertEqual(inst.received.datetime, FHIRDateTime(\"2014-12-12T18:01:11-08:00\").datetime)\n        self.assertEqual(inst.received.as_json(), \"2014-12-12T18:01:11-08:00\")\n        self.assertEqual(inst.sent.datetime, FHIRDateTime(\"2014-12-12T18:01:10-08:00\").datetime)\n        self.assertEqual(inst.sent.as_json(), \"2014-12-12T18:01:10-08:00\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Patient has very high serum potassium</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testCommunication2(self):\n        inst = self.instantiate_from(\"communication-example-fm-attachment.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Communication instance\")\n        self.implCommunication2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Communication\", js[\"resourceType\"])\n        inst2 = communication.Communication(js)\n        self.implCommunication2(inst2)\n    \n    def implCommunication2(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"SolicitedAttachment\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://acme.org/messagetypes\")\n        self.assertEqual(inst.id, \"fm-attachment\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.providerco.com/communication\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.payload[0].contentAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.payload[0].contentAttachment.creation.datetime, FHIRDateTime(\"2010-02-01T11:50:23-05:00\").datetime)\n        self.assertEqual(inst.payload[0].contentAttachment.creation.as_json(), \"2010-02-01T11:50:23-05:00\")\n        self.assertEqual(inst.payload[0].contentAttachment.data, \"SGVsbG8=\")\n        self.assertEqual(inst.payload[0].contentAttachment.title, \"accident notes 20100201.pdf\")\n        self.assertEqual(inst.payload[1].contentAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.payload[1].contentAttachment.creation.datetime, FHIRDateTime(\"2010-02-01T10:57:34+01:00\").datetime)\n        self.assertEqual(inst.payload[1].contentAttachment.creation.as_json(), \"2010-02-01T10:57:34+01:00\")\n        self.assertEqual(inst.payload[1].contentAttachment.hash, \"SGVsbG8gdGhlcmU=\")\n        self.assertEqual(inst.payload[1].contentAttachment.size, 104274)\n        self.assertEqual(inst.payload[1].contentAttachment.url, \"http://example.org/docs/AB12345\")\n        self.assertEqual(inst.sent.datetime, FHIRDateTime(\"2016-06-12T18:01:10-08:00\").datetime)\n        self.assertEqual(inst.sent.as_json(), \"2016-06-12T18:01:10-08:00\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Attachment which is unsolicited</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testCommunication3(self):\n        inst = self.instantiate_from(\"communication-example-fm-solicited-attachment.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Communication instance\")\n        self.implCommunication3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Communication\", js[\"resourceType\"])\n        inst2 = communication.Communication(js)\n        self.implCommunication3(inst2)\n    \n    def implCommunication3(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"SolicitedAttachment\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://acme.org/messagetypes\")\n        self.assertEqual(inst.contained[0].id, \"provider\")\n        self.assertEqual(inst.contained[1].id, \"payor\")\n        self.assertEqual(inst.contained[2].id, \"request\")\n        self.assertEqual(inst.id, \"fm-solicited\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.providerco.com/communication\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.payload[0].contentAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.payload[0].contentAttachment.creation.datetime, FHIRDateTime(\"2010-02-01T11:50:23-05:00\").datetime)\n        self.assertEqual(inst.payload[0].contentAttachment.creation.as_json(), \"2010-02-01T11:50:23-05:00\")\n        self.assertEqual(inst.payload[0].contentAttachment.data, \"SGVsbG8=\")\n        self.assertEqual(inst.payload[0].contentAttachment.title, \"accident notes 20100201.pdf\")\n        self.assertEqual(inst.payload[1].contentAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.payload[1].contentAttachment.creation.datetime, FHIRDateTime(\"2010-02-01T10:57:34+01:00\").datetime)\n        self.assertEqual(inst.payload[1].contentAttachment.creation.as_json(), \"2010-02-01T10:57:34+01:00\")\n        self.assertEqual(inst.payload[1].contentAttachment.hash, \"SGVsbG8gdGhlcmU=\")\n        self.assertEqual(inst.payload[1].contentAttachment.size, 104274)\n        self.assertEqual(inst.payload[1].contentAttachment.url, \"http://happyvalley.com/docs/AB12345\")\n        self.assertEqual(inst.sent.datetime, FHIRDateTime(\"2016-06-12T18:01:10-08:00\").datetime)\n        self.assertEqual(inst.sent.as_json(), \"2016-06-12T18:01:10-08:00\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Attachment in response to a Request</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/communication.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Communication).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Communication(domainresource.DomainResource):\n    \"\"\" A record of information transmitted from a sender to a receiver.\n    \n    An occurrence of information being transmitted; e.g. an alert that was sent\n    to a responsible provider, a public health agency that was notified about a\n    reportable condition.\n    \"\"\"\n    \n    resource_type = \"Communication\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.about = None\n        \"\"\" Resources that pertain to this communication.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Request fulfilled by this communication.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Message category.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.inResponseTo = None\n        \"\"\" Reply to.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Instantiates FHIR protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Instantiates external protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.medium = None\n        \"\"\" A channel of communication.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Comments made about the communication.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.partOf = None\n        \"\"\" Part of this action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.payload = None\n        \"\"\" Message payload.\n        List of `CommunicationPayload` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Indication for message.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why was communication done?.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.received = None\n        \"\"\" When received.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.recipient = None\n        \"\"\" Message recipient.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.sender = None\n        \"\"\" Message sender.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.sent = None\n        \"\"\" When sent.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" preparation | in-progress | not-done | on-hold | stopped |\n        completed | entered-in-error | unknown.\n        Type `str`. \"\"\"\n        \n        self.statusReason = None\n        \"\"\" Reason for current status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" Focus of message.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.topic = None\n        \"\"\" Description of the purpose/content.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(Communication, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Communication, self).elementProperties()\n        js.extend([\n            (\"about\", \"about\", fhirreference.FHIRReference, True, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, True, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"inResponseTo\", \"inResponseTo\", fhirreference.FHIRReference, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, True, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, True, None, False),\n            (\"medium\", \"medium\", codeableconcept.CodeableConcept, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"partOf\", \"partOf\", fhirreference.FHIRReference, True, None, False),\n            (\"payload\", \"payload\", CommunicationPayload, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"received\", \"received\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"recipient\", \"recipient\", fhirreference.FHIRReference, True, None, False),\n            (\"sender\", \"sender\", fhirreference.FHIRReference, False, None, False),\n            (\"sent\", \"sent\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusReason\", \"statusReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CommunicationPayload(backboneelement.BackboneElement):\n    \"\"\" Message payload.\n    \n    Text, attachment(s), or resource(s) that was communicated to the recipient.\n    \"\"\"\n    \n    resource_type = \"CommunicationPayload\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contentAttachment = None\n        \"\"\" Message part content.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentReference = None\n        \"\"\" Message part content.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentString = None\n        \"\"\" Message part content.\n        Type `str`. \"\"\"\n        \n        super(CommunicationPayload, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CommunicationPayload, self).elementProperties()\n        js.extend([\n            (\"contentAttachment\", \"contentAttachment\", attachment.Attachment, False, \"content\", True),\n            (\"contentReference\", \"contentReference\", fhirreference.FHIRReference, False, \"content\", True),\n            (\"contentString\", \"contentString\", str, False, \"content\", True),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a JSON string (`origval`), that value is returned. If not, the method will return the standardized ISO 8601 string representation of the internal date value (`isostring`). The `isostring` property is derived from the `date` attribute of the instance, which is a `datetime.date` representing the JSON date value, or `None` if no valid date was provided at initialization.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a JSON string (`origval`), that value is returned. If not, the method will return the standardized ISO 8601 string representation of the internal date value (`isostring`). The `isostring` property is derived from the `date` attribute of the instance, which is a `datetime.date` representing the JSON date value, or `None` if no valid date was provided at initialization.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/communication.py": {
      "Communication.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Communication resource, representing a record of information transmitted from a sender to a receiver, such as alerts or notifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of the Communication instance. If provided, it will populate the instance's attributes with corresponding values.\n- strict (bool, default=True): If True, raises a FHIRValidationError on validation issues; otherwise, allows for relaxation of type constraints.\n\nAttributes:\n- about: List of resources that pertain to this communication (FHIRReference).\n- basedOn: List of requests fulfilled by this communication (FHIRReference).\n- category: Message category (CodeableConcept).\n- encounter: Encounter associated with this communication (FHIRReference).\n- identifier: Unique identifier(s) for the communication (Identifier).\n- inResponseTo: List of replies (FHIRReference).\n- instantiatesCanonical: List of FHIR protocols or definitions that the communication instantiates (str).\n- instantiatesUri: List of external protocols or definitions that the communication instantiates (str).\n- medium: List of communication channels used (CodeableConcept).\n- note: List of comments regarding the communication (Annotation).\n- partOf: List of actions of which this communication is a part (FHIRReference).\n- payload: List of message content (CommunicationPayload).\n- priority: Communication priority (str).\n- reasonCode: List of indications for the message (CodeableConcept).\n- reasonReference: List explaining why communication was performed (FHIRReference).\n- received: Date and time when the communication was received (FHIRDateTime).\n- recipient: List of message recipients (FHIRReference).\n- sender: The sender of the message (FHIRReference).\n- sent: Date and time when the communication was sent (FHIRDateTime).\n- status: Current status of the communication (str).\n- statusReason: Reason for the current status (CodeableConcept).\n- subject: Focus of the message (FHIRReference).\n- topic: Description of the purpose or content (CodeableConcept).\n\nThis class is part of the FHIR specification and extends the DomainResource class from the domainresource module, encapsulating the essential attributes and behaviors needed for managing communication records in health information systems.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.about = None\n        ' Resources that pertain to this communication.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.basedOn = None\n        ' Request fulfilled by this communication.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.category = None\n        ' Message category.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.inResponseTo = None\n        ' Reply to.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Instantiates FHIR protocol or definition.\\n        List of `str` items. '\n        self.instantiatesUri = None\n        ' Instantiates external protocol or definition.\\n        List of `str` items. '\n        self.medium = None\n        ' A channel of communication.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Comments made about the communication.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.partOf = None\n        ' Part of this action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.payload = None\n        ' Message payload.\\n        List of `CommunicationPayload` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reasonCode = None\n        ' Indication for message.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why was communication done?.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.received = None\n        ' When received.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.recipient = None\n        ' Message recipient.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.sender = None\n        ' Message sender.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.sent = None\n        ' When sent.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.status = None\n        ' preparation | in-progress | not-done | on-hold | stopped |\\n        completed | entered-in-error | unknown.\\n        Type `str`. '\n        self.statusReason = None\n        ' Reason for current status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subject = None\n        ' Focus of message.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.topic = None\n        ' Description of the purpose/content.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(Communication, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Communication resource, representing a record of information transmitted from a sender to a receiver, such as alerts or notifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of the Communication instance. If provided, it will populate the instance's attributes with corresponding values.\n- strict (bool, default=True): If True, raises a FHIRValidationError on validation issues; otherwise, allows for relaxation of type constraints.\n\nAttributes:\n- about: List of resources that pertain to this communication (FHIRReference).\n- basedOn: List of requests fulfilled by this communication (FHIRReference).\n- category: Message category (CodeableConcept).\n- encounter: Encounter associated with this communication (FHIRReference).\n- identifier: Unique identifier(s) for the communication (Identifier).\n- inResponseTo: List of replies (FHIRReference).\n- instantiatesCanonical: List of FHIR protocols or definitions that the communication instantiates (str).\n- instantiatesUri: List of external protocols or definitions that the communication instantiates (str).\n- medium: List of communication channels used (CodeableConcept).\n- note: List of comments regarding the communication (Annotation).\n- partOf: List of actions of which this communication is a part (FHIRReference).\n- payload: List of message content (CommunicationPayload).\n- priority: Communication priority (str).\n- reasonCode: List of indications for the message (CodeableConcept).\n- reasonReference: List explaining why communication was performed (FHIRReference).\n- received: Date and time when the communication was received (FHIRDateTime).\n- recipient: List of message recipients (FHIRReference).\n- sender: The sender of the message (FHIRReference).\n- sent: Date and time when the communication was sent (FHIRDateTime).\n- status: Current status of the communication (str).\n- statusReason: Reason for the current status (CodeableConcept).\n- subject: Focus of the message (FHIRReference).\n- topic: Description of the purpose or content (CodeableConcept).\n\nThis class is part of the FHIR specification and extends the DomainResource class from the domainresource module, encapsulating the essential attributes and behaviors needed for managing communication records in health information systems.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Communication(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new FHIRDateTime instance.\n\nThis constructor initializes the datetime attribute to None and calls the superclass\nconstructor (FHIRDate) with the provided jsonval parameter. The jsonval can be a string\nrepresenting a FHIR datetime or None. The FHIRDateTime class is designed to facilitate\nworking with FHIR datetime representations while handling certain compromises related to \nPython's datetime capabilities.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a FHIR datetime, or None. \n  This value is passed to the parent class FHIRDate for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and \n  intended to hold the Python datetime representation of the FHIR datetime.\n\nDependencies:\n- FHIRDate: The superclass for FHIRDateTime, which provides the basic functionality \n  for parsing and handling FHIR date formats.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new FHIRDateTime instance.\n\nThis constructor initializes the datetime attribute to None and calls the superclass\nconstructor (FHIRDate) with the provided jsonval parameter. The jsonval can be a string\nrepresenting a FHIR datetime or None. The FHIRDateTime class is designed to facilitate\nworking with FHIR datetime representations while handling certain compromises related to \nPython's datetime capabilities.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a FHIR datetime, or None. \n  This value is passed to the parent class FHIRDate for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and \n  intended to hold the Python datetime representation of the FHIR datetime.\n\nDependencies:\n- FHIRDate: The superclass for FHIRDateTime, which provides the basic functionality \n  for parsing and handling FHIR date formats.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` property, which specifies the type of the resource. It constructs the JSON representation by first calling the superclass's `as_json` method and then adding the `resourceType` derived from the class attribute `resource_type`.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on the `super()` call to `as_json` from `FHIRAbstractBase`, which must also provide a valid JSON dictionary structure for the resource.\n    - The class attribute `resource_type` is defined in the FHIRAbstractResource class and indicates the type of resource being serialized to JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` property, which specifies the type of the resource. It constructs the JSON representation by first calling the superclass's `as_json` method and then adding the `resourceType` derived from the class attribute `resource_type`.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on the `super()` call to `as_json` from `FHIRAbstractBase`, which must also provide a valid JSON dictionary structure for the resource.\n    - The class attribute `resource_type` is defined in the FHIRAbstractResource class and indicates the type of resource being serialized to JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/communication.py:Communication:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/communication_test.py:CommunicationTests:testCommunication1": {
      "tests/models/communication_test.py:CommunicationTests:instantiate_from": {
        "fhirclient/models/communication.py:Communication:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/communication.py:Communication:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/communication_test.py:CommunicationTests:implCommunication1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/communication.py:Communication:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/communication.py:Communication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/communication.py:Communication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/communication_test.py:CommunicationTests:instantiate_from": {
      "fhirclient/models/communication.py:Communication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/communication.py:Communication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/communication_test.py:CommunicationTests:testCommunication2": {
      "tests/models/communication_test.py:CommunicationTests:instantiate_from": {
        "fhirclient/models/communication.py:Communication:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/communication.py:Communication:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/communication_test.py:CommunicationTests:implCommunication2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/communication.py:Communication:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/communication.py:Communication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/communication.py:Communication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/communication_test.py:CommunicationTests:testCommunication3": {
      "tests/models/communication_test.py:CommunicationTests:instantiate_from": {
        "fhirclient/models/communication.py:Communication:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/communication.py:Communication:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/communication_test.py:CommunicationTests:implCommunication3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/communication.py:Communication:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/communication.py:Communication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/communication.py:Communication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-communication_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 communication.py\n        \u2502   \u2514\u2500\u2500 Communication.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for testing and validating the implementation of the FHIR (Fast Healthcare Interoperability Resources) Communication resource, which is used to represent exchanges of information in a healthcare context. It ensures that Communication instances adhere to the FHIR standard by verifying consistency of key attributes, such as identifiers, categories, status, payloads, and metadata. Additionally, the module supports testing for complex real-world scenarios, such as message alerts, unsolicited attachments, and solicited responses, enabling robust validation of diverse use cases. This module aids developers in ensuring compliance with FHIR specifications, reducing integration issues and improving interoperability within healthcare systems.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a JSON string (`origval`), that value is returned. If not, the method will return the standardized ISO 8601 string representation of the internal date value (`isostring`). The `isostring` property is derived from the `date` attribute of the instance, which is a `datetime.date` representing the JSON date value, or `None` if no valid date was provided at initialization.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/communication.py\n\n- CLASS METHOD: Communication.__init__\n  - CLASS SIGNATURE: class Communication(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Communication resource, representing a record of information transmitted from a sender to a receiver, such as alerts or notifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of the Communication instance. If provided, it will populate the instance's attributes with corresponding values.\n- strict (bool, default=True): If True, raises a FHIRValidationError on validation issues; otherwise, allows for relaxation of type constraints.\n\nAttributes:\n- about: List of resources that pertain to this communication (FHIRReference).\n- basedOn: List of requests fulfilled by this communication (FHIRReference).\n- category: Message category (CodeableConcept).\n- encounter: Encounter associated with this communication (FHIRReference).\n- identifier: Unique identifier(s) for the communication (Identifier).\n- inResponseTo: List of replies (FHIRReference).\n- instantiatesCanonical: List of FHIR protocols or definitions that the communication instantiates (str).\n- instantiatesUri: List of external protocols or definitions that the communication instantiates (str).\n- medium: List of communication channels used (CodeableConcept).\n- note: List of comments regarding the communication (Annotation).\n- partOf: List of actions of which this communication is a part (FHIRReference).\n- payload: List of message content (CommunicationPayload).\n- priority: Communication priority (str).\n- reasonCode: List of indications for the message (CodeableConcept).\n- reasonReference: List explaining why communication was performed (FHIRReference).\n- received: Date and time when the communication was received (FHIRDateTime).\n- recipient: List of message recipients (FHIRReference).\n- sender: The sender of the message (FHIRReference).\n- sent: Date and time when the communication was sent (FHIRDateTime).\n- status: Current status of the communication (str).\n- statusReason: Reason for the current status (CodeableConcept).\n- subject: Focus of the message (FHIRReference).\n- topic: Description of the purpose or content (CodeableConcept).\n\nThis class is part of the FHIR specification and extends the DomainResource class from the domainresource module, encapsulating the essential attributes and behaviors needed for managing communication records in health information systems.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new FHIRDateTime instance.\n\nThis constructor initializes the datetime attribute to None and calls the superclass\nconstructor (FHIRDate) with the provided jsonval parameter. The jsonval can be a string\nrepresenting a FHIR datetime or None. The FHIRDateTime class is designed to facilitate\nworking with FHIR datetime representations while handling certain compromises related to \nPython's datetime capabilities.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a FHIR datetime, or None. \n  This value is passed to the parent class FHIRDate for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and \n  intended to hold the Python datetime representation of the FHIR datetime.\n\nDependencies:\n- FHIRDate: The superclass for FHIRDateTime, which provides the basic functionality \n  for parsing and handling FHIR date formats.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` property, which specifies the type of the resource. It constructs the JSON representation by first calling the superclass's `as_json` method and then adding the `resourceType` derived from the class attribute `resource_type`.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on the `super()` call to `as_json` from `FHIRAbstractBase`, which must also provide a valid JSON dictionary structure for the resource.\n    - The class attribute `resource_type` is defined in the FHIRAbstractResource class and indicates the type of resource being serialized to JSON.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/communication.py": "from . import domainresource\n\nclass Communication(domainresource.DomainResource):\n    \"\"\" A record of information transmitted from a sender to a receiver.\n    \n    An occurrence of information being transmitted; e.g. an alert that was sent\n    to a responsible provider, a public health agency that was notified about a\n    reportable condition.\n    \"\"\"\n    resource_type = 'Communication'\n\n    def elementProperties(self):\n        js = super(Communication, self).elementProperties()\n        js.extend([('about', 'about', fhirreference.FHIRReference, True, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('inResponseTo', 'inResponseTo', fhirreference.FHIRReference, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('medium', 'medium', codeableconcept.CodeableConcept, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('payload', 'payload', CommunicationPayload, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('received', 'received', fhirdatetime.FHIRDateTime, False, None, False), ('recipient', 'recipient', fhirreference.FHIRReference, True, None, False), ('sender', 'sender', fhirreference.FHIRReference, False, None, False), ('sent', 'sent', fhirdatetime.FHIRDateTime, False, None, False), ('status', 'status', str, False, None, True), ('statusReason', 'statusReason', codeableconcept.CodeableConcept, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass CommunicationPayload(backboneelement.BackboneElement):\n    \"\"\" Message payload.\n    \n    Text, attachment(s), or resource(s) that was communicated to the recipient.\n    \"\"\"\n    resource_type = 'CommunicationPayload'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.contentAttachment = None\n        ' Message part content.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.contentReference = None\n        ' Message part content.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.contentString = None\n        ' Message part content.\\n        Type `str`. '\n        super(CommunicationPayload, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CommunicationPayload, self).elementProperties()\n        js.extend([('contentAttachment', 'contentAttachment', attachment.Attachment, False, 'content', True), ('contentReference', 'contentReference', fhirreference.FHIRReference, False, 'content', True), ('contentString', 'contentString', str, False, 'content', True)])\n        return js\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}