{
  "dir_path": "/app/advertools",
  "package_name": "advertools",
  "sample_name": "advertools-test_ad_create",
  "src_dir": "advertools/",
  "test_dir": "tests/",
  "test_file": "tests/test_ad_create.py",
  "test_code": "from advertools.ad_create import ad_create\n\nimport pytest\n\n\ndef test_raises_error_for_long_input_strings():\n    with pytest.raises(ValueError):\n        ad_create('short template {}', ['one', 'two', 'three'],\n                  'very long fallback string', 20)\n    with pytest.raises(ValueError):\n        ad_create('very long template string {}', ['one', 'two', 'three'],\n                  'short', 20)\n\n\ndef test_all_replacements_used():\n    replacements = ['one', 'two', 'three']\n    result = ad_create('Hello {}', replacements, 'fallback', capitalize=False)\n    assert all([rep in ' '.join(result) for rep in replacements])\n\n\ndef test_fallback_used_if_string_long():\n    replacements = ['one', 'two', 'three hundrend thousand']\n    result = ad_create('Hello {}', replacements, 'fallback', max_len=20,\n                       capitalize=False)\n    assert result == ['Hello one', 'Hello two', 'Hello fallback']\n\n\ndef test_final_string_capitalized_or_not():\n    capitalized = ad_create('heLLo {}', ['ONE', 'tWo', 'tHree', 'Four'],\n                            'fallback', capitalize=True)\n    not_capitalized = ad_create('heLLo {}', ['ONE', 'tWo', 'tHree', 'Four'],\n                                'fallback', capitalize=False)\n    assert capitalized == ['Hello One', 'Hello Two', 'Hello Three',\n                           'Hello Four']\n    assert not_capitalized == ['heLLo ONE', 'heLLo tWo', 'heLLo tHree',\n                               'heLLo Four']\n",
  "GT_file_code": {
    "advertools/ad_create.py": "\"\"\"\n.. _ad_create:\n\nCreate Ads on a Large Scale\n===========================\n\nWhen creating large-scale campaigns, you also need to create ads on a large\nscale. For products in a similar category you typically want to use the same\nads, but only replace the product name, \"Get the latest <product> now\", and\nreplace `product` as many times as you have ads.\n\n.. container:: thebe\n\n    .. thebe-button::\n        Run this code\n\n\n    .. code-block::\n        :class: thebe, thebe-init\n\n        import advertools as adv\n\n        products = ['Dubai', 'Tokyo', 'Singapore']\n        adv.ad_create(template='5-star Hotels in {}',\n                    replacements=products,\n                    max_len=30,\n                    fallback='Great Cities')\n\n    .. container:: output\n\n        .. code-block::\n\n            ['5-star Hotels In Dubai',\n            '5-star Hotels In Tokyo',\n            '5-star Hotels In Singapore']\n\nAn important thing to to watch out for, is long product names. Since text ads\nhave limits on each slot, you need to make sure you don't exceed that limit.\nFor this you need to provide a `fallback` text in case the product name is\nlonger than `max_len`.\n\n.. container:: thebe\n\n    .. thebe-button::\n        Run this code\n\n    .. code-block::\n        :class: thebe, thebe-init\n\n        products = ['Lisbon', 'Porto', 'Algarve', 'Freixo de Espada \u00e0 Cinta']\n        adv.ad_create(template='5-star Hotels in {}',\n                    replacements=products,\n                    max_len=30,\n                    fallback='Portugal')\n    .. container:: output\n\n        .. code-block::\n\n            ['5-star Hotels In Lisbon',\n            '5-star Hotels In Porto',\n            '5-star Hotels In Algarve',\n            '5-star Hotels In Portugal']\n\n\"\"\"\n\nimport string\n\n\ndef ad_create(template, replacements, fallback, max_len=30, capitalize=True):\n    \"\"\"Insert each of the replacement strings in its place within template.\n\n    Parameters\n    ----------\n    template : str\n      A string format template, using braces e.g. \"Get the latest {} today.\"\n    replacements : list\n      Replacement strings to be inserted in :attr:`template`.\n    fallback : str\n      The string to insert in :attr:`template` in case :attr:`replacement` is longer\n      than :attr:`max_len`.\n    max_len : int\n      The maximum allowed length of the full string.\n    capitalize : bool\n      Whether or not to capitalize words in the result.\n\n    Returns\n    -------\n    formatted : list\n      List of ads (strings).\n\n    Examples\n    --------\n    >>> ad_create(\"Let's count {}\", [\"one\", \"two\", \"three\"], \"one\", 20)\n    [\"Let's Count One\", \"Let's Count Two\", \"Let's Count Three\"]\n\n    >>> ad_create(\n    ...     template=\"My favorite car is {}\",\n    ...     replacements=[\"Toyota\", \"BMW\", \"Mercedes\", \"Lamborghini\"],\n    ...     fallback=\"great\",\n    ...     max_len=28,\n    ... )\n    ['My Favorite Car Is Toyota', 'My Favorite Car Is Bmw',\n    'My Favorite Car Is Mercedes', 'My Favorite Car Is Great']\n\n    >>> ad_create(\n    ...     \"KeEP cApITalization {}\",\n    ...     [\"As IS\"],\n    ...     fallback=\"fallback\",\n    ...     max_len=50,\n    ...     capitalize=False,\n    ... )\n    ['KeEP cApITalization As IS']\n\n    >>> ad_create(\n    ...     \"This is very long and will produce and error\",\n    ...     replacements=[\"something\", \"long\"],\n    ...     fallback=\"Very long\",\n    ...     max_len=20,\n    ... )\n    Traceback (most recent call last):\n    File \"<input>\", line 1, in <module>\n    File \"<input>\", line 26, in ad_create\n    ValueError: template + fallback should be <= 20 chars\n    \"\"\"\n    if len(template.format(fallback)) > max_len:\n        raise ValueError(\"template + fallback should be <= \" + str(max_len) + \" chars\")\n    final_ad = []\n    for rep in replacements:\n        if len(template.format(rep)) <= max_len:\n            final_ad.append(template.format(rep))\n        else:\n            final_ad.append(template.format(fallback))\n\n    return [string.capwords(s) for s in final_ad] if capitalize else final_ad\n"
  },
  "GT_src_dict": {
    "advertools/ad_create.py": {
      "ad_create": {
        "code": "def ad_create(template, replacements, fallback, max_len=30, capitalize=True):\n    \"\"\"Generate a list of ads by inserting replacement strings into a specified template and ensuring the resulting ads do not exceed a maximum length.\n\nParameters\n----------\ntemplate : str\n    A format string utilizing braces (e.g., \"Get the latest {} today.\") where replacements will be inserted.\nreplacements : list\n    A list of strings to be substituted into the template.\nfallback : str\n    A string to use in place of any replacement that results in an ad exceeding `max_len`.\nmax_len : int, optional\n    The maximum allowed length for the generated ads (default is 30).\ncapitalize : bool, optional\n    A flag indicating whether to capitalize the first letter of each word in the resulting ads (default is True).\n\nReturns\n-------\nlist\n    A list of formatted ad strings based on the template and replacements, or the fallback string if any formatted string exceeds the length limit.\n\nRaises\n------\nValueError\n    If the combined length of the template and the fallback exceeds the specified `max_len`.\n\nNotes\n-----\nThe function leverages the `string.capwords` function to capitalize words in the result if the capitalize parameter is set to True. If a formatted ad exceeds the `max_len`, the fallback string is used instead. Careful consideration is needed to ensure that the template plus the fallback string adheres to the `max_len` constraint to avoid raising an error.\"\"\"\n    'Insert each of the replacement strings in its place within template.\\n\\n    Parameters\\n    ----------\\n    template : str\\n      A string format template, using braces e.g. \"Get the latest {} today.\"\\n    replacements : list\\n      Replacement strings to be inserted in :attr:`template`.\\n    fallback : str\\n      The string to insert in :attr:`template` in case :attr:`replacement` is longer\\n      than :attr:`max_len`.\\n    max_len : int\\n      The maximum allowed length of the full string.\\n    capitalize : bool\\n      Whether or not to capitalize words in the result.\\n\\n    Returns\\n    -------\\n    formatted : list\\n      List of ads (strings).\\n\\n    Examples\\n    --------\\n    >>> ad_create(\"Let\\'s count {}\", [\"one\", \"two\", \"three\"], \"one\", 20)\\n    [\"Let\\'s Count One\", \"Let\\'s Count Two\", \"Let\\'s Count Three\"]\\n\\n    >>> ad_create(\\n    ...     template=\"My favorite car is {}\",\\n    ...     replacements=[\"Toyota\", \"BMW\", \"Mercedes\", \"Lamborghini\"],\\n    ...     fallback=\"great\",\\n    ...     max_len=28,\\n    ... )\\n    [\\'My Favorite Car Is Toyota\\', \\'My Favorite Car Is Bmw\\',\\n    \\'My Favorite Car Is Mercedes\\', \\'My Favorite Car Is Great\\']\\n\\n    >>> ad_create(\\n    ...     \"KeEP cApITalization {}\",\\n    ...     [\"As IS\"],\\n    ...     fallback=\"fallback\",\\n    ...     max_len=50,\\n    ...     capitalize=False,\\n    ... )\\n    [\\'KeEP cApITalization As IS\\']\\n\\n    >>> ad_create(\\n    ...     \"This is very long and will produce and error\",\\n    ...     replacements=[\"something\", \"long\"],\\n    ...     fallback=\"Very long\",\\n    ...     max_len=20,\\n    ... )\\n    Traceback (most recent call last):\\n    File \"<input>\", line 1, in <module>\\n    File \"<input>\", line 26, in ad_create\\n    ValueError: template + fallback should be <= 20 chars\\n    '\n    if len(template.format(fallback)) > max_len:\n        raise ValueError('template + fallback should be <= ' + str(max_len) + ' chars')\n    final_ad = []\n    for rep in replacements:\n        if len(template.format(rep)) <= max_len:\n            final_ad.append(template.format(rep))\n        else:\n            final_ad.append(template.format(fallback))\n    return [string.capwords(s) for s in final_ad] if capitalize else final_ad",
        "docstring": "Generate a list of ads by inserting replacement strings into a specified template and ensuring the resulting ads do not exceed a maximum length.\n\nParameters\n----------\ntemplate : str\n    A format string utilizing braces (e.g., \"Get the latest {} today.\") where replacements will be inserted.\nreplacements : list\n    A list of strings to be substituted into the template.\nfallback : str\n    A string to use in place of any replacement that results in an ad exceeding `max_len`.\nmax_len : int, optional\n    The maximum allowed length for the generated ads (default is 30).\ncapitalize : bool, optional\n    A flag indicating whether to capitalize the first letter of each word in the resulting ads (default is True).\n\nReturns\n-------\nlist\n    A list of formatted ad strings based on the template and replacements, or the fallback string if any formatted string exceeds the length limit.\n\nRaises\n------\nValueError\n    If the combined length of the template and the fallback exceeds the specified `max_len`.\n\nNotes\n-----\nThe function leverages the `string.capwords` function to capitalize words in the result if the capitalize parameter is set to True. If a formatted ad exceeds the `max_len`, the fallback string is used instead. Careful consideration is needed to ensure that the template plus the fallback string adheres to the `max_len` constraint to avoid raising an error.",
        "signature": "def ad_create(template, replacements, fallback, max_len=30, capitalize=True):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: advertools-test_ad_create\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 advertools/\n    \u2514\u2500\u2500 ad_create.py\n        \u2514\u2500\u2500 ad_create\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides dynamic and customizable ad text creation functionality, enabling the generation of personalized ad copy through template-based string formatting. It ensures that input strings adhere to specified length constraints, uses fallback text as a substitute when limits are exceeded, and offers optional capitalization of output to maintain consistency in style. By automating the combination of predefined templates and variable inputs, it reduces the need for manual updates to ad content while ensuring adherence to character or formatting requirements. This solves the problem of creating scalable, user-defined ad text that is streamlined and compliant with platform guidelines or brand standards.\n\n## FILE 1: advertools/ad_create.py\n\n- FUNCTION NAME: ad_create\n  - SIGNATURE: def ad_create(template, replacements, fallback, max_len=30, capitalize=True):\n  - DOCSTRING: \n```python\n\"\"\"\nGenerate a list of ads by inserting replacement strings into a specified template and ensuring the resulting ads do not exceed a maximum length.\n\nParameters\n----------\ntemplate : str\n    A format string utilizing braces (e.g., \"Get the latest {} today.\") where replacements will be inserted.\nreplacements : list\n    A list of strings to be substituted into the template.\nfallback : str\n    A string to use in place of any replacement that results in an ad exceeding `max_len`.\nmax_len : int, optional\n    The maximum allowed length for the generated ads (default is 30).\ncapitalize : bool, optional\n    A flag indicating whether to capitalize the first letter of each word in the resulting ads (default is True).\n\nReturns\n-------\nlist\n    A list of formatted ad strings based on the template and replacements, or the fallback string if any formatted string exceeds the length limit.\n\nRaises\n------\nValueError\n    If the combined length of the template and the fallback exceeds the specified `max_len`.\n\nNotes\n-----\nThe function leverages the `string.capwords` function to capitalize words in the result if the capitalize parameter is set to True. If a formatted ad exceeds the `max_len`, the fallback string is used instead. Careful consideration is needed to ensure that the template plus the fallback string adheres to the `max_len` constraint to avoid raising an error.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "advertools/ad_create.py": "\"\"\"\n.. _ad_create:\n\nCreate Ads on a Large Scale\n===========================\n\nWhen creating large-scale campaigns, you also need to create ads on a large\nscale. For products in a similar category you typically want to use the same\nads, but only replace the product name, \"Get the latest <product> now\", and\nreplace `product` as many times as you have ads.\n\n.. container:: thebe\n\n    .. thebe-button::\n        Run this code\n\n\n    .. code-block::\n        :class: thebe, thebe-init\n\n        import advertools as adv\n\n        products = ['Dubai', 'Tokyo', 'Singapore']\n        adv.ad_create(template='5-star Hotels in {}',\n                    replacements=products,\n                    max_len=30,\n                    fallback='Great Cities')\n\n    .. container:: output\n\n        .. code-block::\n\n            ['5-star Hotels In Dubai',\n            '5-star Hotels In Tokyo',\n            '5-star Hotels In Singapore']\n\nAn important thing to to watch out for, is long product names. Since text ads\nhave limits on each slot, you need to make sure you don't exceed that limit.\nFor this you need to provide a `fallback` text in case the product name is\nlonger than `max_len`.\n\n.. container:: thebe\n\n    .. thebe-button::\n        Run this code\n\n    .. code-block::\n        :class: thebe, thebe-init\n\n        products = ['Lisbon', 'Porto', 'Algarve', 'Freixo de Espada \u00e0 Cinta']\n        adv.ad_create(template='5-star Hotels in {}',\n                    replacements=products,\n                    max_len=30,\n                    fallback='Portugal')\n    .. container:: output\n\n        .. code-block::\n\n            ['5-star Hotels In Lisbon',\n            '5-star Hotels In Porto',\n            '5-star Hotels In Algarve',\n            '5-star Hotels In Portugal']\n\n\"\"\"\nimport string"
  },
  "call_tree": {
    "tests/test_ad_create.py:test_raises_error_for_long_input_strings": {
      "advertools/ad_create.py:ad_create": {}
    },
    "tests/test_ad_create.py:test_all_replacements_used": {
      "advertools/ad_create.py:ad_create": {}
    },
    "tests/test_ad_create.py:test_fallback_used_if_string_long": {
      "advertools/ad_create.py:ad_create": {}
    },
    "tests/test_ad_create.py:test_final_string_capitalized_or_not": {
      "advertools/ad_create.py:ad_create": {}
    }
  }
}