{
  "dir_path": "/app/advertools",
  "package_name": "advertools",
  "sample_name": "advertools-test_sitemaps",
  "src_dir": "advertools/",
  "test_dir": "tests/",
  "test_file": "tests/test_sitemaps.py",
  "test_code": "from pathlib import Path\n\nimport pandas as pd\nimport pytest\n\nfrom advertools.sitemaps import sitemap_to_df, _build_request_headers, headers as DEFAULT_HEADERS\n\ngh_test_data_folder = \"https://raw.githubusercontent.com/eliasdabbas/advertools/master/tests/data/sitemap_testing/\"\noffline_test_data_folder = \"tests/data/sitemap_testing/\"\n\n\ndef full_path(file):\n    return gh_test_data_folder + file\n\n\ndef offline_path(filename):\n    path = Path(offline_test_data_folder + filename)\n    return path.absolute().as_uri()\n\n\nregular_sitemap_url = full_path(\"regular_sitemap.xml\")\nzipped_sitemap_url = full_path(\"zipped_sitemap.xml.gz\")\nsitemap_index_url = full_path(\"sitemap_index.xml\")\nerror_sitemap_url = full_path(\"error_sitemap.xml\")\nimage_sitemap_url = full_path(\"image_sitemap.xml\")\nvideo_sitemap_url = full_path(\"video_sitemap.xml\")\nnews_sitemap_url = full_path(\"news_sitemap.xml\")\nrobotstxt_url = full_path(\"robots.txt\")\n\n\ndef test_build_request_headers():\n    user_headers = {\"If-None-Match\": \"ETAG_STRING\"}\n    final_headers = _build_request_headers(user_headers)\n    assert isinstance(final_headers, dict)\n    assert final_headers == {\n        \"user-agent\": DEFAULT_HEADERS[\"User-Agent\"],\n        \"if-none-match\": \"ETAG_STRING\"\n    }\n\n\ndef test_build_request_headers_default():\n    user_headers = None\n    final_headers = _build_request_headers(user_headers)\n    assert final_headers == {\"user-agent\": DEFAULT_HEADERS[\"User-Agent\"]}\n\n\ndef test_build_request_headers_override_default():\n    user_headers = {\"User-agent\": \"example/agent\", \"If-None-Match\": \"ETAG_STRING\"}\n    final_headers = _build_request_headers(user_headers)\n    assert final_headers == {\n        \"user-agent\": \"example/agent\",\n        \"if-none-match\": \"ETAG_STRING\"\n    }\n\n\ndef test_regular_sitemap():\n    result = sitemap_to_df(regular_sitemap_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert len(result) == 5\n\n\ndef test_gz_sitemap():\n    result = sitemap_to_df(zipped_sitemap_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert len(result) == 5\n\n\ndef test_sitemap_index():\n    result = sitemap_to_df(sitemap_index_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert \"errors\" in result\n    errors = {\"WARNING: Sitemap contains a link to itself\", \"HTTP Error 404: Not Found\"}\n    assert errors.issubset(result[\"errors\"])\n    assert all([col in result for col in [\"loc\", \"download_date\", \"sitemap\"]])\n\n\ndef test_error_sitemap():\n    with pytest.raises(Exception):\n        sitemap_to_df(error_sitemap_url)\n\n\ndef test_image_sitemap():\n    result = sitemap_to_df(image_sitemap_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert \"image\" in result\n\n\ndef test_video_sitemap():\n    result = sitemap_to_df(video_sitemap_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert \"video_content_loc\" in result\n\n\ndef test_news_sitemap():\n    result = sitemap_to_df(news_sitemap_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n    assert \"news\" in result\n\n\ndef test_get_sitemaps_from_robotstxt():\n    result = sitemap_to_df(robotstxt_url)\n    assert isinstance(result, pd.core.frame.DataFrame)\n\n\ndef test_sitemaps_offline():\n    sitemap_path = offline_path(\"regular_sitemap.xml\")\n    result = sitemap_to_df(sitemap_path)\n    assert isinstance(result, pd.DataFrame)\n\n\ndef test_zipped_sitemaps_offline():\n    sitemap_path = offline_path(\"zipped_sitemap.xml.gz\")\n    result = sitemap_to_df(sitemap_path)\n    assert isinstance(result, pd.DataFrame)\n",
  "GT_file_code": {
    "advertools/sitemaps.py": "\"\"\"\n.. _sitemaps:\n\nDownload, Parse, and Analyze XML Sitemaps\n=========================================\n\nOne of the fastest and easiest ways to get insights on a website's content is\nto simply download its XML sitemap(s).\n\nSitemaps are also important SEO tools as they reveal a lot of information about\nthe website, and help search engines in indexing those pages. You might want to\nrun an SEO audit and check if the URLs in the sitemap properly correspond to\nthe actual URLs of the site, so this would be an easy way to get them.\n\nSitemaps basically contain a log of publishing activity, and if they have rich\nURLs then you can do some good analysis on their content over time as well.\n\nThe :func:`sitemap_to_df` function is very simple to use, and only requires the\nURL of a sitemap, a sitemap index, or even a robots.txt file. It goes through\nthe sitemap(s) and returns a DataFrame containing all the tags and their\ninformation.\n\n*  `loc`: The location of the URLs of hte sitemaps.\n*  `lastmod`: The datetime of the date when each URL was last modified, if\n   available.\n*  `sitemap`: The URL of the sitemap from which the URL on this row was\n   retreived.\n*  `etag`: The entity tag of the response header, if provided.\n*  `sitemap_last_modified`: The datetime when the sitemap file was last\n   modified, if provided.\n*  `sitemap_size_mb`: The size of the sitemap in mega bytes\n   (1MB = 1,024 x 1,024 bytes)\n*  `download_date`: The datetime when the sitemap was downloaded.\n\nSitemap Index\n-------------\nLarge websites typically have a sitmeapindex file, which contains links to all\nother regular sitemaps that belong to the site. The :func:`sitemap_to_df`\nfunction retreives all sub-sitemaps recursively by default.\nIn some cases, especially with very large sites, it might be better to first\nget the sitemap index, explore its structure, and then decide which sitemaps\nyou want to get, or if you want them all. Even with smaller websites, it still\nmight be interesting to get the index only and see how it is structured.\n\nThis behavior can be modified by the ``recursive`` parameter, which is set to\n`True` by default. Set it to `False` if you want only the index file.\n\nAnother interesting thing you might want to do is to provide a robots.txt URL,\nand set `recursive=False` to get all available sitemap index files.\n\n>>> sitemap_to_df(\"https://example.com/robots.txt\", recursive=False)\n\nLet's now go through a quick example of what can be done with sitemaps. We can\nstart by getting one of the BBC's sitemaps.\n\nRegular XML Sitemaps\n--------------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    import advertools as adv\n\n    bbc_sitemap = adv.sitemap_to_df('https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml')\n    bbc_sitemap.head(10)\n\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n  ..  loc                                                                            lastmod                    sitemap                                                       etag                              sitemap_last_modified        sitemap_size_mb  download_date\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n   0  https://www.bbc.com/arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2     2009-06-20 14:10:48+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   1  https://www.bbc.com/arabic/middleeast/2009/06/090620_iraq_blast_tc2            2009-06-20 21:07:43+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   2  https://www.bbc.com/arabic/business/2009/06/090622_me_worldbank_tc2            2009-06-22 12:41:48+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   3  https://www.bbc.com/arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2  2009-06-24 15:27:24+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   4  https://www.bbc.com/arabic/business/2009/06/090618_tomtest                     2009-06-18 15:32:54+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   5  https://www.bbc.com/arabic/multimedia/2009/06/090625_sf_tamim_verdict_tc2      2009-06-25 09:46:39+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   6  https://www.bbc.com/arabic/middleeast/2009/06/090623_iz_cairo_russia_tc2       2009-06-23 13:10:56+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   7  https://www.bbc.com/arabic/sports/2009/06/090622_me_egypt_us_tc2               2009-06-22 15:37:07+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   8  https://www.bbc.com/arabic/sports/2009/06/090624_mz_wimbledon_tc2              2009-06-24 13:57:18+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   9  https://www.bbc.com/arabic/worldnews/2009/06/090623_mz_leaders_lifespan_tc2    2009-06-23 13:24:23+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    print(bbc_sitemap.shape)\n    print(bbc_sitemap.dtypes)\n\n.. code-block::\n\n    (49999, 7)\n\n    loc                                   object\n    lastmod                  datetime64[ns, UTC]\n    sitemap                               object\n    etag                                  object\n    sitemap_last_modified    datetime64[ns, UTC]\n    sitemap_size_mb                      float64\n    download_date            datetime64[ns, UTC]\n    dtype: object\n\nSince ``lastmod`` is a ``datetime`` object, we can easily use it for various\ntime-related operations.\nHere we look at how many articles have been published (last modified) per year.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    bbc_sitemap.set_index('lastmod').resample('A')['loc'].count()\n\n.. code-block::\n\n    lastmod\n    2008-12-31 00:00:00+00:00     2287\n    2009-12-31 00:00:00+00:00    47603\n    2010-12-31 00:00:00+00:00        0\n    2011-12-31 00:00:00+00:00        0\n    2012-12-31 00:00:00+00:00        0\n    2013-12-31 00:00:00+00:00        0\n    2014-12-31 00:00:00+00:00        0\n    2015-12-31 00:00:00+00:00        0\n    2016-12-31 00:00:00+00:00        0\n    2017-12-31 00:00:00+00:00        0\n    2018-12-31 00:00:00+00:00        0\n    2019-12-31 00:00:00+00:00       99\n    2020-12-31 00:00:00+00:00       10\n    Freq: A-DEC, Name: loc, dtype: int64\n\nAs the majority are in 2009 with a few in other years, it seems these were\nlater updated, but we would have to check to verify (in this special case BBC's\nURLs contain date information, which can be compared to ``lastmod`` to check if\nthere is a difference between them).\n\nWe can take a look at a sample of the URLs to get the URL template that they\nuse.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    bbc_sitemap['loc'].sample(10).tolist()\n\n.. code-block::\n\n    ['https://www.bbc.com/russian/rolling_news/2009/06/090628_rn_pakistani_soldiries_ambush',\n    'https://www.bbc.com/urdu/pakistan/2009/04/090421_mqm_speaks_rza',\n    'https://www.bbc.com/arabic/middleeast/2009/07/090723_ae_silwan_tc2',\n    'https://www.bbc.com/portuguese/noticias/2009/07/090729_iraquerefenbritsfn',\n    'https://www.bbc.com/portuguese/noticias/2009/06/090623_egitomilitaresfn',\n    'https://www.bbc.com/portuguese/noticias/2009/03/090302_gazaconferenciaml',\n    'https://www.bbc.com/portuguese/noticias/2009/07/090715_hillary_iran_cq',\n    'https://www.bbc.com/vietnamese/culture/2009/04/090409_machienhuu_revisiting',\n    'https://www.bbc.com/portuguese/noticias/2009/05/090524_paquistaoupdateg',\n    'https://www.bbc.com/arabic/worldnews/2009/06/090629_om_pakistan_report_tc2']\n\nIt seems the pattern is\n\n    **https://www.bbc.com/{language}/{topic}/{YYYY}/{MM}/{YYMMDD_article_title}**\n\nThis is quite a rich structure, full of useful information. We can\n:ref:`analyze the URL structure <urlytics>` using the ``url_to_df`` function:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df = adv.url_to_df(bbc_sitemap['loc'])\n    url_df\n\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n   ..  url                                                                            scheme    netloc       path                                                        query    fragment    dir_1       dir_2         dir_3    dir_4  dir_5                              dir_6    dir_7  last_dir\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n    0  https://www.bbc.com/arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2     https     www.bbc.com  /arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2                          arabic      middleeast     2009       06  090620_as_iraq_explosion_tc2         nan      nan  090620_as_iraq_explosion_tc2\n    1  https://www.bbc.com/arabic/middleeast/2009/06/090620_iraq_blast_tc2            https     www.bbc.com  /arabic/middleeast/2009/06/090620_iraq_blast_tc2                                 arabic      middleeast     2009       06  090620_iraq_blast_tc2                nan      nan  090620_iraq_blast_tc2\n    2  https://www.bbc.com/arabic/business/2009/06/090622_me_worldbank_tc2            https     www.bbc.com  /arabic/business/2009/06/090622_me_worldbank_tc2                                 arabic      business       2009       06  090622_me_worldbank_tc2              nan      nan  090622_me_worldbank_tc2\n    3  https://www.bbc.com/arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2  https     www.bbc.com  /arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2                       arabic      multimedia     2009       06  090624_me_inpictures_brazil_tc2      nan      nan  090624_me_inpictures_brazil_tc2\n    4  https://www.bbc.com/arabic/business/2009/06/090618_tomtest                     https     www.bbc.com  /arabic/business/2009/06/090618_tomtest                                          arabic      business       2009       06  090618_tomtest                       nan      nan  090618_tomtest\n49994  https://www.bbc.com/vietnamese/world/2009/08/090831_dalailamataiwan            https     www.bbc.com  /vietnamese/world/2009/08/090831_dalailamataiwan                                 vietnamese  world          2009       08  090831_dalailamataiwan               nan      nan  090831_dalailamataiwan\n49995  https://www.bbc.com/vietnamese/world/2009/09/090901_putin_regret_pact          https     www.bbc.com  /vietnamese/world/2009/09/090901_putin_regret_pact                               vietnamese  world          2009       09  090901_putin_regret_pact             nan      nan  090901_putin_regret_pact\n49996  https://www.bbc.com/vietnamese/culture/2009/09/090901_tiananmen_movie          https     www.bbc.com  /vietnamese/culture/2009/09/090901_tiananmen_movie                               vietnamese  culture        2009       09  090901_tiananmen_movie               nan      nan  090901_tiananmen_movie\n49997  https://www.bbc.com/vietnamese/pictures/2009/08/090830_ugc_ddh_sand            https     www.bbc.com  /vietnamese/pictures/2009/08/090830_ugc_ddh_sand                                 vietnamese  pictures       2009       08  090830_ugc_ddh_sand                  nan      nan  090830_ugc_ddh_sand\n49998  https://www.bbc.com/vietnamese/business/2009/09/090901_japecontask             https     www.bbc.com  /vietnamese/business/2009/09/090901_japecontask                                  vietnamese  business       2009       09  090901_japecontask                   nan      nan  090901_japecontask\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n\nIt seems that the ``dir_1`` is where they have the language information, so we\ncan easily count how many articles they have per language:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['dir_1'].value_counts()\n\n.. code-block::\n\n    russian       14022\n    persian       10968\n    portuguese     5403\n    urdu           5068\n    mundo          5065\n    vietnamese     3561\n    arabic         2984\n    hindi          1677\n    turkce          706\n    ukchina         545\n    Name: dir_1, dtype: int64\n\nWe can also get a subset of articles written in a certain language, and see how\nmany articles they publish per month, week, year, etc.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    (bbc_sitemap[bbc_sitemap['loc']\n     .str.contains('/russian/')]\n     .set_index('lastmod')\n     .resample('M')['loc'].count())\n\n.. code-block::\n\n    lastmod\n    2009-04-30 00:00:00+00:00    1506\n    2009-05-31 00:00:00+00:00    2910\n    2009-06-30 00:00:00+00:00    3021\n    2009-07-31 00:00:00+00:00    3250\n    2009-08-31 00:00:00+00:00    2769\n                                 ...\n    2019-09-30 00:00:00+00:00       8\n    2019-10-31 00:00:00+00:00      17\n    2019-11-30 00:00:00+00:00      11\n    2019-12-31 00:00:00+00:00      24\n    2020-01-31 00:00:00+00:00       6\n    Freq: M, Name: loc, Length: 130, dtype: int64\n\nThe topic or category of the article seems to be in ``dir_2`` for which we can\ndo the same and count the values.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['dir_2'].value_counts()[:20]\n\n.. code-block::\n\n    rolling_news        9044\n    world               5050\n    noticias            4224\n    iran                3682\n    pakistan            2103\n    afghanistan         1959\n    multimedia          1657\n    internacional       1555\n    sport               1350\n    international       1293\n    india               1285\n    america_latina      1274\n    business            1204\n    cultura_sociedad     913\n    middleeast           874\n    worldnews            872\n    russia               841\n    radio                769\n    science              755\n    football             674\n    Name: dir_2, dtype: int64\n\nThere is much more you can do, and a lot depends on the URL structure, which\nyou have to explore and run the right operation.\n\nFor example, we can use the ``last_dir`` column which contains the slugs\nof the articles, replace underscores with spaces, split, concatenate all, put\nin a ``pd.Series`` and count the values. This way we see how many times each\nword occurred in an article. The same code can also be run after filtering for\narticles in a particular language to get a more meaningful list of words.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['last_dir'].str.split('_').str[1:].explode().value_counts()[:20]\n\n.. code-block::\n\n    rn          8808\n    tc2         3153\n    iran        1534\n    video        973\n    obama        882\n    us           862\n    china        815\n    ir88         727\n    russia       683\n    si           640\n    np           638\n    afghan       632\n    ka           565\n    an           556\n    iraq         554\n    pakistan     547\n    nh           533\n    cq           520\n    zs           510\n    ra           491\n    Name: last_dir, dtype: int64\n\nThis was a quick overview and data preparation for a sample sitemap. Once you\nare familiar with the sitemap's structure, you can more easily start analyzing\nthe content.\n\n.. note::\n\n    There is a bug currently with tags that contain multiple values in\n    sitemaps. If an image column in a news sitemap contains multiple images,\n    only the last one is retreived. The same applies for any other sitemap that\n    has a tag with multiple values.\n\n\nNews Sitemaps\n-------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    nyt_news = adv.sitemap_to_df('https://www.nytimes.com/sitemaps/new/news.xml.gz')\n    print(nyt_news.shape)\n    # (5085, 16)\n    nyt_news\n\nn  ..  loc                                                                                                      lastmod                    news    news_publication    publication_name    publication_language    news_publication_date    news_title                                                                            news_keywords                                                                                                             image    image_loc                                                                                                                                                                           sitemap                                             etag                              sitemap_last_modified        sitemap_size_mb  download_date\nn   0  https://www.nytimes.com/interactive/2021/us/ottawa-ohio-covid-cases.html                                 2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Ottawa County, Ohio Covid Case and Exposure Risk Tracker                              Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/ohio-coronavirus-cases-promo-1585539358901/ohio-coronavirus-cases-promo-1585539358901-articleLarge-v274.png                           https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   1  https://www.nytimes.com/interactive/2021/us/hopewell-virginia-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Hopewell, Virginia Covid Case and Exposure Risk Tracker                               Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/virginia-coronavirus-cases-promo-1585539536519/virginia-coronavirus-cases-promo-1585539536519-articleLarge-v271.png                   https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   2  https://www.nytimes.com/interactive/2021/us/box-butte-nebraska-covid-cases.html                          2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Box Butte County, Nebraska Covid Case and Exposure Risk Tracker                       Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/nebraska-coronavirus-cases-promo-1585539237156/nebraska-coronavirus-cases-promo-1585539237156-articleLarge-v281.png                   https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   3  https://www.nytimes.com/interactive/2021/us/stearns-minnesota-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Stearns County, Minnesota Covid Case and Exposure Risk Tracker                        Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/minnesota-coronavirus-cases-promo-1585539172701/minnesota-coronavirus-cases-promo-1585539172701-articleLarge-v282.png                 https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   4  https://www.nytimes.com/interactive/2021/us/benton-iowa-covid-cases.html                                 2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Benton County, Iowa Covid Case and Exposure Risk Tracker                              Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/iowa-coronavirus-cases-promo-1585539039190/iowa-coronavirus-cases-promo-1585539039190-articleLarge-v286.png                           https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n5080  https://www.nytimes.com/interactive/2021/us/hodgeman-kansas-covid-cases.html                             2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Hodgeman County, Kansas Covid Case and Exposure Risk Tracker                          Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/kansas-coronavirus-cases-promo-1585539054298/kansas-coronavirus-cases-promo-1585539054298-articleLarge-v285.png                       https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5081  https://www.nytimes.com/interactive/2021/us/miller-georgia-covid-cases.html                              2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Miller County, Georgia Covid Case and Exposure Risk Tracker                           Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/georgia-coronavirus-cases-promo-1585538956622/georgia-coronavirus-cases-promo-1585538956622-articleLarge-v290.png                     https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5082  https://www.nytimes.com/interactive/2020/11/03/us/elections/results-west-virginia-house-district-1.html  2022-02-12 00:00:00+00:00                              The New York Times  en                      2020-11-03T17:00:00Z     West Virginia First Congressional District Results: David McKinley vs. Natalie Cline  Elections, Presidential Election of 2020, United States, internal-election-open, House of Representatives, West Virginia           https://static01.nyt.com/images/2020/11/03/us/elections/eln-promo-race-west-virginia-house-1WINNER-mckinleyd/eln-promo-race-west-virginia-house-1WINNER-mckinleyd-articleLarge.png  https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5083  https://www.nytimes.com/interactive/2020/11/03/us/elections/results-maine-senate.html                    2022-02-12 00:00:00+00:00                              The New York Times  en                      2020-11-03T17:00:00Z     Maine Senate Results: Susan Collins Defeats Sara Gideon                               Elections, Presidential Election of 2020, United States, internal-election-open, Senate, Maine                                     https://static01.nyt.com/images/2020/11/03/us/elections/eln-promo-race-maine-senateWINNER-collinss/eln-promo-race-maine-senateWINNER-collinss-articleLarge.png                      https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5084  https://www.nytimes.com/interactive/2021/us/randolph-missouri-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Randolph County, Missouri Covid Case and Exposure Risk Tracker                        Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/missouri-coronavirus-cases-promo-1585539206866/missouri-coronavirus-cases-promo-1585539206866-articleLarge-v282.png                   https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\nn\nVideo Sitemaps\n--------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    wired_video = adv.sitemap_to_df('https://www.wired.com/video/sitemap.xml')\n    print(wired_video.shape)\n    # (2955, 14)\n    wired_video\n\n====  ==============================================================================================================  =======  ======================================================================================================================================================================================================================================  ==============================================================================  ==========================================================================================================================================================================================================================================================================================================================================  ========================================================================================================  ================  =========================  =======================  =========  =======================================  ==================================  =================  ================================\n  ..  loc                                                                                                             video    video_thumbnail_loc                                                                                                                                                                                                                     video_title                                                                     video_description                                                                                                                                                                                                                                                                                                                           video_content_loc                                                                                           video_duration  video_publication_date       video_expiration_date  lastmod    sitemap                                  etag                                  sitemap_size_mb  download_date\nn   0  https://www.wired.com/video/watch/autocomplete-inverviews-owen-wilson-answers-the-webs-most-searched-questions           http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644595412/wired_autocomplete-inverviews-owen-wilson-answers-the-webs-most-searched-questions.jpg  Autocomplete Interview - Owen Wilson Answers The Web\u2019s Most Searched Questions  Owen Wilson takes the WIRED Autocomplete Interview and answers the internet's most searched questions about himself. How did Owen Wilson break his nose? How many movies is he in with Ben Stiller? Is Owen in every Wes Anderson movie? Is he a good skateboarder? Owen answers all these questions and much more!                         http://dp8hsntg6do36.cloudfront.net/62067f085577c277dd9acf42/39687acb-505b-4c69-94f1-afaa7cb5e636low.mp4               645  2022-02-11T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   1  https://www.wired.com/video/watch/wired-news-and-science-samsung-s22                                                     http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644418652/wired_wired-news-and-science-samsung-s22.jpg                                            Currents - Samsung S22 Ultra Explained in 3 Minutes                             Julian Chokkattu, Reviews Editor for WIRED, walks us through a few of the Samsung S22 Ultra's new features.                                                                                                                                                                                                                                 http://dp8hsntg6do36.cloudfront.net/6203cd7b5577c23d19622259/fe546b9b-a320-4883-9cbd-0d790f23c36dlow.mp4               184  2022-02-10T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   2  https://www.wired.com/video/watch/first-look-samsung-galaxy-unpacked-2022                                                http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644381627/wired_first-look-samsung-galaxy-unpacked-2022.jpg                                       First Look: Samsung Galaxy Unpacked 2022                                        Samsung has debuted three new smartphones\u2014the Galaxy S22 Ultra, S22+, S22\u2014and three Android tablets in various sizes at Samsung Unpacked 2022. WIRED's Julian Chokkattu takes a look at the newest features.                                                                                                                                http://dp8hsntg6do36.cloudfront.net/620345a15577c23d46622256/d74930cf-11e1-466e-b023-1d9b91664204low.mp4               373  2022-02-09T15:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   3  https://www.wired.com/video/watch/reinventing-with-data                                                                  http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1642801328/wired_reinventing-with-data.jpg                                                         Reinventing With Data | WIRED Brand Lab                                         Produced by WIRED Brand Lab with AWS | What can the Seattle Seahawks winning strategy teach businesses?                                                                                                                                                                                                                                     http://dp8hsntg6do36.cloudfront.net/619bd9be1d75db41adee6b58/d4889b15-4f34-41b0-b935-0c79465a9793low.mp4               292  2022-02-09T13:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       Swami Sivasubramanian, VP of AI at Amazon Web Services helps us to understand how the Seattle Seahawks are using data and AI to remain a top performing team in the NFL, and how their process of data capture, storage, and machine learning to gain strategic insights is a model for making better business decision across industries.\n   4  https://www.wired.com/video/watch/seth-rogen-answers-the-webs-most-searched-questions                                    http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644335726/wired_seth-rogen-answers-the-webs-most-searched-questions.jpg                           Autocomplete Interview - Seth Rogen Answers The Web\u2019s Most Searched Questions   \"Pam &amp; Tommy\" star Seth Rogen takes the WIRED Autocomplete Interview once again and answers the internet's most searched questions about himself. Who does Seth Rogen look like? Does Seth have a podcast? Does he sell pottery? Does he celebrate Christmas? Does he play Call of Duty?                                                http://dp8hsntg6do36.cloudfront.net/6201430a1d75db06ae1f62e8/488ed635-91d0-4281-9e64-34be9bf74f00low.mp4               635  2022-02-08T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       Pam &amp; Tommy premieres February 2 on Hulu (finale on March 9)\n2950  https://www.wired.com/video/genres/how-to                                                                       nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2951  https://www.wired.com/video/genres/movies-tv                                                                    nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2952  https://www.wired.com/video/genres/events                                                                       nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2953  https://www.wired.com/video/genres/promotion                                                                    nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2954  https://www.wired.com/video/genres/transportation                                                               nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\nn\nRequest Headers\n---------------\nYou can set and change any request header while runnig this function if you want to\nmodify its behavior. This can be done using a simple dictionary, where the keys are the\nnames of the headers and values are their values.\n\nFor example, one of the common use-cases is to set a different User-agent than the\ndefault one:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\", headers={\"User-agent\": \"YOUR-USER-AGENT\"})\n\nAnother interesting thing you might want to do is utilize the `If-None-Match` header.\nIn many cases the sitemaps return an etag for the sitemap. This is to make it easier to\nknow whether or not a sitemap has changed. A different etag means the sitemap has been\nupdated/changed.\n\nWith large sitemaps, where many sub-sitemaps don't change that much you don't need to\nre-download the sitemap every time. You can simply use this header which would download\nthe sitemap only if it has a different etag. This can also be useful with frequently\nchanging sitemaps like news sitemaps for example. In this case you probably want to\nconstantly check but only fetch the sitemap if it was changed.\n\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    # First time:\n    ft = adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\")\n    etag = ft['etag'][0]\n\n    # Second time:\n    ft = adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\", headers={\"If-None-Match\": etag})\n\"\"\"  # noqa: E501\n\nimport logging\nfrom concurrent import futures\nfrom gzip import GzipFile\nfrom urllib.request import Request, urlopen\nfrom xml.etree import ElementTree\n\nimport pandas as pd\n\nfrom advertools import __version__ as version\n\nlogging.basicConfig(level=logging.INFO)\n\nheaders = {\"User-Agent\": \"advertools-\" + version}\n\n\ndef _sitemaps_from_robotstxt(robots_url, request_headers):\n    sitemaps = []\n    robots_page = urlopen(Request(robots_url, headers=request_headers))\n    for line in robots_page.readlines():\n        line_split = [s.strip() for s in line.decode().split(\":\", maxsplit=1)]\n        if line_split[0].lower() == \"sitemap\":\n            sitemaps.append(line_split[1])\n    return sitemaps\n\n\ndef _parse_sitemap(root):\n    d = dict()\n    for node in root:\n        for n in node:\n            if \"loc\" in n.tag:\n                d[n.text] = {}\n\n    def parse_xml_node(node, node_url, prefix=\"\"):\n        nonlocal d\n        keys = []\n        for element in node:\n            if element.text:\n                tag = element.tag.split(\"}\")[-1]\n                d[node_url][prefix + tag] = element.text\n                keys.append(tag)\n                prefix = prefix if tag in keys else \"\"\n            if list(element):\n                parse_xml_node(\n                    element, node_url, prefix=element.tag.split(\"}\")[-1] + \"_\"\n                )\n\n    for node in root:\n        node_url = [n.text for n in node if \"loc\" in n.tag][0]\n        parse_xml_node(node, node_url=node_url)\n    return pd.DataFrame(d.values())\n\n\ndef _build_request_headers(user_headers=None):\n    # Must ensure lowercase to avoid introducing duplicate keys\n    final_headers = {key.lower(): val for key, val in headers.items()}\n    if user_headers:\n        user_headers = {key.lower(): val for key, val in user_headers.items()}\n        final_headers.update(user_headers)\n    return final_headers\n\n\ndef sitemap_to_df(sitemap_url, max_workers=8, recursive=True, request_headers=None):\n    \"\"\"\n    Retrieve all URLs and other available tags of a sitemap(s) and put them in\n    a DataFrame.\n\n    You can also pass the URL of a sitemap index, or a link to a robots.txt\n    file.\n\n    :param url sitemap_url: The URL of a sitemap, either a regular sitemap, a\n                            sitemap index, or a link to a robots.txt file.\n                            In the case of a sitemap index or robots.txt, the\n                            function will go through all the sub sitemaps and\n                            retrieve all the included URLs in one DataFrame.\n    :param int max_workers: The maximum number of workers to use for threading.\n                            The higher the faster, but with high numbers you\n                            risk being blocked and/or missing some data as you\n                            might appear like an attacker.\n    :param bool recursive: Whether or not to follow and import all sub-sitemaps\n                           (in case you have a sitemap index), or to only\n                           import the given sitemap. This might be useful in\n                           case you want to explore what sitemaps are available\n                           after which you can decide which ones you are\n                           interested in.\n    :param dict request_headers: One or more request headers to use while\n                                 fetching the sitemap.\n    :return sitemap_df: A pandas DataFrame containing all URLs, as well as\n                        other tags if available (``lastmod``, ``changefreq``,\n                        ``priority``, or others found in news, video, or image\n                        sitemaps).\n    \"\"\"\n    final_headers = _build_request_headers(request_headers)\n\n    if sitemap_url.endswith(\"robots.txt\"):\n        return pd.concat(\n            [\n                sitemap_to_df(sitemap, recursive=recursive)\n                for sitemap in _sitemaps_from_robotstxt(sitemap_url, final_headers)\n            ],\n            ignore_index=True,\n        )\n\n    if sitemap_url.endswith(\"xml.gz\"):\n        final_headers[\"accept-encoding\"] = \"gzip\"\n        xml_text = urlopen(\n            Request(\n                sitemap_url,\n                headers=final_headers,\n            )\n        )\n        try:\n            resp_headers = xml_text.getheaders()\n        except AttributeError:\n            resp_headers = \"\"\n            pass\n        xml_text = GzipFile(fileobj=xml_text)\n    else:\n        xml_text = urlopen(Request(sitemap_url, headers=final_headers))\n        try:\n            resp_headers = xml_text.getheaders()\n        except AttributeError:\n            resp_headers = \"\"\n            pass\n    xml_string = xml_text.read()\n    root = ElementTree.fromstring(xml_string)\n\n    sitemap_df = pd.DataFrame()\n\n    if (root.tag.split(\"}\")[-1] == \"sitemapindex\") and recursive:\n        multi_sitemap_df = pd.DataFrame()\n        sitemap_url_list = []\n        for elem in root:\n            for el in elem:\n                if \"loc\" in el.tag:\n                    if el.text == sitemap_url:\n                        error_df = pd.DataFrame(\n                            {\n                                \"sitemap\": [sitemap_url],\n                                \"errors\": [\n                                    \"WARNING: Sitemap contains a link to itself\"\n                                ],\n                            }\n                        )\n                        multi_sitemap_df = pd.concat(\n                            [multi_sitemap_df, error_df], ignore_index=True\n                        )\n                    else:\n                        sitemap_url_list.append(el.text)\n        with futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n            to_do = []\n            for sitemap in sitemap_url_list:\n                future = executor.submit(sitemap_to_df, sitemap)\n                to_do.append(future)\n            done_iter = futures.as_completed(to_do)\n            for future in done_iter:\n                try:\n                    multi_sitemap_df = pd.concat(\n                        [multi_sitemap_df, future.result()], ignore_index=True\n                    )\n                except Exception as e:\n                    error_df = pd.DataFrame(dict(errors=str(e)), index=range(1))\n                    future_str = hex(id(future))\n                    hexes = [hex(id(f)) for f in to_do]\n                    index = hexes.index(future_str)\n                    error_df[\"sitemap\"] = sitemap_url_list[index]\n                    logging.warning(msg=str(e) + \" \" + sitemap_url_list[index])\n                    multi_sitemap_df = pd.concat(\n                        [multi_sitemap_df, error_df], ignore_index=True\n                    )\n        return multi_sitemap_df\n\n    else:\n        logging.info(msg=\"Getting \" + sitemap_url)\n        elem_df = _parse_sitemap(root)\n        sitemap_df = pd.concat([sitemap_df, elem_df], ignore_index=True)\n        sitemap_df[\"sitemap\"] = [sitemap_url] if sitemap_df.empty else sitemap_url\n    if \"lastmod\" in sitemap_df:\n        try:\n            sitemap_df[\"lastmod\"] = pd.to_datetime(sitemap_df[\"lastmod\"], utc=True)\n        except Exception:\n            pass\n    if \"priority\" in sitemap_df:\n        try:\n            sitemap_df[\"priority\"] = sitemap_df[\"priority\"].astype(float)\n        except Exception:\n            pass\n    if resp_headers:\n        etag_lastmod = {\n            header.lower().replace(\"-\", \"_\"): val\n            for header, val in resp_headers\n            if header.lower() in [\"etag\", \"last-modified\"]\n        }\n        sitemap_df = sitemap_df.assign(**etag_lastmod)\n    if \"last_modified\" in sitemap_df:\n        sitemap_df[\"sitemap_last_modified\"] = pd.to_datetime(\n            sitemap_df[\"last_modified\"]\n        )\n        del sitemap_df[\"last_modified\"]\n    sitemap_df[\"sitemap_size_mb\"] = len(xml_string) / 1024 / 1024\n    sitemap_df[\"download_date\"] = pd.Timestamp.now(tz=\"UTC\")\n    return sitemap_df\n"
  },
  "GT_src_dict": {
    "advertools/sitemaps.py": {
      "_sitemaps_from_robotstxt": {
        "code": "def _sitemaps_from_robotstxt(robots_url, request_headers):\n    \"\"\"Retrieve all sitemap URLs listed in a robots.txt file.\n\nThis function requests the specified robots.txt URL and parses the content to extract \nall entries that begin with \"Sitemap\", collecting their corresponding URLs.\n\nParameters:\n- robots_url (str): The URL of the robots.txt file to parse for sitemap URLs.\n- request_headers (dict): A dictionary of HTTP headers to include in the request, \n                          allowing for customization of the request (e.g., User-Agent).\n\nReturns:\n- List[str]: A list containing the URLs of the sitemaps found within the robots.txt file.\n\nThis function uses the `urlopen` method from the `urllib.request` module to fetch \nthe robots.txt content, and it processes the page line by line to identify and store \nthe sitemap URLs. It is critical for functions handling sitemaps, such as `sitemap_to_df`, \nwhich can take the list of retrieved sitemaps for further data extraction and analysis.\"\"\"\n    sitemaps = []\n    robots_page = urlopen(Request(robots_url, headers=request_headers))\n    for line in robots_page.readlines():\n        line_split = [s.strip() for s in line.decode().split(':', maxsplit=1)]\n        if line_split[0].lower() == 'sitemap':\n            sitemaps.append(line_split[1])\n    return sitemaps",
        "docstring": "Retrieve all sitemap URLs listed in a robots.txt file.\n\nThis function requests the specified robots.txt URL and parses the content to extract \nall entries that begin with \"Sitemap\", collecting their corresponding URLs.\n\nParameters:\n- robots_url (str): The URL of the robots.txt file to parse for sitemap URLs.\n- request_headers (dict): A dictionary of HTTP headers to include in the request, \n                          allowing for customization of the request (e.g., User-Agent).\n\nReturns:\n- List[str]: A list containing the URLs of the sitemaps found within the robots.txt file.\n\nThis function uses the `urlopen` method from the `urllib.request` module to fetch \nthe robots.txt content, and it processes the page line by line to identify and store \nthe sitemap URLs. It is critical for functions handling sitemaps, such as `sitemap_to_df`, \nwhich can take the list of retrieved sitemaps for further data extraction and analysis.",
        "signature": "def _sitemaps_from_robotstxt(robots_url, request_headers):",
        "type": "Function",
        "class_signature": null
      },
      "_parse_sitemap": {
        "code": "def _parse_sitemap(root):\n    \"\"\"Parse an XML sitemap and extract relevant tags into a DataFrame.\n\nThis function processes the root element of an XML sitemap, extracting URL locations (`loc`) and additional associated tags. It constructs a nested structure to accommodate all tags for each URL and returns a DataFrame with the extracted data.\n\nParameters:\n- root (Element): The root element of the parsed XML sitemap, expected to be in the format defined by sitemaps, which includes URL locations and other associated metadata.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing the URLs and their corresponding tags, with each row representing a URL entry and columns representing extracted tag values.\n\nNotes:\n- The function relies on Python's built-in `xml.etree.ElementTree` for XML parsing.\n- Each URL is used as a key in a dictionary, `d`, to store its associated metadata dynamically as the XML structure is traversed.\"\"\"\n    d = dict()\n    for node in root:\n        for n in node:\n            if 'loc' in n.tag:\n                d[n.text] = {}\n\n    def parse_xml_node(node, node_url, prefix=''):\n        nonlocal d\n        keys = []\n        for element in node:\n            if element.text:\n                tag = element.tag.split('}')[-1]\n                d[node_url][prefix + tag] = element.text\n                keys.append(tag)\n                prefix = prefix if tag in keys else ''\n            if list(element):\n                parse_xml_node(element, node_url, prefix=element.tag.split('}')[-1] + '_')\n    for node in root:\n        node_url = [n.text for n in node if 'loc' in n.tag][0]\n        parse_xml_node(node, node_url=node_url)\n    return pd.DataFrame(d.values())",
        "docstring": "Parse an XML sitemap and extract relevant tags into a DataFrame.\n\nThis function processes the root element of an XML sitemap, extracting URL locations (`loc`) and additional associated tags. It constructs a nested structure to accommodate all tags for each URL and returns a DataFrame with the extracted data.\n\nParameters:\n- root (Element): The root element of the parsed XML sitemap, expected to be in the format defined by sitemaps, which includes URL locations and other associated metadata.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing the URLs and their corresponding tags, with each row representing a URL entry and columns representing extracted tag values.\n\nNotes:\n- The function relies on Python's built-in `xml.etree.ElementTree` for XML parsing.\n- Each URL is used as a key in a dictionary, `d`, to store its associated metadata dynamically as the XML structure is traversed.",
        "signature": "def _parse_sitemap(root):",
        "type": "Function",
        "class_signature": null
      },
      "_build_request_headers": {
        "code": "def _build_request_headers(user_headers=None):\n    \"\"\"Builds a dictionary of request headers for HTTP requests, ensuring all keys are lowercase to prevent duplication. It starts with default headers defined globally in the `headers` variable, which includes a user-agent string that denotes the library version. Users can pass additional headers through the `user_headers` parameter, which will also be converted to lowercase before being merged with the default headers.\n\nParameters:\n-----------\nuser_headers : dict, optional\n    A dictionary of user-defined headers to include in the request. Keys should represent header names and values the corresponding header values.\n\nReturns:\n--------\ndict\n    A dictionary containing the combined request headers, with all keys in lowercase.\n\nDependencies:\n-------------\nThis function relies on the global `headers` variable defined at the module level, which sets a user-agent for the requests made by this library, providing information about the version of the package making the request.\"\"\"\n    final_headers = {key.lower(): val for key, val in headers.items()}\n    if user_headers:\n        user_headers = {key.lower(): val for key, val in user_headers.items()}\n        final_headers.update(user_headers)\n    return final_headers",
        "docstring": "Builds a dictionary of request headers for HTTP requests, ensuring all keys are lowercase to prevent duplication. It starts with default headers defined globally in the `headers` variable, which includes a user-agent string that denotes the library version. Users can pass additional headers through the `user_headers` parameter, which will also be converted to lowercase before being merged with the default headers.\n\nParameters:\n-----------\nuser_headers : dict, optional\n    A dictionary of user-defined headers to include in the request. Keys should represent header names and values the corresponding header values.\n\nReturns:\n--------\ndict\n    A dictionary containing the combined request headers, with all keys in lowercase.\n\nDependencies:\n-------------\nThis function relies on the global `headers` variable defined at the module level, which sets a user-agent for the requests made by this library, providing information about the version of the package making the request.",
        "signature": "def _build_request_headers(user_headers=None):",
        "type": "Function",
        "class_signature": null
      },
      "sitemap_to_df": {
        "code": "def sitemap_to_df(sitemap_url, max_workers=8, recursive=True, request_headers=None):\n    \"\"\"Retrieve all URLs and other relevant tags from a sitemap, sitemap index, or a robots.txt file and return them in a pandas DataFrame. This function supports threading for improved performance and can be customized with request headers.\n\nParameters:\n- sitemap_url (str): The URL of the sitemap, sitemap index, or robots.txt file.\n- max_workers (int, optional): The maximum number of thread workers to use; increases speed but risk being blocked (default is 8).\n- recursive (bool, optional): If True, follow and import all sub-sitemaps; if False, only import the given sitemap (default is True).\n- request_headers (dict, optional): A dictionary of request headers to send while fetching the sitemap.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing extracted URLs and associated tags such as `lastmod`, `changefreq`, and `priority`.\n\nNotes:\nThis function relies on auxiliary functions: `_build_request_headers`, `_sitemaps_from_robotstxt`, and `_parse_sitemap` for handling requests and parsing XML data. It also uses `logging` for info and error messages during execution. The `headers` dictionary, defined globally, includes the User-Agent information necessary for making requests.\"\"\"\n    '\\n    Retrieve all URLs and other available tags of a sitemap(s) and put them in\\n    a DataFrame.\\n\\n    You can also pass the URL of a sitemap index, or a link to a robots.txt\\n    file.\\n\\n    :param url sitemap_url: The URL of a sitemap, either a regular sitemap, a\\n                            sitemap index, or a link to a robots.txt file.\\n                            In the case of a sitemap index or robots.txt, the\\n                            function will go through all the sub sitemaps and\\n                            retrieve all the included URLs in one DataFrame.\\n    :param int max_workers: The maximum number of workers to use for threading.\\n                            The higher the faster, but with high numbers you\\n                            risk being blocked and/or missing some data as you\\n                            might appear like an attacker.\\n    :param bool recursive: Whether or not to follow and import all sub-sitemaps\\n                           (in case you have a sitemap index), or to only\\n                           import the given sitemap. This might be useful in\\n                           case you want to explore what sitemaps are available\\n                           after which you can decide which ones you are\\n                           interested in.\\n    :param dict request_headers: One or more request headers to use while\\n                                 fetching the sitemap.\\n    :return sitemap_df: A pandas DataFrame containing all URLs, as well as\\n                        other tags if available (``lastmod``, ``changefreq``,\\n                        ``priority``, or others found in news, video, or image\\n                        sitemaps).\\n    '\n    final_headers = _build_request_headers(request_headers)\n    if sitemap_url.endswith('robots.txt'):\n        return pd.concat([sitemap_to_df(sitemap, recursive=recursive) for sitemap in _sitemaps_from_robotstxt(sitemap_url, final_headers)], ignore_index=True)\n    if sitemap_url.endswith('xml.gz'):\n        final_headers['accept-encoding'] = 'gzip'\n        xml_text = urlopen(Request(sitemap_url, headers=final_headers))\n        try:\n            resp_headers = xml_text.getheaders()\n        except AttributeError:\n            resp_headers = ''\n            pass\n        xml_text = GzipFile(fileobj=xml_text)\n    else:\n        xml_text = urlopen(Request(sitemap_url, headers=final_headers))\n        try:\n            resp_headers = xml_text.getheaders()\n        except AttributeError:\n            resp_headers = ''\n            pass\n    xml_string = xml_text.read()\n    root = ElementTree.fromstring(xml_string)\n    sitemap_df = pd.DataFrame()\n    if root.tag.split('}')[-1] == 'sitemapindex' and recursive:\n        multi_sitemap_df = pd.DataFrame()\n        sitemap_url_list = []\n        for elem in root:\n            for el in elem:\n                if 'loc' in el.tag:\n                    if el.text == sitemap_url:\n                        error_df = pd.DataFrame({'sitemap': [sitemap_url], 'errors': ['WARNING: Sitemap contains a link to itself']})\n                        multi_sitemap_df = pd.concat([multi_sitemap_df, error_df], ignore_index=True)\n                    else:\n                        sitemap_url_list.append(el.text)\n        with futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n            to_do = []\n            for sitemap in sitemap_url_list:\n                future = executor.submit(sitemap_to_df, sitemap)\n                to_do.append(future)\n            done_iter = futures.as_completed(to_do)\n            for future in done_iter:\n                try:\n                    multi_sitemap_df = pd.concat([multi_sitemap_df, future.result()], ignore_index=True)\n                except Exception as e:\n                    error_df = pd.DataFrame(dict(errors=str(e)), index=range(1))\n                    future_str = hex(id(future))\n                    hexes = [hex(id(f)) for f in to_do]\n                    index = hexes.index(future_str)\n                    error_df['sitemap'] = sitemap_url_list[index]\n                    logging.warning(msg=str(e) + ' ' + sitemap_url_list[index])\n                    multi_sitemap_df = pd.concat([multi_sitemap_df, error_df], ignore_index=True)\n        return multi_sitemap_df\n    else:\n        logging.info(msg='Getting ' + sitemap_url)\n        elem_df = _parse_sitemap(root)\n        sitemap_df = pd.concat([sitemap_df, elem_df], ignore_index=True)\n        sitemap_df['sitemap'] = [sitemap_url] if sitemap_df.empty else sitemap_url\n    if 'lastmod' in sitemap_df:\n        try:\n            sitemap_df['lastmod'] = pd.to_datetime(sitemap_df['lastmod'], utc=True)\n        except Exception:\n            pass\n    if 'priority' in sitemap_df:\n        try:\n            sitemap_df['priority'] = sitemap_df['priority'].astype(float)\n        except Exception:\n            pass\n    if resp_headers:\n        etag_lastmod = {header.lower().replace('-', '_'): val for header, val in resp_headers if header.lower() in ['etag', 'last-modified']}\n        sitemap_df = sitemap_df.assign(**etag_lastmod)\n    if 'last_modified' in sitemap_df:\n        sitemap_df['sitemap_last_modified'] = pd.to_datetime(sitemap_df['last_modified'])\n        del sitemap_df['last_modified']\n    sitemap_df['sitemap_size_mb'] = len(xml_string) / 1024 / 1024\n    sitemap_df['download_date'] = pd.Timestamp.now(tz='UTC')\n    return sitemap_df",
        "docstring": "Retrieve all URLs and other relevant tags from a sitemap, sitemap index, or a robots.txt file and return them in a pandas DataFrame. This function supports threading for improved performance and can be customized with request headers.\n\nParameters:\n- sitemap_url (str): The URL of the sitemap, sitemap index, or robots.txt file.\n- max_workers (int, optional): The maximum number of thread workers to use; increases speed but risk being blocked (default is 8).\n- recursive (bool, optional): If True, follow and import all sub-sitemaps; if False, only import the given sitemap (default is True).\n- request_headers (dict, optional): A dictionary of request headers to send while fetching the sitemap.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing extracted URLs and associated tags such as `lastmod`, `changefreq`, and `priority`.\n\nNotes:\nThis function relies on auxiliary functions: `_build_request_headers`, `_sitemaps_from_robotstxt`, and `_parse_sitemap` for handling requests and parsing XML data. It also uses `logging` for info and error messages during execution. The `headers` dictionary, defined globally, includes the User-Agent information necessary for making requests.",
        "signature": "def sitemap_to_df(sitemap_url, max_workers=8, recursive=True, request_headers=None):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "call_tree": {
    "tests/test_sitemaps.py:test_build_request_headers": {
      "advertools/sitemaps.py:_build_request_headers": {}
    },
    "tests/test_sitemaps.py:test_build_request_headers_default": {
      "advertools/sitemaps.py:_build_request_headers": {}
    },
    "tests/test_sitemaps.py:test_build_request_headers_override_default": {
      "advertools/sitemaps.py:_build_request_headers": {}
    },
    "tests/test_sitemaps.py:test_regular_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {}
        }
      }
    },
    "tests/test_sitemaps.py:test_gz_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {}
        }
      }
    },
    "tests/test_sitemaps.py:test_sitemap_index": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {}
      }
    },
    "tests/test_sitemaps.py:test_error_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {}
      }
    },
    "tests/test_sitemaps.py:test_image_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {
            "advertools/sitemaps.py:parse_xml_node": {
              "[ignored_or_cut_off]": "..."
            }
          }
        }
      }
    },
    "tests/test_sitemaps.py:test_video_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {
            "advertools/sitemaps.py:parse_xml_node": {
              "[ignored_or_cut_off]": "..."
            }
          }
        }
      }
    },
    "tests/test_sitemaps.py:test_news_sitemap": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {
            "advertools/sitemaps.py:parse_xml_node": {
              "[ignored_or_cut_off]": "..."
            }
          }
        }
      }
    },
    "tests/test_sitemaps.py:test_get_sitemaps_from_robotstxt": {
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_sitemaps_from_robotstxt": {},
        "advertools/sitemaps.py:sitemap_to_df": {
          "[ignored_or_cut_off]": "..."
        }
      }
    },
    "tests/test_sitemaps.py:test_sitemaps_offline": {
      "tests/test_sitemaps.py:offline_path": {},
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {}
        }
      }
    },
    "tests/test_sitemaps.py:test_zipped_sitemaps_offline": {
      "tests/test_sitemaps.py:offline_path": {},
      "advertools/sitemaps.py:sitemap_to_df": {
        "advertools/sitemaps.py:_build_request_headers": {},
        "advertools/sitemaps.py:_parse_sitemap": {
          "advertools/sitemaps.py:parse_xml_node": {}
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: advertools-test_sitemaps\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 advertools/\n    \u2514\u2500\u2500 sitemaps.py\n        \u251c\u2500\u2500 _build_request_headers\n        \u251c\u2500\u2500 _parse_sitemap\n        \u251c\u2500\u2500 _sitemaps_from_robotstxt\n        \u2514\u2500\u2500 sitemap_to_df\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and parsing of sitemap files, supporting various formats such as XML, gzipped sitemaps, sitemap indexes, and specialized sitemaps for images, videos, and news. It provides functionality to extract structured data from sitemaps into DataFrame objects, enabling developers to analyze and work with the sitemap content programmatically. Additionally, the module supports customizable HTTP headers for requests, allowing for flexibility in user-agent configuration and caching strategies. By streamlining the processing of sitemaps and ensuring compatibility with different sitemap types and error handling mechanisms, it solves common challenges developers face in crawling, testing, and utilizing sitemap data efficiently in web applications or SEO-related workflows.\n\n## FILE 1: advertools/sitemaps.py\n\n- FUNCTION NAME: _parse_sitemap\n  - SIGNATURE: def _parse_sitemap(root):\n  - DOCSTRING: \n```python\n\"\"\"\nParse an XML sitemap and extract relevant tags into a DataFrame.\n\nThis function processes the root element of an XML sitemap, extracting URL locations (`loc`) and additional associated tags. It constructs a nested structure to accommodate all tags for each URL and returns a DataFrame with the extracted data.\n\nParameters:\n- root (Element): The root element of the parsed XML sitemap, expected to be in the format defined by sitemaps, which includes URL locations and other associated metadata.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing the URLs and their corresponding tags, with each row representing a URL entry and columns representing extracted tag values.\n\nNotes:\n- The function relies on Python's built-in `xml.etree.ElementTree` for XML parsing.\n- Each URL is used as a key in a dictionary, `d`, to store its associated metadata dynamically as the XML structure is traversed.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - advertools/sitemaps.py:parse_xml_node\n    - advertools/sitemaps.py:sitemap_to_df\n\n- FUNCTION NAME: sitemap_to_df\n  - SIGNATURE: def sitemap_to_df(sitemap_url, max_workers=8, recursive=True, request_headers=None):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve all URLs and other relevant tags from a sitemap, sitemap index, or a robots.txt file and return them in a pandas DataFrame. This function supports threading for improved performance and can be customized with request headers.\n\nParameters:\n- sitemap_url (str): The URL of the sitemap, sitemap index, or robots.txt file.\n- max_workers (int, optional): The maximum number of thread workers to use; increases speed but risk being blocked (default is 8).\n- recursive (bool, optional): If True, follow and import all sub-sitemaps; if False, only import the given sitemap (default is True).\n- request_headers (dict, optional): A dictionary of request headers to send while fetching the sitemap.\n\nReturns:\n- pandas.DataFrame: A DataFrame containing extracted URLs and associated tags such as `lastmod`, `changefreq`, and `priority`.\n\nNotes:\nThis function relies on auxiliary functions: `_build_request_headers`, `_sitemaps_from_robotstxt`, and `_parse_sitemap` for handling requests and parsing XML data. It also uses `logging` for info and error messages during execution. The `headers` dictionary, defined globally, includes the User-Agent information necessary for making requests.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - advertools/sitemaps.py:_parse_sitemap\n    - advertools/sitemaps.py:sitemap_to_df\n    - advertools/sitemaps.py:_sitemaps_from_robotstxt\n    - advertools/sitemaps.py:_build_request_headers\n\n- FUNCTION NAME: _sitemaps_from_robotstxt\n  - SIGNATURE: def _sitemaps_from_robotstxt(robots_url, request_headers):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve all sitemap URLs listed in a robots.txt file.\n\nThis function requests the specified robots.txt URL and parses the content to extract \nall entries that begin with \"Sitemap\", collecting their corresponding URLs.\n\nParameters:\n- robots_url (str): The URL of the robots.txt file to parse for sitemap URLs.\n- request_headers (dict): A dictionary of HTTP headers to include in the request, \n                          allowing for customization of the request (e.g., User-Agent).\n\nReturns:\n- List[str]: A list containing the URLs of the sitemaps found within the robots.txt file.\n\nThis function uses the `urlopen` method from the `urllib.request` module to fetch \nthe robots.txt content, and it processes the page line by line to identify and store \nthe sitemap URLs. It is critical for functions handling sitemaps, such as `sitemap_to_df`, \nwhich can take the list of retrieved sitemaps for further data extraction and analysis.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - advertools/sitemaps.py:sitemap_to_df\n\n- FUNCTION NAME: _build_request_headers\n  - SIGNATURE: def _build_request_headers(user_headers=None):\n  - DOCSTRING: \n```python\n\"\"\"\nBuilds a dictionary of request headers for HTTP requests, ensuring all keys are lowercase to prevent duplication. It starts with default headers defined globally in the `headers` variable, which includes a user-agent string that denotes the library version. Users can pass additional headers through the `user_headers` parameter, which will also be converted to lowercase before being merged with the default headers.\n\nParameters:\n-----------\nuser_headers : dict, optional\n    A dictionary of user-defined headers to include in the request. Keys should represent header names and values the corresponding header values.\n\nReturns:\n--------\ndict\n    A dictionary containing the combined request headers, with all keys in lowercase.\n\nDependencies:\n-------------\nThis function relies on the global `headers` variable defined at the module level, which sets a user-agent for the requests made by this library, providing information about the version of the package making the request.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - advertools/sitemaps.py:sitemap_to_df\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "advertools/sitemaps.py": "\"\"\"\n.. _sitemaps:\n\nDownload, Parse, and Analyze XML Sitemaps\n=========================================\n\nOne of the fastest and easiest ways to get insights on a website's content is\nto simply download its XML sitemap(s).\n\nSitemaps are also important SEO tools as they reveal a lot of information about\nthe website, and help search engines in indexing those pages. You might want to\nrun an SEO audit and check if the URLs in the sitemap properly correspond to\nthe actual URLs of the site, so this would be an easy way to get them.\n\nSitemaps basically contain a log of publishing activity, and if they have rich\nURLs then you can do some good analysis on their content over time as well.\n\nThe :func:`sitemap_to_df` function is very simple to use, and only requires the\nURL of a sitemap, a sitemap index, or even a robots.txt file. It goes through\nthe sitemap(s) and returns a DataFrame containing all the tags and their\ninformation.\n\n*  `loc`: The location of the URLs of hte sitemaps.\n*  `lastmod`: The datetime of the date when each URL was last modified, if\n   available.\n*  `sitemap`: The URL of the sitemap from which the URL on this row was\n   retreived.\n*  `etag`: The entity tag of the response header, if provided.\n*  `sitemap_last_modified`: The datetime when the sitemap file was last\n   modified, if provided.\n*  `sitemap_size_mb`: The size of the sitemap in mega bytes\n   (1MB = 1,024 x 1,024 bytes)\n*  `download_date`: The datetime when the sitemap was downloaded.\n\nSitemap Index\n-------------\nLarge websites typically have a sitmeapindex file, which contains links to all\nother regular sitemaps that belong to the site. The :func:`sitemap_to_df`\nfunction retreives all sub-sitemaps recursively by default.\nIn some cases, especially with very large sites, it might be better to first\nget the sitemap index, explore its structure, and then decide which sitemaps\nyou want to get, or if you want them all. Even with smaller websites, it still\nmight be interesting to get the index only and see how it is structured.\n\nThis behavior can be modified by the ``recursive`` parameter, which is set to\n`True` by default. Set it to `False` if you want only the index file.\n\nAnother interesting thing you might want to do is to provide a robots.txt URL,\nand set `recursive=False` to get all available sitemap index files.\n\n>>> sitemap_to_df(\"https://example.com/robots.txt\", recursive=False)\n\nLet's now go through a quick example of what can be done with sitemaps. We can\nstart by getting one of the BBC's sitemaps.\n\nRegular XML Sitemaps\n--------------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    import advertools as adv\n\n    bbc_sitemap = adv.sitemap_to_df('https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml')\n    bbc_sitemap.head(10)\n\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n  ..  loc                                                                            lastmod                    sitemap                                                       etag                              sitemap_last_modified        sitemap_size_mb  download_date\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n   0  https://www.bbc.com/arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2     2009-06-20 14:10:48+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   1  https://www.bbc.com/arabic/middleeast/2009/06/090620_iraq_blast_tc2            2009-06-20 21:07:43+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   2  https://www.bbc.com/arabic/business/2009/06/090622_me_worldbank_tc2            2009-06-22 12:41:48+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   3  https://www.bbc.com/arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2  2009-06-24 15:27:24+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   4  https://www.bbc.com/arabic/business/2009/06/090618_tomtest                     2009-06-18 15:32:54+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   5  https://www.bbc.com/arabic/multimedia/2009/06/090625_sf_tamim_verdict_tc2      2009-06-25 09:46:39+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   6  https://www.bbc.com/arabic/middleeast/2009/06/090623_iz_cairo_russia_tc2       2009-06-23 13:10:56+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   7  https://www.bbc.com/arabic/sports/2009/06/090622_me_egypt_us_tc2               2009-06-22 15:37:07+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   8  https://www.bbc.com/arabic/sports/2009/06/090624_mz_wimbledon_tc2              2009-06-24 13:57:18+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n   9  https://www.bbc.com/arabic/worldnews/2009/06/090623_mz_leaders_lifespan_tc2    2009-06-23 13:24:23+00:00  https://www.bbc.com/sitemaps/https-sitemap-com-archive-1.xml  e7e15811c65f406f89f89fe10aef29f5  2021-11-05 20:52:56+00:00            7.63124  2022-02-12 01:37:39.461037+00:00\n====  =============================================================================  =========================  ============================================================  ================================  =========================  =================  ================================\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    print(bbc_sitemap.shape)\n    print(bbc_sitemap.dtypes)\n\n.. code-block::\n\n    (49999, 7)\n\n    loc                                   object\n    lastmod                  datetime64[ns, UTC]\n    sitemap                               object\n    etag                                  object\n    sitemap_last_modified    datetime64[ns, UTC]\n    sitemap_size_mb                      float64\n    download_date            datetime64[ns, UTC]\n    dtype: object\n\nSince ``lastmod`` is a ``datetime`` object, we can easily use it for various\ntime-related operations.\nHere we look at how many articles have been published (last modified) per year.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    bbc_sitemap.set_index('lastmod').resample('A')['loc'].count()\n\n.. code-block::\n\n    lastmod\n    2008-12-31 00:00:00+00:00     2287\n    2009-12-31 00:00:00+00:00    47603\n    2010-12-31 00:00:00+00:00        0\n    2011-12-31 00:00:00+00:00        0\n    2012-12-31 00:00:00+00:00        0\n    2013-12-31 00:00:00+00:00        0\n    2014-12-31 00:00:00+00:00        0\n    2015-12-31 00:00:00+00:00        0\n    2016-12-31 00:00:00+00:00        0\n    2017-12-31 00:00:00+00:00        0\n    2018-12-31 00:00:00+00:00        0\n    2019-12-31 00:00:00+00:00       99\n    2020-12-31 00:00:00+00:00       10\n    Freq: A-DEC, Name: loc, dtype: int64\n\nAs the majority are in 2009 with a few in other years, it seems these were\nlater updated, but we would have to check to verify (in this special case BBC's\nURLs contain date information, which can be compared to ``lastmod`` to check if\nthere is a difference between them).\n\nWe can take a look at a sample of the URLs to get the URL template that they\nuse.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    bbc_sitemap['loc'].sample(10).tolist()\n\n.. code-block::\n\n    ['https://www.bbc.com/russian/rolling_news/2009/06/090628_rn_pakistani_soldiries_ambush',\n    'https://www.bbc.com/urdu/pakistan/2009/04/090421_mqm_speaks_rza',\n    'https://www.bbc.com/arabic/middleeast/2009/07/090723_ae_silwan_tc2',\n    'https://www.bbc.com/portuguese/noticias/2009/07/090729_iraquerefenbritsfn',\n    'https://www.bbc.com/portuguese/noticias/2009/06/090623_egitomilitaresfn',\n    'https://www.bbc.com/portuguese/noticias/2009/03/090302_gazaconferenciaml',\n    'https://www.bbc.com/portuguese/noticias/2009/07/090715_hillary_iran_cq',\n    'https://www.bbc.com/vietnamese/culture/2009/04/090409_machienhuu_revisiting',\n    'https://www.bbc.com/portuguese/noticias/2009/05/090524_paquistaoupdateg',\n    'https://www.bbc.com/arabic/worldnews/2009/06/090629_om_pakistan_report_tc2']\n\nIt seems the pattern is\n\n    **https://www.bbc.com/{language}/{topic}/{YYYY}/{MM}/{YYMMDD_article_title}**\n\nThis is quite a rich structure, full of useful information. We can\n:ref:`analyze the URL structure <urlytics>` using the ``url_to_df`` function:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df = adv.url_to_df(bbc_sitemap['loc'])\n    url_df\n\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n   ..  url                                                                            scheme    netloc       path                                                        query    fragment    dir_1       dir_2         dir_3    dir_4  dir_5                              dir_6    dir_7  last_dir\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n    0  https://www.bbc.com/arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2     https     www.bbc.com  /arabic/middleeast/2009/06/090620_as_iraq_explosion_tc2                          arabic      middleeast     2009       06  090620_as_iraq_explosion_tc2         nan      nan  090620_as_iraq_explosion_tc2\n    1  https://www.bbc.com/arabic/middleeast/2009/06/090620_iraq_blast_tc2            https     www.bbc.com  /arabic/middleeast/2009/06/090620_iraq_blast_tc2                                 arabic      middleeast     2009       06  090620_iraq_blast_tc2                nan      nan  090620_iraq_blast_tc2\n    2  https://www.bbc.com/arabic/business/2009/06/090622_me_worldbank_tc2            https     www.bbc.com  /arabic/business/2009/06/090622_me_worldbank_tc2                                 arabic      business       2009       06  090622_me_worldbank_tc2              nan      nan  090622_me_worldbank_tc2\n    3  https://www.bbc.com/arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2  https     www.bbc.com  /arabic/multimedia/2009/06/090624_me_inpictures_brazil_tc2                       arabic      multimedia     2009       06  090624_me_inpictures_brazil_tc2      nan      nan  090624_me_inpictures_brazil_tc2\n    4  https://www.bbc.com/arabic/business/2009/06/090618_tomtest                     https     www.bbc.com  /arabic/business/2009/06/090618_tomtest                                          arabic      business       2009       06  090618_tomtest                       nan      nan  090618_tomtest\n49994  https://www.bbc.com/vietnamese/world/2009/08/090831_dalailamataiwan            https     www.bbc.com  /vietnamese/world/2009/08/090831_dalailamataiwan                                 vietnamese  world          2009       08  090831_dalailamataiwan               nan      nan  090831_dalailamataiwan\n49995  https://www.bbc.com/vietnamese/world/2009/09/090901_putin_regret_pact          https     www.bbc.com  /vietnamese/world/2009/09/090901_putin_regret_pact                               vietnamese  world          2009       09  090901_putin_regret_pact             nan      nan  090901_putin_regret_pact\n49996  https://www.bbc.com/vietnamese/culture/2009/09/090901_tiananmen_movie          https     www.bbc.com  /vietnamese/culture/2009/09/090901_tiananmen_movie                               vietnamese  culture        2009       09  090901_tiananmen_movie               nan      nan  090901_tiananmen_movie\n49997  https://www.bbc.com/vietnamese/pictures/2009/08/090830_ugc_ddh_sand            https     www.bbc.com  /vietnamese/pictures/2009/08/090830_ugc_ddh_sand                                 vietnamese  pictures       2009       08  090830_ugc_ddh_sand                  nan      nan  090830_ugc_ddh_sand\n49998  https://www.bbc.com/vietnamese/business/2009/09/090901_japecontask             https     www.bbc.com  /vietnamese/business/2009/09/090901_japecontask                                  vietnamese  business       2009       09  090901_japecontask                   nan      nan  090901_japecontask\n=====  =============================================================================  ========  ===========  ==========================================================  =======  ==========  ==========  ==========  =======  =======  ===============================  =======  =======  ===============================\n\nIt seems that the ``dir_1`` is where they have the language information, so we\ncan easily count how many articles they have per language:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['dir_1'].value_counts()\n\n.. code-block::\n\n    russian       14022\n    persian       10968\n    portuguese     5403\n    urdu           5068\n    mundo          5065\n    vietnamese     3561\n    arabic         2984\n    hindi          1677\n    turkce          706\n    ukchina         545\n    Name: dir_1, dtype: int64\n\nWe can also get a subset of articles written in a certain language, and see how\nmany articles they publish per month, week, year, etc.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    (bbc_sitemap[bbc_sitemap['loc']\n     .str.contains('/russian/')]\n     .set_index('lastmod')\n     .resample('M')['loc'].count())\n\n.. code-block::\n\n    lastmod\n    2009-04-30 00:00:00+00:00    1506\n    2009-05-31 00:00:00+00:00    2910\n    2009-06-30 00:00:00+00:00    3021\n    2009-07-31 00:00:00+00:00    3250\n    2009-08-31 00:00:00+00:00    2769\n                                 ...\n    2019-09-30 00:00:00+00:00       8\n    2019-10-31 00:00:00+00:00      17\n    2019-11-30 00:00:00+00:00      11\n    2019-12-31 00:00:00+00:00      24\n    2020-01-31 00:00:00+00:00       6\n    Freq: M, Name: loc, Length: 130, dtype: int64\n\nThe topic or category of the article seems to be in ``dir_2`` for which we can\ndo the same and count the values.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['dir_2'].value_counts()[:20]\n\n.. code-block::\n\n    rolling_news        9044\n    world               5050\n    noticias            4224\n    iran                3682\n    pakistan            2103\n    afghanistan         1959\n    multimedia          1657\n    internacional       1555\n    sport               1350\n    international       1293\n    india               1285\n    america_latina      1274\n    business            1204\n    cultura_sociedad     913\n    middleeast           874\n    worldnews            872\n    russia               841\n    radio                769\n    science              755\n    football             674\n    Name: dir_2, dtype: int64\n\nThere is much more you can do, and a lot depends on the URL structure, which\nyou have to explore and run the right operation.\n\nFor example, we can use the ``last_dir`` column which contains the slugs\nof the articles, replace underscores with spaces, split, concatenate all, put\nin a ``pd.Series`` and count the values. This way we see how many times each\nword occurred in an article. The same code can also be run after filtering for\narticles in a particular language to get a more meaningful list of words.\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    url_df['last_dir'].str.split('_').str[1:].explode().value_counts()[:20]\n\n.. code-block::\n\n    rn          8808\n    tc2         3153\n    iran        1534\n    video        973\n    obama        882\n    us           862\n    china        815\n    ir88         727\n    russia       683\n    si           640\n    np           638\n    afghan       632\n    ka           565\n    an           556\n    iraq         554\n    pakistan     547\n    nh           533\n    cq           520\n    zs           510\n    ra           491\n    Name: last_dir, dtype: int64\n\nThis was a quick overview and data preparation for a sample sitemap. Once you\nare familiar with the sitemap's structure, you can more easily start analyzing\nthe content.\n\n.. note::\n\n    There is a bug currently with tags that contain multiple values in\n    sitemaps. If an image column in a news sitemap contains multiple images,\n    only the last one is retreived. The same applies for any other sitemap that\n    has a tag with multiple values.\n\n\nNews Sitemaps\n-------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    nyt_news = adv.sitemap_to_df('https://www.nytimes.com/sitemaps/new/news.xml.gz')\n    print(nyt_news.shape)\n    # (5085, 16)\n    nyt_news\n\nn  ..  loc                                                                                                      lastmod                    news    news_publication    publication_name    publication_language    news_publication_date    news_title                                                                            news_keywords                                                                                                             image    image_loc                                                                                                                                                                           sitemap                                             etag                              sitemap_last_modified        sitemap_size_mb  download_date\nn   0  https://www.nytimes.com/interactive/2021/us/ottawa-ohio-covid-cases.html                                 2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Ottawa County, Ohio Covid Case and Exposure Risk Tracker                              Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/ohio-coronavirus-cases-promo-1585539358901/ohio-coronavirus-cases-promo-1585539358901-articleLarge-v274.png                           https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   1  https://www.nytimes.com/interactive/2021/us/hopewell-virginia-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Hopewell, Virginia Covid Case and Exposure Risk Tracker                               Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/virginia-coronavirus-cases-promo-1585539536519/virginia-coronavirus-cases-promo-1585539536519-articleLarge-v271.png                   https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   2  https://www.nytimes.com/interactive/2021/us/box-butte-nebraska-covid-cases.html                          2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Box Butte County, Nebraska Covid Case and Exposure Risk Tracker                       Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/nebraska-coronavirus-cases-promo-1585539237156/nebraska-coronavirus-cases-promo-1585539237156-articleLarge-v281.png                   https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   3  https://www.nytimes.com/interactive/2021/us/stearns-minnesota-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Stearns County, Minnesota Covid Case and Exposure Risk Tracker                        Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/minnesota-coronavirus-cases-promo-1585539172701/minnesota-coronavirus-cases-promo-1585539172701-articleLarge-v282.png                 https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n   4  https://www.nytimes.com/interactive/2021/us/benton-iowa-covid-cases.html                                 2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Benton County, Iowa Covid Case and Exposure Risk Tracker                              Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/iowa-coronavirus-cases-promo-1585539039190/iowa-coronavirus-cases-promo-1585539039190-articleLarge-v286.png                           https://www.nytimes.com/sitemaps/new/news-6.xml.gz  0cff645fbb74c21791568b78a888967d  2022-02-12 20:17:31+00:00          0.0774069  2022-02-12 20:18:39.744247+00:00\n5080  https://www.nytimes.com/interactive/2021/us/hodgeman-kansas-covid-cases.html                             2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Hodgeman County, Kansas Covid Case and Exposure Risk Tracker                          Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/kansas-coronavirus-cases-promo-1585539054298/kansas-coronavirus-cases-promo-1585539054298-articleLarge-v285.png                       https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5081  https://www.nytimes.com/interactive/2021/us/miller-georgia-covid-cases.html                              2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Miller County, Georgia Covid Case and Exposure Risk Tracker                           Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/georgia-coronavirus-cases-promo-1585538956622/georgia-coronavirus-cases-promo-1585538956622-articleLarge-v290.png                     https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5082  https://www.nytimes.com/interactive/2020/11/03/us/elections/results-west-virginia-house-district-1.html  2022-02-12 00:00:00+00:00                              The New York Times  en                      2020-11-03T17:00:00Z     West Virginia First Congressional District Results: David McKinley vs. Natalie Cline  Elections, Presidential Election of 2020, United States, internal-election-open, House of Representatives, West Virginia           https://static01.nyt.com/images/2020/11/03/us/elections/eln-promo-race-west-virginia-house-1WINNER-mckinleyd/eln-promo-race-west-virginia-house-1WINNER-mckinleyd-articleLarge.png  https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5083  https://www.nytimes.com/interactive/2020/11/03/us/elections/results-maine-senate.html                    2022-02-12 00:00:00+00:00                              The New York Times  en                      2020-11-03T17:00:00Z     Maine Senate Results: Susan Collins Defeats Sara Gideon                               Elections, Presidential Election of 2020, United States, internal-election-open, Senate, Maine                                     https://static01.nyt.com/images/2020/11/03/us/elections/eln-promo-race-maine-senateWINNER-collinss/eln-promo-race-maine-senateWINNER-collinss-articleLarge.png                      https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\n5084  https://www.nytimes.com/interactive/2021/us/randolph-missouri-covid-cases.html                           2022-02-12 00:00:00+00:00                              The New York Times  en                      2021-01-27T17:00:00Z     Randolph County, Missouri Covid Case and Exposure Risk Tracker                        Coronavirus (2019-nCoV), States (US), Deaths (Fatalities), United States, Disease Rates                                            https://static01.nyt.com/images/2020/03/29/us/missouri-coronavirus-cases-promo-1585539206866/missouri-coronavirus-cases-promo-1585539206866-articleLarge-v282.png                   https://www.nytimes.com/sitemaps/new/news-2.xml.gz  f53301c8286f9bf59ef297f0232dcfc1  2022-02-12 20:17:31+00:00          0.914107   2022-02-12 20:18:39.995323+00:00\nn\nVideo Sitemaps\n--------------\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    wired_video = adv.sitemap_to_df('https://www.wired.com/video/sitemap.xml')\n    print(wired_video.shape)\n    # (2955, 14)\n    wired_video\n\nn  ..  loc                                                                                                             video    video_thumbnail_loc                                                                                                                                                                                                                     video_title                                                                     video_description                                                                                                                                                                                                                                                                                                                           video_content_loc                                                                                           video_duration  video_publication_date       video_expiration_date  lastmod    sitemap                                  etag                                  sitemap_size_mb  download_date\nn   0  https://www.wired.com/video/watch/autocomplete-inverviews-owen-wilson-answers-the-webs-most-searched-questions           http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644595412/wired_autocomplete-inverviews-owen-wilson-answers-the-webs-most-searched-questions.jpg  Autocomplete Interview - Owen Wilson Answers The Web\u2019s Most Searched Questions  Owen Wilson takes the WIRED Autocomplete Interview and answers the internet's most searched questions about himself. How did Owen Wilson break his nose? How many movies is he in with Ben Stiller? Is Owen in every Wes Anderson movie? Is he a good skateboarder? Owen answers all these questions and much more!                         http://dp8hsntg6do36.cloudfront.net/62067f085577c277dd9acf42/39687acb-505b-4c69-94f1-afaa7cb5e636low.mp4               645  2022-02-11T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   1  https://www.wired.com/video/watch/wired-news-and-science-samsung-s22                                                     http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644418652/wired_wired-news-and-science-samsung-s22.jpg                                            Currents - Samsung S22 Ultra Explained in 3 Minutes                             Julian Chokkattu, Reviews Editor for WIRED, walks us through a few of the Samsung S22 Ultra's new features.                                                                                                                                                                                                                                 http://dp8hsntg6do36.cloudfront.net/6203cd7b5577c23d19622259/fe546b9b-a320-4883-9cbd-0d790f23c36dlow.mp4               184  2022-02-10T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   2  https://www.wired.com/video/watch/first-look-samsung-galaxy-unpacked-2022                                                http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644381627/wired_first-look-samsung-galaxy-unpacked-2022.jpg                                       First Look: Samsung Galaxy Unpacked 2022                                        Samsung has debuted three new smartphones\u2014the Galaxy S22 Ultra, S22+, S22\u2014and three Android tablets in various sizes at Samsung Unpacked 2022. WIRED's Julian Chokkattu takes a look at the newest features.                                                                                                                                http://dp8hsntg6do36.cloudfront.net/620345a15577c23d46622256/d74930cf-11e1-466e-b023-1d9b91664204low.mp4               373  2022-02-09T15:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n   3  https://www.wired.com/video/watch/reinventing-with-data                                                                  http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1642801328/wired_reinventing-with-data.jpg                                                         Reinventing With Data | WIRED Brand Lab                                         Produced by WIRED Brand Lab with AWS | What can the Seattle Seahawks winning strategy teach businesses?                                                                                                                                                                                                                                     http://dp8hsntg6do36.cloudfront.net/619bd9be1d75db41adee6b58/d4889b15-4f34-41b0-b935-0c79465a9793low.mp4               292  2022-02-09T13:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       Swami Sivasubramanian, VP of AI at Amazon Web Services helps us to understand how the Seattle Seahawks are using data and AI to remain a top performing team in the NFL, and how their process of data capture, storage, and machine learning to gain strategic insights is a model for making better business decision across industries.\n   4  https://www.wired.com/video/watch/seth-rogen-answers-the-webs-most-searched-questions                                    http://dwgyu36up6iuz.cloudfront.net/heru80fdn/image/upload/c_fill,d_placeholder_thescene.jpg,fl_progressive,g_face,h_180,q_80,w_320/v1644335726/wired_seth-rogen-answers-the-webs-most-searched-questions.jpg                           Autocomplete Interview - Seth Rogen Answers The Web\u2019s Most Searched Questions   \"Pam &amp; Tommy\" star Seth Rogen takes the WIRED Autocomplete Interview once again and answers the internet's most searched questions about himself. Who does Seth Rogen look like? Does Seth have a podcast? Does he sell pottery? Does he celebrate Christmas? Does he play Call of Duty?                                                http://dp8hsntg6do36.cloudfront.net/6201430a1d75db06ae1f62e8/488ed635-91d0-4281-9e64-34be9bf74f00low.mp4               635  2022-02-08T17:00:00+00:00                      nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       Pam &amp; Tommy premieres February 2 on Hulu (finale on March 9)\n2950  https://www.wired.com/video/genres/how-to                                                                       nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2951  https://www.wired.com/video/genres/movies-tv                                                                    nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2952  https://www.wired.com/video/genres/events                                                                       nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2953  https://www.wired.com/video/genres/promotion                                                                    nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\n2954  https://www.wired.com/video/genres/transportation                                                               nan      nan                                                                                                                                                                                                                                     nan                                                                             nan                                                                                                                                                                                                                                                                                                                                         nan                                                                                                                    nan  nan                                            nan  NaT        https://www.wired.com/video/sitemap.xml  W/90b11f47f8b2ab57cb180cbd3c6f06f9            2.86199  2022-02-12 20:24:55.841851+00:00\nn\nRequest Headers\n---------------\nYou can set and change any request header while runnig this function if you want to\nmodify its behavior. This can be done using a simple dictionary, where the keys are the\nnames of the headers and values are their values.\n\nFor example, one of the common use-cases is to set a different User-agent than the\ndefault one:\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\", headers={\"User-agent\": \"YOUR-USER-AGENT\"})\n\nAnother interesting thing you might want to do is utilize the `If-None-Match` header.\nIn many cases the sitemaps return an etag for the sitemap. This is to make it easier to\nknow whether or not a sitemap has changed. A different etag means the sitemap has been\nupdated/changed.\n\nWith large sitemaps, where many sub-sitemaps don't change that much you don't need to\nre-download the sitemap every time. You can simply use this header which would download\nthe sitemap only if it has a different etag. This can also be useful with frequently\nchanging sitemaps like news sitemaps for example. In this case you probably want to\nconstantly check but only fetch the sitemap if it was changed.\n\n\n.. thebe-button::\n    Run this code\n\n.. code-block::\n    :class: thebe, thebe-init\n\n    # First time:\n    ft = adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\")\n    etag = ft['etag'][0]\n\n    # Second time:\n    ft = adv.sitemap_to_df(\"https://www.ft.com/sitemaps/news.xml\", headers={\"If-None-Match\": etag})\n\"\"\"\nimport logging\nfrom concurrent import futures\nfrom gzip import GzipFile\nfrom urllib.request import Request, urlopen\nfrom xml.etree import ElementTree\nimport pandas as pd\nfrom advertools import __version__ as version\nlogging.basicConfig(level=logging.INFO)\nheaders = {'User-Agent': 'advertools-' + version}"
  }
}