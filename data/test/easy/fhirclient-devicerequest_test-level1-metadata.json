{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-devicerequest_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/devicerequest_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import devicerequest\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass DeviceRequestTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"DeviceRequest\", js[\"resourceType\"])\n        return devicerequest.DeviceRequest(js)\n    \n    def testDeviceRequest1(self):\n        inst = self.instantiate_from(\"devicerequest-example-insulinpump.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a DeviceRequest instance\")\n        self.implDeviceRequest1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"DeviceRequest\", js[\"resourceType\"])\n        inst2 = devicerequest.DeviceRequest(js)\n        self.implDeviceRequest1(inst2)\n    \n    def implDeviceRequest1(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2013-05-08T09:33:27+07:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2013-05-08T09:33:27+07:00\")\n        self.assertEqual(inst.codeCodeableConcept.coding[0].code, \"43148-6\")\n        self.assertEqual(inst.codeCodeableConcept.coding[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.codeCodeableConcept.text, \"Insulin delivery device panel\")\n        self.assertEqual(inst.groupIdentifier.value, \"ip_request1\")\n        self.assertEqual(inst.id, \"insulinpump\")\n        self.assertEqual(inst.identifier[0].value, \"ip_request1.1\")\n        self.assertEqual(inst.instantiatesCanonical[0], \"http://motivemi.com/artifacts/PlanDefinition/low-suicide-risk-order-set\")\n        self.assertEqual(inst.intent, \"instance-order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"this is the right device brand and model\")\n        self.assertEqual(inst.occurrenceDateTime.datetime, FHIRDateTime(\"2013-05-08T09:33:27+07:00\").datetime)\n        self.assertEqual(inst.occurrenceDateTime.as_json(), \"2013-05-08T09:33:27+07:00\")\n        self.assertEqual(inst.performerType.coding[0].display, \"Qualified nurse\")\n        self.assertEqual(inst.performerType.text, \"Nurse\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.reasonCode[0].text, \"gastroparesis\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testDeviceRequest2(self):\n        inst = self.instantiate_from(\"devicerequest-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a DeviceRequest instance\")\n        self.implDeviceRequest2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"DeviceRequest\", js[\"resourceType\"])\n        inst2 = devicerequest.DeviceRequest(js)\n        self.implDeviceRequest2(inst2)\n    \n    def implDeviceRequest2(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.intent, \"original-order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/devicerequest.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DeviceRequest).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass DeviceRequest(domainresource.DomainResource):\n    \"\"\" Medical device request.\n    \n    Represents a request for a patient to employ a medical device. The device\n    may be an implantable device, or an external assistive device, such as a\n    walker.\n    \"\"\"\n    \n    resource_type = \"DeviceRequest\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.authoredOn = None\n        \"\"\" When recorded.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" What request fulfills.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.codeCodeableConcept = None\n        \"\"\" Device requested.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.codeReference = None\n        \"\"\" Device requested.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter motivating request.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.groupIdentifier = None\n        \"\"\" Identifier of composite request.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External Request identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Instantiates FHIR protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Instantiates external protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.insurance = None\n        \"\"\" Associated insurance coverage.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.intent = None\n        \"\"\" proposal | plan | directive | order | original-order | reflex-order\n        | filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Notes or comments.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceDateTime = None\n        \"\"\" Desired time or schedule for use.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.occurrencePeriod = None\n        \"\"\" Desired time or schedule for use.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceTiming = None\n        \"\"\" Desired time or schedule for use.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.parameter = None\n        \"\"\" Device details.\n        List of `DeviceRequestParameter` items (represented as `dict` in JSON). \"\"\"\n        \n        self.performer = None\n        \"\"\" Requested Filler.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.performerType = None\n        \"\"\" Filler role.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.priorRequest = None\n        \"\"\" What request replaces.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Coded Reason for request.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Linked Reason for request.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.relevantHistory = None\n        \"\"\" Request provenance.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requester = None\n        \"\"\" Who/what is requesting diagnostics.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | on-hold | revoked | completed | entered-in-error |\n        unknown.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Focus of request.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.supportingInfo = None\n        \"\"\" Additional clinical information.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceRequest, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceRequest, self).elementProperties()\n        js.extend([\n            (\"authoredOn\", \"authoredOn\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"codeCodeableConcept\", \"codeCodeableConcept\", codeableconcept.CodeableConcept, False, \"code\", True),\n            (\"codeReference\", \"codeReference\", fhirreference.FHIRReference, False, \"code\", True),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"groupIdentifier\", \"groupIdentifier\", identifier.Identifier, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, True, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, True, None, False),\n            (\"insurance\", \"insurance\", fhirreference.FHIRReference, True, None, False),\n            (\"intent\", \"intent\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"occurrenceDateTime\", \"occurrenceDateTime\", fhirdatetime.FHIRDateTime, False, \"occurrence\", False),\n            (\"occurrencePeriod\", \"occurrencePeriod\", period.Period, False, \"occurrence\", False),\n            (\"occurrenceTiming\", \"occurrenceTiming\", timing.Timing, False, \"occurrence\", False),\n            (\"parameter\", \"parameter\", DeviceRequestParameter, True, None, False),\n            (\"performer\", \"performer\", fhirreference.FHIRReference, False, None, False),\n            (\"performerType\", \"performerType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"priorRequest\", \"priorRequest\", fhirreference.FHIRReference, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"relevantHistory\", \"relevantHistory\", fhirreference.FHIRReference, True, None, False),\n            (\"requester\", \"requester\", fhirreference.FHIRReference, False, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"supportingInfo\", \"supportingInfo\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass DeviceRequestParameter(backboneelement.BackboneElement):\n    \"\"\" Device details.\n    \n    Specific parameters for the ordered item.  For example, the prism value for\n    lenses.\n    \"\"\"\n    \n    resource_type = \"DeviceRequestParameter\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Device detail.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Value of detail.\n        Type `bool`. \"\"\"\n        \n        self.valueCodeableConcept = None\n        \"\"\" Value of detail.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Value of detail.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRange = None\n        \"\"\" Value of detail.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceRequestParameter, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceRequestParameter, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", False),\n            (\"valueCodeableConcept\", \"valueCodeableConcept\", codeableconcept.CodeableConcept, False, \"value\", False),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", False),\n            (\"valueRange\", \"valueRange\", range.Range, False, \"value\", False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import timing\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance.\n\nIf the instance was initialized with a JSON value, this method will return that original value. If no such value exists (i.e., if the instance was created without an input string), it will return the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated from the internal `date` attribute, which holds the Python representation of the date as a `datetime.date` object.\n\nAttributes:\n- `origval`: Stores the original JSON string passed during initialization, which is used for the return value when available.\n- `date`: A `datetime.date` representation of the date that may be derived from the `origval`.\n\nThis method interacts with other parts of the FHIRDate class by providing access to the input value (`origval`) and the ISO string representation (`isostring`) derived from `date`.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance.\n\nIf the instance was initialized with a JSON value, this method will return that original value. If no such value exists (i.e., if the instance was created without an input string), it will return the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated from the internal `date` attribute, which holds the Python representation of the date as a `datetime.date` object.\n\nAttributes:\n- `origval`: Stores the original JSON string passed during initialization, which is used for the return value when available.\n- `date`: A `datetime.date` representation of the date that may be derived from the `origval`.\n\nThis method interacts with other parts of the FHIRDate class by providing access to the input value (`origval`) and the ISO string representation (`isostring`) derived from `date`.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a date-time value in ISO 8601 format, or None. This value is passed to the parent class FHIRDate during initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime representation of the provided jsonval. Initially set to None until a valid jsonval is parsed.\n\nThis constructor calls the superclass's __init__ method to ensure backward compatibility with FHIRDate, allowing instances to be identified as both FHIRDateTime and FHIRDate.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a date-time value in ISO 8601 format, or None. This value is passed to the parent class FHIRDate during initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime representation of the provided jsonval. Initially set to None until a valid jsonval is parsed.\n\nThis constructor calls the superclass's __init__ method to ensure backward compatibility with FHIRDate, allowing instances to be identified as both FHIRDateTime and FHIRDate.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns a JSON representation of the FHIRAbstractResource instance.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nstructure and then adds a 'resourceType' key, which indicates the specific \ntype of the FHIR resource being represented. The resource type is derived \nfrom the class attribute `resource_type`, which is set to 'FHIRAbstractResource'. \n\nNo input parameters are required. The method returns a dictionary representing \nthe resource in JSON format, inclusive of its type. This function is critical \nfor serializing the resource instance for communication with FHIR-compliant \nservers or systems.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns a JSON representation of the FHIRAbstractResource instance.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nstructure and then adds a 'resourceType' key, which indicates the specific \ntype of the FHIR resource being represented. The resource type is derived \nfrom the class attribute `resource_type`, which is set to 'FHIRAbstractResource'. \n\nNo input parameters are required. The method returns a dictionary representing \nthe resource in JSON format, inclusive of its type. This function is critical \nfor serializing the resource instance for communication with FHIR-compliant \nservers or systems.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/devicerequest.py": {
      "DeviceRequest.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DeviceRequest instance for a medical device request. This constructor sets up various properties related to the device request, including details about the device, associated patient, request identifiers, insurance information, the status of the request, and timings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the DeviceRequest instance.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError during initialization. If False, it allows for less strict validation.\n\nAttributes initialized include:\n- authoredOn (FHIRDateTime): The datetime when the request was recorded.\n- basedOn (List[FHIRReference]): References to other requests that this request fulfills.\n- codeCodeableConcept (CodeableConcept): The specific device that is being requested.\n- codeReference (FHIRReference): Another way to reference the device being requested.\n- encounter (FHIRReference): The encounter that motivates the device request.\n- groupIdentifier (Identifier): An identifier for composite requests.\n- identifier (List[Identifier]): External identifiers for the request.\n- instantiatesCanonical (List[str]): References to FHIR protocols or definitions.\n- instantiatesUri (List[str]): References to external protocols or definitions.\n- insurance (List[FHIRReference]): References to associated insurance coverage.\n- intent (str): The intent of the request, e.g., proposal or order.\n- note (List[Annotation]): Any notes or comments associated with the request.\n- occurrenceDateTime (FHIRDateTime): Desired date and time for the use of the device.\n- occurrencePeriod (Period): Desired period for the use of the device.\n- occurrenceTiming (Timing): Desired timing for the use of the device.\n- parameter (List[DeviceRequestParameter]): Details regarding the requested device.\n- performer (FHIRReference): The requested filler role.\n- performerType (CodeableConcept): Defines the role of the performer.\n- priorRequest (List[FHIRReference]): References to requests that this one replaces.\n- priority (str): Priority level of the request (routine, urgent, etc.).\n- reasonCode (List[CodeableConcept]): Coded reasons for the request.\n- reasonReference (List[FHIRReference]): Linked references to reasons for the request.\n- relevantHistory (List[FHIRReference]): Provenance history of the request.\n- requester (FHIRReference): Identifies who is requesting the device.\n- status (str): Current status of the request.\n- subject (FHIRReference): Reference to the subject of the request.\n- supportingInfo (List[FHIRReference]): Additional clinical information pertinent to the request.\n\nThis constructor calls the superclass's initializer to incorporate inherited properties and maintain structure integrity according to the FHIR model.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.authoredOn = None\n        ' When recorded.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.basedOn = None\n        ' What request fulfills.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.codeCodeableConcept = None\n        ' Device requested.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.codeReference = None\n        ' Device requested.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter motivating request.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.groupIdentifier = None\n        ' Identifier of composite request.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' External Request identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Instantiates FHIR protocol or definition.\\n        List of `str` items. '\n        self.instantiatesUri = None\n        ' Instantiates external protocol or definition.\\n        List of `str` items. '\n        self.insurance = None\n        ' Associated insurance coverage.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.intent = None\n        ' proposal | plan | directive | order | original-order | reflex-order\\n        | filler-order | instance-order | option.\\n        Type `str`. '\n        self.note = None\n        ' Notes or comments.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.occurrenceDateTime = None\n        ' Desired time or schedule for use.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.occurrencePeriod = None\n        ' Desired time or schedule for use.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.occurrenceTiming = None\n        ' Desired time or schedule for use.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.parameter = None\n        ' Device details.\\n        List of `DeviceRequestParameter` items (represented as `dict` in JSON). '\n        self.performer = None\n        ' Requested Filler.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.performerType = None\n        ' Filler role.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.priorRequest = None\n        ' What request replaces.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reasonCode = None\n        ' Coded Reason for request.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Linked Reason for request.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.relevantHistory = None\n        ' Request provenance.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.requester = None\n        ' Who/what is requesting diagnostics.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | on-hold | revoked | completed | entered-in-error |\\n        unknown.\\n        Type `str`. '\n        self.subject = None\n        ' Focus of request.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.supportingInfo = None\n        ' Additional clinical information.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(DeviceRequest, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DeviceRequest instance for a medical device request. This constructor sets up various properties related to the device request, including details about the device, associated patient, request identifiers, insurance information, the status of the request, and timings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the DeviceRequest instance.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError during initialization. If False, it allows for less strict validation.\n\nAttributes initialized include:\n- authoredOn (FHIRDateTime): The datetime when the request was recorded.\n- basedOn (List[FHIRReference]): References to other requests that this request fulfills.\n- codeCodeableConcept (CodeableConcept): The specific device that is being requested.\n- codeReference (FHIRReference): Another way to reference the device being requested.\n- encounter (FHIRReference): The encounter that motivates the device request.\n- groupIdentifier (Identifier): An identifier for composite requests.\n- identifier (List[Identifier]): External identifiers for the request.\n- instantiatesCanonical (List[str]): References to FHIR protocols or definitions.\n- instantiatesUri (List[str]): References to external protocols or definitions.\n- insurance (List[FHIRReference]): References to associated insurance coverage.\n- intent (str): The intent of the request, e.g., proposal or order.\n- note (List[Annotation]): Any notes or comments associated with the request.\n- occurrenceDateTime (FHIRDateTime): Desired date and time for the use of the device.\n- occurrencePeriod (Period): Desired period for the use of the device.\n- occurrenceTiming (Timing): Desired timing for the use of the device.\n- parameter (List[DeviceRequestParameter]): Details regarding the requested device.\n- performer (FHIRReference): The requested filler role.\n- performerType (CodeableConcept): Defines the role of the performer.\n- priorRequest (List[FHIRReference]): References to requests that this one replaces.\n- priority (str): Priority level of the request (routine, urgent, etc.).\n- reasonCode (List[CodeableConcept]): Coded reasons for the request.\n- reasonReference (List[FHIRReference]): Linked references to reasons for the request.\n- relevantHistory (List[FHIRReference]): Provenance history of the request.\n- requester (FHIRReference): Identifies who is requesting the device.\n- status (str): Current status of the request.\n- subject (FHIRReference): Reference to the subject of the request.\n- supportingInfo (List[FHIRReference]): Additional clinical information pertinent to the request.\n\nThis constructor calls the superclass's initializer to incorporate inherited properties and maintain structure integrity according to the FHIR model.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DeviceRequest(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/devicerequest_test.py:DeviceRequestTests:testDeviceRequest1": {
      "tests/models/devicerequest_test.py:DeviceRequestTests:instantiate_from": {
        "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/devicerequest_test.py:DeviceRequestTests:implDeviceRequest1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/devicerequest_test.py:DeviceRequestTests:instantiate_from": {
      "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/devicerequest_test.py:DeviceRequestTests:testDeviceRequest2": {
      "tests/models/devicerequest_test.py:DeviceRequestTests:instantiate_from": {
        "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/devicerequest_test.py:DeviceRequestTests:implDeviceRequest2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/devicerequest.py:DeviceRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/devicerequest.py:DeviceRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-devicerequest_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 devicerequest.py\n        \u2502   \u2514\u2500\u2500 DeviceRequest.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the functionality of handling FHIR-compliant `DeviceRequest` resources, specifically based on the FHIR (Fast Healthcare Interoperability Resources) standard version 4.0.1. It ensures the correct instantiation, serialization, and integrity of `DeviceRequest` objects by evaluating their attributes, metadata, and relationships according to FHIR specifications. The module's core capabilities include parsing `DeviceRequest` resources from JSON files, verifying their compliance with the expected structure and values, and performing detailed tests on properties such as identifiers, codes, intent, authored timestamps, and statuses. By automating the validation of these critical workflows, this module facilitates seamless integration and accurate representation of medical device orders within healthcare applications, reducing developer effort in ensuring FHIR compliance.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance.\n\nIf the instance was initialized with a JSON value, this method will return that original value. If no such value exists (i.e., if the instance was created without an input string), it will return the ISO 8601 representation of the date through the `isostring` property. The `isostring` is generated from the internal `date` attribute, which holds the Python representation of the date as a `datetime.date` object.\n\nAttributes:\n- `origval`: Stores the original JSON string passed during initialization, which is used for the return value when available.\n- `date`: A `datetime.date` representation of the date that may be derived from the `origval`.\n\nThis method interacts with other parts of the FHIRDate class by providing access to the input value (`origval`) and the ISO string representation (`isostring`) derived from `date`.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a date-time value in ISO 8601 format, or None. This value is passed to the parent class FHIRDate during initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime representation of the provided jsonval. Initially set to None until a valid jsonval is parsed.\n\nThis constructor calls the superclass's __init__ method to ensure backward compatibility with FHIRDate, allowing instances to be identified as both FHIRDateTime and FHIRDate.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a JSON representation of the FHIRAbstractResource instance.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nstructure and then adds a 'resourceType' key, which indicates the specific \ntype of the FHIR resource being represented. The resource type is derived \nfrom the class attribute `resource_type`, which is set to 'FHIRAbstractResource'. \n\nNo input parameters are required. The method returns a dictionary representing \nthe resource in JSON format, inclusive of its type. This function is critical \nfor serializing the resource instance for communication with FHIR-compliant \nservers or systems.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/devicerequest.py\n\n- CLASS METHOD: DeviceRequest.__init__\n  - CLASS SIGNATURE: class DeviceRequest(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DeviceRequest instance for a medical device request. This constructor sets up various properties related to the device request, including details about the device, associated patient, request identifiers, insurance information, the status of the request, and timings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the DeviceRequest instance.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError during initialization. If False, it allows for less strict validation.\n\nAttributes initialized include:\n- authoredOn (FHIRDateTime): The datetime when the request was recorded.\n- basedOn (List[FHIRReference]): References to other requests that this request fulfills.\n- codeCodeableConcept (CodeableConcept): The specific device that is being requested.\n- codeReference (FHIRReference): Another way to reference the device being requested.\n- encounter (FHIRReference): The encounter that motivates the device request.\n- groupIdentifier (Identifier): An identifier for composite requests.\n- identifier (List[Identifier]): External identifiers for the request.\n- instantiatesCanonical (List[str]): References to FHIR protocols or definitions.\n- instantiatesUri (List[str]): References to external protocols or definitions.\n- insurance (List[FHIRReference]): References to associated insurance coverage.\n- intent (str): The intent of the request, e.g., proposal or order.\n- note (List[Annotation]): Any notes or comments associated with the request.\n- occurrenceDateTime (FHIRDateTime): Desired date and time for the use of the device.\n- occurrencePeriod (Period): Desired period for the use of the device.\n- occurrenceTiming (Timing): Desired timing for the use of the device.\n- parameter (List[DeviceRequestParameter]): Details regarding the requested device.\n- performer (FHIRReference): The requested filler role.\n- performerType (CodeableConcept): Defines the role of the performer.\n- priorRequest (List[FHIRReference]): References to requests that this one replaces.\n- priority (str): Priority level of the request (routine, urgent, etc.).\n- reasonCode (List[CodeableConcept]): Coded reasons for the request.\n- reasonReference (List[FHIRReference]): Linked references to reasons for the request.\n- relevantHistory (List[FHIRReference]): Provenance history of the request.\n- requester (FHIRReference): Identifies who is requesting the device.\n- status (str): Current status of the request.\n- subject (FHIRReference): Reference to the subject of the request.\n- supportingInfo (List[FHIRReference]): Additional clinical information pertinent to the request.\n\nThis constructor calls the superclass's initializer to incorporate inherited properties and maintain structure integrity according to the FHIR model.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/devicerequest.py": "from . import domainresource\n\nclass DeviceRequest(domainresource.DomainResource):\n    \"\"\" Medical device request.\n    \n    Represents a request for a patient to employ a medical device. The device\n    may be an implantable device, or an external assistive device, such as a\n    walker.\n    \"\"\"\n    resource_type = 'DeviceRequest'\n\n    def elementProperties(self):\n        js = super(DeviceRequest, self).elementProperties()\n        js.extend([('authoredOn', 'authoredOn', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('codeCodeableConcept', 'codeCodeableConcept', codeableconcept.CodeableConcept, False, 'code', True), ('codeReference', 'codeReference', fhirreference.FHIRReference, False, 'code', True), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('groupIdentifier', 'groupIdentifier', identifier.Identifier, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('insurance', 'insurance', fhirreference.FHIRReference, True, None, False), ('intent', 'intent', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('occurrenceDateTime', 'occurrenceDateTime', fhirdatetime.FHIRDateTime, False, 'occurrence', False), ('occurrencePeriod', 'occurrencePeriod', period.Period, False, 'occurrence', False), ('occurrenceTiming', 'occurrenceTiming', timing.Timing, False, 'occurrence', False), ('parameter', 'parameter', DeviceRequestParameter, True, None, False), ('performer', 'performer', fhirreference.FHIRReference, False, None, False), ('performerType', 'performerType', codeableconcept.CodeableConcept, False, None, False), ('priorRequest', 'priorRequest', fhirreference.FHIRReference, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('relevantHistory', 'relevantHistory', fhirreference.FHIRReference, True, None, False), ('requester', 'requester', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('supportingInfo', 'supportingInfo', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass DeviceRequestParameter(backboneelement.BackboneElement):\n    \"\"\" Device details.\n    \n    Specific parameters for the ordered item.  For example, the prism value for\n    lenses.\n    \"\"\"\n    resource_type = 'DeviceRequestParameter'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Device detail.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' Value of detail.\\n        Type `bool`. '\n        self.valueCodeableConcept = None\n        ' Value of detail.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueQuantity = None\n        ' Value of detail.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueRange = None\n        ' Value of detail.\\n        Type `Range` (represented as `dict` in JSON). '\n        super(DeviceRequestParameter, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceRequestParameter, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('valueBoolean', 'valueBoolean', bool, False, 'value', False), ('valueCodeableConcept', 'valueCodeableConcept', codeableconcept.CodeableConcept, False, 'value', False), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', False), ('valueRange', 'valueRange', range.Range, False, 'value', False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import timing"
  }
}