{
  "dir_path": "/app/ncclient",
  "package_name": "ncclient",
  "sample_name": "ncclient-test_csr",
  "src_dir": "ncclient/",
  "test_dir": "test/",
  "test_file": "modified_testcases/unit/devices/test_csr.py",
  "test_code": "import unittest\nfrom ncclient.devices.csr import *\n\n\nclass TestCsrDevice(unittest.TestCase):\n    \n    def setUp(self):\n        self.obj = CsrDeviceHandler({'name': 'csr'})\n\n    def test_add_additional_ssh_connect_params(self):\n        expected = dict()\n        expected[\"unknown_host_cb\"] = csr_unknown_host_cb\n        actual = dict()\n        self.obj.add_additional_ssh_connect_params(actual)\n        self.assertDictEqual(expected, actual)\n\n    def test_csr_unknown_host_cb(self):\n        self.assertTrue(csr_unknown_host_cb('host', 'fingerprint'))\n",
  "GT_file_code": {
    "ncclient/devices/csr.py": "\"\"\"\nHandler for Cisco CSR device specific information.\n\nNote that for proper import, the classname has to be:\n\n    \"<Devicename>DeviceHandler\"\n\n...where <Devicename> is something like \"Default\", \"Nexus\", etc.\n\nAll device-specific handlers derive from the DefaultDeviceHandler, which implements the\ngeneric information needed for interaction with a Netconf server.\n\n\"\"\"\n\n\nfrom .default import DefaultDeviceHandler\nfrom warnings import warn\n\ndef csr_unknown_host_cb(host, fingerprint):\n        #This will ignore the unknown host check when connecting to CSR devices\n        return True\n\nclass CsrDeviceHandler(DefaultDeviceHandler):\n    \"\"\"\n    Cisco CSR handler for device specific information.\n\n    \"\"\"\n    def __init__(self, device_params):\n        warn(\n            'CsrDeviceHandler is deprecated, please use IosxeDeviceHandler',\n            DeprecationWarning,\n            stacklevel=2)\n        super(CsrDeviceHandler, self).__init__(device_params)\n\n    def add_additional_ssh_connect_params(self, kwargs):\n        warn(\n            'CsrDeviceHandler is deprecated, please use IosxeDeviceHandler',\n            DeprecationWarning,\n            stacklevel=2)\n        kwargs['unknown_host_cb'] = csr_unknown_host_cb\n",
    "ncclient/transport/errors.py": "# Copyright 2009 Shikhar Bhushan\n# Copyright 2014 Leonidas Poulopoulos\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom ncclient import NCClientError\n\nclass TransportError(NCClientError):\n    pass\n\nclass SessionError(NCClientError):\n    pass\n\nclass AuthenticationError(TransportError):\n    pass\n\nclass PermissionError(TransportError):\n    pass\n\nclass SessionCloseError(TransportError):\n\n    def __init__(self, in_buf, out_buf=None):\n        msg = 'Unexpected session close'\n        if in_buf:\n            msg += '\\nIN_BUFFER: `%s`' % in_buf\n        if out_buf:\n            msg += ' OUT_BUFFER: `%s`' % out_buf\n        SSHError.__init__(self, msg)\n\nclass SSHError(TransportError):\n    pass\n\nclass SSHUnknownHostError(SSHError):\n\n    def __init__(self, host, fingerprint):\n        SSHError.__init__(self, 'Unknown host key [%s] for [%s]' % (fingerprint, host))\n        self.host = host\n        self.fingerprint = fingerprint\n\nclass NetconfFramingError(TransportError):\n    pass\n\n\nclass TLSError(TransportError):\n    pass\n\nclass UnixSocketError (TransportError):\n    pass\n"
  },
  "GT_src_dict": {
    "ncclient/devices/csr.py": {
      "csr_unknown_host_cb": {
        "code": "def csr_unknown_host_cb(host, fingerprint):\n    \"\"\"Callback function to handle unknown host verification when connecting to Cisco CSR devices.\n\nParameters:\n- host (str): The hostname or IP address of the device being connected to.\n- fingerprint (str): The expected fingerprint of the device's SSH key.\n\nReturns:\n- bool: Always returns True, effectively bypassing the unknown host verification process.\n\nThis function is used in the `CsrDeviceHandler` class to prevent host key verification errors when connecting to Cisco CSR devices. It is intended for use in environments where the user is confident in the device's authenticity and wishes to skip the security check associated with unknown hosts.\"\"\"\n    return True",
        "docstring": "Callback function to handle unknown host verification when connecting to Cisco CSR devices.\n\nParameters:\n- host (str): The hostname or IP address of the device being connected to.\n- fingerprint (str): The expected fingerprint of the device's SSH key.\n\nReturns:\n- bool: Always returns True, effectively bypassing the unknown host verification process.\n\nThis function is used in the `CsrDeviceHandler` class to prevent host key verification errors when connecting to Cisco CSR devices. It is intended for use in environments where the user is confident in the device's authenticity and wishes to skip the security check associated with unknown hosts.",
        "signature": "def csr_unknown_host_cb(host, fingerprint):",
        "type": "Function",
        "class_signature": null
      },
      "CsrDeviceHandler.__init__": {
        "code": "    def __init__(self, device_params):\n        \"\"\"Initializes a CsrDeviceHandler instance for handling Cisco CSR device specifics.\n\nThis constructor wraps the initialization of the DefaultDeviceHandler class, which provides \ngeneric functionality for interacting with a Netconf server. It also issues a deprecation warning \nindicating that the CsrDeviceHandler is deprecated in favor of the IosxeDeviceHandler.\n\nParameters:\n    device_params (dict): Contains parameters necessary for connecting to the device and configuring\n                          the device handler.\n\nReturns:\n    None: This method does not return a value. It only initializes the instance.\n\nSide Effects:\n    Issues a DeprecationWarning to inform users that this class will be replaced by IosxeDeviceHandler \n    in future implementations.\"\"\"\n        warn('CsrDeviceHandler is deprecated, please use IosxeDeviceHandler', DeprecationWarning, stacklevel=2)\n        super(CsrDeviceHandler, self).__init__(device_params)",
        "docstring": "Initializes a CsrDeviceHandler instance for handling Cisco CSR device specifics.\n\nThis constructor wraps the initialization of the DefaultDeviceHandler class, which provides \ngeneric functionality for interacting with a Netconf server. It also issues a deprecation warning \nindicating that the CsrDeviceHandler is deprecated in favor of the IosxeDeviceHandler.\n\nParameters:\n    device_params (dict): Contains parameters necessary for connecting to the device and configuring\n                          the device handler.\n\nReturns:\n    None: This method does not return a value. It only initializes the instance.\n\nSide Effects:\n    Issues a DeprecationWarning to inform users that this class will be replaced by IosxeDeviceHandler \n    in future implementations.",
        "signature": "def __init__(self, device_params):",
        "type": "Method",
        "class_signature": "class CsrDeviceHandler(DefaultDeviceHandler):"
      },
      "CsrDeviceHandler.add_additional_ssh_connect_params": {
        "code": "    def add_additional_ssh_connect_params(self, kwargs):\n        \"\"\"Adds additional SSH connection parameters specific to Cisco CSR devices.\n\nThis method modifies the provided `kwargs` dictionary to include a callback function\n`csr_unknown_host_cb`, which suppresses warnings about unknown hosts when establishing\nan SSH connection. It also emits a deprecation warning indicating that this handler is \ndeprecated in favor of `IosxeDeviceHandler`.\n\nParameters:\n    kwargs (dict): A dictionary of SSH connection parameters, which will be modified \n                   to include the `unknown_host_cb` key with a callback function \n                   to handle unknown host verification.\n\nSide Effects:\n    Modifies the `kwargs` dictionary passed to the function by adding an entry for\n    handling unknown host callbacks.\n\nWarning:\n    This class and method are deprecated. Users are encouraged to use `IosxeDeviceHandler` instead.\"\"\"\n        warn('CsrDeviceHandler is deprecated, please use IosxeDeviceHandler', DeprecationWarning, stacklevel=2)\n        kwargs['unknown_host_cb'] = csr_unknown_host_cb",
        "docstring": "Adds additional SSH connection parameters specific to Cisco CSR devices.\n\nThis method modifies the provided `kwargs` dictionary to include a callback function\n`csr_unknown_host_cb`, which suppresses warnings about unknown hosts when establishing\nan SSH connection. It also emits a deprecation warning indicating that this handler is \ndeprecated in favor of `IosxeDeviceHandler`.\n\nParameters:\n    kwargs (dict): A dictionary of SSH connection parameters, which will be modified \n                   to include the `unknown_host_cb` key with a callback function \n                   to handle unknown host verification.\n\nSide Effects:\n    Modifies the `kwargs` dictionary passed to the function by adding an entry for\n    handling unknown host callbacks.\n\nWarning:\n    This class and method are deprecated. Users are encouraged to use `IosxeDeviceHandler` instead.",
        "signature": "def add_additional_ssh_connect_params(self, kwargs):",
        "type": "Method",
        "class_signature": "class CsrDeviceHandler(DefaultDeviceHandler):"
      }
    },
    "ncclient/transport/errors.py": {}
  },
  "dependency_dict": {
    "ncclient/devices/csr.py:CsrDeviceHandler:__init__": {
      "ncclient/devices/default.py": {
        "DefaultDeviceHandler.__init__": {
          "code": "    def __init__(self, device_params=None):\n        self.device_params = device_params\n        self.capabilities = []\n        # Turn all exempt errors into lower case, since we don't want those comparisons\n        # to be case sensitive later on. Sort them into exact match, wildcard start,\n        # wildcard end, and full wildcard categories, depending on whether they start\n        # and/or end with a '*'.\n        self._exempt_errors_exact_match = []\n        self._exempt_errors_startwith_wildcard_match = []\n        self._exempt_errors_endwith_wildcard_match = []\n        self._exempt_errors_full_wildcard_match = []\n        for i in xrange(len(self._EXEMPT_ERRORS)):\n            e = self._EXEMPT_ERRORS[i].lower()\n            if e.startswith(\"*\"):\n                if e.endswith(\"*\"):\n                    self._exempt_errors_full_wildcard_match.append(e[1:-1])\n                else:\n                    self._exempt_errors_startwith_wildcard_match.append(e[1:])\n            elif e.endswith(\"*\"):\n                self._exempt_errors_endwith_wildcard_match.append(e[:-1])\n            else:\n                self._exempt_errors_exact_match.append(e)",
          "docstring": "",
          "signature": "def __init__(self, device_params=None):",
          "type": "Method",
          "class_signature": "class DefaultDeviceHandler(object):"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: ncclient-test_csr\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 ncclient/\n    \u251c\u2500\u2500 devices/\n    \u2502   \u2514\u2500\u2500 csr.py\n    \u2502       \u251c\u2500\u2500 CsrDeviceHandler.__init__\n    \u2502       \u251c\u2500\u2500 CsrDeviceHandler.add_additional_ssh_connect_params\n    \u2502       \u2514\u2500\u2500 csr_unknown_host_cb\n    \u2514\u2500\u2500 transport/\n        \u2514\u2500\u2500 errors.py\n            \u2514\u2500\u2500 SessionCloseError.SessionCloseError\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides unit testing functionality for the `CsrDeviceHandler` class from the `ncclient` library, specifically tailored for Cisco CSR (Cloud Services Router) devices. It ensures the proper behavior of core functionalities related to SSH connection parameter handling and host verification callbacks. By validating that the device handler correctly applies additional SSH connection parameters and manages unknown host callbacks securely, the module helps safeguard the integrity of device communication and configuration processes. This ensures that developers building or integrating with network automation workflows can rely on consistent and trusted interactions with Cisco CSR devices.\n\n## FILE 1: ncclient/devices/csr.py\n\n- FUNCTION NAME: csr_unknown_host_cb\n  - SIGNATURE: def csr_unknown_host_cb(host, fingerprint):\n  - DOCSTRING: \n```python\n\"\"\"\nCallback function to handle unknown host verification when connecting to Cisco CSR devices.\n\nParameters:\n- host (str): The hostname or IP address of the device being connected to.\n- fingerprint (str): The expected fingerprint of the device's SSH key.\n\nReturns:\n- bool: Always returns True, effectively bypassing the unknown host verification process.\n\nThis function is used in the `CsrDeviceHandler` class to prevent host key verification errors when connecting to Cisco CSR devices. It is intended for use in environments where the user is confident in the device's authenticity and wishes to skip the security check associated with unknown hosts.\n\"\"\"\n```\n\n- CLASS METHOD: CsrDeviceHandler.add_additional_ssh_connect_params\n  - CLASS SIGNATURE: class CsrDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def add_additional_ssh_connect_params(self, kwargs):\n  - DOCSTRING: \n```python\n\"\"\"\nAdds additional SSH connection parameters specific to Cisco CSR devices.\n\nThis method modifies the provided `kwargs` dictionary to include a callback function\n`csr_unknown_host_cb`, which suppresses warnings about unknown hosts when establishing\nan SSH connection. It also emits a deprecation warning indicating that this handler is \ndeprecated in favor of `IosxeDeviceHandler`.\n\nParameters:\n    kwargs (dict): A dictionary of SSH connection parameters, which will be modified \n                   to include the `unknown_host_cb` key with a callback function \n                   to handle unknown host verification.\n\nSide Effects:\n    Modifies the `kwargs` dictionary passed to the function by adding an entry for\n    handling unknown host callbacks.\n\nWarning:\n    This class and method are deprecated. Users are encouraged to use `IosxeDeviceHandler` instead.\n\"\"\"\n```\n\n- CLASS METHOD: CsrDeviceHandler.__init__\n  - CLASS SIGNATURE: class CsrDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def __init__(self, device_params):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a CsrDeviceHandler instance for handling Cisco CSR device specifics.\n\nThis constructor wraps the initialization of the DefaultDeviceHandler class, which provides \ngeneric functionality for interacting with a Netconf server. It also issues a deprecation warning \nindicating that the CsrDeviceHandler is deprecated in favor of the IosxeDeviceHandler.\n\nParameters:\n    device_params (dict): Contains parameters necessary for connecting to the device and configuring\n                          the device handler.\n\nReturns:\n    None: This method does not return a value. It only initializes the instance.\n\nSide Effects:\n    Issues a DeprecationWarning to inform users that this class will be replaced by IosxeDeviceHandler \n    in future implementations.\n\"\"\"\n```\n\n## FILE 2: ncclient/transport/errors.py\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "ncclient/devices/csr.py": "\"\"\"\nHandler for Cisco CSR device specific information.\n\nNote that for proper import, the classname has to be:\n\n    \"<Devicename>DeviceHandler\"\n\n...where <Devicename> is something like \"Default\", \"Nexus\", etc.\n\nAll device-specific handlers derive from the DefaultDeviceHandler, which implements the\ngeneric information needed for interaction with a Netconf server.\n\n\"\"\"\nfrom .default import DefaultDeviceHandler\nfrom warnings import warn\n\nclass CsrDeviceHandler(DefaultDeviceHandler):\n    \"\"\"\n    Cisco CSR handler for device specific information.\n\n    \"\"\"",
    "ncclient/transport/errors.py": "from ncclient import NCClientError\n\nclass TransportError(NCClientError):\n    pass\n\nclass SessionError(NCClientError):\n    pass\n\nclass AuthenticationError(TransportError):\n    pass\n\nclass PermissionError(TransportError):\n    pass\n\nclass SessionCloseError(TransportError):\n\n    def __init__(self, in_buf, out_buf=None):\n        msg = 'Unexpected session close'\n        if in_buf:\n            msg += '\\nIN_BUFFER: `%s`' % in_buf\n        if out_buf:\n            msg += ' OUT_BUFFER: `%s`' % out_buf\n        SSHError.__init__(self, msg)\n\nclass SSHError(TransportError):\n    pass\n\nclass SSHUnknownHostError(SSHError):\n\n    def __init__(self, host, fingerprint):\n        SSHError.__init__(self, 'Unknown host key [%s] for [%s]' % (fingerprint, host))\n        self.host = host\n        self.fingerprint = fingerprint\n\nclass NetconfFramingError(TransportError):\n    pass\n\nclass TLSError(TransportError):\n    pass\n\nclass UnixSocketError(TransportError):\n    pass"
  },
  "call_tree": {
    "modified_testcases/unit/devices/test_csr.py:TestCsrDevice:setUp": {
      "ncclient/devices/csr.py:CsrDeviceHandler:__init__": {
        "ncclient/devices/default.py:DefaultDeviceHandler:__init__": {}
      }
    },
    "modified_testcases/unit/devices/test_csr.py:TestCsrDevice:test_add_additional_ssh_connect_params": {
      "ncclient/devices/csr.py:CsrDeviceHandler:add_additional_ssh_connect_params": {}
    },
    "modified_testcases/unit/devices/test_csr.py:TestCsrDevice:test_csr_unknown_host_cb": {
      "ncclient/devices/csr.py:csr_unknown_host_cb": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_receive_py3": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_receive_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_send_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_receive_py3": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_receive_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_send_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    }
  }
}