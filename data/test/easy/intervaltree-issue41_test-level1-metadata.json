{
  "dir_path": "/app/intervaltree",
  "package_name": "intervaltree",
  "sample_name": "intervaltree-issue41_test",
  "src_dir": "intervaltree/",
  "test_dir": "test/",
  "test_file": "test/issues/issue41_test.py",
  "test_code": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nTest module: IntervalTree, removal of intervals\nSubmitted as issue #41 (Interval removal breaks this tree) by escalonn\n\nCopyright 2013-2018 Chaim Leib Halbert\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom __future__ import absolute_import\nfrom intervaltree import IntervalTree\nfrom test import data\nimport pytest\n\n\ndef test_sequence():\n    t = IntervalTree()\n    t.addi(860, 917, 1)\n    t.verify()\n    t.addi(860, 917, 2)\n    t.verify()\n    t.addi(860, 917, 3)\n    t.verify()\n    t.addi(860, 917, 4)\n    t.verify()\n    t.addi(871, 917, 1)\n    t.verify()\n    t.addi(871, 917, 2)\n    t.verify()\n    t.addi(871, 917, 3)     # Value inserted here\n    t.verify()\n    t.addi(961, 986, 1)\n    t.verify()\n    t.addi(1047, 1064, 1)\n    t.verify()\n    t.addi(1047, 1064, 2)\n    t.verify()\n    t.removei(961, 986, 1)\n    t.verify()\n    t.removei(871, 917, 3)  # Deleted here\n    t.verify()\n\n\ndef test_structure():\n    \"\"\"\n    Reconstruct the original tree just before the removals, then\n    perform the removals.\n    \"\"\"\n    t = data.issue41_orig.tree()\n    t.verify()\n\n    t.removei(961, 986, 1)\n    t.verify()\n\n    t.removei(871, 917, 3)\n    t.verify()\n\n\nif __name__ == \"__main__\":\n    # pytest.main([__file__, '-v'])\n    test_structure()\n",
  "GT_file_code": {
    "intervaltree/intervaltree.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom .interval import Interval\nfrom .node import Node\nfrom numbers import Number\nfrom sortedcontainers import SortedDict\nfrom copy import copy\nfrom warnings import warn\n\ntry:\n    from collections.abc import MutableSet  # Python 3?\nexcept ImportError:\n    from collections import MutableSet\n\ntry:\n    xrange  # Python 2?\nexcept NameError:  # pragma: no cover\n    xrange = range\n\n\n# noinspection PyBroadException\nclass IntervalTree(MutableSet):\n    \"\"\"\n    A binary lookup tree of intervals.\n    The intervals contained in the tree are represented using ``Interval(a, b, data)`` objects.\n    Each such object represents a half-open interval ``[a, b)`` with optional data.\n\n    Examples:\n    ---------\n\n    Initialize a blank tree::\n\n        >>> tree = IntervalTree()\n        >>> tree\n        IntervalTree()\n\n    Initialize a tree from an iterable set of Intervals in O(n * log n)::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-20.0, -10.0)])\n        >>> tree\n        IntervalTree([Interval(-20.0, -10.0), Interval(-10, 10)])\n        >>> len(tree)\n        2\n\n    Note that this is a set, i.e. repeated intervals are ignored. However,\n    Intervals with different data fields are regarded as different::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-10, 10), Interval(-10, 10, \"x\")])\n        >>> tree\n        IntervalTree([Interval(-10, 10), Interval(-10, 10, 'x')])\n        >>> len(tree)\n        2\n\n    Insertions::\n        >>> tree = IntervalTree()\n        >>> tree[0:1] = \"data\"\n        >>> tree.add(Interval(10, 20))\n        >>> tree.addi(19.9, 20)\n        >>> tree\n        IntervalTree([Interval(0, 1, 'data'), Interval(10, 20), Interval(19.9, 20)])\n        >>> tree.update([Interval(19.9, 20.1), Interval(20.1, 30)])\n        >>> len(tree)\n        5\n\n        Inserting the same Interval twice does nothing::\n            >>> tree = IntervalTree()\n            >>> tree[-10:20] = \"arbitrary data\"\n            >>> tree[-10:20] = None  # Note that this is also an insertion\n            >>> tree\n            IntervalTree([Interval(-10, 20), Interval(-10, 20, 'arbitrary data')])\n            >>> tree[-10:20] = None  # This won't change anything\n            >>> tree[-10:20] = \"arbitrary data\" # Neither will this\n            >>> len(tree)\n            2\n\n    Deletions::\n        >>> tree = IntervalTree(Interval(b, e) for b, e in [(-10, 10), (-20, -10), (10, 20)])\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(-10, 10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        Traceback (most recent call last):\n        ...\n        ValueError\n        >>> tree.discard(Interval(-10, 10))  # Same as remove, but no exception on failure\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n\n    Delete intervals, overlapping a given point::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.1)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1)])\n\n    Delete intervals, overlapping an interval::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(0, 0.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.7, 1.8)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.6)  # Null interval does nothing\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.5)  # Ditto\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n\n    Delete intervals, enveloped in the range::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.0, 1.5)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.1, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.7)\n        >>> tree\n        IntervalTree()\n\n    Point queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[-1.1]   == set([Interval(-1.1, 1.1)])\n        >>> assert tree.at(1.1) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])   # Same as tree[1.1]\n        >>> assert tree.at(1.5) == set([Interval(0.5, 1.7)])                        # Same as tree[1.5]\n\n    Interval overlap queries\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.overlap(1.7, 1.8) == set()\n        >>> assert tree.overlap(1.5, 1.8) == set([Interval(0.5, 1.7)])\n        >>> assert tree[1.5:1.8] == set([Interval(0.5, 1.7)])                       # same as previous\n        >>> assert tree.overlap(1.1, 1.8) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[1.1:1.8] == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])  # same as previous\n\n    Interval envelop queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.envelop(-0.5, 0.5) == set()\n        >>> assert tree.envelop(-0.5, 1.5) == set([Interval(-0.5, 1.5)])\n\n    Membership queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> Interval(-0.5, 0.5) in tree\n        False\n        >>> Interval(-1.1, 1.1) in tree\n        True\n        >>> Interval(-1.1, 1.1, \"x\") in tree\n        False\n        >>> tree.overlaps(-1.1)\n        True\n        >>> tree.overlaps(1.7)\n        False\n        >>> tree.overlaps(1.7, 1.8)\n        False\n        >>> tree.overlaps(-1.2, -1.1)\n        False\n        >>> tree.overlaps(-1.2, -1.0)\n        True\n\n    Sizing::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> len(tree)\n        3\n        >>> tree.is_empty()\n        False\n        >>> IntervalTree().is_empty()\n        True\n        >>> not tree\n        False\n        >>> not IntervalTree()\n        True\n        >>> print(tree.begin())    # using print() because of floats in Python 2.6\n        -1.1\n        >>> print(tree.end())      # ditto\n        1.7\n\n    Iteration::\n\n        >>> tree = IntervalTree([Interval(-11, 11), Interval(-5, 15), Interval(5, 17)])\n        >>> [iv.begin for iv in sorted(tree)]\n        [-11, -5, 5]\n        >>> assert tree.items() == set([Interval(-5, 15), Interval(-11, 11), Interval(5, 17)])\n\n    Copy- and typecasting, pickling::\n\n        >>> tree0 = IntervalTree([Interval(0, 1, \"x\"), Interval(1, 2, [\"x\"])])\n        >>> tree1 = IntervalTree(tree0)  # Shares Interval objects\n        >>> tree2 = tree0.copy()         # Shallow copy (same as above, as Intervals are singletons)\n        >>> import pickle\n        >>> tree3 = pickle.loads(pickle.dumps(tree0))  # Deep copy\n        >>> list(tree0[1])[0].data[0] = \"y\"  # affects shallow copies, but not deep copies\n        >>> tree0\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree1\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree2\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree3\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['x'])])\n\n    Equality testing::\n\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1)])\n        True\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1, \"x\")])\n        False\n    \"\"\"\n    @classmethod\n    def from_tuples(cls, tups):\n        \"\"\"\n        Create a new IntervalTree from an iterable of 2- or 3-tuples,\n         where the tuple lists begin, end, and optionally data.\n        \"\"\"\n        ivs = [Interval(*t) for t in tups]\n        return IntervalTree(ivs)\n\n    def __init__(self, intervals=None):\n        \"\"\"\n        Set up a tree. If intervals is provided, add all the intervals\n        to the tree.\n\n        Completes in O(n*log n) time.\n        \"\"\"\n        intervals = set(intervals) if intervals is not None else set()\n        for iv in intervals:\n            if iv.is_null():\n                raise ValueError(\n                    \"IntervalTree: Null Interval objects not allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n        self.all_intervals = intervals\n        self.top_node = Node.from_intervals(self.all_intervals)\n        self.boundary_table = SortedDict()\n        for iv in self.all_intervals:\n            self._add_boundaries(iv)\n\n    def copy(self):\n        \"\"\"\n        Construct a new IntervalTree using shallow copies of the\n        intervals in the source tree.\n\n        Completes in O(n*log n) time.\n        :rtype: IntervalTree\n        \"\"\"\n        return IntervalTree(iv.copy() for iv in self)\n\n    def _add_boundaries(self, interval):\n        \"\"\"\n        Records the boundaries of the interval in the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if begin in self.boundary_table:\n            self.boundary_table[begin] += 1\n        else:\n            self.boundary_table[begin] = 1\n\n        if end in self.boundary_table:\n            self.boundary_table[end] += 1\n        else:\n            self.boundary_table[end] = 1\n\n    def _remove_boundaries(self, interval):\n        \"\"\"\n        Removes the boundaries of the interval from the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if self.boundary_table[begin] == 1:\n            del self.boundary_table[begin]\n        else:\n            self.boundary_table[begin] -= 1\n\n        if self.boundary_table[end] == 1:\n            del self.boundary_table[end]\n        else:\n            self.boundary_table[end] -= 1\n\n    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n\n        if interval.is_null():\n            raise ValueError(\n                \"IntervalTree: Null Interval objects not allowed in IntervalTree:\"\n                \" {0}\".format(interval)\n            )\n\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)\n    append = add\n\n    def addi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for add(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.add(Interval(begin, end, data))\n    appendi = addi\n\n    def update(self, intervals):\n        \"\"\"\n        Given an iterable of intervals, add them to the tree.\n\n        Completes in O(m*log(n+m), where m = number of intervals to\n        add.\n        \"\"\"\n        for iv in intervals:\n            self.add(iv)\n\n    def remove(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, raises\n        ValueError.\n\n        Completes in O(log n) time.\n        \"\"\"\n        #self.verify()\n        if interval not in self:\n            #print(self.all_intervals)\n            raise ValueError\n        self.top_node = self.top_node.remove(interval)\n        self.all_intervals.remove(interval)\n        self._remove_boundaries(interval)\n        #self.verify()\n\n    def removei(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for remove(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.remove(Interval(begin, end, data))\n\n    def discard(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, does\n        nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            return\n        self.all_intervals.discard(interval)\n        self.top_node = self.top_node.discard(interval)\n        self._remove_boundaries(interval)\n\n    def discardi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for discard(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.discard(Interval(begin, end, data))\n\n    def difference(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals in self but not\n        in other.\n        \"\"\"\n        ivs = set()\n        for iv in self:\n            if iv not in other:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def difference_update(self, other):\n        \"\"\"\n        Removes all intervals in other from self.\n        \"\"\"\n        for iv in other:\n            self.discard(iv)\n\n    def union(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals from self\n        and other.\n        \"\"\"\n        return IntervalTree(set(self).union(other))\n\n    def intersection(self, other):\n        \"\"\"\n        Returns a new tree of all intervals common to both self and\n        other.\n        \"\"\"\n        ivs = set()\n        shorter, longer = sorted([self, other], key=len)\n        for iv in shorter:\n            if iv in longer:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def intersection_update(self, other):\n        \"\"\"\n        Removes intervals from self unless they also exist in other.\n        \"\"\"\n        ivs = list(self)\n        for iv in ivs:\n            if iv not in other:\n                self.remove(iv)\n\n    def symmetric_difference(self, other):\n        \"\"\"\n        Return a tree with elements only in self or other but not\n        both.\n        \"\"\"\n        if not isinstance(other, set): other = set(other)\n        me = set(self)\n        ivs = me.difference(other).union(other.difference(me))\n        return IntervalTree(ivs)\n\n    def symmetric_difference_update(self, other):\n        \"\"\"\n        Throws out all intervals except those only in self or other,\n        not both.\n        \"\"\"\n        other = set(other)\n        ivs = list(self)\n        for iv in ivs:\n            if iv in other:\n                self.remove(iv)\n                other.remove(iv)\n        self.update(other)\n\n    def remove_overlap(self, begin, end=None):\n        \"\"\"\n        Removes all intervals overlapping the given point or range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range (this is 1 for a point)\n        \"\"\"\n        hitlist = self.at(begin) if end is None else self.overlap(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def remove_envelop(self, begin, end):\n        \"\"\"\n        Removes all intervals completely enveloped in the given range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range\n        \"\"\"\n        hitlist = self.envelop(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def chop(self, begin, end, datafunc=None):\n        \"\"\"\n        Like remove_envelop(), but trims back Intervals hanging into\n        the chopped area so that nothing overlaps.\n        \"\"\"\n        insertions = set()\n        begin_hits = [iv for iv in self.at(begin) if iv.begin < begin]\n        end_hits = [iv for iv in self.at(end) if iv.end > end]\n\n        if datafunc:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, datafunc(iv, True)))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, datafunc(iv, False)))\n        else:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, iv.data))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, iv.data))\n\n        self.remove_envelop(begin, end)\n        self.difference_update(begin_hits)\n        self.difference_update(end_hits)\n        self.update(insertions)\n\n    def slice(self, point, datafunc=None):\n        \"\"\"\n        Split Intervals that overlap point into two new Intervals. if\n        specified, uses datafunc(interval, islower=True/False) to\n        set the data field of the new Intervals.\n        :param point: where to slice\n        :param datafunc(interval, isupper): callable returning a new\n        value for the interval's data field\n        \"\"\"\n        hitlist = set(iv for iv in self.at(point) if iv.begin < point)\n        insertions = set()\n        if datafunc:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, datafunc(iv, True)))\n                insertions.add(Interval(point, iv.end, datafunc(iv, False)))\n        else:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, iv.data))\n                insertions.add(Interval(point, iv.end, iv.data))\n        self.difference_update(hitlist)\n        self.update(insertions)\n\n    def clear(self):\n        \"\"\"\n        Empties the tree.\n\n        Completes in O(1) tine.\n        \"\"\"\n        self.__init__()\n\n    def find_nested(self):\n        \"\"\"\n        Returns a dictionary mapping parent intervals to sets of\n        intervals overlapped by and contained in the parent.\n\n        Completes in O(n^2) time.\n        :rtype: dict of [Interval, set of Interval]\n        \"\"\"\n        result = {}\n\n        def add_if_nested():\n            if parent.contains_interval(child):\n                if parent not in result:\n                    result[parent] = set()\n                result[parent].add(child)\n\n        long_ivs = sorted(self.all_intervals, key=Interval.length, reverse=True)\n        for i, parent in enumerate(long_ivs):\n            for child in long_ivs[i + 1:]:\n                add_if_nested()\n        return result\n\n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        point or range.\n\n        Completes in O(r*log n) time, where r is the size of the\n        search range.\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            return self.overlaps_range(begin, end)\n        elif isinstance(begin, Number):\n            return self.overlaps_point(begin)\n        else:\n            return self.overlaps_range(begin.begin, begin.end)\n\n    def overlaps_point(self, p):\n        \"\"\"\n        Returns whether some interval in the tree overlaps p.\n\n        Completes in O(log n) time.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        return bool(self.top_node.contains_point(p))\n\n    def overlaps_range(self, begin, end):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        range. Returns False if given a null interval over which to\n        test.\n\n        Completes in O(r*log n) time, where r is the range length and n\n        is the table size.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        elif begin >= end:\n            return False\n        elif self.overlaps_point(begin):\n            return True\n        return any(\n            self.overlaps_point(bound)\n            for bound in self.boundary_table\n            if begin < bound < end\n        )\n\n    def split_overlaps(self):\n        \"\"\"\n        Finds all intervals with overlapping ranges and splits them\n        along the range boundaries.\n\n        Completes in worst-case O(n^2*log n) time (many interval\n        boundaries are inside many intervals), best-case O(n*log n)\n        time (small number of overlaps << n per interval).\n        \"\"\"\n        if not self:\n            return\n        if len(self.boundary_table) == 2:\n            return\n\n        bounds = sorted(self.boundary_table)  # get bound locations\n\n        new_ivs = set()\n        for lbound, ubound in zip(bounds[:-1], bounds[1:]):\n            for iv in self[lbound]:\n                new_ivs.add(Interval(lbound, ubound, iv.data))\n\n        self.__init__(new_ivs)\n\n    def merge_overlaps(self, data_reducer=None, data_initializer=None, strict=True):\n        \"\"\"\n        Finds all intervals with overlapping ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initializer created with copy.copy(data_initializer).\n\n        If strict is True (default), intervals are only merged if\n        their ranges actually overlap; adjacent, touching intervals\n        will not be merged. If strict is False, intervals are merged\n        even if they are only end-to-end adjacent.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                if (higher.begin < lower.end or\n                    not strict and higher.begin == lower.end):  # should merge\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:  # annihilate the data, since we don't know how to merge it\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def merge_equals(self, data_reducer=None, data_initializer=None):\n        \"\"\"\n        Finds all intervals with equal ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                if higher.range_matches(lower):  # should merge\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:  # annihilate the data, since we don't know how to merge it\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def merge_neighbors(\n        self,\n        data_reducer=None,\n        data_initializer=None,\n        distance=1,\n        strict=True,\n    ):\n        \"\"\"\n        Finds all adjacent intervals with range terminals less than or equal to\n        the given distance and merges them into a single interval. If provided,\n        uses data_reducer and data_initializer with similar semantics to\n        Python's built-in reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        If strict is True (default), only discrete intervals are merged if\n        their ranges are within the given distance; overlapping intervals\n        will not be merged. If strict is False, both neighbors and overlapping\n        intervals are merged.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                margin = higher.begin - lower.end\n                if margin <= distance:  # should merge\n                    if strict and margin < 0:\n                        new_series()\n                        continue\n                    else:\n                        upper_bound = max(lower.end, higher.end)\n                        if data_reducer is not None:\n                            current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                        else:  # annihilate the data, since we don't know how to merge it\n                            current_reduced[0] = None\n                        merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def items(self):\n        \"\"\"\n        Constructs and returns a set of all intervals in the tree.\n\n        Completes in O(n) time.\n        :rtype: set of Interval\n        \"\"\"\n        return set(self.all_intervals)\n\n    def is_empty(self):\n        \"\"\"\n        Returns whether the tree is empty.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return 0 == len(self)\n\n    def at(self, p):\n        \"\"\"\n        Returns the set of all intervals that contain p.\n\n        Completes in O(m + log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        return root.search_point(p, set())\n\n    def envelop(self, begin, end=None):\n        \"\"\"\n        Returns the set of all intervals fully contained in the range\n        [begin, end).\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.envelop(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set()) # bound_begin might be greater\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)  # up to, but not including end\n        result.update(root.search_overlap(\n            # slice notation is slightly slower\n            boundary_table.keys()[index] for index in xrange(bound_begin, bound_end)\n        ))\n\n        # TODO: improve envelop() to use node info instead of less-efficient filtering\n        result = set(\n            iv for iv in result\n            if iv.begin >= begin and iv.end <= end\n        )\n        return result\n\n    def overlap(self, begin, end=None):\n        \"\"\"\n        Returns a set of all intervals overlapping the given range.\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.overlap(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())  # bound_begin might be greater\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)  # up to, but not including end\n        result.update(root.search_overlap(\n            # slice notation is slightly slower\n            boundary_table.keys()[index] for index in xrange(bound_begin, bound_end)\n        ))\n        return result\n\n    def begin(self):\n        \"\"\"\n        Returns the lower bound of the first interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[0]\n\n    def end(self):\n        \"\"\"\n        Returns the upper bound of the last interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[-1]\n\n    def range(self):\n        \"\"\"\n        Returns a minimum-spanning Interval that encloses all the\n        members of this IntervalTree. If the tree is empty, returns\n        null Interval.\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin(), self.end())\n\n    def span(self):\n        \"\"\"\n        Returns the length of the minimum-spanning Interval that\n        encloses all the members of this IntervalTree. If the tree\n        is empty, return 0.\n        \"\"\"\n        if not self:\n            return 0\n        return self.end() - self.begin()\n\n    def print_structure(self, tostring=False):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Pretty-prints the structure of the tree.\n        If tostring is true, prints nothing and returns a string.\n        :rtype: None or str\n        \"\"\"\n        if self.top_node:\n            return self.top_node.print_structure(tostring=tostring)\n        else:\n            result = \"<empty IntervalTree>\"\n            if not tostring:\n                print(result)\n            else:\n                return result\n\n    def verify(self):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Checks the table to ensure that the invariants are held.\n        \"\"\"\n        if self.all_intervals:\n            ## top_node.all_children() == self.all_intervals\n            try:\n                assert self.top_node.all_children() == self.all_intervals\n            except AssertionError as e:\n                print(\n                    'Error: the tree and the membership set are out of sync!'\n                )\n                tivs = set(self.top_node.all_children())\n                print('top_node.all_children() - all_intervals:')\n                try:\n                    pprint\n                except NameError:\n                    from pprint import pprint\n                pprint(tivs - self.all_intervals)\n                print('all_intervals - top_node.all_children():')\n                pprint(self.all_intervals - tivs)\n                raise e\n\n            ## All members are Intervals\n            for iv in self:\n                assert isinstance(iv, Interval), (\n                    \"Error: Only Interval objects allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n\n            ## No null intervals\n            for iv in self:\n                assert not iv.is_null(), (\n                    \"Error: Null Interval objects not allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n\n            ## Reconstruct boundary_table\n            bound_check = {}\n            for iv in self:\n                if iv.begin in bound_check:\n                    bound_check[iv.begin] += 1\n                else:\n                    bound_check[iv.begin] = 1\n                if iv.end in bound_check:\n                    bound_check[iv.end] += 1\n                else:\n                    bound_check[iv.end] = 1\n\n            ## Reconstructed boundary table (bound_check) ==? boundary_table\n            assert set(self.boundary_table.keys()) == set(bound_check.keys()),\\\n                'Error: boundary_table is out of sync with ' \\\n                'the intervals in the tree!'\n\n            # For efficiency reasons this should be iteritems in Py2, but we\n            # don't care much for efficiency in debug methods anyway.\n            for key, val in self.boundary_table.items():\n                assert bound_check[key] == val, \\\n                    'Error: boundary_table[{0}] should be {1},' \\\n                    ' but is {2}!'.format(\n                        key, bound_check[key], val)\n\n            ## Internal tree structure\n            self.top_node.verify(set())\n        else:\n            ## Verify empty tree\n            assert not self.boundary_table, \\\n                \"Error: boundary table should be empty!\"\n            assert self.top_node is None, \\\n                \"Error: top_node isn't None!\"\n\n    def score(self, full_report=False):\n        \"\"\"\n        Returns a number between 0 and 1, indicating how suboptimal the tree\n        is. The lower, the better. Roughly, this number represents the\n        fraction of flawed Intervals in the tree.\n        :rtype: float\n        \"\"\"\n        if len(self) <= 2:\n            return 0.0\n\n        n = len(self)\n        m = self.top_node.count_nodes()\n\n        def s_center_score():\n            \"\"\"\n            Returns a normalized score, indicating roughly how many times\n            intervals share s_center with other intervals. Output is full-scale\n            from 0 to 1.\n            :rtype: float\n            \"\"\"\n            raw = n - m\n            maximum = n - 1\n            return raw / float(maximum)\n\n        report = {\n            \"depth\": self.top_node.depth_score(n, m),\n            \"s_center\": s_center_score(),\n        }\n        cumulative = max(report.values())\n        report[\"_cumulative\"] = cumulative\n        if full_report:\n            return report\n        return cumulative\n\n\n    def __getitem__(self, index):\n        \"\"\"\n        Returns a set of all intervals overlapping the given index or\n        slice.\n\n        Completes in O(k * log(n) + m) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range (this is 1 for a point)\n        :rtype: set of Interval\n        \"\"\"\n        try:\n            start, stop = index.start, index.stop\n            if start is None:\n                start = self.begin()\n                if stop is None:\n                    return set(self)\n            if stop is None:\n                stop = self.end()\n            return self.overlap(start, stop)\n        except AttributeError:\n            return self.at(index)\n\n    def __setitem__(self, index, value):\n        \"\"\"\n        Adds a new interval to the tree. A shortcut for\n        add(Interval(index.start, index.stop, value)).\n\n        If an identical Interval object with equal range and data\n        already exists, does nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        self.addi(index.start, index.stop, value)\n\n    def __delitem__(self, point):\n        \"\"\"\n        Delete all items overlapping point.\n        \"\"\"\n        self.remove_overlap(point)\n\n    def __contains__(self, item):\n        \"\"\"\n        Returns whether item exists as an Interval in the tree.\n        This method only returns True for exact matches; for\n        overlaps, see the overlaps() method.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        # Removed point-checking code; it might trick the user into\n        # thinking that this is O(1), which point-checking isn't.\n        #if isinstance(item, Interval):\n        return item in self.all_intervals\n        #else:\n        #    return self.contains_point(item)\n\n    def containsi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for (Interval(begin, end, data) in tree).\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return Interval(begin, end, data) in self\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()\n    iter = __iter__\n\n    def __len__(self):\n        \"\"\"\n        Returns how many intervals are in the tree.\n\n        Completes in O(1) time.\n        :rtype: int\n        \"\"\"\n        return len(self.all_intervals)\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether two IntervalTrees are equal.\n\n        Completes in O(n) time if sizes are equal; O(1) time otherwise.\n        :rtype: bool\n        \"\"\"\n        return (\n            isinstance(other, IntervalTree) and\n            self.all_intervals == other.all_intervals\n        )\n\n    def __repr__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        ivs = sorted(self)\n        if not ivs:\n            return \"IntervalTree()\"\n        else:\n            return \"IntervalTree({0})\".format(ivs)\n\n    __str__ = __repr__\n\n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :rtype: tuple\n        \"\"\"\n        return IntervalTree, (sorted(self.all_intervals),)\n\n"
  },
  "GT_src_dict": {
    "intervaltree/intervaltree.py": {
      "IntervalTree.__init__": {
        "code": "    def __init__(self, intervals=None):\n        \"\"\"Initialize an `IntervalTree` instance with an optional iterable of `Interval` objects. \nIf provided, the constructor processes the intervals to ensure none are null before adding them \nto the tree structure.\n\nParameters:\n-----------\nintervals : iterable, optional\n    An iterable containing `Interval` objects to initialize the tree. If not provided, \n    the tree will be empty.\n\nRaises:\n-------\nValueError\n    If any of the provided `Interval` objects are null.\n\nAttributes:\n-----------\nself.all_intervals : set\n    A set containing all unique `Interval` objects added to the tree.\n\nself.top_node : Node\n    The root node of the tree, initialized using `Node.from_intervals(self.all_intervals)`.\n\nself.boundary_table : SortedDict\n    A sorted dictionary that keeps track of the boundaries of the intervals for efficient \n    querying.\n\nInteractions:\n-------------\nThis method uses the `Node` class to establish the hierarchical structure of intervals and \nthe `SortedDict` from the `sortedcontainers` module for optimizing boundary checks. It also \ninvokes the `_add_boundaries` method to update the boundary table for each interval added.\"\"\"\n        '\\n        Set up a tree. If intervals is provided, add all the intervals\\n        to the tree.\\n\\n        Completes in O(n*log n) time.\\n        '\n        intervals = set(intervals) if intervals is not None else set()\n        for iv in intervals:\n            if iv.is_null():\n                raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(iv))\n        self.all_intervals = intervals\n        self.top_node = Node.from_intervals(self.all_intervals)\n        self.boundary_table = SortedDict()\n        for iv in self.all_intervals:\n            self._add_boundaries(iv)",
        "docstring": "Initialize an `IntervalTree` instance with an optional iterable of `Interval` objects. \nIf provided, the constructor processes the intervals to ensure none are null before adding them \nto the tree structure.\n\nParameters:\n-----------\nintervals : iterable, optional\n    An iterable containing `Interval` objects to initialize the tree. If not provided, \n    the tree will be empty.\n\nRaises:\n-------\nValueError\n    If any of the provided `Interval` objects are null.\n\nAttributes:\n-----------\nself.all_intervals : set\n    A set containing all unique `Interval` objects added to the tree.\n\nself.top_node : Node\n    The root node of the tree, initialized using `Node.from_intervals(self.all_intervals)`.\n\nself.boundary_table : SortedDict\n    A sorted dictionary that keeps track of the boundaries of the intervals for efficient \n    querying.\n\nInteractions:\n-------------\nThis method uses the `Node` class to establish the hierarchical structure of intervals and \nthe `SortedDict` from the `sortedcontainers` module for optimizing boundary checks. It also \ninvokes the `_add_boundaries` method to update the boundary table for each interval added.",
        "signature": "def __init__(self, intervals=None):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      },
      "IntervalTree.addi": {
        "code": "    def addi(self, begin, end, data=None):\n        \"\"\"Adds a new interval to the `IntervalTree`, defined by a `begin` and `end` value, along with optional `data`. This method acts as a convenient shortcut to create an `Interval` object and add it to the tree using the underlying `add` method. \n\nParameters:\n- `begin` (float): The starting point of the interval.\n- `end` (float): The ending point of the interval (non-inclusive).\n- `data` (optional): Any associated data with the interval.\n\nReturns:\n- None: This method modifies the `IntervalTree` in place.\n\nThis method has a time complexity of O(log n), where n is the number of intervals currently in the tree. It utilizes the `add` method to ensure intervals are added efficiently while maintaining the tree structure.\"\"\"\n        '\\n        Shortcut for add(Interval(begin, end, data)).\\n\\n        Completes in O(log n) time.\\n        '\n        return self.add(Interval(begin, end, data))",
        "docstring": "Adds a new interval to the `IntervalTree`, defined by a `begin` and `end` value, along with optional `data`. This method acts as a convenient shortcut to create an `Interval` object and add it to the tree using the underlying `add` method. \n\nParameters:\n- `begin` (float): The starting point of the interval.\n- `end` (float): The ending point of the interval (non-inclusive).\n- `data` (optional): Any associated data with the interval.\n\nReturns:\n- None: This method modifies the `IntervalTree` in place.\n\nThis method has a time complexity of O(log n), where n is the number of intervals currently in the tree. It utilizes the `add` method to ensure intervals are added efficiently while maintaining the tree structure.",
        "signature": "def addi(self, begin, end, data=None):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      },
      "IntervalTree.removei": {
        "code": "    def removei(self, begin, end, data=None):\n        \"\"\"Shortcut method to remove an interval from the IntervalTree using its begin and end points along with optional data.\n\nParameters:\n- begin (number): The starting point of the interval to be removed.\n- end (number): The ending point of the interval to be removed.\n- data (optional): The data associated with the interval to be removed. If not specified, the method will remove the interval that matches the given begin and end with any data.\n\nReturns:\n- None: This method does not return any value.\n\nSide Effects:\n- This method modifies the IntervalTree by attempting to remove the specified interval. If the interval is present, it will be removed, along with its boundaries in the boundary table.\n\nDependencies:\n- This method relies on the `remove` method of IntervalTree, which operates in O(log n) time, ensuring efficient performance even with larger trees. It internally constructs an Interval object using the provided begin, end, and data parameters before calling `remove`.\"\"\"\n        '\\n        Shortcut for remove(Interval(begin, end, data)).\\n\\n        Completes in O(log n) time.\\n        '\n        return self.remove(Interval(begin, end, data))",
        "docstring": "Shortcut method to remove an interval from the IntervalTree using its begin and end points along with optional data.\n\nParameters:\n- begin (number): The starting point of the interval to be removed.\n- end (number): The ending point of the interval to be removed.\n- data (optional): The data associated with the interval to be removed. If not specified, the method will remove the interval that matches the given begin and end with any data.\n\nReturns:\n- None: This method does not return any value.\n\nSide Effects:\n- This method modifies the IntervalTree by attempting to remove the specified interval. If the interval is present, it will be removed, along with its boundaries in the boundary table.\n\nDependencies:\n- This method relies on the `remove` method of IntervalTree, which operates in O(log n) time, ensuring efficient performance even with larger trees. It internally constructs an Interval object using the provided begin, end, and data parameters before calling `remove`.",
        "signature": "def removei(self, begin, end, data=None):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      },
      "IntervalTree.verify": {
        "code": "    def verify(self):\n        \"\"\"Checks the integrity and consistency of the IntervalTree's internal structure.\n\nThis method verifies that all intervals in the tree are valid Instances of the Interval class and that no null intervals are present. It also ensures that the membership of intervals in the tree is accurately reflected by comparing the set of intervals in the tree (`self.all_intervals`) with the list of children in the top node (`self.top_node.all_children()`). In addition, it reconstructs and checks the boundary table against the existence of interval boundaries.\n\nRaises an AssertionError with descriptive error messages if any checks fail, including mismatches in interval membership or boundary tables.\n\nNo input parameters are required, and there are no return values. The method interacts primarily with `self.all_intervals`, `self.top_node`, and `self.boundary_table`, which are attributes of the IntervalTree class. `self.all_intervals` is a set of intervals in the tree, `self.top_node` is the root of the tree structure, and `self.boundary_table` tracks interval boundaries for efficient searching and management of the tree structure.\"\"\"\n        '\\n        ## FOR DEBUGGING ONLY ##\\n        Checks the table to ensure that the invariants are held.\\n        '\n        if self.all_intervals:\n            try:\n                assert self.top_node.all_children() == self.all_intervals\n            except AssertionError as e:\n                print('Error: the tree and the membership set are out of sync!')\n                tivs = set(self.top_node.all_children())\n                print('top_node.all_children() - all_intervals:')\n                try:\n                    pprint\n                except NameError:\n                    from pprint import pprint\n                pprint(tivs - self.all_intervals)\n                print('all_intervals - top_node.all_children():')\n                pprint(self.all_intervals - tivs)\n                raise e\n            for iv in self:\n                assert isinstance(iv, Interval), 'Error: Only Interval objects allowed in IntervalTree: {0}'.format(iv)\n            for iv in self:\n                assert not iv.is_null(), 'Error: Null Interval objects not allowed in IntervalTree: {0}'.format(iv)\n            bound_check = {}\n            for iv in self:\n                if iv.begin in bound_check:\n                    bound_check[iv.begin] += 1\n                else:\n                    bound_check[iv.begin] = 1\n                if iv.end in bound_check:\n                    bound_check[iv.end] += 1\n                else:\n                    bound_check[iv.end] = 1\n            assert set(self.boundary_table.keys()) == set(bound_check.keys()), 'Error: boundary_table is out of sync with the intervals in the tree!'\n            for key, val in self.boundary_table.items():\n                assert bound_check[key] == val, 'Error: boundary_table[{0}] should be {1}, but is {2}!'.format(key, bound_check[key], val)\n            self.top_node.verify(set())\n        else:\n            assert not self.boundary_table, 'Error: boundary table should be empty!'\n            assert self.top_node is None, \"Error: top_node isn't None!\"",
        "docstring": "Checks the integrity and consistency of the IntervalTree's internal structure.\n\nThis method verifies that all intervals in the tree are valid Instances of the Interval class and that no null intervals are present. It also ensures that the membership of intervals in the tree is accurately reflected by comparing the set of intervals in the tree (`self.all_intervals`) with the list of children in the top node (`self.top_node.all_children()`). In addition, it reconstructs and checks the boundary table against the existence of interval boundaries.\n\nRaises an AssertionError with descriptive error messages if any checks fail, including mismatches in interval membership or boundary tables.\n\nNo input parameters are required, and there are no return values. The method interacts primarily with `self.all_intervals`, `self.top_node`, and `self.boundary_table`, which are attributes of the IntervalTree class. `self.all_intervals` is a set of intervals in the tree, `self.top_node` is the root of the tree structure, and `self.boundary_table` tracks interval boundaries for efficient searching and management of the tree structure.",
        "signature": "def verify(self):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      }
    }
  },
  "dependency_dict": {
    "intervaltree/intervaltree.py:IntervalTree:__init__": {
      "intervaltree/node.py": {
        "Node.from_intervals": {
          "code": "    def from_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        return Node.from_sorted_intervals(sorted(intervals))",
          "docstring": ":rtype : Node",
          "signature": "def from_intervals(cls, intervals):",
          "type": "Method",
          "class_signature": "class Node(object):"
        }
      }
    },
    "intervaltree/intervaltree.py:IntervalTree:addi": {
      "intervaltree/interval.py": {
        "Interval.__new__": {
          "code": "    def __new__(cls, begin, end, data=None):\n        return super(Interval, cls).__new__(cls, begin, end, data)",
          "docstring": "",
          "signature": "def __new__(cls, begin, end, data=None):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        }
      },
      "intervaltree/intervaltree.py": {
        "IntervalTree.add": {
          "code": "    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n        if interval.is_null():\n            raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(interval))\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)",
          "docstring": "Adds an interval to the tree, if not already present.\n\nCompletes in O(log n) time.",
          "signature": "def add(self, interval):",
          "type": "Method",
          "class_signature": "class IntervalTree(MutableSet):"
        }
      }
    },
    "intervaltree/intervaltree.py:IntervalTree:verify": {
      "intervaltree/node.py": {
        "Node.all_children": {
          "code": "    def all_children(self):\n        return self.all_children_helper(set())",
          "docstring": "",
          "signature": "def all_children(self):",
          "type": "Method",
          "class_signature": "class Node(object):"
        },
        "Node.verify": {
          "code": "    def verify(self, parents=set()):\n        \"\"\"\n        ## DEBUG ONLY ##\n        Recursively ensures that the invariants of an interval subtree\n        hold.\n        \"\"\"\n        assert(isinstance(self.s_center, set))\n\n        bal = self.balance\n        assert abs(bal) < 2, \\\n            \"Error: Rotation should have happened, but didn't! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n        self.refresh_balance()\n        assert bal == self.balance, \\\n            \"Error: self.balance not set correctly! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n\n        assert self.s_center, \\\n            \"Error: s_center is empty! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n        for iv in self.s_center:\n            assert hasattr(iv, 'begin')\n            assert hasattr(iv, 'end')\n            assert iv.begin < iv.end\n            assert iv.overlaps(self.x_center)\n            for parent in sorted(parents):\n                assert not iv.contains_point(parent), \\\n                    \"Error: Overlaps ancestor ({})! \\n{}\\n\\n{}\".format(\n                        parent, iv, self.print_structure(tostring=True)\n                    )\n        if self[0]:\n            assert self[0].x_center < self.x_center, \\\n                \"Error: Out-of-order left child! {}\".format(self.x_center)\n            self[0].verify(parents.union([self.x_center]))\n        if self[1]:\n            assert self[1].x_center > self.x_center, \\\n                \"Error: Out-of-order right child! {}\".format(self.x_center)\n            self[1].verify(parents.union([self.x_center]))",
          "docstring": "## DEBUG ONLY ##\nRecursively ensures that the invariants of an interval subtree\nhold.",
          "signature": "def verify(self, parents=set()):",
          "type": "Method",
          "class_signature": "class Node(object):"
        }
      },
      "intervaltree/interval.py": {
        "Interval.is_null": {
          "code": "    def is_null(self):\n        \"\"\"\n        Whether this equals the null interval.\n        :return: True if end <= begin else False\n        :rtype: bool\n        \"\"\"\n        return self.begin >= self.end",
          "docstring": "Whether this equals the null interval.\n:return: True if end <= begin else False\n:rtype: bool",
          "signature": "def is_null(self):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        },
        "Interval.__eq__": {
          "code": "    def __eq__(self, other):\n        \"\"\"\n        Whether the begins equal, the ends equal, and the data fields\n        equal. Compare range_matches().\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return (\n            self.begin == other.begin and\n            self.end == other.end and\n            self.data == other.data\n        )",
          "docstring": "Whether the begins equal, the ends equal, and the data fields\nequal. Compare range_matches().\n:param other: Interval\n:return: True or False\n:rtype: bool",
          "signature": "def __eq__(self, other):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        }
      },
      "intervaltree/intervaltree.py": {
        "IntervalTree.__iter__": {
          "code": "    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()",
          "docstring": "Returns an iterator over all the intervals in the tree.\n\nCompletes in O(1) time.\n:rtype: collections.Iterable[Interval]",
          "signature": "def __iter__(self):",
          "type": "Method",
          "class_signature": "class IntervalTree(MutableSet):"
        }
      }
    },
    "intervaltree/intervaltree.py:IntervalTree:removei": {
      "intervaltree/interval.py": {
        "Interval.__new__": {
          "code": "    def __new__(cls, begin, end, data=None):\n        return super(Interval, cls).__new__(cls, begin, end, data)",
          "docstring": "",
          "signature": "def __new__(cls, begin, end, data=None):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        }
      },
      "intervaltree/intervaltree.py": {
        "IntervalTree.remove": {
          "code": "    def remove(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, raises\n        ValueError.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            raise ValueError\n        self.top_node = self.top_node.remove(interval)\n        self.all_intervals.remove(interval)\n        self._remove_boundaries(interval)",
          "docstring": "Removes an interval from the tree, if present. If not, raises\nValueError.\n\nCompletes in O(log n) time.",
          "signature": "def remove(self, interval):",
          "type": "Method",
          "class_signature": "class IntervalTree(MutableSet):"
        }
      }
    }
  },
  "call_tree": {
    "test/issues/issue41_test.py:test_sequence": {
      "intervaltree/intervaltree.py:IntervalTree:__init__": {
        "intervaltree/node.py:Node:from_intervals": {}
      },
      "intervaltree/intervaltree.py:IntervalTree:addi": {
        "intervaltree/interval.py:Interval:__new__": {},
        "intervaltree/intervaltree.py:IntervalTree:add": {
          "intervaltree/intervaltree.py:IntervalTree:__contains__": {
            "intervaltree/interval.py:Interval:__hash__": {},
            "intervaltree/interval.py:Interval:__eq__": {}
          },
          "intervaltree/interval.py:Interval:is_null": {},
          "intervaltree/node.py:Node:from_interval": {
            "intervaltree/node.py:Node:__init__": {
              "intervaltree/interval.py:Interval:__hash__": {},
              "intervaltree/node.py:Node:rotate": {
                "intervaltree/node.py:Node:refresh_balance": {}
              }
            }
          },
          "intervaltree/interval.py:Interval:__hash__": {},
          "intervaltree/intervaltree.py:IntervalTree:_add_boundaries": {},
          "intervaltree/node.py:Node:add": {
            "intervaltree/node.py:Node:center_hit": {
              "intervaltree/interval.py:Interval:contains_point": {}
            },
            "intervaltree/interval.py:Interval:__hash__": {},
            "intervaltree/interval.py:Interval:__eq__": {},
            "intervaltree/node.py:Node:hit_branch": {},
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:from_interval": {
              "intervaltree/node.py:Node:__init__": {
                "intervaltree/interval.py:Interval:__hash__": {},
                "intervaltree/node.py:Node:rotate": {
                  "intervaltree/node.py:Node:refresh_balance": {}
                }
              }
            },
            "intervaltree/node.py:Node:__setitem__": {},
            "intervaltree/node.py:Node:refresh_balance": {},
            "intervaltree/node.py:Node:add": {
              "[ignored_or_cut_off]": "..."
            },
            "intervaltree/node.py:Node:rotate": {
              "intervaltree/node.py:Node:refresh_balance": {},
              "intervaltree/node.py:Node:__getitem__": {},
              "intervaltree/node.py:Node:srotate": {
                "intervaltree/node.py:Node:__getitem__": {},
                "intervaltree/node.py:Node:__setitem__": {},
                "intervaltree/node.py:Node:rotate": {
                  "[ignored_or_cut_off]": "..."
                },
                "intervaltree/node.py:Node:center_hit": {
                  "intervaltree/interval.py:Interval:contains_point": {}
                },
                "intervaltree/node.py:Node:remove": {
                  "intervaltree/node.py:Node:remove_interval_helper": {
                    "intervaltree/node.py:Node:center_hit": {
                      "intervaltree/interval.py:Interval:contains_point": {}
                    },
                    "intervaltree/interval.py:Interval:__hash__": {},
                    "intervaltree/interval.py:Interval:__eq__": {},
                    "intervaltree/node.py:Node:prune": {
                      "intervaltree/node.py:Node:__getitem__": {}
                    }
                  }
                },
                "intervaltree/interval.py:Interval:__hash__": {},
                "intervaltree/interval.py:Interval:__eq__": {},
                "intervaltree/node.py:Node:refresh_balance": {}
              }
            }
          },
          "intervaltree/interval.py:Interval:__eq__": {}
        }
      },
      "intervaltree/intervaltree.py:IntervalTree:verify": {
        "intervaltree/interval.py:Interval:Interval": {},
        "intervaltree/node.py:Node:all_children": {
          "intervaltree/node.py:Node:all_children_helper": {
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:all_children_helper": {
              "[ignored_or_cut_off]": "..."
            }
          }
        },
        "intervaltree/intervaltree.py:IntervalTree:__iter__": {},
        "intervaltree/interval.py:Interval:is_null": {},
        "intervaltree/node.py:Node:verify": {
          "intervaltree/node.py:Node:refresh_balance": {},
          "intervaltree/interval.py:Interval:overlaps": {
            "intervaltree/interval.py:Interval:contains_point": {}
          },
          "intervaltree/node.py:Node:__getitem__": {},
          "intervaltree/node.py:Node:verify": {
            "[ignored_or_cut_off]": "..."
          }
        },
        "intervaltree/interval.py:Interval:__eq__": {}
      },
      "intervaltree/intervaltree.py:IntervalTree:removei": {
        "intervaltree/interval.py:Interval:__new__": {},
        "intervaltree/intervaltree.py:IntervalTree:remove": {
          "intervaltree/intervaltree.py:IntervalTree:__contains__": {
            "intervaltree/interval.py:Interval:__hash__": {},
            "intervaltree/interval.py:Interval:__eq__": {}
          },
          "intervaltree/node.py:Node:remove": {
            "intervaltree/node.py:Node:remove_interval_helper": {
              "intervaltree/node.py:Node:center_hit": {
                "intervaltree/interval.py:Interval:contains_point": {}
              },
              "intervaltree/interval.py:Interval:__hash__": {},
              "intervaltree/interval.py:Interval:__eq__": {},
              "intervaltree/node.py:Node:prune": {
                "intervaltree/node.py:Node:__getitem__": {},
                "intervaltree/node.py:Node:pop_greatest_child": {
                  "intervaltree/node.py:Node:__init__": {
                    "intervaltree/node.py:Node:get_new_s_center": {
                      "intervaltree/interval.py:Interval:contains_point": {}
                    },
                    "intervaltree/interval.py:Interval:__hash__": {},
                    "intervaltree/interval.py:Interval:__eq__": {},
                    "intervaltree/node.py:Node:rotate": {
                      "intervaltree/node.py:Node:refresh_balance": {}
                    }
                  },
                  "intervaltree/interval.py:Interval:__eq__": {},
                  "intervaltree/node.py:Node:__getitem__": {}
                },
                "intervaltree/node.py:Node:__setitem__": {},
                "intervaltree/node.py:Node:refresh_balance": {},
                "intervaltree/node.py:Node:rotate": {
                  "intervaltree/node.py:Node:refresh_balance": {}
                }
              }
            }
          },
          "intervaltree/interval.py:Interval:__hash__": {},
          "intervaltree/interval.py:Interval:__eq__": {},
          "intervaltree/intervaltree.py:IntervalTree:_remove_boundaries": {}
        }
      }
    },
    "test/issues/issue41_test.py:test_structure": {
      "test/data/issue41_orig.py:tree": {
        "intervaltree/intervaltree.py:IntervalTree:from_tuples": {
          "intervaltree/interval.py:Interval:__new__": {},
          "intervaltree/intervaltree.py:IntervalTree:__init__": {
            "intervaltree/interval.py:Interval:__hash__": {},
            "intervaltree/interval.py:Interval:__eq__": {},
            "intervaltree/interval.py:Interval:is_null": {},
            "intervaltree/node.py:Node:from_intervals": {
              "intervaltree/interval.py:Interval:__lt__": {
                "intervaltree/interval.py:Interval:__cmp__": {}
              },
              "intervaltree/node.py:Node:from_sorted_intervals": {
                "intervaltree/node.py:Node:__init__": {
                  "intervaltree/node.py:Node:rotate": {
                    "intervaltree/node.py:Node:refresh_balance": {}
                  }
                },
                "intervaltree/node.py:Node:init_from_sorted": {
                  "intervaltree/interval.py:Interval:__hash__": {},
                  "intervaltree/interval.py:Interval:__eq__": {},
                  "intervaltree/node.py:Node:from_sorted_intervals": {
                    "[ignored_or_cut_off]": "..."
                  },
                  "intervaltree/node.py:Node:rotate": {
                    "intervaltree/node.py:Node:refresh_balance": {},
                    "intervaltree/node.py:Node:__getitem__": {},
                    "intervaltree/node.py:Node:drotate": {
                      "intervaltree/node.py:Node:__getitem__": {},
                      "intervaltree/node.py:Node:srotate": {},
                      "intervaltree/node.py:Node:__setitem__": {},
                      "intervaltree/node.py:Node:refresh_balance": {}
                    }
                  }
                }
              }
            },
            "intervaltree/intervaltree.py:IntervalTree:_add_boundaries": {}
          }
        },
        "intervaltree/node.py:Node:__init__": {
          "intervaltree/node.py:Node:rotate": {
            "intervaltree/node.py:Node:refresh_balance": {}
          }
        },
        "intervaltree/interval.py:Interval:__new__": {},
        "intervaltree/interval.py:Interval:__hash__": {},
        "intervaltree/interval.py:Interval:__eq__": {},
        "intervaltree/node.py:Node:print_structure": {
          "intervaltree/node.py:Node:__str__": {},
          "intervaltree/interval.py:Interval:__repr__": {},
          "intervaltree/node.py:Node:print_structure": {
            "[ignored_or_cut_off]": "..."
          }
        },
        "intervaltree/intervaltree.py:IntervalTree:verify": {
          "intervaltree/node.py:Node:all_children": {
            "intervaltree/node.py:Node:all_children_helper": {
              "intervaltree/node.py:Node:__getitem__": {},
              "intervaltree/node.py:Node:all_children_helper": {
                "[ignored_or_cut_off]": "..."
              }
            }
          },
          "intervaltree/interval.py:Interval:__eq__": {},
          "intervaltree/intervaltree.py:IntervalTree:__iter__": {},
          "intervaltree/interval.py:Interval:is_null": {},
          "intervaltree/node.py:Node:verify": {
            "intervaltree/node.py:Node:refresh_balance": {},
            "intervaltree/interval.py:Interval:overlaps": {
              "intervaltree/interval.py:Interval:contains_point": {}
            },
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:verify": {
              "[ignored_or_cut_off]": "..."
            }
          }
        }
      },
      "intervaltree/intervaltree.py:IntervalTree:verify": {
        "intervaltree/node.py:Node:all_children": {
          "intervaltree/node.py:Node:all_children_helper": {
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:all_children_helper": {
              "[ignored_or_cut_off]": "..."
            }
          }
        },
        "intervaltree/interval.py:Interval:__eq__": {},
        "intervaltree/intervaltree.py:IntervalTree:__iter__": {},
        "intervaltree/interval.py:Interval:is_null": {},
        "intervaltree/node.py:Node:verify": {
          "intervaltree/node.py:Node:refresh_balance": {},
          "intervaltree/interval.py:Interval:overlaps": {
            "intervaltree/interval.py:Interval:contains_point": {}
          },
          "intervaltree/node.py:Node:__getitem__": {},
          "intervaltree/node.py:Node:verify": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "intervaltree/intervaltree.py:IntervalTree:removei": {
        "intervaltree/interval.py:Interval:__new__": {},
        "intervaltree/intervaltree.py:IntervalTree:remove": {
          "intervaltree/intervaltree.py:IntervalTree:__contains__": {
            "intervaltree/interval.py:Interval:__hash__": {},
            "intervaltree/interval.py:Interval:__eq__": {}
          },
          "intervaltree/node.py:Node:remove": {
            "intervaltree/node.py:Node:remove_interval_helper": {
              "intervaltree/node.py:Node:center_hit": {
                "intervaltree/interval.py:Interval:contains_point": {}
              },
              "intervaltree/interval.py:Interval:__hash__": {},
              "intervaltree/interval.py:Interval:__eq__": {},
              "intervaltree/node.py:Node:prune": {
                "intervaltree/node.py:Node:__getitem__": {},
                "intervaltree/node.py:Node:pop_greatest_child": {
                  "intervaltree/node.py:Node:__init__": {
                    "intervaltree/node.py:Node:get_new_s_center": {
                      "intervaltree/interval.py:Interval:contains_point": {}
                    },
                    "intervaltree/interval.py:Interval:__hash__": {},
                    "intervaltree/interval.py:Interval:__eq__": {},
                    "intervaltree/node.py:Node:rotate": {
                      "intervaltree/node.py:Node:refresh_balance": {}
                    }
                  },
                  "intervaltree/interval.py:Interval:__eq__": {},
                  "intervaltree/node.py:Node:__getitem__": {}
                },
                "intervaltree/node.py:Node:__setitem__": {},
                "intervaltree/node.py:Node:refresh_balance": {},
                "intervaltree/node.py:Node:rotate": {
                  "intervaltree/node.py:Node:refresh_balance": {}
                }
              }
            }
          },
          "intervaltree/interval.py:Interval:__hash__": {},
          "intervaltree/interval.py:Interval:__eq__": {},
          "intervaltree/intervaltree.py:IntervalTree:_remove_boundaries": {}
        }
      }
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue41_test/intervaltree-issue41_test/test/intervaltree_methods/setlike_test.py:test_update": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue41_test/intervaltree-issue41_test/test/intervaltree_methods/setlike_test.py:test_difference": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue41_test/intervaltree-issue41_test/test/intervaltree_methods/setlike_test.py:test_difference_operator": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue41_test/intervaltree-issue41_test/test/optimality/optimality_test_matrix.py:OptimalityTestMatrix:test_prebuilt": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue41_test/intervaltree-issue41_test/modified_testcases/optimality/optimality_test_matrix.py:OptimalityTestMatrix:test_prebuilt": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    }
  },
  "PRD": "# PROJECT NAME: intervaltree-issue41_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 intervaltree/\n    \u2514\u2500\u2500 intervaltree.py\n        \u251c\u2500\u2500 IntervalTree.IntervalTree\n        \u251c\u2500\u2500 IntervalTree.__init__\n        \u251c\u2500\u2500 IntervalTree.addi\n        \u251c\u2500\u2500 IntervalTree.removei\n        \u2514\u2500\u2500 IntervalTree.verify\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for managing and querying a mutable, self-balancing interval tree. It enables efficient addition, removal, and querying of intervals, supporting operations such as identifying intersections, point-based lookups, and determining range overlaps or enclosures. This module is particularly useful for developers needing to work with interval data, such as time ranges or numerical spans, by offering a robust system for maintaining the integrity and accuracy of interval relationships during updates. By abstracting the complexities of interval management, the module simplifies tasks involving dynamic range queries, ensuring performance and reliability in use cases requiring interval-based computation.\n\n## FILE 1: intervaltree/intervaltree.py\n\n- CLASS METHOD: IntervalTree.removei\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def removei(self, begin, end, data=None):\n  - DOCSTRING: \n```python\n\"\"\"\nShortcut method to remove an interval from the IntervalTree using its begin and end points along with optional data.\n\nParameters:\n- begin (number): The starting point of the interval to be removed.\n- end (number): The ending point of the interval to be removed.\n- data (optional): The data associated with the interval to be removed. If not specified, the method will remove the interval that matches the given begin and end with any data.\n\nReturns:\n- None: This method does not return any value.\n\nSide Effects:\n- This method modifies the IntervalTree by attempting to remove the specified interval. If the interval is present, it will be removed, along with its boundaries in the boundary table.\n\nDependencies:\n- This method relies on the `remove` method of IntervalTree, which operates in O(log n) time, ensuring efficient performance even with larger trees. It internally constructs an Interval object using the provided begin, end, and data parameters before calling `remove`.\n\"\"\"\n```\n\n- CLASS METHOD: IntervalTree.verify\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def verify(self):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks the integrity and consistency of the IntervalTree's internal structure.\n\nThis method verifies that all intervals in the tree are valid Instances of the Interval class and that no null intervals are present. It also ensures that the membership of intervals in the tree is accurately reflected by comparing the set of intervals in the tree (`self.all_intervals`) with the list of children in the top node (`self.top_node.all_children()`). In addition, it reconstructs and checks the boundary table against the existence of interval boundaries.\n\nRaises an AssertionError with descriptive error messages if any checks fail, including mismatches in interval membership or boundary tables.\n\nNo input parameters are required, and there are no return values. The method interacts primarily with `self.all_intervals`, `self.top_node`, and `self.boundary_table`, which are attributes of the IntervalTree class. `self.all_intervals` is a set of intervals in the tree, `self.top_node` is the root of the tree structure, and `self.boundary_table` tracks interval boundaries for efficient searching and management of the tree structure.\n\"\"\"\n```\n\n- CLASS METHOD: IntervalTree.addi\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def addi(self, begin, end, data=None):\n  - DOCSTRING: \n```python\n\"\"\"\nAdds a new interval to the `IntervalTree`, defined by a `begin` and `end` value, along with optional `data`. This method acts as a convenient shortcut to create an `Interval` object and add it to the tree using the underlying `add` method. \n\nParameters:\n- `begin` (float): The starting point of the interval.\n- `end` (float): The ending point of the interval (non-inclusive).\n- `data` (optional): Any associated data with the interval.\n\nReturns:\n- None: This method modifies the `IntervalTree` in place.\n\nThis method has a time complexity of O(log n), where n is the number of intervals currently in the tree. It utilizes the `add` method to ensure intervals are added efficiently while maintaining the tree structure.\n\"\"\"\n```\n\n- CLASS METHOD: IntervalTree.__init__\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def __init__(self, intervals=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an `IntervalTree` instance with an optional iterable of `Interval` objects. \nIf provided, the constructor processes the intervals to ensure none are null before adding them \nto the tree structure.\n\nParameters:\n-----------\nintervals : iterable, optional\n    An iterable containing `Interval` objects to initialize the tree. If not provided, \n    the tree will be empty.\n\nRaises:\n-------\nValueError\n    If any of the provided `Interval` objects are null.\n\nAttributes:\n-----------\nself.all_intervals : set\n    A set containing all unique `Interval` objects added to the tree.\n\nself.top_node : Node\n    The root node of the tree, initialized using `Node.from_intervals(self.all_intervals)`.\n\nself.boundary_table : SortedDict\n    A sorted dictionary that keeps track of the boundaries of the intervals for efficient \n    querying.\n\nInteractions:\n-------------\nThis method uses the `Node` class to establish the hierarchical structure of intervals and \nthe `SortedDict` from the `sortedcontainers` module for optimizing boundary checks. It also \ninvokes the `_add_boundaries` method to update the boundary table for each interval added.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "intervaltree/intervaltree.py": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom .interval import Interval\nfrom .node import Node\nfrom numbers import Number\nfrom sortedcontainers import SortedDict\nfrom copy import copy\nfrom warnings import warn\ntry:\n    from collections.abc import MutableSet\nexcept ImportError:\n    from collections import MutableSet\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\nclass IntervalTree(MutableSet):\n    \"\"\"\n    A binary lookup tree of intervals.\n    The intervals contained in the tree are represented using ``Interval(a, b, data)`` objects.\n    Each such object represents a half-open interval ``[a, b)`` with optional data.\n\n    Examples:\n    ---------\n\n    Initialize a blank tree::\n\n        >>> tree = IntervalTree()\n        >>> tree\n        IntervalTree()\n\n    Initialize a tree from an iterable set of Intervals in O(n * log n)::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-20.0, -10.0)])\n        >>> tree\n        IntervalTree([Interval(-20.0, -10.0), Interval(-10, 10)])\n        >>> len(tree)\n        2\n\n    Note that this is a set, i.e. repeated intervals are ignored. However,\n    Intervals with different data fields are regarded as different::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-10, 10), Interval(-10, 10, \"x\")])\n        >>> tree\n        IntervalTree([Interval(-10, 10), Interval(-10, 10, 'x')])\n        >>> len(tree)\n        2\n\n    Insertions::\n        >>> tree = IntervalTree()\n        >>> tree[0:1] = \"data\"\n        >>> tree.add(Interval(10, 20))\n        >>> tree.addi(19.9, 20)\n        >>> tree\n        IntervalTree([Interval(0, 1, 'data'), Interval(10, 20), Interval(19.9, 20)])\n        >>> tree.update([Interval(19.9, 20.1), Interval(20.1, 30)])\n        >>> len(tree)\n        5\n\n        Inserting the same Interval twice does nothing::\n            >>> tree = IntervalTree()\n            >>> tree[-10:20] = \"arbitrary data\"\n            >>> tree[-10:20] = None  # Note that this is also an insertion\n            >>> tree\n            IntervalTree([Interval(-10, 20), Interval(-10, 20, 'arbitrary data')])\n            >>> tree[-10:20] = None  # This won't change anything\n            >>> tree[-10:20] = \"arbitrary data\" # Neither will this\n            >>> len(tree)\n            2\n\n    Deletions::\n        >>> tree = IntervalTree(Interval(b, e) for b, e in [(-10, 10), (-20, -10), (10, 20)])\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(-10, 10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        Traceback (most recent call last):\n        ...\n        ValueError\n        >>> tree.discard(Interval(-10, 10))  # Same as remove, but no exception on failure\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n\n    Delete intervals, overlapping a given point::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.1)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1)])\n\n    Delete intervals, overlapping an interval::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(0, 0.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.7, 1.8)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.6)  # Null interval does nothing\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.5)  # Ditto\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n\n    Delete intervals, enveloped in the range::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.0, 1.5)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.1, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.7)\n        >>> tree\n        IntervalTree()\n\n    Point queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[-1.1]   == set([Interval(-1.1, 1.1)])\n        >>> assert tree.at(1.1) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])   # Same as tree[1.1]\n        >>> assert tree.at(1.5) == set([Interval(0.5, 1.7)])                        # Same as tree[1.5]\n\n    Interval overlap queries\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.overlap(1.7, 1.8) == set()\n        >>> assert tree.overlap(1.5, 1.8) == set([Interval(0.5, 1.7)])\n        >>> assert tree[1.5:1.8] == set([Interval(0.5, 1.7)])                       # same as previous\n        >>> assert tree.overlap(1.1, 1.8) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[1.1:1.8] == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])  # same as previous\n\n    Interval envelop queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.envelop(-0.5, 0.5) == set()\n        >>> assert tree.envelop(-0.5, 1.5) == set([Interval(-0.5, 1.5)])\n\n    Membership queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> Interval(-0.5, 0.5) in tree\n        False\n        >>> Interval(-1.1, 1.1) in tree\n        True\n        >>> Interval(-1.1, 1.1, \"x\") in tree\n        False\n        >>> tree.overlaps(-1.1)\n        True\n        >>> tree.overlaps(1.7)\n        False\n        >>> tree.overlaps(1.7, 1.8)\n        False\n        >>> tree.overlaps(-1.2, -1.1)\n        False\n        >>> tree.overlaps(-1.2, -1.0)\n        True\n\n    Sizing::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> len(tree)\n        3\n        >>> tree.is_empty()\n        False\n        >>> IntervalTree().is_empty()\n        True\n        >>> not tree\n        False\n        >>> not IntervalTree()\n        True\n        >>> print(tree.begin())    # using print() because of floats in Python 2.6\n        -1.1\n        >>> print(tree.end())      # ditto\n        1.7\n\n    Iteration::\n\n        >>> tree = IntervalTree([Interval(-11, 11), Interval(-5, 15), Interval(5, 17)])\n        >>> [iv.begin for iv in sorted(tree)]\n        [-11, -5, 5]\n        >>> assert tree.items() == set([Interval(-5, 15), Interval(-11, 11), Interval(5, 17)])\n\n    Copy- and typecasting, pickling::\n\n        >>> tree0 = IntervalTree([Interval(0, 1, \"x\"), Interval(1, 2, [\"x\"])])\n        >>> tree1 = IntervalTree(tree0)  # Shares Interval objects\n        >>> tree2 = tree0.copy()         # Shallow copy (same as above, as Intervals are singletons)\n        >>> import pickle\n        >>> tree3 = pickle.loads(pickle.dumps(tree0))  # Deep copy\n        >>> list(tree0[1])[0].data[0] = \"y\"  # affects shallow copies, but not deep copies\n        >>> tree0\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree1\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree2\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree3\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['x'])])\n\n    Equality testing::\n\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1)])\n        True\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1, \"x\")])\n        False\n    \"\"\"\n\n    @classmethod\n    def from_tuples(cls, tups):\n        \"\"\"\n        Create a new IntervalTree from an iterable of 2- or 3-tuples,\n         where the tuple lists begin, end, and optionally data.\n        \"\"\"\n        ivs = [Interval(*t) for t in tups]\n        return IntervalTree(ivs)\n\n    def copy(self):\n        \"\"\"\n        Construct a new IntervalTree using shallow copies of the\n        intervals in the source tree.\n\n        Completes in O(n*log n) time.\n        :rtype: IntervalTree\n        \"\"\"\n        return IntervalTree((iv.copy() for iv in self))\n\n    def _add_boundaries(self, interval):\n        \"\"\"\n        Records the boundaries of the interval in the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if begin in self.boundary_table:\n            self.boundary_table[begin] += 1\n        else:\n            self.boundary_table[begin] = 1\n        if end in self.boundary_table:\n            self.boundary_table[end] += 1\n        else:\n            self.boundary_table[end] = 1\n\n    def _remove_boundaries(self, interval):\n        \"\"\"\n        Removes the boundaries of the interval from the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if self.boundary_table[begin] == 1:\n            del self.boundary_table[begin]\n        else:\n            self.boundary_table[begin] -= 1\n        if self.boundary_table[end] == 1:\n            del self.boundary_table[end]\n        else:\n            self.boundary_table[end] -= 1\n\n    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n        if interval.is_null():\n            raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(interval))\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)\n    append = add\n    appendi = addi\n\n    def update(self, intervals):\n        \"\"\"\n        Given an iterable of intervals, add them to the tree.\n\n        Completes in O(m*log(n+m), where m = number of intervals to\n        add.\n        \"\"\"\n        for iv in intervals:\n            self.add(iv)\n\n    def remove(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, raises\n        ValueError.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            raise ValueError\n        self.top_node = self.top_node.remove(interval)\n        self.all_intervals.remove(interval)\n        self._remove_boundaries(interval)\n\n    def discard(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, does\n        nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            return\n        self.all_intervals.discard(interval)\n        self.top_node = self.top_node.discard(interval)\n        self._remove_boundaries(interval)\n\n    def discardi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for discard(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.discard(Interval(begin, end, data))\n\n    def difference(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals in self but not\n        in other.\n        \"\"\"\n        ivs = set()\n        for iv in self:\n            if iv not in other:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def difference_update(self, other):\n        \"\"\"\n        Removes all intervals in other from self.\n        \"\"\"\n        for iv in other:\n            self.discard(iv)\n\n    def union(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals from self\n        and other.\n        \"\"\"\n        return IntervalTree(set(self).union(other))\n\n    def intersection(self, other):\n        \"\"\"\n        Returns a new tree of all intervals common to both self and\n        other.\n        \"\"\"\n        ivs = set()\n        shorter, longer = sorted([self, other], key=len)\n        for iv in shorter:\n            if iv in longer:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def intersection_update(self, other):\n        \"\"\"\n        Removes intervals from self unless they also exist in other.\n        \"\"\"\n        ivs = list(self)\n        for iv in ivs:\n            if iv not in other:\n                self.remove(iv)\n\n    def symmetric_difference(self, other):\n        \"\"\"\n        Return a tree with elements only in self or other but not\n        both.\n        \"\"\"\n        if not isinstance(other, set):\n            other = set(other)\n        me = set(self)\n        ivs = me.difference(other).union(other.difference(me))\n        return IntervalTree(ivs)\n\n    def symmetric_difference_update(self, other):\n        \"\"\"\n        Throws out all intervals except those only in self or other,\n        not both.\n        \"\"\"\n        other = set(other)\n        ivs = list(self)\n        for iv in ivs:\n            if iv in other:\n                self.remove(iv)\n                other.remove(iv)\n        self.update(other)\n\n    def remove_overlap(self, begin, end=None):\n        \"\"\"\n        Removes all intervals overlapping the given point or range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range (this is 1 for a point)\n        \"\"\"\n        hitlist = self.at(begin) if end is None else self.overlap(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def remove_envelop(self, begin, end):\n        \"\"\"\n        Removes all intervals completely enveloped in the given range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range\n        \"\"\"\n        hitlist = self.envelop(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def chop(self, begin, end, datafunc=None):\n        \"\"\"\n        Like remove_envelop(), but trims back Intervals hanging into\n        the chopped area so that nothing overlaps.\n        \"\"\"\n        insertions = set()\n        begin_hits = [iv for iv in self.at(begin) if iv.begin < begin]\n        end_hits = [iv for iv in self.at(end) if iv.end > end]\n        if datafunc:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, datafunc(iv, True)))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, datafunc(iv, False)))\n        else:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, iv.data))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, iv.data))\n        self.remove_envelop(begin, end)\n        self.difference_update(begin_hits)\n        self.difference_update(end_hits)\n        self.update(insertions)\n\n    def slice(self, point, datafunc=None):\n        \"\"\"\n        Split Intervals that overlap point into two new Intervals. if\n        specified, uses datafunc(interval, islower=True/False) to\n        set the data field of the new Intervals.\n        :param point: where to slice\n        :param datafunc(interval, isupper): callable returning a new\n        value for the interval's data field\n        \"\"\"\n        hitlist = set((iv for iv in self.at(point) if iv.begin < point))\n        insertions = set()\n        if datafunc:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, datafunc(iv, True)))\n                insertions.add(Interval(point, iv.end, datafunc(iv, False)))\n        else:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, iv.data))\n                insertions.add(Interval(point, iv.end, iv.data))\n        self.difference_update(hitlist)\n        self.update(insertions)\n\n    def clear(self):\n        \"\"\"\n        Empties the tree.\n\n        Completes in O(1) tine.\n        \"\"\"\n        self.__init__()\n\n    def find_nested(self):\n        \"\"\"\n        Returns a dictionary mapping parent intervals to sets of\n        intervals overlapped by and contained in the parent.\n\n        Completes in O(n^2) time.\n        :rtype: dict of [Interval, set of Interval]\n        \"\"\"\n        result = {}\n\n        def add_if_nested():\n            if parent.contains_interval(child):\n                if parent not in result:\n                    result[parent] = set()\n                result[parent].add(child)\n        long_ivs = sorted(self.all_intervals, key=Interval.length, reverse=True)\n        for i, parent in enumerate(long_ivs):\n            for child in long_ivs[i + 1:]:\n                add_if_nested()\n        return result\n\n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        point or range.\n\n        Completes in O(r*log n) time, where r is the size of the\n        search range.\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            return self.overlaps_range(begin, end)\n        elif isinstance(begin, Number):\n            return self.overlaps_point(begin)\n        else:\n            return self.overlaps_range(begin.begin, begin.end)\n\n    def overlaps_point(self, p):\n        \"\"\"\n        Returns whether some interval in the tree overlaps p.\n\n        Completes in O(log n) time.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        return bool(self.top_node.contains_point(p))\n\n    def overlaps_range(self, begin, end):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        range. Returns False if given a null interval over which to\n        test.\n\n        Completes in O(r*log n) time, where r is the range length and n\n        is the table size.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        elif begin >= end:\n            return False\n        elif self.overlaps_point(begin):\n            return True\n        return any((self.overlaps_point(bound) for bound in self.boundary_table if begin < bound < end))\n\n    def split_overlaps(self):\n        \"\"\"\n        Finds all intervals with overlapping ranges and splits them\n        along the range boundaries.\n\n        Completes in worst-case O(n^2*log n) time (many interval\n        boundaries are inside many intervals), best-case O(n*log n)\n        time (small number of overlaps << n per interval).\n        \"\"\"\n        if not self:\n            return\n        if len(self.boundary_table) == 2:\n            return\n        bounds = sorted(self.boundary_table)\n        new_ivs = set()\n        for lbound, ubound in zip(bounds[:-1], bounds[1:]):\n            for iv in self[lbound]:\n                new_ivs.add(Interval(lbound, ubound, iv.data))\n        self.__init__(new_ivs)\n\n    def merge_overlaps(self, data_reducer=None, data_initializer=None, strict=True):\n        \"\"\"\n        Finds all intervals with overlapping ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initializer created with copy.copy(data_initializer).\n\n        If strict is True (default), intervals are only merged if\n        their ranges actually overlap; adjacent, touching intervals\n        will not be merged. If strict is False, intervals are merged\n        even if they are only end-to-end adjacent.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                if higher.begin < lower.end or (not strict and higher.begin == lower.end):\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def merge_equals(self, data_reducer=None, data_initializer=None):\n        \"\"\"\n        Finds all intervals with equal ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                if higher.range_matches(lower):\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def merge_neighbors(self, data_reducer=None, data_initializer=None, distance=1, strict=True):\n        \"\"\"\n        Finds all adjacent intervals with range terminals less than or equal to\n        the given distance and merges them into a single interval. If provided,\n        uses data_reducer and data_initializer with similar semantics to\n        Python's built-in reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        If strict is True (default), only discrete intervals are merged if\n        their ranges are within the given distance; overlapping intervals\n        will not be merged. If strict is False, both neighbors and overlapping\n        intervals are merged.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                margin = higher.begin - lower.end\n                if margin <= distance:\n                    if strict and margin < 0:\n                        new_series()\n                        continue\n                    else:\n                        upper_bound = max(lower.end, higher.end)\n                        if data_reducer is not None:\n                            current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                        else:\n                            current_reduced[0] = None\n                        merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def items(self):\n        \"\"\"\n        Constructs and returns a set of all intervals in the tree.\n\n        Completes in O(n) time.\n        :rtype: set of Interval\n        \"\"\"\n        return set(self.all_intervals)\n\n    def is_empty(self):\n        \"\"\"\n        Returns whether the tree is empty.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return 0 == len(self)\n\n    def at(self, p):\n        \"\"\"\n        Returns the set of all intervals that contain p.\n\n        Completes in O(m + log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        return root.search_point(p, set())\n\n    def envelop(self, begin, end=None):\n        \"\"\"\n        Returns the set of all intervals fully contained in the range\n        [begin, end).\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.envelop(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)\n        result.update(root.search_overlap((boundary_table.keys()[index] for index in xrange(bound_begin, bound_end))))\n        result = set((iv for iv in result if iv.begin >= begin and iv.end <= end))\n        return result\n\n    def overlap(self, begin, end=None):\n        \"\"\"\n        Returns a set of all intervals overlapping the given range.\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.overlap(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)\n        result.update(root.search_overlap((boundary_table.keys()[index] for index in xrange(bound_begin, bound_end))))\n        return result\n\n    def begin(self):\n        \"\"\"\n        Returns the lower bound of the first interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[0]\n\n    def end(self):\n        \"\"\"\n        Returns the upper bound of the last interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[-1]\n\n    def range(self):\n        \"\"\"\n        Returns a minimum-spanning Interval that encloses all the\n        members of this IntervalTree. If the tree is empty, returns\n        null Interval.\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin(), self.end())\n\n    def span(self):\n        \"\"\"\n        Returns the length of the minimum-spanning Interval that\n        encloses all the members of this IntervalTree. If the tree\n        is empty, return 0.\n        \"\"\"\n        if not self:\n            return 0\n        return self.end() - self.begin()\n\n    def print_structure(self, tostring=False):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Pretty-prints the structure of the tree.\n        If tostring is true, prints nothing and returns a string.\n        :rtype: None or str\n        \"\"\"\n        if self.top_node:\n            return self.top_node.print_structure(tostring=tostring)\n        else:\n            result = '<empty IntervalTree>'\n            if not tostring:\n                print(result)\n            else:\n                return result\n\n    def score(self, full_report=False):\n        \"\"\"\n        Returns a number between 0 and 1, indicating how suboptimal the tree\n        is. The lower, the better. Roughly, this number represents the\n        fraction of flawed Intervals in the tree.\n        :rtype: float\n        \"\"\"\n        if len(self) <= 2:\n            return 0.0\n        n = len(self)\n        m = self.top_node.count_nodes()\n\n        def s_center_score():\n            \"\"\"\n            Returns a normalized score, indicating roughly how many times\n            intervals share s_center with other intervals. Output is full-scale\n            from 0 to 1.\n            :rtype: float\n            \"\"\"\n            raw = n - m\n            maximum = n - 1\n            return raw / float(maximum)\n        report = {'depth': self.top_node.depth_score(n, m), 's_center': s_center_score()}\n        cumulative = max(report.values())\n        report['_cumulative'] = cumulative\n        if full_report:\n            return report\n        return cumulative\n\n    def __getitem__(self, index):\n        \"\"\"\n        Returns a set of all intervals overlapping the given index or\n        slice.\n\n        Completes in O(k * log(n) + m) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range (this is 1 for a point)\n        :rtype: set of Interval\n        \"\"\"\n        try:\n            start, stop = (index.start, index.stop)\n            if start is None:\n                start = self.begin()\n                if stop is None:\n                    return set(self)\n            if stop is None:\n                stop = self.end()\n            return self.overlap(start, stop)\n        except AttributeError:\n            return self.at(index)\n\n    def __setitem__(self, index, value):\n        \"\"\"\n        Adds a new interval to the tree. A shortcut for\n        add(Interval(index.start, index.stop, value)).\n\n        If an identical Interval object with equal range and data\n        already exists, does nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        self.addi(index.start, index.stop, value)\n\n    def __delitem__(self, point):\n        \"\"\"\n        Delete all items overlapping point.\n        \"\"\"\n        self.remove_overlap(point)\n\n    def __contains__(self, item):\n        \"\"\"\n        Returns whether item exists as an Interval in the tree.\n        This method only returns True for exact matches; for\n        overlaps, see the overlaps() method.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return item in self.all_intervals\n\n    def containsi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for (Interval(begin, end, data) in tree).\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return Interval(begin, end, data) in self\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()\n    iter = __iter__\n\n    def __len__(self):\n        \"\"\"\n        Returns how many intervals are in the tree.\n\n        Completes in O(1) time.\n        :rtype: int\n        \"\"\"\n        return len(self.all_intervals)\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether two IntervalTrees are equal.\n\n        Completes in O(n) time if sizes are equal; O(1) time otherwise.\n        :rtype: bool\n        \"\"\"\n        return isinstance(other, IntervalTree) and self.all_intervals == other.all_intervals\n\n    def __repr__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        ivs = sorted(self)\n        if not ivs:\n            return 'IntervalTree()'\n        else:\n            return 'IntervalTree({0})'.format(ivs)\n    __str__ = __repr__\n\n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :rtype: tuple\n        \"\"\"\n        return (IntervalTree, (sorted(self.all_intervals),))"
  }
}