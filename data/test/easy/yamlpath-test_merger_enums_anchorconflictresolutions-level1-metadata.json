{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_anchorconflictresolutions",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_anchorconflictresolutions.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.anchorconflictresolutions import (\n\tAnchorConflictResolutions)\n\n\nclass Test_merger_enum_anchorconflictresolutions():\n\t\"\"\"Tests for the AnchorConflictResolutions enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert AnchorConflictResolutions.get_names() == [\n\t\t\t\"STOP\",\n\t\t\t\"LEFT\",\n\t\t\t\"RIGHT\",\n\t\t\t\"RENAME\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert AnchorConflictResolutions.get_choices() == [\n\t\t\t\"left\",\n\t\t\t\"rename\",\n\t\t\t\"right\",\n\t\t\t\"stop\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"STOP\", AnchorConflictResolutions.STOP),\n\t\t(\"LEFT\", AnchorConflictResolutions.LEFT),\n\t\t(\"RIGHT\", AnchorConflictResolutions.RIGHT),\n\t\t(\"RENAME\", AnchorConflictResolutions.RENAME),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == AnchorConflictResolutions.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tAnchorConflictResolutions.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/anchorconflictresolutions.py": "\"\"\"\nImplements the AnchorConflictResolutions enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass AnchorConflictResolutions(Enum):\n    \"\"\"\n    Supported Anchor Conflict Resolutions.\n\n    Resolutions include:\n\n    `STOP`\n        Abort the merge upon conflict detection.\n\n    `LEFT`\n        The first-encountered definition overrides all other uses.\n\n    `RIGHT`\n        The last-encountered definition overrides all other uses.\n\n    `RENAME`\n        Conflicting anchors are renamed within the affected documents.\n    \"\"\"\n\n    STOP = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    RENAME = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in AnchorConflictResolutions]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in AnchorConflictResolutions.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"AnchorConflictResolutions\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (AnchorConflictResolutions) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in AnchorConflictResolutions.get_names():\n            return AnchorConflictResolutions[check]\n        raise NameError(\n            \"AnchorConflictResolutions has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/anchorconflictresolutions.py": {
      "AnchorConflictResolutions.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Retrieve the names of all entries in the AnchorConflictResolutions enumeration, formatted in upper case.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str] - A list of upper-cased names corresponding to the enumeration entries.\n\nThis method interacts with the AnchorConflictResolutions class, which represents various conflict resolution strategies for anchor definitions. The enumeration entries include `STOP`, `LEFT`, `RIGHT`, and `RENAME`. This method is useful for obtaining standardized names of the enumeration constants, which can be utilized in interfaces where case consistency is required.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in AnchorConflictResolutions]",
        "docstring": "Retrieve the names of all entries in the AnchorConflictResolutions enumeration, formatted in upper case.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str] - A list of upper-cased names corresponding to the enumeration entries.\n\nThis method interacts with the AnchorConflictResolutions class, which represents various conflict resolution strategies for anchor definitions. The enumeration entries include `STOP`, `LEFT`, `RIGHT`, and `RENAME`. This method is useful for obtaining standardized names of the enumeration constants, which can be utilized in interfaces where case consistency is required.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class AnchorConflictResolutions(Enum):"
      },
      "AnchorConflictResolutions.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Retrieve all symbolic representations of the `AnchorConflictResolutions` enumeration in lower-case.\n\nThis method compiles a list of names from the enumeration entries converted to lower-case by calling `get_names()`. It ensures that the names are unique, sorts them, and returns the sorted list.\n\nReturns:\n    List[str]: A list of unique lower-case names representing the entries of the `AnchorConflictResolutions` enumeration.\n\nDependencies:\n    - Calls the `get_names()` method to obtain the upper-case names of the enumeration entries. \n    - The enumeration entries (`STOP`, `LEFT`, `RIGHT`, `RENAME`) are defined in the `AnchorConflictResolutions` class and represent various conflict resolution strategies.\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in AnchorConflictResolutions.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Retrieve all symbolic representations of the `AnchorConflictResolutions` enumeration in lower-case.\n\nThis method compiles a list of names from the enumeration entries converted to lower-case by calling `get_names()`. It ensures that the names are unique, sorts them, and returns the sorted list.\n\nReturns:\n    List[str]: A list of unique lower-case names representing the entries of the `AnchorConflictResolutions` enumeration.\n\nDependencies:\n    - Calls the `get_names()` method to obtain the upper-case names of the enumeration entries. \n    - The enumeration entries (`STOP`, `LEFT`, `RIGHT`, `RENAME`) are defined in the `AnchorConflictResolutions` class and represent various conflict resolution strategies.",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class AnchorConflictResolutions(Enum):"
      },
      "AnchorConflictResolutions.from_str": {
        "code": "    def from_str(name: str) -> 'AnchorConflictResolutions':\n        \"\"\"Convert a string value to its corresponding AnchorConflictResolutions enumeration value if valid.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This value is checked in a case-insensitive manner.\n\nReturns:\n    AnchorConflictResolutions: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration values.\n\nThis method interacts with the `get_names` static method to retrieve a list of valid enumeration names, converting the input string to uppercase for comparison. If the name exists in the enumeration, the corresponding value is returned; otherwise, a `NameError` is raised.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (AnchorConflictResolutions) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in AnchorConflictResolutions.get_names():\n            return AnchorConflictResolutions[check]\n        raise NameError('AnchorConflictResolutions has no such item:  {}'.format(name))",
        "docstring": "Convert a string value to its corresponding AnchorConflictResolutions enumeration value if valid.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This value is checked in a case-insensitive manner.\n\nReturns:\n    AnchorConflictResolutions: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration values.\n\nThis method interacts with the `get_names` static method to retrieve a list of valid enumeration names, converting the input string to uppercase for comparison. If the name exists in the enumeration, the corresponding value is returned; otherwise, a `NameError` is raised.",
        "signature": "def from_str(name: str) -> 'AnchorConflictResolutions':",
        "type": "Method",
        "class_signature": "class AnchorConflictResolutions(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_choices": {},
    "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_anchorconflictresolutions\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 anchorconflictresolutions.py\n                \u251c\u2500\u2500 AnchorConflictResolutions.from_str\n                \u251c\u2500\u2500 AnchorConflictResolutions.get_choices\n                \u2514\u2500\u2500 AnchorConflictResolutions.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module provides a testing suite for the `AnchorConflictResolutions` enumeration, which is part of the YAML Path library's merger functionality. Its primary purpose is to validate the behavior of the enumeration that resolves anchor conflicts during YAML document merging. It ensures that the enumeration correctly defines supported conflict resolution strategies, offers consistent naming and choice retrieval, and properly converts string inputs into their corresponding enumeration values. By verifying these features, the module ensures that developers working with YAML Path have a reliable mechanism to handle anchor conflicts, reducing potential errors and streamlining the integration of YAML documents.\n\n## FILE 1: yamlpath/merger/enums/anchorconflictresolutions.py\n\n- CLASS METHOD: AnchorConflictResolutions.get_names\n  - CLASS SIGNATURE: class AnchorConflictResolutions(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the names of all entries in the AnchorConflictResolutions enumeration, formatted in upper case.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str] - A list of upper-cased names corresponding to the enumeration entries.\n\nThis method interacts with the AnchorConflictResolutions class, which represents various conflict resolution strategies for anchor definitions. The enumeration entries include `STOP`, `LEFT`, `RIGHT`, and `RENAME`. This method is useful for obtaining standardized names of the enumeration constants, which can be utilized in interfaces where case consistency is required.\n\"\"\"\n```\n\n- CLASS METHOD: AnchorConflictResolutions.get_choices\n  - CLASS SIGNATURE: class AnchorConflictResolutions(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve all symbolic representations of the `AnchorConflictResolutions` enumeration in lower-case.\n\nThis method compiles a list of names from the enumeration entries converted to lower-case by calling `get_names()`. It ensures that the names are unique, sorts them, and returns the sorted list.\n\nReturns:\n    List[str]: A list of unique lower-case names representing the entries of the `AnchorConflictResolutions` enumeration.\n\nDependencies:\n    - Calls the `get_names()` method to obtain the upper-case names of the enumeration entries. \n    - The enumeration entries (`STOP`, `LEFT`, `RIGHT`, `RENAME`) are defined in the `AnchorConflictResolutions` class and represent various conflict resolution strategies.\n\"\"\"\n```\n\n- CLASS METHOD: AnchorConflictResolutions.from_str\n  - CLASS SIGNATURE: class AnchorConflictResolutions(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'AnchorConflictResolutions':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string value to its corresponding AnchorConflictResolutions enumeration value if valid.\n\nParameters:\n    name (str): The name of the enumeration value to convert. This value is checked in a case-insensitive manner.\n\nReturns:\n    AnchorConflictResolutions: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration values.\n\nThis method interacts with the `get_names` static method to retrieve a list of valid enumeration names, converting the input string to uppercase for comparison. If the name exists in the enumeration, the corresponding value is returned; otherwise, a `NameError` is raised.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/anchorconflictresolutions.py": "\"\"\"\nImplements the AnchorConflictResolutions enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass AnchorConflictResolutions(Enum):\n    \"\"\"\n    Supported Anchor Conflict Resolutions.\n\n    Resolutions include:\n\n    `STOP`\n        Abort the merge upon conflict detection.\n\n    `LEFT`\n        The first-encountered definition overrides all other uses.\n\n    `RIGHT`\n        The last-encountered definition overrides all other uses.\n\n    `RENAME`\n        Conflicting anchors are renamed within the affected documents.\n    \"\"\"\n    STOP = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    RENAME = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_anchorconflictresolutions.py:Test_merger_enum_anchorconflictresolutions:test_get_names": {
      "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_names": {}
    },
    "tests/test_merger_enums_anchorconflictresolutions.py:Test_merger_enum_anchorconflictresolutions:test_get_choices": {
      "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_choices": {
        "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_names": {}
      }
    },
    "tests/test_merger_enums_anchorconflictresolutions.py:Test_merger_enum_anchorconflictresolutions:test_from_str": {
      "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:from_str": {
        "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_names": {}
      }
    },
    "tests/test_merger_enums_anchorconflictresolutions.py:Test_merger_enum_anchorconflictresolutions:test_from_str_nameerror": {
      "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:from_str": {
        "yamlpath/merger/enums/anchorconflictresolutions.py:AnchorConflictResolutions:get_names": {}
      }
    }
  }
}