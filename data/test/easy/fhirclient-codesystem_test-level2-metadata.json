{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-codesystem_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/codesystem_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import codesystem\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CodeSystemTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        return codesystem.CodeSystem(js)\n    \n    def testCodeSystem1(self):\n        inst = self.instantiate_from(\"codesystem-example-summary.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CodeSystem instance\")\n        self.implCodeSystem1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        inst2 = codesystem.CodeSystem(js)\n        self.implCodeSystem1(inst2)\n    \n    def implCodeSystem1(self, inst):\n        self.assertTrue(inst.caseSensitive)\n        self.assertEqual(inst.contact[0].name, \"FHIR project team\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.content, \"not-present\")\n        self.assertEqual(inst.count, 92)\n        self.assertEqual(inst.description, \"This is an example code system summary for the ACME codes for body site.\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"summary\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"CA\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.name, \"Code system summary example for ACME body sites\")\n        self.assertEqual(inst.publisher, \"HL7 International\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/CodeSystem/summary\")\n        self.assertEqual(inst.useContext[0].code.code, \"species\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://example.org/CodeSystem/contexttype\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"337915000\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Homo sapiens (organism)\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"4.0.1\")\n    \n    def testCodeSystem2(self):\n        inst = self.instantiate_from(\"codesystem-list-example-codes.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CodeSystem instance\")\n        self.implCodeSystem2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        inst2 = codesystem.CodeSystem(js)\n        self.implCodeSystem2(inst2)\n    \n    def implCodeSystem2(self, inst):\n        self.assertTrue(inst.caseSensitive)\n        self.assertEqual(inst.concept[0].code, \"alerts\")\n        self.assertEqual(inst.concept[0].definition, \"A list of alerts for the patient.\")\n        self.assertEqual(inst.concept[0].display, \"Alerts\")\n        self.assertEqual(inst.concept[1].code, \"adverserxns\")\n        self.assertEqual(inst.concept[1].definition, \"A list of part adverse reactions.\")\n        self.assertEqual(inst.concept[1].display, \"Adverse Reactions\")\n        self.assertEqual(inst.concept[2].code, \"allergies\")\n        self.assertEqual(inst.concept[2].definition, \"A list of Allergies for the patient.\")\n        self.assertEqual(inst.concept[2].display, \"Allergies\")\n        self.assertEqual(inst.concept[3].code, \"medications\")\n        self.assertEqual(inst.concept[3].definition, \"A list of medication statements for the patient.\")\n        self.assertEqual(inst.concept[3].display, \"Medication List\")\n        self.assertEqual(inst.concept[4].code, \"problems\")\n        self.assertEqual(inst.concept[4].definition, \"A list of problems that the patient is known of have (or have had in the past).\")\n        self.assertEqual(inst.concept[4].display, \"Problem List\")\n        self.assertEqual(inst.concept[5].code, \"worklist\")\n        self.assertEqual(inst.concept[5].definition, \"A list of items that constitute a set of work to be performed (typically this code would be specialized for more specific uses, such as a ward round list).\")\n        self.assertEqual(inst.concept[5].display, \"Worklist\")\n        self.assertEqual(inst.concept[6].code, \"waiting\")\n        self.assertEqual(inst.concept[6].definition, \"A list of items waiting for an event (perhaps a surgical patient waiting list).\")\n        self.assertEqual(inst.concept[6].display, \"Waiting List\")\n        self.assertEqual(inst.concept[7].code, \"protocols\")\n        self.assertEqual(inst.concept[7].definition, \"A set of protocols to be followed.\")\n        self.assertEqual(inst.concept[7].display, \"Protocols\")\n        self.assertEqual(inst.concept[8].code, \"plans\")\n        self.assertEqual(inst.concept[8].definition, \"A set of care plans that apply in a particular context of care.\")\n        self.assertEqual(inst.concept[8].display, \"Care Plans\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.content, \"complete\")\n        self.assertEqual(inst.description, \"Example use codes for the List resource - typical kinds of use.\")\n        self.assertFalse(inst.experimental)\n        self.assertEqual(inst.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-wg\")\n        self.assertEqual(inst.extension[0].valueCode, \"fhir\")\n        self.assertEqual(inst.extension[1].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status\")\n        self.assertEqual(inst.extension[1].valueCode, \"draft\")\n        self.assertEqual(inst.extension[2].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm\")\n        self.assertEqual(inst.extension[2].valueInteger, 1)\n        self.assertEqual(inst.id, \"list-example-codes\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:2.16.840.1.113883.4.642.4.1105\")\n        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant(\"2019-11-01T09:29:23.356+11:00\").datetime)\n        self.assertEqual(inst.meta.lastUpdated.as_json(), \"2019-11-01T09:29:23.356+11:00\")\n        self.assertEqual(inst.meta.profile[0], \"http://hl7.org/fhir/StructureDefinition/shareablecodesystem\")\n        self.assertEqual(inst.name, \"ExampleUseCodesForList\")\n        self.assertEqual(inst.publisher, \"FHIR Project\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Example Use Codes for List\")\n        self.assertEqual(inst.url, \"http://terminology.hl7.org/CodeSystem/list-example-use-codes\")\n        self.assertEqual(inst.valueSet, \"http://hl7.org/fhir/ValueSet/list-example-codes\")\n        self.assertEqual(inst.version, \"4.0.1\")\n    \n    def testCodeSystem3(self):\n        inst = self.instantiate_from(\"codesystem-examplescenario-actor-type.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CodeSystem instance\")\n        self.implCodeSystem3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        inst2 = codesystem.CodeSystem(js)\n        self.implCodeSystem3(inst2)\n    \n    def implCodeSystem3(self, inst):\n        self.assertTrue(inst.caseSensitive)\n        self.assertEqual(inst.concept[0].code, \"person\")\n        self.assertEqual(inst.concept[0].definition, \"A person.\")\n        self.assertEqual(inst.concept[0].display, \"Person\")\n        self.assertEqual(inst.concept[1].code, \"entity\")\n        self.assertEqual(inst.concept[1].definition, \"A system.\")\n        self.assertEqual(inst.concept[1].display, \"System\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.contact[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[1].value, \"fhir@lists.hl7.org\")\n        self.assertEqual(inst.content, \"complete\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2019-11-01T09:29:23+11:00\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2019-11-01T09:29:23+11:00\")\n        self.assertEqual(inst.description, \"The type of actor - system or human.\")\n        self.assertFalse(inst.experimental)\n        self.assertEqual(inst.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-wg\")\n        self.assertEqual(inst.extension[0].valueCode, \"fhir\")\n        self.assertEqual(inst.extension[1].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status\")\n        self.assertEqual(inst.extension[1].valueCode, \"trial-use\")\n        self.assertEqual(inst.extension[2].url, \"http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm\")\n        self.assertEqual(inst.extension[2].valueInteger, 0)\n        self.assertEqual(inst.id, \"examplescenario-actor-type\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:2.16.840.1.113883.4.642.4.859\")\n        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant(\"2019-11-01T09:29:23.356+11:00\").datetime)\n        self.assertEqual(inst.meta.lastUpdated.as_json(), \"2019-11-01T09:29:23.356+11:00\")\n        self.assertEqual(inst.name, \"ExampleScenarioActorType\")\n        self.assertEqual(inst.publisher, \"HL7 (FHIR Project)\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"ExampleScenarioActorType\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/examplescenario-actor-type\")\n        self.assertEqual(inst.valueSet, \"http://hl7.org/fhir/ValueSet/examplescenario-actor-type\")\n        self.assertEqual(inst.version, \"4.0.1\")\n    \n    def testCodeSystem4(self):\n        inst = self.instantiate_from(\"codesystem-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CodeSystem instance\")\n        self.implCodeSystem4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        inst2 = codesystem.CodeSystem(js)\n        self.implCodeSystem4(inst2)\n    \n    def implCodeSystem4(self, inst):\n        self.assertTrue(inst.caseSensitive)\n        self.assertEqual(inst.concept[0].code, \"chol-mmol\")\n        self.assertEqual(inst.concept[0].definition, \"Serum Cholesterol, in mmol/L\")\n        self.assertEqual(inst.concept[0].designation[0].use.code, \"internal-label\")\n        self.assertEqual(inst.concept[0].designation[0].use.system, \"http://acme.com/config/fhir/codesystems/internal\")\n        self.assertEqual(inst.concept[0].designation[0].value, \"From ACME POC Testing\")\n        self.assertEqual(inst.concept[0].display, \"SChol (mmol/L)\")\n        self.assertEqual(inst.concept[1].code, \"chol-mass\")\n        self.assertEqual(inst.concept[1].definition, \"Serum Cholesterol, in mg/L\")\n        self.assertEqual(inst.concept[1].designation[0].use.code, \"internal-label\")\n        self.assertEqual(inst.concept[1].designation[0].use.system, \"http://acme.com/config/fhir/codesystems/internal\")\n        self.assertEqual(inst.concept[1].designation[0].value, \"From Paragon Labs\")\n        self.assertEqual(inst.concept[1].display, \"SChol (mg/L)\")\n        self.assertEqual(inst.concept[2].code, \"chol\")\n        self.assertEqual(inst.concept[2].definition, \"Serum Cholesterol\")\n        self.assertEqual(inst.concept[2].designation[0].use.code, \"internal-label\")\n        self.assertEqual(inst.concept[2].designation[0].use.system, \"http://acme.com/config/fhir/codesystems/internal\")\n        self.assertEqual(inst.concept[2].designation[0].value, \"Obdurate Labs uses this with both kinds of units...\")\n        self.assertEqual(inst.concept[2].display, \"SChol\")\n        self.assertEqual(inst.contact[0].name, \"FHIR project team\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.content, \"complete\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2016-01-28\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2016-01-28\")\n        self.assertEqual(inst.description, \"This is an example code system that includes all the ACME codes for serum/plasma cholesterol from v2.36.\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.filter[0].code, \"acme-plasma\")\n        self.assertEqual(inst.filter[0].description, \"An internal filter used to select codes that are only used with plasma\")\n        self.assertEqual(inst.filter[0].operator[0], \"=\")\n        self.assertEqual(inst.filter[0].value, \"the value of this filter is either 'true' or 'false'\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://acme.com/identifiers/codesystems\")\n        self.assertEqual(inst.identifier[0].value, \"internal-cholesterol-inl\")\n        self.assertEqual(inst.meta.profile[0], \"http://hl7.org/fhir/StructureDefinition/shareablecodesystem\")\n        self.assertEqual(inst.name, \"ACMECholCodesBlood\")\n        self.assertEqual(inst.publisher, \"Acme Co\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"ACME Codes for Cholesterol in Serum/Plasma\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/CodeSystem/example\")\n        self.assertEqual(inst.version, \"20160128\")\n    \n    def testCodeSystem5(self):\n        inst = self.instantiate_from(\"codesystem-example-supplement.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CodeSystem instance\")\n        self.implCodeSystem5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CodeSystem\", js[\"resourceType\"])\n        inst2 = codesystem.CodeSystem(js)\n        self.implCodeSystem5(inst2)\n    \n    def implCodeSystem5(self, inst):\n        self.assertEqual(inst.concept[0].code, \"chol-mmol\")\n        self.assertEqual(inst.concept[0].property[0].code, \"legacy\")\n        self.assertFalse(inst.concept[0].property[0].valueBoolean)\n        self.assertEqual(inst.concept[1].code, \"chol-mass\")\n        self.assertEqual(inst.concept[1].property[0].code, \"legacy\")\n        self.assertTrue(inst.concept[1].property[0].valueBoolean)\n        self.assertEqual(inst.concept[2].code, \"chol\")\n        self.assertEqual(inst.concept[2].property[0].code, \"legacy\")\n        self.assertTrue(inst.concept[2].property[0].valueBoolean)\n        self.assertEqual(inst.contact[0].name, \"FHIR project team\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.content, \"supplement\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2016-01-28\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2016-01-28\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"example-supplement\")\n        self.assertEqual(inst.name, \"CholCodeLegacyStatus\")\n        self.assertEqual(inst.property[0].code, \"legacy\")\n        self.assertEqual(inst.property[0].description, \"hether the test is currently performed\")\n        self.assertEqual(inst.property[0].type, \"boolean\")\n        self.assertEqual(inst.publisher, \"ACME Co\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.supplements, \"http://hl7.org/fhir/CodeSystem/example\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/CodeSystem/example-supplement\")\n        self.assertEqual(inst.version, \"201801103\")\n\n",
  "GT_file_code": {
    "fhirclient/models/codesystem.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/CodeSystem).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass CodeSystem(domainresource.DomainResource):\n    \"\"\" Declares the existence of and describes a code system or code system\n    supplement.\n    \n    The CodeSystem resource is used to declare the existence of and describe a\n    code system or code system supplement and its key properties, and\n    optionally define a part or all of its content.\n    \"\"\"\n    \n    resource_type = \"CodeSystem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.caseSensitive = None\n        \"\"\" If code comparison is case sensitive.\n        Type `bool`. \"\"\"\n        \n        self.compositional = None\n        \"\"\" If code system defines a compositional grammar.\n        Type `bool`. \"\"\"\n        \n        self.concept = None\n        \"\"\" Concepts in the code system.\n        List of `CodeSystemConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.content = None\n        \"\"\" not-present | example | fragment | complete | supplement.\n        Type `str`. \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.count = None\n        \"\"\" Total concepts in the code system.\n        Type `int`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the code system.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.filter = None\n        \"\"\" Filter that can be used in a value set.\n        List of `CodeSystemFilter` items (represented as `dict` in JSON). \"\"\"\n        \n        self.hierarchyMeaning = None\n        \"\"\" grouped-by | is-a | part-of | classified-with.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the code system (business identifier).\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for code system (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this code system (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.property = None\n        \"\"\" Additional information supplied about each concept.\n        List of `CodeSystemProperty` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this code system is defined.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.supplements = None\n        \"\"\" Canonical URL of Code System this adds designations and properties\n        to.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this code system (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this code system, represented as a URI\n        (globally unique) (Coding.system).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.valueSet = None\n        \"\"\" Canonical reference to the value set with entire code system.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the code system (Coding.version).\n        Type `str`. \"\"\"\n        \n        self.versionNeeded = None\n        \"\"\" If definitions are not stable.\n        Type `bool`. \"\"\"\n        \n        super(CodeSystem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystem, self).elementProperties()\n        js.extend([\n            (\"caseSensitive\", \"caseSensitive\", bool, False, None, False),\n            (\"compositional\", \"compositional\", bool, False, None, False),\n            (\"concept\", \"concept\", CodeSystemConcept, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"content\", \"content\", str, False, None, True),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"count\", \"count\", int, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"filter\", \"filter\", CodeSystemFilter, True, None, False),\n            (\"hierarchyMeaning\", \"hierarchyMeaning\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"property\", \"property\", CodeSystemProperty, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"supplements\", \"supplements\", str, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"valueSet\", \"valueSet\", str, False, None, False),\n            (\"version\", \"version\", str, False, None, False),\n            (\"versionNeeded\", \"versionNeeded\", bool, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CodeSystemConcept(backboneelement.BackboneElement):\n    \"\"\" Concepts in the code system.\n    \n    Concepts that are in the code system. The concept definitions are\n    inherently hierarchical, but the definitions must be consulted to determine\n    what the meanings of the hierarchical relationships are.\n    \"\"\"\n    \n    resource_type = \"CodeSystemConcept\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Code that identifies concept.\n        Type `str`. \"\"\"\n        \n        self.concept = None\n        \"\"\" Child Concepts (is-a/contains/categorizes).\n        List of `CodeSystemConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.definition = None\n        \"\"\" Formal definition.\n        Type `str`. \"\"\"\n        \n        self.designation = None\n        \"\"\" Additional representations for the concept.\n        List of `CodeSystemConceptDesignation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.display = None\n        \"\"\" Text to display to the user.\n        Type `str`. \"\"\"\n        \n        self.property = None\n        \"\"\" Property value for the concept.\n        List of `CodeSystemConceptProperty` items (represented as `dict` in JSON). \"\"\"\n        \n        super(CodeSystemConcept, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystemConcept, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"concept\", \"concept\", CodeSystemConcept, True, None, False),\n            (\"definition\", \"definition\", str, False, None, False),\n            (\"designation\", \"designation\", CodeSystemConceptDesignation, True, None, False),\n            (\"display\", \"display\", str, False, None, False),\n            (\"property\", \"property\", CodeSystemConceptProperty, True, None, False),\n        ])\n        return js\n\n\nclass CodeSystemConceptDesignation(backboneelement.BackboneElement):\n    \"\"\" Additional representations for the concept.\n    \n    Additional representations for the concept - other languages, aliases,\n    specialized purposes, used for particular purposes, etc.\n    \"\"\"\n    \n    resource_type = \"CodeSystemConceptDesignation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.language = None\n        \"\"\" Human language of the designation.\n        Type `str`. \"\"\"\n        \n        self.use = None\n        \"\"\" Details how this designation would be used.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" The text value for this designation.\n        Type `str`. \"\"\"\n        \n        super(CodeSystemConceptDesignation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystemConceptDesignation, self).elementProperties()\n        js.extend([\n            (\"language\", \"language\", str, False, None, False),\n            (\"use\", \"use\", coding.Coding, False, None, False),\n            (\"value\", \"value\", str, False, None, True),\n        ])\n        return js\n\n\nclass CodeSystemConceptProperty(backboneelement.BackboneElement):\n    \"\"\" Property value for the concept.\n    \n    A property value for this concept.\n    \"\"\"\n    \n    resource_type = \"CodeSystemConceptProperty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Reference to CodeSystem.property.code.\n        Type `str`. \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Value of the property for this concept.\n        Type `bool`. \"\"\"\n        \n        self.valueCode = None\n        \"\"\" Value of the property for this concept.\n        Type `str`. \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Value of the property for this concept.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" Value of the property for this concept.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Value of the property for this concept.\n        Type `float`. \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Value of the property for this concept.\n        Type `int`. \"\"\"\n        \n        self.valueString = None\n        \"\"\" Value of the property for this concept.\n        Type `str`. \"\"\"\n        \n        super(CodeSystemConceptProperty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystemConceptProperty, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCode\", \"valueCode\", str, False, \"value\", True),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n        ])\n        return js\n\n\nclass CodeSystemFilter(backboneelement.BackboneElement):\n    \"\"\" Filter that can be used in a value set.\n    \n    A filter that can be used in a value set compose statement when selecting\n    concepts using a filter.\n    \"\"\"\n    \n    resource_type = \"CodeSystemFilter\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Code that identifies the filter.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" How or why the filter is used.\n        Type `str`. \"\"\"\n        \n        self.operator = None\n        \"\"\" = | is-a | descendent-of | is-not-a | regex | in | not-in |\n        generalizes | exists.\n        List of `str` items. \"\"\"\n        \n        self.value = None\n        \"\"\" What to use for the value.\n        Type `str`. \"\"\"\n        \n        super(CodeSystemFilter, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystemFilter, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"operator\", \"operator\", str, True, None, True),\n            (\"value\", \"value\", str, False, None, True),\n        ])\n        return js\n\n\nclass CodeSystemProperty(backboneelement.BackboneElement):\n    \"\"\" Additional information supplied about each concept.\n    \n    A property defines an additional slot through which additional information\n    can be provided about a concept.\n    \"\"\"\n    \n    resource_type = \"CodeSystemProperty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Identifies the property on the concepts, and when referred to in\n        operations.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Why the property is defined, and/or what it conveys.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" code | Coding | string | integer | boolean | dateTime | decimal.\n        Type `str`. \"\"\"\n        \n        self.uri = None\n        \"\"\" Formal identifier for the property.\n        Type `str`. \"\"\"\n        \n        super(CodeSystemProperty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CodeSystemProperty, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n            (\"uri\", \"uri\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import identifier\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for instant\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/codesystem.py": {
      "CodeSystem.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a CodeSystem resource.\n\nThis constructor initializes all valid properties of a CodeSystem resource, which describes a code system or its supplement. The properties include metadata about the code system, such as its name, status, publisher, and various attributes concerning its concepts. If a JSON dictionary is provided, it is used for initializing these properties. The `strict` parameter indicates whether to raise an error on validation failures.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the CodeSystem properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError.\n\nAttributes include:\n- caseSensitive (bool): Indicates if code comparison is case sensitive.\n- compositional (bool): States whether the code system defines a compositional grammar.\n- concept (list[CodeSystemConcept]): A list of concepts defined in the code system.\n- contact (list[ContactDetail]): Publisher contact details.\n- content (str): Indicates the nature of the content (e.g., example, complete).\n- copyright (str): Restrictions on use and publishing.\n- count (int): Total number of concepts in the code system.\n- date (FHIRDateTime): Date when the code system was last changed.\n- description (str): Natural language description of the code system.\n- experimental (bool): Indicates if the code system is for testing purposes only.\n- filter (list[CodeSystemFilter]): Filters applicable in a value set.\n- hierarchyMeaning (str): Describes the meaning of concept hierarchy.\n- identifier (list[Identifier]): Additional identifiers for the code system.\n- jurisdiction (list[CodeableConcept]): Intended jurisdiction for the code system.\n- name (str): Computer-friendly name for the code system.\n- property (list[CodeSystemProperty]): Additional properties associated with each concept.\n- publisher (str): Publisher's name (organization or individual).\n- purpose (str): Purpose of defining the code system.\n- status (str): Current status of the code system (draft, active, retired, unknown).\n- supplements (str): URL of a code system that this one supplements.\n- title (str): Human-friendly name for the code system.\n- url (str): Global unique URI for the code system.\n- useContext (list[UsageContext]): Contexts that the content is intended to support.\n- valueSet (str): Reference to the value set that contains the entire code system.\n- version (str): Business version of the code system.\n- versionNeeded (bool): Indicates if definitions are not stable.\n\nThe superclass `DomainResource` is also initialized to ensure that base functionality and properties are set up correctly.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.caseSensitive = None\n        ' If code comparison is case sensitive.\\n        Type `bool`. '\n        self.compositional = None\n        ' If code system defines a compositional grammar.\\n        Type `bool`. '\n        self.concept = None\n        ' Concepts in the code system.\\n        List of `CodeSystemConcept` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.content = None\n        ' not-present | example | fragment | complete | supplement.\\n        Type `str`. '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.count = None\n        ' Total concepts in the code system.\\n        Type `int`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the code system.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.filter = None\n        ' Filter that can be used in a value set.\\n        List of `CodeSystemFilter` items (represented as `dict` in JSON). '\n        self.hierarchyMeaning = None\n        ' grouped-by | is-a | part-of | classified-with.\\n        Type `str`. '\n        self.identifier = None\n        ' Additional identifier for the code system (business identifier).\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for code system (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this code system (computer friendly).\\n        Type `str`. '\n        self.property = None\n        ' Additional information supplied about each concept.\\n        List of `CodeSystemProperty` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this code system is defined.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.supplements = None\n        ' Canonical URL of Code System this adds designations and properties\\n        to.\\n        Type `str`. '\n        self.title = None\n        ' Name for this code system (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this code system, represented as a URI\\n        (globally unique) (Coding.system).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.valueSet = None\n        ' Canonical reference to the value set with entire code system.\\n        Type `str`. '\n        self.version = None\n        ' Business version of the code system (Coding.version).\\n        Type `str`. '\n        self.versionNeeded = None\n        ' If definitions are not stable.\\n        Type `bool`. '\n        super(CodeSystem, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a CodeSystem resource.\n\nThis constructor initializes all valid properties of a CodeSystem resource, which describes a code system or its supplement. The properties include metadata about the code system, such as its name, status, publisher, and various attributes concerning its concepts. If a JSON dictionary is provided, it is used for initializing these properties. The `strict` parameter indicates whether to raise an error on validation failures.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the CodeSystem properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError.\n\nAttributes include:\n- caseSensitive (bool): Indicates if code comparison is case sensitive.\n- compositional (bool): States whether the code system defines a compositional grammar.\n- concept (list[CodeSystemConcept]): A list of concepts defined in the code system.\n- contact (list[ContactDetail]): Publisher contact details.\n- content (str): Indicates the nature of the content (e.g., example, complete).\n- copyright (str): Restrictions on use and publishing.\n- count (int): Total number of concepts in the code system.\n- date (FHIRDateTime): Date when the code system was last changed.\n- description (str): Natural language description of the code system.\n- experimental (bool): Indicates if the code system is for testing purposes only.\n- filter (list[CodeSystemFilter]): Filters applicable in a value set.\n- hierarchyMeaning (str): Describes the meaning of concept hierarchy.\n- identifier (list[Identifier]): Additional identifiers for the code system.\n- jurisdiction (list[CodeableConcept]): Intended jurisdiction for the code system.\n- name (str): Computer-friendly name for the code system.\n- property (list[CodeSystemProperty]): Additional properties associated with each concept.\n- publisher (str): Publisher's name (organization or individual).\n- purpose (str): Purpose of defining the code system.\n- status (str): Current status of the code system (draft, active, retired, unknown).\n- supplements (str): URL of a code system that this one supplements.\n- title (str): Human-friendly name for the code system.\n- url (str): Global unique URI for the code system.\n- useContext (list[UsageContext]): Contexts that the content is intended to support.\n- valueSet (str): Reference to the value set that contains the entire code system.\n- version (str): Business version of the code system.\n- versionNeeded (bool): Indicates if definitions are not stable.\n\nThe superclass `DomainResource` is also initialized to ensure that base functionality and properties are set up correctly.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class CodeSystem(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance which represents FHIR-compliant date values.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. This argument can also be None. If provided, it must match the expected format defined by the regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date object based on the provided jsonval.\n- origval (Union[str, None]): Retains the original string input used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string or None.\n- ValueError: If jsonval does not match the expected date format as per the FHIR specification.\n\nConstants:\n- _REGEX: A compiled regex pattern used to validate the FHIR date format upon initialization. This regex is defined as a class-level constant and ensures the input string conforms to the specified date format.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance which represents FHIR-compliant date values.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. This argument can also be None. If provided, it must match the expected format defined by the regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date object based on the provided jsonval.\n- origval (Union[str, None]): Retains the original string input used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string or None.\n- ValueError: If jsonval does not match the expected date format as per the FHIR specification.\n\nConstants:\n- _REGEX: A compiled regex pattern used to validate the FHIR date format upon initialization. This regex is defined as a class-level constant and ensures the input string conforms to the specified date format.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets attributes on the FHIRDate instance, with special handling for the 'date' and '_FIELD' properties.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If the 'date' or '_FIELD' property is being set, the original JSON value (`origval`) is cleared (set to None) and both the specified property and the internal 'date' attribute are updated with the new value. This ensures synchronization between these fields.\n\nNotes:\n- This method overrides the default `__setattr__` to implement custom behavior for maintaining internal state. The `_FIELD` constant, defined within the class, is a string used to reference the 'date' attribute consistently, enabling specific attribute handling.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets attributes on the FHIRDate instance, with special handling for the 'date' and '_FIELD' properties.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If the 'date' or '_FIELD' property is being set, the original JSON value (`origval`) is cleared (set to None) and both the specified property and the internal 'date' attribute are updated with the new value. This ensures synchronization between these fields.\n\nNotes:\n- This method overrides the default `__setattr__` to implement custom behavior for maintaining internal state. The `_FIELD` constant, defined within the class, is a string used to reference the 'date' attribute consistently, enabling specific attribute handling.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to construct the FHIRDate instance. If the original JSON string (`origval`) is not `None`, it returns that value; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` attribute, which is formatted using the `isostring` property. The `isostring` property ensures that any partial date inputs are represented correctly, although it may not match the original input if partial dates are provided. This method interfaces with the `_REGEX` constant indirectly by ensuring the input's validity during initialization, but does not utilize it directly here. It is essential for maintaining compatibility with FHIR standards by allowing users to access the original input data.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to construct the FHIRDate instance. If the original JSON string (`origval`) is not `None`, it returns that value; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` attribute, which is formatted using the `isostring` property. The `isostring` property ensures that any partial date inputs are represented correctly, although it may not match the original input if partial dates are provided. This method interfaces with the `_REGEX` constant indirectly by ensuring the input's validity during initialization, but does not utilize it directly here. It is essential for maintaining compatibility with FHIR standards by allowing users to access the original input data.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance to a JSON-compatible dictionary by examining the\n    properties defined in `elementProperties()`. It ensures that required properties\n    are populated and of the correct type before creating the dictionary. If any\n    validation fails, such as when non-optional properties are missing or properties\n    have incorrect types, a `FHIRValidationError` is raised with details about the\n    encountered issues.\n\n    :raises FHIRValidationError: If properties do not meet validation criteria, \n        including incorrect types or missing required fields.\n    :returns: A validated dictionary representation of the instance suitable for\n        JSON serialization.\n\n    This method utilizes the `elementProperties()` method to retrieve names, JSON\n    names, types, and optionality of class attributes. It also utilizes a helper \n    method `_matches_type()` to validate that attribute values conform to their\n    specified types. The local variables `found` and `nonoptionals` track the \n    properties that are found during serialization, ensuring that all required \n    properties are evaluated.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance to a JSON-compatible dictionary by examining the\nproperties defined in `elementProperties()`. It ensures that required properties\nare populated and of the correct type before creating the dictionary. If any\nvalidation fails, such as when non-optional properties are missing or properties\nhave incorrect types, a `FHIRValidationError` is raised with details about the\nencountered issues.\n\n:raises FHIRValidationError: If properties do not meet validation criteria, \n    including incorrect types or missing required fields.\n:returns: A validated dictionary representation of the instance suitable for\n    JSON serialization.\n\nThis method utilizes the `elementProperties()` method to retrieve names, JSON\nnames, types, and optionality of class attributes. It also utilizes a helper \nmethod `_matches_type()` to validate that attribute values conform to their\nspecified types. The local variables `found` and `nonoptionals` track the \nproperties that are found during serialization, ensuring that all required \nproperties are evaluated.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirinstant.py": {
      "FHIRInstant.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a new instance of the FHIRInstant class, which represents a FHIR instant in Python. \n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing the FHIR instant. If provided, it is passed to the parent class FHIRDate for parsing. Otherwise, the datetime attribute is initialized as None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the Python datetime representation of the FHIR instant. It is initially set to None until a valid jsonval is provided and parsed.\n\nThis constructor interacts with the `super()` to initialize the base FHIRDate class, which handles the logic related to JSON parsing specific to FHIR date formats.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes a new instance of the FHIRInstant class, which represents a FHIR instant in Python. \n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing the FHIR instant. If provided, it is passed to the parent class FHIRDate for parsing. Otherwise, the datetime attribute is initialized as None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the Python datetime representation of the FHIR instant. It is initially set to None until a valid jsonval is provided and parsed.\n\nThis constructor interacts with the `super()` to initialize the base FHIRDate class, which handles the logic related to JSON parsing specific to FHIR date formats.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRInstant(FHIRDate):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value for initializing the instance. It also initializes the `datetime` attribute to None to be later set based on the provided `jsonval`. The constructor calls the parent class's initializer (FHIRDate) to process the input, which is essential for setting up the FHIR date context.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a FHIR datetime value, or None. This is passed to the parent class (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed datetime value. Initialized to None until the corresponding logic is applied based on `jsonval`.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value for initializing the instance. It also initializes the `datetime` attribute to None to be later set based on the provided `jsonval`. The constructor calls the parent class's initializer (FHIRDate) to process the input, which is essential for setting up the FHIR date context.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a FHIR datetime value, or None. This is passed to the parent class (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed datetime value. Initialized to None until the corresponding logic is applied based on `jsonval`.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource to a JSON-compatible dictionary format.\n\nThis method calls the parent class's `as_json` method to get the base JSON representation and then adds the `resourceType` attribute to the resulting dictionary. The `resourceType` is obtained from the class attribute `self.resource_type`, which is specific to the type of FHIR resource represented (in this case, 'FHIRAbstractResource').\n\n:return: A dictionary representing the instance in JSON format, including the added 'resourceType'.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource to a JSON-compatible dictionary format.\n\nThis method calls the parent class's `as_json` method to get the base JSON representation and then adds the `resourceType` attribute to the resulting dictionary. The `resourceType` is obtained from the class attribute `self.resource_type`, which is specific to the type of FHIR resource represented (in this case, 'FHIRAbstractResource').\n\n:return: A dictionary representing the instance in JSON format, including the added 'resourceType'.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource object, which includes properties for contained resources, extensions, and a textual summary.\n\nParameters:\n- jsondict (dict, optional): A dictionary that initializes the resource's properties. If provided, it populates attributes according to the FHIR specifications for DomainResources.\n- strict (bool, optional): If set to True (default), invalid values raise a FHIRValidationError. If False, the resource can be initialized with invalid variables without raising errors.\n\nAttributes:\n- contained: A list of inline Resource items, represented as dictionaries in JSON.\n- extension: A list of additional content defined by implementations, represented as Extension items.\n- modifierExtension: A list of Extensions that must not be ignored, represented as Extension items.\n- text: A Narrative object containing a human-readable summary of the resource.\n\nThis class relies on the 'resource' module, which contains the base Resource class, and imports 'extension' and 'narrative' modules for defining the extensions and narrative attributes, respectively.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource object, which includes properties for contained resources, extensions, and a textual summary.\n\nParameters:\n- jsondict (dict, optional): A dictionary that initializes the resource's properties. If provided, it populates attributes according to the FHIR specifications for DomainResources.\n- strict (bool, optional): If set to True (default), invalid values raise a FHIRValidationError. If False, the resource can be initialized with invalid variables without raising errors.\n\nAttributes:\n- contained: A list of inline Resource items, represented as dictionaries in JSON.\n- extension: A list of additional content defined by implementations, represented as Extension items.\n- modifierExtension: A list of Extensions that must not be ignored, represented as Extension items.\n- text: A Narrative object containing a human-readable summary of the resource.\n\nThis class relies on the 'resource' module, which contains the base Resource class, and imports 'extension' and 'narrative' modules for defining the extensions and narrative attributes, respectively.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/codesystem.py:CodeSystem:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/codesystem.py": {
        "CodeSystem.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(CodeSystem, self).elementProperties()\n        js.extend([('caseSensitive', 'caseSensitive', bool, False, None, False), ('compositional', 'compositional', bool, False, None, False), ('concept', 'concept', CodeSystemConcept, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('content', 'content', str, False, None, True), ('copyright', 'copyright', str, False, None, False), ('count', 'count', int, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('filter', 'filter', CodeSystemFilter, True, None, False), ('hierarchyMeaning', 'hierarchyMeaning', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('name', 'name', str, False, None, False), ('property', 'property', CodeSystemProperty, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('supplements', 'supplements', str, False, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('valueSet', 'valueSet', str, False, None, False), ('version', 'version', str, False, None, False), ('versionNeeded', 'versionNeeded', bool, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class CodeSystem(domainresource.DomainResource):"
        }
      }
    },
    "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirinstant.py": {
        "FHIRInstant._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRInstant(FHIRDate):"
        }
      },
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
  },
  "call_tree": {
    "tests/models/codesystem_test.py:CodeSystemTests:testCodeSystem1": {
      "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
        "fhirclient/models/codesystem.py:CodeSystem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/codesystem_test.py:CodeSystemTests:implCodeSystem1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/codesystem_test.py:CodeSystemTests:testCodeSystem2": {
      "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
        "fhirclient/models/codesystem.py:CodeSystem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/codesystem_test.py:CodeSystemTests:implCodeSystem2": {
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/codesystem_test.py:CodeSystemTests:testCodeSystem3": {
      "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
        "fhirclient/models/codesystem.py:CodeSystem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/codesystem_test.py:CodeSystemTests:implCodeSystem3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/codesystem_test.py:CodeSystemTests:testCodeSystem4": {
      "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
        "fhirclient/models/codesystem.py:CodeSystem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/codesystem_test.py:CodeSystemTests:implCodeSystem4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/codesystem_test.py:CodeSystemTests:testCodeSystem5": {
      "tests/models/codesystem_test.py:CodeSystemTests:instantiate_from": {
        "fhirclient/models/codesystem.py:CodeSystem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/codesystem_test.py:CodeSystemTests:implCodeSystem5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/codesystem.py:CodeSystem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/codesystem.py:CodeSystem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-codesystem_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 codesystem.py\n        \u2502   \u2514\u2500\u2500 CodeSystem.__init__\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 fhirinstant.py\n            \u2514\u2500\u2500 FHIRInstant.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and interaction with FHIR `CodeSystem` resources, ensuring conformance to the FHIR 4.0.1 specification. It provides functionality to instantiate, serialize, and validate `CodeSystem` data structures while verifying critical attributes such as metadata, concepts, and use context. By enabling rigorous validation and consistency checks, the module streamlines the integration and testing of standardized terminologies within healthcare systems. It addresses the need for developers and implementers to efficiently manage and ensure the integrity of FHIR-based code systems, reducing errors and bolstering interoperability in health IT applications.\n\n## FILE 1: fhirclient/models/codesystem.py\n\n- CLASS METHOD: CodeSystem.__init__\n  - CLASS SIGNATURE: class CodeSystem(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a CodeSystem resource.\n\nThis constructor initializes all valid properties of a CodeSystem resource, which describes a code system or its supplement. The properties include metadata about the code system, such as its name, status, publisher, and various attributes concerning its concepts. If a JSON dictionary is provided, it is used for initializing these properties. The `strict` parameter indicates whether to raise an error on validation failures.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the CodeSystem properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError.\n\nAttributes include:\n- caseSensitive (bool): Indicates if code comparison is case sensitive.\n- compositional (bool): States whether the code system defines a compositional grammar.\n- concept (list[CodeSystemConcept]): A list of concepts defined in the code system.\n- contact (list[ContactDetail]): Publisher contact details.\n- content (str): Indicates the nature of the content (e.g., example, complete).\n- copyright (str): Restrictions on use and publishing.\n- count (int): Total number of concepts in the code system.\n- date (FHIRDateTime): Date when the code system was last changed.\n- description (str): Natural language description of the code system.\n- experimental (bool): Indicates if the code system is for testing purposes only.\n- filter (list[CodeSystemFilter]): Filters applicable in a value set.\n- hierarchyMeaning (str): Describes the meaning of concept hierarchy.\n- identifier (list[Identifier]): Additional identifiers for the code system.\n- jurisdiction (list[CodeableConcept]): Intended jurisdiction for the code system.\n- name (str): Computer-friendly name for the code system.\n- property (list[CodeSystemProperty]): Additional properties associated with each concept.\n- publisher (str): Publisher's name (organization or individual).\n- purpose (str): Purpose of defining the code system.\n- status (str): Current status of the code system (draft, active, retired, unknown).\n- supplements (str): URL of a code system that this one supplements.\n- title (str): Human-friendly name for the code system.\n- url (str): Global unique URI for the code system.\n- useContext (list[UsageContext]): Contexts that the content is intended to support.\n- valueSet (str): Reference to the value set that contains the entire code system.\n- version (str): Business version of the code system.\n- versionNeeded (bool): Indicates if definitions are not stable.\n\nThe superclass `DomainResource` is also initialized to ensure that base functionality and properties are set up correctly.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance which represents FHIR-compliant date values.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. This argument can also be None. If provided, it must match the expected format defined by the regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date object based on the provided jsonval.\n- origval (Union[str, None]): Retains the original string input used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string or None.\n- ValueError: If jsonval does not match the expected date format as per the FHIR specification.\n\nConstants:\n- _REGEX: A compiled regex pattern used to validate the FHIR date format upon initialization. This regex is defined as a class-level constant and ensures the input string conforms to the specified date format.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to construct the FHIRDate instance. If the original JSON string (`origval`) is not `None`, it returns that value; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` attribute, which is formatted using the `isostring` property. The `isostring` property ensures that any partial date inputs are represented correctly, although it may not match the original input if partial dates are provided. This method interfaces with the `_REGEX` constant indirectly by ensuring the input's validity during initialization, but does not utilize it directly here. It is essential for maintaining compatibility with FHIR standards by allowing users to access the original input data.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets attributes on the FHIRDate instance, with special handling for the 'date' and '_FIELD' properties.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If the 'date' or '_FIELD' property is being set, the original JSON value (`origval`) is cleared (set to None) and both the specified property and the internal 'date' attribute are updated with the new value. This ensures synchronization between these fields.\n\nNotes:\n- This method overrides the default `__setattr__` to implement custom behavior for maintaining internal state. The `_FIELD` constant, defined within the class, is a string used to reference the 'date' attribute consistently, enabling specific attribute handling.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance to a JSON-compatible dictionary by examining the\nproperties defined in `elementProperties()`. It ensures that required properties\nare populated and of the correct type before creating the dictionary. If any\nvalidation fails, such as when non-optional properties are missing or properties\nhave incorrect types, a `FHIRValidationError` is raised with details about the\nencountered issues.\n\n:raises FHIRValidationError: If properties do not meet validation criteria, \n    including incorrect types or missing required fields.\n:returns: A validated dictionary representation of the instance suitable for\n    JSON serialization.\n\nThis method utilizes the `elementProperties()` method to retrieve names, JSON\nnames, types, and optionality of class attributes. It also utilizes a helper \nmethod `_matches_type()` to validate that attribute values conform to their\nspecified types. The local variables `found` and `nonoptionals` track the \nproperties that are found during serialization, ensuring that all required \nproperties are evaluated.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirinstant.py\n\n- CLASS METHOD: FHIRInstant.__init__\n  - CLASS SIGNATURE: class FHIRInstant(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the FHIRInstant class, which represents a FHIR instant in Python. \n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing the FHIR instant. If provided, it is passed to the parent class FHIRDate for parsing. Otherwise, the datetime attribute is initialized as None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the Python datetime representation of the FHIR instant. It is initially set to None until a valid jsonval is provided and parsed.\n\nThis constructor interacts with the `super()` to initialize the base FHIRDate class, which handles the logic related to JSON parsing specific to FHIR date formats.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value for initializing the instance. It also initializes the `datetime` attribute to None to be later set based on the provided `jsonval`. The constructor calls the parent class's initializer (FHIRDate) to process the input, which is essential for setting up the FHIR date context.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a FHIR datetime value, or None. This is passed to the parent class (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed datetime value. Initialized to None until the corresponding logic is applied based on `jsonval`.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource to a JSON-compatible dictionary format.\n\nThis method calls the parent class's `as_json` method to get the base JSON representation and then adds the `resourceType` attribute to the resulting dictionary. The `resourceType` is obtained from the class attribute `self.resource_type`, which is specific to the type of FHIR resource represented (in this case, 'FHIRAbstractResource').\n\n:return: A dictionary representing the instance in JSON format, including the added 'resourceType'.\n\"\"\"\n```\n\n## FILE 7: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource object, which includes properties for contained resources, extensions, and a textual summary.\n\nParameters:\n- jsondict (dict, optional): A dictionary that initializes the resource's properties. If provided, it populates attributes according to the FHIR specifications for DomainResources.\n- strict (bool, optional): If set to True (default), invalid values raise a FHIRValidationError. If False, the resource can be initialized with invalid variables without raising errors.\n\nAttributes:\n- contained: A list of inline Resource items, represented as dictionaries in JSON.\n- extension: A list of additional content defined by implementations, represented as Extension items.\n- modifierExtension: A list of Extensions that must not be ignored, represented as Extension items.\n- text: A Narrative object containing a human-readable summary of the resource.\n\nThis class relies on the 'resource' module, which contains the base Resource class, and imports 'extension' and 'narrative' modules for defining the extensions and narrative attributes, respectively.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/codesystem.py": "from . import domainresource\n\nclass CodeSystem(domainresource.DomainResource):\n    \"\"\" Declares the existence of and describes a code system or code system\n    supplement.\n    \n    The CodeSystem resource is used to declare the existence of and describe a\n    code system or code system supplement and its key properties, and\n    optionally define a part or all of its content.\n    \"\"\"\n    resource_type = 'CodeSystem'\n\n    def elementProperties(self):\n        js = super(CodeSystem, self).elementProperties()\n        js.extend([('caseSensitive', 'caseSensitive', bool, False, None, False), ('compositional', 'compositional', bool, False, None, False), ('concept', 'concept', CodeSystemConcept, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('content', 'content', str, False, None, True), ('copyright', 'copyright', str, False, None, False), ('count', 'count', int, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('filter', 'filter', CodeSystemFilter, True, None, False), ('hierarchyMeaning', 'hierarchyMeaning', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('name', 'name', str, False, None, False), ('property', 'property', CodeSystemProperty, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('supplements', 'supplements', str, False, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('valueSet', 'valueSet', str, False, None, False), ('version', 'version', str, False, None, False), ('versionNeeded', 'versionNeeded', bool, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass CodeSystemConcept(backboneelement.BackboneElement):\n    \"\"\" Concepts in the code system.\n    \n    Concepts that are in the code system. The concept definitions are\n    inherently hierarchical, but the definitions must be consulted to determine\n    what the meanings of the hierarchical relationships are.\n    \"\"\"\n    resource_type = 'CodeSystemConcept'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Code that identifies concept.\\n        Type `str`. '\n        self.concept = None\n        ' Child Concepts (is-a/contains/categorizes).\\n        List of `CodeSystemConcept` items (represented as `dict` in JSON). '\n        self.definition = None\n        ' Formal definition.\\n        Type `str`. '\n        self.designation = None\n        ' Additional representations for the concept.\\n        List of `CodeSystemConceptDesignation` items (represented as `dict` in JSON). '\n        self.display = None\n        ' Text to display to the user.\\n        Type `str`. '\n        self.property = None\n        ' Property value for the concept.\\n        List of `CodeSystemConceptProperty` items (represented as `dict` in JSON). '\n        super(CodeSystemConcept, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CodeSystemConcept, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('concept', 'concept', CodeSystemConcept, True, None, False), ('definition', 'definition', str, False, None, False), ('designation', 'designation', CodeSystemConceptDesignation, True, None, False), ('display', 'display', str, False, None, False), ('property', 'property', CodeSystemConceptProperty, True, None, False)])\n        return js\n\nclass CodeSystemConceptDesignation(backboneelement.BackboneElement):\n    \"\"\" Additional representations for the concept.\n    \n    Additional representations for the concept - other languages, aliases,\n    specialized purposes, used for particular purposes, etc.\n    \"\"\"\n    resource_type = 'CodeSystemConceptDesignation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.language = None\n        ' Human language of the designation.\\n        Type `str`. '\n        self.use = None\n        ' Details how this designation would be used.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.value = None\n        ' The text value for this designation.\\n        Type `str`. '\n        super(CodeSystemConceptDesignation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CodeSystemConceptDesignation, self).elementProperties()\n        js.extend([('language', 'language', str, False, None, False), ('use', 'use', coding.Coding, False, None, False), ('value', 'value', str, False, None, True)])\n        return js\n\nclass CodeSystemConceptProperty(backboneelement.BackboneElement):\n    \"\"\" Property value for the concept.\n    \n    A property value for this concept.\n    \"\"\"\n    resource_type = 'CodeSystemConceptProperty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Reference to CodeSystem.property.code.\\n        Type `str`. '\n        self.valueBoolean = None\n        ' Value of the property for this concept.\\n        Type `bool`. '\n        self.valueCode = None\n        ' Value of the property for this concept.\\n        Type `str`. '\n        self.valueCoding = None\n        ' Value of the property for this concept.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueDateTime = None\n        ' Value of the property for this concept.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' Value of the property for this concept.\\n        Type `float`. '\n        self.valueInteger = None\n        ' Value of the property for this concept.\\n        Type `int`. '\n        self.valueString = None\n        ' Value of the property for this concept.\\n        Type `str`. '\n        super(CodeSystemConceptProperty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CodeSystemConceptProperty, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCode', 'valueCode', str, False, 'value', True), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True)])\n        return js\n\nclass CodeSystemFilter(backboneelement.BackboneElement):\n    \"\"\" Filter that can be used in a value set.\n    \n    A filter that can be used in a value set compose statement when selecting\n    concepts using a filter.\n    \"\"\"\n    resource_type = 'CodeSystemFilter'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Code that identifies the filter.\\n        Type `str`. '\n        self.description = None\n        ' How or why the filter is used.\\n        Type `str`. '\n        self.operator = None\n        ' = | is-a | descendent-of | is-not-a | regex | in | not-in |\\n        generalizes | exists.\\n        List of `str` items. '\n        self.value = None\n        ' What to use for the value.\\n        Type `str`. '\n        super(CodeSystemFilter, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CodeSystemFilter, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('description', 'description', str, False, None, False), ('operator', 'operator', str, True, None, True), ('value', 'value', str, False, None, True)])\n        return js\n\nclass CodeSystemProperty(backboneelement.BackboneElement):\n    \"\"\" Additional information supplied about each concept.\n    \n    A property defines an additional slot through which additional information\n    can be provided about a concept.\n    \"\"\"\n    resource_type = 'CodeSystemProperty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Identifies the property on the concepts, and when referred to in\\n        operations.\\n        Type `str`. '\n        self.description = None\n        ' Why the property is defined, and/or what it conveys.\\n        Type `str`. '\n        self.type = None\n        ' code | Coding | string | integer | boolean | dateTime | decimal.\\n        Type `str`. '\n        self.uri = None\n        ' Formal identifier for the property.\\n        Type `str`. '\n        super(CodeSystemProperty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CodeSystemProperty, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('description', 'description', str, False, None, False), ('type', 'type', str, False, None, True), ('uri', 'uri', str, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import identifier\nfrom . import usagecontext",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}