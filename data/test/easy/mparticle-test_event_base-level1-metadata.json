{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_event_base",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_event_base.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.event_base import EventBase\n\n\nclass TestEventBase(unittest.TestCase):\n    \"\"\" EventBase unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testEventBase(self):\n        \"\"\"\n        Test EventBase\n        \"\"\"\n        model = mparticle.models.event_base.EventBase()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/event_base.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass EventBase(object):\n\n    def __init__(self, data=None, event_type=None):\n        \"\"\"\n        EventBase - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'data': 'EventData',\n            'event_type': 'str'\n        }\n\n        self.attribute_map = {\n            'data': 'data',\n            'event_type': 'event_type'\n        }\n\n        self._data = data\n        self._event_type = event_type\n\n    @property\n    def data(self):\n        \"\"\"\n        Gets the data of this EventBase.\n\n\n        :return: The data of this EventBase.\n        :rtype: EventData\n        \"\"\"\n        return self._data\n\n    @data.setter\n    def data(self, data):\n        \"\"\"\n        Sets the data of this EventBase.\n\n\n        :param data: The data of this EventBase.\n        :type: EventData\n        \"\"\"\n\n        self._data = data\n\n    @property\n    def event_type(self):\n        \"\"\"\n        Gets the event_type of this EventBase.\n\n\n        :return: The event_type of this EventBase.\n        :rtype: str\n        \"\"\"\n        return self._event_type\n\n    @event_type.setter\n    def event_type(self, event_type):\n        \"\"\"\n        Sets the event_type of this EventBase.\n\n\n        :param event_type: The event_type of this EventBase.\n        :type: str\n        \"\"\"\n        allowed_values = [\"unknown\", \"session_start\", \"session_end\", \"screen_view\", \"custom_event\", \"crash_report\", \"opt_out\", \"first_run\", \"pre_attribution\", \"push_registration\", \"application_state_transition\", \"push_message\", \"network_performance\", \"breadcrumb\", \"profile\", \"push_reaction\", \"commerce_event\", \"user_attribute_change\"]\n        if event_type not in allowed_values:\n            raise ValueError(\n                \"Invalid value for `event_type` ({0}), must be one of {1}\"\n                .format(event_type, allowed_values)\n            )\n\n        self._event_type = event_type\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/event_base.py": {
      "EventBase.__init__": {
        "code": "    def __init__(self, data=None, event_type=None):\n        \"\"\"Initializes an instance of the EventBase class, which represents a model defined in Swagger for handling events in the mParticle Event API.\n\n    Parameters:\n    ----------\n    data : EventData, optional\n        The data associated with the event, encapsulated as an EventData object. Defaults to None.\n    \n    event_type : str, optional\n        The type of the event, specified as a string. Allowed values include a variety of event types such as \"session_start\", \"screen_view\", and \"custom_event\". Defaults to None. Invalid types will raise a ValueError.\n\n    Attributes:\n    ----------\n    swagger_types : dict\n        Maps attribute names to their corresponding types ('data' as 'EventData' and 'event_type' as 'str') to define expected types for serialization.\n    \n    attribute_map : dict\n        Maps attribute names to their JSON keys as defined in the Swagger model for proper serialization and deserialization.\n\n    This constructor will set the instance's _data and _event_type attributes, which can be accessed and modified through their respective properties.\"\"\"\n        '\\n        EventBase - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'data': 'EventData', 'event_type': 'str'}\n        self.attribute_map = {'data': 'data', 'event_type': 'event_type'}\n        self._data = data\n        self._event_type = event_type",
        "docstring": "Initializes an instance of the EventBase class, which represents a model defined in Swagger for handling events in the mParticle Event API.\n\nParameters:\n----------\ndata : EventData, optional\n    The data associated with the event, encapsulated as an EventData object. Defaults to None.\n\nevent_type : str, optional\n    The type of the event, specified as a string. Allowed values include a variety of event types such as \"session_start\", \"screen_view\", and \"custom_event\". Defaults to None. Invalid types will raise a ValueError.\n\nAttributes:\n----------\nswagger_types : dict\n    Maps attribute names to their corresponding types ('data' as 'EventData' and 'event_type' as 'str') to define expected types for serialization.\n\nattribute_map : dict\n    Maps attribute names to their JSON keys as defined in the Swagger model for proper serialization and deserialization.\n\nThis constructor will set the instance's _data and _event_type attributes, which can be accessed and modified through their respective properties.",
        "signature": "def __init__(self, data=None, event_type=None):",
        "type": "Method",
        "class_signature": "class EventBase(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_event_base\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 event_base.py\n            \u2514\u2500\u2500 EventBase.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module integrates with the mParticle Event API to enable efficient interaction with event-based data in the mParticle ecosystem. It provides a foundational interface for creating, handling, and managing events through the `EventBase` model, facilitating seamless ingestion and processing of user or system events. This module simplifies the process of building event-driven workflows by offering a standardized structure for event representation and validation. It addresses the need for developers to programmatically interact with event data in a consistent and reliable way, reducing the complexity of managing event lifecycles across different systems.\n\n## FILE 1: mparticle/models/event_base.py\n\n- CLASS METHOD: EventBase.__init__\n  - CLASS SIGNATURE: class EventBase(object):\n  - SIGNATURE: def __init__(self, data=None, event_type=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the EventBase class, which represents a model defined in Swagger for handling events in the mParticle Event API.\n\nParameters:\n----------\ndata : EventData, optional\n    The data associated with the event, encapsulated as an EventData object. Defaults to None.\n\nevent_type : str, optional\n    The type of the event, specified as a string. Allowed values include a variety of event types such as \"session_start\", \"screen_view\", and \"custom_event\". Defaults to None. Invalid types will raise a ValueError.\n\nAttributes:\n----------\nswagger_types : dict\n    Maps attribute names to their corresponding types ('data' as 'EventData' and 'event_type' as 'str') to define expected types for serialization.\n\nattribute_map : dict\n    Maps attribute names to their JSON keys as defined in the Swagger model for proper serialization and deserialization.\n\nThis constructor will set the instance's _data and _event_type attributes, which can be accessed and modified through their respective properties.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/event_base.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass EventBase(object):\n\n    @property\n    def data(self):\n        \"\"\"\n        Gets the data of this EventBase.\n\n\n        :return: The data of this EventBase.\n        :rtype: EventData\n        \"\"\"\n        return self._data\n\n    @data.setter\n    def data(self, data):\n        \"\"\"\n        Sets the data of this EventBase.\n\n\n        :param data: The data of this EventBase.\n        :type: EventData\n        \"\"\"\n        self._data = data\n\n    @property\n    def event_type(self):\n        \"\"\"\n        Gets the event_type of this EventBase.\n\n\n        :return: The event_type of this EventBase.\n        :rtype: str\n        \"\"\"\n        return self._event_type\n\n    @event_type.setter\n    def event_type(self, event_type):\n        \"\"\"\n        Sets the event_type of this EventBase.\n\n\n        :param event_type: The event_type of this EventBase.\n        :type: str\n        \"\"\"\n        allowed_values = ['unknown', 'session_start', 'session_end', 'screen_view', 'custom_event', 'crash_report', 'opt_out', 'first_run', 'pre_attribution', 'push_registration', 'application_state_transition', 'push_message', 'network_performance', 'breadcrumb', 'profile', 'push_reaction', 'commerce_event', 'user_attribute_change']\n        if event_type not in allowed_values:\n            raise ValueError('Invalid value for `event_type` ({0}), must be one of {1}'.format(event_type, allowed_values))\n        self._event_type = event_type\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_event_base.py:TestEventBase:testEventBase": {
      "mparticle/models/event_base.py:EventBase:__init__": {}
    }
  }
}