{
  "dir_path": "/app/yamllint",
  "package_name": "yamllint",
  "sample_name": "yamllint-test_indentation",
  "src_dir": "yamllint/",
  "test_dir": "tests/",
  "test_file": "modified_testcases/rules/test_indentation.py",
  "test_code": "# Copyright (C) 2016 Adrien Verg\u00e9\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom tests.common import RuleTestCase\n\nfrom yamllint.parser import Comment, token_or_comment_generator\nfrom yamllint.rules.indentation import check\n\n\nclass IndentationStackTestCase(RuleTestCase):\n    # This test suite checks that the \"indentation stack\" built by the\n    # indentation rule is valid. It is important, since everything else in the\n    # rule relies on this stack.\n\n    maxDiff = None\n\n    def format_stack(self, stack):\n        \"\"\"Transform the stack at a given moment into a printable string like:\n\n        B_MAP:0 KEY:0 VAL:5\n        \"\"\"\n        return ' '.join(map(str, stack[1:]))\n\n    def full_stack(self, source):\n        conf = {'spaces': 2, 'indent-sequences': True,\n                'check-multi-line-strings': False}\n        context = {}\n        output = ''\n        for elem in [t for t in token_or_comment_generator(source)\n                     if not isinstance(t, Comment)]:\n            list(check(conf, elem.curr, elem.prev, elem.next, elem.nextnext,\n                       context))\n\n            token_type = (elem.curr.__class__.__name__\n                          .replace('Token', '')\n                          .replace('Block', 'B').replace('Flow', 'F')\n                          .replace('Sequence', 'Seq')\n                          .replace('Mapping', 'Map'))\n            if token_type in ('StreamStart', 'StreamEnd'):\n                continue\n            stack = self.format_stack(context['stack'])\n            output += f'{token_type:>9} {stack}\\n'\n        return output\n\n    def test_simple_mapping(self):\n        self.assertMultiLineEqual(\n            self.full_stack('key: val\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('     key: val\\n'),\n            'BMapStart B_MAP:5\\n'\n            '      Key B_MAP:5 KEY:5\\n'\n            '   Scalar B_MAP:5 KEY:5\\n'\n            '    Value B_MAP:5 KEY:5 VAL:10\\n'\n            '   Scalar B_MAP:5\\n'\n            '     BEnd \\n')\n\n    def test_simple_sequence(self):\n        self.assertMultiLineEqual(\n            self.full_stack('- 1\\n'\n                            '- 2\\n'\n                            '- 3\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('key:\\n'\n                            '  - 1\\n'\n                            '  - 2\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            'BSeqStart B_MAP:0 KEY:0 VAL:2 B_SEQ:2\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:2\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:2\\n'\n            '     BEnd B_MAP:0\\n'\n            '     BEnd \\n')\n\n    def test_non_indented_sequences(self):\n        # There seems to be a bug in pyyaml: depending on the indentation, a\n        # sequence does not produce the same tokens. More precisely, the\n        # following YAML:\n        #     usr:\n        #       - lib\n        # produces a BlockSequenceStartToken and a BlockEndToken around the\n        # \"lib\" sequence, whereas the following:\n        #     usr:\n        #     - lib\n        # does not (both two tokens are omitted).\n        # So, yamllint must create fake 'B_SEQ'. This test makes sure it does.\n\n        self.assertMultiLineEqual(\n            self.full_stack('usr:\\n'\n                            '  - lib\\n'\n                            'var: cache\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            'BSeqStart B_MAP:0 KEY:0 VAL:2 B_SEQ:2\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:2\\n'\n            '     BEnd B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('usr:\\n'\n                            '- lib\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_MAP:0\\n'\n            # missing BEnd here\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('usr:\\n'\n                            '- lib\\n'\n                            'var: cache\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_MAP:0\\n'\n            # missing BEnd here\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('usr:\\n'\n                            '- []\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            'FSeqStart B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 F_SEQ:3\\n'\n            '  FSeqEnd B_MAP:0\\n'\n            # missing BEnd here\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('usr:\\n'\n                            '- k:\\n'\n                            '    v\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            'BMapStart B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_MAP:2\\n'\n            '      Key B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2 VAL:4\\n'  # noqa: E501\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_MAP:2\\n'\n            '     BEnd B_MAP:0\\n'\n            # missing BEnd here\n            '     BEnd \\n')\n\n    def test_flows(self):\n        self.assertMultiLineEqual(\n            self.full_stack('usr: [\\n'\n                            '  {k:\\n'\n                            '    v}\\n'\n                            '  ]\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            'FSeqStart B_MAP:0 KEY:0 VAL:5 F_SEQ:2\\n'\n            'FMapStart B_MAP:0 KEY:0 VAL:5 F_SEQ:2 F_MAP:3\\n'\n            '      Key B_MAP:0 KEY:0 VAL:5 F_SEQ:2 F_MAP:3 KEY:3\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:5 F_SEQ:2 F_MAP:3 KEY:3\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5 F_SEQ:2 F_MAP:3 KEY:3 VAL:5\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:5 F_SEQ:2 F_MAP:3\\n'\n            '  FMapEnd B_MAP:0 KEY:0 VAL:5 F_SEQ:2\\n'\n            '  FSeqEnd B_MAP:0\\n'\n            '     BEnd \\n')\n\n    def test_anchors(self):\n        self.assertMultiLineEqual(\n            self.full_stack('key: &anchor value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            '   Anchor B_MAP:0 KEY:0 VAL:5\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('key: &anchor\\n'\n                            '  value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '   Anchor B_MAP:0 KEY:0 VAL:2\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('- &anchor value\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Anchor B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('- &anchor\\n'\n                            '  value\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Anchor B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('- &anchor\\n'\n                            '  - 1\\n'\n                            '  - 2\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '   Anchor B_SEQ:0 B_ENT:2\\n'\n            'BSeqStart B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '   BEntry B_SEQ:0 B_ENT:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '   BEntry B_SEQ:0 B_ENT:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '     BEnd B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('&anchor key:\\n'\n                            '  value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Anchor B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('pre:\\n'\n                            '  &anchor1 0\\n'\n                            '&anchor2 key:\\n'\n                            '  value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '   Anchor B_MAP:0 KEY:0 VAL:2\\n'\n            '   Scalar B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Anchor B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('sequence: &anchor\\n'\n                            '- entry\\n'\n                            '- &anchor\\n'\n                            '  - nested\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '   Anchor B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '   Anchor B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            'BSeqStart B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '     BEnd B_MAP:0\\n'\n            # missing BEnd here\n            '     BEnd \\n')\n\n    def test_tags(self):\n        self.assertMultiLineEqual(\n            self.full_stack('key: !!tag value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:5\\n'\n            '      Tag B_MAP:0 KEY:0 VAL:5\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('- !!map # Block collection\\n'\n                            '  foo : bar\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '      Tag B_SEQ:0 B_ENT:2\\n'\n            'BMapStart B_SEQ:0 B_ENT:2 B_MAP:2\\n'\n            '      Key B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2\\n'\n            '   Scalar B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2\\n'\n            '    Value B_SEQ:0 B_ENT:2 B_MAP:2 KEY:2 VAL:8\\n'\n            '   Scalar B_SEQ:0 B_ENT:2 B_MAP:2\\n'\n            '     BEnd B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('- !!seq\\n'\n                            '  - nested item\\n'),\n            'BSeqStart B_SEQ:0\\n'\n            '   BEntry B_SEQ:0 B_ENT:2\\n'\n            '      Tag B_SEQ:0 B_ENT:2\\n'\n            'BSeqStart B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '   BEntry B_SEQ:0 B_ENT:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '     BEnd B_SEQ:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('sequence: !!seq\\n'\n                            '- entry\\n'\n                            '- !!seq\\n'\n                            '  - nested\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            '   Scalar B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:2\\n'\n            '      Tag B_MAP:0 KEY:0 VAL:2\\n'\n            # missing BSeqStart here\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            '      Tag B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2\\n'\n            'BSeqStart B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '   BEntry B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2 B_ENT:4\\n'\n            '   Scalar B_MAP:0 KEY:0 VAL:2 B_SEQ:0 B_ENT:2 B_SEQ:2\\n'\n            '     BEnd B_MAP:0\\n'\n            # missing BEnd here\n            '     BEnd \\n')\n\n    def test_flows_imbrication(self):\n        self.assertMultiLineEqual(\n            self.full_stack('[[val]]\\n'),\n            'FSeqStart F_SEQ:1\\n'\n            'FSeqStart F_SEQ:1 F_SEQ:2\\n'\n            '   Scalar F_SEQ:1 F_SEQ:2\\n'\n            '  FSeqEnd F_SEQ:1\\n'\n            '  FSeqEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('[[val], [val2]]\\n'),\n            'FSeqStart F_SEQ:1\\n'\n            'FSeqStart F_SEQ:1 F_SEQ:2\\n'\n            '   Scalar F_SEQ:1 F_SEQ:2\\n'\n            '  FSeqEnd F_SEQ:1\\n'\n            '   FEntry F_SEQ:1\\n'\n            'FSeqStart F_SEQ:1 F_SEQ:9\\n'\n            '   Scalar F_SEQ:1 F_SEQ:9\\n'\n            '  FSeqEnd F_SEQ:1\\n'\n            '  FSeqEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('{{key}}\\n'),\n            'FMapStart F_MAP:1\\n'\n            'FMapStart F_MAP:1 F_MAP:2\\n'\n            '   Scalar F_MAP:1 F_MAP:2\\n'\n            '  FMapEnd F_MAP:1\\n'\n            '  FMapEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('[key]: value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            'FSeqStart B_MAP:0 KEY:0 F_SEQ:1\\n'\n            '   Scalar B_MAP:0 KEY:0 F_SEQ:1\\n'\n            '  FSeqEnd B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:7\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('[[key]]: value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            'FSeqStart B_MAP:0 KEY:0 F_SEQ:1\\n'\n            'FSeqStart B_MAP:0 KEY:0 F_SEQ:1 F_SEQ:2\\n'\n            '   Scalar B_MAP:0 KEY:0 F_SEQ:1 F_SEQ:2\\n'\n            '  FSeqEnd B_MAP:0 KEY:0 F_SEQ:1\\n'\n            '  FSeqEnd B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:9\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('{key}: value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            'FMapStart B_MAP:0 KEY:0 F_MAP:1\\n'\n            '   Scalar B_MAP:0 KEY:0 F_MAP:1\\n'\n            '  FMapEnd B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:7\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('{key: value}: value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            'FMapStart B_MAP:0 KEY:0 F_MAP:1\\n'\n            '      Key B_MAP:0 KEY:0 F_MAP:1 KEY:1\\n'\n            '   Scalar B_MAP:0 KEY:0 F_MAP:1 KEY:1\\n'\n            '    Value B_MAP:0 KEY:0 F_MAP:1 KEY:1 VAL:6\\n'\n            '   Scalar B_MAP:0 KEY:0 F_MAP:1\\n'\n            '  FMapEnd B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:14\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('{{key}}: value\\n'),\n            'BMapStart B_MAP:0\\n'\n            '      Key B_MAP:0 KEY:0\\n'\n            'FMapStart B_MAP:0 KEY:0 F_MAP:1\\n'\n            'FMapStart B_MAP:0 KEY:0 F_MAP:1 F_MAP:2\\n'\n            '   Scalar B_MAP:0 KEY:0 F_MAP:1 F_MAP:2\\n'\n            '  FMapEnd B_MAP:0 KEY:0 F_MAP:1\\n'\n            '  FMapEnd B_MAP:0 KEY:0\\n'\n            '    Value B_MAP:0 KEY:0 VAL:9\\n'\n            '   Scalar B_MAP:0\\n'\n            '     BEnd \\n')\n        self.assertMultiLineEqual(\n            self.full_stack('{{key}: val, {key2}: {val2}}\\n'),\n            'FMapStart F_MAP:1\\n'\n            '      Key F_MAP:1 KEY:1\\n'\n            'FMapStart F_MAP:1 KEY:1 F_MAP:2\\n'\n            '   Scalar F_MAP:1 KEY:1 F_MAP:2\\n'\n            '  FMapEnd F_MAP:1 KEY:1\\n'\n            '    Value F_MAP:1 KEY:1 VAL:8\\n'\n            '   Scalar F_MAP:1\\n'\n            '   FEntry F_MAP:1\\n'\n            '      Key F_MAP:1 KEY:1\\n'\n            'FMapStart F_MAP:1 KEY:1 F_MAP:14\\n'\n            '   Scalar F_MAP:1 KEY:1 F_MAP:14\\n'\n            '  FMapEnd F_MAP:1 KEY:1\\n'\n            '    Value F_MAP:1 KEY:1 VAL:21\\n'\n            'FMapStart F_MAP:1 KEY:1 VAL:21 F_MAP:22\\n'\n            '   Scalar F_MAP:1 KEY:1 VAL:21 F_MAP:22\\n'\n            '  FMapEnd F_MAP:1\\n'\n            '  FMapEnd \\n')\n\n        self.assertMultiLineEqual(\n            self.full_stack('{[{{[val]}}, [{[key]: val2}]]}\\n'),\n            'FMapStart F_MAP:1\\n'\n            'FSeqStart F_MAP:1 F_SEQ:2\\n'\n            'FMapStart F_MAP:1 F_SEQ:2 F_MAP:3\\n'\n            'FMapStart F_MAP:1 F_SEQ:2 F_MAP:3 F_MAP:4\\n'\n            'FSeqStart F_MAP:1 F_SEQ:2 F_MAP:3 F_MAP:4 F_SEQ:5\\n'\n            '   Scalar F_MAP:1 F_SEQ:2 F_MAP:3 F_MAP:4 F_SEQ:5\\n'\n            '  FSeqEnd F_MAP:1 F_SEQ:2 F_MAP:3 F_MAP:4\\n'\n            '  FMapEnd F_MAP:1 F_SEQ:2 F_MAP:3\\n'\n            '  FMapEnd F_MAP:1 F_SEQ:2\\n'\n            '   FEntry F_MAP:1 F_SEQ:2\\n'\n            'FSeqStart F_MAP:1 F_SEQ:2 F_SEQ:14\\n'\n            'FMapStart F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15\\n'\n            '      Key F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15 KEY:15\\n'\n            'FSeqStart F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15 KEY:15 F_SEQ:16\\n'\n            '   Scalar F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15 KEY:15 F_SEQ:16\\n'\n            '  FSeqEnd F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15 KEY:15\\n'\n            '    Value F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15 KEY:15 VAL:22\\n'\n            '   Scalar F_MAP:1 F_SEQ:2 F_SEQ:14 F_MAP:15\\n'\n            '  FMapEnd F_MAP:1 F_SEQ:2 F_SEQ:14\\n'\n            '  FSeqEnd F_MAP:1 F_SEQ:2\\n'\n            '  FSeqEnd F_MAP:1\\n'\n            '  FMapEnd \\n')\n\n\nclass IndentationTestCase(RuleTestCase):\n    rule_id = 'indentation'\n\n    def test_disabled(self):\n        conf = 'indentation: disable'\n        self.check('---\\n'\n                   'object:\\n'\n                   '   k1: v1\\n'\n                   'obj2:\\n'\n                   ' k2:\\n'\n                   '     - 8\\n'\n                   ' k3:\\n'\n                   '           val\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '  o:\\n'\n                   '    k1: v1\\n'\n                   '  p:\\n'\n                   '   k3:\\n'\n                   '       val\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '     - o:\\n'\n                   '         k1: v1\\n'\n                   '     - p: kdjf\\n'\n                   '     - q:\\n'\n                   '        k3:\\n'\n                   '              - val\\n'\n                   '...\\n', conf)\n\n    def test_one_space(self):\n        conf = 'indentation: {spaces: 1, indent-sequences: false}'\n        self.check('---\\n'\n                   'object:\\n'\n                   ' k1:\\n'\n                   ' - a\\n'\n                   ' - b\\n'\n                   ' k2: v2\\n'\n                   ' k3:\\n'\n                   ' - name: Unix\\n'\n                   '   date: 1969\\n'\n                   ' - name: Linux\\n'\n                   '   date: 1991\\n'\n                   '...\\n', conf)\n        conf = 'indentation: {spaces: 1, indent-sequences: true}'\n        self.check('---\\n'\n                   'object:\\n'\n                   ' k1:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   ' k2: v2\\n'\n                   ' k3:\\n'\n                   '  - name: Unix\\n'\n                   '    date: 1969\\n'\n                   '  - name: Linux\\n'\n                   '    date: 1991\\n'\n                   '...\\n', conf)\n\n    def test_two_spaces(self):\n        conf = 'indentation: {spaces: 2, indent-sequences: false}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k1:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   '  k2: v2\\n'\n                   '  k3:\\n'\n                   '  - name: Unix\\n'\n                   '    date: 1969\\n'\n                   '  - name: Linux\\n'\n                   '    date: 1991\\n'\n                   '  k4:\\n'\n                   '  -\\n'\n                   '  k5: v3\\n'\n                   '...\\n', conf)\n        conf = 'indentation: {spaces: 2, indent-sequences: true}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k1:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '  k2: v2\\n'\n                   '  k3:\\n'\n                   '    - name: Unix\\n'\n                   '      date: 1969\\n'\n                   '    - name: Linux\\n'\n                   '      date: 1991\\n'\n                   '...\\n', conf)\n\n    def test_three_spaces(self):\n        conf = 'indentation: {spaces: 3, indent-sequences: false}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '   k1:\\n'\n                   '   - a\\n'\n                   '   - b\\n'\n                   '   k2: v2\\n'\n                   '   k3:\\n'\n                   '   - name: Unix\\n'\n                   '     date: 1969\\n'\n                   '   - name: Linux\\n'\n                   '     date: 1991\\n'\n                   '...\\n', conf)\n        conf = 'indentation: {spaces: 3, indent-sequences: true}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '   k1:\\n'\n                   '      - a\\n'\n                   '      - b\\n'\n                   '   k2: v2\\n'\n                   '   k3:\\n'\n                   '      - name: Unix\\n'\n                   '        date: 1969\\n'\n                   '      - name: Linux\\n'\n                   '        date: 1991\\n'\n                   '...\\n', conf)\n\n    def test_consistent_spaces(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: whatever}\\n'\n                'document-start: disable\\n')\n        self.check('---\\n'\n                   'object:\\n'\n                   ' k1:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   ' k2: v2\\n'\n                   ' k3:\\n'\n                   '  - name: Unix\\n'\n                   '    date: 1969\\n'\n                   '  - name: Linux\\n'\n                   '    date: 1991\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k1:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   '  k2: v2\\n'\n                   '  k3:\\n'\n                   '  - name: Unix\\n'\n                   '    date: 1969\\n'\n                   '  - name: Linux\\n'\n                   '    date: 1991\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '   k1:\\n'\n                   '      - a\\n'\n                   '      - b\\n'\n                   '   k2: v2\\n'\n                   '   k3:\\n'\n                   '      - name: Unix\\n'\n                   '        date: 1969\\n'\n                   '      - name: Linux\\n'\n                   '        date: 1991\\n'\n                   '...\\n', conf)\n        self.check('first is not indented:\\n'\n                   '  value is indented\\n', conf)\n        self.check('first is not indented:\\n'\n                   '     value:\\n'\n                   '          is indented\\n', conf)\n        self.check('- first is already indented:\\n'\n                   '    value is indented too\\n', conf)\n        self.check('- first is already indented:\\n'\n                   '       value:\\n'\n                   '            is indented too\\n', conf)\n        self.check('- first is already indented:\\n'\n                   '       value:\\n'\n                   '             is indented too\\n', conf, problem=(3, 14))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem=(7, 5))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   '  - c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   ' - 1\\n'\n                   ' - 2\\n'\n                   ' - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf)\n\n    def test_consistent_spaces_and_indent_sequences(self):\n        conf = 'indentation: {spaces: consistent, indent-sequences: true}'\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(3, 1))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(7, 5))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem1=(7, 1))\n\n        conf = 'indentation: {spaces: consistent, indent-sequences: false}'\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(7, 5))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   '  - c\\n', conf, problem1=(7, 3))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem1=(3, 3))\n\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: consistent}')\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(7, 5))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '    - 1\\n'\n                   '    - 2\\n'\n                   '    - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem1=(7, 1))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(7, 5))\n\n        conf = 'indentation: {spaces: consistent, indent-sequences: whatever}'\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '    - 1\\n'\n                   '    - 2\\n'\n                   '    - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem1=(7, 5))\n\n    def test_indent_sequences_whatever(self):\n        conf = 'indentation: {spaces: 4, indent-sequences: whatever}'\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '  - 1\\n'\n                   '  - 2\\n'\n                   '  - 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem=(3, 3))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '  - a\\n'\n                   '  - b\\n'\n                   '  - c\\n', conf, problem=(7, 3))\n        self.check('---\\n'\n                   'list:\\n'\n                   '    - 1\\n'\n                   '    - 2\\n'\n                   '    - 3\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem=(6, 1, 'syntax'))\n\n    def test_indent_sequences_consistent(self):\n        conf = 'indentation: {spaces: 4, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list:\\n'\n                   '    two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '    - 1\\n'\n                   '    - 2\\n'\n                   '    - 3\\n'\n                   'list:\\n'\n                   '    two:\\n'\n                   '        - a\\n'\n                   '        - b\\n'\n                   '        - c\\n', conf)\n        self.check('---\\n'\n                   'list one:\\n'\n                   '- 1\\n'\n                   '- 2\\n'\n                   '- 3\\n'\n                   'list two:\\n'\n                   '    - a\\n'\n                   '    - b\\n'\n                   '    - c\\n', conf, problem=(7, 5))\n        self.check('---\\n'\n                   'list one:\\n'\n                   '    - 1\\n'\n                   '    - 2\\n'\n                   '    - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem=(7, 1))\n        self.check('---\\n'\n                   'list one:\\n'\n                   ' - 1\\n'\n                   ' - 2\\n'\n                   ' - 3\\n'\n                   'list two:\\n'\n                   '- a\\n'\n                   '- b\\n'\n                   '- c\\n', conf, problem1=(3, 2), problem2=(7, 1))\n\n    def test_direct_flows(self):\n        # flow: [ ...\n        # ]\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '    y,\\n'\n                   '    z: 1}\\n', conf)\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '   y,\\n'\n                   '    z: 1}\\n', conf, problem=(3, 4))\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '     y,\\n'\n                   '    z: 1}\\n', conf, problem=(3, 6))\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '  y, z: 1}\\n', conf, problem=(3, 3))\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '    y, z: 1\\n'\n                   '}\\n', conf)\n        self.check('---\\n'\n                   'a: {x: 1,\\n'\n                   '  y, z: 1\\n'\n                   '}\\n', conf, problem=(3, 3))\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '    y,\\n'\n                   '    z]\\n', conf)\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '   y,\\n'\n                   '    z]\\n', conf, problem=(3, 4))\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '     y,\\n'\n                   '    z]\\n', conf, problem=(3, 6))\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '  y, z]\\n', conf, problem=(3, 3))\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '    y, z\\n'\n                   ']\\n', conf)\n        self.check('---\\n'\n                   'a: [x,\\n'\n                   '  y, z\\n'\n                   ']\\n', conf, problem=(3, 3))\n\n    def test_broken_flows(self):\n        # flow: [\n        #   ...\n        # ]\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'a: {\\n'\n                   '  x: 1,\\n'\n                   '  y, z: 1\\n'\n                   '}\\n', conf)\n        self.check('---\\n'\n                   'a: {\\n'\n                   '  x: 1,\\n'\n                   '  y, z: 1}\\n', conf)\n        self.check('---\\n'\n                   'a: {\\n'\n                   '   x: 1,\\n'\n                   '  y, z: 1\\n'\n                   '}\\n', conf, problem=(4, 3))\n        self.check('---\\n'\n                   'a: {\\n'\n                   '  x: 1,\\n'\n                   '  y, z: 1\\n'\n                   '  }\\n', conf, problem=(5, 3))\n        self.check('---\\n'\n                   'a: [\\n'\n                   '  x,\\n'\n                   '  y, z\\n'\n                   ']\\n', conf)\n        self.check('---\\n'\n                   'a: [\\n'\n                   '  x,\\n'\n                   '  y, z]\\n', conf)\n        self.check('---\\n'\n                   'a: [\\n'\n                   '   x,\\n'\n                   '  y, z\\n'\n                   ']\\n', conf, problem=(4, 3))\n        self.check('---\\n'\n                   'a: [\\n'\n                   '  x,\\n'\n                   '  y, z\\n'\n                   '  ]\\n', conf, problem=(5, 3))\n        self.check('---\\n'\n                   'obj: {\\n'\n                   '  a: 1,\\n'\n                   '   b: 2,\\n'\n                   ' c: 3\\n'\n                   '}\\n', conf, problem1=(4, 4), problem2=(5, 2))\n        self.check('---\\n'\n                   'list: [\\n'\n                   '  1,\\n'\n                   '   2,\\n'\n                   ' 3\\n'\n                   ']\\n', conf, problem1=(4, 4), problem2=(5, 2))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules: [\\n'\n                   '    1, 2,\\n'\n                   '  ]\\n', conf)\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules: [\\n'\n                   '    1, 2,\\n'\n                   ']\\n'\n                   '  rulez: [\\n'\n                   '    1, 2,\\n'\n                   '    ]\\n', conf, problem1=(5, 1), problem2=(8, 5))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    here: {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '    }\\n', conf)\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    here: {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '      }\\n'\n                   '    there: {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '  }\\n', conf, problem1=(7, 7), problem2=(11, 3))\n        conf = 'indentation: {spaces: 2}'\n        self.check('---\\n'\n                   'a: {\\n'\n                   '   x: 1,\\n'\n                   '  y, z: 1\\n'\n                   '}\\n', conf, problem=(3, 4))\n        self.check('---\\n'\n                   'a: [\\n'\n                   '   x,\\n'\n                   '  y, z\\n'\n                   ']\\n', conf, problem=(3, 4))\n\n    def test_cleared_flows(self):\n        # flow:\n        #   [\n        #     ...\n        #   ]\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '    }\\n', conf)\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    {\\n'\n                   '       foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '    }\\n', conf, problem=(5, 8))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '   {\\n'\n                   '     foo: 1,\\n'\n                   '     bar: 2\\n'\n                   '   }\\n', conf, problem=(4, 4))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '   }\\n', conf, problem=(7, 4))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules:\\n'\n                   '    {\\n'\n                   '      foo: 1,\\n'\n                   '      bar: 2\\n'\n                   '     }\\n', conf, problem=(7, 6))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  [\\n'\n                   '    a, b, c\\n'\n                   '  ]\\n', conf)\n        self.check('---\\n'\n                   'top:\\n'\n                   '  [\\n'\n                   '     a, b, c\\n'\n                   '  ]\\n', conf, problem=(4, 6))\n        self.check('---\\n'\n                   'top:\\n'\n                   '   [\\n'\n                   '     a, b, c\\n'\n                   '   ]\\n', conf, problem=(4, 6))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  [\\n'\n                   '    a, b, c\\n'\n                   '   ]\\n', conf, problem=(5, 4))\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules: [\\n'\n                   '    {\\n'\n                   '      foo: 1\\n'\n                   '    },\\n'\n                   '    {\\n'\n                   '      foo: 2,\\n'\n                   '      bar: [\\n'\n                   '        a, b, c\\n'\n                   '      ],\\n'\n                   '    },\\n'\n                   '  ]\\n', conf)\n        self.check('---\\n'\n                   'top:\\n'\n                   '  rules: [\\n'\n                   '    {\\n'\n                   '     foo: 1\\n'\n                   '     },\\n'\n                   '    {\\n'\n                   '      foo: 2,\\n'\n                   '        bar: [\\n'\n                   '          a, b, c\\n'\n                   '      ],\\n'\n                   '    },\\n'\n                   ']\\n', conf, problem1=(5, 6), problem2=(6, 6),\n                   problem3=(9, 9), problem4=(11, 7), problem5=(13, 1))\n\n    def test_under_indented(self):\n        conf = 'indentation: {spaces: 2, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'object:\\n'\n                   ' val: 1\\n'\n                   '...\\n', conf, problem=(3, 2))\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k1:\\n'\n                   '   - a\\n'\n                   '...\\n', conf, problem=(4, 4))\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k3:\\n'\n                   '    - name: Unix\\n'\n                   '     date: 1969\\n'\n                   '...\\n', conf, problem=(5, 6, 'syntax'))\n        conf = 'indentation: {spaces: 4, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '   val: 1\\n'\n                   '...\\n', conf, problem=(3, 4))\n        self.check('---\\n'\n                   '- el1\\n'\n                   '- el2:\\n'\n                   '   - subel\\n'\n                   '...\\n', conf, problem=(4, 4))\n        self.check('---\\n'\n                   'object:\\n'\n                   '    k3:\\n'\n                   '        - name: Linux\\n'\n                   '         date: 1991\\n'\n                   '...\\n', conf, problem=(5, 10, 'syntax'))\n        conf = 'indentation: {spaces: 2, indent-sequences: true}'\n        self.check('---\\n'\n                   'a:\\n'\n                   '-\\n'  # empty list\n                   'b: c\\n'\n                   '...\\n', conf, problem=(3, 1))\n        conf = 'indentation: {spaces: 2, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'a:\\n'\n                   '  -\\n'  # empty list\n                   'b:\\n'\n                   '-\\n'\n                   'c: d\\n'\n                   '...\\n', conf, problem=(5, 1))\n\n    def test_over_indented(self):\n        conf = 'indentation: {spaces: 2, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '   val: 1\\n'\n                   '...\\n', conf, problem=(3, 4))\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k1:\\n'\n                   '     - a\\n'\n                   '...\\n', conf, problem=(4, 6))\n        self.check('---\\n'\n                   'object:\\n'\n                   '  k3:\\n'\n                   '    - name: Unix\\n'\n                   '       date: 1969\\n'\n                   '...\\n', conf, problem=(5, 12, 'syntax'))\n        conf = 'indentation: {spaces: 4, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '     val: 1\\n'\n                   '...\\n', conf, problem=(3, 6))\n        self.check('---\\n'\n                   ' object:\\n'\n                   '     val: 1\\n'\n                   '...\\n', conf, problem=(2, 2))\n        self.check('---\\n'\n                   '- el1\\n'\n                   '- el2:\\n'\n                   '     - subel\\n'\n                   '...\\n', conf, problem=(4, 6))\n        self.check('---\\n'\n                   '- el1\\n'\n                   '- el2:\\n'\n                   '              - subel\\n'\n                   '...\\n', conf, problem=(4, 15))\n        self.check('---\\n'\n                   '  - el1\\n'\n                   '  - el2:\\n'\n                   '        - subel\\n'\n                   '...\\n', conf,\n                   problem=(2, 3))\n        self.check('---\\n'\n                   'object:\\n'\n                   '    k3:\\n'\n                   '        - name: Linux\\n'\n                   '           date: 1991\\n'\n                   '...\\n', conf, problem=(5, 16, 'syntax'))\n        conf = 'indentation: {spaces: 4, indent-sequences: whatever}'\n        self.check('---\\n'\n                   '  - el1\\n'\n                   '  - el2:\\n'\n                   '    - subel\\n'\n                   '...\\n', conf,\n                   problem=(2, 3))\n        conf = 'indentation: {spaces: 2, indent-sequences: false}'\n        self.check('---\\n'\n                   'a:\\n'\n                   '  -\\n'  # empty list\n                   'b: c\\n'\n                   '...\\n', conf, problem=(3, 3))\n        conf = 'indentation: {spaces: 2, indent-sequences: consistent}'\n        self.check('---\\n'\n                   'a:\\n'\n                   '-\\n'  # empty list\n                   'b:\\n'\n                   '  -\\n'\n                   'c: d\\n'\n                   '...\\n', conf, problem=(5, 3))\n\n    def test_multi_lines(self):\n        conf = 'indentation: {spaces: consistent, indent-sequences: true}'\n        self.check('---\\n'\n                   'long_string: >\\n'\n                   '  bla bla blah\\n'\n                   '  blah bla bla\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '- long_string: >\\n'\n                   '    bla bla blah\\n'\n                   '    blah bla bla\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'obj:\\n'\n                   '  - long_string: >\\n'\n                   '      bla bla blah\\n'\n                   '      blah bla bla\\n'\n                   '...\\n', conf)\n\n    def test_empty_value(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'key1:\\n'\n                   'key2: not empty\\n'\n                   'key3:\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '-\\n'\n                   '- item 2\\n'\n                   '-\\n'\n                   '...\\n', conf)\n\n    def test_nested_collections(self):\n        conf = 'indentation: {spaces: 2}'\n        self.check('---\\n'\n                   '- o:\\n'\n                   '  k1: v1\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '- o:\\n'\n                   ' k1: v1\\n'\n                   '...\\n', conf, problem=(3, 2, 'syntax'))\n        self.check('---\\n'\n                   '- o:\\n'\n                   '   k1: v1\\n'\n                   '...\\n', conf, problem=(3, 4))\n        conf = 'indentation: {spaces: 4}'\n        self.check('---\\n'\n                   '- o:\\n'\n                   '      k1: v1\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '- o:\\n'\n                   '     k1: v1\\n'\n                   '...\\n', conf, problem=(3, 6))\n        self.check('---\\n'\n                   '- o:\\n'\n                   '       k1: v1\\n'\n                   '...\\n', conf, problem=(3, 8))\n        self.check('---\\n'\n                   '- - - - item\\n'\n                   '    - elem 1\\n'\n                   '    - elem 2\\n'\n                   '    - - - - - very nested: a\\n'\n                   '              key: value\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   ' - - - - item\\n'\n                   '     - elem 1\\n'\n                   '     - elem 2\\n'\n                   '     - - - - - very nested: a\\n'\n                   '               key: value\\n'\n                   '...\\n', conf, problem=(2, 2))\n\n    def test_nested_collections_with_spaces_consistent(self):\n        \"\"\"Tests behavior of {spaces: consistent} in nested collections to\n        ensure wrong-indentation is properly caught--especially when the\n        expected indent value is initially unknown. For details, see\n        https://github.com/adrienverge/yamllint/issues/485.\n        \"\"\"\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: true}')\n        self.check('---\\n'\n                   '- item:\\n'\n                   '  - elem\\n'\n                   '- item:\\n'\n                   '    - elem\\n'\n                   '...\\n', conf, problem=(3, 3))\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: false}')\n        self.check('---\\n'\n                   '- item:\\n'\n                   '  - elem\\n'\n                   '- item:\\n'\n                   '    - elem\\n'\n                   '...\\n', conf, problem=(5, 5))\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: consistent}')\n        self.check('---\\n'\n                   '- item:\\n'\n                   '  - elem\\n'\n                   '- item:\\n'\n                   '    - elem\\n'\n                   '...\\n', conf, problem=(5, 5))\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              indent-sequences: whatever}')\n        self.check('---\\n'\n                   '- item:\\n'\n                   '  - elem\\n'\n                   '- item:\\n'\n                   '    - elem\\n'\n                   '...\\n', conf)\n\n    def test_return(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'a:\\n'\n                   '  b:\\n'\n                   '    c:\\n'\n                   '  d:\\n'\n                   '    e:\\n'\n                   '      f:\\n'\n                   'g:\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'a:\\n'\n                   '  b:\\n'\n                   '    c:\\n'\n                   '   d:\\n'\n                   '...\\n', conf, problem=(5, 4, 'syntax'))\n        self.check('---\\n'\n                   'a:\\n'\n                   '  b:\\n'\n                   '    c:\\n'\n                   ' d:\\n'\n                   '...\\n', conf, problem=(5, 2, 'syntax'))\n\n    def test_first_line(self):\n        conf = ('indentation: {spaces: consistent}\\n'\n                'document-start: disable\\n')\n        self.check('  a: 1\\n', conf, problem=(1, 3))\n\n    def test_explicit_block_mappings(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ? key\\n'\n                   '    : value\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ? key\\n'\n                   '    :\\n'\n                   '        value\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ?\\n'\n                   '        key\\n'\n                   '    : value\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ?\\n'\n                   '        key\\n'\n                   '    :\\n'\n                   '        value\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '- ? key\\n'\n                   '  : value\\n', conf)\n        self.check('---\\n'\n                   '- ? key\\n'\n                   '  :\\n'\n                   '      value\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '- ?\\n'\n                   '      key\\n'\n                   '  : value\\n', conf)\n        self.check('---\\n'\n                   '- ?\\n'\n                   '      key\\n'\n                   '  :\\n'\n                   '      value\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ? key\\n'\n                   '    :\\n'\n                   '       value\\n'\n                   '...\\n', conf, problem=(5, 8))\n        self.check('---\\n'\n                   '- - ?\\n'\n                   '       key\\n'\n                   '    :\\n'\n                   '      value\\n'\n                   '...\\n', conf, problem=(5, 7))\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ?\\n'\n                   '       key\\n'\n                   '    :\\n'\n                   '         value\\n'\n                   '...\\n', conf, problem1=(4, 8), problem2=(6, 10))\n        self.check('---\\n'\n                   'object:\\n'\n                   '    ?\\n'\n                   '         key\\n'\n                   '    :\\n'\n                   '       value\\n'\n                   '...\\n', conf, problem1=(4, 10), problem2=(6, 8))\n\n    def test_clear_sequence_item(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   '-\\n'\n                   '  string\\n'\n                   '-\\n'\n                   '  map: ping\\n'\n                   '-\\n'\n                   '  - sequence\\n'\n                   '  -\\n'\n                   '    nested\\n'\n                   '  -\\n'\n                   '    >\\n'\n                   '      multi\\n'\n                   '      line\\n'\n                   '...\\n', conf)\n        self.check('---\\n'\n                   '-\\n'\n                   ' string\\n'\n                   '-\\n'\n                   '   string\\n', conf, problem=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   ' map: ping\\n'\n                   '-\\n'\n                   '   map: ping\\n', conf, problem=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   ' - sequence\\n'\n                   '-\\n'\n                   '   - sequence\\n', conf, problem=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   '  -\\n'\n                   '   nested\\n'\n                   '  -\\n'\n                   '     nested\\n', conf, problem1=(4, 4), problem2=(6, 6))\n        self.check('---\\n'\n                   '-\\n'\n                   '  -\\n'\n                   '     >\\n'\n                   '      multi\\n'\n                   '      line\\n'\n                   '...\\n', conf, problem=(4, 6))\n        conf = 'indentation: {spaces: 2}'\n        self.check('---\\n'\n                   '-\\n'\n                   ' string\\n'\n                   '-\\n'\n                   '   string\\n', conf, problem1=(3, 2), problem2=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   ' map: ping\\n'\n                   '-\\n'\n                   '   map: ping\\n', conf, problem1=(3, 2), problem2=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   ' - sequence\\n'\n                   '-\\n'\n                   '   - sequence\\n', conf, problem1=(3, 2), problem2=(5, 4))\n        self.check('---\\n'\n                   '-\\n'\n                   '  -\\n'\n                   '   nested\\n'\n                   '  -\\n'\n                   '     nested\\n', conf, problem1=(4, 4), problem2=(6, 6))\n\n    def test_anchors(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   'key: &anchor value\\n', conf)\n        self.check('---\\n'\n                   'key: &anchor\\n'\n                   '  value\\n', conf)\n        self.check('---\\n'\n                   '- &anchor value\\n', conf)\n        self.check('---\\n'\n                   '- &anchor\\n'\n                   '  value\\n', conf)\n        self.check('---\\n'\n                   'key: &anchor [1,\\n'\n                   '              2]\\n', conf)\n        self.check('---\\n'\n                   'key: &anchor\\n'\n                   '  [1,\\n'\n                   '   2]\\n', conf)\n        self.check('---\\n'\n                   'key: &anchor\\n'\n                   '  - 1\\n'\n                   '  - 2\\n', conf)\n        self.check('---\\n'\n                   '- &anchor [1,\\n'\n                   '           2]\\n', conf)\n        self.check('---\\n'\n                   '- &anchor\\n'\n                   '  [1,\\n'\n                   '   2]\\n', conf)\n        self.check('---\\n'\n                   '- &anchor\\n'\n                   '  - 1\\n'\n                   '  - 2\\n', conf)\n        self.check('---\\n'\n                   'key:\\n'\n                   '  &anchor1\\n'\n                   '  value\\n', conf)\n        self.check('---\\n'\n                   'pre:\\n'\n                   '  &anchor1 0\\n'\n                   '&anchor2 key:\\n'\n                   '  value\\n', conf)\n        self.check('---\\n'\n                   'machine0:\\n'\n                   '  /etc/hosts: &ref-etc-hosts\\n'\n                   '    content:\\n'\n                   '      - 127.0.0.1: localhost\\n'\n                   '      - ::1: localhost\\n'\n                   '    mode: 0644\\n'\n                   'machine1:\\n'\n                   '  /etc/hosts: *ref-etc-hosts\\n', conf)\n        self.check('---\\n'\n                   'list:\\n'\n                   '  - k: v\\n'\n                   '  - &a truc\\n'\n                   '  - &b\\n'\n                   '    truc\\n'\n                   '  - k: *a\\n', conf)\n\n    def test_tags(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   '-\\n'\n                   '  \"flow in block\"\\n'\n                   '- >\\n'\n                   '    Block scalar\\n'\n                   '- !!map  # Block collection\\n'\n                   '  foo: bar\\n', conf)\n\n        conf = 'indentation: {spaces: consistent, indent-sequences: false}'\n        self.check('---\\n'\n                   'sequence: !!seq\\n'\n                   '- entry\\n'\n                   '- !!seq\\n'\n                   '  - nested\\n', conf)\n        self.check('---\\n'\n                   'mapping: !!map\\n'\n                   '  foo: bar\\n'\n                   'Block style: !!map\\n'\n                   '  Clark: Evans\\n'\n                   '  Ingy: d\u00f6t Net\\n'\n                   '  Oren: Ben-Kiki\\n', conf)\n        self.check('---\\n'\n                   'Flow style: !!map {Clark: Evans, Ingy: d\u00f6t Net}\\n'\n                   'Block style: !!seq\\n'\n                   '- Clark Evans\\n'\n                   '- Ingy d\u00f6t Net\\n', conf)\n\n    def test_flows_imbrication(self):\n        conf = 'indentation: {spaces: consistent}'\n        self.check('---\\n'\n                   '[val]: value\\n', conf)\n        self.check('---\\n'\n                   '{key}: value\\n', conf)\n        self.check('---\\n'\n                   '{key: val}: value\\n', conf)\n        self.check('---\\n'\n                   '[[val]]: value\\n', conf)\n        self.check('---\\n'\n                   '{{key}}: value\\n', conf)\n        self.check('---\\n'\n                   '{{key: val1}: val2}: value\\n', conf)\n        self.check('---\\n'\n                   '- [val, {{key: val}: val}]: value\\n'\n                   '- {[val,\\n'\n                   '    {{key: val}: val}]}\\n'\n                   '- {[val,\\n'\n                   '    {{key: val,\\n'\n                   '      key2}}]}\\n'\n                   '- {{{{{moustaches}}}}}\\n'\n                   '- {{{{{moustache,\\n'\n                   '       moustache},\\n'\n                   '      moustache}},\\n'\n                   '    moustache}}\\n', conf)\n        self.check('---\\n'\n                   '- {[val,\\n'\n                   '     {{key: val}: val}]}\\n',\n                   conf, problem=(3, 6))\n        self.check('---\\n'\n                   '- {[val,\\n'\n                   '    {{key: val,\\n'\n                   '     key2}}]}\\n',\n                   conf, problem=(4, 6))\n        self.check('---\\n'\n                   '- {{{{{moustache,\\n'\n                   '       moustache},\\n'\n                   '       moustache}},\\n'\n                   '   moustache}}\\n',\n                   conf, problem1=(4, 8), problem2=(5, 4))\n\n\nclass ScalarIndentationTestCase(RuleTestCase):\n    rule_id = 'indentation'\n\n    def test_basics_plain(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: false}\\n'\n                'document-start: disable\\n')\n        self.check('multi\\n'\n                   'line\\n', conf)\n        self.check('multi\\n'\n                   ' line\\n', conf)\n        self.check('- multi\\n'\n                   '  line\\n', conf)\n        self.check('- multi\\n'\n                   '   line\\n', conf)\n        self.check('a key: multi\\n'\n                   '       line\\n', conf)\n        self.check('a key: multi\\n'\n                   '  line\\n', conf)\n        self.check('a key: multi\\n'\n                   '        line\\n', conf)\n        self.check('a key:\\n'\n                   '  multi\\n'\n                   '  line\\n', conf)\n        self.check('- C code: void main() {\\n'\n                   '              printf(\"foo\");\\n'\n                   '          }\\n', conf)\n        self.check('- C code:\\n'\n                   '    void main() {\\n'\n                   '        printf(\"foo\");\\n'\n                   '    }\\n', conf)\n\n    def test_check_multi_line_plain(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('multi\\n'\n                   ' line\\n', conf, problem=(2, 2))\n        self.check('- multi\\n'\n                   '   line\\n', conf, problem=(2, 4))\n        self.check('a key: multi\\n'\n                   '  line\\n', conf, problem=(2, 3))\n        self.check('a key: multi\\n'\n                   '        line\\n', conf, problem=(2, 9))\n        self.check('a key:\\n'\n                   '  multi\\n'\n                   '   line\\n', conf, problem=(3, 4))\n        self.check('- C code: void main() {\\n'\n                   '              printf(\"foo\");\\n'\n                   '          }\\n', conf, problem=(2, 15))\n        self.check('- C code:\\n'\n                   '    void main() {\\n'\n                   '        printf(\"foo\");\\n'\n                   '    }\\n', conf, problem=(3, 9))\n\n    def test_basics_quoted(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: false}\\n'\n                'document-start: disable\\n')\n        self.check('\"multi\\n'\n                   ' line\"\\n', conf)\n        self.check('- \"multi\\n'\n                   '   line\"\\n', conf)\n        self.check('a key: \"multi\\n'\n                   '        line\"\\n', conf)\n        self.check('a key:\\n'\n                   '  \"multi\\n'\n                   '   line\"\\n', conf)\n        self.check('- jinja2: \"{% if ansible is defined %}\\n'\n                   '             {{ ansible }}\\n'\n                   '           {% else %}\\n'\n                   '             {{ chef }}\\n'\n                   '           {% endif %}\"\\n', conf)\n        self.check('- jinja2:\\n'\n                   '    \"{% if ansible is defined %}\\n'\n                   '       {{ ansible }}\\n'\n                   '     {% else %}\\n'\n                   '       {{ chef }}\\n'\n                   '     {% endif %}\"\\n', conf)\n        self.check('[\"this is a very long line\\n'\n                   '  that needs to be split\",\\n'\n                   ' \"other line\"]\\n', conf)\n        self.check('[\"multi\\n'\n                   '  line 1\", \"multi\\n'\n                   '            line 2\"]\\n', conf)\n\n    def test_check_multi_line_quoted(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('\"multi\\n'\n                   'line\"\\n', conf, problem=(2, 1))\n        self.check('\"multi\\n'\n                   '  line\"\\n', conf, problem=(2, 3))\n        self.check('- \"multi\\n'\n                   '  line\"\\n', conf, problem=(2, 3))\n        self.check('- \"multi\\n'\n                   '    line\"\\n', conf, problem=(2, 5))\n        self.check('a key: \"multi\\n'\n                   '  line\"\\n', conf, problem=(2, 3))\n        self.check('a key: \"multi\\n'\n                   '       line\"\\n', conf, problem=(2, 8))\n        self.check('a key: \"multi\\n'\n                   '         line\"\\n', conf, problem=(2, 10))\n        self.check('a key:\\n'\n                   '  \"multi\\n'\n                   '  line\"\\n', conf, problem=(3, 3))\n        self.check('a key:\\n'\n                   '  \"multi\\n'\n                   '    line\"\\n', conf, problem=(3, 5))\n        self.check('- jinja2: \"{% if ansible is defined %}\\n'\n                   '             {{ ansible }}\\n'\n                   '           {% else %}\\n'\n                   '             {{ chef }}\\n'\n                   '           {% endif %}\"\\n', conf,\n                   problem1=(2, 14), problem2=(4, 14))\n        self.check('- jinja2:\\n'\n                   '    \"{% if ansible is defined %}\\n'\n                   '       {{ ansible }}\\n'\n                   '     {% else %}\\n'\n                   '       {{ chef }}\\n'\n                   '     {% endif %}\"\\n', conf,\n                   problem1=(3, 8), problem2=(5, 8))\n        self.check('[\"this is a very long line\\n'\n                   '  that needs to be split\",\\n'\n                   ' \"other line\"]\\n', conf)\n        self.check('[\"this is a very long line\\n'\n                   ' that needs to be split\",\\n'\n                   ' \"other line\"]\\n', conf, problem=(2, 2))\n        self.check('[\"this is a very long line\\n'\n                   '   that needs to be split\",\\n'\n                   ' \"other line\"]\\n', conf, problem=(2, 4))\n        self.check('[\"multi\\n'\n                   '  line 1\", \"multi\\n'\n                   '            line 2\"]\\n', conf)\n        self.check('[\"multi\\n'\n                   '  line 1\", \"multi\\n'\n                   '           line 2\"]\\n', conf, problem=(3, 12))\n        self.check('[\"multi\\n'\n                   '  line 1\", \"multi\\n'\n                   '             line 2\"]\\n', conf, problem=(3, 14))\n\n    def test_basics_folded_style(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: false}\\n'\n                'document-start: disable\\n')\n        self.check('>\\n'\n                   '  multi\\n'\n                   '  line\\n', conf)\n        self.check('- >\\n'\n                   '    multi\\n'\n                   '    line\\n', conf)\n        self.check('- key: >\\n'\n                   '    multi\\n'\n                   '    line\\n', conf)\n        self.check('- key:\\n'\n                   '    >\\n'\n                   '      multi\\n'\n                   '      line\\n', conf)\n        self.check('- ? >\\n'\n                   '      multi-line\\n'\n                   '      key\\n'\n                   '  : >\\n'\n                   '      multi-line\\n'\n                   '      value\\n', conf)\n        self.check('- ?\\n'\n                   '    >\\n'\n                   '      multi-line\\n'\n                   '      key\\n'\n                   '  :\\n'\n                   '    >\\n'\n                   '      multi-line\\n'\n                   '      value\\n', conf)\n        self.check('- jinja2: >\\n'\n                   '    {% if ansible is defined %}\\n'\n                   '      {{ ansible }}\\n'\n                   '    {% else %}\\n'\n                   '      {{ chef }}\\n'\n                   '    {% endif %}\\n', conf)\n\n    def test_check_multi_line_folded_style(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('>\\n'\n                   '  multi\\n'\n                   '   line\\n', conf, problem=(3, 4))\n        self.check('- >\\n'\n                   '    multi\\n'\n                   '     line\\n', conf, problem=(3, 6))\n        self.check('- key: >\\n'\n                   '    multi\\n'\n                   '     line\\n', conf, problem=(3, 6))\n        self.check('- key:\\n'\n                   '    >\\n'\n                   '      multi\\n'\n                   '       line\\n', conf, problem=(4, 8))\n        self.check('- ? >\\n'\n                   '      multi-line\\n'\n                   '       key\\n'\n                   '  : >\\n'\n                   '      multi-line\\n'\n                   '       value\\n', conf,\n                   problem1=(3, 8), problem2=(6, 8))\n        self.check('- ?\\n'\n                   '    >\\n'\n                   '      multi-line\\n'\n                   '       key\\n'\n                   '  :\\n'\n                   '    >\\n'\n                   '      multi-line\\n'\n                   '       value\\n', conf,\n                   problem1=(4, 8), problem2=(8, 8))\n        self.check('- jinja2: >\\n'\n                   '    {% if ansible is defined %}\\n'\n                   '      {{ ansible }}\\n'\n                   '    {% else %}\\n'\n                   '      {{ chef }}\\n'\n                   '    {% endif %}\\n', conf,\n                   problem1=(3, 7), problem2=(5, 7))\n\n    def test_basics_literal_style(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: false}\\n'\n                'document-start: disable\\n')\n        self.check('|\\n'\n                   '  multi\\n'\n                   '  line\\n', conf)\n        self.check('- |\\n'\n                   '    multi\\n'\n                   '    line\\n', conf)\n        self.check('- key: |\\n'\n                   '    multi\\n'\n                   '    line\\n', conf)\n        self.check('- key:\\n'\n                   '    |\\n'\n                   '      multi\\n'\n                   '      line\\n', conf)\n        self.check('- ? |\\n'\n                   '      multi-line\\n'\n                   '      key\\n'\n                   '  : |\\n'\n                   '      multi-line\\n'\n                   '      value\\n', conf)\n        self.check('- ?\\n'\n                   '    |\\n'\n                   '      multi-line\\n'\n                   '      key\\n'\n                   '  :\\n'\n                   '    |\\n'\n                   '      multi-line\\n'\n                   '      value\\n', conf)\n        self.check('- jinja2: |\\n'\n                   '    {% if ansible is defined %}\\n'\n                   '     {{ ansible }}\\n'\n                   '    {% else %}\\n'\n                   '      {{ chef }}\\n'\n                   '    {% endif %}\\n', conf)\n\n    def test_check_multi_line_literal_style(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('|\\n'\n                   '  multi\\n'\n                   '   line\\n', conf, problem=(3, 4))\n        self.check('- |\\n'\n                   '    multi\\n'\n                   '     line\\n', conf, problem=(3, 6))\n        self.check('- key: |\\n'\n                   '    multi\\n'\n                   '     line\\n', conf, problem=(3, 6))\n        self.check('- key:\\n'\n                   '    |\\n'\n                   '      multi\\n'\n                   '       line\\n', conf, problem=(4, 8))\n        self.check('- ? |\\n'\n                   '      multi-line\\n'\n                   '       key\\n'\n                   '  : |\\n'\n                   '      multi-line\\n'\n                   '       value\\n', conf,\n                   problem1=(3, 8), problem2=(6, 8))\n        self.check('- ?\\n'\n                   '    |\\n'\n                   '      multi-line\\n'\n                   '       key\\n'\n                   '  :\\n'\n                   '    |\\n'\n                   '      multi-line\\n'\n                   '       value\\n', conf,\n                   problem1=(4, 8), problem2=(8, 8))\n        self.check('- jinja2: |\\n'\n                   '    {% if ansible is defined %}\\n'\n                   '      {{ ansible }}\\n'\n                   '    {% else %}\\n'\n                   '      {{ chef }}\\n'\n                   '    {% endif %}\\n', conf,\n                   problem1=(3, 7), problem2=(5, 7))\n\n    # The following \"paragraph\" examples are inspired from\n    # http://stackoverflow.com/questions/3790454/in-yaml-how-do-i-break-a-string-over-multiple-lines\n\n    def test_paragraph_plain(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('- long text: very \"long\"\\n'\n                   '             \\'string\\' with\\n'\n                   '\\n'\n                   '             paragraph gap, \\\\n and\\n'\n                   '             spaces.\\n', conf)\n        self.check('- long text: very \"long\"\\n'\n                   '    \\'string\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\\n', conf,\n                   problem1=(2, 5), problem2=(4, 5), problem3=(5, 5))\n        self.check('- long text:\\n'\n                   '    very \"long\"\\n'\n                   '    \\'string\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\\n', conf)\n\n    def test_paragraph_double_quoted(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('- long text: \"very \\\\\"long\\\\\"\\n'\n                   '              \\'string\\' with\\n'\n                   '\\n'\n                   '              paragraph gap, \\\\n and\\n'\n                   '              spaces.\"\\n', conf)\n        self.check('- long text: \"very \\\\\"long\\\\\"\\n'\n                   '    \\'string\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\"\\n', conf,\n                   problem1=(2, 5), problem2=(4, 5), problem3=(5, 5))\n        self.check('- long text: \"very \\\\\"long\\\\\"\\n'\n                   '\\'string\\' with\\n'\n                   '\\n'\n                   'paragraph gap, \\\\n and\\n'\n                   'spaces.\"\\n', conf,\n                   problem1=(2, 1), problem2=(4, 1), problem3=(5, 1))\n        self.check('- long text:\\n'\n                   '    \"very \\\\\"long\\\\\"\\n'\n                   '     \\'string\\' with\\n'\n                   '\\n'\n                   '     paragraph gap, \\\\n and\\n'\n                   '     spaces.\"\\n', conf)\n\n    def test_paragraph_single_quoted(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('- long text: \\'very \"long\"\\n'\n                   '              \\'\\'string\\'\\' with\\n'\n                   '\\n'\n                   '              paragraph gap, \\\\n and\\n'\n                   '              spaces.\\'\\n', conf)\n        self.check('- long text: \\'very \"long\"\\n'\n                   '    \\'\\'string\\'\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\\'\\n', conf,\n                   problem1=(2, 5), problem2=(4, 5), problem3=(5, 5))\n        self.check('- long text: \\'very \"long\"\\n'\n                   '\\'\\'string\\'\\' with\\n'\n                   '\\n'\n                   'paragraph gap, \\\\n and\\n'\n                   'spaces.\\'\\n', conf,\n                   problem1=(2, 1), problem2=(4, 1), problem3=(5, 1))\n        self.check('- long text:\\n'\n                   '    \\'very \"long\"\\n'\n                   '     \\'\\'string\\'\\' with\\n'\n                   '\\n'\n                   '     paragraph gap, \\\\n and\\n'\n                   '     spaces.\\'\\n', conf)\n\n    def test_paragraph_folded(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('- long text: >\\n'\n                   '    very \"long\"\\n'\n                   '    \\'string\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\\n', conf)\n        self.check('- long text: >\\n'\n                   '    very \"long\"\\n'\n                   '     \\'string\\' with\\n'\n                   '\\n'\n                   '      paragraph gap, \\\\n and\\n'\n                   '       spaces.\\n', conf,\n                   problem1=(3, 6), problem2=(5, 7), problem3=(6, 8))\n\n    def test_paragraph_literal(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('- long text: |\\n'\n                   '    very \"long\"\\n'\n                   '    \\'string\\' with\\n'\n                   '\\n'\n                   '    paragraph gap, \\\\n and\\n'\n                   '    spaces.\\n', conf)\n        self.check('- long text: |\\n'\n                   '    very \"long\"\\n'\n                   '     \\'string\\' with\\n'\n                   '\\n'\n                   '      paragraph gap, \\\\n and\\n'\n                   '       spaces.\\n', conf,\n                   problem1=(3, 6), problem2=(5, 7), problem3=(6, 8))\n\n    def test_consistent(self):\n        conf = ('indentation: {spaces: consistent,\\n'\n                '              check-multi-line-strings: true}\\n'\n                'document-start: disable\\n')\n        self.check('multi\\n'\n                   'line\\n', conf)\n        self.check('multi\\n'\n                   ' line\\n', conf, problem=(2, 2))\n        self.check('- multi\\n'\n                   '  line\\n', conf)\n        self.check('- multi\\n'\n                   '   line\\n', conf, problem=(2, 4))\n        self.check('a key: multi\\n'\n                   '  line\\n', conf, problem=(2, 3))\n        self.check('a key: multi\\n'\n                   '        line\\n', conf, problem=(2, 9))\n        self.check('a key:\\n'\n                   '  multi\\n'\n                   '   line\\n', conf, problem=(3, 4))\n        self.check('- C code: void main() {\\n'\n                   '              printf(\"foo\");\\n'\n                   '          }\\n', conf, problem=(2, 15))\n        self.check('- C code:\\n'\n                   '    void main() {\\n'\n                   '        printf(\"foo\");\\n'\n                   '    }\\n', conf, problem=(3, 9))\n        self.check('>\\n'\n                   '  multi\\n'\n                   '  line\\n', conf)\n        self.check('>\\n'\n                   '     multi\\n'\n                   '     line\\n', conf)\n        self.check('>\\n'\n                   '     multi\\n'\n                   '      line\\n', conf, problem=(3, 7))\n",
  "GT_file_code": {
    "yamllint/parser.py": "# Copyright (C) 2016 Adrien Verg\u00e9\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport yaml\n\n\nclass Line:\n    def __init__(self, line_no, buffer, start, end):\n        self.line_no = line_no\n        self.start = start\n        self.end = end\n        self.buffer = buffer\n\n    @property\n    def content(self):\n        return self.buffer[self.start:self.end]\n\n\nclass Token:\n    def __init__(self, line_no, curr, prev, next, nextnext):\n        self.line_no = line_no\n        self.curr = curr\n        self.prev = prev\n        self.next = next\n        self.nextnext = nextnext\n\n\nclass Comment:\n    def __init__(self, line_no, column_no, buffer, pointer,\n                 token_before=None, token_after=None, comment_before=None):\n        self.line_no = line_no\n        self.column_no = column_no\n        self.buffer = buffer\n        self.pointer = pointer\n        self.token_before = token_before\n        self.token_after = token_after\n        self.comment_before = comment_before\n\n    def __str__(self):\n        end = self.buffer.find('\\n', self.pointer)\n        if end == -1:\n            end = self.buffer.find('\\0', self.pointer)\n        if end != -1:\n            return self.buffer[self.pointer:end]\n        return self.buffer[self.pointer:]\n\n    def __eq__(self, other):\n        return (isinstance(other, Comment) and\n                self.line_no == other.line_no and\n                self.column_no == other.column_no and\n                str(self) == str(other))\n\n    def is_inline(self):\n        return (\n            not isinstance(self.token_before, yaml.StreamStartToken) and\n            self.line_no == self.token_before.end_mark.line + 1 and\n            # sometimes token end marks are on the next line\n            self.buffer[self.token_before.end_mark.pointer - 1] != '\\n'\n        )\n\n\ndef line_generator(buffer):\n    line_no = 1\n    cur = 0\n    next = buffer.find('\\n')\n    while next != -1:\n        if next > 0 and buffer[next - 1] == '\\r':\n            yield Line(line_no, buffer, start=cur, end=next - 1)\n        else:\n            yield Line(line_no, buffer, start=cur, end=next)\n        cur = next + 1\n        next = buffer.find('\\n', cur)\n        line_no += 1\n\n    yield Line(line_no, buffer, start=cur, end=len(buffer))\n\n\ndef comments_between_tokens(token1, token2):\n    \"\"\"Find all comments between two tokens\"\"\"\n    if token2 is None:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:]\n    elif (token1.end_mark.line == token2.start_mark.line and\n          not isinstance(token1, yaml.StreamStartToken) and\n          not isinstance(token2, yaml.StreamEndToken)):\n        return\n    else:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:\n                                     token2.start_mark.pointer]\n\n    line_no = token1.end_mark.line + 1\n    column_no = token1.end_mark.column + 1\n    pointer = token1.end_mark.pointer\n\n    comment_before = None\n    for line in buf.split('\\n'):\n        pos = line.find('#')\n        if pos != -1:\n            comment = Comment(line_no, column_no + pos,\n                              token1.end_mark.buffer, pointer + pos,\n                              token1, token2, comment_before)\n            yield comment\n\n            comment_before = comment\n\n        pointer += len(line) + 1\n        line_no += 1\n        column_no = 1\n\n\ndef token_or_comment_generator(buffer):\n    yaml_loader = yaml.BaseLoader(buffer)\n\n    try:\n        prev = None\n        curr = yaml_loader.get_token()\n        while curr is not None:\n            next = yaml_loader.get_token()\n            nextnext = (yaml_loader.peek_token()\n                        if yaml_loader.check_token() else None)\n\n            yield Token(curr.start_mark.line + 1, curr, prev, next, nextnext)\n\n            yield from comments_between_tokens(curr, next)\n\n            prev = curr\n            curr = next\n\n    except yaml.scanner.ScannerError:\n        pass\n\n\ndef token_or_comment_or_line_generator(buffer):\n    \"\"\"Generator that mixes tokens and lines, ordering them by line number\"\"\"\n    tok_or_com_gen = token_or_comment_generator(buffer)\n    line_gen = line_generator(buffer)\n\n    tok_or_com = next(tok_or_com_gen, None)\n    line = next(line_gen, None)\n\n    while tok_or_com is not None or line is not None:\n        if tok_or_com is None or (line is not None and\n                                  tok_or_com.line_no > line.line_no):\n            yield line\n            line = next(line_gen, None)\n        else:\n            yield tok_or_com\n            tok_or_com = next(tok_or_com_gen, None)\n",
    "yamllint/rules/indentation.py": "# Copyright (C) 2016 Adrien Verg\u00e9\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"\nUse this rule to control the indentation.\n\n.. rubric:: Options\n\n* ``spaces`` defines the indentation width, in spaces. Set either to an integer\n  (e.g. ``2`` or ``4``, representing the number of spaces in an indentation\n  level) or to ``consistent`` to allow any number, as long as it remains the\n  same within the file.\n* ``indent-sequences`` defines whether block sequences should be indented or\n  not (when in a mapping, this indentation is not mandatory -- some people\n  perceive the ``-`` as part of the indentation). Possible values: ``true``,\n  ``false``, ``whatever`` and ``consistent``. ``consistent`` requires either\n  all block sequences to be indented, or none to be. ``whatever`` means either\n  indenting or not indenting individual block sequences is OK.\n* ``check-multi-line-strings`` defines whether to lint indentation in\n  multi-line strings. Set to ``true`` to enable, ``false`` to disable.\n\n.. rubric:: Default values (when enabled)\n\n.. code-block:: yaml\n\n rules:\n   indentation:\n     spaces: consistent\n     indent-sequences: true\n     check-multi-line-strings: false\n\n.. rubric:: Examples\n\n#. With ``indentation: {spaces: 1}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n     - name: Unix\n       date: 1969\n     - name: Linux\n       date: 1991\n    nest:\n     recurse:\n      - haystack:\n         needle\n\n#. With ``indentation: {spaces: 4}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n        - name: Unix\n          date: 1969\n        - name: Linux\n          date: 1991\n    nest:\n        recurse:\n            - haystack:\n                  needle\n\n   the following code snippet would **FAIL**:\n   ::\n\n    history:\n      - name: Unix\n        date: 1969\n      - name: Linux\n        date: 1991\n    nest:\n      recurse:\n        - haystack:\n            needle\n\n#. With ``indentation: {spaces: consistent}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n       - name: Unix\n         date: 1969\n       - name: Linux\n         date: 1991\n    nest:\n       recurse:\n          - haystack:\n               needle\n\n   the following code snippet would **FAIL**:\n   ::\n\n    some:\n      Russian:\n          dolls\n\n#. With ``indentation: {spaces: 2, indent-sequences: false}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    list:\n    - flying\n    - spaghetti\n    - monster\n\n   the following code snippet would **FAIL**:\n   ::\n\n    list:\n      - flying\n      - spaghetti\n      - monster\n\n#. With ``indentation: {spaces: 2, indent-sequences: whatever}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    list:\n    - flying:\n      - spaghetti\n      - monster\n    - not flying:\n        - spaghetti\n        - sauce\n\n#. With ``indentation: {spaces: 2, indent-sequences: consistent}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    - flying:\n      - spaghetti\n      - monster\n    - not flying:\n      - spaghetti\n      - sauce\n\n   the following code snippet would **FAIL**:\n   ::\n\n    - flying:\n        - spaghetti\n        - monster\n    - not flying:\n      - spaghetti\n      - sauce\n\n#. With ``indentation: {spaces: 4, check-multi-line-strings: true}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    Blaise Pascal:\n        Je vous \u00e9cris une longue lettre parce que\n        je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **PASS**:\n   ::\n\n    Blaise Pascal: Je vous \u00e9cris une longue lettre parce que\n                   je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **FAIL**:\n   ::\n\n    Blaise Pascal: Je vous \u00e9cris une longue lettre parce que\n      je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **FAIL**:\n   ::\n\n    C code:\n        void main() {\n            printf(\"foo\");\n        }\n\n   the following code snippet would **PASS**:\n   ::\n\n    C code:\n        void main() {\n        printf(\"bar\");\n        }\n\"\"\"\n\nimport yaml\n\nfrom yamllint.linter import LintProblem\nfrom yamllint.rules.common import get_real_end_line, is_explicit_key\n\nID = 'indentation'\nTYPE = 'token'\nCONF = {'spaces': (int, 'consistent'),\n        'indent-sequences': (bool, 'whatever', 'consistent'),\n        'check-multi-line-strings': bool}\nDEFAULT = {'spaces': 'consistent',\n           'indent-sequences': True,\n           'check-multi-line-strings': False}\n\nROOT, B_MAP, F_MAP, B_SEQ, F_SEQ, B_ENT, KEY, VAL = range(8)\nlabels = ('ROOT', 'B_MAP', 'F_MAP', 'B_SEQ', 'F_SEQ', 'B_ENT', 'KEY', 'VAL')\n\n\nclass Parent:\n    def __init__(self, type, indent, line_indent=None):\n        self.type = type\n        self.indent = indent\n        self.line_indent = line_indent\n        self.explicit_key = False\n        self.implicit_block_seq = False\n\n    def __repr__(self):\n        return f'{labels[self.type]}:{self.indent}'\n\n\ndef check_scalar_indentation(conf, token, context):\n    if token.start_mark.line == token.end_mark.line:\n        return\n\n    def compute_expected_indent(found_indent):\n        def detect_indent(base_indent):\n            if not isinstance(context['spaces'], int):\n                context['spaces'] = found_indent - base_indent\n            return base_indent + context['spaces']\n\n        if token.plain:\n            return token.start_mark.column\n        elif token.style in ('\"', \"'\"):\n            return token.start_mark.column + 1\n        elif token.style in ('>', '|'):\n            if context['stack'][-1].type == B_ENT:\n                # - >\n                #     multi\n                #     line\n                return detect_indent(token.start_mark.column)\n            elif context['stack'][-1].type == KEY:\n                assert context['stack'][-1].explicit_key\n                # - ? >\n                #       multi-line\n                #       key\n                #   : >\n                #       multi-line\n                #       value\n                return detect_indent(token.start_mark.column)\n            elif context['stack'][-1].type == VAL:\n                if token.start_mark.line + 1 > context['cur_line']:\n                    # - key:\n                    #     >\n                    #       multi\n                    #       line\n                    return detect_indent(context['stack'][-1].indent)\n                elif context['stack'][-2].explicit_key:\n                    # - ? key\n                    #   : >\n                    #       multi-line\n                    #       value\n                    return detect_indent(token.start_mark.column)\n                else:\n                    # - key: >\n                    #     multi\n                    #     line\n                    return detect_indent(context['stack'][-2].indent)\n            else:\n                return detect_indent(context['stack'][-1].indent)\n\n    expected_indent = None\n\n    line_no = token.start_mark.line + 1\n\n    line_start = token.start_mark.pointer\n    while True:\n        line_start = token.start_mark.buffer.find(\n            '\\n', line_start, token.end_mark.pointer - 1) + 1\n        if line_start == 0:\n            break\n        line_no += 1\n\n        indent = 0\n        while token.start_mark.buffer[line_start + indent] == ' ':\n            indent += 1\n        if token.start_mark.buffer[line_start + indent] == '\\n':\n            continue\n\n        if expected_indent is None:\n            expected_indent = compute_expected_indent(indent)\n\n        if indent != expected_indent:\n            yield LintProblem(line_no, indent + 1,\n                              f'wrong indentation: expected {expected_indent}'\n                              f'but found {indent}')\n\n\ndef _check(conf, token, prev, next, nextnext, context):\n    if 'stack' not in context:\n        context['stack'] = [Parent(ROOT, 0)]\n        context['cur_line'] = -1\n        context['spaces'] = conf['spaces']\n        context['indent-sequences'] = conf['indent-sequences']\n\n    # Step 1: Lint\n\n    is_visible = (\n        not isinstance(token, (yaml.StreamStartToken, yaml.StreamEndToken)) and\n        not isinstance(token, yaml.BlockEndToken) and\n        not (isinstance(token, yaml.ScalarToken) and token.value == ''))\n    first_in_line = (is_visible and\n                     token.start_mark.line + 1 > context['cur_line'])\n\n    def detect_indent(base_indent, next):\n        if not isinstance(context['spaces'], int):\n            context['spaces'] = next.start_mark.column - base_indent\n        return base_indent + context['spaces']\n\n    if first_in_line:\n        found_indentation = token.start_mark.column\n        expected = context['stack'][-1].indent\n\n        if isinstance(token, (yaml.FlowMappingEndToken,\n                              yaml.FlowSequenceEndToken)):\n            expected = context['stack'][-1].line_indent\n        elif (context['stack'][-1].type == KEY and\n                context['stack'][-1].explicit_key and\n                not isinstance(token, yaml.ValueToken)):\n            expected = detect_indent(expected, token)\n\n        if found_indentation != expected:\n            if expected < 0:\n                message = f'wrong indentation: expected at least ' \\\n                          f'{found_indentation + 1}'\n            else:\n                message = f'wrong indentation: expected {expected} but ' \\\n                          f'found {found_indentation}'\n            yield LintProblem(token.start_mark.line + 1,\n                              found_indentation + 1, message)\n\n    if (isinstance(token, yaml.ScalarToken) and\n            conf['check-multi-line-strings']):\n        yield from check_scalar_indentation(conf, token, context)\n\n    # Step 2.a:\n\n    if is_visible:\n        context['cur_line'] = get_real_end_line(token)\n        if first_in_line:\n            context['cur_line_indent'] = found_indentation\n\n    # Step 2.b: Update state\n\n    if isinstance(token, yaml.BlockMappingStartToken):\n        #   - a: 1\n        # or\n        #   - ? a\n        #     : 1\n        # or\n        #   - ?\n        #       a\n        #     : 1\n        assert isinstance(next, yaml.KeyToken)\n        assert next.start_mark.line == token.start_mark.line\n\n        indent = token.start_mark.column\n\n        context['stack'].append(Parent(B_MAP, indent))\n\n    elif isinstance(token, yaml.FlowMappingStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            #   - {a: 1, b: 2}\n            indent = next.start_mark.column\n        else:\n            #   - {\n            #     a: 1, b: 2\n            #   }\n            indent = detect_indent(context['cur_line_indent'], next)\n\n        context['stack'].append(Parent(F_MAP, indent,\n                                       line_indent=context['cur_line_indent']))\n\n    elif isinstance(token, yaml.BlockSequenceStartToken):\n        #   - - a\n        #     - b\n        assert isinstance(next, yaml.BlockEntryToken)\n        assert next.start_mark.line == token.start_mark.line\n\n        indent = token.start_mark.column\n\n        context['stack'].append(Parent(B_SEQ, indent))\n\n    elif (isinstance(token, yaml.BlockEntryToken) and\n            # in case of an empty entry\n            not isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken))):\n        # It looks like pyyaml doesn't issue BlockSequenceStartTokens when the\n        # list is not indented. We need to compensate that.\n        if context['stack'][-1].type != B_SEQ:\n            context['stack'].append(Parent(B_SEQ, token.start_mark.column))\n            context['stack'][-1].implicit_block_seq = True\n\n        if next.start_mark.line == token.end_mark.line:\n            #   - item 1\n            #   - item 2\n            indent = next.start_mark.column\n        elif next.start_mark.column == token.start_mark.column:\n            #   -\n            #   key: value\n            indent = next.start_mark.column\n        else:\n            #   -\n            #     item 1\n            #   -\n            #     key:\n            #       value\n            indent = detect_indent(token.start_mark.column, next)\n\n        context['stack'].append(Parent(B_ENT, indent))\n\n    elif isinstance(token, yaml.FlowSequenceStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            #   - [a, b]\n            indent = next.start_mark.column\n        else:\n            #   - [\n            #   a, b\n            # ]\n            indent = detect_indent(context['cur_line_indent'], next)\n\n        context['stack'].append(Parent(F_SEQ, indent,\n                                       line_indent=context['cur_line_indent']))\n\n    elif isinstance(token, yaml.KeyToken):\n        indent = context['stack'][-1].indent\n\n        context['stack'].append(Parent(KEY, indent))\n\n        context['stack'][-1].explicit_key = is_explicit_key(token)\n\n    elif isinstance(token, yaml.ValueToken):\n        assert context['stack'][-1].type == KEY\n\n        # Special cases:\n        #     key: &anchor\n        #       value\n        # and:\n        #     key: !!tag\n        #       value\n        if isinstance(next, (yaml.AnchorToken, yaml.TagToken)):\n            if (next.start_mark.line == prev.start_mark.line and\n                    next.start_mark.line < nextnext.start_mark.line):\n                next = nextnext\n\n        # Only if value is not empty\n        if not isinstance(next, (yaml.BlockEndToken,\n                                 yaml.FlowMappingEndToken,\n                                 yaml.FlowSequenceEndToken,\n                                 yaml.KeyToken)):\n            if context['stack'][-1].explicit_key:\n                #   ? k\n                #   : value\n                # or\n                #   ? k\n                #   :\n                #     value\n                indent = detect_indent(context['stack'][-1].indent, next)\n            elif next.start_mark.line == prev.start_mark.line:\n                #   k: value\n                indent = next.start_mark.column\n            elif isinstance(next, (yaml.BlockSequenceStartToken,\n                                   yaml.BlockEntryToken)):\n                # NOTE: We add BlockEntryToken in the test above because\n                # sometimes BlockSequenceStartToken are not issued. Try\n                # yaml.scan()ning this:\n                #     '- lib:\\n'\n                #     '  - var\\n'\n                if context['indent-sequences'] is False:\n                    indent = context['stack'][-1].indent\n                elif context['indent-sequences'] is True:\n                    if (context['spaces'] == 'consistent' and\n                            next.start_mark.column -\n                            context['stack'][-1].indent == 0):\n                        # In this case, the block sequence item is not indented\n                        # (while it should be), but we don't know yet the\n                        # indentation it should have (because `spaces` is\n                        # `consistent` and its value has not been computed yet\n                        # -- this is probably the beginning of the document).\n                        # So we choose an unknown value (-1).\n                        indent = -1\n                    else:\n                        indent = detect_indent(context['stack'][-1].indent,\n                                               next)\n                else:  # 'whatever' or 'consistent'\n                    if next.start_mark.column == context['stack'][-1].indent:\n                        #   key:\n                        #   - e1\n                        #   - e2\n                        if context['indent-sequences'] == 'consistent':\n                            context['indent-sequences'] = False\n                        indent = context['stack'][-1].indent\n                    else:\n                        if context['indent-sequences'] == 'consistent':\n                            context['indent-sequences'] = True\n                        #   key:\n                        #     - e1\n                        #     - e2\n                        indent = detect_indent(context['stack'][-1].indent,\n                                               next)\n            else:\n                #   k:\n                #     value\n                indent = detect_indent(context['stack'][-1].indent, next)\n\n            context['stack'].append(Parent(VAL, indent))\n\n    consumed_current_token = False\n    while True:\n        if (context['stack'][-1].type == F_SEQ and\n                isinstance(token, yaml.FlowSequenceEndToken) and\n                not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n\n        elif (context['stack'][-1].type == F_MAP and\n                isinstance(token, yaml.FlowMappingEndToken) and\n                not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n\n        elif (context['stack'][-1].type in (B_MAP, B_SEQ) and\n                isinstance(token, yaml.BlockEndToken) and\n                not context['stack'][-1].implicit_block_seq and\n                not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n\n        elif (context['stack'][-1].type == B_ENT and\n                not isinstance(token, yaml.BlockEntryToken) and\n                context['stack'][-2].implicit_block_seq and\n                not isinstance(token, (yaml.AnchorToken, yaml.TagToken)) and\n                not isinstance(next, yaml.BlockEntryToken)):\n            context['stack'].pop()\n            context['stack'].pop()\n\n        elif (context['stack'][-1].type == B_ENT and\n                isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken))):\n            context['stack'].pop()\n\n        elif (context['stack'][-1].type == VAL and\n                not isinstance(token, yaml.ValueToken) and\n                not isinstance(token, (yaml.AnchorToken, yaml.TagToken))):\n            assert context['stack'][-2].type == KEY\n            context['stack'].pop()\n            context['stack'].pop()\n\n        elif (context['stack'][-1].type == KEY and\n                isinstance(next, (yaml.BlockEndToken,\n                                  yaml.FlowMappingEndToken,\n                                  yaml.FlowSequenceEndToken,\n                                  yaml.KeyToken))):\n            # A key without a value: it's part of a set. Let's drop this key\n            # and leave room for the next one.\n            context['stack'].pop()\n\n        else:\n            break\n\n\ndef check(conf, token, prev, next, nextnext, context):\n    try:\n        yield from _check(conf, token, prev, next, nextnext, context)\n    except AssertionError:\n        yield LintProblem(token.start_mark.line + 1,\n                          token.start_mark.column + 1,\n                          'cannot infer indentation: unexpected token')\n"
  },
  "GT_src_dict": {
    "yamllint/parser.py": {
      "token_or_comment_generator": {
        "code": "def token_or_comment_generator(buffer):\n    \"\"\"Generates tokens and comments from a given YAML buffer.\n\nParameters:\n- buffer (str): A string containing the YAML content to be processed.\n\nReturns:\n- Yields a Token object for each token found in the buffer, which includes the current token, its previous and next tokens, and the next-next token. Additionally, it yields Comment objects for comments found between the tokens.\n\nDependencies:\n- This function relies on the `yaml` module, specifically `yaml.BaseLoader`, to parse the YAML content and retrieve tokens. It interacts with the `comments_between_tokens` function to extract comments related to the tokens.\n- The `Token` class is used to encapsulate the structure of each token, while the `Comment` class is utilized to manage comment details. The method `get_token()` from the `yaml_loader` retrieves tokens one at a time, and `check_token()` and `peek_token()` are used to manage the flow of token extraction.\"\"\"\n    yaml_loader = yaml.BaseLoader(buffer)\n    try:\n        prev = None\n        curr = yaml_loader.get_token()\n        while curr is not None:\n            next = yaml_loader.get_token()\n            nextnext = yaml_loader.peek_token() if yaml_loader.check_token() else None\n            yield Token(curr.start_mark.line + 1, curr, prev, next, nextnext)\n            yield from comments_between_tokens(curr, next)\n            prev = curr\n            curr = next\n    except yaml.scanner.ScannerError:\n        pass",
        "docstring": "Generates tokens and comments from a given YAML buffer.\n\nParameters:\n- buffer (str): A string containing the YAML content to be processed.\n\nReturns:\n- Yields a Token object for each token found in the buffer, which includes the current token, its previous and next tokens, and the next-next token. Additionally, it yields Comment objects for comments found between the tokens.\n\nDependencies:\n- This function relies on the `yaml` module, specifically `yaml.BaseLoader`, to parse the YAML content and retrieve tokens. It interacts with the `comments_between_tokens` function to extract comments related to the tokens.\n- The `Token` class is used to encapsulate the structure of each token, while the `Comment` class is utilized to manage comment details. The method `get_token()` from the `yaml_loader` retrieves tokens one at a time, and `check_token()` and `peek_token()` are used to manage the flow of token extraction.",
        "signature": "def token_or_comment_generator(buffer):",
        "type": "Function",
        "class_signature": null
      }
    },
    "yamllint/rules/indentation.py": {
      "Parent.__repr__": {
        "code": "    def __repr__(self):\n        \"\"\"Return a string representation of the Parent instance, displaying its type and indentation level.\n\nThe method uses a constant tuple `labels`, which maps integer values representing different types of YAML structure (defined in the surrounding code) to their corresponding string names. The `self.type` attribute is indexed in `labels` to obtain this string, while `self.indent` provides the indentation level of the current instance. The output format is `\"{label}:{indent}\"`, which allows for clarity in identifying the type of YAML structure associated with this Parent instance.\n\nReturns:\n    str: A string indicating the type and indentation of the Parent instance.\"\"\"\n        return f'{labels[self.type]}:{self.indent}'",
        "docstring": "Return a string representation of the Parent instance, displaying its type and indentation level.\n\nThe method uses a constant tuple `labels`, which maps integer values representing different types of YAML structure (defined in the surrounding code) to their corresponding string names. The `self.type` attribute is indexed in `labels` to obtain this string, while `self.indent` provides the indentation level of the current instance. The output format is `\"{label}:{indent}\"`, which allows for clarity in identifying the type of YAML structure associated with this Parent instance.\n\nReturns:\n    str: A string indicating the type and indentation of the Parent instance.",
        "signature": "def __repr__(self):",
        "type": "Method",
        "class_signature": "class Parent:"
      },
      "check": {
        "code": "def check(conf, token, prev, next, nextnext, context):\n    \"\"\"Validate the indentation of YAML tokens based on specified formatting rules.\n\nParameters:\n- conf (dict): Configuration dictionary containing indentation settings. It includes:\n  - 'spaces' (int or str): Defines indentation width, can be a specific number of spaces or 'consistent'.\n  - 'indent-sequences' (bool or str): Controls whether block sequences should be indented.\n  - 'check-multi-line-strings' (bool): Specifies if indentation in multi-line strings should be checked.\n- token (yaml.Token): The current YAML token being processed.\n- prev (yaml.Token): The previous token for context during validation.\n- next (yaml.Token): The next token, used for forward context.\n- nextnext (yaml.Token): The token after next, for further context in validation.\n- context (dict): Dictionary maintaining the current state, including:\n  - 'stack' (list): Tracks the indentation levels during parsing.\n  - 'cur_line' (int): The current line being processed.\n  - 'spaces' (int or str): The configured spaces setting.\n\nReturns:\n- generator: Yields LintProblem instances if any indentation issues are found, or asserts if a state inconsistency occurs.\n\nThis function interacts with the `_check` function to lint indentation and handles exceptions gracefully, yielding appropriate problems when unexpected tokens are detected.\"\"\"\n    try:\n        yield from _check(conf, token, prev, next, nextnext, context)\n    except AssertionError:\n        yield LintProblem(token.start_mark.line + 1, token.start_mark.column + 1, 'cannot infer indentation: unexpected token')",
        "docstring": "Validate the indentation of YAML tokens based on specified formatting rules.\n\nParameters:\n- conf (dict): Configuration dictionary containing indentation settings. It includes:\n  - 'spaces' (int or str): Defines indentation width, can be a specific number of spaces or 'consistent'.\n  - 'indent-sequences' (bool or str): Controls whether block sequences should be indented.\n  - 'check-multi-line-strings' (bool): Specifies if indentation in multi-line strings should be checked.\n- token (yaml.Token): The current YAML token being processed.\n- prev (yaml.Token): The previous token for context during validation.\n- next (yaml.Token): The next token, used for forward context.\n- nextnext (yaml.Token): The token after next, for further context in validation.\n- context (dict): Dictionary maintaining the current state, including:\n  - 'stack' (list): Tracks the indentation levels during parsing.\n  - 'cur_line' (int): The current line being processed.\n  - 'spaces' (int or str): The configured spaces setting.\n\nReturns:\n- generator: Yields LintProblem instances if any indentation issues are found, or asserts if a state inconsistency occurs.\n\nThis function interacts with the `_check` function to lint indentation and handles exceptions gracefully, yielding appropriate problems when unexpected tokens are detected.",
        "signature": "def check(conf, token, prev, next, nextnext, context):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "yamllint/parser.py:token_or_comment_generator": {
      "yamllint/parser.py": {
        "Token.__init__": {
          "code": "    def __init__(self, line_no, curr, prev, next, nextnext):\n        self.line_no = line_no\n        self.curr = curr\n        self.prev = prev\n        self.next = next\n        self.nextnext = nextnext",
          "docstring": "",
          "signature": "def __init__(self, line_no, curr, prev, next, nextnext):",
          "type": "Method",
          "class_signature": "class Token:"
        },
        "comments_between_tokens": {
          "code": "def comments_between_tokens(token1, token2):\n    \"\"\"Find all comments between two tokens\"\"\"\n    if token2 is None:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:]\n    elif token1.end_mark.line == token2.start_mark.line and (not isinstance(token1, yaml.StreamStartToken)) and (not isinstance(token2, yaml.StreamEndToken)):\n        return\n    else:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:token2.start_mark.pointer]\n    line_no = token1.end_mark.line + 1\n    column_no = token1.end_mark.column + 1\n    pointer = token1.end_mark.pointer\n    comment_before = None\n    for line in buf.split('\\n'):\n        pos = line.find('#')\n        if pos != -1:\n            comment = Comment(line_no, column_no + pos, token1.end_mark.buffer, pointer + pos, token1, token2, comment_before)\n            yield comment\n            comment_before = comment\n        pointer += len(line) + 1\n        line_no += 1\n        column_no = 1",
          "docstring": "Find all comments between two tokens",
          "signature": "def comments_between_tokens(token1, token2):",
          "type": "Function",
          "class_signature": null
        }
      }
    },
    "yamllint/rules/indentation.py:check": {
      "yamllint/rules/indentation.py": {
        "_check": {
          "code": "def _check(conf, token, prev, next, nextnext, context):\n    if 'stack' not in context:\n        context['stack'] = [Parent(ROOT, 0)]\n        context['cur_line'] = -1\n        context['spaces'] = conf['spaces']\n        context['indent-sequences'] = conf['indent-sequences']\n    is_visible = not isinstance(token, (yaml.StreamStartToken, yaml.StreamEndToken)) and (not isinstance(token, yaml.BlockEndToken)) and (not (isinstance(token, yaml.ScalarToken) and token.value == ''))\n    first_in_line = is_visible and token.start_mark.line + 1 > context['cur_line']\n\n    def detect_indent(base_indent, next):\n        if not isinstance(context['spaces'], int):\n            context['spaces'] = next.start_mark.column - base_indent\n        return base_indent + context['spaces']\n    if first_in_line:\n        found_indentation = token.start_mark.column\n        expected = context['stack'][-1].indent\n        if isinstance(token, (yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken)):\n            expected = context['stack'][-1].line_indent\n        elif context['stack'][-1].type == KEY and context['stack'][-1].explicit_key and (not isinstance(token, yaml.ValueToken)):\n            expected = detect_indent(expected, token)\n        if found_indentation != expected:\n            if expected < 0:\n                message = f'wrong indentation: expected at least {found_indentation + 1}'\n            else:\n                message = f'wrong indentation: expected {expected} but found {found_indentation}'\n            yield LintProblem(token.start_mark.line + 1, found_indentation + 1, message)\n    if isinstance(token, yaml.ScalarToken) and conf['check-multi-line-strings']:\n        yield from check_scalar_indentation(conf, token, context)\n    if is_visible:\n        context['cur_line'] = get_real_end_line(token)\n        if first_in_line:\n            context['cur_line_indent'] = found_indentation\n    if isinstance(token, yaml.BlockMappingStartToken):\n        assert isinstance(next, yaml.KeyToken)\n        assert next.start_mark.line == token.start_mark.line\n        indent = token.start_mark.column\n        context['stack'].append(Parent(B_MAP, indent))\n    elif isinstance(token, yaml.FlowMappingStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(context['cur_line_indent'], next)\n        context['stack'].append(Parent(F_MAP, indent, line_indent=context['cur_line_indent']))\n    elif isinstance(token, yaml.BlockSequenceStartToken):\n        assert isinstance(next, yaml.BlockEntryToken)\n        assert next.start_mark.line == token.start_mark.line\n        indent = token.start_mark.column\n        context['stack'].append(Parent(B_SEQ, indent))\n    elif isinstance(token, yaml.BlockEntryToken) and (not isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken))):\n        if context['stack'][-1].type != B_SEQ:\n            context['stack'].append(Parent(B_SEQ, token.start_mark.column))\n            context['stack'][-1].implicit_block_seq = True\n        if next.start_mark.line == token.end_mark.line:\n            indent = next.start_mark.column\n        elif next.start_mark.column == token.start_mark.column:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(token.start_mark.column, next)\n        context['stack'].append(Parent(B_ENT, indent))\n    elif isinstance(token, yaml.FlowSequenceStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(context['cur_line_indent'], next)\n        context['stack'].append(Parent(F_SEQ, indent, line_indent=context['cur_line_indent']))\n    elif isinstance(token, yaml.KeyToken):\n        indent = context['stack'][-1].indent\n        context['stack'].append(Parent(KEY, indent))\n        context['stack'][-1].explicit_key = is_explicit_key(token)\n    elif isinstance(token, yaml.ValueToken):\n        assert context['stack'][-1].type == KEY\n        if isinstance(next, (yaml.AnchorToken, yaml.TagToken)):\n            if next.start_mark.line == prev.start_mark.line and next.start_mark.line < nextnext.start_mark.line:\n                next = nextnext\n        if not isinstance(next, (yaml.BlockEndToken, yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken, yaml.KeyToken)):\n            if context['stack'][-1].explicit_key:\n                indent = detect_indent(context['stack'][-1].indent, next)\n            elif next.start_mark.line == prev.start_mark.line:\n                indent = next.start_mark.column\n            elif isinstance(next, (yaml.BlockSequenceStartToken, yaml.BlockEntryToken)):\n                if context['indent-sequences'] is False:\n                    indent = context['stack'][-1].indent\n                elif context['indent-sequences'] is True:\n                    if context['spaces'] == 'consistent' and next.start_mark.column - context['stack'][-1].indent == 0:\n                        indent = -1\n                    else:\n                        indent = detect_indent(context['stack'][-1].indent, next)\n                elif next.start_mark.column == context['stack'][-1].indent:\n                    if context['indent-sequences'] == 'consistent':\n                        context['indent-sequences'] = False\n                    indent = context['stack'][-1].indent\n                else:\n                    if context['indent-sequences'] == 'consistent':\n                        context['indent-sequences'] = True\n                    indent = detect_indent(context['stack'][-1].indent, next)\n            else:\n                indent = detect_indent(context['stack'][-1].indent, next)\n            context['stack'].append(Parent(VAL, indent))\n    consumed_current_token = False\n    while True:\n        if context['stack'][-1].type == F_SEQ and isinstance(token, yaml.FlowSequenceEndToken) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type == F_MAP and isinstance(token, yaml.FlowMappingEndToken) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type in (B_MAP, B_SEQ) and isinstance(token, yaml.BlockEndToken) and (not context['stack'][-1].implicit_block_seq) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type == B_ENT and (not isinstance(token, yaml.BlockEntryToken)) and context['stack'][-2].implicit_block_seq and (not isinstance(token, (yaml.AnchorToken, yaml.TagToken))) and (not isinstance(next, yaml.BlockEntryToken)):\n            context['stack'].pop()\n            context['stack'].pop()\n        elif context['stack'][-1].type == B_ENT and isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken)):\n            context['stack'].pop()\n        elif context['stack'][-1].type == VAL and (not isinstance(token, yaml.ValueToken)) and (not isinstance(token, (yaml.AnchorToken, yaml.TagToken))):\n            assert context['stack'][-2].type == KEY\n            context['stack'].pop()\n            context['stack'].pop()\n        elif context['stack'][-1].type == KEY and isinstance(next, (yaml.BlockEndToken, yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken, yaml.KeyToken)):\n            context['stack'].pop()\n        else:\n            break",
          "docstring": "",
          "signature": "def _check(conf, token, prev, next, nextnext, context):",
          "type": "Function",
          "class_signature": null
        }
      }
    }
  },
  "call_tree": {
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_anchors": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:Comment:Comment": {},
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/rules/indentation.py:detect_indent": {},
            "yamllint/linter.py:LintProblem:__init__": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_flows": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/rules/indentation.py:detect_indent": {},
            "yamllint/linter.py:LintProblem:__init__": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_flows_imbrication": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_non_indented_sequences": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/rules/indentation.py:detect_indent": {},
            "yamllint/linter.py:LintProblem:__init__": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_simple_mapping": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/linter.py:LintProblem:__init__": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_simple_sequence": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {}
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/rules/indentation.py:detect_indent": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:test_tags": {
      "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:full_stack": {
        "yamllint/parser.py:token_or_comment_generator": {
          "yamllint/parser.py:Token:__init__": {},
          "yamllint/parser.py:comments_between_tokens": {
            "yamllint/parser.py:Comment:__init__": {}
          }
        },
        "yamllint/rules/indentation.py:check": {
          "yamllint/rules/indentation.py:_check": {
            "yamllint/rules/indentation.py:Parent:__init__": {},
            "yamllint/rules/common.py:get_real_end_line": {},
            "yamllint/rules/common.py:is_explicit_key": {},
            "yamllint/rules/indentation.py:detect_indent": {},
            "yamllint/linter.py:LintProblem:__init__": {}
          }
        },
        "modified_testcases/rules/test_indentation.py:IndentationStackTestCase:format_stack": {
          "yamllint/rules/indentation.py:Parent:__repr__": {}
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_anchors": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {
                "yamllint/config.py:YamlLintConfig:YamlLintConfig": {}
              }
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_broken_flows": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {},
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_clear_sequence_item": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_cleared_flows": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {},
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_consistent_spaces": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_consistent_spaces_and_indent_sequences": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_direct_flows": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {},
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_disabled": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_empty_value": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_explicit_block_mappings": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_first_line": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {},
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/linter.py:LintProblem:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_flows_imbrication": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_indent_sequences_consistent": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_indent_sequences_whatever": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {
            "yamllint/linter.py:LintProblem:__init__": {}
          },
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_multi_lines": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_nested_collections": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {
            "yamllint/linter.py:LintProblem:__init__": {}
          },
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_nested_collections_with_spaces_consistent": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/linter.py:LintProblem:__init__": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_one_space": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_over_indented": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {
            "yamllint/linter.py:LintProblem:__init__": {}
          },
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_return": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {
            "yamllint/linter.py:LintProblem:__init__": {}
          },
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {},
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_tags": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {
                  "yamllint/parser.py:Comment:__init__": {}
                }
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/rules/common.py:is_explicit_key": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/rules/comments.py:check": {
              "yamllint/parser.py:Comment:is_inline": {}
            },
            "yamllint/rules/comments_indentation.py:check": {},
            "yamllint/linter.py:process_comment": {
              "yamllint/parser.py:Comment:__str__": {}
            },
            "yamllint/parser.py:Comment:is_inline": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_three_spaces": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_two_spaces": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:IndentationTestCase:test_under_indented": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {
            "yamllint/linter.py:LintProblem:__init__": {}
          },
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/document_start.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {},
                "yamllint/linter.py:LintProblem:__init__": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_basics_folded_style": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_basics_literal_style": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_basics_plain": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_basics_quoted": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {}
          }
        }
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_check_multi_line_folded_style": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {
                    "yamllint/rules/indentation.py:detect_indent": {}
                  },
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_check_multi_line_literal_style": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {
                    "yamllint/rules/indentation.py:detect_indent": {}
                  },
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_check_multi_line_plain": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {},
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_check_multi_line_quoted": {
      "tests/common.py:RuleTestCase:check": {
        "yamllint/linter.py:LintProblem:__init__": {},
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {
              "yamllint/rules/common.py:spaces_after": {},
              "yamllint/rules/common.py:spaces_before": {}
            },
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {},
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__eq__": {},
        "yamllint/linter.py:LintProblem:__lt__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_consistent": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {
                    "yamllint/rules/indentation.py:detect_indent": {}
                  },
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_paragraph_double_quoted": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {},
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__lt__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_paragraph_folded": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {
                    "yamllint/rules/indentation.py:detect_indent": {}
                  },
                  "yamllint/linter.py:LintProblem:__init__": {}
                }
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__lt__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_paragraph_literal": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {
                    "yamllint/rules/indentation.py:detect_indent": {}
                  },
                  "yamllint/linter.py:LintProblem:__init__": {}
                }
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__lt__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_paragraph_plain": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {},
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__lt__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "modified_testcases/rules/test_indentation.py:ScalarIndentationTestCase:test_paragraph_single_quoted": {
      "tests/common.py:RuleTestCase:check": {
        "tests/common.py:RuleTestCase:build_fake_config": {
          "yamllint/config.py:YamlLintConfig:__init__": {
            "yamllint/config.py:YamlLintConfig:parse": {
              "yamllint/config.py:get_extended_config_file": {},
              "yamllint/config.py:YamlLintConfig:__init__": {
                "[ignored_or_cut_off]": "..."
              },
              "yamllint/config.py:YamlLintConfig:extend": {}
            },
            "yamllint/config.py:YamlLintConfig:validate": {
              "yamllint/rules/__init__.py:get": {},
              "yamllint/config.py:validate_rule_conf": {}
            }
          }
        },
        "yamllint/linter.py:run": {},
        "yamllint/linter.py:_run": {
          "yamllint/parser.py:line_generator": {
            "yamllint/parser.py:Line:__init__": {}
          },
          "yamllint/parser.py:Line:content": {},
          "yamllint/linter.py:get_syntax_error": {},
          "yamllint/linter.py:get_cosmetic_problems": {
            "yamllint/config.py:YamlLintConfig:enabled_rules": {
              "yamllint/rules/__init__.py:get": {}
            },
            "yamllint/linter.py:DisableDirective": {},
            "yamllint/linter.py:DisableLineDirective": {},
            "yamllint/linter.py:__init__": {},
            "yamllint/parser.py:token_or_comment_or_line_generator": {
              "yamllint/parser.py:token_or_comment_generator": {
                "yamllint/parser.py:Token:__init__": {},
                "yamllint/parser.py:comments_between_tokens": {}
              },
              "yamllint/parser.py:line_generator": {
                "yamllint/parser.py:Line:__init__": {}
              }
            },
            "yamllint/rules/anchors.py:check": {},
            "yamllint/rules/braces.py:check": {},
            "yamllint/rules/brackets.py:check": {},
            "yamllint/rules/colons.py:check": {
              "yamllint/rules/common.py:is_explicit_key": {},
              "yamllint/rules/common.py:spaces_before": {},
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/commas.py:check": {},
            "yamllint/rules/hyphens.py:check": {
              "yamllint/rules/common.py:spaces_after": {}
            },
            "yamllint/rules/indentation.py:check": {
              "yamllint/rules/indentation.py:_check": {
                "yamllint/rules/indentation.py:Parent:__init__": {},
                "yamllint/rules/common.py:get_real_end_line": {},
                "yamllint/rules/common.py:is_explicit_key": {},
                "yamllint/rules/indentation.py:check_scalar_indentation": {
                  "yamllint/rules/indentation.py:compute_expected_indent": {},
                  "yamllint/linter.py:LintProblem:__init__": {}
                },
                "yamllint/rules/indentation.py:detect_indent": {}
              }
            },
            "yamllint/rules/key_duplicates.py:check": {
              "yamllint/rules/key_duplicates.py:Parent:__init__": {}
            },
            "yamllint/rules/truthy.py:check": {
              "yamllint/rules/truthy.py:yaml_spec_version_for_document": {}
            },
            "yamllint/rules/empty_lines.py:check": {},
            "yamllint/rules/line_length.py:check": {},
            "yamllint/rules/new_line_at_end_of_file.py:check": {},
            "yamllint/rules/new_lines.py:check": {},
            "yamllint/rules/trailing_spaces.py:check": {},
            "yamllint/linter.py:is_disabled_by_directive": {}
          }
        },
        "yamllint/linter.py:LintProblem:__init__": {},
        "yamllint/linter.py:LintProblem:__lt__": {},
        "yamllint/linter.py:LintProblem:__eq__": {}
      }
    },
    "/mnt/sfs_turbo/yaxindu/tmp/yamllint-image-test_indentation/yamllint-test_indentation/tests/test_parser.py:ParserTestCase:test_token_or_comment_generator": {
      "yamllint/parser.py:Comment:Comment": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/yamllint-image-test_indentation/yamllint-test_indentation/modified_testcases/test_parser.py:ParserTestCase:test_token_or_comment_generator": {
      "yamllint/parser.py:Comment:Comment": {}
    }
  },
  "PRD": "# PROJECT NAME: yamllint-test_indentation\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamllint/\n    \u251c\u2500\u2500 parser.py\n    \u2502   \u251c\u2500\u2500 Comment.Comment\n    \u2502   \u2514\u2500\u2500 token_or_comment_generator\n    \u2514\u2500\u2500 rules/\n        \u2514\u2500\u2500 indentation.py\n            \u251c\u2500\u2500 Parent.__repr__\n            \u2514\u2500\u2500 check\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and enforce indentation consistency and formatting rules within YAML documents. Its primary functionality is to ensure compliance with predefined indentation configurations, such as the number of spaces, sequence alignment, and multi-line string formatting. It supports advanced validations, such as detecting inconsistent spaces, over-indentation, under-indentation, and proper alignment for nested structures, including maps, sequences, and flow collections. This module addresses the problem of YAML misalignment and syntax errors, providing developers with a tool to maintain standardized and readable YAML files, which is critical for configuration management, automation pipelines, and overall reliability in YAML-based workflows.\n\n## FILE 1: yamllint/parser.py\n\n- FUNCTION NAME: token_or_comment_generator\n  - SIGNATURE: def token_or_comment_generator(buffer):\n  - DOCSTRING: \n```python\n\"\"\"\nGenerates tokens and comments from a given YAML buffer.\n\nParameters:\n- buffer (str): A string containing the YAML content to be processed.\n\nReturns:\n- Yields a Token object for each token found in the buffer, which includes the current token, its previous and next tokens, and the next-next token. Additionally, it yields Comment objects for comments found between the tokens.\n\nDependencies:\n- This function relies on the `yaml` module, specifically `yaml.BaseLoader`, to parse the YAML content and retrieve tokens. It interacts with the `comments_between_tokens` function to extract comments related to the tokens.\n- The `Token` class is used to encapsulate the structure of each token, while the `Comment` class is utilized to manage comment details. The method `get_token()` from the `yaml_loader` retrieves tokens one at a time, and `check_token()` and `peek_token()` are used to manage the flow of token extraction.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - yamllint/parser.py:Token:__init__\n    - yamllint/parser.py:comments_between_tokens\n\n## FILE 2: yamllint/rules/indentation.py\n\n- FUNCTION NAME: check\n  - SIGNATURE: def check(conf, token, prev, next, nextnext, context):\n  - DOCSTRING: \n```python\n\"\"\"\nValidate the indentation of YAML tokens based on specified formatting rules.\n\nParameters:\n- conf (dict): Configuration dictionary containing indentation settings. It includes:\n  - 'spaces' (int or str): Defines indentation width, can be a specific number of spaces or 'consistent'.\n  - 'indent-sequences' (bool or str): Controls whether block sequences should be indented.\n  - 'check-multi-line-strings' (bool): Specifies if indentation in multi-line strings should be checked.\n- token (yaml.Token): The current YAML token being processed.\n- prev (yaml.Token): The previous token for context during validation.\n- next (yaml.Token): The next token, used for forward context.\n- nextnext (yaml.Token): The token after next, for further context in validation.\n- context (dict): Dictionary maintaining the current state, including:\n  - 'stack' (list): Tracks the indentation levels during parsing.\n  - 'cur_line' (int): The current line being processed.\n  - 'spaces' (int or str): The configured spaces setting.\n\nReturns:\n- generator: Yields LintProblem instances if any indentation issues are found, or asserts if a state inconsistency occurs.\n\nThis function interacts with the `_check` function to lint indentation and handles exceptions gracefully, yielding appropriate problems when unexpected tokens are detected.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - yamllint/rules/indentation.py:_check\n\n- CLASS METHOD: Parent.__repr__\n  - CLASS SIGNATURE: class Parent:\n  - SIGNATURE: def __repr__(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a string representation of the Parent instance, displaying its type and indentation level.\n\nThe method uses a constant tuple `labels`, which maps integer values representing different types of YAML structure (defined in the surrounding code) to their corresponding string names. The `self.type` attribute is indexed in `labels` to obtain this string, while `self.indent` provides the indentation level of the current instance. The output format is `\"{label}:{indent}\"`, which allows for clarity in identifying the type of YAML structure associated with this Parent instance.\n\nReturns:\n    str: A string indicating the type and indentation of the Parent instance.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamllint/parser.py": "import yaml\n\nclass Line:\n\n    def __init__(self, line_no, buffer, start, end):\n        self.line_no = line_no\n        self.start = start\n        self.end = end\n        self.buffer = buffer\n\n    @property\n    def content(self):\n        return self.buffer[self.start:self.end]\n\nclass Token:\n\n    def __init__(self, line_no, curr, prev, next, nextnext):\n        self.line_no = line_no\n        self.curr = curr\n        self.prev = prev\n        self.next = next\n        self.nextnext = nextnext\n\nclass Comment:\n\n    def __init__(self, line_no, column_no, buffer, pointer, token_before=None, token_after=None, comment_before=None):\n        self.line_no = line_no\n        self.column_no = column_no\n        self.buffer = buffer\n        self.pointer = pointer\n        self.token_before = token_before\n        self.token_after = token_after\n        self.comment_before = comment_before\n\n    def __str__(self):\n        end = self.buffer.find('\\n', self.pointer)\n        if end == -1:\n            end = self.buffer.find('\\x00', self.pointer)\n        if end != -1:\n            return self.buffer[self.pointer:end]\n        return self.buffer[self.pointer:]\n\n    def __eq__(self, other):\n        return isinstance(other, Comment) and self.line_no == other.line_no and (self.column_no == other.column_no) and (str(self) == str(other))\n\n    def is_inline(self):\n        return not isinstance(self.token_before, yaml.StreamStartToken) and self.line_no == self.token_before.end_mark.line + 1 and (self.buffer[self.token_before.end_mark.pointer - 1] != '\\n')\n\ndef line_generator(buffer):\n    line_no = 1\n    cur = 0\n    next = buffer.find('\\n')\n    while next != -1:\n        if next > 0 and buffer[next - 1] == '\\r':\n            yield Line(line_no, buffer, start=cur, end=next - 1)\n        else:\n            yield Line(line_no, buffer, start=cur, end=next)\n        cur = next + 1\n        next = buffer.find('\\n', cur)\n        line_no += 1\n    yield Line(line_no, buffer, start=cur, end=len(buffer))\n\ndef comments_between_tokens(token1, token2):\n    \"\"\"Find all comments between two tokens\"\"\"\n    if token2 is None:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:]\n    elif token1.end_mark.line == token2.start_mark.line and (not isinstance(token1, yaml.StreamStartToken)) and (not isinstance(token2, yaml.StreamEndToken)):\n        return\n    else:\n        buf = token1.end_mark.buffer[token1.end_mark.pointer:token2.start_mark.pointer]\n    line_no = token1.end_mark.line + 1\n    column_no = token1.end_mark.column + 1\n    pointer = token1.end_mark.pointer\n    comment_before = None\n    for line in buf.split('\\n'):\n        pos = line.find('#')\n        if pos != -1:\n            comment = Comment(line_no, column_no + pos, token1.end_mark.buffer, pointer + pos, token1, token2, comment_before)\n            yield comment\n            comment_before = comment\n        pointer += len(line) + 1\n        line_no += 1\n        column_no = 1\n\ndef token_or_comment_or_line_generator(buffer):\n    \"\"\"Generator that mixes tokens and lines, ordering them by line number\"\"\"\n    tok_or_com_gen = token_or_comment_generator(buffer)\n    line_gen = line_generator(buffer)\n    tok_or_com = next(tok_or_com_gen, None)\n    line = next(line_gen, None)\n    while tok_or_com is not None or line is not None:\n        if tok_or_com is None or (line is not None and tok_or_com.line_no > line.line_no):\n            yield line\n            line = next(line_gen, None)\n        else:\n            yield tok_or_com\n            tok_or_com = next(tok_or_com_gen, None)",
    "yamllint/rules/indentation.py": "\"\"\"\nUse this rule to control the indentation.\n\n.. rubric:: Options\n\n* ``spaces`` defines the indentation width, in spaces. Set either to an integer\n  (e.g. ``2`` or ``4``, representing the number of spaces in an indentation\n  level) or to ``consistent`` to allow any number, as long as it remains the\n  same within the file.\n* ``indent-sequences`` defines whether block sequences should be indented or\n  not (when in a mapping, this indentation is not mandatory -- some people\n  perceive the ``-`` as part of the indentation). Possible values: ``true``,\n  ``false``, ``whatever`` and ``consistent``. ``consistent`` requires either\n  all block sequences to be indented, or none to be. ``whatever`` means either\n  indenting or not indenting individual block sequences is OK.\n* ``check-multi-line-strings`` defines whether to lint indentation in\n  multi-line strings. Set to ``true`` to enable, ``false`` to disable.\n\n.. rubric:: Default values (when enabled)\n\n.. code-block:: yaml\n\n rules:\n   indentation:\n     spaces: consistent\n     indent-sequences: true\n     check-multi-line-strings: false\n\n.. rubric:: Examples\n\n#. With ``indentation: {spaces: 1}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n     - name: Unix\n       date: 1969\n     - name: Linux\n       date: 1991\n    nest:\n     recurse:\n      - haystack:\n         needle\n\n#. With ``indentation: {spaces: 4}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n        - name: Unix\n          date: 1969\n        - name: Linux\n          date: 1991\n    nest:\n        recurse:\n            - haystack:\n                  needle\n\n   the following code snippet would **FAIL**:\n   ::\n\n    history:\n      - name: Unix\n        date: 1969\n      - name: Linux\n        date: 1991\n    nest:\n      recurse:\n        - haystack:\n            needle\n\n#. With ``indentation: {spaces: consistent}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    history:\n       - name: Unix\n         date: 1969\n       - name: Linux\n         date: 1991\n    nest:\n       recurse:\n          - haystack:\n               needle\n\n   the following code snippet would **FAIL**:\n   ::\n\n    some:\n      Russian:\n          dolls\n\n#. With ``indentation: {spaces: 2, indent-sequences: false}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    list:\n    - flying\n    - spaghetti\n    - monster\n\n   the following code snippet would **FAIL**:\n   ::\n\n    list:\n      - flying\n      - spaghetti\n      - monster\n\n#. With ``indentation: {spaces: 2, indent-sequences: whatever}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    list:\n    - flying:\n      - spaghetti\n      - monster\n    - not flying:\n        - spaghetti\n        - sauce\n\n#. With ``indentation: {spaces: 2, indent-sequences: consistent}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    - flying:\n      - spaghetti\n      - monster\n    - not flying:\n      - spaghetti\n      - sauce\n\n   the following code snippet would **FAIL**:\n   ::\n\n    - flying:\n        - spaghetti\n        - monster\n    - not flying:\n      - spaghetti\n      - sauce\n\n#. With ``indentation: {spaces: 4, check-multi-line-strings: true}``\n\n   the following code snippet would **PASS**:\n   ::\n\n    Blaise Pascal:\n        Je vous \u00e9cris une longue lettre parce que\n        je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **PASS**:\n   ::\n\n    Blaise Pascal: Je vous \u00e9cris une longue lettre parce que\n                   je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **FAIL**:\n   ::\n\n    Blaise Pascal: Je vous \u00e9cris une longue lettre parce que\n      je n'ai pas le temps d'en \u00e9crire une courte.\n\n   the following code snippet would **FAIL**:\n   ::\n\n    C code:\n        void main() {\n            printf(\"foo\");\n        }\n\n   the following code snippet would **PASS**:\n   ::\n\n    C code:\n        void main() {\n        printf(\"bar\");\n        }\n\"\"\"\nimport yaml\nfrom yamllint.linter import LintProblem\nfrom yamllint.rules.common import get_real_end_line, is_explicit_key\nID = 'indentation'\nTYPE = 'token'\nCONF = {'spaces': (int, 'consistent'), 'indent-sequences': (bool, 'whatever', 'consistent'), 'check-multi-line-strings': bool}\nDEFAULT = {'spaces': 'consistent', 'indent-sequences': True, 'check-multi-line-strings': False}\nROOT, B_MAP, F_MAP, B_SEQ, F_SEQ, B_ENT, KEY, VAL = range(8)\nlabels = ('ROOT', 'B_MAP', 'F_MAP', 'B_SEQ', 'F_SEQ', 'B_ENT', 'KEY', 'VAL')\n\nclass Parent:\n\n    def __init__(self, type, indent, line_indent=None):\n        self.type = type\n        self.indent = indent\n        self.line_indent = line_indent\n        self.explicit_key = False\n        self.implicit_block_seq = False\n\ndef check_scalar_indentation(conf, token, context):\n    if token.start_mark.line == token.end_mark.line:\n        return\n\n    def compute_expected_indent(found_indent):\n\n        def detect_indent(base_indent):\n            if not isinstance(context['spaces'], int):\n                context['spaces'] = found_indent - base_indent\n            return base_indent + context['spaces']\n        if token.plain:\n            return token.start_mark.column\n        elif token.style in ('\"', \"'\"):\n            return token.start_mark.column + 1\n        elif token.style in ('>', '|'):\n            if context['stack'][-1].type == B_ENT:\n                return detect_indent(token.start_mark.column)\n            elif context['stack'][-1].type == KEY:\n                assert context['stack'][-1].explicit_key\n                return detect_indent(token.start_mark.column)\n            elif context['stack'][-1].type == VAL:\n                if token.start_mark.line + 1 > context['cur_line']:\n                    return detect_indent(context['stack'][-1].indent)\n                elif context['stack'][-2].explicit_key:\n                    return detect_indent(token.start_mark.column)\n                else:\n                    return detect_indent(context['stack'][-2].indent)\n            else:\n                return detect_indent(context['stack'][-1].indent)\n    expected_indent = None\n    line_no = token.start_mark.line + 1\n    line_start = token.start_mark.pointer\n    while True:\n        line_start = token.start_mark.buffer.find('\\n', line_start, token.end_mark.pointer - 1) + 1\n        if line_start == 0:\n            break\n        line_no += 1\n        indent = 0\n        while token.start_mark.buffer[line_start + indent] == ' ':\n            indent += 1\n        if token.start_mark.buffer[line_start + indent] == '\\n':\n            continue\n        if expected_indent is None:\n            expected_indent = compute_expected_indent(indent)\n        if indent != expected_indent:\n            yield LintProblem(line_no, indent + 1, f'wrong indentation: expected {expected_indent}but found {indent}')\n\ndef _check(conf, token, prev, next, nextnext, context):\n    if 'stack' not in context:\n        context['stack'] = [Parent(ROOT, 0)]\n        context['cur_line'] = -1\n        context['spaces'] = conf['spaces']\n        context['indent-sequences'] = conf['indent-sequences']\n    is_visible = not isinstance(token, (yaml.StreamStartToken, yaml.StreamEndToken)) and (not isinstance(token, yaml.BlockEndToken)) and (not (isinstance(token, yaml.ScalarToken) and token.value == ''))\n    first_in_line = is_visible and token.start_mark.line + 1 > context['cur_line']\n\n    def detect_indent(base_indent, next):\n        if not isinstance(context['spaces'], int):\n            context['spaces'] = next.start_mark.column - base_indent\n        return base_indent + context['spaces']\n    if first_in_line:\n        found_indentation = token.start_mark.column\n        expected = context['stack'][-1].indent\n        if isinstance(token, (yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken)):\n            expected = context['stack'][-1].line_indent\n        elif context['stack'][-1].type == KEY and context['stack'][-1].explicit_key and (not isinstance(token, yaml.ValueToken)):\n            expected = detect_indent(expected, token)\n        if found_indentation != expected:\n            if expected < 0:\n                message = f'wrong indentation: expected at least {found_indentation + 1}'\n            else:\n                message = f'wrong indentation: expected {expected} but found {found_indentation}'\n            yield LintProblem(token.start_mark.line + 1, found_indentation + 1, message)\n    if isinstance(token, yaml.ScalarToken) and conf['check-multi-line-strings']:\n        yield from check_scalar_indentation(conf, token, context)\n    if is_visible:\n        context['cur_line'] = get_real_end_line(token)\n        if first_in_line:\n            context['cur_line_indent'] = found_indentation\n    if isinstance(token, yaml.BlockMappingStartToken):\n        assert isinstance(next, yaml.KeyToken)\n        assert next.start_mark.line == token.start_mark.line\n        indent = token.start_mark.column\n        context['stack'].append(Parent(B_MAP, indent))\n    elif isinstance(token, yaml.FlowMappingStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(context['cur_line_indent'], next)\n        context['stack'].append(Parent(F_MAP, indent, line_indent=context['cur_line_indent']))\n    elif isinstance(token, yaml.BlockSequenceStartToken):\n        assert isinstance(next, yaml.BlockEntryToken)\n        assert next.start_mark.line == token.start_mark.line\n        indent = token.start_mark.column\n        context['stack'].append(Parent(B_SEQ, indent))\n    elif isinstance(token, yaml.BlockEntryToken) and (not isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken))):\n        if context['stack'][-1].type != B_SEQ:\n            context['stack'].append(Parent(B_SEQ, token.start_mark.column))\n            context['stack'][-1].implicit_block_seq = True\n        if next.start_mark.line == token.end_mark.line:\n            indent = next.start_mark.column\n        elif next.start_mark.column == token.start_mark.column:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(token.start_mark.column, next)\n        context['stack'].append(Parent(B_ENT, indent))\n    elif isinstance(token, yaml.FlowSequenceStartToken):\n        if next.start_mark.line == token.start_mark.line:\n            indent = next.start_mark.column\n        else:\n            indent = detect_indent(context['cur_line_indent'], next)\n        context['stack'].append(Parent(F_SEQ, indent, line_indent=context['cur_line_indent']))\n    elif isinstance(token, yaml.KeyToken):\n        indent = context['stack'][-1].indent\n        context['stack'].append(Parent(KEY, indent))\n        context['stack'][-1].explicit_key = is_explicit_key(token)\n    elif isinstance(token, yaml.ValueToken):\n        assert context['stack'][-1].type == KEY\n        if isinstance(next, (yaml.AnchorToken, yaml.TagToken)):\n            if next.start_mark.line == prev.start_mark.line and next.start_mark.line < nextnext.start_mark.line:\n                next = nextnext\n        if not isinstance(next, (yaml.BlockEndToken, yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken, yaml.KeyToken)):\n            if context['stack'][-1].explicit_key:\n                indent = detect_indent(context['stack'][-1].indent, next)\n            elif next.start_mark.line == prev.start_mark.line:\n                indent = next.start_mark.column\n            elif isinstance(next, (yaml.BlockSequenceStartToken, yaml.BlockEntryToken)):\n                if context['indent-sequences'] is False:\n                    indent = context['stack'][-1].indent\n                elif context['indent-sequences'] is True:\n                    if context['spaces'] == 'consistent' and next.start_mark.column - context['stack'][-1].indent == 0:\n                        indent = -1\n                    else:\n                        indent = detect_indent(context['stack'][-1].indent, next)\n                elif next.start_mark.column == context['stack'][-1].indent:\n                    if context['indent-sequences'] == 'consistent':\n                        context['indent-sequences'] = False\n                    indent = context['stack'][-1].indent\n                else:\n                    if context['indent-sequences'] == 'consistent':\n                        context['indent-sequences'] = True\n                    indent = detect_indent(context['stack'][-1].indent, next)\n            else:\n                indent = detect_indent(context['stack'][-1].indent, next)\n            context['stack'].append(Parent(VAL, indent))\n    consumed_current_token = False\n    while True:\n        if context['stack'][-1].type == F_SEQ and isinstance(token, yaml.FlowSequenceEndToken) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type == F_MAP and isinstance(token, yaml.FlowMappingEndToken) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type in (B_MAP, B_SEQ) and isinstance(token, yaml.BlockEndToken) and (not context['stack'][-1].implicit_block_seq) and (not consumed_current_token):\n            context['stack'].pop()\n            consumed_current_token = True\n        elif context['stack'][-1].type == B_ENT and (not isinstance(token, yaml.BlockEntryToken)) and context['stack'][-2].implicit_block_seq and (not isinstance(token, (yaml.AnchorToken, yaml.TagToken))) and (not isinstance(next, yaml.BlockEntryToken)):\n            context['stack'].pop()\n            context['stack'].pop()\n        elif context['stack'][-1].type == B_ENT and isinstance(next, (yaml.BlockEntryToken, yaml.BlockEndToken)):\n            context['stack'].pop()\n        elif context['stack'][-1].type == VAL and (not isinstance(token, yaml.ValueToken)) and (not isinstance(token, (yaml.AnchorToken, yaml.TagToken))):\n            assert context['stack'][-2].type == KEY\n            context['stack'].pop()\n            context['stack'].pop()\n        elif context['stack'][-1].type == KEY and isinstance(next, (yaml.BlockEndToken, yaml.FlowMappingEndToken, yaml.FlowSequenceEndToken, yaml.KeyToken)):\n            context['stack'].pop()\n        else:\n            break"
  }
}