{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_crash_report_event",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_crash_report_event.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.crash_report_event import CrashReportEvent\n\n\nclass TestCrashReportEvent(unittest.TestCase):\n    \"\"\" CrashReportEvent unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testCrashReportEvent(self):\n        \"\"\"\n        Test CrashReportEvent\n        \"\"\"\n        model = mparticle.models.crash_report_event.CrashReportEvent()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/crash_report_event.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass CrashReportEvent(object):\n\n    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, breadcrumbs=None, class_name=None, severity=None, message=None, stack_trace=None, exception_handled=None, topmost_context=None, pl_crash_report_file_base64=None, ios_image_base_address=None, ios_image_size=None, session_number=None):\n        \"\"\"\n        CrashReportEvent - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n            'breadcrumbs': 'list[BreadcrumbEvent]',\n            'class_name': 'str',\n            'severity': 'str',\n            'message': 'str',\n            'stack_trace': 'str',\n            'exception_handled': 'bool',\n            'topmost_context': 'str',\n            'pl_crash_report_file_base64': 'str',\n            'ios_image_base_address': 'int',\n            'ios_image_size': 'int',\n            'session_number': 'int'\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n            'breadcrumbs': 'breadcrumbs',\n            'class_name': 'class_name',\n            'severity': 'severity',\n            'message': 'message',\n            'stack_trace': 'stack_trace',\n            'exception_handled': 'exception_handled',\n            'topmost_context': 'topmost_context',\n            'pl_crash_report_file_base64': 'pl_crash_report_file_base64',\n            'ios_image_base_address': 'ios_image_base_address',\n            'ios_image_size': 'ios_image_size',\n            'session_number': 'session_number'\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._breadcrumbs = breadcrumbs\n        self._class_name = class_name\n        self._severity = severity\n        self._message = message\n        self._stack_trace = stack_trace\n        self._exception_handled = exception_handled\n        self._topmost_context = topmost_context\n        self._pl_crash_report_file_base64 = pl_crash_report_file_base64\n        self._ios_image_base_address = ios_image_base_address\n        self._ios_image_size = ios_image_size\n        self._session_number = session_number\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CrashReportEvent.\n\n\n        :return: The timestamp_unixtime_ms of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CrashReportEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this CrashReportEvent.\n\n\n        :return: The event_id of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this CrashReportEvent.\n\n\n        :param event_id: The event_id of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this CrashReportEvent.\n\n\n        :return: The source_message_id of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this CrashReportEvent.\n\n\n        :param source_message_id: The source_message_id of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this CrashReportEvent.\n\n\n        :return: The session_id of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this CrashReportEvent.\n\n\n        :param session_id: The session_id of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this CrashReportEvent.\n\n\n        :return: The session_uuid of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this CrashReportEvent.\n\n\n        :param session_uuid: The session_uuid of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this CrashReportEvent.\n\n\n        :return: The custom_attributes of this CrashReportEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this CrashReportEvent.\n\n\n        :param custom_attributes: The custom_attributes of this CrashReportEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CrashReportEvent.\n\n\n        :return: The location of this CrashReportEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CrashReportEvent.\n\n\n        :param location: The location of this CrashReportEvent.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this CrashReportEvent.\n\n\n        :return: The device_current_state of this CrashReportEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this CrashReportEvent.\n\n\n        :param device_current_state: The device_current_state of this CrashReportEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    @property\n    def breadcrumbs(self):\n        \"\"\"\n        Gets the breadcrumbs of this CrashReportEvent.\n\n\n        :return: The breadcrumbs of this CrashReportEvent.\n        :rtype: list[BreadcrumbEvent]\n        \"\"\"\n        return self._breadcrumbs\n\n    @breadcrumbs.setter\n    def breadcrumbs(self, breadcrumbs):\n        \"\"\"\n        Sets the breadcrumbs of this CrashReportEvent.\n\n\n        :param breadcrumbs: The breadcrumbs of this CrashReportEvent.\n        :type: list[BreadcrumbEvent]\n        \"\"\"\n\n        self._breadcrumbs = breadcrumbs\n\n    @property\n    def class_name(self):\n        \"\"\"\n        Gets the class_name of this CrashReportEvent.\n\n\n        :return: The class_name of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._class_name\n\n    @class_name.setter\n    def class_name(self, class_name):\n        \"\"\"\n        Sets the class_name of this CrashReportEvent.\n\n\n        :param class_name: The class_name of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._class_name = class_name\n\n    @property\n    def severity(self):\n        \"\"\"\n        Gets the severity of this CrashReportEvent.\n\n\n        :return: The severity of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._severity\n\n    @severity.setter\n    def severity(self, severity):\n        \"\"\"\n        Sets the severity of this CrashReportEvent.\n\n\n        :param severity: The severity of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._severity = severity\n\n    @property\n    def message(self):\n        \"\"\"\n        Gets the message of this CrashReportEvent.\n\n\n        :return: The message of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._message\n\n    @message.setter\n    def message(self, message):\n        \"\"\"\n        Sets the message of this CrashReportEvent.\n\n\n        :param message: The message of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._message = message\n\n    @property\n    def stack_trace(self):\n        \"\"\"\n        Gets the stack_trace of this CrashReportEvent.\n\n\n        :return: The stack_trace of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._stack_trace\n\n    @stack_trace.setter\n    def stack_trace(self, stack_trace):\n        \"\"\"\n        Sets the stack_trace of this CrashReportEvent.\n\n\n        :param stack_trace: The stack_trace of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._stack_trace = stack_trace\n\n    @property\n    def exception_handled(self):\n        \"\"\"\n        Gets the exception_handled of this CrashReportEvent.\n\n\n        :return: The exception_handled of this CrashReportEvent.\n        :rtype: bool\n        \"\"\"\n        return self._exception_handled\n\n    @exception_handled.setter\n    def exception_handled(self, exception_handled):\n        \"\"\"\n        Sets the exception_handled of this CrashReportEvent.\n\n\n        :param exception_handled: The exception_handled of this CrashReportEvent.\n        :type: bool\n        \"\"\"\n\n        self._exception_handled = exception_handled\n\n    @property\n    def topmost_context(self):\n        \"\"\"\n        Gets the topmost_context of this CrashReportEvent.\n\n\n        :return: The topmost_context of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._topmost_context\n\n    @topmost_context.setter\n    def topmost_context(self, topmost_context):\n        \"\"\"\n        Sets the topmost_context of this CrashReportEvent.\n\n\n        :param topmost_context: The topmost_context of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._topmost_context = topmost_context\n\n    @property\n    def pl_crash_report_file_base64(self):\n        \"\"\"\n        Gets the pl_crash_report_file_base64 of this CrashReportEvent.\n\n\n        :return: The pl_crash_report_file_base64 of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._pl_crash_report_file_base64\n\n    @pl_crash_report_file_base64.setter\n    def pl_crash_report_file_base64(self, pl_crash_report_file_base64):\n        \"\"\"\n        Sets the pl_crash_report_file_base64 of this CrashReportEvent.\n\n\n        :param pl_crash_report_file_base64: The pl_crash_report_file_base64 of this CrashReportEvent.\n        :type: str\n        \"\"\"\n\n        self._pl_crash_report_file_base64 = pl_crash_report_file_base64\n\n    @property\n    def ios_image_base_address(self):\n        \"\"\"\n        Gets the ios_image_base_address of this CrashReportEvent.\n\n\n        :return: The ios_image_base_address of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._ios_image_base_address\n\n    @ios_image_base_address.setter\n    def ios_image_base_address(self, ios_image_base_address):\n        \"\"\"\n        Sets the ios_image_base_address of this CrashReportEvent.\n\n\n        :param ios_image_base_address: The ios_image_base_address of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._ios_image_base_address = ios_image_base_address\n\n    @property\n    def ios_image_size(self):\n        \"\"\"\n        Gets the ios_image_size of this CrashReportEvent.\n\n\n        :return: The ios_image_size of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._ios_image_size\n\n    @ios_image_size.setter\n    def ios_image_size(self, ios_image_size):\n        \"\"\"\n        Sets the ios_image_size of this CrashReportEvent.\n\n\n        :param ios_image_size: The ios_image_size of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._ios_image_size = ios_image_size\n\n    @property\n    def session_number(self):\n        \"\"\"\n        Gets the session_number of this CrashReportEvent.\n\n\n        :return: The session_number of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_number\n\n    @session_number.setter\n    def session_number(self, session_number):\n        \"\"\"\n        Sets the session_number of this CrashReportEvent.\n\n\n        :param session_number: The session_number of this CrashReportEvent.\n        :type: int\n        \"\"\"\n\n        self._session_number = session_number\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/crash_report_event.py": {
      "CrashReportEvent.__init__": {
        "code": "    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, breadcrumbs=None, class_name=None, severity=None, message=None, stack_trace=None, exception_handled=None, topmost_context=None, pl_crash_report_file_base64=None, ios_image_base_address=None, ios_image_size=None, session_number=None):\n        \"\"\"Initializes a CrashReportEvent instance, representing a structured event related to a crash report. \n    This class is defined as part of the mParticle Event API in accordance with the Swagger specifications.\n\n    :param timestamp_unixtime_ms: (int) The timestamp of the event in Unix time milliseconds.\n    :param event_id: (int) Unique identifier for the event.\n    :param source_message_id: (str) Identifier for the source message.\n    :param session_id: (int) Identifier for the session associated with the event.\n    :param session_uuid: (str) UUID for the session.\n    :param custom_attributes: (dict(str, str)) A dictionary of additional user-defined attributes for the event.\n    :param location: (GeoLocation) The geographical location when the crash occurred.\n    :param device_current_state: (DeviceCurrentState) The current state of the device at the time of the crash.\n    :param breadcrumbs: (list[BreadcrumbEvent]) A list of events leading to the crash, useful for diagnostic purposes.\n    :param class_name: (str) The name of the class in which the crash occurred.\n    :param severity: (str) The severity level of the crash (e.g., \"critical\", \"warning\").\n    :param message: (str) A message providing details about the crash.\n    :param stack_trace: (str) The call stack at the time of the crash, useful for debugging.\n    :param exception_handled: (bool) Indicates whether the exception was handled or unhandled.\n    :param topmost_context: (str) The topmost context of the application at the time of the crash.\n    :param pl_crash_report_file_base64: (str) Base64 encoded crash report file.\n    :param ios_image_base_address: (int) Base address of the iOS image where the crash occurred.\n    :param ios_image_size: (int) Size of the iOS image.\n    :param session_number: (int) The numerical identifier for the session, primarily for tracking purposes.\"\"\"\n        '\\n        CrashReportEvent - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState', 'breadcrumbs': 'list[BreadcrumbEvent]', 'class_name': 'str', 'severity': 'str', 'message': 'str', 'stack_trace': 'str', 'exception_handled': 'bool', 'topmost_context': 'str', 'pl_crash_report_file_base64': 'str', 'ios_image_base_address': 'int', 'ios_image_size': 'int', 'session_number': 'int'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state', 'breadcrumbs': 'breadcrumbs', 'class_name': 'class_name', 'severity': 'severity', 'message': 'message', 'stack_trace': 'stack_trace', 'exception_handled': 'exception_handled', 'topmost_context': 'topmost_context', 'pl_crash_report_file_base64': 'pl_crash_report_file_base64', 'ios_image_base_address': 'ios_image_base_address', 'ios_image_size': 'ios_image_size', 'session_number': 'session_number'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._breadcrumbs = breadcrumbs\n        self._class_name = class_name\n        self._severity = severity\n        self._message = message\n        self._stack_trace = stack_trace\n        self._exception_handled = exception_handled\n        self._topmost_context = topmost_context\n        self._pl_crash_report_file_base64 = pl_crash_report_file_base64\n        self._ios_image_base_address = ios_image_base_address\n        self._ios_image_size = ios_image_size\n        self._session_number = session_number",
        "docstring": "Initializes a CrashReportEvent instance, representing a structured event related to a crash report. \nThis class is defined as part of the mParticle Event API in accordance with the Swagger specifications.\n\n:param timestamp_unixtime_ms: (int) The timestamp of the event in Unix time milliseconds.\n:param event_id: (int) Unique identifier for the event.\n:param source_message_id: (str) Identifier for the source message.\n:param session_id: (int) Identifier for the session associated with the event.\n:param session_uuid: (str) UUID for the session.\n:param custom_attributes: (dict(str, str)) A dictionary of additional user-defined attributes for the event.\n:param location: (GeoLocation) The geographical location when the crash occurred.\n:param device_current_state: (DeviceCurrentState) The current state of the device at the time of the crash.\n:param breadcrumbs: (list[BreadcrumbEvent]) A list of events leading to the crash, useful for diagnostic purposes.\n:param class_name: (str) The name of the class in which the crash occurred.\n:param severity: (str) The severity level of the crash (e.g., \"critical\", \"warning\").\n:param message: (str) A message providing details about the crash.\n:param stack_trace: (str) The call stack at the time of the crash, useful for debugging.\n:param exception_handled: (bool) Indicates whether the exception was handled or unhandled.\n:param topmost_context: (str) The topmost context of the application at the time of the crash.\n:param pl_crash_report_file_base64: (str) Base64 encoded crash report file.\n:param ios_image_base_address: (int) Base address of the iOS image where the crash occurred.\n:param ios_image_size: (int) Size of the iOS image.\n:param session_number: (int) The numerical identifier for the session, primarily for tracking purposes.",
        "signature": "def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, breadcrumbs=None, class_name=None, severity=None, message=None, stack_trace=None, exception_handled=None, topmost_context=None, pl_crash_report_file_base64=None, ios_image_base_address=None, ios_image_size=None, session_number=None):",
        "type": "Method",
        "class_signature": "class CrashReportEvent(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_crash_report_event\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 crash_report_event.py\n            \u2514\u2500\u2500 CrashReportEvent.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module integrates with the mParticle Event API to enable seamless handling of crash report events within a larger event tracking system. Its primary function is to model and manage crash report data, allowing applications to capture, structure, and transmit crash-related information in compliance with mParticle's event data schema. By providing a dedicated interface for creating and validating crash report events, this module simplifies the process of instrumenting error tracking and troubleshooting within applications. This capability streamlines error monitoring for developers, facilitating quicker resolution of application issues and improving overall performance and user experience.\n\n## FILE 1: mparticle/models/crash_report_event.py\n\n- CLASS METHOD: CrashReportEvent.__init__\n  - CLASS SIGNATURE: class CrashReportEvent(object):\n  - SIGNATURE: def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, breadcrumbs=None, class_name=None, severity=None, message=None, stack_trace=None, exception_handled=None, topmost_context=None, pl_crash_report_file_base64=None, ios_image_base_address=None, ios_image_size=None, session_number=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a CrashReportEvent instance, representing a structured event related to a crash report. \nThis class is defined as part of the mParticle Event API in accordance with the Swagger specifications.\n\n:param timestamp_unixtime_ms: (int) The timestamp of the event in Unix time milliseconds.\n:param event_id: (int) Unique identifier for the event.\n:param source_message_id: (str) Identifier for the source message.\n:param session_id: (int) Identifier for the session associated with the event.\n:param session_uuid: (str) UUID for the session.\n:param custom_attributes: (dict(str, str)) A dictionary of additional user-defined attributes for the event.\n:param location: (GeoLocation) The geographical location when the crash occurred.\n:param device_current_state: (DeviceCurrentState) The current state of the device at the time of the crash.\n:param breadcrumbs: (list[BreadcrumbEvent]) A list of events leading to the crash, useful for diagnostic purposes.\n:param class_name: (str) The name of the class in which the crash occurred.\n:param severity: (str) The severity level of the crash (e.g., \"critical\", \"warning\").\n:param message: (str) A message providing details about the crash.\n:param stack_trace: (str) The call stack at the time of the crash, useful for debugging.\n:param exception_handled: (bool) Indicates whether the exception was handled or unhandled.\n:param topmost_context: (str) The topmost context of the application at the time of the crash.\n:param pl_crash_report_file_base64: (str) Base64 encoded crash report file.\n:param ios_image_base_address: (int) Base address of the iOS image where the crash occurred.\n:param ios_image_size: (int) Size of the iOS image.\n:param session_number: (int) The numerical identifier for the session, primarily for tracking purposes.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/crash_report_event.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass CrashReportEvent(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CrashReportEvent.\n\n\n        :return: The timestamp_unixtime_ms of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CrashReportEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this CrashReportEvent.\n\n\n        :return: The event_id of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this CrashReportEvent.\n\n\n        :param event_id: The event_id of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this CrashReportEvent.\n\n\n        :return: The source_message_id of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this CrashReportEvent.\n\n\n        :param source_message_id: The source_message_id of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this CrashReportEvent.\n\n\n        :return: The session_id of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this CrashReportEvent.\n\n\n        :param session_id: The session_id of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this CrashReportEvent.\n\n\n        :return: The session_uuid of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this CrashReportEvent.\n\n\n        :param session_uuid: The session_uuid of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this CrashReportEvent.\n\n\n        :return: The custom_attributes of this CrashReportEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this CrashReportEvent.\n\n\n        :param custom_attributes: The custom_attributes of this CrashReportEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CrashReportEvent.\n\n\n        :return: The location of this CrashReportEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CrashReportEvent.\n\n\n        :param location: The location of this CrashReportEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this CrashReportEvent.\n\n\n        :return: The device_current_state of this CrashReportEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this CrashReportEvent.\n\n\n        :param device_current_state: The device_current_state of this CrashReportEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    @property\n    def breadcrumbs(self):\n        \"\"\"\n        Gets the breadcrumbs of this CrashReportEvent.\n\n\n        :return: The breadcrumbs of this CrashReportEvent.\n        :rtype: list[BreadcrumbEvent]\n        \"\"\"\n        return self._breadcrumbs\n\n    @breadcrumbs.setter\n    def breadcrumbs(self, breadcrumbs):\n        \"\"\"\n        Sets the breadcrumbs of this CrashReportEvent.\n\n\n        :param breadcrumbs: The breadcrumbs of this CrashReportEvent.\n        :type: list[BreadcrumbEvent]\n        \"\"\"\n        self._breadcrumbs = breadcrumbs\n\n    @property\n    def class_name(self):\n        \"\"\"\n        Gets the class_name of this CrashReportEvent.\n\n\n        :return: The class_name of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._class_name\n\n    @class_name.setter\n    def class_name(self, class_name):\n        \"\"\"\n        Sets the class_name of this CrashReportEvent.\n\n\n        :param class_name: The class_name of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._class_name = class_name\n\n    @property\n    def severity(self):\n        \"\"\"\n        Gets the severity of this CrashReportEvent.\n\n\n        :return: The severity of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._severity\n\n    @severity.setter\n    def severity(self, severity):\n        \"\"\"\n        Sets the severity of this CrashReportEvent.\n\n\n        :param severity: The severity of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._severity = severity\n\n    @property\n    def message(self):\n        \"\"\"\n        Gets the message of this CrashReportEvent.\n\n\n        :return: The message of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._message\n\n    @message.setter\n    def message(self, message):\n        \"\"\"\n        Sets the message of this CrashReportEvent.\n\n\n        :param message: The message of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._message = message\n\n    @property\n    def stack_trace(self):\n        \"\"\"\n        Gets the stack_trace of this CrashReportEvent.\n\n\n        :return: The stack_trace of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._stack_trace\n\n    @stack_trace.setter\n    def stack_trace(self, stack_trace):\n        \"\"\"\n        Sets the stack_trace of this CrashReportEvent.\n\n\n        :param stack_trace: The stack_trace of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._stack_trace = stack_trace\n\n    @property\n    def exception_handled(self):\n        \"\"\"\n        Gets the exception_handled of this CrashReportEvent.\n\n\n        :return: The exception_handled of this CrashReportEvent.\n        :rtype: bool\n        \"\"\"\n        return self._exception_handled\n\n    @exception_handled.setter\n    def exception_handled(self, exception_handled):\n        \"\"\"\n        Sets the exception_handled of this CrashReportEvent.\n\n\n        :param exception_handled: The exception_handled of this CrashReportEvent.\n        :type: bool\n        \"\"\"\n        self._exception_handled = exception_handled\n\n    @property\n    def topmost_context(self):\n        \"\"\"\n        Gets the topmost_context of this CrashReportEvent.\n\n\n        :return: The topmost_context of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._topmost_context\n\n    @topmost_context.setter\n    def topmost_context(self, topmost_context):\n        \"\"\"\n        Sets the topmost_context of this CrashReportEvent.\n\n\n        :param topmost_context: The topmost_context of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._topmost_context = topmost_context\n\n    @property\n    def pl_crash_report_file_base64(self):\n        \"\"\"\n        Gets the pl_crash_report_file_base64 of this CrashReportEvent.\n\n\n        :return: The pl_crash_report_file_base64 of this CrashReportEvent.\n        :rtype: str\n        \"\"\"\n        return self._pl_crash_report_file_base64\n\n    @pl_crash_report_file_base64.setter\n    def pl_crash_report_file_base64(self, pl_crash_report_file_base64):\n        \"\"\"\n        Sets the pl_crash_report_file_base64 of this CrashReportEvent.\n\n\n        :param pl_crash_report_file_base64: The pl_crash_report_file_base64 of this CrashReportEvent.\n        :type: str\n        \"\"\"\n        self._pl_crash_report_file_base64 = pl_crash_report_file_base64\n\n    @property\n    def ios_image_base_address(self):\n        \"\"\"\n        Gets the ios_image_base_address of this CrashReportEvent.\n\n\n        :return: The ios_image_base_address of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._ios_image_base_address\n\n    @ios_image_base_address.setter\n    def ios_image_base_address(self, ios_image_base_address):\n        \"\"\"\n        Sets the ios_image_base_address of this CrashReportEvent.\n\n\n        :param ios_image_base_address: The ios_image_base_address of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._ios_image_base_address = ios_image_base_address\n\n    @property\n    def ios_image_size(self):\n        \"\"\"\n        Gets the ios_image_size of this CrashReportEvent.\n\n\n        :return: The ios_image_size of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._ios_image_size\n\n    @ios_image_size.setter\n    def ios_image_size(self, ios_image_size):\n        \"\"\"\n        Sets the ios_image_size of this CrashReportEvent.\n\n\n        :param ios_image_size: The ios_image_size of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._ios_image_size = ios_image_size\n\n    @property\n    def session_number(self):\n        \"\"\"\n        Gets the session_number of this CrashReportEvent.\n\n\n        :return: The session_number of this CrashReportEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_number\n\n    @session_number.setter\n    def session_number(self, session_number):\n        \"\"\"\n        Sets the session_number of this CrashReportEvent.\n\n\n        :param session_number: The session_number of this CrashReportEvent.\n        :type: int\n        \"\"\"\n        self._session_number = session_number\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_crash_report_event.py:TestCrashReportEvent:testCrashReportEvent": {
      "mparticle/models/crash_report_event.py:CrashReportEvent:__init__": {}
    }
  }
}