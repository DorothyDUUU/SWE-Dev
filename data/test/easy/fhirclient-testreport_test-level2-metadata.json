{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-testreport_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/testreport_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import testreport\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass TestReportTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"TestReport\", js[\"resourceType\"])\n        return testreport.TestReport(js)\n    \n    def testTestReport1(self):\n        inst = self.instantiate_from(\"testreport-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestReport instance\")\n        self.implTestReport1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestReport\", js[\"resourceType\"])\n        inst2 = testreport.TestReport(js)\n        self.implTestReport1(inst2)\n    \n    def implTestReport1(self, inst):\n        self.assertEqual(inst.id, \"testreport-example\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9878\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2016-10-07T08:25:34-05:00\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2016-10-07T08:25:34-05:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name, \"TestReport Example for TestScript Example\")\n        self.assertEqual(inst.participant[0].display, \"Crucible\")\n        self.assertEqual(inst.participant[0].type, \"test-engine\")\n        self.assertEqual(inst.participant[0].uri, \"http://projectcrucible.org\")\n        self.assertEqual(inst.participant[1].display, \"HealthIntersections STU3\")\n        self.assertEqual(inst.participant[1].type, \"server\")\n        self.assertEqual(inst.participant[1].uri, \"http://fhir3.healthintersections.com.au/open\")\n        self.assertEqual(inst.result, \"pass\")\n        self.assertEqual(inst.score, 100.0)\n        self.assertEqual(inst.setup.action[0].operation.detail, \"http://projectcrucible.org/permalink/1\")\n        self.assertEqual(inst.setup.action[0].operation.message, \"DELETE Patient\")\n        self.assertEqual(inst.setup.action[0].operation.result, \"pass\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.detail, \"http://projectcrucible.org/permalink/1\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.message, \"HTTP 204\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.setup.action[2].operation.detail, \"http://projectcrucible.org/permalink/1\")\n        self.assertEqual(inst.setup.action[2].operation.message, \"POST Patient/fixture-patient-create\")\n        self.assertEqual(inst.setup.action[2].operation.result, \"pass\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.detail, \"http://projectcrucible.org/permalink/1\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.message, \"HTTP 201\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.teardown.action[0].operation.detail, \"http://projectcrucible.org/permalink/3\")\n        self.assertEqual(inst.teardown.action[0].operation.message, \"DELETE Patient/fixture-patient-create.\")\n        self.assertEqual(inst.teardown.action[0].operation.result, \"pass\")\n        self.assertEqual(inst.test[0].action[0].operation.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[0].operation.message, \"GET Patient/fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[0].operation.result, \"pass\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.message, \"HTTP 200\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.message, \"Last-Modified Present\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.message, \"Response is Patient\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.message, \"Response validates\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.message, \"Patient.name.family 'Chalmers'\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.message, \"Patient.name.given 'Peter'\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.message, \"Patient.name.family 'Chalmers'\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.message, \"Patient.name.family 'Chalmers'\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].action[9].assert_fhir.detail, \"http://projectcrucible.org/permalink/2\")\n        self.assertEqual(inst.test[0].action[9].assert_fhir.message, \"Patient expected values.\")\n        self.assertEqual(inst.test[0].action[9].assert_fhir.result, \"pass\")\n        self.assertEqual(inst.test[0].description, \"Read a Patient and validate response.\")\n        self.assertEqual(inst.test[0].id, \"01-ReadPatient\")\n        self.assertEqual(inst.test[0].name, \"Read Patient\")\n        self.assertEqual(inst.tester, \"HL7 Execution Engine\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/testreport.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/TestReport).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass TestReport(domainresource.DomainResource):\n    \"\"\" Describes the results of a TestScript execution.\n    \n    A summary of information based on the results of executing a TestScript.\n    \"\"\"\n    \n    resource_type = \"TestReport\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.identifier = None\n        \"\"\" External identifier.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.issued = None\n        \"\"\" When the TestScript was executed and this TestReport was generated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Informal name of the executed TestScript.\n        Type `str`. \"\"\"\n        \n        self.participant = None\n        \"\"\" A participant in the test execution, either the execution engine, a\n        client, or a server.\n        List of `TestReportParticipant` items (represented as `dict` in JSON). \"\"\"\n        \n        self.result = None\n        \"\"\" pass | fail | pending.\n        Type `str`. \"\"\"\n        \n        self.score = None\n        \"\"\" The final score (percentage of tests passed) resulting from the\n        execution of the TestScript.\n        Type `float`. \"\"\"\n        \n        self.setup = None\n        \"\"\" The results of the series of required setup operations before the\n        tests were executed.\n        Type `TestReportSetup` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" completed | in-progress | waiting | stopped | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.teardown = None\n        \"\"\" The results of running the series of required clean up steps.\n        Type `TestReportTeardown` (represented as `dict` in JSON). \"\"\"\n        \n        self.test = None\n        \"\"\" A test executed from the test script.\n        List of `TestReportTest` items (represented as `dict` in JSON). \"\"\"\n        \n        self.testScript = None\n        \"\"\" Reference to the  version-specific TestScript that was executed to\n        produce this TestReport.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.tester = None\n        \"\"\" Name of the tester producing this report (Organization or\n        individual).\n        Type `str`. \"\"\"\n        \n        super(TestReport, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReport, self).elementProperties()\n        js.extend([\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"issued\", \"issued\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"participant\", \"participant\", TestReportParticipant, True, None, False),\n            (\"result\", \"result\", str, False, None, True),\n            (\"score\", \"score\", float, False, None, False),\n            (\"setup\", \"setup\", TestReportSetup, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"teardown\", \"teardown\", TestReportTeardown, False, None, False),\n            (\"test\", \"test\", TestReportTest, True, None, False),\n            (\"testScript\", \"testScript\", fhirreference.FHIRReference, False, None, True),\n            (\"tester\", \"tester\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass TestReportParticipant(backboneelement.BackboneElement):\n    \"\"\" A participant in the test execution, either the execution engine, a client,\n    or a server.\n    \"\"\"\n    \n    resource_type = \"TestReportParticipant\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.display = None\n        \"\"\" The display name of the participant.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" test-engine | client | server.\n        Type `str`. \"\"\"\n        \n        self.uri = None\n        \"\"\" The uri of the participant. An absolute URL is preferred.\n        Type `str`. \"\"\"\n        \n        super(TestReportParticipant, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportParticipant, self).elementProperties()\n        js.extend([\n            (\"display\", \"display\", str, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n            (\"uri\", \"uri\", str, False, None, True),\n        ])\n        return js\n\n\nclass TestReportSetup(backboneelement.BackboneElement):\n    \"\"\" The results of the series of required setup operations before the tests\n    were executed.\n    \"\"\"\n    \n    resource_type = \"TestReportSetup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" A setup operation or assert that was executed.\n        List of `TestReportSetupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        super(TestReportSetup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportSetup, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestReportSetupAction, True, None, True),\n        ])\n        return js\n\n\nclass TestReportSetupAction(backboneelement.BackboneElement):\n    \"\"\" A setup operation or assert that was executed.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    \n    resource_type = \"TestReportSetupAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assert_fhir = None\n        \"\"\" The assertion to perform.\n        Type `TestReportSetupActionAssert` (represented as `dict` in JSON). \"\"\"\n        \n        self.operation = None\n        \"\"\" The operation to perform.\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestReportSetupAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportSetupAction, self).elementProperties()\n        js.extend([\n            (\"assert_fhir\", \"assert\", TestReportSetupActionAssert, False, None, False),\n            (\"operation\", \"operation\", TestReportSetupActionOperation, False, None, False),\n        ])\n        return js\n\n\nclass TestReportSetupActionAssert(backboneelement.BackboneElement):\n    \"\"\" The assertion to perform.\n    \n    The results of the assertion performed on the previous operations.\n    \"\"\"\n    \n    resource_type = \"TestReportSetupActionAssert\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.detail = None\n        \"\"\" A link to further details on the result.\n        Type `str`. \"\"\"\n        \n        self.message = None\n        \"\"\" A message associated with the result.\n        Type `str`. \"\"\"\n        \n        self.result = None\n        \"\"\" pass | skip | fail | warning | error.\n        Type `str`. \"\"\"\n        \n        super(TestReportSetupActionAssert, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportSetupActionAssert, self).elementProperties()\n        js.extend([\n            (\"detail\", \"detail\", str, False, None, False),\n            (\"message\", \"message\", str, False, None, False),\n            (\"result\", \"result\", str, False, None, True),\n        ])\n        return js\n\n\nclass TestReportSetupActionOperation(backboneelement.BackboneElement):\n    \"\"\" The operation to perform.\n    \n    The operation performed.\n    \"\"\"\n    \n    resource_type = \"TestReportSetupActionOperation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.detail = None\n        \"\"\" A link to further details on the result.\n        Type `str`. \"\"\"\n        \n        self.message = None\n        \"\"\" A message associated with the result.\n        Type `str`. \"\"\"\n        \n        self.result = None\n        \"\"\" pass | skip | fail | warning | error.\n        Type `str`. \"\"\"\n        \n        super(TestReportSetupActionOperation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportSetupActionOperation, self).elementProperties()\n        js.extend([\n            (\"detail\", \"detail\", str, False, None, False),\n            (\"message\", \"message\", str, False, None, False),\n            (\"result\", \"result\", str, False, None, True),\n        ])\n        return js\n\n\nclass TestReportTeardown(backboneelement.BackboneElement):\n    \"\"\" The results of running the series of required clean up steps.\n    \n    The results of the series of operations required to clean up after all the\n    tests were executed (successfully or otherwise).\n    \"\"\"\n    \n    resource_type = \"TestReportTeardown\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" One or more teardown operations performed.\n        List of `TestReportTeardownAction` items (represented as `dict` in JSON). \"\"\"\n        \n        super(TestReportTeardown, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportTeardown, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestReportTeardownAction, True, None, True),\n        ])\n        return js\n\n\nclass TestReportTeardownAction(backboneelement.BackboneElement):\n    \"\"\" One or more teardown operations performed.\n    \n    The teardown action will only contain an operation.\n    \"\"\"\n    \n    resource_type = \"TestReportTeardownAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.operation = None\n        \"\"\" The teardown operation performed.\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestReportTeardownAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportTeardownAction, self).elementProperties()\n        js.extend([\n            (\"operation\", \"operation\", TestReportSetupActionOperation, False, None, True),\n        ])\n        return js\n\n\nclass TestReportTest(backboneelement.BackboneElement):\n    \"\"\" A test executed from the test script.\n    \"\"\"\n    \n    resource_type = \"TestReportTest\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" A test operation or assert that was performed.\n        List of `TestReportTestAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Tracking/reporting short description of the test.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Tracking/logging name of this test.\n        Type `str`. \"\"\"\n        \n        super(TestReportTest, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportTest, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestReportTestAction, True, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n        ])\n        return js\n\n\nclass TestReportTestAction(backboneelement.BackboneElement):\n    \"\"\" A test operation or assert that was performed.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    \n    resource_type = \"TestReportTestAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assert_fhir = None\n        \"\"\" The assertion performed.\n        Type `TestReportSetupActionAssert` (represented as `dict` in JSON). \"\"\"\n        \n        self.operation = None\n        \"\"\" The operation performed.\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestReportTestAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestReportTestAction, self).elementProperties()\n        js.extend([\n            (\"assert_fhir\", \"assert\", TestReportSetupActionAssert, False, None, False),\n            (\"operation\", \"operation\", TestReportSetupActionOperation, False, None, False),\n        ])\n        return js\n\n\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which is a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties for the DomainResource instance, allowing for an optional JSON dictionary to initialize the values of the properties. The `contained`, `extension`, `modifierExtension`, and `text` attributes are initialized as part of this method.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. Defaults to None.\n- strict (bool, optional): If set to True (default), validation errors will raise a TypeError if invalid values are encountered; if set to False, these errors will be ignored.\n\nAttributes:\n- contained: A list that may hold contained Resource items, initialized as None.\n- extension: A list for additional content defined by implementations, initialized as None.\n- modifierExtension: A list of extensions that cannot be ignored, initialized as None.\n- text: A summary of the resource for human interpretation, initialized as None.\n\nThis constructor calls the parent class's constructor `super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)` to ensure that inherited property values are also initialized correctly.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which is a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties for the DomainResource instance, allowing for an optional JSON dictionary to initialize the values of the properties. The `contained`, `extension`, `modifierExtension`, and `text` attributes are initialized as part of this method.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. Defaults to None.\n- strict (bool, optional): If set to True (default), validation errors will raise a TypeError if invalid values are encountered; if set to False, these errors will be ignored.\n\nAttributes:\n- contained: A list that may hold contained Resource items, initialized as None.\n- extension: A list for additional content defined by implementations, initialized as None.\n- modifierExtension: A list of extensions that cannot be ignored, initialized as None.\n- text: A summary of the resource for human interpretation, initialized as None.\n\nThis constructor calls the parent class's constructor `super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)` to ensure that inherited property values are also initialized correctly.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDate instance with an optional date string in ISO 8601 format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date (e.g., \"2024-01-01\"). If None, initializes date as None. Raises a TypeError if jsonval is not a string and a ValueError if it does not match the expected format defined by the regex pattern in _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, initialized to None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original jsonval to preserve the exact input value.\n\nConstants:\n- _REGEX: Compiled regex pattern used to validate the date string format against FHIR specifications before parsing.\n- _FIELD: A private string that indicates the field name for synchronization with the date attribute.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes a FHIRDate instance with an optional date string in ISO 8601 format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date (e.g., \"2024-01-01\"). If None, initializes date as None. Raises a TypeError if jsonval is not a string and a ValueError if it does not match the expected format defined by the regex pattern in _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, initialized to None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original jsonval to preserve the exact input value.\n\nConstants:\n- _REGEX: Compiled regex pattern used to validate the date string format against FHIR specifications before parsing.\n- _FIELD: A private string that indicates the field name for synchronization with the date attribute.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Updates an attribute of the FHIRDate instance.\n\nParameters:\n- prop (str): The name of the attribute to be set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the constant _FIELD (which is set to 'date'), the method also clears the original JSON value (`origval`) and ensures that the internal state remains consistent by synchronizing the 'date' attribute with the _FIELD. For any other attributes, it sets the given value without any additional processing.\n\nThis method leverages the base `object.__setattr__` to directly set attributes, ensuring that internal representation remains accurate and consistent while allowing customized behavior for specific attributes.\n\nConstants:\n- _FIELD: Set to \"date\", used to standardize the handling of the 'date' attribute during assignment. It is defined within the FHIRDate class.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Updates an attribute of the FHIRDate instance.\n\nParameters:\n- prop (str): The name of the attribute to be set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the constant _FIELD (which is set to 'date'), the method also clears the original JSON value (`origval`) and ensures that the internal state remains consistent by synchronizing the 'date' attribute with the _FIELD. For any other attributes, it sets the given value without any additional processing.\n\nThis method leverages the base `object.__setattr__` to directly set attributes, ensuring that internal representation remains accurate and consistent while allowing customized behavior for specific attributes.\n\nConstants:\n- _FIELD: Set to \"date\", used to standardize the handling of the 'date' attribute during assignment. It is defined within the FHIRDate class.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of the FHIRDate class, or its ISO 8601 representation if the original value is not available. The method checks the attribute `origval`, which stores the JSON input provided during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method returns the output of the `isostring` property, which standardizes the date into an ISO format. This ensures that the user can access either the precise input JSON or a normalized date representation, depending on availability.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of the FHIRDate class, or its ISO 8601 representation if the original value is not available. The method checks the attribute `origval`, which stores the JSON input provided during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method returns the output of the `isostring` property, which standardizes the date into an ISO format. This ensures that the user can access either the precise input JSON or a normalized date representation, depending on availability.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its registered properties defined in `elementProperties()`. It validates that required properties are not None (or lists are not empty) and that all non-None properties match their expected types. If any validation errors occur, a `FHIRValidationError` is raised containing relevant details.\n\nReturns:\n    dict: A validated dictionary representation of the instance that is ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have incorrect types or if required properties are missing.\n\nUsage of Variables:\n- `js`: Dictionary to hold the serialized property values.\n- `errs`: List to collect any errors encountered during serialization.\n- `found`: Set to track which properties have been successfully serialized.\n- `nonoptionals`: Set to track non-optional properties that must have values.\n\nThese variables interact with the method by helping verify and collect properties that meet specified validation requirements, ensuring the output is structurally sound for FHIR data compliance.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its registered properties defined in `elementProperties()`. It validates that required properties are not None (or lists are not empty) and that all non-None properties match their expected types. If any validation errors occur, a `FHIRValidationError` is raised containing relevant details.\n\nReturns:\n    dict: A validated dictionary representation of the instance that is ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have incorrect types or if required properties are missing.\n\nUsage of Variables:\n- `js`: Dictionary to hold the serialized property values.\n- `errs`: List to collect any errors encountered during serialization.\n- `found`: Set to track which properties have been successfully serialized.\n- `nonoptionals`: Set to track non-optional properties that must have values.\n\nThese variables interact with the method by helping verify and collect properties that meet specified validation requirements, ensuring the output is structurally sound for FHIR data compliance.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/testreport.py": {
      "TestReport.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a TestReport instance with specified properties reflecting the results of a TestScript execution.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. If provided, it should contain keys corresponding to the attributes of the TestReport.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- identifier (Identifier): External identifier for the test report.\n- issued (FHIRDateTime): Timestamp indicating when the TestScript was executed.\n- name (str): Informal name of the executed TestScript.\n- participant (List[TestReportParticipant]): Participants involved in the test execution, such as clients or servers.\n- result (str): Outcome of the test execution, can be 'pass', 'fail', or 'pending'.\n- score (float): Percentage score indicating tests passed from the execution.\n- setup (TestReportSetup): The results of setup operations executed before the tests.\n- status (str): Current status of the test report (e.g., 'completed', 'in-progress').\n- teardown (TestReportTeardown): Results of needed cleanup operations after tests.\n- test (List[TestReportTest]): Tests executed as part of the test script.\n- testScript (FHIRReference): Reference to the executed version-specific TestScript.\n- tester (str): Name of the individual or organization producing this report.\n\nThis class inherits from `domainresource.DomainResource`, which provides foundational functionality for FHIR resource representation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.identifier = None\n        ' External identifier.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.issued = None\n        ' When the TestScript was executed and this TestReport was generated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.name = None\n        ' Informal name of the executed TestScript.\\n        Type `str`. '\n        self.participant = None\n        ' A participant in the test execution, either the execution engine, a\\n        client, or a server.\\n        List of `TestReportParticipant` items (represented as `dict` in JSON). '\n        self.result = None\n        ' pass | fail | pending.\\n        Type `str`. '\n        self.score = None\n        ' The final score (percentage of tests passed) resulting from the\\n        execution of the TestScript.\\n        Type `float`. '\n        self.setup = None\n        ' The results of the series of required setup operations before the\\n        tests were executed.\\n        Type `TestReportSetup` (represented as `dict` in JSON). '\n        self.status = None\n        ' completed | in-progress | waiting | stopped | entered-in-error.\\n        Type `str`. '\n        self.teardown = None\n        ' The results of running the series of required clean up steps.\\n        Type `TestReportTeardown` (represented as `dict` in JSON). '\n        self.test = None\n        ' A test executed from the test script.\\n        List of `TestReportTest` items (represented as `dict` in JSON). '\n        self.testScript = None\n        ' Reference to the  version-specific TestScript that was executed to\\n        produce this TestReport.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.tester = None\n        ' Name of the tester producing this report (Organization or\\n        individual).\\n        Type `str`. '\n        super(TestReport, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a TestReport instance with specified properties reflecting the results of a TestScript execution.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. If provided, it should contain keys corresponding to the attributes of the TestReport.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- identifier (Identifier): External identifier for the test report.\n- issued (FHIRDateTime): Timestamp indicating when the TestScript was executed.\n- name (str): Informal name of the executed TestScript.\n- participant (List[TestReportParticipant]): Participants involved in the test execution, such as clients or servers.\n- result (str): Outcome of the test execution, can be 'pass', 'fail', or 'pending'.\n- score (float): Percentage score indicating tests passed from the execution.\n- setup (TestReportSetup): The results of setup operations executed before the tests.\n- status (str): Current status of the test report (e.g., 'completed', 'in-progress').\n- teardown (TestReportTeardown): Results of needed cleanup operations after tests.\n- test (List[TestReportTest]): Tests executed as part of the test script.\n- testScript (FHIRReference): Reference to the executed version-specific TestScript.\n- tester (str): Name of the individual or organization producing this report.\n\nThis class inherits from `domainresource.DomainResource`, which provides foundational functionality for FHIR resource representation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class TestReport(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a datetime in JSON format. If provided, it will be passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime object representing the parsed value from jsonval. Initialized to None until set.\n\nInteractions:\n- Calls the superclass constructor (super().__init__(jsonval)) to handle the FHIRDate initialization, leveraging the inherited functionality for parsing FHIR date strings.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a datetime in JSON format. If provided, it will be passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime object representing the parsed value from jsonval. Initialized to None until set.\n\nInteractions:\n- Calls the superclass constructor (super().__init__(jsonval)) to handle the FHIRDate initialization, leveraging the inherited functionality for parsing FHIR date strings.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns a JSON representation of the FHIRAbstractResource instance.\n\nThis method overrides the `as_json` method from the superclass, adding the `resourceType` field to the serialized output. The `resourceType` is a class-level constant that identifies the type of resource being handled and is defined in the class attribute `resource_type`. The resulting JSON dictionary includes fields from the superclass along with the added `resourceType`. \n\nReturns:\n    dict: A JSON dictionary representation of the instance, including the `resourceType` attribute.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns a JSON representation of the FHIRAbstractResource instance.\n\nThis method overrides the `as_json` method from the superclass, adding the `resourceType` field to the serialized output. The `resourceType` is a class-level constant that identifies the type of resource being handled and is defined in the class attribute `resource_type`. The resulting JSON dictionary includes fields from the superclass along with the added `resourceType`. \n\nReturns:\n    dict: A JSON dictionary representation of the instance, including the `resourceType` attribute.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/testreport.py:TestReport:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/testreport.py": {
        "TestReport.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(TestReport, self).elementProperties()\n        js.extend([('identifier', 'identifier', identifier.Identifier, False, None, False), ('issued', 'issued', fhirdatetime.FHIRDateTime, False, None, False), ('name', 'name', str, False, None, False), ('participant', 'participant', TestReportParticipant, True, None, False), ('result', 'result', str, False, None, True), ('score', 'score', float, False, None, False), ('setup', 'setup', TestReportSetup, False, None, False), ('status', 'status', str, False, None, True), ('teardown', 'teardown', TestReportTeardown, False, None, False), ('test', 'test', TestReportTest, True, None, False), ('testScript', 'testScript', fhirreference.FHIRReference, False, None, True), ('tester', 'tester', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class TestReport(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/testreport_test.py:TestReportTests:testTestReport1": {
      "tests/models/testreport_test.py:TestReportTests:instantiate_from": {
        "fhirclient/models/testreport.py:TestReport:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/testreport.py:TestReport:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testreport_test.py:TestReportTests:implTestReport1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/testreport.py:TestReport:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testreport.py:TestReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testreport.py:TestReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testreport_test.py:TestReportTests:instantiate_from": {
      "fhirclient/models/testreport.py:TestReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testreport.py:TestReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-testreport_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 testreport.py\n            \u2514\u2500\u2500 TestReport.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and testing of FHIR-compliant TestReport resources against SMART Health IT standards by automatically instantiating, validating, and verifying key attributes and behaviors of these resources. It ensures accuracy by comparing actual resource attributes, such as identifiers, timestamps, metadata tags, and operation results, against expected values within predefined test cases. The module supports comprehensive verification of operational outcomes for FHIR interactions, such as HTTP response validation and resource state consistency across CRUD operations. By automating the testing process, it streamlines compliance with FHIR specifications, aiding developers in confidently integrating and verifying health IT interoperability solutions.\n\n## FILE 1: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which is a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties for the DomainResource instance, allowing for an optional JSON dictionary to initialize the values of the properties. The `contained`, `extension`, `modifierExtension`, and `text` attributes are initialized as part of this method.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. Defaults to None.\n- strict (bool, optional): If set to True (default), validation errors will raise a TypeError if invalid values are encountered; if set to False, these errors will be ignored.\n\nAttributes:\n- contained: A list that may hold contained Resource items, initialized as None.\n- extension: A list for additional content defined by implementations, initialized as None.\n- modifierExtension: A list of extensions that cannot be ignored, initialized as None.\n- text: A summary of the resource for human interpretation, initialized as None.\n\nThis constructor calls the parent class's constructor `super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)` to ensure that inherited property values are also initialized correctly.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDate instance with an optional date string in ISO 8601 format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date (e.g., \"2024-01-01\"). If None, initializes date as None. Raises a TypeError if jsonval is not a string and a ValueError if it does not match the expected format defined by the regex pattern in _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, initialized to None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original jsonval to preserve the exact input value.\n\nConstants:\n- _REGEX: Compiled regex pattern used to validate the date string format against FHIR specifications before parsing.\n- _FIELD: A private string that indicates the field name for synchronization with the date attribute.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of the FHIRDate class, or its ISO 8601 representation if the original value is not available. The method checks the attribute `origval`, which stores the JSON input provided during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method returns the output of the `isostring` property, which standardizes the date into an ISO format. This ensures that the user can access either the precise input JSON or a normalized date representation, depending on availability.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdates an attribute of the FHIRDate instance.\n\nParameters:\n- prop (str): The name of the attribute to be set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the constant _FIELD (which is set to 'date'), the method also clears the original JSON value (`origval`) and ensures that the internal state remains consistent by synchronizing the 'date' attribute with the _FIELD. For any other attributes, it sets the given value without any additional processing.\n\nThis method leverages the base `object.__setattr__` to directly set attributes, ensuring that internal representation remains accurate and consistent while allowing customized behavior for specific attributes.\n\nConstants:\n- _FIELD: Set to \"date\", used to standardize the handling of the 'date' attribute during assignment. It is defined within the FHIRDate class.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its registered properties defined in `elementProperties()`. It validates that required properties are not None (or lists are not empty) and that all non-None properties match their expected types. If any validation errors occur, a `FHIRValidationError` is raised containing relevant details.\n\nReturns:\n    dict: A validated dictionary representation of the instance that is ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have incorrect types or if required properties are missing.\n\nUsage of Variables:\n- `js`: Dictionary to hold the serialized property values.\n- `errs`: List to collect any errors encountered during serialization.\n- `found`: Set to track which properties have been successfully serialized.\n- `nonoptionals`: Set to track non-optional properties that must have values.\n\nThese variables interact with the method by helping verify and collect properties that meet specified validation requirements, ensuring the output is structurally sound for FHIR data compliance.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/testreport.py\n\n- CLASS METHOD: TestReport.__init__\n  - CLASS SIGNATURE: class TestReport(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a TestReport instance with specified properties reflecting the results of a TestScript execution.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization. If provided, it should contain keys corresponding to the attributes of the TestReport.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- identifier (Identifier): External identifier for the test report.\n- issued (FHIRDateTime): Timestamp indicating when the TestScript was executed.\n- name (str): Informal name of the executed TestScript.\n- participant (List[TestReportParticipant]): Participants involved in the test execution, such as clients or servers.\n- result (str): Outcome of the test execution, can be 'pass', 'fail', or 'pending'.\n- score (float): Percentage score indicating tests passed from the execution.\n- setup (TestReportSetup): The results of setup operations executed before the tests.\n- status (str): Current status of the test report (e.g., 'completed', 'in-progress').\n- teardown (TestReportTeardown): Results of needed cleanup operations after tests.\n- test (List[TestReportTest]): Tests executed as part of the test script.\n- testScript (FHIRReference): Reference to the executed version-specific TestScript.\n- tester (str): Name of the individual or organization producing this report.\n\nThis class inherits from `domainresource.DomainResource`, which provides foundational functionality for FHIR resource representation.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a datetime in JSON format. If provided, it will be passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds a Python datetime object representing the parsed value from jsonval. Initialized to None until set.\n\nInteractions:\n- Calls the superclass constructor (super().__init__(jsonval)) to handle the FHIRDate initialization, leveraging the inherited functionality for parsing FHIR date strings.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a JSON representation of the FHIRAbstractResource instance.\n\nThis method overrides the `as_json` method from the superclass, adding the `resourceType` field to the serialized output. The `resourceType` is a class-level constant that identifies the type of resource being handled and is defined in the class attribute `resource_type`. The resulting JSON dictionary includes fields from the superclass along with the added `resourceType`. \n\nReturns:\n    dict: A JSON dictionary representation of the instance, including the `resourceType` attribute.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/testreport.py": "from . import domainresource\n\nclass TestReport(domainresource.DomainResource):\n    \"\"\" Describes the results of a TestScript execution.\n    \n    A summary of information based on the results of executing a TestScript.\n    \"\"\"\n    resource_type = 'TestReport'\n\n    def elementProperties(self):\n        js = super(TestReport, self).elementProperties()\n        js.extend([('identifier', 'identifier', identifier.Identifier, False, None, False), ('issued', 'issued', fhirdatetime.FHIRDateTime, False, None, False), ('name', 'name', str, False, None, False), ('participant', 'participant', TestReportParticipant, True, None, False), ('result', 'result', str, False, None, True), ('score', 'score', float, False, None, False), ('setup', 'setup', TestReportSetup, False, None, False), ('status', 'status', str, False, None, True), ('teardown', 'teardown', TestReportTeardown, False, None, False), ('test', 'test', TestReportTest, True, None, False), ('testScript', 'testScript', fhirreference.FHIRReference, False, None, True), ('tester', 'tester', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass TestReportParticipant(backboneelement.BackboneElement):\n    \"\"\" A participant in the test execution, either the execution engine, a client,\n    or a server.\n    \"\"\"\n    resource_type = 'TestReportParticipant'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.display = None\n        ' The display name of the participant.\\n        Type `str`. '\n        self.type = None\n        ' test-engine | client | server.\\n        Type `str`. '\n        self.uri = None\n        ' The uri of the participant. An absolute URL is preferred.\\n        Type `str`. '\n        super(TestReportParticipant, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportParticipant, self).elementProperties()\n        js.extend([('display', 'display', str, False, None, False), ('type', 'type', str, False, None, True), ('uri', 'uri', str, False, None, True)])\n        return js\n\nclass TestReportSetup(backboneelement.BackboneElement):\n    \"\"\" The results of the series of required setup operations before the tests\n    were executed.\n    \"\"\"\n    resource_type = 'TestReportSetup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' A setup operation or assert that was executed.\\n        List of `TestReportSetupAction` items (represented as `dict` in JSON). '\n        super(TestReportSetup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportSetup, self).elementProperties()\n        js.extend([('action', 'action', TestReportSetupAction, True, None, True)])\n        return js\n\nclass TestReportSetupAction(backboneelement.BackboneElement):\n    \"\"\" A setup operation or assert that was executed.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    resource_type = 'TestReportSetupAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assert_fhir = None\n        ' The assertion to perform.\\n        Type `TestReportSetupActionAssert` (represented as `dict` in JSON). '\n        self.operation = None\n        ' The operation to perform.\\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestReportSetupAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportSetupAction, self).elementProperties()\n        js.extend([('assert_fhir', 'assert', TestReportSetupActionAssert, False, None, False), ('operation', 'operation', TestReportSetupActionOperation, False, None, False)])\n        return js\n\nclass TestReportSetupActionAssert(backboneelement.BackboneElement):\n    \"\"\" The assertion to perform.\n    \n    The results of the assertion performed on the previous operations.\n    \"\"\"\n    resource_type = 'TestReportSetupActionAssert'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.detail = None\n        ' A link to further details on the result.\\n        Type `str`. '\n        self.message = None\n        ' A message associated with the result.\\n        Type `str`. '\n        self.result = None\n        ' pass | skip | fail | warning | error.\\n        Type `str`. '\n        super(TestReportSetupActionAssert, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportSetupActionAssert, self).elementProperties()\n        js.extend([('detail', 'detail', str, False, None, False), ('message', 'message', str, False, None, False), ('result', 'result', str, False, None, True)])\n        return js\n\nclass TestReportSetupActionOperation(backboneelement.BackboneElement):\n    \"\"\" The operation to perform.\n    \n    The operation performed.\n    \"\"\"\n    resource_type = 'TestReportSetupActionOperation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.detail = None\n        ' A link to further details on the result.\\n        Type `str`. '\n        self.message = None\n        ' A message associated with the result.\\n        Type `str`. '\n        self.result = None\n        ' pass | skip | fail | warning | error.\\n        Type `str`. '\n        super(TestReportSetupActionOperation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportSetupActionOperation, self).elementProperties()\n        js.extend([('detail', 'detail', str, False, None, False), ('message', 'message', str, False, None, False), ('result', 'result', str, False, None, True)])\n        return js\n\nclass TestReportTeardown(backboneelement.BackboneElement):\n    \"\"\" The results of running the series of required clean up steps.\n    \n    The results of the series of operations required to clean up after all the\n    tests were executed (successfully or otherwise).\n    \"\"\"\n    resource_type = 'TestReportTeardown'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' One or more teardown operations performed.\\n        List of `TestReportTeardownAction` items (represented as `dict` in JSON). '\n        super(TestReportTeardown, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportTeardown, self).elementProperties()\n        js.extend([('action', 'action', TestReportTeardownAction, True, None, True)])\n        return js\n\nclass TestReportTeardownAction(backboneelement.BackboneElement):\n    \"\"\" One or more teardown operations performed.\n    \n    The teardown action will only contain an operation.\n    \"\"\"\n    resource_type = 'TestReportTeardownAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.operation = None\n        ' The teardown operation performed.\\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestReportTeardownAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportTeardownAction, self).elementProperties()\n        js.extend([('operation', 'operation', TestReportSetupActionOperation, False, None, True)])\n        return js\n\nclass TestReportTest(backboneelement.BackboneElement):\n    \"\"\" A test executed from the test script.\n    \"\"\"\n    resource_type = 'TestReportTest'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' A test operation or assert that was performed.\\n        List of `TestReportTestAction` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Tracking/reporting short description of the test.\\n        Type `str`. '\n        self.name = None\n        ' Tracking/logging name of this test.\\n        Type `str`. '\n        super(TestReportTest, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportTest, self).elementProperties()\n        js.extend([('action', 'action', TestReportTestAction, True, None, True), ('description', 'description', str, False, None, False), ('name', 'name', str, False, None, False)])\n        return js\n\nclass TestReportTestAction(backboneelement.BackboneElement):\n    \"\"\" A test operation or assert that was performed.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    resource_type = 'TestReportTestAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assert_fhir = None\n        ' The assertion performed.\\n        Type `TestReportSetupActionAssert` (represented as `dict` in JSON). '\n        self.operation = None\n        ' The operation performed.\\n        Type `TestReportSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestReportTestAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestReportTestAction, self).elementProperties()\n        js.extend([('assert_fhir', 'assert', TestReportSetupActionAssert, False, None, False), ('operation', 'operation', TestReportSetupActionOperation, False, None, False)])\n        return js\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}