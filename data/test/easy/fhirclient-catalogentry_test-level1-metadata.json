{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-catalogentry_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/catalogentry_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import catalogentry\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CatalogEntryTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"CatalogEntry\", js[\"resourceType\"])\n        return catalogentry.CatalogEntry(js)\n    \n    def testCatalogEntry1(self):\n        inst = self.instantiate_from(\"catalogentry-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CatalogEntry instance\")\n        self.implCatalogEntry1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CatalogEntry\", js[\"resourceType\"])\n        inst2 = catalogentry.CatalogEntry(js)\n        self.implCatalogEntry1(inst2)\n    \n    def implCatalogEntry1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.com/identifier\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertTrue(inst.orderable)\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.text, \"Medication\")\n\n",
  "GT_file_code": {
    "fhirclient/models/catalogentry.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/CatalogEntry).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass CatalogEntry(domainresource.DomainResource):\n    \"\"\" An entry in a catalog.\n    \n    Catalog entries are wrappers that contextualize items included in a\n    catalog.\n    \"\"\"\n    \n    resource_type = \"CatalogEntry\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additionalCharacteristic = None\n        \"\"\" Additional characteristics of the catalog entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.additionalClassification = None\n        \"\"\" Additional classification of the catalog entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.additionalIdentifier = None\n        \"\"\" Any additional identifier(s) for the catalog item, in the same\n        granularity or concept.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.classification = None\n        \"\"\" Classification (category or class) of the item entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique identifier of the catalog item.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastUpdated = None\n        \"\"\" When was this catalog last updated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.orderable = None\n        \"\"\" Whether the entry represents an orderable item.\n        Type `bool`. \"\"\"\n        \n        self.referencedItem = None\n        \"\"\" The item that is being defined.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relatedEntry = None\n        \"\"\" An item that this catalog entry is related to.\n        List of `CatalogEntryRelatedEntry` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" The type of item - medication, device, service, protocol or other.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.validTo = None\n        \"\"\" The date until which this catalog entry is expected to be active.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.validityPeriod = None\n        \"\"\" The time period in which this catalog entry is expected to be\n        active.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(CatalogEntry, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CatalogEntry, self).elementProperties()\n        js.extend([\n            (\"additionalCharacteristic\", \"additionalCharacteristic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"additionalClassification\", \"additionalClassification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"additionalIdentifier\", \"additionalIdentifier\", identifier.Identifier, True, None, False),\n            (\"classification\", \"classification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"lastUpdated\", \"lastUpdated\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"orderable\", \"orderable\", bool, False, None, True),\n            (\"referencedItem\", \"referencedItem\", fhirreference.FHIRReference, False, None, True),\n            (\"relatedEntry\", \"relatedEntry\", CatalogEntryRelatedEntry, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"validTo\", \"validTo\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"validityPeriod\", \"validityPeriod\", period.Period, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CatalogEntryRelatedEntry(backboneelement.BackboneElement):\n    \"\"\" An item that this catalog entry is related to.\n    \n    Used for example, to point to a substance, or to a device used to\n    administer a medication.\n    \"\"\"\n    \n    resource_type = \"CatalogEntryRelatedEntry\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.item = None\n        \"\"\" The reference to the related item.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationtype = None\n        \"\"\" triggers | is-replaced-by.\n        Type `str`. \"\"\"\n        \n        super(CatalogEntryRelatedEntry, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CatalogEntryRelatedEntry, self).elementProperties()\n        js.extend([\n            (\"item\", \"item\", fhirreference.FHIRReference, False, None, True),\n            (\"relationtype\", \"relationtype\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/catalogentry.py": {
      "CatalogEntry.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a CatalogEntry object representing an entry in a catalog, including various characteristics and classifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the CatalogEntry's properties. If provided, it should contain keys corresponding to the attributes of the CatalogEntry.\n- strict (bool, optional): If set to True (default), invalid entries will raise a TypeError during initialization.\n\nAttributes Initialized:\n- additionalCharacteristic (list): Additional characteristics of the catalog entry, expected to be a list of CodeableConcept items.\n- additionalClassification (list): Additional classifications of the catalog entry as a list of CodeableConcept items.\n- additionalIdentifier (list): Additional identifiers for the catalog item as a list of Identifier items.\n- classification (list): Classifications of the catalog entry as a list of CodeableConcept items.\n- identifier (list): Unique identifiers for the catalog item as a list of Identifier items.\n- lastUpdated (str): Timestamp indicating when the catalog entry was last updated, represented as a FHIRDateTime.\n- orderable (bool): Indicates if the entry can be ordered.\n- referencedItem (FHIRReference): Reference to the item being defined, represented as a FHIRReference.\n- relatedEntry (list): Related catalog entries as a list of CatalogEntryRelatedEntry items.\n- status (str): Status of the catalog entry, such as draft, active, retired, or unknown.\n- type (CodeableConcept): The type of item represented in the catalog entry, such as medication or device.\n- validTo (str): Expiration date for the catalog entry's validity, represented as a FHIRDateTime.\n- validityPeriod (Period): Time period during which the catalog entry is active, represented as a Period.\n\nThis method also calls the initializer of the parent class domainresource.DomainResource to ensure the base properties are set correctly.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.additionalCharacteristic = None\n        ' Additional characteristics of the catalog entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.additionalClassification = None\n        ' Additional classification of the catalog entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.additionalIdentifier = None\n        ' Any additional identifier(s) for the catalog item, in the same\\n        granularity or concept.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.classification = None\n        ' Classification (category or class) of the item entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique identifier of the catalog item.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.lastUpdated = None\n        ' When was this catalog last updated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.orderable = None\n        ' Whether the entry represents an orderable item.\\n        Type `bool`. '\n        self.referencedItem = None\n        ' The item that is being defined.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relatedEntry = None\n        ' An item that this catalog entry is related to.\\n        List of `CatalogEntryRelatedEntry` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.type = None\n        ' The type of item - medication, device, service, protocol or other.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.validTo = None\n        ' The date until which this catalog entry is expected to be active.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.validityPeriod = None\n        ' The time period in which this catalog entry is expected to be\\n        active.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(CatalogEntry, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a CatalogEntry object representing an entry in a catalog, including various characteristics and classifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the CatalogEntry's properties. If provided, it should contain keys corresponding to the attributes of the CatalogEntry.\n- strict (bool, optional): If set to True (default), invalid entries will raise a TypeError during initialization.\n\nAttributes Initialized:\n- additionalCharacteristic (list): Additional characteristics of the catalog entry, expected to be a list of CodeableConcept items.\n- additionalClassification (list): Additional classifications of the catalog entry as a list of CodeableConcept items.\n- additionalIdentifier (list): Additional identifiers for the catalog item as a list of Identifier items.\n- classification (list): Classifications of the catalog entry as a list of CodeableConcept items.\n- identifier (list): Unique identifiers for the catalog item as a list of Identifier items.\n- lastUpdated (str): Timestamp indicating when the catalog entry was last updated, represented as a FHIRDateTime.\n- orderable (bool): Indicates if the entry can be ordered.\n- referencedItem (FHIRReference): Reference to the item being defined, represented as a FHIRReference.\n- relatedEntry (list): Related catalog entries as a list of CatalogEntryRelatedEntry items.\n- status (str): Status of the catalog entry, such as draft, active, retired, or unknown.\n- type (CodeableConcept): The type of item represented in the catalog entry, such as medication or device.\n- validTo (str): Expiration date for the catalog entry's validity, represented as a FHIRDateTime.\n- validityPeriod (Period): Time period during which the catalog entry is active, represented as a Period.\n\nThis method also calls the initializer of the parent class domainresource.DomainResource to ensure the base properties are set correctly.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class CatalogEntry(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It generates a JSON dictionary that includes all attributes of the instance and sets the 'resourceType' key to the value of `self.resource_type`. This allows the JSON output to correctly identify the type of FHIR resource represented by the instance.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the resourceType.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It generates a JSON dictionary that includes all attributes of the instance and sets the 'resourceType' key to the value of `self.resource_type`. This allows the JSON output to correctly identify the type of FHIR resource represented by the instance.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the resourceType.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/catalogentry_test.py:CatalogEntryTests:testCatalogEntry1": {
      "tests/models/catalogentry_test.py:CatalogEntryTests:instantiate_from": {
        "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/catalogentry_test.py:CatalogEntryTests:implCatalogEntry1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/catalogentry_test.py:CatalogEntryTests:instantiate_from": {
      "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-catalogentry_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 catalogentry.py\n        \u2502   \u2514\u2500\u2500 CatalogEntry.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe CatalogEntry module provides functionality for managing and validating FHIR-compliant catalog entry resources, enabling seamless integration with interoperable healthcare applications. Its primary purpose is to model and verify CatalogEntry objects, which serve as structured representations for items such as medications, devices, or services in healthcare catalogs. The module supports instantiation, validation, and serialization of CatalogEntry resources, ensuring adherence to HL7 FHIR standards by enforcing correct data structure and semantics. This helps developers streamline the creation and testing of catalog objects while maintaining interoperability and compliance within FHIR ecosystems.\n\n## FILE 1: fhirclient/models/catalogentry.py\n\n- CLASS METHOD: CatalogEntry.__init__\n  - CLASS SIGNATURE: class CatalogEntry(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a CatalogEntry object representing an entry in a catalog, including various characteristics and classifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the CatalogEntry's properties. If provided, it should contain keys corresponding to the attributes of the CatalogEntry.\n- strict (bool, optional): If set to True (default), invalid entries will raise a TypeError during initialization.\n\nAttributes Initialized:\n- additionalCharacteristic (list): Additional characteristics of the catalog entry, expected to be a list of CodeableConcept items.\n- additionalClassification (list): Additional classifications of the catalog entry as a list of CodeableConcept items.\n- additionalIdentifier (list): Additional identifiers for the catalog item as a list of Identifier items.\n- classification (list): Classifications of the catalog entry as a list of CodeableConcept items.\n- identifier (list): Unique identifiers for the catalog item as a list of Identifier items.\n- lastUpdated (str): Timestamp indicating when the catalog entry was last updated, represented as a FHIRDateTime.\n- orderable (bool): Indicates if the entry can be ordered.\n- referencedItem (FHIRReference): Reference to the item being defined, represented as a FHIRReference.\n- relatedEntry (list): Related catalog entries as a list of CatalogEntryRelatedEntry items.\n- status (str): Status of the catalog entry, such as draft, active, retired, or unknown.\n- type (CodeableConcept): The type of item represented in the catalog entry, such as medication or device.\n- validTo (str): Expiration date for the catalog entry's validity, represented as a FHIRDateTime.\n- validityPeriod (Period): Time period during which the catalog entry is active, represented as a Period.\n\nThis method also calls the initializer of the parent class domainresource.DomainResource to ensure the base properties are set correctly.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It generates a JSON dictionary that includes all attributes of the instance and sets the 'resourceType' key to the value of `self.resource_type`. This allows the JSON output to correctly identify the type of FHIR resource represented by the instance.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the resourceType.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/catalogentry.py": "from . import domainresource\n\nclass CatalogEntry(domainresource.DomainResource):\n    \"\"\" An entry in a catalog.\n    \n    Catalog entries are wrappers that contextualize items included in a\n    catalog.\n    \"\"\"\n    resource_type = 'CatalogEntry'\n\n    def elementProperties(self):\n        js = super(CatalogEntry, self).elementProperties()\n        js.extend([('additionalCharacteristic', 'additionalCharacteristic', codeableconcept.CodeableConcept, True, None, False), ('additionalClassification', 'additionalClassification', codeableconcept.CodeableConcept, True, None, False), ('additionalIdentifier', 'additionalIdentifier', identifier.Identifier, True, None, False), ('classification', 'classification', codeableconcept.CodeableConcept, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('lastUpdated', 'lastUpdated', fhirdatetime.FHIRDateTime, False, None, False), ('orderable', 'orderable', bool, False, None, True), ('referencedItem', 'referencedItem', fhirreference.FHIRReference, False, None, True), ('relatedEntry', 'relatedEntry', CatalogEntryRelatedEntry, True, None, False), ('status', 'status', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('validTo', 'validTo', fhirdatetime.FHIRDateTime, False, None, False), ('validityPeriod', 'validityPeriod', period.Period, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass CatalogEntryRelatedEntry(backboneelement.BackboneElement):\n    \"\"\" An item that this catalog entry is related to.\n    \n    Used for example, to point to a substance, or to a device used to\n    administer a medication.\n    \"\"\"\n    resource_type = 'CatalogEntryRelatedEntry'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.item = None\n        ' The reference to the related item.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relationtype = None\n        ' triggers | is-replaced-by.\\n        Type `str`. '\n        super(CatalogEntryRelatedEntry, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CatalogEntryRelatedEntry, self).elementProperties()\n        js.extend([('item', 'item', fhirreference.FHIRReference, False, None, True), ('relationtype', 'relationtype', str, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}