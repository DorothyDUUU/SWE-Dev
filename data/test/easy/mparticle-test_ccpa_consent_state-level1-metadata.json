{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_ccpa_consent_state",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_ccpa_consent_state.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\nimport calendar\nimport time\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.ccpa_consent_state import CCPAConsentState\n\n\nclass TestCCPAConsentState(unittest.TestCase):\n    \"\"\" CCPAConsentState unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testCCPAConsentState(self):\n        \"\"\"\n        Test CCPAConsentState\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.ccpa_consent_state.CCPAConsentState(\n            'document_agreement.v2',\n            True,\n            now,\n            'dtmgbank.com/signup',\n            'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702',\n        )\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n    def testCCPAConsentStateMembers(self):\n        \"\"\"\n        Test CCPAConsentState Members\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.ccpa_consent_state.CCPAConsentState\n        model.document = 'document_agreement.v2'\n        model.consented = True\n        model.timestamp_unixtime_ms = now\n        model.location = 'dtmgbank.com/signup'\n        model.hardware_id = 'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702'\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/ccpa_consent_state.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass CCPAConsentState(object):\n    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"\n        CCPAConsentState - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'document': 'str',\n            'consented': 'bool',\n            'timestamp_unixtime_ms': 'int',\n            'location': 'str',\n            'hardware_id': 'str'\n        }\n\n        self.attribute_map = {\n            'document': 'document',\n            'consented': 'consented',\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'location': 'location',\n            'hardware_id': 'hardware_id'\n        }\n\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id\n\n    @property\n    def document(self):\n        \"\"\"\n        Gets the document of this CCPAConsentState\n\n        :return The document of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._document\n\n    @document.setter\n    def document(self, document):\n        \"\"\"\n        Sets the document of this CCPA Consent State.\n\n\n        :param document: The document of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._document = document\n\n    @property\n    def consented(self):\n        \"\"\"\n        Gets the consented of this CCPAConsentState\n\n        :return The consented of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._consented\n\n    @consented.setter\n    def consented(self, consented):\n        \"\"\"\n        Sets the consented of this CCPA Consent State.\n\n\n        :param consented: The consented of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._consented = consented\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CCPAConsentState\n\n        :return The timestamp_unixtime_ms of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CCPA Consent State.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CCPAConsentState\n\n        :return The location of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CCPA Consent State.\n\n\n        :param location: The location of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def hardware_id(self):\n        \"\"\"\n        Gets the hardware_id of this CCPAConsentState\n\n        :return The hardware_id of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._hardware_id\n\n    @hardware_id.setter\n    def hardware_id(self, hardware_id):\n        \"\"\"\n        Sets the hardware_id of this CCPA Consent State.\n\n\n        :param hardware_id: The hardware_id of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._hardware_id = hardware_id\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/ccpa_consent_state.py": {
      "CCPAConsentState.__init__": {
        "code": "    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"Initializes a new instance of the CCPAConsentState class, representing the state of consent under the California Consumer Privacy Act (CCPA).\n\n    :param document: A string representing the consent document (optional).\n    :param consented: A boolean indicating whether consent was given (optional).\n    :param timestamp_unixtime_ms: An integer representing the timestamp of consent in Unix time format (optional).\n    :param location: A string indicating the location relevant to the consent (optional).\n    :param hardware_id: A string representing the hardware identifier associated with the consent (optional).\n\n    The `swagger_types` dictionary defines the attribute names and their types, facilitating data validation and serialization. \n    The `attribute_map` dictionary maps attribute names to their corresponding JSON keys, which aids in API interactions.\"\"\"\n        '\\n        CCPAConsentState - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'document': 'str', 'consented': 'bool', 'timestamp_unixtime_ms': 'int', 'location': 'str', 'hardware_id': 'str'}\n        self.attribute_map = {'document': 'document', 'consented': 'consented', 'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'location': 'location', 'hardware_id': 'hardware_id'}\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id",
        "docstring": "Initializes a new instance of the CCPAConsentState class, representing the state of consent under the California Consumer Privacy Act (CCPA).\n\n:param document: A string representing the consent document (optional).\n:param consented: A boolean indicating whether consent was given (optional).\n:param timestamp_unixtime_ms: An integer representing the timestamp of consent in Unix time format (optional).\n:param location: A string indicating the location relevant to the consent (optional).\n:param hardware_id: A string representing the hardware identifier associated with the consent (optional).\n\nThe `swagger_types` dictionary defines the attribute names and their types, facilitating data validation and serialization. \nThe `attribute_map` dictionary maps attribute names to their corresponding JSON keys, which aids in API interactions.",
        "signature": "def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.document": {
        "code": "    def document(self, document):\n        \"\"\"Sets the document for the CCPAConsentState instance, representing the consent document related to the California Consumer Privacy Act (CCPA).\n\n:param document: The document of this CCPA Consent State, typically containing the terms or details of user consent.\n:type: str\n\nThis method updates the private instance variable `_document` with the provided value, which can be used by other methods in the class to retrieve or display the consent details. No return value is expected, and there are no side effects beyond modifying the state of the instance.\"\"\"\n        '\\n        Sets the document of this CCPA Consent State.\\n\\n\\n        :param document: The document of this CCPA Consent State.\\n        :type: str\\n        '\n        self._document = document",
        "docstring": "Sets the document for the CCPAConsentState instance, representing the consent document related to the California Consumer Privacy Act (CCPA).\n\n:param document: The document of this CCPA Consent State, typically containing the terms or details of user consent.\n:type: str\n\nThis method updates the private instance variable `_document` with the provided value, which can be used by other methods in the class to retrieve or display the consent details. No return value is expected, and there are no side effects beyond modifying the state of the instance.",
        "signature": "def document(self, document):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.consented": {
        "code": "    def consented(self, consented):\n        \"\"\"Sets the consented state of the CCPAConsentState.\n\n:param consented: A boolean indicating whether consent has been given. This value is stored as an instance variable (_consented) for use in tracking consent status in compliance with the California Consumer Privacy Act (CCPA).\n:type consented: bool\"\"\"\n        '\\n        Sets the consented of this CCPA Consent State.\\n\\n\\n        :param consented: The consented of this CCPA Consent State.\\n        :type: str\\n        '\n        self._consented = consented",
        "docstring": "Sets the consented state of the CCPAConsentState.\n\n:param consented: A boolean indicating whether consent has been given. This value is stored as an instance variable (_consented) for use in tracking consent status in compliance with the California Consumer Privacy Act (CCPA).\n:type consented: bool",
        "signature": "def consented(self, consented):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.timestamp_unixtime_ms": {
        "code": "    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"Sets the timestamp in Unix time format (in milliseconds) for the CCPA consent state.\n\n:param timestamp_unixtime_ms: The timestamp representing when consent was given, provided in Unix time format (milliseconds). It should be of type int.\n:type: int\n\nThis method updates the internal attribute `_timestamp_unixtime_ms`, which is used to track when the consent was granted in the context of the California Consumer Privacy Act (CCPA). This timestamp is essential for compliance tracking, and it interacts with other attributes of the `CCPAConsentState` class, such as `document` and `consented`.\"\"\"\n        '\\n        Sets the timestamp_unixtime_ms of this CCPA Consent State.\\n\\n\\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CCPA Consent State.\\n        :type: str\\n        '\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms",
        "docstring": "Sets the timestamp in Unix time format (in milliseconds) for the CCPA consent state.\n\n:param timestamp_unixtime_ms: The timestamp representing when consent was given, provided in Unix time format (milliseconds). It should be of type int.\n:type: int\n\nThis method updates the internal attribute `_timestamp_unixtime_ms`, which is used to track when the consent was granted in the context of the California Consumer Privacy Act (CCPA). This timestamp is essential for compliance tracking, and it interacts with other attributes of the `CCPAConsentState` class, such as `document` and `consented`.",
        "signature": "def timestamp_unixtime_ms(self, timestamp_unixtime_ms):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.location": {
        "code": "    def location(self, location):\n        \"\"\"Sets the location of this CCPAConsentState, which represents the geographical location associated with the consent state.\n\n:param location: A string representing the location of the individual whose consent state is being tracked.\n:type: str\n\nThis setter method updates the private attribute `_location` with the provided location value, allowing for the retrieval of location information through the public `location` property. It is part of the CCPAConsentState class, which models consent information in compliance with the California Consumer Privacy Act (CCPA).\"\"\"\n        '\\n        Sets the location of this CCPA Consent State.\\n\\n\\n        :param location: The location of this CCPA Consent State.\\n        :type: str\\n        '\n        self._location = location",
        "docstring": "Sets the location of this CCPAConsentState, which represents the geographical location associated with the consent state.\n\n:param location: A string representing the location of the individual whose consent state is being tracked.\n:type: str\n\nThis setter method updates the private attribute `_location` with the provided location value, allowing for the retrieval of location information through the public `location` property. It is part of the CCPAConsentState class, which models consent information in compliance with the California Consumer Privacy Act (CCPA).",
        "signature": "def location(self, location):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.hardware_id": {
        "code": "    def hardware_id(self, hardware_id):\n        \"\"\"Sets the hardware_id of this CCPAConsentState.\n\nThe hardware_id represents a unique identifier for the hardware on which the consent state was recorded, allowing for tracking or verification of devices in relation to consent management. This value is of type string.\n\n:param hardware_id: The hardware_id of this CCPAConsentState.\n:type hardware_id: str\n\nThis method directly modifies the `_hardware_id` attribute of the instance, which is later retrieved using the corresponding property method. The hardware_id is essential for identifying the device associated with user consent, facilitating compliance with regulations like CCPA.\"\"\"\n        '\\n        Sets the hardware_id of this CCPA Consent State.\\n\\n\\n        :param hardware_id: The hardware_id of this CCPA Consent State.\\n        :type: str\\n        '\n        self._hardware_id = hardware_id",
        "docstring": "Sets the hardware_id of this CCPAConsentState.\n\nThe hardware_id represents a unique identifier for the hardware on which the consent state was recorded, allowing for tracking or verification of devices in relation to consent management. This value is of type string.\n\n:param hardware_id: The hardware_id of this CCPAConsentState.\n:type hardware_id: str\n\nThis method directly modifies the `_hardware_id` attribute of the instance, which is later retrieved using the corresponding property method. The hardware_id is essential for identifying the device associated with user consent, facilitating compliance with regulations like CCPA.",
        "signature": "def hardware_id(self, hardware_id):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:__init__": {}
  },
  "PRD": "# PROJECT NAME: mparticle-test_ccpa_consent_state\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 ccpa_consent_state.py\n            \u251c\u2500\u2500 CCPAConsentState.__init__\n            \u251c\u2500\u2500 CCPAConsentState.consented\n            \u251c\u2500\u2500 CCPAConsentState.document\n            \u251c\u2500\u2500 CCPAConsentState.hardware_id\n            \u251c\u2500\u2500 CCPAConsentState.location\n            \u2514\u2500\u2500 CCPAConsentState.timestamp_unixtime_ms\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to facilitate integration with the mParticle Event API, focusing on managing and validating user consent states under the California Consumer Privacy Act (CCPA). It provides functionality for defining, storing, and verifying details related to a user\u2019s consent, including agreement documents, timestamps, locations, and hardware identifiers. By standardizing the representation and testing of CCPA consent data, the module ensures compliance with privacy regulations and enables developers to easily implement and verify consent management workflows within their applications. This solves the challenge of maintaining accurate and consistent consent records, simplifying regulatory compliance and enhancing user transparency.\n\n## FILE 1: mparticle/models/ccpa_consent_state.py\n\n- CLASS METHOD: CCPAConsentState.document\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def document(self, document):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the document for the CCPAConsentState instance, representing the consent document related to the California Consumer Privacy Act (CCPA).\n\n:param document: The document of this CCPA Consent State, typically containing the terms or details of user consent.\n:type: str\n\nThis method updates the private instance variable `_document` with the provided value, which can be used by other methods in the class to retrieve or display the consent details. No return value is expected, and there are no side effects beyond modifying the state of the instance.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.location\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def location(self, location):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the location of this CCPAConsentState, which represents the geographical location associated with the consent state.\n\n:param location: A string representing the location of the individual whose consent state is being tracked.\n:type: str\n\nThis setter method updates the private attribute `_location` with the provided location value, allowing for the retrieval of location information through the public `location` property. It is part of the CCPAConsentState class, which models consent information in compliance with the California Consumer Privacy Act (CCPA).\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.consented\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def consented(self, consented):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the consented state of the CCPAConsentState.\n\n:param consented: A boolean indicating whether consent has been given. This value is stored as an instance variable (_consented) for use in tracking consent status in compliance with the California Consumer Privacy Act (CCPA).\n:type consented: bool\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.timestamp_unixtime_ms\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the timestamp in Unix time format (in milliseconds) for the CCPA consent state.\n\n:param timestamp_unixtime_ms: The timestamp representing when consent was given, provided in Unix time format (milliseconds). It should be of type int.\n:type: int\n\nThis method updates the internal attribute `_timestamp_unixtime_ms`, which is used to track when the consent was granted in the context of the California Consumer Privacy Act (CCPA). This timestamp is essential for compliance tracking, and it interacts with other attributes of the `CCPAConsentState` class, such as `document` and `consented`.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.__init__\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the CCPAConsentState class, representing the state of consent under the California Consumer Privacy Act (CCPA).\n\n:param document: A string representing the consent document (optional).\n:param consented: A boolean indicating whether consent was given (optional).\n:param timestamp_unixtime_ms: An integer representing the timestamp of consent in Unix time format (optional).\n:param location: A string indicating the location relevant to the consent (optional).\n:param hardware_id: A string representing the hardware identifier associated with the consent (optional).\n\nThe `swagger_types` dictionary defines the attribute names and their types, facilitating data validation and serialization. \nThe `attribute_map` dictionary maps attribute names to their corresponding JSON keys, which aids in API interactions.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.hardware_id\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def hardware_id(self, hardware_id):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the hardware_id of this CCPAConsentState.\n\nThe hardware_id represents a unique identifier for the hardware on which the consent state was recorded, allowing for tracking or verification of devices in relation to consent management. This value is of type string.\n\n:param hardware_id: The hardware_id of this CCPAConsentState.\n:type hardware_id: str\n\nThis method directly modifies the `_hardware_id` attribute of the instance, which is later retrieved using the corresponding property method. The hardware_id is essential for identifying the device associated with user consent, facilitating compliance with regulations like CCPA.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/ccpa_consent_state.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass CCPAConsentState(object):\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_ccpa_consent_state.py:TestCCPAConsentState:testCCPAConsentState": {
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:__init__": {
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:document": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:consented": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:timestamp_unixtime_ms": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:location": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:hardware_id": {}
      },
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:document": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:consented": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:timestamp_unixtime_ms": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:location": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:hardware_id": {}
    }
  }
}