{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-biologicallyderivedproduct_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/biologicallyderivedproduct_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import biologicallyderivedproduct\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass BiologicallyDerivedProductTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"BiologicallyDerivedProduct\", js[\"resourceType\"])\n        return biologicallyderivedproduct.BiologicallyDerivedProduct(js)\n    \n    def testBiologicallyDerivedProduct1(self):\n        inst = self.instantiate_from(\"biologicallyderivedproduct-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a BiologicallyDerivedProduct instance\")\n        self.implBiologicallyDerivedProduct1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"BiologicallyDerivedProduct\", js[\"resourceType\"])\n        inst2 = biologicallyderivedproduct.BiologicallyDerivedProduct(js)\n        self.implBiologicallyDerivedProduct1(inst2)\n    \n    def implBiologicallyDerivedProduct1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/biologicallyderivedproduct.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProduct).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass BiologicallyDerivedProduct(domainresource.DomainResource):\n    \"\"\" A material substance originating from a biological entity.\n    \n    A material substance originating from a biological entity intended to be\n    transplanted or infused\n    into another (possibly the same) biological entity.\n    \"\"\"\n    \n    resource_type = \"BiologicallyDerivedProduct\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.collection = None\n        \"\"\" How this product was collected.\n        Type `BiologicallyDerivedProductCollection` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External ids for this item.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.manipulation = None\n        \"\"\" Any manipulation of product post-collection.\n        Type `BiologicallyDerivedProductManipulation` (represented as `dict` in JSON). \"\"\"\n        \n        self.parent = None\n        \"\"\" BiologicallyDerivedProduct parent.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.processing = None\n        \"\"\" Any processing of the product during collection.\n        List of `BiologicallyDerivedProductProcessing` items (represented as `dict` in JSON). \"\"\"\n        \n        self.productCategory = None\n        \"\"\" organ | tissue | fluid | cells | biologicalAgent.\n        Type `str`. \"\"\"\n        \n        self.productCode = None\n        \"\"\" What this biologically derived product is.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" The amount of this biologically derived product.\n        Type `int`. \"\"\"\n        \n        self.request = None\n        \"\"\" Procedure request.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" available | unavailable.\n        Type `str`. \"\"\"\n        \n        self.storage = None\n        \"\"\" Product storage.\n        List of `BiologicallyDerivedProductStorage` items (represented as `dict` in JSON). \"\"\"\n        \n        super(BiologicallyDerivedProduct, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BiologicallyDerivedProduct, self).elementProperties()\n        js.extend([\n            (\"collection\", \"collection\", BiologicallyDerivedProductCollection, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"manipulation\", \"manipulation\", BiologicallyDerivedProductManipulation, False, None, False),\n            (\"parent\", \"parent\", fhirreference.FHIRReference, True, None, False),\n            (\"processing\", \"processing\", BiologicallyDerivedProductProcessing, True, None, False),\n            (\"productCategory\", \"productCategory\", str, False, None, False),\n            (\"productCode\", \"productCode\", codeableconcept.CodeableConcept, False, None, False),\n            (\"quantity\", \"quantity\", int, False, None, False),\n            (\"request\", \"request\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"storage\", \"storage\", BiologicallyDerivedProductStorage, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass BiologicallyDerivedProductCollection(backboneelement.BackboneElement):\n    \"\"\" How this product was collected.\n    \"\"\"\n    \n    resource_type = \"BiologicallyDerivedProductCollection\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.collectedDateTime = None\n        \"\"\" Time of product collection.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.collectedPeriod = None\n        \"\"\" Time of product collection.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.collector = None\n        \"\"\" Individual performing collection.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.source = None\n        \"\"\" Who is product from.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(BiologicallyDerivedProductCollection, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductCollection, self).elementProperties()\n        js.extend([\n            (\"collectedDateTime\", \"collectedDateTime\", fhirdatetime.FHIRDateTime, False, \"collected\", False),\n            (\"collectedPeriod\", \"collectedPeriod\", period.Period, False, \"collected\", False),\n            (\"collector\", \"collector\", fhirreference.FHIRReference, False, None, False),\n            (\"source\", \"source\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass BiologicallyDerivedProductManipulation(backboneelement.BackboneElement):\n    \"\"\" Any manipulation of product post-collection.\n    \n    Any manipulation of product post-collection that is intended to alter the\n    product.  For example a buffy-coat enrichment or CD8 reduction of\n    Peripheral Blood Stem Cells to make it more suitable for infusion.\n    \"\"\"\n    \n    resource_type = \"BiologicallyDerivedProductManipulation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of manipulation.\n        Type `str`. \"\"\"\n        \n        self.timeDateTime = None\n        \"\"\" Time of manipulation.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timePeriod = None\n        \"\"\" Time of manipulation.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(BiologicallyDerivedProductManipulation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductManipulation, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"timeDateTime\", \"timeDateTime\", fhirdatetime.FHIRDateTime, False, \"time\", False),\n            (\"timePeriod\", \"timePeriod\", period.Period, False, \"time\", False),\n        ])\n        return js\n\n\nclass BiologicallyDerivedProductProcessing(backboneelement.BackboneElement):\n    \"\"\" Any processing of the product during collection.\n    \n    Any processing of the product during collection that does not change the\n    fundamental nature of the product. For example adding anti-coagulants\n    during the collection of Peripheral Blood Stem Cells.\n    \"\"\"\n    \n    resource_type = \"BiologicallyDerivedProductProcessing\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additive = None\n        \"\"\" Substance added during processing.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Description of of processing.\n        Type `str`. \"\"\"\n        \n        self.procedure = None\n        \"\"\" Procesing code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.timeDateTime = None\n        \"\"\" Time of processing.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timePeriod = None\n        \"\"\" Time of processing.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(BiologicallyDerivedProductProcessing, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductProcessing, self).elementProperties()\n        js.extend([\n            (\"additive\", \"additive\", fhirreference.FHIRReference, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"procedure\", \"procedure\", codeableconcept.CodeableConcept, False, None, False),\n            (\"timeDateTime\", \"timeDateTime\", fhirdatetime.FHIRDateTime, False, \"time\", False),\n            (\"timePeriod\", \"timePeriod\", period.Period, False, \"time\", False),\n        ])\n        return js\n\n\nclass BiologicallyDerivedProductStorage(backboneelement.BackboneElement):\n    \"\"\" Product storage.\n    \"\"\"\n    \n    resource_type = \"BiologicallyDerivedProductStorage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of storage.\n        Type `str`. \"\"\"\n        \n        self.duration = None\n        \"\"\" Storage timeperiod.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.scale = None\n        \"\"\" farenheit | celsius | kelvin.\n        Type `str`. \"\"\"\n        \n        self.temperature = None\n        \"\"\" Storage temperature.\n        Type `float`. \"\"\"\n        \n        super(BiologicallyDerivedProductStorage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductStorage, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"duration\", \"duration\", period.Period, False, None, False),\n            (\"scale\", \"scale\", str, False, None, False),\n            (\"temperature\", \"temperature\", float, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/biologicallyderivedproduct.py": {
      "BiologicallyDerivedProduct.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a BiologicallyDerivedProduct instance representing a material substance originating from a biological entity, intended for transplantation or infusion.\n\n    This constructor sets various attributes such as collection details, identifiers, and processing information related to the product. It accepts an optional JSON dictionary for initialization and a strict flag to control validation error handling.\n\n    Parameters:\n    - jsondict: A dictionary containing key-value pairs to initialize the object's properties.\n    - strict: A boolean flag that, when set to True (default), raises a FHIRValidationError on validation errors; if False, such errors do not raise an exception.\n\n    Attributes:\n    - collection: Details on how the product was collected (BiologicallyDerivedProductCollection).\n    - identifier: A list of external IDs corresponding to this product (Identifier).\n    - manipulation: Information on any post-collection manipulation (BiologicallyDerivedProductManipulation).\n    - parent: References to any parent biologically derived products (FHIRReference).\n    - processing: Details on any processing during collection (BiologicallyDerivedProductProcessing).\n    - productCategory: Category of the product (string).\n    - productCode: Code representing the product type (CodeableConcept).\n    - quantity: The amount of the product (integer).\n    - request: Procedure requests associated with the product (FHIRReference).\n    - status: Availability status of the product (string).\n    - storage: Information on product storage conditions (BiologicallyDerivedProductStorage).\n\n    The BiologicallyDerivedProduct class extends the DomainResource class, inheriting its properties and methods to ensure compliance with FHIR standards. The invocation of `super()` ensures proper initialization of the parent class.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.collection = None\n        ' How this product was collected.\\n        Type `BiologicallyDerivedProductCollection` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' External ids for this item.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.manipulation = None\n        ' Any manipulation of product post-collection.\\n        Type `BiologicallyDerivedProductManipulation` (represented as `dict` in JSON). '\n        self.parent = None\n        ' BiologicallyDerivedProduct parent.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.processing = None\n        ' Any processing of the product during collection.\\n        List of `BiologicallyDerivedProductProcessing` items (represented as `dict` in JSON). '\n        self.productCategory = None\n        ' organ | tissue | fluid | cells | biologicalAgent.\\n        Type `str`. '\n        self.productCode = None\n        ' What this biologically derived product is.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' The amount of this biologically derived product.\\n        Type `int`. '\n        self.request = None\n        ' Procedure request.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' available | unavailable.\\n        Type `str`. '\n        self.storage = None\n        ' Product storage.\\n        List of `BiologicallyDerivedProductStorage` items (represented as `dict` in JSON). '\n        super(BiologicallyDerivedProduct, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a BiologicallyDerivedProduct instance representing a material substance originating from a biological entity, intended for transplantation or infusion.\n\nThis constructor sets various attributes such as collection details, identifiers, and processing information related to the product. It accepts an optional JSON dictionary for initialization and a strict flag to control validation error handling.\n\nParameters:\n- jsondict: A dictionary containing key-value pairs to initialize the object's properties.\n- strict: A boolean flag that, when set to True (default), raises a FHIRValidationError on validation errors; if False, such errors do not raise an exception.\n\nAttributes:\n- collection: Details on how the product was collected (BiologicallyDerivedProductCollection).\n- identifier: A list of external IDs corresponding to this product (Identifier).\n- manipulation: Information on any post-collection manipulation (BiologicallyDerivedProductManipulation).\n- parent: References to any parent biologically derived products (FHIRReference).\n- processing: Details on any processing during collection (BiologicallyDerivedProductProcessing).\n- productCategory: Category of the product (string).\n- productCode: Code representing the product type (CodeableConcept).\n- quantity: The amount of the product (integer).\n- request: Procedure requests associated with the product (FHIRReference).\n- status: Availability status of the product (string).\n- storage: Information on product storage conditions (BiologicallyDerivedProductStorage).\n\nThe BiologicallyDerivedProduct class extends the DomainResource class, inheriting its properties and methods to ensure compliance with FHIR standards. The invocation of `super()` ensures proper initialization of the parent class.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class BiologicallyDerivedProduct(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method extends the functionality of the superclass' as_json method by adding the 'resourceType' key to the resulting JSON dictionary. The value of 'resourceType' is set to the class attribute resource_type, which is defined as 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes inherited from the parent class as well as the 'resourceType' key.\n\nDependencies:\n    - Calls the as_json method from the superclass to retrieve the initial dictionary representation.\n    - Utilizes the resource_type class attribute to ensure the correct representation for FHIR resources.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method extends the functionality of the superclass' as_json method by adding the 'resourceType' key to the resulting JSON dictionary. The value of 'resourceType' is set to the class attribute resource_type, which is defined as 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes inherited from the parent class as well as the 'resourceType' key.\n\nDependencies:\n    - Calls the as_json method from the superclass to retrieve the initial dictionary representation.\n    - Utilizes the resource_type class attribute to ensure the correct representation for FHIR resources.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/biologicallyderivedproduct_test.py:BiologicallyDerivedProductTests:testBiologicallyDerivedProduct1": {
      "tests/models/biologicallyderivedproduct_test.py:BiologicallyDerivedProductTests:instantiate_from": {
        "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/biologicallyderivedproduct_test.py:BiologicallyDerivedProductTests:implBiologicallyDerivedProduct1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/biologicallyderivedproduct_test.py:BiologicallyDerivedProductTests:instantiate_from": {
      "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/biologicallyderivedproduct.py:BiologicallyDerivedProduct:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-biologicallyderivedproduct_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 biologicallyderivedproduct.py\n        \u2502   \u2514\u2500\u2500 BiologicallyDerivedProduct.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and instantiation of FHIR-compliant `BiologicallyDerivedProduct` resources, adhering to the FHIR 4.0.1 standard. It provides functionality for loading, verifying, and serializing `BiologicallyDerivedProduct` data, ensuring conformity to the expected structure and schema defined by HL7. Through its suite of tests, the module ensures the integrity and correctness of biological product representations, supporting use cases such as healthcare data exchange and compliance with interoperability standards. This solves the challenge of reliably handling complex biomedical data formats, offering developers a robust tool for testing and validating FHIR resource implementations.\n\n## FILE 1: fhirclient/models/biologicallyderivedproduct.py\n\n- CLASS METHOD: BiologicallyDerivedProduct.__init__\n  - CLASS SIGNATURE: class BiologicallyDerivedProduct(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a BiologicallyDerivedProduct instance representing a material substance originating from a biological entity, intended for transplantation or infusion.\n\nThis constructor sets various attributes such as collection details, identifiers, and processing information related to the product. It accepts an optional JSON dictionary for initialization and a strict flag to control validation error handling.\n\nParameters:\n- jsondict: A dictionary containing key-value pairs to initialize the object's properties.\n- strict: A boolean flag that, when set to True (default), raises a FHIRValidationError on validation errors; if False, such errors do not raise an exception.\n\nAttributes:\n- collection: Details on how the product was collected (BiologicallyDerivedProductCollection).\n- identifier: A list of external IDs corresponding to this product (Identifier).\n- manipulation: Information on any post-collection manipulation (BiologicallyDerivedProductManipulation).\n- parent: References to any parent biologically derived products (FHIRReference).\n- processing: Details on any processing during collection (BiologicallyDerivedProductProcessing).\n- productCategory: Category of the product (string).\n- productCode: Code representing the product type (CodeableConcept).\n- quantity: The amount of the product (integer).\n- request: Procedure requests associated with the product (FHIRReference).\n- status: Availability status of the product (string).\n- storage: Information on product storage conditions (BiologicallyDerivedProductStorage).\n\nThe BiologicallyDerivedProduct class extends the DomainResource class, inheriting its properties and methods to ensure compliance with FHIR standards. The invocation of `super()` ensures proper initialization of the parent class.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method extends the functionality of the superclass' as_json method by adding the 'resourceType' key to the resulting JSON dictionary. The value of 'resourceType' is set to the class attribute resource_type, which is defined as 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes inherited from the parent class as well as the 'resourceType' key.\n\nDependencies:\n    - Calls the as_json method from the superclass to retrieve the initial dictionary representation.\n    - Utilizes the resource_type class attribute to ensure the correct representation for FHIR resources.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/biologicallyderivedproduct.py": "from . import domainresource\n\nclass BiologicallyDerivedProduct(domainresource.DomainResource):\n    \"\"\" A material substance originating from a biological entity.\n    \n    A material substance originating from a biological entity intended to be\n    transplanted or infused\n    into another (possibly the same) biological entity.\n    \"\"\"\n    resource_type = 'BiologicallyDerivedProduct'\n\n    def elementProperties(self):\n        js = super(BiologicallyDerivedProduct, self).elementProperties()\n        js.extend([('collection', 'collection', BiologicallyDerivedProductCollection, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('manipulation', 'manipulation', BiologicallyDerivedProductManipulation, False, None, False), ('parent', 'parent', fhirreference.FHIRReference, True, None, False), ('processing', 'processing', BiologicallyDerivedProductProcessing, True, None, False), ('productCategory', 'productCategory', str, False, None, False), ('productCode', 'productCode', codeableconcept.CodeableConcept, False, None, False), ('quantity', 'quantity', int, False, None, False), ('request', 'request', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, False), ('storage', 'storage', BiologicallyDerivedProductStorage, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass BiologicallyDerivedProductCollection(backboneelement.BackboneElement):\n    \"\"\" How this product was collected.\n    \"\"\"\n    resource_type = 'BiologicallyDerivedProductCollection'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.collectedDateTime = None\n        ' Time of product collection.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.collectedPeriod = None\n        ' Time of product collection.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.collector = None\n        ' Individual performing collection.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.source = None\n        ' Who is product from.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(BiologicallyDerivedProductCollection, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductCollection, self).elementProperties()\n        js.extend([('collectedDateTime', 'collectedDateTime', fhirdatetime.FHIRDateTime, False, 'collected', False), ('collectedPeriod', 'collectedPeriod', period.Period, False, 'collected', False), ('collector', 'collector', fhirreference.FHIRReference, False, None, False), ('source', 'source', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass BiologicallyDerivedProductManipulation(backboneelement.BackboneElement):\n    \"\"\" Any manipulation of product post-collection.\n    \n    Any manipulation of product post-collection that is intended to alter the\n    product.  For example a buffy-coat enrichment or CD8 reduction of\n    Peripheral Blood Stem Cells to make it more suitable for infusion.\n    \"\"\"\n    resource_type = 'BiologicallyDerivedProductManipulation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of manipulation.\\n        Type `str`. '\n        self.timeDateTime = None\n        ' Time of manipulation.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timePeriod = None\n        ' Time of manipulation.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(BiologicallyDerivedProductManipulation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductManipulation, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('timeDateTime', 'timeDateTime', fhirdatetime.FHIRDateTime, False, 'time', False), ('timePeriod', 'timePeriod', period.Period, False, 'time', False)])\n        return js\n\nclass BiologicallyDerivedProductProcessing(backboneelement.BackboneElement):\n    \"\"\" Any processing of the product during collection.\n    \n    Any processing of the product during collection that does not change the\n    fundamental nature of the product. For example adding anti-coagulants\n    during the collection of Peripheral Blood Stem Cells.\n    \"\"\"\n    resource_type = 'BiologicallyDerivedProductProcessing'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.additive = None\n        ' Substance added during processing.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.description = None\n        ' Description of of processing.\\n        Type `str`. '\n        self.procedure = None\n        ' Procesing code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.timeDateTime = None\n        ' Time of processing.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timePeriod = None\n        ' Time of processing.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(BiologicallyDerivedProductProcessing, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductProcessing, self).elementProperties()\n        js.extend([('additive', 'additive', fhirreference.FHIRReference, False, None, False), ('description', 'description', str, False, None, False), ('procedure', 'procedure', codeableconcept.CodeableConcept, False, None, False), ('timeDateTime', 'timeDateTime', fhirdatetime.FHIRDateTime, False, 'time', False), ('timePeriod', 'timePeriod', period.Period, False, 'time', False)])\n        return js\n\nclass BiologicallyDerivedProductStorage(backboneelement.BackboneElement):\n    \"\"\" Product storage.\n    \"\"\"\n    resource_type = 'BiologicallyDerivedProductStorage'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of storage.\\n        Type `str`. '\n        self.duration = None\n        ' Storage timeperiod.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.scale = None\n        ' farenheit | celsius | kelvin.\\n        Type `str`. '\n        self.temperature = None\n        ' Storage temperature.\\n        Type `float`. '\n        super(BiologicallyDerivedProductStorage, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(BiologicallyDerivedProductStorage, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('duration', 'duration', period.Period, False, None, False), ('scale', 'scale', str, False, None, False), ('temperature', 'temperature', float, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}