{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_consent_state",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_consent_state.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\nimport calendar\nimport time\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.consent_state import ConsentState\n\n\nclass TestConsentState(unittest.TestCase):\n    \"\"\" ConsentState unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testConsentState(self):\n        \"\"\"\n        Test ConsentState\n        \"\"\"\n        model = mparticle.models.consent_state.ConsentState()\n\n        self.assertEqual(model.gdpr, {})\n        self.assertEqual(model.ccpa, {})\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/consent_state.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ConsentState(object):\n    def __init__(self):\n        \"\"\"\n        ConsentState - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'ccpa': 'dict',\n            'gdpr': 'dict'\n        }\n\n        self.attribute_map = {\n            'ccpa': 'ccpa',\n            'gdpr': 'gdpr'\n        }\n\n        self.ccpa = dict()\n        self.gdpr = dict()\n\n    @property\n    def ccpa(self):\n        \"\"\"\n        Gets the ccpa of this CCPAConsentState\n\n        :return The ccpa of this CCPAConsentState\n        :rtype dict\n        \"\"\"\n        return self._ccpa\n\n    @ccpa.setter\n    def ccpa(self, ccpa):\n        \"\"\"\n        Sets the ccpa of this Consent State.\n\n\n        :param ccpa: The ccpa of this Consent State.\n        :type: dict\n        \"\"\"\n\n        self._ccpa = ccpa\n\n    @property\n    def gdpr(self):\n        \"\"\"\n        Gets the gdpr of this GDPRConsentState\n\n        :return The gdpr of this GDPRConsentState\n        :rtype dict\n        \"\"\"\n        return self._gdpr\n\n    @gdpr.setter\n    def gdpr(self, gdpr):\n        \"\"\"\n        Sets the gdpr of this Consent State.\n\n\n        :param gdpr: The gdpr of this Consent State.\n        :type: dict \n        \"\"\"\n\n        self._gdpr = gdpr\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/consent_state.py": {
      "ConsentState.__init__": {
        "code": "    def __init__(self):\n        \"\"\"Initializes a new instance of the ConsentState class, which is a model defined in the Swagger API specification for handling consent state related to privacy regulations such as CCPA (California Consumer Privacy Act) and GDPR (General Data Protection Regulation). \n\n    This constructor initializes two attributes: `ccpa` and `gdpr`, both set to empty dictionaries, which are intended to store consent information specific to these regulations. Additionally, it defines two dictionaries, `swagger_types` and `attribute_map`, for referencing attribute types and mapping attribute names to their JSON equivalents in the API specification.\n\n    Attributes:\n        swagger_types (dict): Maps attribute names to their types, where 'ccpa' and 'gdpr' are both of type 'dict'.\n        attribute_map (dict): Maps attribute names to their respective JSON key names, reflecting the API definition.\n        ccpa (dict): Holds consent information related to the CCPA.\n        gdpr (dict): Holds consent information related to the GDPR.\"\"\"\n        '\\n        ConsentState - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'ccpa': 'dict', 'gdpr': 'dict'}\n        self.attribute_map = {'ccpa': 'ccpa', 'gdpr': 'gdpr'}\n        self.ccpa = dict()\n        self.gdpr = dict()",
        "docstring": "Initializes a new instance of the ConsentState class, which is a model defined in the Swagger API specification for handling consent state related to privacy regulations such as CCPA (California Consumer Privacy Act) and GDPR (General Data Protection Regulation). \n\nThis constructor initializes two attributes: `ccpa` and `gdpr`, both set to empty dictionaries, which are intended to store consent information specific to these regulations. Additionally, it defines two dictionaries, `swagger_types` and `attribute_map`, for referencing attribute types and mapping attribute names to their JSON equivalents in the API specification.\n\nAttributes:\n    swagger_types (dict): Maps attribute names to their types, where 'ccpa' and 'gdpr' are both of type 'dict'.\n    attribute_map (dict): Maps attribute names to their respective JSON key names, reflecting the API definition.\n    ccpa (dict): Holds consent information related to the CCPA.\n    gdpr (dict): Holds consent information related to the GDPR.",
        "signature": "def __init__(self):",
        "type": "Method",
        "class_signature": "class ConsentState(object):"
      },
      "ConsentState.ccpa": {
        "code": "    def ccpa(self, ccpa):\n        \"\"\"Sets the 'ccpa' attribute of the ConsentState instance, which holds information regarding the California Consumer Privacy Act (CCPA) consent status.\n\n:param ccpa: A dictionary representing the consent state of CCPA.\n:type ccpa: dict\n\nThis setter method allows you to store a CCPA consent state in the instance of ConsentState. The internal variable `_ccpa` is updated with the provided dictionary. Note that the class also contains a corresponding getter method to retrieve this consent state. The class uses the `swagger_types` dictionary to define expected types for its attributes, although this method itself does not directly reference any constants beyond the defined types for its attributes.\"\"\"\n        '\\n        Sets the ccpa of this Consent State.\\n\\n\\n        :param ccpa: The ccpa of this Consent State.\\n        :type: dict\\n        '\n        self._ccpa = ccpa",
        "docstring": "Sets the 'ccpa' attribute of the ConsentState instance, which holds information regarding the California Consumer Privacy Act (CCPA) consent status.\n\n:param ccpa: A dictionary representing the consent state of CCPA.\n:type ccpa: dict\n\nThis setter method allows you to store a CCPA consent state in the instance of ConsentState. The internal variable `_ccpa` is updated with the provided dictionary. Note that the class also contains a corresponding getter method to retrieve this consent state. The class uses the `swagger_types` dictionary to define expected types for its attributes, although this method itself does not directly reference any constants beyond the defined types for its attributes.",
        "signature": "def ccpa(self, ccpa):",
        "type": "Method",
        "class_signature": "class ConsentState(object):"
      },
      "ConsentState.gdpr": {
        "code": "    def gdpr(self, gdpr):\n        \"\"\"Sets the GDPR consent state for the ConsentState instance.\n\n:param gdpr: A dictionary representing the GDPR consent state associated with this ConsentState. \n:type: dict \n\nThis method directly modifies the internal `_gdpr` attribute of the class. The `_gdpr` attribute is used to store the GDPR consent-related information according to the specifications of the mParticle Event API. The method does not return a value, and it only sets the internal state. The gdpr attribute is accessed and modified through its getter and setter, ensuring encapsulation of the consent data within the ConsentState class.\"\"\"\n        '\\n        Sets the gdpr of this Consent State.\\n\\n\\n        :param gdpr: The gdpr of this Consent State.\\n        :type: dict \\n        '\n        self._gdpr = gdpr",
        "docstring": "Sets the GDPR consent state for the ConsentState instance.\n\n:param gdpr: A dictionary representing the GDPR consent state associated with this ConsentState. \n:type: dict \n\nThis method directly modifies the internal `_gdpr` attribute of the class. The `_gdpr` attribute is used to store the GDPR consent-related information according to the specifications of the mParticle Event API. The method does not return a value, and it only sets the internal state. The gdpr attribute is accessed and modified through its getter and setter, ensuring encapsulation of the consent data within the ConsentState class.",
        "signature": "def gdpr(self, gdpr):",
        "type": "Method",
        "class_signature": "class ConsentState(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/consent_state.py:ConsentState:__init__": {}
  },
  "PRD": "# PROJECT NAME: mparticle-test_consent_state\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 consent_state.py\n            \u251c\u2500\u2500 ConsentState.__init__\n            \u251c\u2500\u2500 ConsentState.ccpa\n            \u2514\u2500\u2500 ConsentState.gdpr\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe ConsentState module facilitates the management and validation of user consent data within the mParticle Event API framework, focusing on GDPR and CCPA compliance. It provides functionality to structure, verify, and interact programmatically with user consent states, enabling seamless tracking and integration of regulatory consent requirements into applications. This module addresses the need for developers to easily handle and ensure proper data privacy adherence, simplifying the integration of complex consent frameworks while fostering transparency and regulatory compliance.\n\n## FILE 1: mparticle/models/consent_state.py\n\n- CLASS METHOD: ConsentState.ccpa\n  - CLASS SIGNATURE: class ConsentState(object):\n  - SIGNATURE: def ccpa(self, ccpa):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the 'ccpa' attribute of the ConsentState instance, which holds information regarding the California Consumer Privacy Act (CCPA) consent status.\n\n:param ccpa: A dictionary representing the consent state of CCPA.\n:type ccpa: dict\n\nThis setter method allows you to store a CCPA consent state in the instance of ConsentState. The internal variable `_ccpa` is updated with the provided dictionary. Note that the class also contains a corresponding getter method to retrieve this consent state. The class uses the `swagger_types` dictionary to define expected types for its attributes, although this method itself does not directly reference any constants beyond the defined types for its attributes.\n\"\"\"\n```\n\n- CLASS METHOD: ConsentState.__init__\n  - CLASS SIGNATURE: class ConsentState(object):\n  - SIGNATURE: def __init__(self):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the ConsentState class, which is a model defined in the Swagger API specification for handling consent state related to privacy regulations such as CCPA (California Consumer Privacy Act) and GDPR (General Data Protection Regulation). \n\nThis constructor initializes two attributes: `ccpa` and `gdpr`, both set to empty dictionaries, which are intended to store consent information specific to these regulations. Additionally, it defines two dictionaries, `swagger_types` and `attribute_map`, for referencing attribute types and mapping attribute names to their JSON equivalents in the API specification.\n\nAttributes:\n    swagger_types (dict): Maps attribute names to their types, where 'ccpa' and 'gdpr' are both of type 'dict'.\n    attribute_map (dict): Maps attribute names to their respective JSON key names, reflecting the API definition.\n    ccpa (dict): Holds consent information related to the CCPA.\n    gdpr (dict): Holds consent information related to the GDPR.\n\"\"\"\n```\n\n- CLASS METHOD: ConsentState.gdpr\n  - CLASS SIGNATURE: class ConsentState(object):\n  - SIGNATURE: def gdpr(self, gdpr):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the GDPR consent state for the ConsentState instance.\n\n:param gdpr: A dictionary representing the GDPR consent state associated with this ConsentState. \n:type: dict \n\nThis method directly modifies the internal `_gdpr` attribute of the class. The `_gdpr` attribute is used to store the GDPR consent-related information according to the specifications of the mParticle Event API. The method does not return a value, and it only sets the internal state. The gdpr attribute is accessed and modified through its getter and setter, ensuring encapsulation of the consent data within the ConsentState class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/consent_state.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass ConsentState(object):\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_consent_state.py:TestConsentState:testConsentState": {
      "mparticle/models/consent_state.py:ConsentState:__init__": {
        "mparticle/models/consent_state.py:ConsentState:ccpa": {},
        "mparticle/models/consent_state.py:ConsentState:gdpr": {}
      },
      "mparticle/models/consent_state.py:ConsentState:gdpr": {},
      "mparticle/models/consent_state.py:ConsentState:ccpa": {}
    }
  }
}