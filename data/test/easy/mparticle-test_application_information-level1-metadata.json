{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_application_information",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_application_information.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.application_information import ApplicationInformation\n\n\nclass TestApplicationInformation(unittest.TestCase):\n    \"\"\" ApplicationInformation unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testApplicationInformation(self):\n        \"\"\"\n        Test ApplicationInformation\n        \"\"\"\n        model = mparticle.models.application_information.ApplicationInformation()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/application_information.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ApplicationInformation(object):\n\n    def __init__(self, application_name=None, application_version=None, install_referrer=None, package=None):\n        \"\"\"\n        ApplicationInformation - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'application_name': 'str',\n            'application_version': 'str',\n            'install_referrer': 'str',\n            'package': 'str'\n        }\n\n        self.attribute_map = {\n            'application_name': 'application_name',\n            'application_version': 'application_version',\n            'install_referrer': 'install_referrer',\n            'package': 'package'\n        }\n\n        self._application_name = application_name\n        self._application_version = application_version\n        self._install_referrer = install_referrer\n        self._package = package\n\n    @property\n    def application_name(self):\n        \"\"\"\n        Gets the application_name of this ApplicationInformation.\n\n\n        :return: The application_name of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._application_name\n\n    @application_name.setter\n    def application_name(self, application_name):\n        \"\"\"\n        Sets the application_name of this ApplicationInformation.\n\n\n        :param application_name: The application_name of this ApplicationInformation.\n        :type: str\n        \"\"\"\n\n        self._application_name = application_name\n\n    @property\n    def application_version(self):\n        \"\"\"\n        Gets the application_version of this ApplicationInformation.\n\n\n        :return: The application_version of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._application_version\n\n    @application_version.setter\n    def application_version(self, application_version):\n        \"\"\"\n        Sets the application_version of this ApplicationInformation.\n\n\n        :param application_version: The application_version of this ApplicationInformation.\n        :type: str\n        \"\"\"\n\n        self._application_version = application_version\n\n    @property\n    def install_referrer(self):\n        \"\"\"\n        Gets the install_referrer of this ApplicationInformation.\n\n\n        :return: The install_referrer of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._install_referrer\n\n    @install_referrer.setter\n    def install_referrer(self, install_referrer):\n        \"\"\"\n        Sets the install_referrer of this ApplicationInformation.\n\n\n        :param install_referrer: The install_referrer of this ApplicationInformation.\n        :type: str\n        \"\"\"\n\n        self._install_referrer = install_referrer\n\n    @property\n    def package(self):\n        \"\"\"\n        Gets the package of this ApplicationInformation.\n\n\n        :return: The package of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._package\n\n    @package.setter\n    def package(self, package):\n        \"\"\"\n        Sets the package of this ApplicationInformation.\n\n\n        :param package: The package of this ApplicationInformation.\n        :type: str\n        \"\"\"\n\n        self._package = package\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/application_information.py": {
      "ApplicationInformation.__init__": {
        "code": "    def __init__(self, application_name=None, application_version=None, install_referrer=None, package=None):\n        \"\"\"Initializes an instance of the ApplicationInformation class, which serves as a model for holding application-related metadata defined in the mParticle Event API specification. \n\n    Parameters:\n    - application_name (str, optional): The name of the application.\n    - application_version (str, optional): The version of the application.\n    - install_referrer (str, optional): The referrer used for application installation tracking.\n    - package (str, optional): The package name of the application.\n\n    This constructor also initializes two dictionaries:\n    - swagger_types: Maps attribute names to their respective data types, used for validation and serialization.\n    - attribute_map: Maps attribute names to their corresponding JSON keys as defined in the API specification.\n\n    Attributes:\n    - _application_name: Stores the value of application_name.\n    - _application_version: Stores the value of application_version.\n    - _install_referrer: Stores the value of install_referrer.\n    - _package: Stores the value of package.\n\n    No return values are expected from this method, as it simply sets up the instance's initial state.\"\"\"\n        '\\n        ApplicationInformation - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'application_name': 'str', 'application_version': 'str', 'install_referrer': 'str', 'package': 'str'}\n        self.attribute_map = {'application_name': 'application_name', 'application_version': 'application_version', 'install_referrer': 'install_referrer', 'package': 'package'}\n        self._application_name = application_name\n        self._application_version = application_version\n        self._install_referrer = install_referrer\n        self._package = package",
        "docstring": "Initializes an instance of the ApplicationInformation class, which serves as a model for holding application-related metadata defined in the mParticle Event API specification. \n\nParameters:\n- application_name (str, optional): The name of the application.\n- application_version (str, optional): The version of the application.\n- install_referrer (str, optional): The referrer used for application installation tracking.\n- package (str, optional): The package name of the application.\n\nThis constructor also initializes two dictionaries:\n- swagger_types: Maps attribute names to their respective data types, used for validation and serialization.\n- attribute_map: Maps attribute names to their corresponding JSON keys as defined in the API specification.\n\nAttributes:\n- _application_name: Stores the value of application_name.\n- _application_version: Stores the value of application_version.\n- _install_referrer: Stores the value of install_referrer.\n- _package: Stores the value of package.\n\nNo return values are expected from this method, as it simply sets up the instance's initial state.",
        "signature": "def __init__(self, application_name=None, application_version=None, install_referrer=None, package=None):",
        "type": "Method",
        "class_signature": "class ApplicationInformation(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_application_information\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 application_information.py\n            \u2514\u2500\u2500 ApplicationInformation.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module interacts with the mParticle Event API and serves to facilitate the testing and validation of the `ApplicationInformation` model within the mParticle framework. It enables developers to perform unit tests on the `ApplicationInformation` class, ensuring the correct implementation and integrity of application metadata structures used for event tracking and analytics. By providing a structured method to verify the functionality of this specific model, the module streamlines development workflows and helps ensure that integrations with mParticle\u2019s API are robust and reliable. This is particularly valuable in reducing errors and improving confidence when handling application metadata in event tracking systems.\n\n## FILE 1: mparticle/models/application_information.py\n\n- CLASS METHOD: ApplicationInformation.__init__\n  - CLASS SIGNATURE: class ApplicationInformation(object):\n  - SIGNATURE: def __init__(self, application_name=None, application_version=None, install_referrer=None, package=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the ApplicationInformation class, which serves as a model for holding application-related metadata defined in the mParticle Event API specification. \n\nParameters:\n- application_name (str, optional): The name of the application.\n- application_version (str, optional): The version of the application.\n- install_referrer (str, optional): The referrer used for application installation tracking.\n- package (str, optional): The package name of the application.\n\nThis constructor also initializes two dictionaries:\n- swagger_types: Maps attribute names to their respective data types, used for validation and serialization.\n- attribute_map: Maps attribute names to their corresponding JSON keys as defined in the API specification.\n\nAttributes:\n- _application_name: Stores the value of application_name.\n- _application_version: Stores the value of application_version.\n- _install_referrer: Stores the value of install_referrer.\n- _package: Stores the value of package.\n\nNo return values are expected from this method, as it simply sets up the instance's initial state.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/application_information.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass ApplicationInformation(object):\n\n    @property\n    def application_name(self):\n        \"\"\"\n        Gets the application_name of this ApplicationInformation.\n\n\n        :return: The application_name of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._application_name\n\n    @application_name.setter\n    def application_name(self, application_name):\n        \"\"\"\n        Sets the application_name of this ApplicationInformation.\n\n\n        :param application_name: The application_name of this ApplicationInformation.\n        :type: str\n        \"\"\"\n        self._application_name = application_name\n\n    @property\n    def application_version(self):\n        \"\"\"\n        Gets the application_version of this ApplicationInformation.\n\n\n        :return: The application_version of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._application_version\n\n    @application_version.setter\n    def application_version(self, application_version):\n        \"\"\"\n        Sets the application_version of this ApplicationInformation.\n\n\n        :param application_version: The application_version of this ApplicationInformation.\n        :type: str\n        \"\"\"\n        self._application_version = application_version\n\n    @property\n    def install_referrer(self):\n        \"\"\"\n        Gets the install_referrer of this ApplicationInformation.\n\n\n        :return: The install_referrer of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._install_referrer\n\n    @install_referrer.setter\n    def install_referrer(self, install_referrer):\n        \"\"\"\n        Sets the install_referrer of this ApplicationInformation.\n\n\n        :param install_referrer: The install_referrer of this ApplicationInformation.\n        :type: str\n        \"\"\"\n        self._install_referrer = install_referrer\n\n    @property\n    def package(self):\n        \"\"\"\n        Gets the package of this ApplicationInformation.\n\n\n        :return: The package of this ApplicationInformation.\n        :rtype: str\n        \"\"\"\n        return self._package\n\n    @package.setter\n    def package(self, package):\n        \"\"\"\n        Sets the package of this ApplicationInformation.\n\n\n        :param package: The package of this ApplicationInformation.\n        :type: str\n        \"\"\"\n        self._package = package\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_application_information.py:TestApplicationInformation:testApplicationInformation": {
      "mparticle/models/application_information.py:ApplicationInformation:__init__": {}
    }
  }
}