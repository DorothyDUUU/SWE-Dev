{
  "dir_path": "/app/pytube",
  "package_name": "pytube",
  "sample_name": "pytube-test_itags",
  "src_dir": "pytube/",
  "test_dir": "tests/",
  "test_file": "tests/test_itags.py",
  "test_code": "from pytube import itags\n\n\ndef test_get_format_profile():\n    profile = itags.get_format_profile(22)\n    assert profile[\"resolution\"] == \"720p\"\n\n\ndef test_get_format_profile_non_existant():\n    profile = itags.get_format_profile(2239)\n    assert profile[\"resolution\"] is None\n",
  "GT_file_code": {
    "pytube/itags.py": "\"\"\"This module contains a lookup table of YouTube's itag values.\"\"\"\nfrom typing import Dict\n\nPROGRESSIVE_VIDEO = {\n    5: (\"240p\", \"64kbps\"),\n    6: (\"270p\", \"64kbps\"),\n    13: (\"144p\", None),\n    17: (\"144p\", \"24kbps\"),\n    18: (\"360p\", \"96kbps\"),\n    22: (\"720p\", \"192kbps\"),\n    34: (\"360p\", \"128kbps\"),\n    35: (\"480p\", \"128kbps\"),\n    36: (\"240p\", None),\n    37: (\"1080p\", \"192kbps\"),\n    38: (\"3072p\", \"192kbps\"),\n    43: (\"360p\", \"128kbps\"),\n    44: (\"480p\", \"128kbps\"),\n    45: (\"720p\", \"192kbps\"),\n    46: (\"1080p\", \"192kbps\"),\n    59: (\"480p\", \"128kbps\"),\n    78: (\"480p\", \"128kbps\"),\n    82: (\"360p\", \"128kbps\"),\n    83: (\"480p\", \"128kbps\"),\n    84: (\"720p\", \"192kbps\"),\n    85: (\"1080p\", \"192kbps\"),\n    91: (\"144p\", \"48kbps\"),\n    92: (\"240p\", \"48kbps\"),\n    93: (\"360p\", \"128kbps\"),\n    94: (\"480p\", \"128kbps\"),\n    95: (\"720p\", \"256kbps\"),\n    96: (\"1080p\", \"256kbps\"),\n    100: (\"360p\", \"128kbps\"),\n    101: (\"480p\", \"192kbps\"),\n    102: (\"720p\", \"192kbps\"),\n    132: (\"240p\", \"48kbps\"),\n    151: (\"720p\", \"24kbps\"),\n    300: (\"720p\", \"128kbps\"),\n    301: (\"1080p\", \"128kbps\"),\n}\n\nDASH_VIDEO = {\n    # DASH Video\n    133: (\"240p\", None),  # MP4\n    134: (\"360p\", None),  # MP4\n    135: (\"480p\", None),  # MP4\n    136: (\"720p\", None),  # MP4\n    137: (\"1080p\", None),  # MP4\n    138: (\"2160p\", None),  # MP4\n    160: (\"144p\", None),  # MP4\n    167: (\"360p\", None),  # WEBM\n    168: (\"480p\", None),  # WEBM\n    169: (\"720p\", None),  # WEBM\n    170: (\"1080p\", None),  # WEBM\n    212: (\"480p\", None),  # MP4\n    218: (\"480p\", None),  # WEBM\n    219: (\"480p\", None),  # WEBM\n    242: (\"240p\", None),  # WEBM\n    243: (\"360p\", None),  # WEBM\n    244: (\"480p\", None),  # WEBM\n    245: (\"480p\", None),  # WEBM\n    246: (\"480p\", None),  # WEBM\n    247: (\"720p\", None),  # WEBM\n    248: (\"1080p\", None),  # WEBM\n    264: (\"1440p\", None),  # MP4\n    266: (\"2160p\", None),  # MP4\n    271: (\"1440p\", None),  # WEBM\n    272: (\"4320p\", None),  # WEBM\n    278: (\"144p\", None),  # WEBM\n    298: (\"720p\", None),  # MP4\n    299: (\"1080p\", None),  # MP4\n    302: (\"720p\", None),  # WEBM\n    303: (\"1080p\", None),  # WEBM\n    308: (\"1440p\", None),  # WEBM\n    313: (\"2160p\", None),  # WEBM\n    315: (\"2160p\", None),  # WEBM\n    330: (\"144p\", None),  # WEBM\n    331: (\"240p\", None),  # WEBM\n    332: (\"360p\", None),  # WEBM\n    333: (\"480p\", None),  # WEBM\n    334: (\"720p\", None),  # WEBM\n    335: (\"1080p\", None),  # WEBM\n    336: (\"1440p\", None),  # WEBM\n    337: (\"2160p\", None),  # WEBM\n    394: (\"144p\", None),  # MP4\n    395: (\"240p\", None),  # MP4\n    396: (\"360p\", None),  # MP4\n    397: (\"480p\", None),  # MP4\n    398: (\"720p\", None),  # MP4\n    399: (\"1080p\", None),  # MP4\n    400: (\"1440p\", None),  # MP4\n    401: (\"2160p\", None),  # MP4\n    402: (\"4320p\", None),  # MP4\n    571: (\"4320p\", None),  # MP4\n    694: (\"144p\", None),  # MP4\n    695: (\"240p\", None),  # MP4\n    696: (\"360p\", None),  # MP4\n    697: (\"480p\", None),  # MP4\n    698: (\"720p\", None),  # MP4\n    699: (\"1080p\", None),  # MP4\n    700: (\"1440p\", None),  # MP4\n    701: (\"2160p\", None),  # MP4\n    702: (\"4320p\", None),  # MP4\n}\n\nDASH_AUDIO = {\n    # DASH Audio\n    139: (None, \"48kbps\"),  # MP4\n    140: (None, \"128kbps\"),  # MP4\n    141: (None, \"256kbps\"),  # MP4\n    171: (None, \"128kbps\"),  # WEBM\n    172: (None, \"256kbps\"),  # WEBM\n    249: (None, \"50kbps\"),  # WEBM\n    250: (None, \"70kbps\"),  # WEBM\n    251: (None, \"160kbps\"),  # WEBM\n    256: (None, \"192kbps\"),  # MP4\n    258: (None, \"384kbps\"),  # MP4\n    325: (None, None),  # MP4\n    328: (None, None),  # MP4\n}\n\nITAGS = {\n    **PROGRESSIVE_VIDEO,\n    **DASH_VIDEO,\n    **DASH_AUDIO,\n}\n\nHDR = [330, 331, 332, 333, 334, 335, 336, 337]\n_3D = [82, 83, 84, 85, 100, 101, 102]\nLIVE = [91, 92, 93, 94, 95, 96, 132, 151]\n\n\ndef get_format_profile(itag: int) -> Dict:\n    \"\"\"Get additional format information for a given itag.\n\n    :param str itag:\n        YouTube format identifier code.\n    \"\"\"\n    itag = int(itag)\n    if itag in ITAGS:\n        res, bitrate = ITAGS[itag]\n    else:\n        res, bitrate = None, None\n    return {\n        \"resolution\": res,\n        \"abr\": bitrate,\n        \"is_live\": itag in LIVE,\n        \"is_3d\": itag in _3D,\n        \"is_hdr\": itag in HDR,\n        \"is_dash\": (\n            itag in DASH_AUDIO\n            or itag in DASH_VIDEO\n        ),\n    }\n"
  },
  "GT_src_dict": {
    "pytube/itags.py": {
      "get_format_profile": {
        "code": "def get_format_profile(itag: int) -> Dict:\n    \"\"\"Get additional format information for a given YouTube itag.\n\n:param int itag: YouTube format identifier code.\n\n:return: A dictionary containing the following keys:\n    - \"resolution\": The resolution of the video (e.g., \"720p\") or None if not found.\n    - \"abr\": The audio bitrate (e.g., \"128kbps\") or None if not found.\n    - \"is_live\": Boolean indicating if the format is a live stream.\n    - \"is_3d\": Boolean indicating if the format is a 3D video.\n    - \"is_hdr\": Boolean indicating if the format is HDR.\n    - \"is_dash\": Boolean indicating if the format uses DASH (Dynamic Adaptive Streaming over HTTP).\n\nThis function uses the ITAGS dictionary to lookup format details based on the provided itag. It also checks against the LIVE, _3D, and HDR constant lists to determine if the format falls into those categories.\"\"\"\n    'Get additional format information for a given itag.\\n\\n    :param str itag:\\n        YouTube format identifier code.\\n    '\n    itag = int(itag)\n    if itag in ITAGS:\n        res, bitrate = ITAGS[itag]\n    else:\n        res, bitrate = (None, None)\n    return {'resolution': res, 'abr': bitrate, 'is_live': itag in LIVE, 'is_3d': itag in _3D, 'is_hdr': itag in HDR, 'is_dash': itag in DASH_AUDIO or itag in DASH_VIDEO}",
        "docstring": "Get additional format information for a given YouTube itag.\n\n:param int itag: YouTube format identifier code.\n\n:return: A dictionary containing the following keys:\n    - \"resolution\": The resolution of the video (e.g., \"720p\") or None if not found.\n    - \"abr\": The audio bitrate (e.g., \"128kbps\") or None if not found.\n    - \"is_live\": Boolean indicating if the format is a live stream.\n    - \"is_3d\": Boolean indicating if the format is a 3D video.\n    - \"is_hdr\": Boolean indicating if the format is HDR.\n    - \"is_dash\": Boolean indicating if the format uses DASH (Dynamic Adaptive Streaming over HTTP).\n\nThis function uses the ITAGS dictionary to lookup format details based on the provided itag. It also checks against the LIVE, _3D, and HDR constant lists to determine if the format falls into those categories.",
        "signature": "def get_format_profile(itag: int) -> Dict:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: pytube-test_itags\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 pytube/\n    \u2514\u2500\u2500 itags.py\n        \u2514\u2500\u2500 get_format_profile\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module leverages `pytube`'s functionality to retrieve and validate format profiles associated with YouTube video streams. It provides the capability to access metadata, such as the resolution, for specific ITAG values, which correspond to video and audio stream configurations. By enabling users or developers to query and verify format details, the module simplifies the process of determining compatibility and suitability of video streams in various applications. This addresses the need for streamlined and accurate resolution of ITAG-based format profiles, ensuring seamless integration and error handling in video processing workflows.\n\n## FILE 1: pytube/itags.py\n\n- FUNCTION NAME: get_format_profile\n  - SIGNATURE: def get_format_profile(itag: int) -> Dict:\n  - DOCSTRING: \n```python\n\"\"\"\nGet additional format information for a given YouTube itag.\n\n:param int itag: YouTube format identifier code.\n\n:return: A dictionary containing the following keys:\n    - \"resolution\": The resolution of the video (e.g., \"720p\") or None if not found.\n    - \"abr\": The audio bitrate (e.g., \"128kbps\") or None if not found.\n    - \"is_live\": Boolean indicating if the format is a live stream.\n    - \"is_3d\": Boolean indicating if the format is a 3D video.\n    - \"is_hdr\": Boolean indicating if the format is HDR.\n    - \"is_dash\": Boolean indicating if the format uses DASH (Dynamic Adaptive Streaming over HTTP).\n\nThis function uses the ITAGS dictionary to lookup format details based on the provided itag. It also checks against the LIVE, _3D, and HDR constant lists to determine if the format falls into those categories.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "pytube/itags.py": "\"\"\"This module contains a lookup table of YouTube's itag values.\"\"\"\nfrom typing import Dict\nPROGRESSIVE_VIDEO = {5: ('240p', '64kbps'), 6: ('270p', '64kbps'), 13: ('144p', None), 17: ('144p', '24kbps'), 18: ('360p', '96kbps'), 22: ('720p', '192kbps'), 34: ('360p', '128kbps'), 35: ('480p', '128kbps'), 36: ('240p', None), 37: ('1080p', '192kbps'), 38: ('3072p', '192kbps'), 43: ('360p', '128kbps'), 44: ('480p', '128kbps'), 45: ('720p', '192kbps'), 46: ('1080p', '192kbps'), 59: ('480p', '128kbps'), 78: ('480p', '128kbps'), 82: ('360p', '128kbps'), 83: ('480p', '128kbps'), 84: ('720p', '192kbps'), 85: ('1080p', '192kbps'), 91: ('144p', '48kbps'), 92: ('240p', '48kbps'), 93: ('360p', '128kbps'), 94: ('480p', '128kbps'), 95: ('720p', '256kbps'), 96: ('1080p', '256kbps'), 100: ('360p', '128kbps'), 101: ('480p', '192kbps'), 102: ('720p', '192kbps'), 132: ('240p', '48kbps'), 151: ('720p', '24kbps'), 300: ('720p', '128kbps'), 301: ('1080p', '128kbps')}\nDASH_VIDEO = {133: ('240p', None), 134: ('360p', None), 135: ('480p', None), 136: ('720p', None), 137: ('1080p', None), 138: ('2160p', None), 160: ('144p', None), 167: ('360p', None), 168: ('480p', None), 169: ('720p', None), 170: ('1080p', None), 212: ('480p', None), 218: ('480p', None), 219: ('480p', None), 242: ('240p', None), 243: ('360p', None), 244: ('480p', None), 245: ('480p', None), 246: ('480p', None), 247: ('720p', None), 248: ('1080p', None), 264: ('1440p', None), 266: ('2160p', None), 271: ('1440p', None), 272: ('4320p', None), 278: ('144p', None), 298: ('720p', None), 299: ('1080p', None), 302: ('720p', None), 303: ('1080p', None), 308: ('1440p', None), 313: ('2160p', None), 315: ('2160p', None), 330: ('144p', None), 331: ('240p', None), 332: ('360p', None), 333: ('480p', None), 334: ('720p', None), 335: ('1080p', None), 336: ('1440p', None), 337: ('2160p', None), 394: ('144p', None), 395: ('240p', None), 396: ('360p', None), 397: ('480p', None), 398: ('720p', None), 399: ('1080p', None), 400: ('1440p', None), 401: ('2160p', None), 402: ('4320p', None), 571: ('4320p', None), 694: ('144p', None), 695: ('240p', None), 696: ('360p', None), 697: ('480p', None), 698: ('720p', None), 699: ('1080p', None), 700: ('1440p', None), 701: ('2160p', None), 702: ('4320p', None)}\nDASH_AUDIO = {139: (None, '48kbps'), 140: (None, '128kbps'), 141: (None, '256kbps'), 171: (None, '128kbps'), 172: (None, '256kbps'), 249: (None, '50kbps'), 250: (None, '70kbps'), 251: (None, '160kbps'), 256: (None, '192kbps'), 258: (None, '384kbps'), 325: (None, None), 328: (None, None)}\nITAGS = {**PROGRESSIVE_VIDEO, **DASH_VIDEO, **DASH_AUDIO}\nHDR = [330, 331, 332, 333, 334, 335, 336, 337]\n_3D = [82, 83, 84, 85, 100, 101, 102]\nLIVE = [91, 92, 93, 94, 95, 96, 132, 151]"
  },
  "call_tree": {
    "tests/test_itags.py:test_get_format_profile": {
      "pytube/itags.py:get_format_profile": {}
    },
    "tests/test_itags.py:test_get_format_profile_non_existant": {
      "pytube/itags.py:get_format_profile": {}
    }
  }
}