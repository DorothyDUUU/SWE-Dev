{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_network_performance_event",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_network_performance_event.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.network_performance_event import NetworkPerformanceEvent\n\n\nclass TestNetworkPerformanceEvent(unittest.TestCase):\n    \"\"\" NetworkPerformanceEvent unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testNetworkPerformanceEvent(self):\n        \"\"\"\n        Test NetworkPerformanceEvent\n        \"\"\"\n        model = mparticle.models.network_performance_event.NetworkPerformanceEvent()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/network_performance_event.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass NetworkPerformanceEvent(object):\n\n    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, http_verb=None, url=None, time_elapsed=None, bytes_in=None, bytes_out=None, response_code=None, data=None):\n        \"\"\"\n        NetworkPerformanceEvent - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n            'http_verb': 'str',\n            'url': 'str',\n            'time_elapsed': 'int',\n            'bytes_in': 'int',\n            'bytes_out': 'int',\n            'response_code': 'int',\n            'data': 'str'\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n            'http_verb': 'http_verb',\n            'url': 'url',\n            'time_elapsed': 'time_elapsed',\n            'bytes_in': 'bytes_in',\n            'bytes_out': 'bytes_out',\n            'response_code': 'response_code',\n            'data': 'data'\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._http_verb = http_verb\n        self._url = url\n        self._time_elapsed = time_elapsed\n        self._bytes_in = bytes_in\n        self._bytes_out = bytes_out\n        self._response_code = response_code\n        self._data = data\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this NetworkPerformanceEvent.\n\n\n        :return: The timestamp_unixtime_ms of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this NetworkPerformanceEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this NetworkPerformanceEvent.\n\n\n        :return: The event_id of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this NetworkPerformanceEvent.\n\n\n        :param event_id: The event_id of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this NetworkPerformanceEvent.\n\n\n        :return: The source_message_id of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this NetworkPerformanceEvent.\n\n\n        :param source_message_id: The source_message_id of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this NetworkPerformanceEvent.\n\n\n        :return: The session_id of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this NetworkPerformanceEvent.\n\n\n        :param session_id: The session_id of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this NetworkPerformanceEvent.\n\n\n        :return: The session_uuid of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this NetworkPerformanceEvent.\n\n\n        :param session_uuid: The session_uuid of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this NetworkPerformanceEvent.\n\n\n        :return: The custom_attributes of this NetworkPerformanceEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this NetworkPerformanceEvent.\n\n\n        :param custom_attributes: The custom_attributes of this NetworkPerformanceEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this NetworkPerformanceEvent.\n\n\n        :return: The location of this NetworkPerformanceEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this NetworkPerformanceEvent.\n\n\n        :param location: The location of this NetworkPerformanceEvent.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this NetworkPerformanceEvent.\n\n\n        :return: The device_current_state of this NetworkPerformanceEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this NetworkPerformanceEvent.\n\n\n        :param device_current_state: The device_current_state of this NetworkPerformanceEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    @property\n    def http_verb(self):\n        \"\"\"\n        Gets the http_verb of this NetworkPerformanceEvent.\n\n\n        :return: The http_verb of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._http_verb\n\n    @http_verb.setter\n    def http_verb(self, http_verb):\n        \"\"\"\n        Sets the http_verb of this NetworkPerformanceEvent.\n\n\n        :param http_verb: The http_verb of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n\n        self._http_verb = http_verb\n\n    @property\n    def url(self):\n        \"\"\"\n        Gets the url of this NetworkPerformanceEvent.\n\n\n        :return: The url of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._url\n\n    @url.setter\n    def url(self, url):\n        \"\"\"\n        Sets the url of this NetworkPerformanceEvent.\n\n\n        :param url: The url of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n\n        self._url = url\n\n    @property\n    def time_elapsed(self):\n        \"\"\"\n        Gets the time_elapsed of this NetworkPerformanceEvent.\n\n\n        :return: The time_elapsed of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._time_elapsed\n\n    @time_elapsed.setter\n    def time_elapsed(self, time_elapsed):\n        \"\"\"\n        Sets the time_elapsed of this NetworkPerformanceEvent.\n\n\n        :param time_elapsed: The time_elapsed of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._time_elapsed = time_elapsed\n\n    @property\n    def bytes_in(self):\n        \"\"\"\n        Gets the bytes_in of this NetworkPerformanceEvent.\n\n\n        :return: The bytes_in of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._bytes_in\n\n    @bytes_in.setter\n    def bytes_in(self, bytes_in):\n        \"\"\"\n        Sets the bytes_in of this NetworkPerformanceEvent.\n\n\n        :param bytes_in: The bytes_in of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._bytes_in = bytes_in\n\n    @property\n    def bytes_out(self):\n        \"\"\"\n        Gets the bytes_out of this NetworkPerformanceEvent.\n\n\n        :return: The bytes_out of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._bytes_out\n\n    @bytes_out.setter\n    def bytes_out(self, bytes_out):\n        \"\"\"\n        Sets the bytes_out of this NetworkPerformanceEvent.\n\n\n        :param bytes_out: The bytes_out of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._bytes_out = bytes_out\n\n    @property\n    def response_code(self):\n        \"\"\"\n        Gets the response_code of this NetworkPerformanceEvent.\n\n\n        :return: The response_code of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._response_code\n\n    @response_code.setter\n    def response_code(self, response_code):\n        \"\"\"\n        Sets the response_code of this NetworkPerformanceEvent.\n\n\n        :param response_code: The response_code of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n\n        self._response_code = response_code\n\n    @property\n    def data(self):\n        \"\"\"\n        Gets the data of this NetworkPerformanceEvent.\n\n\n        :return: The data of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._data\n\n    @data.setter\n    def data(self, data):\n        \"\"\"\n        Sets the data of this NetworkPerformanceEvent.\n\n\n        :param data: The data of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n\n        self._data = data\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/network_performance_event.py": {
      "NetworkPerformanceEvent.__init__": {
        "code": "    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, http_verb=None, url=None, time_elapsed=None, bytes_in=None, bytes_out=None, response_code=None, data=None):\n        \"\"\"Initializes a new instance of the NetworkPerformanceEvent class, which is designed to represent network performance metrics for a specific event. \n\n    This constructor accepts various parameters that define the properties of the network performance event, such as timestamps, session identifiers, custom attributes, and network-related data. The parameters include:\n    \n    :param timestamp_unixtime_ms: (int) The event timestamp in Unix time format (milliseconds).\n    :param event_id: (int) A unique identifier for the event.\n    :param source_message_id: (str) An identifier for the source message related to the event.\n    :param session_id: (int) The ID of the session during which the event occurred.\n    :param session_uuid: (str) A unique identifier for the session as a UUID.\n    :param custom_attributes: (dict) A dictionary of custom attributes associated with the event.\n    :param location: (GeoLocation) An object representing the geographical location related to the event.\n    :param device_current_state: (DeviceCurrentState) The current state of the device when the event occurs.\n    :param http_verb: (str) The HTTP verb (e.g., GET, POST) associated with the event.\n    :param url: (str) The URL associated with the network request for the event.\n    :param time_elapsed: (int) Total time taken (in milliseconds) for the network operation.\n    :param bytes_in: (int) Number of bytes received during the network operation.\n    :param bytes_out: (int) Number of bytes sent during the network operation.\n    :param response_code: (int) The HTTP response code received for the request.\n    :param data: (str) Any additional data relating to the event.\n\n    The initialization process also defines the attributes `swagger_types` and `attribute_map`, which map attribute names to their types and JSON key equivalents, respectively. This provides structure for data serialization and deserialization as needed when interacting with APIs.\n\n    Attributes will be set into private variables for encapsulation, ensuring that they can be accessed and modified only through their respective property methods defined elsewhere in the class.\"\"\"\n        '\\n        NetworkPerformanceEvent - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState', 'http_verb': 'str', 'url': 'str', 'time_elapsed': 'int', 'bytes_in': 'int', 'bytes_out': 'int', 'response_code': 'int', 'data': 'str'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state', 'http_verb': 'http_verb', 'url': 'url', 'time_elapsed': 'time_elapsed', 'bytes_in': 'bytes_in', 'bytes_out': 'bytes_out', 'response_code': 'response_code', 'data': 'data'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._http_verb = http_verb\n        self._url = url\n        self._time_elapsed = time_elapsed\n        self._bytes_in = bytes_in\n        self._bytes_out = bytes_out\n        self._response_code = response_code\n        self._data = data",
        "docstring": "Initializes a new instance of the NetworkPerformanceEvent class, which is designed to represent network performance metrics for a specific event. \n\nThis constructor accepts various parameters that define the properties of the network performance event, such as timestamps, session identifiers, custom attributes, and network-related data. The parameters include:\n\n:param timestamp_unixtime_ms: (int) The event timestamp in Unix time format (milliseconds).\n:param event_id: (int) A unique identifier for the event.\n:param source_message_id: (str) An identifier for the source message related to the event.\n:param session_id: (int) The ID of the session during which the event occurred.\n:param session_uuid: (str) A unique identifier for the session as a UUID.\n:param custom_attributes: (dict) A dictionary of custom attributes associated with the event.\n:param location: (GeoLocation) An object representing the geographical location related to the event.\n:param device_current_state: (DeviceCurrentState) The current state of the device when the event occurs.\n:param http_verb: (str) The HTTP verb (e.g., GET, POST) associated with the event.\n:param url: (str) The URL associated with the network request for the event.\n:param time_elapsed: (int) Total time taken (in milliseconds) for the network operation.\n:param bytes_in: (int) Number of bytes received during the network operation.\n:param bytes_out: (int) Number of bytes sent during the network operation.\n:param response_code: (int) The HTTP response code received for the request.\n:param data: (str) Any additional data relating to the event.\n\nThe initialization process also defines the attributes `swagger_types` and `attribute_map`, which map attribute names to their types and JSON key equivalents, respectively. This provides structure for data serialization and deserialization as needed when interacting with APIs.\n\nAttributes will be set into private variables for encapsulation, ensuring that they can be accessed and modified only through their respective property methods defined elsewhere in the class.",
        "signature": "def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, http_verb=None, url=None, time_elapsed=None, bytes_in=None, bytes_out=None, response_code=None, data=None):",
        "type": "Method",
        "class_signature": "class NetworkPerformanceEvent(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_network_performance_event\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 network_performance_event.py\n            \u2514\u2500\u2500 NetworkPerformanceEvent.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module interacts with mParticle\u2019s Event API to facilitate the integration and testing of network performance event tracking within applications. Its primary purpose is to support the proper representation and validation of `NetworkPerformanceEvent` objects, which are used to log and analyze network performance data. This module is designed to ensure developers can programmatically test the creation and integrity of these event objects, enabling robust data collection for performance monitoring. By providing a structured framework for verifying network performance events, the module simplifies the process of integrating event tracking into systems, ensuring reliability and accuracy for developers managing large-scale event-driven data pipelines.\n\n## FILE 1: mparticle/models/network_performance_event.py\n\n- CLASS METHOD: NetworkPerformanceEvent.__init__\n  - CLASS SIGNATURE: class NetworkPerformanceEvent(object):\n  - SIGNATURE: def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, http_verb=None, url=None, time_elapsed=None, bytes_in=None, bytes_out=None, response_code=None, data=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the NetworkPerformanceEvent class, which is designed to represent network performance metrics for a specific event. \n\nThis constructor accepts various parameters that define the properties of the network performance event, such as timestamps, session identifiers, custom attributes, and network-related data. The parameters include:\n\n:param timestamp_unixtime_ms: (int) The event timestamp in Unix time format (milliseconds).\n:param event_id: (int) A unique identifier for the event.\n:param source_message_id: (str) An identifier for the source message related to the event.\n:param session_id: (int) The ID of the session during which the event occurred.\n:param session_uuid: (str) A unique identifier for the session as a UUID.\n:param custom_attributes: (dict) A dictionary of custom attributes associated with the event.\n:param location: (GeoLocation) An object representing the geographical location related to the event.\n:param device_current_state: (DeviceCurrentState) The current state of the device when the event occurs.\n:param http_verb: (str) The HTTP verb (e.g., GET, POST) associated with the event.\n:param url: (str) The URL associated with the network request for the event.\n:param time_elapsed: (int) Total time taken (in milliseconds) for the network operation.\n:param bytes_in: (int) Number of bytes received during the network operation.\n:param bytes_out: (int) Number of bytes sent during the network operation.\n:param response_code: (int) The HTTP response code received for the request.\n:param data: (str) Any additional data relating to the event.\n\nThe initialization process also defines the attributes `swagger_types` and `attribute_map`, which map attribute names to their types and JSON key equivalents, respectively. This provides structure for data serialization and deserialization as needed when interacting with APIs.\n\nAttributes will be set into private variables for encapsulation, ensuring that they can be accessed and modified only through their respective property methods defined elsewhere in the class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/network_performance_event.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass NetworkPerformanceEvent(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this NetworkPerformanceEvent.\n\n\n        :return: The timestamp_unixtime_ms of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this NetworkPerformanceEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this NetworkPerformanceEvent.\n\n\n        :return: The event_id of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this NetworkPerformanceEvent.\n\n\n        :param event_id: The event_id of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this NetworkPerformanceEvent.\n\n\n        :return: The source_message_id of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this NetworkPerformanceEvent.\n\n\n        :param source_message_id: The source_message_id of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this NetworkPerformanceEvent.\n\n\n        :return: The session_id of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this NetworkPerformanceEvent.\n\n\n        :param session_id: The session_id of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this NetworkPerformanceEvent.\n\n\n        :return: The session_uuid of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this NetworkPerformanceEvent.\n\n\n        :param session_uuid: The session_uuid of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this NetworkPerformanceEvent.\n\n\n        :return: The custom_attributes of this NetworkPerformanceEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this NetworkPerformanceEvent.\n\n\n        :param custom_attributes: The custom_attributes of this NetworkPerformanceEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this NetworkPerformanceEvent.\n\n\n        :return: The location of this NetworkPerformanceEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this NetworkPerformanceEvent.\n\n\n        :param location: The location of this NetworkPerformanceEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this NetworkPerformanceEvent.\n\n\n        :return: The device_current_state of this NetworkPerformanceEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this NetworkPerformanceEvent.\n\n\n        :param device_current_state: The device_current_state of this NetworkPerformanceEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    @property\n    def http_verb(self):\n        \"\"\"\n        Gets the http_verb of this NetworkPerformanceEvent.\n\n\n        :return: The http_verb of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._http_verb\n\n    @http_verb.setter\n    def http_verb(self, http_verb):\n        \"\"\"\n        Sets the http_verb of this NetworkPerformanceEvent.\n\n\n        :param http_verb: The http_verb of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n        self._http_verb = http_verb\n\n    @property\n    def url(self):\n        \"\"\"\n        Gets the url of this NetworkPerformanceEvent.\n\n\n        :return: The url of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._url\n\n    @url.setter\n    def url(self, url):\n        \"\"\"\n        Sets the url of this NetworkPerformanceEvent.\n\n\n        :param url: The url of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n        self._url = url\n\n    @property\n    def time_elapsed(self):\n        \"\"\"\n        Gets the time_elapsed of this NetworkPerformanceEvent.\n\n\n        :return: The time_elapsed of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._time_elapsed\n\n    @time_elapsed.setter\n    def time_elapsed(self, time_elapsed):\n        \"\"\"\n        Sets the time_elapsed of this NetworkPerformanceEvent.\n\n\n        :param time_elapsed: The time_elapsed of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._time_elapsed = time_elapsed\n\n    @property\n    def bytes_in(self):\n        \"\"\"\n        Gets the bytes_in of this NetworkPerformanceEvent.\n\n\n        :return: The bytes_in of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._bytes_in\n\n    @bytes_in.setter\n    def bytes_in(self, bytes_in):\n        \"\"\"\n        Sets the bytes_in of this NetworkPerformanceEvent.\n\n\n        :param bytes_in: The bytes_in of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._bytes_in = bytes_in\n\n    @property\n    def bytes_out(self):\n        \"\"\"\n        Gets the bytes_out of this NetworkPerformanceEvent.\n\n\n        :return: The bytes_out of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._bytes_out\n\n    @bytes_out.setter\n    def bytes_out(self, bytes_out):\n        \"\"\"\n        Sets the bytes_out of this NetworkPerformanceEvent.\n\n\n        :param bytes_out: The bytes_out of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._bytes_out = bytes_out\n\n    @property\n    def response_code(self):\n        \"\"\"\n        Gets the response_code of this NetworkPerformanceEvent.\n\n\n        :return: The response_code of this NetworkPerformanceEvent.\n        :rtype: int\n        \"\"\"\n        return self._response_code\n\n    @response_code.setter\n    def response_code(self, response_code):\n        \"\"\"\n        Sets the response_code of this NetworkPerformanceEvent.\n\n\n        :param response_code: The response_code of this NetworkPerformanceEvent.\n        :type: int\n        \"\"\"\n        self._response_code = response_code\n\n    @property\n    def data(self):\n        \"\"\"\n        Gets the data of this NetworkPerformanceEvent.\n\n\n        :return: The data of this NetworkPerformanceEvent.\n        :rtype: str\n        \"\"\"\n        return self._data\n\n    @data.setter\n    def data(self, data):\n        \"\"\"\n        Sets the data of this NetworkPerformanceEvent.\n\n\n        :param data: The data of this NetworkPerformanceEvent.\n        :type: str\n        \"\"\"\n        self._data = data\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_network_performance_event.py:TestNetworkPerformanceEvent:testNetworkPerformanceEvent": {
      "mparticle/models/network_performance_event.py:NetworkPerformanceEvent:__init__": {}
    }
  }
}