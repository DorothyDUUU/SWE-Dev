{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_ccpa_consent_state",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_ccpa_consent_state.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\nimport calendar\nimport time\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.ccpa_consent_state import CCPAConsentState\n\n\nclass TestCCPAConsentState(unittest.TestCase):\n    \"\"\" CCPAConsentState unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testCCPAConsentState(self):\n        \"\"\"\n        Test CCPAConsentState\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.ccpa_consent_state.CCPAConsentState(\n            'document_agreement.v2',\n            True,\n            now,\n            'dtmgbank.com/signup',\n            'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702',\n        )\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n    def testCCPAConsentStateMembers(self):\n        \"\"\"\n        Test CCPAConsentState Members\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.ccpa_consent_state.CCPAConsentState\n        model.document = 'document_agreement.v2'\n        model.consented = True\n        model.timestamp_unixtime_ms = now\n        model.location = 'dtmgbank.com/signup'\n        model.hardware_id = 'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702'\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/ccpa_consent_state.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass CCPAConsentState(object):\n    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"\n        CCPAConsentState - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'document': 'str',\n            'consented': 'bool',\n            'timestamp_unixtime_ms': 'int',\n            'location': 'str',\n            'hardware_id': 'str'\n        }\n\n        self.attribute_map = {\n            'document': 'document',\n            'consented': 'consented',\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'location': 'location',\n            'hardware_id': 'hardware_id'\n        }\n\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id\n\n    @property\n    def document(self):\n        \"\"\"\n        Gets the document of this CCPAConsentState\n\n        :return The document of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._document\n\n    @document.setter\n    def document(self, document):\n        \"\"\"\n        Sets the document of this CCPA Consent State.\n\n\n        :param document: The document of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._document = document\n\n    @property\n    def consented(self):\n        \"\"\"\n        Gets the consented of this CCPAConsentState\n\n        :return The consented of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._consented\n\n    @consented.setter\n    def consented(self, consented):\n        \"\"\"\n        Sets the consented of this CCPA Consent State.\n\n\n        :param consented: The consented of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._consented = consented\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CCPAConsentState\n\n        :return The timestamp_unixtime_ms of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CCPA Consent State.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CCPAConsentState\n\n        :return The location of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CCPA Consent State.\n\n\n        :param location: The location of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def hardware_id(self):\n        \"\"\"\n        Gets the hardware_id of this CCPAConsentState\n\n        :return The hardware_id of this CCPAConsentState\n        :rtype str\n        \"\"\"\n        return self._hardware_id\n\n    @hardware_id.setter\n    def hardware_id(self, hardware_id):\n        \"\"\"\n        Sets the hardware_id of this CCPA Consent State.\n\n\n        :param hardware_id: The hardware_id of this CCPA Consent State.\n        :type: str\n        \"\"\"\n\n        self._hardware_id = hardware_id\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/ccpa_consent_state.py": {
      "CCPAConsentState.__init__": {
        "code": "    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"Initializes a CCPAConsentState instance, representing the consent state as per the California Consumer Privacy Act (CCPA). This class encapsulates the relevant consent information, including the consent document, consent status, timestamp, location, and hardware identifier.\n\n    :param document: The document outlining the consent (string). Default is None.\n    :param consented: Indicates whether consent was given (boolean). Default is None.\n    :param timestamp_unixtime_ms: Timestamp in Unix time format in milliseconds when consent was recorded (integer). Default is None.\n    :param location: The geographic location of the user at the time of consent (string). Default is None.\n    :param hardware_id: A unique identifier for the user's hardware (string). Default is None.\n\n    This initializer also defines two dictionaries: `swagger_types`, which maps the attribute names to their expected data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys in the Swagger API specification. The attributes are set using their respective setter methods to ensure proper encapsulation and validation.\"\"\"\n        '\\n        CCPAConsentState - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'document': 'str', 'consented': 'bool', 'timestamp_unixtime_ms': 'int', 'location': 'str', 'hardware_id': 'str'}\n        self.attribute_map = {'document': 'document', 'consented': 'consented', 'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'location': 'location', 'hardware_id': 'hardware_id'}\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id",
        "docstring": "Initializes a CCPAConsentState instance, representing the consent state as per the California Consumer Privacy Act (CCPA). This class encapsulates the relevant consent information, including the consent document, consent status, timestamp, location, and hardware identifier.\n\n:param document: The document outlining the consent (string). Default is None.\n:param consented: Indicates whether consent was given (boolean). Default is None.\n:param timestamp_unixtime_ms: Timestamp in Unix time format in milliseconds when consent was recorded (integer). Default is None.\n:param location: The geographic location of the user at the time of consent (string). Default is None.\n:param hardware_id: A unique identifier for the user's hardware (string). Default is None.\n\nThis initializer also defines two dictionaries: `swagger_types`, which maps the attribute names to their expected data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys in the Swagger API specification. The attributes are set using their respective setter methods to ensure proper encapsulation and validation.",
        "signature": "def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.document": {
        "code": "    def document(self, document):\n        \"\"\"Sets the document of this CCPAConsentState, which represents the consent information under the California Consumer Privacy Act (CCPA). \n\n:param document: The document associated with the consent state, typically containing details of the consent agreement.\n:type document: str\n\nThis method updates the internal attribute `_document` with the provided value, allowing the consent state instance to store and manage the relevant document for compliance and tracking purposes. The document's contents are expected to adhere to the standards set forth by CCPA, although the specifics of such a document are determined externally to this implementation.\"\"\"\n        '\\n        Sets the document of this CCPA Consent State.\\n\\n\\n        :param document: The document of this CCPA Consent State.\\n        :type: str\\n        '\n        self._document = document",
        "docstring": "Sets the document of this CCPAConsentState, which represents the consent information under the California Consumer Privacy Act (CCPA). \n\n:param document: The document associated with the consent state, typically containing details of the consent agreement.\n:type document: str\n\nThis method updates the internal attribute `_document` with the provided value, allowing the consent state instance to store and manage the relevant document for compliance and tracking purposes. The document's contents are expected to adhere to the standards set forth by CCPA, although the specifics of such a document are determined externally to this implementation.",
        "signature": "def document(self, document):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.consented": {
        "code": "    def consented(self, consented):\n        \"\"\"Sets the consented status of this CCPAConsentState instance.\n\nThis method updates the `_consented` attribute, indicating whether the user has given consent per the California Consumer Privacy Act (CCPA). The consent status is expected to be a boolean value, which signifies whether consent has been granted or denied.\n\n:param consented: A boolean indicating the consent status of this CCPA Consent State.\n:type: bool\"\"\"\n        '\\n        Sets the consented of this CCPA Consent State.\\n\\n\\n        :param consented: The consented of this CCPA Consent State.\\n        :type: str\\n        '\n        self._consented = consented",
        "docstring": "Sets the consented status of this CCPAConsentState instance.\n\nThis method updates the `_consented` attribute, indicating whether the user has given consent per the California Consumer Privacy Act (CCPA). The consent status is expected to be a boolean value, which signifies whether consent has been granted or denied.\n\n:param consented: A boolean indicating the consent status of this CCPA Consent State.\n:type: bool",
        "signature": "def consented(self, consented):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.timestamp_unixtime_ms": {
        "code": "    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"Sets the timestamp (in Unix time format measured in milliseconds) representing when the consent state was recorded for this CCPA Consent State.\n\n:param timestamp_unixtime_ms: The timestamp representing when the consent was granted or revoked, given in Unix time (milliseconds since epoch).\n:type: int\"\"\"\n        '\\n        Sets the timestamp_unixtime_ms of this CCPA Consent State.\\n\\n\\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CCPA Consent State.\\n        :type: str\\n        '\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms",
        "docstring": "Sets the timestamp (in Unix time format measured in milliseconds) representing when the consent state was recorded for this CCPA Consent State.\n\n:param timestamp_unixtime_ms: The timestamp representing when the consent was granted or revoked, given in Unix time (milliseconds since epoch).\n:type: int",
        "signature": "def timestamp_unixtime_ms(self, timestamp_unixtime_ms):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.location": {
        "code": "    def location(self, location):\n        \"\"\"Sets the location of this CCPA Consent State.\n\nThis method allows the assignment of a geographical location associated with the CCPA consent state, which is essential for compliance with the California Consumer Privacy Act (CCPA). \n\n:param location: The geographical location where the consent was recorded.\n:type: str\n\nThis setter directly modifies the `_location` attribute of the CCPAConsentState instance, which is one of the primary attributes representing the user's consent details. There are no return values from this method, and it is expected to be invoked within the context of a CCPAConsentState object.\"\"\"\n        '\\n        Sets the location of this CCPA Consent State.\\n\\n\\n        :param location: The location of this CCPA Consent State.\\n        :type: str\\n        '\n        self._location = location",
        "docstring": "Sets the location of this CCPA Consent State.\n\nThis method allows the assignment of a geographical location associated with the CCPA consent state, which is essential for compliance with the California Consumer Privacy Act (CCPA). \n\n:param location: The geographical location where the consent was recorded.\n:type: str\n\nThis setter directly modifies the `_location` attribute of the CCPAConsentState instance, which is one of the primary attributes representing the user's consent details. There are no return values from this method, and it is expected to be invoked within the context of a CCPAConsentState object.",
        "signature": "def location(self, location):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      },
      "CCPAConsentState.hardware_id": {
        "code": "    def hardware_id(self, hardware_id):\n        \"\"\"Sets the hardware ID of the CCPAConsentState instance, representing unique hardware identification for consent tracking purposes.\n\n    :param hardware_id: The hardware ID associated with this CCPA consent state.\n    :type hardware_id: str\n\n    This method interacts with the private attribute `_hardware_id`, storing the passed hardware ID for further use in consent management processes. The `hardware_id` property can later be accessed to retrieve this value.\"\"\"\n        '\\n        Sets the hardware_id of this CCPA Consent State.\\n\\n\\n        :param hardware_id: The hardware_id of this CCPA Consent State.\\n        :type: str\\n        '\n        self._hardware_id = hardware_id",
        "docstring": "Sets the hardware ID of the CCPAConsentState instance, representing unique hardware identification for consent tracking purposes.\n\n:param hardware_id: The hardware ID associated with this CCPA consent state.\n:type hardware_id: str\n\nThis method interacts with the private attribute `_hardware_id`, storing the passed hardware ID for further use in consent management processes. The `hardware_id` property can later be accessed to retrieve this value.",
        "signature": "def hardware_id(self, hardware_id):",
        "type": "Method",
        "class_signature": "class CCPAConsentState(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:__init__": {},
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:document": {},
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:consented": {},
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:timestamp_unixtime_ms": {},
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:location": {},
    "mparticle/models/ccpa_consent_state.py:CCPAConsentState:hardware_id": {}
  },
  "PRD": "# PROJECT NAME: mparticle-test_ccpa_consent_state\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 ccpa_consent_state.py\n            \u251c\u2500\u2500 CCPAConsentState.__init__\n            \u251c\u2500\u2500 CCPAConsentState.consented\n            \u251c\u2500\u2500 CCPAConsentState.document\n            \u251c\u2500\u2500 CCPAConsentState.hardware_id\n            \u251c\u2500\u2500 CCPAConsentState.location\n            \u2514\u2500\u2500 CCPAConsentState.timestamp_unixtime_ms\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe mParticle CCPAConsentState module focuses on managing and validating user consent data in compliance with the California Consumer Privacy Act (CCPA). Its primary purpose is to standardize and streamline the handling of consent-related metadata, including the consent document version, user consent status, timestamp, associated location, and device hardware identifier. This module enables developers to programmatically create, update, and test CCPA consent state objects, ensuring accurate tracking and reporting of user consent. By providing a structured framework for handling consent data, the module helps organizations maintain legal compliance and improve trust in their data processing practices.\n\n## FILE 1: mparticle/models/ccpa_consent_state.py\n\n- CLASS METHOD: CCPAConsentState.document\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def document(self, document):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the document of this CCPAConsentState, which represents the consent information under the California Consumer Privacy Act (CCPA). \n\n:param document: The document associated with the consent state, typically containing details of the consent agreement.\n:type document: str\n\nThis method updates the internal attribute `_document` with the provided value, allowing the consent state instance to store and manage the relevant document for compliance and tracking purposes. The document's contents are expected to adhere to the standards set forth by CCPA, although the specifics of such a document are determined externally to this implementation.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.location\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def location(self, location):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the location of this CCPA Consent State.\n\nThis method allows the assignment of a geographical location associated with the CCPA consent state, which is essential for compliance with the California Consumer Privacy Act (CCPA). \n\n:param location: The geographical location where the consent was recorded.\n:type: str\n\nThis setter directly modifies the `_location` attribute of the CCPAConsentState instance, which is one of the primary attributes representing the user's consent details. There are no return values from this method, and it is expected to be invoked within the context of a CCPAConsentState object.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.consented\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def consented(self, consented):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the consented status of this CCPAConsentState instance.\n\nThis method updates the `_consented` attribute, indicating whether the user has given consent per the California Consumer Privacy Act (CCPA). The consent status is expected to be a boolean value, which signifies whether consent has been granted or denied.\n\n:param consented: A boolean indicating the consent status of this CCPA Consent State.\n:type: bool\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.timestamp_unixtime_ms\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the timestamp (in Unix time format measured in milliseconds) representing when the consent state was recorded for this CCPA Consent State.\n\n:param timestamp_unixtime_ms: The timestamp representing when the consent was granted or revoked, given in Unix time (milliseconds since epoch).\n:type: int\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.__init__\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a CCPAConsentState instance, representing the consent state as per the California Consumer Privacy Act (CCPA). This class encapsulates the relevant consent information, including the consent document, consent status, timestamp, location, and hardware identifier.\n\n:param document: The document outlining the consent (string). Default is None.\n:param consented: Indicates whether consent was given (boolean). Default is None.\n:param timestamp_unixtime_ms: Timestamp in Unix time format in milliseconds when consent was recorded (integer). Default is None.\n:param location: The geographic location of the user at the time of consent (string). Default is None.\n:param hardware_id: A unique identifier for the user's hardware (string). Default is None.\n\nThis initializer also defines two dictionaries: `swagger_types`, which maps the attribute names to their expected data types, and `attribute_map`, which maps attribute names to their corresponding JSON keys in the Swagger API specification. The attributes are set using their respective setter methods to ensure proper encapsulation and validation.\n\"\"\"\n```\n\n- CLASS METHOD: CCPAConsentState.hardware_id\n  - CLASS SIGNATURE: class CCPAConsentState(object):\n  - SIGNATURE: def hardware_id(self, hardware_id):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the hardware ID of the CCPAConsentState instance, representing unique hardware identification for consent tracking purposes.\n\n:param hardware_id: The hardware ID associated with this CCPA consent state.\n:type hardware_id: str\n\nThis method interacts with the private attribute `_hardware_id`, storing the passed hardware ID for further use in consent management processes. The `hardware_id` property can later be accessed to retrieve this value.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/ccpa_consent_state.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass CCPAConsentState(object):\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_ccpa_consent_state.py:TestCCPAConsentState:testCCPAConsentState": {
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:__init__": {
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:document": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:consented": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:timestamp_unixtime_ms": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:location": {},
        "mparticle/models/ccpa_consent_state.py:CCPAConsentState:hardware_id": {}
      },
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:document": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:consented": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:timestamp_unixtime_ms": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:location": {},
      "mparticle/models/ccpa_consent_state.py:CCPAConsentState:hardware_id": {}
    }
  }
}