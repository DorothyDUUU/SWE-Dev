{
  "dir_path": "/app/typish",
  "package_name": "typish",
  "sample_name": "typish-test_get_args_and_return_type",
  "src_dir": "test_resources/",
  "test_dir": "tests/",
  "test_file": "modified_testcases/functions/test_get_args_and_return_type.py",
  "test_code": "from typing import Callable\nfrom unittest import TestCase\n\nfrom typish import NoneType, get_args_and_return_type\n\n\nclass TestGetArgsAndReturnType(TestCase):\n    def test_get_args_and_return_type(self):\n        arg_types, return_type = get_args_and_return_type(\n        Callable[[int, str], float])\n\n        self.assertEqual((int, str), arg_types)\n        self.assertEqual(float, return_type)\n\n    def test_get_args_and_return_type_no_args(self):\n        arg_types, return_type = get_args_and_return_type(\n            Callable[[], float])\n\n        self.assertEqual(tuple(), arg_types)\n        self.assertEqual(float, return_type)\n\n    def test_get_args_and_return_type_no_return_type(self):\n        arg_types, return_type = get_args_and_return_type(\n            Callable[[int, str], None])\n\n        self.assertEqual((int, str), arg_types)\n        self.assertEqual(NoneType, return_type)\n\n    def test_get_args_and_return_type_no_hints(self):\n        arg_types1, return_type1 = get_args_and_return_type(Callable)\n        arg_types2, return_type2 = get_args_and_return_type(callable)\n\n        self.assertEqual(None, arg_types1)\n        self.assertEqual(None, return_type1)\n        self.assertEqual(None, arg_types2)\n        self.assertEqual(None, return_type2)\n",
  "GT_file_code": {
    "typish/functions/_get_type_hints_of_callable.py": "import typing\n\n\ndef get_type_hints_of_callable(\n        func: typing.Callable) -> typing.Dict[str, type]:\n    \"\"\"\n    Return the type hints of the parameters of the given callable.\n    :param func: the callable of which the type hints are to be returned.\n    :return: a dict with parameter names and their types.\n    \"\"\"\n    # Python3.5: get_type_hints raises on classes without explicit constructor\n    try:\n        result = typing.get_type_hints(func)\n    except AttributeError:\n        result = {}\n    return result\n\n\ndef get_args_and_return_type(hint: typing.Type[typing.Callable]) \\\n        -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n    \"\"\"\n    Get the argument types and the return type of a callable type hint\n    (e.g. ``Callable[[int], str]``).\n\n    Example:\n    ```\n    arg_types, return_type = get_args_and_return_type(Callable[[int], str])\n    # args_types is (int, )\n    # return_type is str\n    ```\n\n    Example for when ``hint`` has no generics:\n    ```\n    arg_types, return_type = get_args_and_return_type(Callable)\n    # args_types is None\n    # return_type is None\n    ```\n    :param hint: the callable type hint.\n    :return: a tuple of the argument types (as a tuple) and the return type.\n    \"\"\"\n    if hint in (callable, typing.Callable):\n        arg_types = None\n        return_type = None\n    elif hasattr(hint, '__result__'):\n        arg_types = hint.__args__\n        return_type = hint.__result__\n    else:\n        arg_types = hint.__args__[0:-1]\n        return_type = hint.__args__[-1]\n    return arg_types, return_type\n"
  },
  "GT_src_dict": {
    "typish/functions/_get_type_hints_of_callable.py": {
      "get_args_and_return_type": {
        "code": "def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n    \"\"\"Get the argument types and return type from a callable type hint (e.g., ``Callable[[int], str]``).\n\n:param hint: A type hint for a callable, typically of type `Callable`. This can be a specific callable type with argument and return types or the generic `Callable`.\n:return: A tuple containing two elements: \n    - A tuple of argument types (or `None` if not provided).\n    - The return type (or `None` if not applicable).\n\nThe function leverages the `__args__` and `__result__` attributes of the callable type to extract the necessary type information. If `hint` is the generic `Callable`, it will return `None` for both argument types and return type.\"\"\"\n    '\\n    Get the argument types and the return type of a callable type hint\\n    (e.g. ``Callable[[int], str]``).\\n\\n    Example:\\n    ```\\n    arg_types, return_type = get_args_and_return_type(Callable[[int], str])\\n    # args_types is (int, )\\n    # return_type is str\\n    ```\\n\\n    Example for when ``hint`` has no generics:\\n    ```\\n    arg_types, return_type = get_args_and_return_type(Callable)\\n    # args_types is None\\n    # return_type is None\\n    ```\\n    :param hint: the callable type hint.\\n    :return: a tuple of the argument types (as a tuple) and the return type.\\n    '\n    if hint in (callable, typing.Callable):\n        arg_types = None\n        return_type = None\n    elif hasattr(hint, '__result__'):\n        arg_types = hint.__args__\n        return_type = hint.__result__\n    else:\n        arg_types = hint.__args__[0:-1]\n        return_type = hint.__args__[-1]\n    return (arg_types, return_type)",
        "docstring": "Get the argument types and return type from a callable type hint (e.g., ``Callable[[int], str]``).\n\n:param hint: A type hint for a callable, typically of type `Callable`. This can be a specific callable type with argument and return types or the generic `Callable`.\n:return: A tuple containing two elements: \n    - A tuple of argument types (or `None` if not provided).\n    - The return type (or `None` if not applicable).\n\nThe function leverages the `__args__` and `__result__` attributes of the callable type to extract the necessary type information. If `hint` is the generic `Callable`, it will return `None` for both argument types and return type.",
        "signature": "def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: typish-test_get_args_and_return_type\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 typish/\n    \u2514\u2500\u2500 functions/\n        \u2514\u2500\u2500 _get_type_hints_of_callable.py\n            \u2514\u2500\u2500 get_args_and_return_type\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and extract detailed type information from Python `Callable` objects, including their argument types and return types. It facilitates the analysis of callable type hints by providing a mechanism to decompose these hints into their constituent parts. The module ensures robust handling of various callable scenarios, such as those without arguments, without return types, or without explicit type hints, enabling precise introspection of type annotations. This functionality streamlines type-checking and validation processes for developers, particularly in applications requiring dynamic type analysis, improving code reliability and maintainability.\n\n## FILE 1: typish/functions/_get_type_hints_of_callable.py\n\n- FUNCTION NAME: get_args_and_return_type\n  - SIGNATURE: def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the argument types and return type from a callable type hint (e.g., ``Callable[[int], str]``).\n\n:param hint: A type hint for a callable, typically of type `Callable`. This can be a specific callable type with argument and return types or the generic `Callable`.\n:return: A tuple containing two elements: \n    - A tuple of argument types (or `None` if not provided).\n    - The return type (or `None` if not applicable).\n\nThe function leverages the `__args__` and `__result__` attributes of the callable type to extract the necessary type information. If `hint` is the generic `Callable`, it will return `None` for both argument types and return type.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "typish/functions/_get_type_hints_of_callable.py": "import typing\n\ndef get_type_hints_of_callable(func: typing.Callable) -> typing.Dict[str, type]:\n    \"\"\"\n    Return the type hints of the parameters of the given callable.\n    :param func: the callable of which the type hints are to be returned.\n    :return: a dict with parameter names and their types.\n    \"\"\"\n    try:\n        result = typing.get_type_hints(func)\n    except AttributeError:\n        result = {}\n    return result"
  },
  "call_tree": {
    "modified_testcases/functions/test_get_args_and_return_type.py:TestGetArgsAndReturnType:test_get_args_and_return_type": {
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    },
    "modified_testcases/functions/test_get_args_and_return_type.py:TestGetArgsAndReturnType:test_get_args_and_return_type_no_args": {
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    },
    "modified_testcases/functions/test_get_args_and_return_type.py:TestGetArgsAndReturnType:test_get_args_and_return_type_no_hints": {
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    },
    "modified_testcases/functions/test_get_args_and_return_type.py:TestGetArgsAndReturnType:test_get_args_and_return_type_no_return_type": {
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    }
  }
}