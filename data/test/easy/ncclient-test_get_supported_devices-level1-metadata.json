{
  "dir_path": "/app/ncclient",
  "package_name": "ncclient",
  "sample_name": "ncclient-test_get_supported_devices",
  "src_dir": "ncclient/",
  "test_dir": "test/",
  "test_file": "modified_testcases/unit/devices/test_get_supported_devices.py",
  "test_code": "import unittest\nfrom ncclient import devices\n\nclass  TestGetSupportedDevices(unittest.TestCase):\n\n    def test_get_supported_devices(self):\n        supported_devices = devices.get_supported_devices()\n        self.assertEqual(sorted(supported_devices), sorted(('junos',\n                                                            'csr',\n                                                            'ciena',\n                                                            'nexus',\n                                                            'iosxr',\n                                                            'iosxe',\n                                                            'huawei',\n                                                            'huaweiyang',\n                                                            'alu',\n                                                            'h3c',\n                                                            'hpcomware',\n                                                            'sros',\n                                                            'default')))\n\n    def test_get_supported_device_labels(self):\n        supported_device_labels = devices.get_supported_device_labels()\n        self.assertEqual(supported_device_labels, {'junos':'Juniper',\n                                                   'csr':'Cisco CSR1000v',\n                                                   'ciena': 'Ciena',\n                                                   'nexus':'Cisco Nexus',\n                                                   'iosxr':'Cisco IOS XR',\n                                                   'iosxe':'Cisco IOS XE',\n                                                   'huawei':'Huawei',\n                                                   'huaweiyang':'Huawei',\n                                                   'alu':'Alcatel Lucent',\n                                                   'h3c':'H3C',\n                                                   'hpcomware':'HP Comware',\n                                                   'sros':'Nokia SR OS',\n                                                   'default':'Server or anything not in above'})\n\n",
  "GT_file_code": {
    "ncclient/devices/__init__.py": "# supported devices config, add new device (eg: 'device name':'device label').\nsupported_devices_cfg = {\n    \"alu\": \"Alcatel Lucent\",\n    \"ciena\": \"Ciena\",\n    \"csr\": \"Cisco CSR1000v\",\n    \"h3c\": \"H3C\",\n    \"hpcomware\": \"HP Comware\",\n    \"huawei\": \"Huawei\",\n    \"huaweiyang\": \"Huawei\",\n    \"iosxe\": \"Cisco IOS XE\",\n    \"iosxr\": \"Cisco IOS XR\",\n    \"junos\": \"Juniper\",\n    \"nexus\": \"Cisco Nexus\",\n    \"sros\": \"Nokia SR OS\",\n    \"default\": \"Server or anything not in above\",\n}\n\n\ndef get_supported_devices():\n    return tuple(supported_devices_cfg.keys())\n\n\ndef get_supported_device_labels():\n    return supported_devices_cfg\n"
  },
  "GT_src_dict": {
    "ncclient/devices/__init__.py": {
      "get_supported_devices": {
        "code": "def get_supported_devices():\n    \"\"\"Returns a tuple of supported device identifiers from the global configuration dictionary.\n\nThis function accesses the `supported_devices_cfg` dictionary, which is defined globally and contains mappings of device identifiers to their respective human-readable labels. The keys of this dictionary represent the supported devices. The function does not accept any parameters and returns a tuple containing the identifiers of all supported devices.\n\nReturns:\n    tuple: A tuple of strings representing the identifiers of the supported devices.\"\"\"\n    return tuple(supported_devices_cfg.keys())",
        "docstring": "Returns a tuple of supported device identifiers from the global configuration dictionary.\n\nThis function accesses the `supported_devices_cfg` dictionary, which is defined globally and contains mappings of device identifiers to their respective human-readable labels. The keys of this dictionary represent the supported devices. The function does not accept any parameters and returns a tuple containing the identifiers of all supported devices.\n\nReturns:\n    tuple: A tuple of strings representing the identifiers of the supported devices.",
        "signature": "def get_supported_devices():",
        "type": "Function",
        "class_signature": null
      },
      "get_supported_device_labels": {
        "code": "def get_supported_device_labels():\n    \"\"\"Retrieve the supported device labels.\n\nThis function returns the `supported_devices_cfg` dictionary, which contains a mapping of device identifiers (keys) to their respective labels (values). It provides a way to access information about the devices supported by the system.\n\nReturns:\n    dict: A dictionary where keys are device identifiers (e.g., 'alu', 'ciena') and values are their corresponding labels (e.g., 'Alcatel Lucent', 'Ciena').\n\nDependencies:\n    - The function relies on the `supported_devices_cfg` constant, which is defined at the module level and includes various device configurations.\"\"\"\n    return supported_devices_cfg",
        "docstring": "Retrieve the supported device labels.\n\nThis function returns the `supported_devices_cfg` dictionary, which contains a mapping of device identifiers (keys) to their respective labels (values). It provides a way to access information about the devices supported by the system.\n\nReturns:\n    dict: A dictionary where keys are device identifiers (e.g., 'alu', 'ciena') and values are their corresponding labels (e.g., 'Alcatel Lucent', 'Ciena').\n\nDependencies:\n    - The function relies on the `supported_devices_cfg` constant, which is defined at the module level and includes various device configurations.",
        "signature": "def get_supported_device_labels():",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: ncclient-test_get_supported_devices\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 ncclient/\n    \u2514\u2500\u2500 devices/\n        \u2514\u2500\u2500 __init__.py\n            \u251c\u2500\u2500 get_supported_device_labels\n            \u2514\u2500\u2500 get_supported_devices\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the identification and classification of supported network device types for applications utilizing the `ncclient` library. Its primary functionality is to provide precise information about the range of compatible devices and their corresponding labels, enabling seamless interoperability across diverse network infrastructures. By offering programmatic access to a comprehensive list of supported devices and their user-friendly labels, the module enhances clarity and reduces complexity for developers working with multi-vendor environments. This simplifies integration, minimizes configuration errors, and ensures compatibility when orchestrating workflows or managing devices within network automation solutions.\n\n## FILE 1: ncclient/devices/__init__.py\n\n- FUNCTION NAME: get_supported_devices\n  - SIGNATURE: def get_supported_devices():\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a tuple of supported device identifiers from the global configuration dictionary.\n\nThis function accesses the `supported_devices_cfg` dictionary, which is defined globally and contains mappings of device identifiers to their respective human-readable labels. The keys of this dictionary represent the supported devices. The function does not accept any parameters and returns a tuple containing the identifiers of all supported devices.\n\nReturns:\n    tuple: A tuple of strings representing the identifiers of the supported devices.\n\"\"\"\n```\n\n- FUNCTION NAME: get_supported_device_labels\n  - SIGNATURE: def get_supported_device_labels():\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the supported device labels.\n\nThis function returns the `supported_devices_cfg` dictionary, which contains a mapping of device identifiers (keys) to their respective labels (values). It provides a way to access information about the devices supported by the system.\n\nReturns:\n    dict: A dictionary where keys are device identifiers (e.g., 'alu', 'ciena') and values are their corresponding labels (e.g., 'Alcatel Lucent', 'Ciena').\n\nDependencies:\n    - The function relies on the `supported_devices_cfg` constant, which is defined at the module level and includes various device configurations.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "ncclient/devices/__init__.py": "supported_devices_cfg = {'alu': 'Alcatel Lucent', 'ciena': 'Ciena', 'csr': 'Cisco CSR1000v', 'h3c': 'H3C', 'hpcomware': 'HP Comware', 'huawei': 'Huawei', 'huaweiyang': 'Huawei', 'iosxe': 'Cisco IOS XE', 'iosxr': 'Cisco IOS XR', 'junos': 'Juniper', 'nexus': 'Cisco Nexus', 'sros': 'Nokia SR OS', 'default': 'Server or anything not in above'}"
  },
  "call_tree": {
    "modified_testcases/unit/devices/test_get_supported_devices.py:TestGetSupportedDevices:test_get_supported_device_labels": {
      "ncclient/devices/__init__.py:get_supported_device_labels": {}
    },
    "modified_testcases/unit/devices/test_get_supported_devices.py:TestGetSupportedDevices:test_get_supported_devices": {
      "ncclient/devices/__init__.py:get_supported_devices": {}
    }
  }
}