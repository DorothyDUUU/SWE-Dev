{
  "dir_path": "/app/datashader",
  "package_name": "datashader",
  "sample_name": "datashader-test_colors",
  "src_dir": "datashader/",
  "test_dir": "datashader/tests/",
  "test_file": "datashader/tests/test_colors.py",
  "test_code": "from __future__ import annotations\nfrom datashader.colors import rgb, hex_to_rgb\n\nimport pytest\n\n\ndef test_hex_to_rgb():\n    assert hex_to_rgb('#FAFBFC') == (250, 251, 252)\n    with pytest.raises(ValueError):\n        hex_to_rgb('#FFF')\n    with pytest.raises(ValueError):\n        hex_to_rgb('FFFFFF')\n    with pytest.raises(ValueError):\n        hex_to_rgb('#FFFFFG')\n\n\ndef test_rgb():\n    assert rgb('#FAFBFC') == (250, 251, 252)\n    assert rgb('blue') == (0, 0, 255)\n    assert rgb((255, 255, 255)) == (255, 255, 255)\n    with pytest.raises(ValueError):\n        rgb((255, 256, 255))\n    with pytest.raises(ValueError):\n        rgb((-1, 255, 255))\n    with pytest.raises(ValueError):\n        rgb('foobar')\n",
  "GT_file_code": {
    "datashader/colors.py": "from __future__ import annotations\n\n\n# Lookup of web color names to their hex codes.\ncolor_lookup = {'aliceblue': '#F0F8FF', 'antiquewhite': '#FAEBD7',\n                'aqua': '#00FFFF', 'aquamarine': '#7FFFD4',\n                'azure': '#F0FFFF', 'beige': '#F5F5DC',\n                'bisque': '#FFE4C4', 'black': '#000000',\n                'blanchedalmond': '#FFEBCD', 'blue': '#0000FF',\n                'blueviolet': '#8A2BE2', 'brown': '#A52A2A',\n                'burlywood': '#DEB887', 'cadetblue': '#5F9EA0',\n                'chartreuse': '#7FFF00', 'chocolate': '#D2691E',\n                'coral': '#FF7F50', 'cornflowerblue': '#6495ED',\n                'cornsilk': '#FFF8DC', 'crimson': '#DC143C',\n                'cyan': '#00FFFF', 'darkblue': '#00008B',\n                'darkcyan': '#008B8B', 'darkgoldenrod': '#B8860B',\n                'darkgray': '#A9A9A9', 'darkgreen': '#006400',\n                'darkgrey': '#A9A9A9', 'darkkhaki': '#BDB76B',\n                'darkmagenta': '#8B008B', 'darkolivegreen': '#556B2F',\n                'darkorange': '#FF8C00', 'darkorchid': '#9932CC',\n                'darkred': '#8B0000', 'darksage': '#598556',\n                'darksalmon': '#E9967A', 'darkseagreen': '#8FBC8F',\n                'darkslateblue': '#483D8B', 'darkslategray': '#2F4F4F',\n                'darkslategrey': '#2F4F4F', 'darkturquoise': '#00CED1',\n                'darkviolet': '#9400D3', 'deeppink': '#FF1493',\n                'deepskyblue': '#00BFFF', 'dimgray': '#696969',\n                'dimgrey': '#696969', 'dodgerblue': '#1E90FF',\n                'firebrick': '#B22222', 'floralwhite': '#FFFAF0',\n                'forestgreen': '#228B22', 'fuchsia': '#FF00FF',\n                'gainsboro': '#DCDCDC', 'ghostwhite': '#F8F8FF',\n                'gold': '#FFD700', 'goldenrod': '#DAA520',\n                'gray': '#808080', 'green': '#008000',\n                'greenyellow': '#ADFF2F', 'grey': '#808080',\n                'honeydew': '#F0FFF0', 'hotpink': '#FF69B4',\n                'indianred': '#CD5C5C', 'indigo': '#4B0082',\n                'ivory': '#FFFFF0', 'khaki': '#F0E68C',\n                'lavender': '#E6E6FA', 'lavenderblush': '#FFF0F5',\n                'lawngreen': '#7CFC00', 'lemonchiffon': '#FFFACD',\n                'lightblue': '#ADD8E6', 'lightcoral': '#F08080',\n                'lightcyan': '#E0FFFF', 'lightgoldenrodyellow': '#FAFAD2',\n                'lightgray': '#D3D3D3', 'lightgreen': '#90EE90',\n                'lightgrey': '#D3D3D3', 'lightpink': '#FFB6C1',\n                'lightsage': '#BCECAC', 'lightsalmon': '#FFA07A',\n                'lightseagreen': '#20B2AA', 'lightskyblue': '#87CEFA',\n                'lightslategray': '#778899', 'lightslategrey': '#778899',\n                'lightsteelblue': '#B0C4DE', 'lightyellow': '#FFFFE0',\n                'lime': '#00FF00', 'limegreen': '#32CD32',\n                'linen': '#FAF0E6', 'magenta': '#FF00FF',\n                'maroon': '#800000', 'mediumaquamarine': '#66CDAA',\n                'mediumblue': '#0000CD', 'mediumorchid': '#BA55D3',\n                'mediumpurple': '#9370DB', 'mediumseagreen': '#3CB371',\n                'mediumslateblue': '#7B68EE', 'mediumspringgreen': '#00FA9A',\n                'mediumturquoise': '#48D1CC', 'mediumvioletred': '#C71585',\n                'midnightblue': '#191970', 'mintcream': '#F5FFFA',\n                'mistyrose': '#FFE4E1', 'moccasin': '#FFE4B5',\n                'navajowhite': '#FFDEAD', 'navy': '#000080',\n                'oldlace': '#FDF5E6', 'olive': '#808000',\n                'olivedrab': '#6B8E23', 'orange': '#FFA500',\n                'orangered': '#FF4500', 'orchid': '#DA70D6',\n                'palegoldenrod': '#EEE8AA', 'palegreen': '#98FB98',\n                'paleturquoise': '#AFEEEE', 'palevioletred': '#DB7093',\n                'papayawhip': '#FFEFD5', 'peachpuff': '#FFDAB9',\n                'peru': '#CD853F', 'pink': '#FFC0CB',\n                'plum': '#DDA0DD', 'powderblue': '#B0E0E6',\n                'purple': '#800080', 'red': '#FF0000',\n                'rosybrown': '#BC8F8F', 'royalblue': '#4169E1',\n                'saddlebrown': '#8B4513', 'sage': '#87AE73',\n                'salmon': '#FA8072', 'sandybrown': '#FAA460',\n                'seagreen': '#2E8B57', 'seashell': '#FFF5EE',\n                'sienna': '#A0522D', 'silver': '#C0C0C0',\n                'skyblue': '#87CEEB', 'slateblue': '#6A5ACD',\n                'slategray': '#708090', 'slategrey': '#708090',\n                'snow': '#FFFAFA', 'springgreen': '#00FF7F',\n                'steelblue': '#4682B4', 'tan': '#D2B48C',\n                'teal': '#008080', 'thistle': '#D8BFD8',\n                'tomato': '#FF6347', 'turquoise': '#40E0D0',\n                'violet': '#EE82EE', 'wheat': '#F5DEB3',\n                'white': '#FFFFFF', 'whitesmoke': '#F5F5F5',\n                'yellow': '#FFFF00', 'yellowgreen': '#9ACD32'}\n\n\ndef hex_to_rgb(x):\n    \"\"\"Convert a color hexcode to an rgb tuple.\n\n    Example\n    -------\n    >>> rgb('#FFFFFF')\n    (255, 255, 255)\n    \"\"\"\n    if not (x.startswith('#') and len(x) == 7):\n        raise ValueError(\"Invalid hex color\")\n    x = x.strip('#')\n    try:\n        return (int(x[:2], 16), int(x[2:4], 16), int(x[4:], 16))\n    except ValueError:\n        raise ValueError(\"Invalid hex color\")\n\n\ndef rgb(x):\n    \"\"\"Return a triple representing rgb color.\n\n    Can convert colors by name or hexcode. Passing in a valid rgb tuple is\n    idempotent.\n\n    Example\n    -------\n    >>> rgb('plum')\n    (221, 160, 221)\n    >>> rgb('#FFFFFF')\n    (255, 255, 255)\n    >>> rgb((255, 255, 255))\n    (255, 255, 255)\n    \"\"\"\n    if isinstance(x, str):\n        if x.startswith('#'):\n            return hex_to_rgb(x)\n        elif x in color_lookup:\n            return hex_to_rgb(color_lookup[x])\n        else:\n            raise ValueError(\"Unknown color: '{0}'\".format(x))\n    elif isinstance(x, tuple) and len(x) == 3:\n        if min(x) < 0 or max(x) > 255:\n            raise ValueError(\"Invalid RGB tuple\")\n    else:\n        raise TypeError(\"Don't know how to convert {0} to RGB\".format(x))\n    return x\n\n#   Example palettes\n\n# Copied from from bokeh.palettes.Greys9\nGreys9 = [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"]  # noqa: E501\n\n# Adapted from matplotlib.cm.hot to be more uniform at the high end\nHot = [\"black\", \"maroon\", \"darkred\", \"red\", \"orangered\", \"darkorange\", \"orange\", \"gold\", \"yellow\", \"white\"]  # noqa: E501\n\n# pseudo terrestrial elevation ramp\nElevation = [\"aqua\", \"sandybrown\", \"limegreen\", \"green\", \"green\", \"darkgreen\", \"saddlebrown\", \"gray\", \"white\"]  # noqa: E501\n\n# Qualitative color maps, for use in colorizing categories\n# Originally from Cynthia Brewer (http://colorbrewer2.org), via Bokeh\nSet1 = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999']  # noqa: E501\nSet2 = ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3']\nSet3 = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f']  # noqa: E501\n\n# Sets 1, 2, and 3 combined, minus indistinguishable colors\nSets1to3 = Set1+Set2[0:3]+Set2[4:7]+Set3[1:2]+Set3[3:4]+Set3[5:6]+Set3[7:9]+Set3[10:]\n\n\ndef _mpl_cmdata_to_bokeh_palette(cm_data):\n    \"\"\"Given the data from a Matplotlib colormap as a list of three-item lists in the range 0,1.0,\n    convert colors into the range 0,256 and return as a list of tuples\"\"\"\n    return [(int(r*256),int(g*256),int(b*256)) for r,g,b in cm_data]\n\n# Copied from matplotlib/_cm_listed.py\n_inferno_data = [[0.001462, 0.000466, 0.013866],\n                 [0.002267, 0.001270, 0.018570],\n                 [0.003299, 0.002249, 0.024239],\n                 [0.004547, 0.003392, 0.030909],\n                 [0.006006, 0.004692, 0.038558],\n                 [0.007676, 0.006136, 0.046836],\n                 [0.009561, 0.007713, 0.055143],\n                 [0.011663, 0.009417, 0.063460],\n                 [0.013995, 0.011225, 0.071862],\n                 [0.016561, 0.013136, 0.080282],\n                 [0.019373, 0.015133, 0.088767],\n                 [0.022447, 0.017199, 0.097327],\n                 [0.025793, 0.019331, 0.105930],\n                 [0.029432, 0.021503, 0.114621],\n                 [0.033385, 0.023702, 0.123397],\n                 [0.037668, 0.025921, 0.132232],\n                 [0.042253, 0.028139, 0.141141],\n                 [0.046915, 0.030324, 0.150164],\n                 [0.051644, 0.032474, 0.159254],\n                 [0.056449, 0.034569, 0.168414],\n                 [0.061340, 0.036590, 0.177642],\n                 [0.066331, 0.038504, 0.186962],\n                 [0.071429, 0.040294, 0.196354],\n                 [0.076637, 0.041905, 0.205799],\n                 [0.081962, 0.043328, 0.215289],\n                 [0.087411, 0.044556, 0.224813],\n                 [0.092990, 0.045583, 0.234358],\n                 [0.098702, 0.046402, 0.243904],\n                 [0.104551, 0.047008, 0.253430],\n                 [0.110536, 0.047399, 0.262912],\n                 [0.116656, 0.047574, 0.272321],\n                 [0.122908, 0.047536, 0.281624],\n                 [0.129285, 0.047293, 0.290788],\n                 [0.135778, 0.046856, 0.299776],\n                 [0.142378, 0.046242, 0.308553],\n                 [0.149073, 0.045468, 0.317085],\n                 [0.155850, 0.044559, 0.325338],\n                 [0.162689, 0.043554, 0.333277],\n                 [0.169575, 0.042489, 0.340874],\n                 [0.176493, 0.041402, 0.348111],\n                 [0.183429, 0.040329, 0.354971],\n                 [0.190367, 0.039309, 0.361447],\n                 [0.197297, 0.038400, 0.367535],\n                 [0.204209, 0.037632, 0.373238],\n                 [0.211095, 0.037030, 0.378563],\n                 [0.217949, 0.036615, 0.383522],\n                 [0.224763, 0.036405, 0.388129],\n                 [0.231538, 0.036405, 0.392400],\n                 [0.238273, 0.036621, 0.396353],\n                 [0.244967, 0.037055, 0.400007],\n                 [0.251620, 0.037705, 0.403378],\n                 [0.258234, 0.038571, 0.406485],\n                 [0.264810, 0.039647, 0.409345],\n                 [0.271347, 0.040922, 0.411976],\n                 [0.277850, 0.042353, 0.414392],\n                 [0.284321, 0.043933, 0.416608],\n                 [0.290763, 0.045644, 0.418637],\n                 [0.297178, 0.047470, 0.420491],\n                 [0.303568, 0.049396, 0.422182],\n                 [0.309935, 0.051407, 0.423721],\n                 [0.316282, 0.053490, 0.425116],\n                 [0.322610, 0.055634, 0.426377],\n                 [0.328921, 0.057827, 0.427511],\n                 [0.335217, 0.060060, 0.428524],\n                 [0.341500, 0.062325, 0.429425],\n                 [0.347771, 0.064616, 0.430217],\n                 [0.354032, 0.066925, 0.430906],\n                 [0.360284, 0.069247, 0.431497],\n                 [0.366529, 0.071579, 0.431994],\n                 [0.372768, 0.073915, 0.432400],\n                 [0.379001, 0.076253, 0.432719],\n                 [0.385228, 0.078591, 0.432955],\n                 [0.391453, 0.080927, 0.433109],\n                 [0.397674, 0.083257, 0.433183],\n                 [0.403894, 0.085580, 0.433179],\n                 [0.410113, 0.087896, 0.433098],\n                 [0.416331, 0.090203, 0.432943],\n                 [0.422549, 0.092501, 0.432714],\n                 [0.428768, 0.094790, 0.432412],\n                 [0.434987, 0.097069, 0.432039],\n                 [0.441207, 0.099338, 0.431594],\n                 [0.447428, 0.101597, 0.431080],\n                 [0.453651, 0.103848, 0.430498],\n                 [0.459875, 0.106089, 0.429846],\n                 [0.466100, 0.108322, 0.429125],\n                 [0.472328, 0.110547, 0.428334],\n                 [0.478558, 0.112764, 0.427475],\n                 [0.484789, 0.114974, 0.426548],\n                 [0.491022, 0.117179, 0.425552],\n                 [0.497257, 0.119379, 0.424488],\n                 [0.503493, 0.121575, 0.423356],\n                 [0.509730, 0.123769, 0.422156],\n                 [0.515967, 0.125960, 0.420887],\n                 [0.522206, 0.128150, 0.419549],\n                 [0.528444, 0.130341, 0.418142],\n                 [0.534683, 0.132534, 0.416667],\n                 [0.540920, 0.134729, 0.415123],\n                 [0.547157, 0.136929, 0.413511],\n                 [0.553392, 0.139134, 0.411829],\n                 [0.559624, 0.141346, 0.410078],\n                 [0.565854, 0.143567, 0.408258],\n                 [0.572081, 0.145797, 0.406369],\n                 [0.578304, 0.148039, 0.404411],\n                 [0.584521, 0.150294, 0.402385],\n                 [0.590734, 0.152563, 0.400290],\n                 [0.596940, 0.154848, 0.398125],\n                 [0.603139, 0.157151, 0.395891],\n                 [0.609330, 0.159474, 0.393589],\n                 [0.615513, 0.161817, 0.391219],\n                 [0.621685, 0.164184, 0.388781],\n                 [0.627847, 0.166575, 0.386276],\n                 [0.633998, 0.168992, 0.383704],\n                 [0.640135, 0.171438, 0.381065],\n                 [0.646260, 0.173914, 0.378359],\n                 [0.652369, 0.176421, 0.375586],\n                 [0.658463, 0.178962, 0.372748],\n                 [0.664540, 0.181539, 0.369846],\n                 [0.670599, 0.184153, 0.366879],\n                 [0.676638, 0.186807, 0.363849],\n                 [0.682656, 0.189501, 0.360757],\n                 [0.688653, 0.192239, 0.357603],\n                 [0.694627, 0.195021, 0.354388],\n                 [0.700576, 0.197851, 0.351113],\n                 [0.706500, 0.200728, 0.347777],\n                 [0.712396, 0.203656, 0.344383],\n                 [0.718264, 0.206636, 0.340931],\n                 [0.724103, 0.209670, 0.337424],\n                 [0.729909, 0.212759, 0.333861],\n                 [0.735683, 0.215906, 0.330245],\n                 [0.741423, 0.219112, 0.326576],\n                 [0.747127, 0.222378, 0.322856],\n                 [0.752794, 0.225706, 0.319085],\n                 [0.758422, 0.229097, 0.315266],\n                 [0.764010, 0.232554, 0.311399],\n                 [0.769556, 0.236077, 0.307485],\n                 [0.775059, 0.239667, 0.303526],\n                 [0.780517, 0.243327, 0.299523],\n                 [0.785929, 0.247056, 0.295477],\n                 [0.791293, 0.250856, 0.291390],\n                 [0.796607, 0.254728, 0.287264],\n                 [0.801871, 0.258674, 0.283099],\n                 [0.807082, 0.262692, 0.278898],\n                 [0.812239, 0.266786, 0.274661],\n                 [0.817341, 0.270954, 0.270390],\n                 [0.822386, 0.275197, 0.266085],\n                 [0.827372, 0.279517, 0.261750],\n                 [0.832299, 0.283913, 0.257383],\n                 [0.837165, 0.288385, 0.252988],\n                 [0.841969, 0.292933, 0.248564],\n                 [0.846709, 0.297559, 0.244113],\n                 [0.851384, 0.302260, 0.239636],\n                 [0.855992, 0.307038, 0.235133],\n                 [0.860533, 0.311892, 0.230606],\n                 [0.865006, 0.316822, 0.226055],\n                 [0.869409, 0.321827, 0.221482],\n                 [0.873741, 0.326906, 0.216886],\n                 [0.878001, 0.332060, 0.212268],\n                 [0.882188, 0.337287, 0.207628],\n                 [0.886302, 0.342586, 0.202968],\n                 [0.890341, 0.347957, 0.198286],\n                 [0.894305, 0.353399, 0.193584],\n                 [0.898192, 0.358911, 0.188860],\n                 [0.902003, 0.364492, 0.184116],\n                 [0.905735, 0.370140, 0.179350],\n                 [0.909390, 0.375856, 0.174563],\n                 [0.912966, 0.381636, 0.169755],\n                 [0.916462, 0.387481, 0.164924],\n                 [0.919879, 0.393389, 0.160070],\n                 [0.923215, 0.399359, 0.155193],\n                 [0.926470, 0.405389, 0.150292],\n                 [0.929644, 0.411479, 0.145367],\n                 [0.932737, 0.417627, 0.140417],\n                 [0.935747, 0.423831, 0.135440],\n                 [0.938675, 0.430091, 0.130438],\n                 [0.941521, 0.436405, 0.125409],\n                 [0.944285, 0.442772, 0.120354],\n                 [0.946965, 0.449191, 0.115272],\n                 [0.949562, 0.455660, 0.110164],\n                 [0.952075, 0.462178, 0.105031],\n                 [0.954506, 0.468744, 0.099874],\n                 [0.956852, 0.475356, 0.094695],\n                 [0.959114, 0.482014, 0.089499],\n                 [0.961293, 0.488716, 0.084289],\n                 [0.963387, 0.495462, 0.079073],\n                 [0.965397, 0.502249, 0.073859],\n                 [0.967322, 0.509078, 0.068659],\n                 [0.969163, 0.515946, 0.063488],\n                 [0.970919, 0.522853, 0.058367],\n                 [0.972590, 0.529798, 0.053324],\n                 [0.974176, 0.536780, 0.048392],\n                 [0.975677, 0.543798, 0.043618],\n                 [0.977092, 0.550850, 0.039050],\n                 [0.978422, 0.557937, 0.034931],\n                 [0.979666, 0.565057, 0.031409],\n                 [0.980824, 0.572209, 0.028508],\n                 [0.981895, 0.579392, 0.026250],\n                 [0.982881, 0.586606, 0.024661],\n                 [0.983779, 0.593849, 0.023770],\n                 [0.984591, 0.601122, 0.023606],\n                 [0.985315, 0.608422, 0.024202],\n                 [0.985952, 0.615750, 0.025592],\n                 [0.986502, 0.623105, 0.027814],\n                 [0.986964, 0.630485, 0.030908],\n                 [0.987337, 0.637890, 0.034916],\n                 [0.987622, 0.645320, 0.039886],\n                 [0.987819, 0.652773, 0.045581],\n                 [0.987926, 0.660250, 0.051750],\n                 [0.987945, 0.667748, 0.058329],\n                 [0.987874, 0.675267, 0.065257],\n                 [0.987714, 0.682807, 0.072489],\n                 [0.987464, 0.690366, 0.079990],\n                 [0.987124, 0.697944, 0.087731],\n                 [0.986694, 0.705540, 0.095694],\n                 [0.986175, 0.713153, 0.103863],\n                 [0.985566, 0.720782, 0.112229],\n                 [0.984865, 0.728427, 0.120785],\n                 [0.984075, 0.736087, 0.129527],\n                 [0.983196, 0.743758, 0.138453],\n                 [0.982228, 0.751442, 0.147565],\n                 [0.981173, 0.759135, 0.156863],\n                 [0.980032, 0.766837, 0.166353],\n                 [0.978806, 0.774545, 0.176037],\n                 [0.977497, 0.782258, 0.185923],\n                 [0.976108, 0.789974, 0.196018],\n                 [0.974638, 0.797692, 0.206332],\n                 [0.973088, 0.805409, 0.216877],\n                 [0.971468, 0.813122, 0.227658],\n                 [0.969783, 0.820825, 0.238686],\n                 [0.968041, 0.828515, 0.249972],\n                 [0.966243, 0.836191, 0.261534],\n                 [0.964394, 0.843848, 0.273391],\n                 [0.962517, 0.851476, 0.285546],\n                 [0.960626, 0.859069, 0.298010],\n                 [0.958720, 0.866624, 0.310820],\n                 [0.956834, 0.874129, 0.323974],\n                 [0.954997, 0.881569, 0.337475],\n                 [0.953215, 0.888942, 0.351369],\n                 [0.951546, 0.896226, 0.365627],\n                 [0.950018, 0.903409, 0.380271],\n                 [0.948683, 0.910473, 0.395289],\n                 [0.947594, 0.917399, 0.410665],\n                 [0.946809, 0.924168, 0.426373],\n                 [0.946392, 0.930761, 0.442367],\n                 [0.946403, 0.937159, 0.458592],\n                 [0.946903, 0.943348, 0.474970],\n                 [0.947937, 0.949318, 0.491426],\n                 [0.949545, 0.955063, 0.507860],\n                 [0.951740, 0.960587, 0.524203],\n                 [0.954529, 0.965896, 0.540361],\n                 [0.957896, 0.971003, 0.556275],\n                 [0.961812, 0.975924, 0.571925],\n                 [0.966249, 0.980678, 0.587206],\n                 [0.971162, 0.985282, 0.602154],\n                 [0.976511, 0.989753, 0.616760],\n                 [0.982257, 0.994109, 0.631017],\n                 [0.988362, 0.998364, 0.644924]]\ninferno = _mpl_cmdata_to_bokeh_palette(_inferno_data)\n\n# Copied from matplotlib/_cm_listed.py\n_viridis_data = [[0.267004, 0.004874, 0.329415],\n                 [0.268510, 0.009605, 0.335427],\n                 [0.269944, 0.014625, 0.341379],\n                 [0.271305, 0.019942, 0.347269],\n                 [0.272594, 0.025563, 0.353093],\n                 [0.273809, 0.031497, 0.358853],\n                 [0.274952, 0.037752, 0.364543],\n                 [0.276022, 0.044167, 0.370164],\n                 [0.277018, 0.050344, 0.375715],\n                 [0.277941, 0.056324, 0.381191],\n                 [0.278791, 0.062145, 0.386592],\n                 [0.279566, 0.067836, 0.391917],\n                 [0.280267, 0.073417, 0.397163],\n                 [0.280894, 0.078907, 0.402329],\n                 [0.281446, 0.084320, 0.407414],\n                 [0.281924, 0.089666, 0.412415],\n                 [0.282327, 0.094955, 0.417331],\n                 [0.282656, 0.100196, 0.422160],\n                 [0.282910, 0.105393, 0.426902],\n                 [0.283091, 0.110553, 0.431554],\n                 [0.283197, 0.115680, 0.436115],\n                 [0.283229, 0.120777, 0.440584],\n                 [0.283187, 0.125848, 0.444960],\n                 [0.283072, 0.130895, 0.449241],\n                 [0.282884, 0.135920, 0.453427],\n                 [0.282623, 0.140926, 0.457517],\n                 [0.282290, 0.145912, 0.461510],\n                 [0.281887, 0.150881, 0.465405],\n                 [0.281412, 0.155834, 0.469201],\n                 [0.280868, 0.160771, 0.472899],\n                 [0.280255, 0.165693, 0.476498],\n                 [0.279574, 0.170599, 0.479997],\n                 [0.278826, 0.175490, 0.483397],\n                 [0.278012, 0.180367, 0.486697],\n                 [0.277134, 0.185228, 0.489898],\n                 [0.276194, 0.190074, 0.493001],\n                 [0.275191, 0.194905, 0.496005],\n                 [0.274128, 0.199721, 0.498911],\n                 [0.273006, 0.204520, 0.501721],\n                 [0.271828, 0.209303, 0.504434],\n                 [0.270595, 0.214069, 0.507052],\n                 [0.269308, 0.218818, 0.509577],\n                 [0.267968, 0.223549, 0.512008],\n                 [0.266580, 0.228262, 0.514349],\n                 [0.265145, 0.232956, 0.516599],\n                 [0.263663, 0.237631, 0.518762],\n                 [0.262138, 0.242286, 0.520837],\n                 [0.260571, 0.246922, 0.522828],\n                 [0.258965, 0.251537, 0.524736],\n                 [0.257322, 0.256130, 0.526563],\n                 [0.255645, 0.260703, 0.528312],\n                 [0.253935, 0.265254, 0.529983],\n                 [0.252194, 0.269783, 0.531579],\n                 [0.250425, 0.274290, 0.533103],\n                 [0.248629, 0.278775, 0.534556],\n                 [0.246811, 0.283237, 0.535941],\n                 [0.244972, 0.287675, 0.537260],\n                 [0.243113, 0.292092, 0.538516],\n                 [0.241237, 0.296485, 0.539709],\n                 [0.239346, 0.300855, 0.540844],\n                 [0.237441, 0.305202, 0.541921],\n                 [0.235526, 0.309527, 0.542944],\n                 [0.233603, 0.313828, 0.543914],\n                 [0.231674, 0.318106, 0.544834],\n                 [0.229739, 0.322361, 0.545706],\n                 [0.227802, 0.326594, 0.546532],\n                 [0.225863, 0.330805, 0.547314],\n                 [0.223925, 0.334994, 0.548053],\n                 [0.221989, 0.339161, 0.548752],\n                 [0.220057, 0.343307, 0.549413],\n                 [0.218130, 0.347432, 0.550038],\n                 [0.216210, 0.351535, 0.550627],\n                 [0.214298, 0.355619, 0.551184],\n                 [0.212395, 0.359683, 0.551710],\n                 [0.210503, 0.363727, 0.552206],\n                 [0.208623, 0.367752, 0.552675],\n                 [0.206756, 0.371758, 0.553117],\n                 [0.204903, 0.375746, 0.553533],\n                 [0.203063, 0.379716, 0.553925],\n                 [0.201239, 0.383670, 0.554294],\n                 [0.199430, 0.387607, 0.554642],\n                 [0.197636, 0.391528, 0.554969],\n                 [0.195860, 0.395433, 0.555276],\n                 [0.194100, 0.399323, 0.555565],\n                 [0.192357, 0.403199, 0.555836],\n                 [0.190631, 0.407061, 0.556089],\n                 [0.188923, 0.410910, 0.556326],\n                 [0.187231, 0.414746, 0.556547],\n                 [0.185556, 0.418570, 0.556753],\n                 [0.183898, 0.422383, 0.556944],\n                 [0.182256, 0.426184, 0.557120],\n                 [0.180629, 0.429975, 0.557282],\n                 [0.179019, 0.433756, 0.557430],\n                 [0.177423, 0.437527, 0.557565],\n                 [0.175841, 0.441290, 0.557685],\n                 [0.174274, 0.445044, 0.557792],\n                 [0.172719, 0.448791, 0.557885],\n                 [0.171176, 0.452530, 0.557965],\n                 [0.169646, 0.456262, 0.558030],\n                 [0.168126, 0.459988, 0.558082],\n                 [0.166617, 0.463708, 0.558119],\n                 [0.165117, 0.467423, 0.558141],\n                 [0.163625, 0.471133, 0.558148],\n                 [0.162142, 0.474838, 0.558140],\n                 [0.160665, 0.478540, 0.558115],\n                 [0.159194, 0.482237, 0.558073],\n                 [0.157729, 0.485932, 0.558013],\n                 [0.156270, 0.489624, 0.557936],\n                 [0.154815, 0.493313, 0.557840],\n                 [0.153364, 0.497000, 0.557724],\n                 [0.151918, 0.500685, 0.557587],\n                 [0.150476, 0.504369, 0.557430],\n                 [0.149039, 0.508051, 0.557250],\n                 [0.147607, 0.511733, 0.557049],\n                 [0.146180, 0.515413, 0.556823],\n                 [0.144759, 0.519093, 0.556572],\n                 [0.143343, 0.522773, 0.556295],\n                 [0.141935, 0.526453, 0.555991],\n                 [0.140536, 0.530132, 0.555659],\n                 [0.139147, 0.533812, 0.555298],\n                 [0.137770, 0.537492, 0.554906],\n                 [0.136408, 0.541173, 0.554483],\n                 [0.135066, 0.544853, 0.554029],\n                 [0.133743, 0.548535, 0.553541],\n                 [0.132444, 0.552216, 0.553018],\n                 [0.131172, 0.555899, 0.552459],\n                 [0.129933, 0.559582, 0.551864],\n                 [0.128729, 0.563265, 0.551229],\n                 [0.127568, 0.566949, 0.550556],\n                 [0.126453, 0.570633, 0.549841],\n                 [0.125394, 0.574318, 0.549086],\n                 [0.124395, 0.578002, 0.548287],\n                 [0.123463, 0.581687, 0.547445],\n                 [0.122606, 0.585371, 0.546557],\n                 [0.121831, 0.589055, 0.545623],\n                 [0.121148, 0.592739, 0.544641],\n                 [0.120565, 0.596422, 0.543611],\n                 [0.120092, 0.600104, 0.542530],\n                 [0.119738, 0.603785, 0.541400],\n                 [0.119512, 0.607464, 0.540218],\n                 [0.119423, 0.611141, 0.538982],\n                 [0.119483, 0.614817, 0.537692],\n                 [0.119699, 0.618490, 0.536347],\n                 [0.120081, 0.622161, 0.534946],\n                 [0.120638, 0.625828, 0.533488],\n                 [0.121380, 0.629492, 0.531973],\n                 [0.122312, 0.633153, 0.530398],\n                 [0.123444, 0.636809, 0.528763],\n                 [0.124780, 0.640461, 0.527068],\n                 [0.126326, 0.644107, 0.525311],\n                 [0.128087, 0.647749, 0.523491],\n                 [0.130067, 0.651384, 0.521608],\n                 [0.132268, 0.655014, 0.519661],\n                 [0.134692, 0.658636, 0.517649],\n                 [0.137339, 0.662252, 0.515571],\n                 [0.140210, 0.665859, 0.513427],\n                 [0.143303, 0.669459, 0.511215],\n                 [0.146616, 0.673050, 0.508936],\n                 [0.150148, 0.676631, 0.506589],\n                 [0.153894, 0.680203, 0.504172],\n                 [0.157851, 0.683765, 0.501686],\n                 [0.162016, 0.687316, 0.499129],\n                 [0.166383, 0.690856, 0.496502],\n                 [0.170948, 0.694384, 0.493803],\n                 [0.175707, 0.697900, 0.491033],\n                 [0.180653, 0.701402, 0.488189],\n                 [0.185783, 0.704891, 0.485273],\n                 [0.191090, 0.708366, 0.482284],\n                 [0.196571, 0.711827, 0.479221],\n                 [0.202219, 0.715272, 0.476084],\n                 [0.208030, 0.718701, 0.472873],\n                 [0.214000, 0.722114, 0.469588],\n                 [0.220124, 0.725509, 0.466226],\n                 [0.226397, 0.728888, 0.462789],\n                 [0.232815, 0.732247, 0.459277],\n                 [0.239374, 0.735588, 0.455688],\n                 [0.246070, 0.738910, 0.452024],\n                 [0.252899, 0.742211, 0.448284],\n                 [0.259857, 0.745492, 0.444467],\n                 [0.266941, 0.748751, 0.440573],\n                 [0.274149, 0.751988, 0.436601],\n                 [0.281477, 0.755203, 0.432552],\n                 [0.288921, 0.758394, 0.428426],\n                 [0.296479, 0.761561, 0.424223],\n                 [0.304148, 0.764704, 0.419943],\n                 [0.311925, 0.767822, 0.415586],\n                 [0.319809, 0.770914, 0.411152],\n                 [0.327796, 0.773980, 0.406640],\n                 [0.335885, 0.777018, 0.402049],\n                 [0.344074, 0.780029, 0.397381],\n                 [0.352360, 0.783011, 0.392636],\n                 [0.360741, 0.785964, 0.387814],\n                 [0.369214, 0.788888, 0.382914],\n                 [0.377779, 0.791781, 0.377939],\n                 [0.386433, 0.794644, 0.372886],\n                 [0.395174, 0.797475, 0.367757],\n                 [0.404001, 0.800275, 0.362552],\n                 [0.412913, 0.803041, 0.357269],\n                 [0.421908, 0.805774, 0.351910],\n                 [0.430983, 0.808473, 0.346476],\n                 [0.440137, 0.811138, 0.340967],\n                 [0.449368, 0.813768, 0.335384],\n                 [0.458674, 0.816363, 0.329727],\n                 [0.468053, 0.818921, 0.323998],\n                 [0.477504, 0.821444, 0.318195],\n                 [0.487026, 0.823929, 0.312321],\n                 [0.496615, 0.826376, 0.306377],\n                 [0.506271, 0.828786, 0.300362],\n                 [0.515992, 0.831158, 0.294279],\n                 [0.525776, 0.833491, 0.288127],\n                 [0.535621, 0.835785, 0.281908],\n                 [0.545524, 0.838039, 0.275626],\n                 [0.555484, 0.840254, 0.269281],\n                 [0.565498, 0.842430, 0.262877],\n                 [0.575563, 0.844566, 0.256415],\n                 [0.585678, 0.846661, 0.249897],\n                 [0.595839, 0.848717, 0.243329],\n                 [0.606045, 0.850733, 0.236712],\n                 [0.616293, 0.852709, 0.230052],\n                 [0.626579, 0.854645, 0.223353],\n                 [0.636902, 0.856542, 0.216620],\n                 [0.647257, 0.858400, 0.209861],\n                 [0.657642, 0.860219, 0.203082],\n                 [0.668054, 0.861999, 0.196293],\n                 [0.678489, 0.863742, 0.189503],\n                 [0.688944, 0.865448, 0.182725],\n                 [0.699415, 0.867117, 0.175971],\n                 [0.709898, 0.868751, 0.169257],\n                 [0.720391, 0.870350, 0.162603],\n                 [0.730889, 0.871916, 0.156029],\n                 [0.741388, 0.873449, 0.149561],\n                 [0.751884, 0.874951, 0.143228],\n                 [0.762373, 0.876424, 0.137064],\n                 [0.772852, 0.877868, 0.131109],\n                 [0.783315, 0.879285, 0.125405],\n                 [0.793760, 0.880678, 0.120005],\n                 [0.804182, 0.882046, 0.114965],\n                 [0.814576, 0.883393, 0.110347],\n                 [0.824940, 0.884720, 0.106217],\n                 [0.835270, 0.886029, 0.102646],\n                 [0.845561, 0.887322, 0.099702],\n                 [0.855810, 0.888601, 0.097452],\n                 [0.866013, 0.889868, 0.095953],\n                 [0.876168, 0.891125, 0.095250],\n                 [0.886271, 0.892374, 0.095374],\n                 [0.896320, 0.893616, 0.096335],\n                 [0.906311, 0.894855, 0.098125],\n                 [0.916242, 0.896091, 0.100717],\n                 [0.926106, 0.897330, 0.104071],\n                 [0.935904, 0.898570, 0.108131],\n                 [0.945636, 0.899815, 0.112838],\n                 [0.955300, 0.901065, 0.118128],\n                 [0.964894, 0.902323, 0.123941],\n                 [0.974417, 0.903590, 0.130215],\n                 [0.983868, 0.904867, 0.136897],\n                 [0.993248, 0.906157, 0.143936]]\nviridis = _mpl_cmdata_to_bokeh_palette(_viridis_data)\n\n\ndef colormap_select(base_colormap, start=0, end=1.0, reverse=False):\n    \"\"\"\n    Given a colormap in the form of a list, such as a Bokeh palette,\n    return a version of the colormap reversed if requested, and selecting\n    a subset (on a scale 0,1.0) of the elements in the colormap list.\n\n    For instance:\n\n    >>> cmap = [\"#000000\", \"#969696\", \"#d9d9d9\", \"#ffffff\"]\n    >>> colormap_select(cmap,reverse=True)\n    ['#ffffff', '#d9d9d9', '#969696', '#000000']\n    >>> colormap_select(cmap,0.3,reverse=True)\n    ['#d9d9d9', '#969696', '#000000']\n    \"\"\"\n    full = list(reversed(base_colormap) if reverse else base_colormap)\n    num = len(full)\n    return full[int(start*num):int(end*num)]\n"
  },
  "GT_src_dict": {
    "datashader/colors.py": {
      "hex_to_rgb": {
        "code": "def hex_to_rgb(x):\n    \"\"\"Convert a hexadecimal color code to an RGB tuple.\n\nParameters\n----------\nx : str\n    A string representing a color in hexadecimal format, expected to start with '#' followed by six hexadecimal digits (e.g., '#FFFFFF').\n\nReturns\n-------\ntuple\n    A tuple containing three integers representing the RGB values (0-255) equivalent to the input hexadecimal color.\n\nRaises\n------\nValueError\n    If the input string does not match the expected format for a hexadecimal color code or contains invalid characters.\n\nNotes\n-----\nThis function is dependent on the format of hexadecimal color strings and assumes proper formatting. It processes the string directly by stripping the '#' character and converting each pair of hexadecimal digits to their decimal equivalent using base 16 conversion. Invalid inputs will raise a ValueError, ensuring that only correctly formatted hex color codes are accepted.\"\"\"\n    \"Convert a color hexcode to an rgb tuple.\\n\\n    Example\\n    -------\\n    >>> rgb('#FFFFFF')\\n    (255, 255, 255)\\n    \"\n    if not (x.startswith('#') and len(x) == 7):\n        raise ValueError('Invalid hex color')\n    x = x.strip('#')\n    try:\n        return (int(x[:2], 16), int(x[2:4], 16), int(x[4:], 16))\n    except ValueError:\n        raise ValueError('Invalid hex color')",
        "docstring": "Convert a hexadecimal color code to an RGB tuple.\n\nParameters\n----------\nx : str\n    A string representing a color in hexadecimal format, expected to start with '#' followed by six hexadecimal digits (e.g., '#FFFFFF').\n\nReturns\n-------\ntuple\n    A tuple containing three integers representing the RGB values (0-255) equivalent to the input hexadecimal color.\n\nRaises\n------\nValueError\n    If the input string does not match the expected format for a hexadecimal color code or contains invalid characters.\n\nNotes\n-----\nThis function is dependent on the format of hexadecimal color strings and assumes proper formatting. It processes the string directly by stripping the '#' character and converting each pair of hexadecimal digits to their decimal equivalent using base 16 conversion. Invalid inputs will raise a ValueError, ensuring that only correctly formatted hex color codes are accepted.",
        "signature": "def hex_to_rgb(x):",
        "type": "Function",
        "class_signature": null
      },
      "rgb": {
        "code": "def rgb(x):\n    \"\"\"Return a triple representing an RGB color or convert strings and tuples to RGB format.\n\nThe function can handle color inputs in three formats: a color name (string) that maps to its hex code via `color_lookup`, a hex color code (string), or a valid RGB tuple (3-tuple of integers). If a valid RGB tuple is passed, it is returned unchanged.\n\nParameters\n----------\nx : str, tuple\n    A color in one of the following formats:\n    - A string representing a color name (e.g., 'plum') mapped to a hex value in `color_lookup`.\n    - A hex color string (e.g., '#FFFFFF').\n    - A tuple containing three integers representing an RGB value (e.g., (255, 255, 255)).\n    \nReturns\n-------\ntuple\n    A tuple of three integers corresponding to the RGB values, where each integer is in the range of 0 to 255.\n\nRaises\n------\nValueError\n    If the input is a string that is neither a valid color name nor a valid hex color code, or if it fails to convert a RGB tuple due to values outside the expected range.\n\nTypeError\n    If the input is not a string or a tuple of length three.\n\nDependencies\n------------\nThis function relies on the `hex_to_rgb` function to convert hex strings to RGB tuples and uses the `color_lookup` dictionary, which maps color names to their corresponding hex codes. This enables easy conversion from named colors to RGB values.\"\"\"\n    \"Return a triple representing rgb color.\\n\\n    Can convert colors by name or hexcode. Passing in a valid rgb tuple is\\n    idempotent.\\n\\n    Example\\n    -------\\n    >>> rgb('plum')\\n    (221, 160, 221)\\n    >>> rgb('#FFFFFF')\\n    (255, 255, 255)\\n    >>> rgb((255, 255, 255))\\n    (255, 255, 255)\\n    \"\n    if isinstance(x, str):\n        if x.startswith('#'):\n            return hex_to_rgb(x)\n        elif x in color_lookup:\n            return hex_to_rgb(color_lookup[x])\n        else:\n            raise ValueError(\"Unknown color: '{0}'\".format(x))\n    elif isinstance(x, tuple) and len(x) == 3:\n        if min(x) < 0 or max(x) > 255:\n            raise ValueError('Invalid RGB tuple')\n    else:\n        raise TypeError(\"Don't know how to convert {0} to RGB\".format(x))\n    return x",
        "docstring": "Return a triple representing an RGB color or convert strings and tuples to RGB format.\n\nThe function can handle color inputs in three formats: a color name (string) that maps to its hex code via `color_lookup`, a hex color code (string), or a valid RGB tuple (3-tuple of integers). If a valid RGB tuple is passed, it is returned unchanged.\n\nParameters\n----------\nx : str, tuple\n    A color in one of the following formats:\n    - A string representing a color name (e.g., 'plum') mapped to a hex value in `color_lookup`.\n    - A hex color string (e.g., '#FFFFFF').\n    - A tuple containing three integers representing an RGB value (e.g., (255, 255, 255)).\n    \nReturns\n-------\ntuple\n    A tuple of three integers corresponding to the RGB values, where each integer is in the range of 0 to 255.\n\nRaises\n------\nValueError\n    If the input is a string that is neither a valid color name nor a valid hex color code, or if it fails to convert a RGB tuple due to values outside the expected range.\n\nTypeError\n    If the input is not a string or a tuple of length three.\n\nDependencies\n------------\nThis function relies on the `hex_to_rgb` function to convert hex strings to RGB tuples and uses the `color_lookup` dictionary, which maps color names to their corresponding hex codes. This enables easy conversion from named colors to RGB values.",
        "signature": "def rgb(x):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "datashader/colors.py:rgb": {}
  },
  "PRD": "# PROJECT NAME: datashader-test_colors\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 datashader/\n    \u2514\u2500\u2500 colors.py\n        \u251c\u2500\u2500 hex_to_rgb\n        \u2514\u2500\u2500 rgb\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for handling and converting color representations, specifically focusing on RGB and hexadecimal formats. It allows users to validate and transform color data, ensuring accurate conversion between hex codes, named colors, and RGB tuples while enforcing consistency and input correctness. By standardizing color processing, it simplifies the development of applications that depend on precise color manipulation, reducing errors and enabling seamless integration with systems requiring uniform color representations. This module is particularly valuable for developers working with visualizations, user interfaces, or any application where accurate color handling is essential.\n\n## FILE 1: datashader/colors.py\n\n- FUNCTION NAME: rgb\n  - SIGNATURE: def rgb(x):\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a triple representing an RGB color or convert strings and tuples to RGB format.\n\nThe function can handle color inputs in three formats: a color name (string) that maps to its hex code via `color_lookup`, a hex color code (string), or a valid RGB tuple (3-tuple of integers). If a valid RGB tuple is passed, it is returned unchanged.\n\nParameters\n----------\nx : str, tuple\n    A color in one of the following formats:\n    - A string representing a color name (e.g., 'plum') mapped to a hex value in `color_lookup`.\n    - A hex color string (e.g., '#FFFFFF').\n    - A tuple containing three integers representing an RGB value (e.g., (255, 255, 255)).\n    \nReturns\n-------\ntuple\n    A tuple of three integers corresponding to the RGB values, where each integer is in the range of 0 to 255.\n\nRaises\n------\nValueError\n    If the input is a string that is neither a valid color name nor a valid hex color code, or if it fails to convert a RGB tuple due to values outside the expected range.\n\nTypeError\n    If the input is not a string or a tuple of length three.\n\nDependencies\n------------\nThis function relies on the `hex_to_rgb` function to convert hex strings to RGB tuples and uses the `color_lookup` dictionary, which maps color names to their corresponding hex codes. This enables easy conversion from named colors to RGB values.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - datashader/colors.py:hex_to_rgb\n\n- FUNCTION NAME: hex_to_rgb\n  - SIGNATURE: def hex_to_rgb(x):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a hexadecimal color code to an RGB tuple.\n\nParameters\n----------\nx : str\n    A string representing a color in hexadecimal format, expected to start with '#' followed by six hexadecimal digits (e.g., '#FFFFFF').\n\nReturns\n-------\ntuple\n    A tuple containing three integers representing the RGB values (0-255) equivalent to the input hexadecimal color.\n\nRaises\n------\nValueError\n    If the input string does not match the expected format for a hexadecimal color code or contains invalid characters.\n\nNotes\n-----\nThis function is dependent on the format of hexadecimal color strings and assumes proper formatting. It processes the string directly by stripping the '#' character and converting each pair of hexadecimal digits to their decimal equivalent using base 16 conversion. Invalid inputs will raise a ValueError, ensuring that only correctly formatted hex color codes are accepted.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "datashader/colors.py": "from __future__ import annotations\ncolor_lookup = {'aliceblue': '#F0F8FF', 'antiquewhite': '#FAEBD7', 'aqua': '#00FFFF', 'aquamarine': '#7FFFD4', 'azure': '#F0FFFF', 'beige': '#F5F5DC', 'bisque': '#FFE4C4', 'black': '#000000', 'blanchedalmond': '#FFEBCD', 'blue': '#0000FF', 'blueviolet': '#8A2BE2', 'brown': '#A52A2A', 'burlywood': '#DEB887', 'cadetblue': '#5F9EA0', 'chartreuse': '#7FFF00', 'chocolate': '#D2691E', 'coral': '#FF7F50', 'cornflowerblue': '#6495ED', 'cornsilk': '#FFF8DC', 'crimson': '#DC143C', 'cyan': '#00FFFF', 'darkblue': '#00008B', 'darkcyan': '#008B8B', 'darkgoldenrod': '#B8860B', 'darkgray': '#A9A9A9', 'darkgreen': '#006400', 'darkgrey': '#A9A9A9', 'darkkhaki': '#BDB76B', 'darkmagenta': '#8B008B', 'darkolivegreen': '#556B2F', 'darkorange': '#FF8C00', 'darkorchid': '#9932CC', 'darkred': '#8B0000', 'darksage': '#598556', 'darksalmon': '#E9967A', 'darkseagreen': '#8FBC8F', 'darkslateblue': '#483D8B', 'darkslategray': '#2F4F4F', 'darkslategrey': '#2F4F4F', 'darkturquoise': '#00CED1', 'darkviolet': '#9400D3', 'deeppink': '#FF1493', 'deepskyblue': '#00BFFF', 'dimgray': '#696969', 'dimgrey': '#696969', 'dodgerblue': '#1E90FF', 'firebrick': '#B22222', 'floralwhite': '#FFFAF0', 'forestgreen': '#228B22', 'fuchsia': '#FF00FF', 'gainsboro': '#DCDCDC', 'ghostwhite': '#F8F8FF', 'gold': '#FFD700', 'goldenrod': '#DAA520', 'gray': '#808080', 'green': '#008000', 'greenyellow': '#ADFF2F', 'grey': '#808080', 'honeydew': '#F0FFF0', 'hotpink': '#FF69B4', 'indianred': '#CD5C5C', 'indigo': '#4B0082', 'ivory': '#FFFFF0', 'khaki': '#F0E68C', 'lavender': '#E6E6FA', 'lavenderblush': '#FFF0F5', 'lawngreen': '#7CFC00', 'lemonchiffon': '#FFFACD', 'lightblue': '#ADD8E6', 'lightcoral': '#F08080', 'lightcyan': '#E0FFFF', 'lightgoldenrodyellow': '#FAFAD2', 'lightgray': '#D3D3D3', 'lightgreen': '#90EE90', 'lightgrey': '#D3D3D3', 'lightpink': '#FFB6C1', 'lightsage': '#BCECAC', 'lightsalmon': '#FFA07A', 'lightseagreen': '#20B2AA', 'lightskyblue': '#87CEFA', 'lightslategray': '#778899', 'lightslategrey': '#778899', 'lightsteelblue': '#B0C4DE', 'lightyellow': '#FFFFE0', 'lime': '#00FF00', 'limegreen': '#32CD32', 'linen': '#FAF0E6', 'magenta': '#FF00FF', 'maroon': '#800000', 'mediumaquamarine': '#66CDAA', 'mediumblue': '#0000CD', 'mediumorchid': '#BA55D3', 'mediumpurple': '#9370DB', 'mediumseagreen': '#3CB371', 'mediumslateblue': '#7B68EE', 'mediumspringgreen': '#00FA9A', 'mediumturquoise': '#48D1CC', 'mediumvioletred': '#C71585', 'midnightblue': '#191970', 'mintcream': '#F5FFFA', 'mistyrose': '#FFE4E1', 'moccasin': '#FFE4B5', 'navajowhite': '#FFDEAD', 'navy': '#000080', 'oldlace': '#FDF5E6', 'olive': '#808000', 'olivedrab': '#6B8E23', 'orange': '#FFA500', 'orangered': '#FF4500', 'orchid': '#DA70D6', 'palegoldenrod': '#EEE8AA', 'palegreen': '#98FB98', 'paleturquoise': '#AFEEEE', 'palevioletred': '#DB7093', 'papayawhip': '#FFEFD5', 'peachpuff': '#FFDAB9', 'peru': '#CD853F', 'pink': '#FFC0CB', 'plum': '#DDA0DD', 'powderblue': '#B0E0E6', 'purple': '#800080', 'red': '#FF0000', 'rosybrown': '#BC8F8F', 'royalblue': '#4169E1', 'saddlebrown': '#8B4513', 'sage': '#87AE73', 'salmon': '#FA8072', 'sandybrown': '#FAA460', 'seagreen': '#2E8B57', 'seashell': '#FFF5EE', 'sienna': '#A0522D', 'silver': '#C0C0C0', 'skyblue': '#87CEEB', 'slateblue': '#6A5ACD', 'slategray': '#708090', 'slategrey': '#708090', 'snow': '#FFFAFA', 'springgreen': '#00FF7F', 'steelblue': '#4682B4', 'tan': '#D2B48C', 'teal': '#008080', 'thistle': '#D8BFD8', 'tomato': '#FF6347', 'turquoise': '#40E0D0', 'violet': '#EE82EE', 'wheat': '#F5DEB3', 'white': '#FFFFFF', 'whitesmoke': '#F5F5F5', 'yellow': '#FFFF00', 'yellowgreen': '#9ACD32'}\nGreys9 = ['#000000', '#252525', '#525252', '#737373', '#969696', '#bdbdbd', '#d9d9d9', '#f0f0f0', '#ffffff']\nHot = ['black', 'maroon', 'darkred', 'red', 'orangered', 'darkorange', 'orange', 'gold', 'yellow', 'white']\nElevation = ['aqua', 'sandybrown', 'limegreen', 'green', 'green', 'darkgreen', 'saddlebrown', 'gray', 'white']\nSet1 = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999']\nSet2 = ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3']\nSet3 = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f']\nSets1to3 = Set1 + Set2[0:3] + Set2[4:7] + Set3[1:2] + Set3[3:4] + Set3[5:6] + Set3[7:9] + Set3[10:]\n\ndef _mpl_cmdata_to_bokeh_palette(cm_data):\n    \"\"\"Given the data from a Matplotlib colormap as a list of three-item lists in the range 0,1.0,\n    convert colors into the range 0,256 and return as a list of tuples\"\"\"\n    return [(int(r * 256), int(g * 256), int(b * 256)) for r, g, b in cm_data]\n_inferno_data = [[0.001462, 0.000466, 0.013866], [0.002267, 0.00127, 0.01857], [0.003299, 0.002249, 0.024239], [0.004547, 0.003392, 0.030909], [0.006006, 0.004692, 0.038558], [0.007676, 0.006136, 0.046836], [0.009561, 0.007713, 0.055143], [0.011663, 0.009417, 0.06346], [0.013995, 0.011225, 0.071862], [0.016561, 0.013136, 0.080282], [0.019373, 0.015133, 0.088767], [0.022447, 0.017199, 0.097327], [0.025793, 0.019331, 0.10593], [0.029432, 0.021503, 0.114621], [0.033385, 0.023702, 0.123397], [0.037668, 0.025921, 0.132232], [0.042253, 0.028139, 0.141141], [0.046915, 0.030324, 0.150164], [0.051644, 0.032474, 0.159254], [0.056449, 0.034569, 0.168414], [0.06134, 0.03659, 0.177642], [0.066331, 0.038504, 0.186962], [0.071429, 0.040294, 0.196354], [0.076637, 0.041905, 0.205799], [0.081962, 0.043328, 0.215289], [0.087411, 0.044556, 0.224813], [0.09299, 0.045583, 0.234358], [0.098702, 0.046402, 0.243904], [0.104551, 0.047008, 0.25343], [0.110536, 0.047399, 0.262912], [0.116656, 0.047574, 0.272321], [0.122908, 0.047536, 0.281624], [0.129285, 0.047293, 0.290788], [0.135778, 0.046856, 0.299776], [0.142378, 0.046242, 0.308553], [0.149073, 0.045468, 0.317085], [0.15585, 0.044559, 0.325338], [0.162689, 0.043554, 0.333277], [0.169575, 0.042489, 0.340874], [0.176493, 0.041402, 0.348111], [0.183429, 0.040329, 0.354971], [0.190367, 0.039309, 0.361447], [0.197297, 0.0384, 0.367535], [0.204209, 0.037632, 0.373238], [0.211095, 0.03703, 0.378563], [0.217949, 0.036615, 0.383522], [0.224763, 0.036405, 0.388129], [0.231538, 0.036405, 0.3924], [0.238273, 0.036621, 0.396353], [0.244967, 0.037055, 0.400007], [0.25162, 0.037705, 0.403378], [0.258234, 0.038571, 0.406485], [0.26481, 0.039647, 0.409345], [0.271347, 0.040922, 0.411976], [0.27785, 0.042353, 0.414392], [0.284321, 0.043933, 0.416608], [0.290763, 0.045644, 0.418637], [0.297178, 0.04747, 0.420491], [0.303568, 0.049396, 0.422182], [0.309935, 0.051407, 0.423721], [0.316282, 0.05349, 0.425116], [0.32261, 0.055634, 0.426377], [0.328921, 0.057827, 0.427511], [0.335217, 0.06006, 0.428524], [0.3415, 0.062325, 0.429425], [0.347771, 0.064616, 0.430217], [0.354032, 0.066925, 0.430906], [0.360284, 0.069247, 0.431497], [0.366529, 0.071579, 0.431994], [0.372768, 0.073915, 0.4324], [0.379001, 0.076253, 0.432719], [0.385228, 0.078591, 0.432955], [0.391453, 0.080927, 0.433109], [0.397674, 0.083257, 0.433183], [0.403894, 0.08558, 0.433179], [0.410113, 0.087896, 0.433098], [0.416331, 0.090203, 0.432943], [0.422549, 0.092501, 0.432714], [0.428768, 0.09479, 0.432412], [0.434987, 0.097069, 0.432039], [0.441207, 0.099338, 0.431594], [0.447428, 0.101597, 0.43108], [0.453651, 0.103848, 0.430498], [0.459875, 0.106089, 0.429846], [0.4661, 0.108322, 0.429125], [0.472328, 0.110547, 0.428334], [0.478558, 0.112764, 0.427475], [0.484789, 0.114974, 0.426548], [0.491022, 0.117179, 0.425552], [0.497257, 0.119379, 0.424488], [0.503493, 0.121575, 0.423356], [0.50973, 0.123769, 0.422156], [0.515967, 0.12596, 0.420887], [0.522206, 0.12815, 0.419549], [0.528444, 0.130341, 0.418142], [0.534683, 0.132534, 0.416667], [0.54092, 0.134729, 0.415123], [0.547157, 0.136929, 0.413511], [0.553392, 0.139134, 0.411829], [0.559624, 0.141346, 0.410078], [0.565854, 0.143567, 0.408258], [0.572081, 0.145797, 0.406369], [0.578304, 0.148039, 0.404411], [0.584521, 0.150294, 0.402385], [0.590734, 0.152563, 0.40029], [0.59694, 0.154848, 0.398125], [0.603139, 0.157151, 0.395891], [0.60933, 0.159474, 0.393589], [0.615513, 0.161817, 0.391219], [0.621685, 0.164184, 0.388781], [0.627847, 0.166575, 0.386276], [0.633998, 0.168992, 0.383704], [0.640135, 0.171438, 0.381065], [0.64626, 0.173914, 0.378359], [0.652369, 0.176421, 0.375586], [0.658463, 0.178962, 0.372748], [0.66454, 0.181539, 0.369846], [0.670599, 0.184153, 0.366879], [0.676638, 0.186807, 0.363849], [0.682656, 0.189501, 0.360757], [0.688653, 0.192239, 0.357603], [0.694627, 0.195021, 0.354388], [0.700576, 0.197851, 0.351113], [0.7065, 0.200728, 0.347777], [0.712396, 0.203656, 0.344383], [0.718264, 0.206636, 0.340931], [0.724103, 0.20967, 0.337424], [0.729909, 0.212759, 0.333861], [0.735683, 0.215906, 0.330245], [0.741423, 0.219112, 0.326576], [0.747127, 0.222378, 0.322856], [0.752794, 0.225706, 0.319085], [0.758422, 0.229097, 0.315266], [0.76401, 0.232554, 0.311399], [0.769556, 0.236077, 0.307485], [0.775059, 0.239667, 0.303526], [0.780517, 0.243327, 0.299523], [0.785929, 0.247056, 0.295477], [0.791293, 0.250856, 0.29139], [0.796607, 0.254728, 0.287264], [0.801871, 0.258674, 0.283099], [0.807082, 0.262692, 0.278898], [0.812239, 0.266786, 0.274661], [0.817341, 0.270954, 0.27039], [0.822386, 0.275197, 0.266085], [0.827372, 0.279517, 0.26175], [0.832299, 0.283913, 0.257383], [0.837165, 0.288385, 0.252988], [0.841969, 0.292933, 0.248564], [0.846709, 0.297559, 0.244113], [0.851384, 0.30226, 0.239636], [0.855992, 0.307038, 0.235133], [0.860533, 0.311892, 0.230606], [0.865006, 0.316822, 0.226055], [0.869409, 0.321827, 0.221482], [0.873741, 0.326906, 0.216886], [0.878001, 0.33206, 0.212268], [0.882188, 0.337287, 0.207628], [0.886302, 0.342586, 0.202968], [0.890341, 0.347957, 0.198286], [0.894305, 0.353399, 0.193584], [0.898192, 0.358911, 0.18886], [0.902003, 0.364492, 0.184116], [0.905735, 0.37014, 0.17935], [0.90939, 0.375856, 0.174563], [0.912966, 0.381636, 0.169755], [0.916462, 0.387481, 0.164924], [0.919879, 0.393389, 0.16007], [0.923215, 0.399359, 0.155193], [0.92647, 0.405389, 0.150292], [0.929644, 0.411479, 0.145367], [0.932737, 0.417627, 0.140417], [0.935747, 0.423831, 0.13544], [0.938675, 0.430091, 0.130438], [0.941521, 0.436405, 0.125409], [0.944285, 0.442772, 0.120354], [0.946965, 0.449191, 0.115272], [0.949562, 0.45566, 0.110164], [0.952075, 0.462178, 0.105031], [0.954506, 0.468744, 0.099874], [0.956852, 0.475356, 0.094695], [0.959114, 0.482014, 0.089499], [0.961293, 0.488716, 0.084289], [0.963387, 0.495462, 0.079073], [0.965397, 0.502249, 0.073859], [0.967322, 0.509078, 0.068659], [0.969163, 0.515946, 0.063488], [0.970919, 0.522853, 0.058367], [0.97259, 0.529798, 0.053324], [0.974176, 0.53678, 0.048392], [0.975677, 0.543798, 0.043618], [0.977092, 0.55085, 0.03905], [0.978422, 0.557937, 0.034931], [0.979666, 0.565057, 0.031409], [0.980824, 0.572209, 0.028508], [0.981895, 0.579392, 0.02625], [0.982881, 0.586606, 0.024661], [0.983779, 0.593849, 0.02377], [0.984591, 0.601122, 0.023606], [0.985315, 0.608422, 0.024202], [0.985952, 0.61575, 0.025592], [0.986502, 0.623105, 0.027814], [0.986964, 0.630485, 0.030908], [0.987337, 0.63789, 0.034916], [0.987622, 0.64532, 0.039886], [0.987819, 0.652773, 0.045581], [0.987926, 0.66025, 0.05175], [0.987945, 0.667748, 0.058329], [0.987874, 0.675267, 0.065257], [0.987714, 0.682807, 0.072489], [0.987464, 0.690366, 0.07999], [0.987124, 0.697944, 0.087731], [0.986694, 0.70554, 0.095694], [0.986175, 0.713153, 0.103863], [0.985566, 0.720782, 0.112229], [0.984865, 0.728427, 0.120785], [0.984075, 0.736087, 0.129527], [0.983196, 0.743758, 0.138453], [0.982228, 0.751442, 0.147565], [0.981173, 0.759135, 0.156863], [0.980032, 0.766837, 0.166353], [0.978806, 0.774545, 0.176037], [0.977497, 0.782258, 0.185923], [0.976108, 0.789974, 0.196018], [0.974638, 0.797692, 0.206332], [0.973088, 0.805409, 0.216877], [0.971468, 0.813122, 0.227658], [0.969783, 0.820825, 0.238686], [0.968041, 0.828515, 0.249972], [0.966243, 0.836191, 0.261534], [0.964394, 0.843848, 0.273391], [0.962517, 0.851476, 0.285546], [0.960626, 0.859069, 0.29801], [0.95872, 0.866624, 0.31082], [0.956834, 0.874129, 0.323974], [0.954997, 0.881569, 0.337475], [0.953215, 0.888942, 0.351369], [0.951546, 0.896226, 0.365627], [0.950018, 0.903409, 0.380271], [0.948683, 0.910473, 0.395289], [0.947594, 0.917399, 0.410665], [0.946809, 0.924168, 0.426373], [0.946392, 0.930761, 0.442367], [0.946403, 0.937159, 0.458592], [0.946903, 0.943348, 0.47497], [0.947937, 0.949318, 0.491426], [0.949545, 0.955063, 0.50786], [0.95174, 0.960587, 0.524203], [0.954529, 0.965896, 0.540361], [0.957896, 0.971003, 0.556275], [0.961812, 0.975924, 0.571925], [0.966249, 0.980678, 0.587206], [0.971162, 0.985282, 0.602154], [0.976511, 0.989753, 0.61676], [0.982257, 0.994109, 0.631017], [0.988362, 0.998364, 0.644924]]\ninferno = _mpl_cmdata_to_bokeh_palette(_inferno_data)\n_viridis_data = [[0.267004, 0.004874, 0.329415], [0.26851, 0.009605, 0.335427], [0.269944, 0.014625, 0.341379], [0.271305, 0.019942, 0.347269], [0.272594, 0.025563, 0.353093], [0.273809, 0.031497, 0.358853], [0.274952, 0.037752, 0.364543], [0.276022, 0.044167, 0.370164], [0.277018, 0.050344, 0.375715], [0.277941, 0.056324, 0.381191], [0.278791, 0.062145, 0.386592], [0.279566, 0.067836, 0.391917], [0.280267, 0.073417, 0.397163], [0.280894, 0.078907, 0.402329], [0.281446, 0.08432, 0.407414], [0.281924, 0.089666, 0.412415], [0.282327, 0.094955, 0.417331], [0.282656, 0.100196, 0.42216], [0.28291, 0.105393, 0.426902], [0.283091, 0.110553, 0.431554], [0.283197, 0.11568, 0.436115], [0.283229, 0.120777, 0.440584], [0.283187, 0.125848, 0.44496], [0.283072, 0.130895, 0.449241], [0.282884, 0.13592, 0.453427], [0.282623, 0.140926, 0.457517], [0.28229, 0.145912, 0.46151], [0.281887, 0.150881, 0.465405], [0.281412, 0.155834, 0.469201], [0.280868, 0.160771, 0.472899], [0.280255, 0.165693, 0.476498], [0.279574, 0.170599, 0.479997], [0.278826, 0.17549, 0.483397], [0.278012, 0.180367, 0.486697], [0.277134, 0.185228, 0.489898], [0.276194, 0.190074, 0.493001], [0.275191, 0.194905, 0.496005], [0.274128, 0.199721, 0.498911], [0.273006, 0.20452, 0.501721], [0.271828, 0.209303, 0.504434], [0.270595, 0.214069, 0.507052], [0.269308, 0.218818, 0.509577], [0.267968, 0.223549, 0.512008], [0.26658, 0.228262, 0.514349], [0.265145, 0.232956, 0.516599], [0.263663, 0.237631, 0.518762], [0.262138, 0.242286, 0.520837], [0.260571, 0.246922, 0.522828], [0.258965, 0.251537, 0.524736], [0.257322, 0.25613, 0.526563], [0.255645, 0.260703, 0.528312], [0.253935, 0.265254, 0.529983], [0.252194, 0.269783, 0.531579], [0.250425, 0.27429, 0.533103], [0.248629, 0.278775, 0.534556], [0.246811, 0.283237, 0.535941], [0.244972, 0.287675, 0.53726], [0.243113, 0.292092, 0.538516], [0.241237, 0.296485, 0.539709], [0.239346, 0.300855, 0.540844], [0.237441, 0.305202, 0.541921], [0.235526, 0.309527, 0.542944], [0.233603, 0.313828, 0.543914], [0.231674, 0.318106, 0.544834], [0.229739, 0.322361, 0.545706], [0.227802, 0.326594, 0.546532], [0.225863, 0.330805, 0.547314], [0.223925, 0.334994, 0.548053], [0.221989, 0.339161, 0.548752], [0.220057, 0.343307, 0.549413], [0.21813, 0.347432, 0.550038], [0.21621, 0.351535, 0.550627], [0.214298, 0.355619, 0.551184], [0.212395, 0.359683, 0.55171], [0.210503, 0.363727, 0.552206], [0.208623, 0.367752, 0.552675], [0.206756, 0.371758, 0.553117], [0.204903, 0.375746, 0.553533], [0.203063, 0.379716, 0.553925], [0.201239, 0.38367, 0.554294], [0.19943, 0.387607, 0.554642], [0.197636, 0.391528, 0.554969], [0.19586, 0.395433, 0.555276], [0.1941, 0.399323, 0.555565], [0.192357, 0.403199, 0.555836], [0.190631, 0.407061, 0.556089], [0.188923, 0.41091, 0.556326], [0.187231, 0.414746, 0.556547], [0.185556, 0.41857, 0.556753], [0.183898, 0.422383, 0.556944], [0.182256, 0.426184, 0.55712], [0.180629, 0.429975, 0.557282], [0.179019, 0.433756, 0.55743], [0.177423, 0.437527, 0.557565], [0.175841, 0.44129, 0.557685], [0.174274, 0.445044, 0.557792], [0.172719, 0.448791, 0.557885], [0.171176, 0.45253, 0.557965], [0.169646, 0.456262, 0.55803], [0.168126, 0.459988, 0.558082], [0.166617, 0.463708, 0.558119], [0.165117, 0.467423, 0.558141], [0.163625, 0.471133, 0.558148], [0.162142, 0.474838, 0.55814], [0.160665, 0.47854, 0.558115], [0.159194, 0.482237, 0.558073], [0.157729, 0.485932, 0.558013], [0.15627, 0.489624, 0.557936], [0.154815, 0.493313, 0.55784], [0.153364, 0.497, 0.557724], [0.151918, 0.500685, 0.557587], [0.150476, 0.504369, 0.55743], [0.149039, 0.508051, 0.55725], [0.147607, 0.511733, 0.557049], [0.14618, 0.515413, 0.556823], [0.144759, 0.519093, 0.556572], [0.143343, 0.522773, 0.556295], [0.141935, 0.526453, 0.555991], [0.140536, 0.530132, 0.555659], [0.139147, 0.533812, 0.555298], [0.13777, 0.537492, 0.554906], [0.136408, 0.541173, 0.554483], [0.135066, 0.544853, 0.554029], [0.133743, 0.548535, 0.553541], [0.132444, 0.552216, 0.553018], [0.131172, 0.555899, 0.552459], [0.129933, 0.559582, 0.551864], [0.128729, 0.563265, 0.551229], [0.127568, 0.566949, 0.550556], [0.126453, 0.570633, 0.549841], [0.125394, 0.574318, 0.549086], [0.124395, 0.578002, 0.548287], [0.123463, 0.581687, 0.547445], [0.122606, 0.585371, 0.546557], [0.121831, 0.589055, 0.545623], [0.121148, 0.592739, 0.544641], [0.120565, 0.596422, 0.543611], [0.120092, 0.600104, 0.54253], [0.119738, 0.603785, 0.5414], [0.119512, 0.607464, 0.540218], [0.119423, 0.611141, 0.538982], [0.119483, 0.614817, 0.537692], [0.119699, 0.61849, 0.536347], [0.120081, 0.622161, 0.534946], [0.120638, 0.625828, 0.533488], [0.12138, 0.629492, 0.531973], [0.122312, 0.633153, 0.530398], [0.123444, 0.636809, 0.528763], [0.12478, 0.640461, 0.527068], [0.126326, 0.644107, 0.525311], [0.128087, 0.647749, 0.523491], [0.130067, 0.651384, 0.521608], [0.132268, 0.655014, 0.519661], [0.134692, 0.658636, 0.517649], [0.137339, 0.662252, 0.515571], [0.14021, 0.665859, 0.513427], [0.143303, 0.669459, 0.511215], [0.146616, 0.67305, 0.508936], [0.150148, 0.676631, 0.506589], [0.153894, 0.680203, 0.504172], [0.157851, 0.683765, 0.501686], [0.162016, 0.687316, 0.499129], [0.166383, 0.690856, 0.496502], [0.170948, 0.694384, 0.493803], [0.175707, 0.6979, 0.491033], [0.180653, 0.701402, 0.488189], [0.185783, 0.704891, 0.485273], [0.19109, 0.708366, 0.482284], [0.196571, 0.711827, 0.479221], [0.202219, 0.715272, 0.476084], [0.20803, 0.718701, 0.472873], [0.214, 0.722114, 0.469588], [0.220124, 0.725509, 0.466226], [0.226397, 0.728888, 0.462789], [0.232815, 0.732247, 0.459277], [0.239374, 0.735588, 0.455688], [0.24607, 0.73891, 0.452024], [0.252899, 0.742211, 0.448284], [0.259857, 0.745492, 0.444467], [0.266941, 0.748751, 0.440573], [0.274149, 0.751988, 0.436601], [0.281477, 0.755203, 0.432552], [0.288921, 0.758394, 0.428426], [0.296479, 0.761561, 0.424223], [0.304148, 0.764704, 0.419943], [0.311925, 0.767822, 0.415586], [0.319809, 0.770914, 0.411152], [0.327796, 0.77398, 0.40664], [0.335885, 0.777018, 0.402049], [0.344074, 0.780029, 0.397381], [0.35236, 0.783011, 0.392636], [0.360741, 0.785964, 0.387814], [0.369214, 0.788888, 0.382914], [0.377779, 0.791781, 0.377939], [0.386433, 0.794644, 0.372886], [0.395174, 0.797475, 0.367757], [0.404001, 0.800275, 0.362552], [0.412913, 0.803041, 0.357269], [0.421908, 0.805774, 0.35191], [0.430983, 0.808473, 0.346476], [0.440137, 0.811138, 0.340967], [0.449368, 0.813768, 0.335384], [0.458674, 0.816363, 0.329727], [0.468053, 0.818921, 0.323998], [0.477504, 0.821444, 0.318195], [0.487026, 0.823929, 0.312321], [0.496615, 0.826376, 0.306377], [0.506271, 0.828786, 0.300362], [0.515992, 0.831158, 0.294279], [0.525776, 0.833491, 0.288127], [0.535621, 0.835785, 0.281908], [0.545524, 0.838039, 0.275626], [0.555484, 0.840254, 0.269281], [0.565498, 0.84243, 0.262877], [0.575563, 0.844566, 0.256415], [0.585678, 0.846661, 0.249897], [0.595839, 0.848717, 0.243329], [0.606045, 0.850733, 0.236712], [0.616293, 0.852709, 0.230052], [0.626579, 0.854645, 0.223353], [0.636902, 0.856542, 0.21662], [0.647257, 0.8584, 0.209861], [0.657642, 0.860219, 0.203082], [0.668054, 0.861999, 0.196293], [0.678489, 0.863742, 0.189503], [0.688944, 0.865448, 0.182725], [0.699415, 0.867117, 0.175971], [0.709898, 0.868751, 0.169257], [0.720391, 0.87035, 0.162603], [0.730889, 0.871916, 0.156029], [0.741388, 0.873449, 0.149561], [0.751884, 0.874951, 0.143228], [0.762373, 0.876424, 0.137064], [0.772852, 0.877868, 0.131109], [0.783315, 0.879285, 0.125405], [0.79376, 0.880678, 0.120005], [0.804182, 0.882046, 0.114965], [0.814576, 0.883393, 0.110347], [0.82494, 0.88472, 0.106217], [0.83527, 0.886029, 0.102646], [0.845561, 0.887322, 0.099702], [0.85581, 0.888601, 0.097452], [0.866013, 0.889868, 0.095953], [0.876168, 0.891125, 0.09525], [0.886271, 0.892374, 0.095374], [0.89632, 0.893616, 0.096335], [0.906311, 0.894855, 0.098125], [0.916242, 0.896091, 0.100717], [0.926106, 0.89733, 0.104071], [0.935904, 0.89857, 0.108131], [0.945636, 0.899815, 0.112838], [0.9553, 0.901065, 0.118128], [0.964894, 0.902323, 0.123941], [0.974417, 0.90359, 0.130215], [0.983868, 0.904867, 0.136897], [0.993248, 0.906157, 0.143936]]\nviridis = _mpl_cmdata_to_bokeh_palette(_viridis_data)\n\ndef colormap_select(base_colormap, start=0, end=1.0, reverse=False):\n    \"\"\"\n    Given a colormap in the form of a list, such as a Bokeh palette,\n    return a version of the colormap reversed if requested, and selecting\n    a subset (on a scale 0,1.0) of the elements in the colormap list.\n\n    For instance:\n\n    >>> cmap = [\"#000000\", \"#969696\", \"#d9d9d9\", \"#ffffff\"]\n    >>> colormap_select(cmap,reverse=True)\n    ['#ffffff', '#d9d9d9', '#969696', '#000000']\n    >>> colormap_select(cmap,0.3,reverse=True)\n    ['#d9d9d9', '#969696', '#000000']\n    \"\"\"\n    full = list(reversed(base_colormap) if reverse else base_colormap)\n    num = len(full)\n    return full[int(start * num):int(end * num)]"
  },
  "call_tree": {
    "datashader/tests/test_colors.py:test_hex_to_rgb": {
      "datashader/colors.py:hex_to_rgb": {}
    },
    "datashader/tests/test_colors.py:test_rgb": {
      "datashader/colors.py:rgb": {
        "datashader/colors.py:hex_to_rgb": {}
      }
    }
  }
}