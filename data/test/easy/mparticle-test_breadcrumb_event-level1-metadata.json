{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_breadcrumb_event",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_breadcrumb_event.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.breadcrumb_event import BreadcrumbEvent\n\n\nclass TestBreadcrumbEvent(unittest.TestCase):\n    \"\"\" BreadcrumbEvent unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testBreadcrumbEvent(self):\n        \"\"\"\n        Test BreadcrumbEvent\n        \"\"\"\n        model = mparticle.models.breadcrumb_event.BreadcrumbEvent()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/breadcrumb_event.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass BreadcrumbEvent(object):\n\n    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, session_number=None, label=None):\n        \"\"\"\n        BreadcrumbEvent - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n            'session_number': 'int',\n            'label': 'str'\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n            'session_number': 'session_number',\n            'label': 'label'\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._session_number = session_number\n        self._label = label\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this BreadcrumbEvent.\n\n\n        :return: The timestamp_unixtime_ms of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this BreadcrumbEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this BreadcrumbEvent.\n\n\n        :return: The event_id of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this BreadcrumbEvent.\n\n\n        :param event_id: The event_id of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this BreadcrumbEvent.\n\n\n        :return: The source_message_id of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this BreadcrumbEvent.\n\n\n        :param source_message_id: The source_message_id of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this BreadcrumbEvent.\n\n\n        :return: The session_id of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this BreadcrumbEvent.\n\n\n        :param session_id: The session_id of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this BreadcrumbEvent.\n\n\n        :return: The session_uuid of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this BreadcrumbEvent.\n\n\n        :param session_uuid: The session_uuid of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this BreadcrumbEvent.\n\n\n        :return: The custom_attributes of this BreadcrumbEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this BreadcrumbEvent.\n\n\n        :param custom_attributes: The custom_attributes of this BreadcrumbEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this BreadcrumbEvent.\n\n\n        :return: The location of this BreadcrumbEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this BreadcrumbEvent.\n\n\n        :param location: The location of this BreadcrumbEvent.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this BreadcrumbEvent.\n\n\n        :return: The device_current_state of this BreadcrumbEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this BreadcrumbEvent.\n\n\n        :param device_current_state: The device_current_state of this BreadcrumbEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    @property\n    def session_number(self):\n        \"\"\"\n        Gets the session_number of this BreadcrumbEvent.\n\n\n        :return: The session_number of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_number\n\n    @session_number.setter\n    def session_number(self, session_number):\n        \"\"\"\n        Sets the session_number of this BreadcrumbEvent.\n\n\n        :param session_number: The session_number of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n\n        self._session_number = session_number\n\n    @property\n    def label(self):\n        \"\"\"\n        Gets the label of this BreadcrumbEvent.\n\n\n        :return: The label of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._label\n\n    @label.setter\n    def label(self, label):\n        \"\"\"\n        Sets the label of this BreadcrumbEvent.\n\n\n        :param label: The label of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n\n        self._label = label\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/breadcrumb_event.py": {
      "BreadcrumbEvent.__init__": {
        "code": "    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, session_number=None, label=None):\n        \"\"\"Initializes a BreadcrumbEvent instance, which represents an event model used in the mParticle Event API. \n\n    This constructor sets up various attributes related to the event, including its timestamp, unique identifiers, session details, custom attributes, geographical location, device state, session number, and event label. The attributes are defined using the `swagger_types` and `attribute_map` dictionaries for clarity and to ensure proper data types.\n\n    Parameters:\n    - timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time (milliseconds).\n    - event_id (int, optional): A unique identifier for the event.\n    - source_message_id (str, optional): The identifier for the source message.\n    - session_id (int, optional): The session identifier for the event.\n    - session_uuid (str, optional): A universally unique identifier for the session.\n    - custom_attributes (dict, optional): A dictionary of custom attributes associated with the event.\n    - location (GeoLocation, optional): Geographic location data related to the event.\n    - device_current_state (DeviceCurrentState, optional): The current state of the device generating the event.\n    - session_number (int, optional): The number of the session in which the event occurred.\n    - label (str, optional): A label for the event.\n\n    Attributes defined:\n    - swagger_types: A dictionary mapping attribute names to their respective data types for validation.\n    - attribute_map: A dictionary mapping attribute names to their corresponding JSON keys in the API definition.\n    \n    This constructor interacts with the class's getter and setter methods to manage and validate changes to its properties.\"\"\"\n        '\\n        BreadcrumbEvent - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState', 'session_number': 'int', 'label': 'str'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state', 'session_number': 'session_number', 'label': 'label'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._session_number = session_number\n        self._label = label",
        "docstring": "Initializes a BreadcrumbEvent instance, which represents an event model used in the mParticle Event API. \n\nThis constructor sets up various attributes related to the event, including its timestamp, unique identifiers, session details, custom attributes, geographical location, device state, session number, and event label. The attributes are defined using the `swagger_types` and `attribute_map` dictionaries for clarity and to ensure proper data types.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time (milliseconds).\n- event_id (int, optional): A unique identifier for the event.\n- source_message_id (str, optional): The identifier for the source message.\n- session_id (int, optional): The session identifier for the event.\n- session_uuid (str, optional): A universally unique identifier for the session.\n- custom_attributes (dict, optional): A dictionary of custom attributes associated with the event.\n- location (GeoLocation, optional): Geographic location data related to the event.\n- device_current_state (DeviceCurrentState, optional): The current state of the device generating the event.\n- session_number (int, optional): The number of the session in which the event occurred.\n- label (str, optional): A label for the event.\n\nAttributes defined:\n- swagger_types: A dictionary mapping attribute names to their respective data types for validation.\n- attribute_map: A dictionary mapping attribute names to their corresponding JSON keys in the API definition.\n\nThis constructor interacts with the class's getter and setter methods to manage and validate changes to its properties.",
        "signature": "def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, session_number=None, label=None):",
        "type": "Method",
        "class_signature": "class BreadcrumbEvent(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_breadcrumb_event\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 breadcrumb_event.py\n            \u2514\u2500\u2500 BreadcrumbEvent.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to test and validate the functionality of the `BreadcrumbEvent` model within the mParticle Event API, ensuring it operates as intended. It provides a framework for running unit tests to confirm that the `BreadcrumbEvent` component of the API is correctly defined and behaves as expected. This is essential for developers who rely on the mParticle platform to implement event tracking and breadcrumb logging as part of their data analytics workflows. By offering a structured way to verify the integrity of the `BreadcrumbEvent` model, the module solves the problem of ensuring reliability and consistency in event monitoring, reducing potential errors and improving developer confidence in the implementation.\n\n## FILE 1: mparticle/models/breadcrumb_event.py\n\n- CLASS METHOD: BreadcrumbEvent.__init__\n  - CLASS SIGNATURE: class BreadcrumbEvent(object):\n  - SIGNATURE: def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, session_number=None, label=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a BreadcrumbEvent instance, which represents an event model used in the mParticle Event API. \n\nThis constructor sets up various attributes related to the event, including its timestamp, unique identifiers, session details, custom attributes, geographical location, device state, session number, and event label. The attributes are defined using the `swagger_types` and `attribute_map` dictionaries for clarity and to ensure proper data types.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time (milliseconds).\n- event_id (int, optional): A unique identifier for the event.\n- source_message_id (str, optional): The identifier for the source message.\n- session_id (int, optional): The session identifier for the event.\n- session_uuid (str, optional): A universally unique identifier for the session.\n- custom_attributes (dict, optional): A dictionary of custom attributes associated with the event.\n- location (GeoLocation, optional): Geographic location data related to the event.\n- device_current_state (DeviceCurrentState, optional): The current state of the device generating the event.\n- session_number (int, optional): The number of the session in which the event occurred.\n- label (str, optional): A label for the event.\n\nAttributes defined:\n- swagger_types: A dictionary mapping attribute names to their respective data types for validation.\n- attribute_map: A dictionary mapping attribute names to their corresponding JSON keys in the API definition.\n\nThis constructor interacts with the class's getter and setter methods to manage and validate changes to its properties.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/breadcrumb_event.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass BreadcrumbEvent(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this BreadcrumbEvent.\n\n\n        :return: The timestamp_unixtime_ms of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this BreadcrumbEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this BreadcrumbEvent.\n\n\n        :return: The event_id of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this BreadcrumbEvent.\n\n\n        :param event_id: The event_id of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this BreadcrumbEvent.\n\n\n        :return: The source_message_id of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this BreadcrumbEvent.\n\n\n        :param source_message_id: The source_message_id of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this BreadcrumbEvent.\n\n\n        :return: The session_id of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this BreadcrumbEvent.\n\n\n        :param session_id: The session_id of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this BreadcrumbEvent.\n\n\n        :return: The session_uuid of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this BreadcrumbEvent.\n\n\n        :param session_uuid: The session_uuid of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this BreadcrumbEvent.\n\n\n        :return: The custom_attributes of this BreadcrumbEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this BreadcrumbEvent.\n\n\n        :param custom_attributes: The custom_attributes of this BreadcrumbEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this BreadcrumbEvent.\n\n\n        :return: The location of this BreadcrumbEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this BreadcrumbEvent.\n\n\n        :param location: The location of this BreadcrumbEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this BreadcrumbEvent.\n\n\n        :return: The device_current_state of this BreadcrumbEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this BreadcrumbEvent.\n\n\n        :param device_current_state: The device_current_state of this BreadcrumbEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    @property\n    def session_number(self):\n        \"\"\"\n        Gets the session_number of this BreadcrumbEvent.\n\n\n        :return: The session_number of this BreadcrumbEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_number\n\n    @session_number.setter\n    def session_number(self, session_number):\n        \"\"\"\n        Sets the session_number of this BreadcrumbEvent.\n\n\n        :param session_number: The session_number of this BreadcrumbEvent.\n        :type: int\n        \"\"\"\n        self._session_number = session_number\n\n    @property\n    def label(self):\n        \"\"\"\n        Gets the label of this BreadcrumbEvent.\n\n\n        :return: The label of this BreadcrumbEvent.\n        :rtype: str\n        \"\"\"\n        return self._label\n\n    @label.setter\n    def label(self, label):\n        \"\"\"\n        Sets the label of this BreadcrumbEvent.\n\n\n        :param label: The label of this BreadcrumbEvent.\n        :type: str\n        \"\"\"\n        self._label = label\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_breadcrumb_event.py:TestBreadcrumbEvent:testBreadcrumbEvent": {
      "mparticle/models/breadcrumb_event.py:BreadcrumbEvent:__init__": {}
    }
  }
}