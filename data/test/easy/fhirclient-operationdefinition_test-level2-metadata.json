{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-operationdefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/operationdefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import operationdefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass OperationDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"OperationDefinition\", js[\"resourceType\"])\n        return operationdefinition.OperationDefinition(js)\n    \n    def testOperationDefinition1(self):\n        inst = self.instantiate_from(\"operationdefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a OperationDefinition instance\")\n        self.implOperationDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"OperationDefinition\", js[\"resourceType\"])\n        inst2 = operationdefinition.OperationDefinition(js)\n        self.implOperationDefinition1(inst2)\n    \n    def implOperationDefinition1(self, inst):\n        self.assertEqual(inst.base, \"OperationDefinition/Questionnaire-populate\")\n        self.assertEqual(inst.code, \"populate\")\n        self.assertEqual(inst.comment, \"Only implemented for Labs and Medications so far\")\n        self.assertEqual(inst.contact[0].name, \"System Administrator\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"beep@coyote.acme.com\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-08-04\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-08-04\")\n        self.assertEqual(inst.description, \"Limited implementation of the Populate Questionnaire implementation\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertTrue(inst.instance)\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"GB\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United Kingdom of Great Britain and Northern Ireland (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.kind, \"operation\")\n        self.assertEqual(inst.name, \"Populate Questionnaire\")\n        self.assertEqual(inst.overload[0].parameterName[0], \"subject\")\n        self.assertEqual(inst.overload[0].parameterName[1], \"local\")\n        self.assertEqual(inst.overload[1].comment, \"local defaults to false when not passed as a parameter\")\n        self.assertEqual(inst.overload[1].parameterName[0], \"subject\")\n        self.assertEqual(inst.parameter[0].max, \"1\")\n        self.assertEqual(inst.parameter[0].min, 1)\n        self.assertEqual(inst.parameter[0].name, \"subject\")\n        self.assertEqual(inst.parameter[0].type, \"Reference\")\n        self.assertEqual(inst.parameter[0].use, \"in\")\n        self.assertEqual(inst.parameter[1].documentation, \"If the *local* parameter is set to true, server information about the specified subject will be used to populate the instance.\")\n        self.assertEqual(inst.parameter[1].max, \"1\")\n        self.assertEqual(inst.parameter[1].min, 0)\n        self.assertEqual(inst.parameter[1].name, \"local\")\n        self.assertEqual(inst.parameter[1].type, \"Reference\")\n        self.assertEqual(inst.parameter[1].use, \"in\")\n        self.assertEqual(inst.parameter[2].documentation, \"The partially (or fully)-populated set of answers for the specified Questionnaire\")\n        self.assertEqual(inst.parameter[2].max, \"1\")\n        self.assertEqual(inst.parameter[2].min, 1)\n        self.assertEqual(inst.parameter[2].name, \"return\")\n        self.assertEqual(inst.parameter[2].type, \"QuestionnaireResponse\")\n        self.assertEqual(inst.parameter[2].use, \"out\")\n        self.assertEqual(inst.publisher, \"Acme Healthcare Services\")\n        self.assertEqual(inst.resource[0], \"Questionnaire\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertFalse(inst.system)\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertFalse(inst.type)\n        self.assertEqual(inst.url, \"http://h7.org/fhir/OperationDefinition/example\")\n        self.assertEqual(inst.useContext[0].code.code, \"venue\")\n        self.assertEqual(inst.useContext[0].code.display, \"Clinical Venue\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://build.fhir.org/codesystem-usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"IMP\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"inpatient encounter\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n        self.assertEqual(inst.version, \"B\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/operationdefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/OperationDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass OperationDefinition(domainresource.DomainResource):\n    \"\"\" Definition of an operation or a named query.\n    \n    A formal computable definition of an operation (on the RESTful interface)\n    or a named query (using the search interaction).\n    \"\"\"\n    \n    resource_type = \"OperationDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.affectsState = None\n        \"\"\" Whether content is changed by the operation.\n        Type `bool`. \"\"\"\n        \n        self.base = None\n        \"\"\" Marks this as a profile of the base.\n        Type `str`. \"\"\"\n        \n        self.code = None\n        \"\"\" Name used to invoke the operation.\n        Type `str`. \"\"\"\n        \n        self.comment = None\n        \"\"\" Additional information about use.\n        Type `str`. \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the operation definition.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.inputProfile = None\n        \"\"\" Validation information for in parameters.\n        Type `str`. \"\"\"\n        \n        self.instance = None\n        \"\"\" Invoke on an instance?.\n        Type `bool`. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for operation definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.kind = None\n        \"\"\" operation | query.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this operation definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.outputProfile = None\n        \"\"\" Validation information for out parameters.\n        Type `str`. \"\"\"\n        \n        self.overload = None\n        \"\"\" Define overloaded variants for when  generating code.\n        List of `OperationDefinitionOverload` items (represented as `dict` in JSON). \"\"\"\n        \n        self.parameter = None\n        \"\"\" Parameters for the operation/query.\n        List of `OperationDefinitionParameter` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this operation definition is defined.\n        Type `str`. \"\"\"\n        \n        self.resource = None\n        \"\"\" Types this operation applies to.\n        List of `str` items. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.system = None\n        \"\"\" Invoke at the system level?.\n        Type `bool`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this operation definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Invoke at the type level?.\n        Type `bool`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this operation definition, represented as\n        a URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the operation definition.\n        Type `str`. \"\"\"\n        \n        super(OperationDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(OperationDefinition, self).elementProperties()\n        js.extend([\n            (\"affectsState\", \"affectsState\", bool, False, None, False),\n            (\"base\", \"base\", str, False, None, False),\n            (\"code\", \"code\", str, False, None, True),\n            (\"comment\", \"comment\", str, False, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"inputProfile\", \"inputProfile\", str, False, None, False),\n            (\"instance\", \"instance\", bool, False, None, True),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"kind\", \"kind\", str, False, None, True),\n            (\"name\", \"name\", str, False, None, True),\n            (\"outputProfile\", \"outputProfile\", str, False, None, False),\n            (\"overload\", \"overload\", OperationDefinitionOverload, True, None, False),\n            (\"parameter\", \"parameter\", OperationDefinitionParameter, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"resource\", \"resource\", str, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"system\", \"system\", bool, False, None, True),\n            (\"title\", \"title\", str, False, None, False),\n            (\"type\", \"type\", bool, False, None, True),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass OperationDefinitionOverload(backboneelement.BackboneElement):\n    \"\"\" Define overloaded variants for when  generating code.\n    \n    Defines an appropriate combination of parameters to use when invoking this\n    operation, to help code generators when generating overloaded parameter\n    sets for this operation.\n    \"\"\"\n    \n    resource_type = \"OperationDefinitionOverload\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.comment = None\n        \"\"\" Comments to go on overload.\n        Type `str`. \"\"\"\n        \n        self.parameterName = None\n        \"\"\" Name of parameter to include in overload.\n        List of `str` items. \"\"\"\n        \n        super(OperationDefinitionOverload, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(OperationDefinitionOverload, self).elementProperties()\n        js.extend([\n            (\"comment\", \"comment\", str, False, None, False),\n            (\"parameterName\", \"parameterName\", str, True, None, False),\n        ])\n        return js\n\n\nclass OperationDefinitionParameter(backboneelement.BackboneElement):\n    \"\"\" Parameters for the operation/query.\n    \n    The parameters for the operation/query.\n    \"\"\"\n    \n    resource_type = \"OperationDefinitionParameter\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.binding = None\n        \"\"\" ValueSet details if this is coded.\n        Type `OperationDefinitionParameterBinding` (represented as `dict` in JSON). \"\"\"\n        \n        self.documentation = None\n        \"\"\" Description of meaning/use.\n        Type `str`. \"\"\"\n        \n        self.max = None\n        \"\"\" Maximum Cardinality (a number or *).\n        Type `str`. \"\"\"\n        \n        self.min = None\n        \"\"\" Minimum Cardinality.\n        Type `int`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name in Parameters.parameter.name or in URL.\n        Type `str`. \"\"\"\n        \n        self.part = None\n        \"\"\" Parts of a nested Parameter.\n        List of `OperationDefinitionParameter` items (represented as `dict` in JSON). \"\"\"\n        \n        self.referencedFrom = None\n        \"\"\" References to this parameter.\n        List of `OperationDefinitionParameterReferencedFrom` items (represented as `dict` in JSON). \"\"\"\n        \n        self.searchType = None\n        \"\"\" number | date | string | token | reference | composite | quantity |\n        uri | special.\n        Type `str`. \"\"\"\n        \n        self.targetProfile = None\n        \"\"\" If type is Reference | canonical, allowed targets.\n        List of `str` items. \"\"\"\n        \n        self.type = None\n        \"\"\" What type this parameter has.\n        Type `str`. \"\"\"\n        \n        self.use = None\n        \"\"\" in | out.\n        Type `str`. \"\"\"\n        \n        super(OperationDefinitionParameter, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(OperationDefinitionParameter, self).elementProperties()\n        js.extend([\n            (\"binding\", \"binding\", OperationDefinitionParameterBinding, False, None, False),\n            (\"documentation\", \"documentation\", str, False, None, False),\n            (\"max\", \"max\", str, False, None, True),\n            (\"min\", \"min\", int, False, None, True),\n            (\"name\", \"name\", str, False, None, True),\n            (\"part\", \"part\", OperationDefinitionParameter, True, None, False),\n            (\"referencedFrom\", \"referencedFrom\", OperationDefinitionParameterReferencedFrom, True, None, False),\n            (\"searchType\", \"searchType\", str, False, None, False),\n            (\"targetProfile\", \"targetProfile\", str, True, None, False),\n            (\"type\", \"type\", str, False, None, False),\n            (\"use\", \"use\", str, False, None, True),\n        ])\n        return js\n\n\nclass OperationDefinitionParameterBinding(backboneelement.BackboneElement):\n    \"\"\" ValueSet details if this is coded.\n    \n    Binds to a value set if this parameter is coded (code, Coding,\n    CodeableConcept).\n    \"\"\"\n    \n    resource_type = \"OperationDefinitionParameterBinding\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.strength = None\n        \"\"\" required | extensible | preferred | example.\n        Type `str`. \"\"\"\n        \n        self.valueSet = None\n        \"\"\" Source of value set.\n        Type `str`. \"\"\"\n        \n        super(OperationDefinitionParameterBinding, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(OperationDefinitionParameterBinding, self).elementProperties()\n        js.extend([\n            (\"strength\", \"strength\", str, False, None, True),\n            (\"valueSet\", \"valueSet\", str, False, None, True),\n        ])\n        return js\n\n\nclass OperationDefinitionParameterReferencedFrom(backboneelement.BackboneElement):\n    \"\"\" References to this parameter.\n    \n    Identifies other resource parameters within the operation invocation that\n    are expected to resolve to this resource.\n    \"\"\"\n    \n    resource_type = \"OperationDefinitionParameterReferencedFrom\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.source = None\n        \"\"\" Referencing parameter.\n        Type `str`. \"\"\"\n        \n        self.sourceId = None\n        \"\"\" Element id of reference.\n        Type `str`. \"\"\"\n        \n        super(OperationDefinitionParameterReferencedFrom, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(OperationDefinitionParameterReferencedFrom, self).elementProperties()\n        js.extend([\n            (\"source\", \"source\", str, False, None, True),\n            (\"sourceId\", \"sourceId\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance using a JSON date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format. If not provided, defaults to None. The function raises a TypeError if the input is not a string and a ValueError if the string does not match the expected format defined by the regular expression _REGEX.\n\nAttributes:\n- self.date: This will hold the converted date in Python\u2019s datetime format or remain None if initialization fails.\n- self.origval: Keeps track of the original JSON value passed during initialization, used to retrieve or serialize the date accurately later.\n\nConstants:\n- _REGEX: A regular expression pattern used to validate that the provided date string conforms to the expected ISO 8601 format. It is essential to ensure that only valid date formats are accepted for further processing within the class.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance using a JSON date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format. If not provided, defaults to None. The function raises a TypeError if the input is not a string and a ValueError if the string does not match the expected format defined by the regular expression _REGEX.\n\nAttributes:\n- self.date: This will hold the converted date in Python\u2019s datetime format or remain None if initialization fails.\n- self.origval: Keeps track of the original JSON value passed during initialization, used to retrieve or serialize the date accurately later.\n\nConstants:\n- _REGEX: A regular expression pattern used to validate that the provided date string conforms to the expected ISO 8601 format. It is essential to ensure that only valid date formats are accepted for further processing within the class.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets an attribute on the FHIRDate instance. If the attribute being set is either 'date' or the constant '_FIELD', the original JSON value is cleared and both 'date' and the field represented by '_FIELD' are synchronized. For all other attributes, the assignment is performed normally.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is the attribute being set, the original value (origval) is cleared, ensuring that the instance reflects the most recent data assigned to these fields.\n\nDependencies:\n- '_FIELD' is a class constant defined as \"date\" which represents the field used for storing the date value. This constant ensures consistent handling of the 'date' attribute across methods in the class.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets an attribute on the FHIRDate instance. If the attribute being set is either 'date' or the constant '_FIELD', the original JSON value is cleared and both 'date' and the field represented by '_FIELD' are synchronized. For all other attributes, the assignment is performed normally.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is the attribute being set, the original value (origval) is cleared, ensuring that the instance reflects the most recent data assigned to these fields.\n\nDependencies:\n- '_FIELD' is a class constant defined as \"date\" which represents the field used for storing the date value. This constant ensures consistent handling of the 'date' attribute across methods in the class.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is available (not None), it returns that value; otherwise, it returns the ISO 8601 string representation of the date (`isostring`). This method is useful for obtaining the exact input that was used to initialize the FHIRDate object, especially in cases where the input string might have partial date information that gets expanded during object creation. The `isostring` property normalizes the date to an ISO 8601 format, potentially altering partial dates to conform to the expected structure.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is available (not None), it returns that value; otherwise, it returns the ISO 8601 string representation of the date (`isostring`). This method is useful for obtaining the exact input that was used to initialize the FHIRDate object, especially in cases where the input string might have partial date information that gets expanded during object creation. The `isostring` property normalizes the date to an ISO 8601 format, potentially altering partial dates to conform to the expected structure.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIR element to a JSON dictionary by inspecting its properties defined in `elementProperties()`. The method ensures that required properties are present and of the correct type, checking if lists are not empty and elements are of the expected types.\n\nRaises:\n    FHIRValidationError: If any properties are missing or have incorrect types.\n\nReturns:\n    dict: A validated dictionary representation of the FHIR element that can be serialized as JSON.\n\nThe method relies on:\n- `elementProperties()`: A method to retrieve property details (name, JSON name, type, list status, etc.) necessary for serialization.\n- `_matches_type(value, typ)`: A method to ensure that values conform to their expected types.\n- The `FHIRValidationError` exception to handle any validation issues encountered during serialization.\n\nConstants:\n- `found`: A set that keeps track of properties that were successfully located and processed.\n- `nonoptionals`: A set that tracks properties which are non-optional and must be present in the serialized output.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIR element to a JSON dictionary by inspecting its properties defined in `elementProperties()`. The method ensures that required properties are present and of the correct type, checking if lists are not empty and elements are of the expected types.\n\nRaises:\n    FHIRValidationError: If any properties are missing or have incorrect types.\n\nReturns:\n    dict: A validated dictionary representation of the FHIR element that can be serialized as JSON.\n\nThe method relies on:\n- `elementProperties()`: A method to retrieve property details (name, JSON name, type, list status, etc.) necessary for serialization.\n- `_matches_type(value, typ)`: A method to ensure that values conform to their expected types.\n- The `FHIRValidationError` exception to handle any validation issues encountered during serialization.\n\nConstants:\n- `found`: A set that keeps track of properties that were successfully located and processed.\n- `nonoptionals`: A set that tracks properties which are non-optional and must be present in the serialized output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/operationdefinition.py": {
      "OperationDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an instance of the OperationDefinition class, which defines a computable operation or a named query in the FHIR RESTful interface. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance's properties. It should conform to the structure of an OperationDefinition. \n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties; if False, allows for leniency in validation.\n\nAttributes initialized include:\n- affectsState (bool): Indicates if the operation changes the state of the content.\n- base (str): Marks this as a profile of a base resource.\n- code (str): The invocation name for the operation.\n- comment (str): Additional information regarding the operation's use.\n- contact (list of ContactDetail): Contact details for the publisher of the operation.\n- date (FHIRDateTime): The last modification date of the operation definition.\n- description (str): A natural language description of the operation.\n- experimental (bool): Marks if the operation is for testing purposes.\n- inputProfile (str): Validation information for input parameters.\n- instance (bool): Indicates if the operation can be invoked on an instance.\n- jurisdiction (list of CodeableConcept): Intended jurisdiction for this definition.\n- kind (str): Specifies if it is an operation or query.\n- name (str): A computer-friendly name for the operation definition.\n- outputProfile (str): Validation information for output parameters.\n- overload (list of OperationDefinitionOverload): Variants for overloads when generating code.\n- parameter (list of OperationDefinitionParameter): Parameters for the operation or query.\n- publisher (str): The name of the publisher.\n- purpose (str): The rationale for defining this operation.\n- resource (list of str): Resource types this operation applies to.\n- status (str): The current status of the operation definition.\n- system (bool): Indicates if the operation can be invoked at the system level.\n- title (str): A human-friendly name for the operation definition.\n- type (bool): Indicates if the operation can be invoked at the type level.\n- url (str): A unique canonical identifier for the operation definition.\n- useContext (list of UsageContext): The context the content intends to support.\n- version (str): The business version of the operation definition.\n\nThis constructor calls the parent class's constructor to ensure proper initialization of inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.affectsState = None\n        ' Whether content is changed by the operation.\\n        Type `bool`. '\n        self.base = None\n        ' Marks this as a profile of the base.\\n        Type `str`. '\n        self.code = None\n        ' Name used to invoke the operation.\\n        Type `str`. '\n        self.comment = None\n        ' Additional information about use.\\n        Type `str`. '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the operation definition.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.inputProfile = None\n        ' Validation information for in parameters.\\n        Type `str`. '\n        self.instance = None\n        ' Invoke on an instance?.\\n        Type `bool`. '\n        self.jurisdiction = None\n        ' Intended jurisdiction for operation definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.kind = None\n        ' operation | query.\\n        Type `str`. '\n        self.name = None\n        ' Name for this operation definition (computer friendly).\\n        Type `str`. '\n        self.outputProfile = None\n        ' Validation information for out parameters.\\n        Type `str`. '\n        self.overload = None\n        ' Define overloaded variants for when  generating code.\\n        List of `OperationDefinitionOverload` items (represented as `dict` in JSON). '\n        self.parameter = None\n        ' Parameters for the operation/query.\\n        List of `OperationDefinitionParameter` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this operation definition is defined.\\n        Type `str`. '\n        self.resource = None\n        ' Types this operation applies to.\\n        List of `str` items. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.system = None\n        ' Invoke at the system level?.\\n        Type `bool`. '\n        self.title = None\n        ' Name for this operation definition (human friendly).\\n        Type `str`. '\n        self.type = None\n        ' Invoke at the type level?.\\n        Type `bool`. '\n        self.url = None\n        ' Canonical identifier for this operation definition, represented as\\n        a URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the operation definition.\\n        Type `str`. '\n        super(OperationDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an instance of the OperationDefinition class, which defines a computable operation or a named query in the FHIR RESTful interface. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance's properties. It should conform to the structure of an OperationDefinition. \n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties; if False, allows for leniency in validation.\n\nAttributes initialized include:\n- affectsState (bool): Indicates if the operation changes the state of the content.\n- base (str): Marks this as a profile of a base resource.\n- code (str): The invocation name for the operation.\n- comment (str): Additional information regarding the operation's use.\n- contact (list of ContactDetail): Contact details for the publisher of the operation.\n- date (FHIRDateTime): The last modification date of the operation definition.\n- description (str): A natural language description of the operation.\n- experimental (bool): Marks if the operation is for testing purposes.\n- inputProfile (str): Validation information for input parameters.\n- instance (bool): Indicates if the operation can be invoked on an instance.\n- jurisdiction (list of CodeableConcept): Intended jurisdiction for this definition.\n- kind (str): Specifies if it is an operation or query.\n- name (str): A computer-friendly name for the operation definition.\n- outputProfile (str): Validation information for output parameters.\n- overload (list of OperationDefinitionOverload): Variants for overloads when generating code.\n- parameter (list of OperationDefinitionParameter): Parameters for the operation or query.\n- publisher (str): The name of the publisher.\n- purpose (str): The rationale for defining this operation.\n- resource (list of str): Resource types this operation applies to.\n- status (str): The current status of the operation definition.\n- system (bool): Indicates if the operation can be invoked at the system level.\n- title (str): A human-friendly name for the operation definition.\n- type (bool): Indicates if the operation can be invoked at the type level.\n- url (str): A unique canonical identifier for the operation definition.\n- useContext (list of UsageContext): The context the content intends to support.\n- version (str): The business version of the operation definition.\n\nThis constructor calls the parent class's constructor to ensure proper initialization of inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class OperationDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance, a convenience class for handling FHIR datetime representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date-time. If provided, it is passed to the superclass FHIRDate for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute is initialized to None and will hold the Python datetime representation once set.\n\nThe constructor calls the `__init__` method of the superclass (FHIRDate) to leverage its parsing capabilities, ensuring compatibility with existing FHIR date formats while adhering to FHIR specifications.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance, a convenience class for handling FHIR datetime representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date-time. If provided, it is passed to the superclass FHIRDate for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute is initialized to None and will hold the Python datetime representation once set.\n\nThe constructor calls the `__init__` method of the superclass (FHIRDate) to leverage its parsing capabilities, ensuring compatibility with existing FHIR date formats while adhering to FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include an additional key, `resourceType`, in the resulting JSON dictionary. The value of `resourceType` is derived from the class attribute `resource_type`, indicating the type of FHIR resource represented.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including all inherited attributes and the `resourceType` field.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class implementation to gather the base JSON attributes.\n    - `self.resource_type`: A class attribute which defines the resource type for the FHIR object being represented.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include an additional key, `resourceType`, in the resulting JSON dictionary. The value of `resourceType` is derived from the class attribute `resource_type`, indicating the type of FHIR resource represented.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including all inherited attributes and the `resourceType` field.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class implementation to gather the base JSON attributes.\n    - `self.resource_type`: A class attribute which defines the resource type for the FHIR object being represented.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource object representing a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties of the resource, including `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initialization from a JSON dictionary, and the `strict` parameter controls whether invalid properties raise an error.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties. Default is None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, validation errors will not raise exceptions.\n\nAttributes:\n- contained: List of inline resources represented as `Resource` items (derived from `resource.Resource`).\n- extension: Additional content represented as `Extension` items (derived from `extension.Extension`).\n- modifierExtension: Extensions that cannot be ignored, also represented as `Extension` items.\n- text: A summary of the resource for human interpretation, represented as a `Narrative` object (derived from `narrative.Narrative`).\n\nThis class is a part of the FHIR framework and extends the base `Resource` class, which is responsible for the overall structure and behavior of FHIR resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource object representing a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties of the resource, including `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initialization from a JSON dictionary, and the `strict` parameter controls whether invalid properties raise an error.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties. Default is None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, validation errors will not raise exceptions.\n\nAttributes:\n- contained: List of inline resources represented as `Resource` items (derived from `resource.Resource`).\n- extension: Additional content represented as `Extension` items (derived from `extension.Extension`).\n- modifierExtension: Extensions that cannot be ignored, also represented as `Extension` items.\n- text: A summary of the resource for human interpretation, represented as a `Narrative` object (derived from `narrative.Narrative`).\n\nThis class is a part of the FHIR framework and extends the base `Resource` class, which is responsible for the overall structure and behavior of FHIR resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/operationdefinition.py:OperationDefinition:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/operationdefinition.py": {
        "OperationDefinition.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(OperationDefinition, self).elementProperties()\n        js.extend([('affectsState', 'affectsState', bool, False, None, False), ('base', 'base', str, False, None, False), ('code', 'code', str, False, None, True), ('comment', 'comment', str, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('inputProfile', 'inputProfile', str, False, None, False), ('instance', 'instance', bool, False, None, True), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('kind', 'kind', str, False, None, True), ('name', 'name', str, False, None, True), ('outputProfile', 'outputProfile', str, False, None, False), ('overload', 'overload', OperationDefinitionOverload, True, None, False), ('parameter', 'parameter', OperationDefinitionParameter, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('resource', 'resource', str, True, None, False), ('status', 'status', str, False, None, True), ('system', 'system', bool, False, None, True), ('title', 'title', str, False, None, False), ('type', 'type', bool, False, None, True), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class OperationDefinition(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/operationdefinition_test.py:OperationDefinitionTests:testOperationDefinition1": {
      "tests/models/operationdefinition_test.py:OperationDefinitionTests:instantiate_from": {
        "fhirclient/models/operationdefinition.py:OperationDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/operationdefinition.py:OperationDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/operationdefinition_test.py:OperationDefinitionTests:implOperationDefinition1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/operationdefinition.py:OperationDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/operationdefinition.py:OperationDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/operationdefinition.py:OperationDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/operationdefinition_test.py:OperationDefinitionTests:instantiate_from": {
      "fhirclient/models/operationdefinition.py:OperationDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/operationdefinition.py:OperationDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-operationdefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 operationdefinition.py\n            \u2514\u2500\u2500 OperationDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the functionality of FHIR OperationDefinition resources, which define reusable, structured descriptions of specific FHIR operations or actions within healthcare interoperability contexts. It ensures the correct instantiation, structure, and data integrity of OperationDefinition instances by checking attributes such as parameters, metadata, jurisdiction, and usage contexts. Additionally, the module provides facilities for validating key operation parameters, input/output relationships, and the resource's compliance with FHIR standards. This helps developers ensure reliable implementation and integration of FHIR-based operations in healthcare applications, promoting consistency and accuracy in resource handling and system interoperability.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance using a JSON date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format. If not provided, defaults to None. The function raises a TypeError if the input is not a string and a ValueError if the string does not match the expected format defined by the regular expression _REGEX.\n\nAttributes:\n- self.date: This will hold the converted date in Python\u2019s datetime format or remain None if initialization fails.\n- self.origval: Keeps track of the original JSON value passed during initialization, used to retrieve or serialize the date accurately later.\n\nConstants:\n- _REGEX: A regular expression pattern used to validate that the provided date string conforms to the expected ISO 8601 format. It is essential to ensure that only valid date formats are accepted for further processing within the class.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is available (not None), it returns that value; otherwise, it returns the ISO 8601 string representation of the date (`isostring`). This method is useful for obtaining the exact input that was used to initialize the FHIRDate object, especially in cases where the input string might have partial date information that gets expanded during object creation. The `isostring` property normalizes the date to an ISO 8601 format, potentially altering partial dates to conform to the expected structure.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets an attribute on the FHIRDate instance. If the attribute being set is either 'date' or the constant '_FIELD', the original JSON value is cleared and both 'date' and the field represented by '_FIELD' are synchronized. For all other attributes, the assignment is performed normally.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is the attribute being set, the original value (origval) is cleared, ensuring that the instance reflects the most recent data assigned to these fields.\n\nDependencies:\n- '_FIELD' is a class constant defined as \"date\" which represents the field used for storing the date value. This constant ensures consistent handling of the 'date' attribute across methods in the class.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIR element to a JSON dictionary by inspecting its properties defined in `elementProperties()`. The method ensures that required properties are present and of the correct type, checking if lists are not empty and elements are of the expected types.\n\nRaises:\n    FHIRValidationError: If any properties are missing or have incorrect types.\n\nReturns:\n    dict: A validated dictionary representation of the FHIR element that can be serialized as JSON.\n\nThe method relies on:\n- `elementProperties()`: A method to retrieve property details (name, JSON name, type, list status, etc.) necessary for serialization.\n- `_matches_type(value, typ)`: A method to ensure that values conform to their expected types.\n- The `FHIRValidationError` exception to handle any validation issues encountered during serialization.\n\nConstants:\n- `found`: A set that keeps track of properties that were successfully located and processed.\n- `nonoptionals`: A set that tracks properties which are non-optional and must be present in the serialized output.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/operationdefinition.py\n\n- CLASS METHOD: OperationDefinition.__init__\n  - CLASS SIGNATURE: class OperationDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an instance of the OperationDefinition class, which defines a computable operation or a named query in the FHIR RESTful interface. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance's properties. It should conform to the structure of an OperationDefinition. \n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties; if False, allows for leniency in validation.\n\nAttributes initialized include:\n- affectsState (bool): Indicates if the operation changes the state of the content.\n- base (str): Marks this as a profile of a base resource.\n- code (str): The invocation name for the operation.\n- comment (str): Additional information regarding the operation's use.\n- contact (list of ContactDetail): Contact details for the publisher of the operation.\n- date (FHIRDateTime): The last modification date of the operation definition.\n- description (str): A natural language description of the operation.\n- experimental (bool): Marks if the operation is for testing purposes.\n- inputProfile (str): Validation information for input parameters.\n- instance (bool): Indicates if the operation can be invoked on an instance.\n- jurisdiction (list of CodeableConcept): Intended jurisdiction for this definition.\n- kind (str): Specifies if it is an operation or query.\n- name (str): A computer-friendly name for the operation definition.\n- outputProfile (str): Validation information for output parameters.\n- overload (list of OperationDefinitionOverload): Variants for overloads when generating code.\n- parameter (list of OperationDefinitionParameter): Parameters for the operation or query.\n- publisher (str): The name of the publisher.\n- purpose (str): The rationale for defining this operation.\n- resource (list of str): Resource types this operation applies to.\n- status (str): The current status of the operation definition.\n- system (bool): Indicates if the operation can be invoked at the system level.\n- title (str): A human-friendly name for the operation definition.\n- type (bool): Indicates if the operation can be invoked at the type level.\n- url (str): A unique canonical identifier for the operation definition.\n- useContext (list of UsageContext): The context the content intends to support.\n- version (str): The business version of the operation definition.\n\nThis constructor calls the parent class's constructor to ensure proper initialization of inherited properties.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance, a convenience class for handling FHIR datetime representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date-time. If provided, it is passed to the superclass FHIRDate for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute is initialized to None and will hold the Python datetime representation once set.\n\nThe constructor calls the `__init__` method of the superclass (FHIRDate) to leverage its parsing capabilities, ensuring compatibility with existing FHIR date formats while adhering to FHIR specifications.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include an additional key, `resourceType`, in the resulting JSON dictionary. The value of `resourceType` is derived from the class attribute `resource_type`, indicating the type of FHIR resource represented.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including all inherited attributes and the `resourceType` field.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class implementation to gather the base JSON attributes.\n    - `self.resource_type`: A class attribute which defines the resource type for the FHIR object being represented.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource object representing a FHIR resource that includes narrative, extensions, and contained resources.\n\nThis constructor sets up the initial properties of the resource, including `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initialization from a JSON dictionary, and the `strict` parameter controls whether invalid properties raise an error.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties. Default is None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, validation errors will not raise exceptions.\n\nAttributes:\n- contained: List of inline resources represented as `Resource` items (derived from `resource.Resource`).\n- extension: Additional content represented as `Extension` items (derived from `extension.Extension`).\n- modifierExtension: Extensions that cannot be ignored, also represented as `Extension` items.\n- text: A summary of the resource for human interpretation, represented as a `Narrative` object (derived from `narrative.Narrative`).\n\nThis class is a part of the FHIR framework and extends the base `Resource` class, which is responsible for the overall structure and behavior of FHIR resources.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/operationdefinition.py": "from . import domainresource\n\nclass OperationDefinition(domainresource.DomainResource):\n    \"\"\" Definition of an operation or a named query.\n    \n    A formal computable definition of an operation (on the RESTful interface)\n    or a named query (using the search interaction).\n    \"\"\"\n    resource_type = 'OperationDefinition'\n\n    def elementProperties(self):\n        js = super(OperationDefinition, self).elementProperties()\n        js.extend([('affectsState', 'affectsState', bool, False, None, False), ('base', 'base', str, False, None, False), ('code', 'code', str, False, None, True), ('comment', 'comment', str, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('inputProfile', 'inputProfile', str, False, None, False), ('instance', 'instance', bool, False, None, True), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('kind', 'kind', str, False, None, True), ('name', 'name', str, False, None, True), ('outputProfile', 'outputProfile', str, False, None, False), ('overload', 'overload', OperationDefinitionOverload, True, None, False), ('parameter', 'parameter', OperationDefinitionParameter, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('resource', 'resource', str, True, None, False), ('status', 'status', str, False, None, True), ('system', 'system', bool, False, None, True), ('title', 'title', str, False, None, False), ('type', 'type', bool, False, None, True), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass OperationDefinitionOverload(backboneelement.BackboneElement):\n    \"\"\" Define overloaded variants for when  generating code.\n    \n    Defines an appropriate combination of parameters to use when invoking this\n    operation, to help code generators when generating overloaded parameter\n    sets for this operation.\n    \"\"\"\n    resource_type = 'OperationDefinitionOverload'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.comment = None\n        ' Comments to go on overload.\\n        Type `str`. '\n        self.parameterName = None\n        ' Name of parameter to include in overload.\\n        List of `str` items. '\n        super(OperationDefinitionOverload, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(OperationDefinitionOverload, self).elementProperties()\n        js.extend([('comment', 'comment', str, False, None, False), ('parameterName', 'parameterName', str, True, None, False)])\n        return js\n\nclass OperationDefinitionParameter(backboneelement.BackboneElement):\n    \"\"\" Parameters for the operation/query.\n    \n    The parameters for the operation/query.\n    \"\"\"\n    resource_type = 'OperationDefinitionParameter'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.binding = None\n        ' ValueSet details if this is coded.\\n        Type `OperationDefinitionParameterBinding` (represented as `dict` in JSON). '\n        self.documentation = None\n        ' Description of meaning/use.\\n        Type `str`. '\n        self.max = None\n        ' Maximum Cardinality (a number or *).\\n        Type `str`. '\n        self.min = None\n        ' Minimum Cardinality.\\n        Type `int`. '\n        self.name = None\n        ' Name in Parameters.parameter.name or in URL.\\n        Type `str`. '\n        self.part = None\n        ' Parts of a nested Parameter.\\n        List of `OperationDefinitionParameter` items (represented as `dict` in JSON). '\n        self.referencedFrom = None\n        ' References to this parameter.\\n        List of `OperationDefinitionParameterReferencedFrom` items (represented as `dict` in JSON). '\n        self.searchType = None\n        ' number | date | string | token | reference | composite | quantity |\\n        uri | special.\\n        Type `str`. '\n        self.targetProfile = None\n        ' If type is Reference | canonical, allowed targets.\\n        List of `str` items. '\n        self.type = None\n        ' What type this parameter has.\\n        Type `str`. '\n        self.use = None\n        ' in | out.\\n        Type `str`. '\n        super(OperationDefinitionParameter, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(OperationDefinitionParameter, self).elementProperties()\n        js.extend([('binding', 'binding', OperationDefinitionParameterBinding, False, None, False), ('documentation', 'documentation', str, False, None, False), ('max', 'max', str, False, None, True), ('min', 'min', int, False, None, True), ('name', 'name', str, False, None, True), ('part', 'part', OperationDefinitionParameter, True, None, False), ('referencedFrom', 'referencedFrom', OperationDefinitionParameterReferencedFrom, True, None, False), ('searchType', 'searchType', str, False, None, False), ('targetProfile', 'targetProfile', str, True, None, False), ('type', 'type', str, False, None, False), ('use', 'use', str, False, None, True)])\n        return js\n\nclass OperationDefinitionParameterBinding(backboneelement.BackboneElement):\n    \"\"\" ValueSet details if this is coded.\n    \n    Binds to a value set if this parameter is coded (code, Coding,\n    CodeableConcept).\n    \"\"\"\n    resource_type = 'OperationDefinitionParameterBinding'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.strength = None\n        ' required | extensible | preferred | example.\\n        Type `str`. '\n        self.valueSet = None\n        ' Source of value set.\\n        Type `str`. '\n        super(OperationDefinitionParameterBinding, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(OperationDefinitionParameterBinding, self).elementProperties()\n        js.extend([('strength', 'strength', str, False, None, True), ('valueSet', 'valueSet', str, False, None, True)])\n        return js\n\nclass OperationDefinitionParameterReferencedFrom(backboneelement.BackboneElement):\n    \"\"\" References to this parameter.\n    \n    Identifies other resource parameters within the operation invocation that\n    are expected to resolve to this resource.\n    \"\"\"\n    resource_type = 'OperationDefinitionParameterReferencedFrom'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.source = None\n        ' Referencing parameter.\\n        Type `str`. '\n        self.sourceId = None\n        ' Element id of reference.\\n        Type `str`. '\n        super(OperationDefinitionParameterReferencedFrom, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(OperationDefinitionParameterReferencedFrom, self).elementProperties()\n        js.extend([('source', 'source', str, False, None, True), ('sourceId', 'sourceId', str, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}