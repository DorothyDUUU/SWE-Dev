{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_jinja_manager",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/test_jinja_manager.py",
  "test_code": "from pathlib import Path\n\nimport pytest\n\nfrom mypy_boto3_builder.exceptions import JinjaManagerError\nfrom mypy_boto3_builder.jinja_manager import JinjaManager\n\n\nclass TestJinjaManager:\n    def test_init(self) -> None:\n        assert JinjaManager() != JinjaManager()\n        assert JinjaManager.singleton() == JinjaManager.singleton()\n\n    def test_get_template(self) -> None:\n        manager = JinjaManager()\n        assert manager.get_template(Path(\"common/named_union.py.jinja2\"))\n        assert manager.get_template(Path(\"common/named_union.py.jinja2\"))\n        with pytest.raises(JinjaManagerError):\n            manager.get_template(Path(\"common/unknown.jinja2\"))\n",
  "GT_file_code": {
    "mypy_boto3_builder/jinja_manager.py": "\"\"\"\nJinja2 `Environment` manager.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Any, Self\n\nfrom jinja2.environment import Environment, Template\nfrom jinja2.loaders import FileSystemLoader\nfrom jinja2.runtime import StrictUndefined\n\nfrom mypy_boto3_builder.constants import TEMPLATES_PATH\nfrom mypy_boto3_builder.exceptions import JinjaManagerError\n\n__all__ = [\"JinjaManager\"]\n\n\nclass JinjaManager:\n    \"\"\"\n    Jinja2 `Environment` manager.\n    \"\"\"\n\n    _environment = Environment(\n        loader=FileSystemLoader(TEMPLATES_PATH.as_posix()),\n        undefined=StrictUndefined,\n    )\n    _singleton: Self | None = None\n\n    def __init__(self) -> None:\n        self._environment.filters[\"escape_md\"] = self.escape_md\n        self._template_cache: dict[Path, Template] = {}\n\n    @classmethod\n    def singleton(cls) -> Self:\n        \"\"\"\n        Get singleton instance.\n        \"\"\"\n        if cls._singleton is None:\n            cls._singleton = cls()\n        return cls._singleton  # type: ignore\n\n    @classmethod\n    def update_globals(cls, **kwargs: Any) -> None:  # noqa: ANN401\n        \"\"\"\n        Update global variables in `jinja2.Environment`.\n\n        Arguments:\n            kwargs -- Globals to set.\n        \"\"\"\n        cls._environment.globals.update(kwargs)\n\n    @staticmethod\n    def escape_md(value: str) -> str:\n        \"\"\"\n        Escape underscore characters.\n        \"\"\"\n        return value.replace(\"_\", r\"\\_\")\n\n    def get_template(self, template_path: Path) -> Template:\n        \"\"\"\n        Get `jinja2.Template`.\n        \"\"\"\n        if template_path.is_absolute():\n            template_path = template_path.relative_to(TEMPLATES_PATH)\n\n        if template_path in self._template_cache:\n            return self._template_cache[template_path]\n\n        template_full_path = TEMPLATES_PATH / template_path\n\n        if not template_full_path.exists():\n            raise JinjaManagerError(f\"Template {template_full_path} not found\")\n\n        template = self._environment.get_template(template_path.as_posix())\n        self._template_cache[template_path] = template\n\n        return template\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/jinja_manager.py": {
      "JinjaManager.__init__": {
        "code": "    def __init__(self) -> None:\n        \"\"\"Initialize a `JinjaManager` instance.\n\nThis constructor sets up a Jinja2 `Environment` with a custom filter `escape_md` for escaping underscore characters and initializes a template cache to store loaded templates for efficient access. The filter is added to the `_environment.filters` dictionary, allowing it to be used within Jinja2 templates. The `_template_cache` is defined as a dictionary where keys are `Path` objects pointing to templates, and values are the corresponding Jinja2 `Template` instances.\n\nNo parameters are required and the method does not return a value.\"\"\"\n        self._environment.filters['escape_md'] = self.escape_md\n        self._template_cache: dict[Path, Template] = {}",
        "docstring": "Initialize a `JinjaManager` instance.\n\nThis constructor sets up a Jinja2 `Environment` with a custom filter `escape_md` for escaping underscore characters and initializes a template cache to store loaded templates for efficient access. The filter is added to the `_environment.filters` dictionary, allowing it to be used within Jinja2 templates. The `_template_cache` is defined as a dictionary where keys are `Path` objects pointing to templates, and values are the corresponding Jinja2 `Template` instances.\n\nNo parameters are required and the method does not return a value.",
        "signature": "def __init__(self) -> None:",
        "type": "Method",
        "class_signature": "class JinjaManager:"
      },
      "JinjaManager.singleton": {
        "code": "    def singleton(cls) -> Self:\n        \"\"\"Get the singleton instance of the JinjaManager class.\n\nThis method ensures that only one instance of JinjaManager is created, providing global access to a centralized Jinja2 environment. If the instance does not exist, it initializes one; otherwise, it returns the existing instance.\n\nReturns:\n    JinjaManager: The singleton instance of the JinjaManager class.\n\nImportant note:\n- The singleton instance uses a class-level variable `_singleton` to store the instance, ensuring that it is only created once.\"\"\"\n        '\\n        Get singleton instance.\\n        '\n        if cls._singleton is None:\n            cls._singleton = cls()\n        return cls._singleton",
        "docstring": "Get the singleton instance of the JinjaManager class.\n\nThis method ensures that only one instance of JinjaManager is created, providing global access to a centralized Jinja2 environment. If the instance does not exist, it initializes one; otherwise, it returns the existing instance.\n\nReturns:\n    JinjaManager: The singleton instance of the JinjaManager class.\n\nImportant note:\n- The singleton instance uses a class-level variable `_singleton` to store the instance, ensuring that it is only created once.",
        "signature": "def singleton(cls) -> Self:",
        "type": "Method",
        "class_signature": "class JinjaManager:"
      },
      "JinjaManager.get_template": {
        "code": "    def get_template(self, template_path: Path) -> Template:\n        \"\"\"Retrieve a Jinja2 `Template` object based on the provided template path.\n\nParameters:\n    template_path (Path): The path to the template file. This can be either relative or absolute. If absolute, it is converted to a relative path based on the `TEMPLATES_PATH` constant.\n\nReturns:\n    Template: A Jinja2 `Template` object corresponding to the provided path.\n\nRaises:\n    JinjaManagerError: If the resolved template file does not exist in the filesystem.\n\nSide Effects:\n    Caches the template in the `_template_cache` dictionary for future retrieval, reducing file system access for repeated uses of the same template.\n\nNotes:\n    The function utilizes the `TEMPLATES_PATH` constant (defined in the `mypy_boto3_builder.constants` module) to resolve the base directory for template loading.\"\"\"\n        '\\n        Get `jinja2.Template`.\\n        '\n        if template_path.is_absolute():\n            template_path = template_path.relative_to(TEMPLATES_PATH)\n        if template_path in self._template_cache:\n            return self._template_cache[template_path]\n        template_full_path = TEMPLATES_PATH / template_path\n        if not template_full_path.exists():\n            raise JinjaManagerError(f'Template {template_full_path} not found')\n        template = self._environment.get_template(template_path.as_posix())\n        self._template_cache[template_path] = template\n        return template",
        "docstring": "Retrieve a Jinja2 `Template` object based on the provided template path.\n\nParameters:\n    template_path (Path): The path to the template file. This can be either relative or absolute. If absolute, it is converted to a relative path based on the `TEMPLATES_PATH` constant.\n\nReturns:\n    Template: A Jinja2 `Template` object corresponding to the provided path.\n\nRaises:\n    JinjaManagerError: If the resolved template file does not exist in the filesystem.\n\nSide Effects:\n    Caches the template in the `_template_cache` dictionary for future retrieval, reducing file system access for repeated uses of the same template.\n\nNotes:\n    The function utilizes the `TEMPLATES_PATH` constant (defined in the `mypy_boto3_builder.constants` module) to resolve the base directory for template loading.",
        "signature": "def get_template(self, template_path: Path) -> Template:",
        "type": "Method",
        "class_signature": "class JinjaManager:"
      }
    }
  },
  "dependency_dict": {
    "mypy_boto3_builder/jinja_manager.py:JinjaManager:singleton": {}
  },
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_jinja_manager\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 jinja_manager.py\n        \u251c\u2500\u2500 JinjaManager.__init__\n        \u251c\u2500\u2500 JinjaManager.get_template\n        \u2514\u2500\u2500 JinjaManager.singleton\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for managing and retrieving pre-defined Jinja2 templates. It ensures efficient handling of templates by maintaining a singleton instance, facilitating reuse and consistency across operations. The module includes capabilities to locate and load templates by their file paths, while also handling cases where templates are unavailable by raising specific exceptions. By streamlining template management, the module simplifies the process of rendering dynamic content for developers and mitigates errors associated with missing or misconfigured templates.\n\n## FILE 1: mypy_boto3_builder/jinja_manager.py\n\n- CLASS METHOD: JinjaManager.__init__\n  - CLASS SIGNATURE: class JinjaManager:\n  - SIGNATURE: def __init__(self) -> None:\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a `JinjaManager` instance.\n\nThis constructor sets up a Jinja2 `Environment` with a custom filter `escape_md` for escaping underscore characters and initializes a template cache to store loaded templates for efficient access. The filter is added to the `_environment.filters` dictionary, allowing it to be used within Jinja2 templates. The `_template_cache` is defined as a dictionary where keys are `Path` objects pointing to templates, and values are the corresponding Jinja2 `Template` instances.\n\nNo parameters are required and the method does not return a value.\n\"\"\"\n```\n\n- CLASS METHOD: JinjaManager.get_template\n  - CLASS SIGNATURE: class JinjaManager:\n  - SIGNATURE: def get_template(self, template_path: Path) -> Template:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a Jinja2 `Template` object based on the provided template path.\n\nParameters:\n    template_path (Path): The path to the template file. This can be either relative or absolute. If absolute, it is converted to a relative path based on the `TEMPLATES_PATH` constant.\n\nReturns:\n    Template: A Jinja2 `Template` object corresponding to the provided path.\n\nRaises:\n    JinjaManagerError: If the resolved template file does not exist in the filesystem.\n\nSide Effects:\n    Caches the template in the `_template_cache` dictionary for future retrieval, reducing file system access for repeated uses of the same template.\n\nNotes:\n    The function utilizes the `TEMPLATES_PATH` constant (defined in the `mypy_boto3_builder.constants` module) to resolve the base directory for template loading.\n\"\"\"\n```\n\n- CLASS METHOD: JinjaManager.singleton\n  - CLASS SIGNATURE: class JinjaManager:\n  - SIGNATURE: def singleton(cls) -> Self:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the singleton instance of the JinjaManager class.\n\nThis method ensures that only one instance of JinjaManager is created, providing global access to a centralized Jinja2 environment. If the instance does not exist, it initializes one; otherwise, it returns the existing instance.\n\nReturns:\n    JinjaManager: The singleton instance of the JinjaManager class.\n\nImportant note:\n- The singleton instance uses a class-level variable `_singleton` to store the instance, ensuring that it is only created once.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/jinja_manager.py": "\"\"\"\nJinja2 `Environment` manager.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom pathlib import Path\nfrom typing import Any, Self\nfrom jinja2.environment import Environment, Template\nfrom jinja2.loaders import FileSystemLoader\nfrom jinja2.runtime import StrictUndefined\nfrom mypy_boto3_builder.constants import TEMPLATES_PATH\nfrom mypy_boto3_builder.exceptions import JinjaManagerError\n__all__ = ['JinjaManager']\n\nclass JinjaManager:\n    \"\"\"\n    Jinja2 `Environment` manager.\n    \"\"\"\n    _environment = Environment(loader=FileSystemLoader(TEMPLATES_PATH.as_posix()), undefined=StrictUndefined)\n    _singleton: Self | None = None\n\n    @classmethod\n    def update_globals(cls, **kwargs: Any) -> None:\n        \"\"\"\n        Update global variables in `jinja2.Environment`.\n\n        Arguments:\n            kwargs -- Globals to set.\n        \"\"\"\n        cls._environment.globals.update(kwargs)\n\n    @staticmethod\n    def escape_md(value: str) -> str:\n        \"\"\"\n        Escape underscore characters.\n        \"\"\"\n        return value.replace('_', '\\\\_')"
  },
  "call_tree": {
    "tests/test_jinja_manager.py:TestJinjaManager:test_init": {
      "mypy_boto3_builder/jinja_manager.py:JinjaManager:__init__": {},
      "mypy_boto3_builder/jinja_manager.py:JinjaManager:singleton": {
        "mypy_boto3_builder/jinja_manager.py:JinjaManager:__init__": {}
      }
    },
    "tests/test_jinja_manager.py:TestJinjaManager:test_get_template": {
      "mypy_boto3_builder/jinja_manager.py:JinjaManager:__init__": {},
      "mypy_boto3_builder/jinja_manager.py:JinjaManager:get_template": {}
    }
  }
}