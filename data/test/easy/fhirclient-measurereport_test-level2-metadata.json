{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-measurereport_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/measurereport_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import measurereport\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MeasureReportTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MeasureReport\", js[\"resourceType\"])\n        return measurereport.MeasureReport(js)\n    \n    def testMeasureReport1(self):\n        inst = self.instantiate_from(\"measurereport-cms146-cat1-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MeasureReport instance\")\n        self.implMeasureReport1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MeasureReport\", js[\"resourceType\"])\n        inst2 = measurereport.MeasureReport(js)\n        self.implMeasureReport1(inst2)\n    \n    def implMeasureReport1(self, inst):\n        self.assertEqual(inst.contained[0].id, \"reporter\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2014-04-01\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2014-04-01\")\n        self.assertEqual(inst.group[0].id, \"CMS146-group-1\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].count, 1)\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[1].count, 1)\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[2].count, 1)\n        self.assertEqual(inst.group[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].code[0].text, \"stratifier-ages-up-to-9\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 1)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 1)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 1)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[1].code[0].text, \"stratifier-ages-10-plus\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 1)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 1)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 1)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[2].code[0].text, \"stratifier-gender\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 1)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 1)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 1)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text, \"male\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text, \"female\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text, \"other\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text, \"unknown\")\n        self.assertEqual(inst.id, \"measurereport-cms146-cat1-example\")\n        self.assertEqual(inst.identifier[0].value, \"measurereport-cms146-cat1-example-2017-03-13\")\n        self.assertEqual(inst.measure, \"Measure/CMS146\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2014-03-31\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2014-03-31\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2014-01-01\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2014-01-01\")\n        self.assertEqual(inst.status, \"complete\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"individual\")\n    \n    def testMeasureReport2(self):\n        inst = self.instantiate_from(\"measurereport-cms146-cat2-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MeasureReport instance\")\n        self.implMeasureReport2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MeasureReport\", js[\"resourceType\"])\n        inst2 = measurereport.MeasureReport(js)\n        self.implMeasureReport2(inst2)\n    \n    def implMeasureReport2(self, inst):\n        self.assertEqual(inst.contained[0].id, \"reporter\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2014-04-01\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2014-04-01\")\n        self.assertEqual(inst.group[0].id, \"CMS146-group-1\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].count, 500)\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[1].count, 200)\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[2].count, 500)\n        self.assertEqual(inst.group[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].population[3].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].code[0].text, \"stratifier-ages-up-to-9\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[1].code[0].text, \"stratifier-ages-10-plus\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[2].code[0].text, \"stratifier-gender\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text, \"male\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text, \"female\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text, \"other\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code, \"denominator-exclusions\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text, \"unknown\")\n        self.assertEqual(inst.id, \"measurereport-cms146-cat2-example\")\n        self.assertEqual(inst.identifier[0].value, \"measurereport-cms146-cat2-example-2017-03-13\")\n        self.assertEqual(inst.measure, \"Measure/CMS146\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2014-03-31\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2014-03-31\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2014-01-01\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2014-01-01\")\n        self.assertEqual(inst.status, \"complete\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"subject-list\")\n    \n    def testMeasureReport3(self):\n        inst = self.instantiate_from(\"measurereport-cms146-cat3-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MeasureReport instance\")\n        self.implMeasureReport3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MeasureReport\", js[\"resourceType\"])\n        inst2 = measurereport.MeasureReport(js)\n        self.implMeasureReport3(inst2)\n    \n    def implMeasureReport3(self, inst):\n        self.assertEqual(inst.contained[0].id, \"reporter\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2014-04-01\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2014-04-01\")\n        self.assertEqual(inst.group[0].id, \"CMS146-group-1\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].count, 500)\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[1].count, 200)\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[2].count, 500)\n        self.assertEqual(inst.group[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].population[3].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].code[0].text, \"stratifier-ages-up-to-9\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[0].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[1].code[0].text, \"stratifier-ages-10-plus\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[0].value.text, \"true\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[1].stratum[1].value.text, \"false\")\n        self.assertEqual(inst.group[0].stratifier[2].code[0].text, \"stratifier-gender\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[0].value.text, \"male\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[0].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[1].count, 100)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[2].count, 250)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].population[3].count, 50)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[1].value.text, \"female\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[2].value.text, \"other\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[0].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[1].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[2].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].population[3].count, 0)\n        self.assertEqual(inst.group[0].stratifier[2].stratum[3].value.text, \"unknown\")\n        self.assertEqual(inst.id, \"measurereport-cms146-cat3-example\")\n        self.assertEqual(inst.identifier[0].value, \"measurereport-cms146-cat3-example-2017-03-13\")\n        self.assertEqual(inst.measure, \"Measure/CMS146\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2014-03-31\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2014-03-31\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2014-01-01\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2014-01-01\")\n        self.assertEqual(inst.status, \"complete\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"summary\")\n\n",
  "GT_file_code": {
    "fhirclient/models/measurereport.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MeasureReport).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MeasureReport(domainresource.DomainResource):\n    \"\"\" Results of a measure evaluation.\n    \n    The MeasureReport resource contains the results of the calculation of a\n    measure; and optionally a reference to the resources involved in that\n    calculation.\n    \"\"\"\n    \n    resource_type = \"MeasureReport\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.date = None\n        \"\"\" When the report was generated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.evaluatedResource = None\n        \"\"\" What data was used to calculate the measure score.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.group = None\n        \"\"\" Measure results for each group.\n        List of `MeasureReportGroup` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the MeasureReport.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.improvementNotation = None\n        \"\"\" increase | decrease.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.measure = None\n        \"\"\" What measure was calculated.\n        Type `str`. \"\"\"\n        \n        self.period = None\n        \"\"\" What period the report covers.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.reporter = None\n        \"\"\" Who is reporting the data.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" complete | pending | error.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" What individual(s) the report is for.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" individual | subject-list | summary | data-collection.\n        Type `str`. \"\"\"\n        \n        super(MeasureReport, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReport, self).elementProperties()\n        js.extend([\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"evaluatedResource\", \"evaluatedResource\", fhirreference.FHIRReference, True, None, False),\n            (\"group\", \"group\", MeasureReportGroup, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"improvementNotation\", \"improvementNotation\", codeableconcept.CodeableConcept, False, None, False),\n            (\"measure\", \"measure\", str, False, None, True),\n            (\"period\", \"period\", period.Period, False, None, True),\n            (\"reporter\", \"reporter\", fhirreference.FHIRReference, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MeasureReportGroup(backboneelement.BackboneElement):\n    \"\"\" Measure results for each group.\n    \n    The results of the calculation, one for each population group in the\n    measure.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Meaning of the group.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.measureScore = None\n        \"\"\" What score this group achieved.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.population = None\n        \"\"\" The populations in the group.\n        List of `MeasureReportGroupPopulation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.stratifier = None\n        \"\"\" Stratification results.\n        List of `MeasureReportGroupStratifier` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroup, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"measureScore\", \"measureScore\", quantity.Quantity, False, None, False),\n            (\"population\", \"population\", MeasureReportGroupPopulation, True, None, False),\n            (\"stratifier\", \"stratifier\", MeasureReportGroupStratifier, True, None, False),\n        ])\n        return js\n\n\nclass MeasureReportGroupPopulation(backboneelement.BackboneElement):\n    \"\"\" The populations in the group.\n    \n    The populations that make up the population group, one for each type of\n    population appropriate for the measure.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroupPopulation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" initial-population | numerator | numerator-exclusion | denominator\n        | denominator-exclusion | denominator-exception | measure-\n        population | measure-population-exclusion | measure-observation.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.count = None\n        \"\"\" Size of the population.\n        Type `int`. \"\"\"\n        \n        self.subjectResults = None\n        \"\"\" For subject-list reports, the subject results in this population.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroupPopulation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroupPopulation, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"count\", \"count\", int, False, None, False),\n            (\"subjectResults\", \"subjectResults\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass MeasureReportGroupStratifier(backboneelement.BackboneElement):\n    \"\"\" Stratification results.\n    \n    When a measure includes multiple stratifiers, there will be a stratifier\n    group for each stratifier defined by the measure.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroupStratifier\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" What stratifier of the group.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.stratum = None\n        \"\"\" Stratum results, one for each unique value, or set of values, in\n        the stratifier, or stratifier components.\n        List of `MeasureReportGroupStratifierStratum` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroupStratifier, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifier, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"stratum\", \"stratum\", MeasureReportGroupStratifierStratum, True, None, False),\n        ])\n        return js\n\n\nclass MeasureReportGroupStratifierStratum(backboneelement.BackboneElement):\n    \"\"\" Stratum results, one for each unique value, or set of values, in the\n    stratifier, or stratifier components.\n    \n    This element contains the results for a single stratum within the\n    stratifier. For example, when stratifying on administrative gender, there\n    will be four strata, one for each possible gender value.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroupStratifierStratum\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.component = None\n        \"\"\" Stratifier component values.\n        List of `MeasureReportGroupStratifierStratumComponent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.measureScore = None\n        \"\"\" What score this stratum achieved.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.population = None\n        \"\"\" Population results in this stratum.\n        List of `MeasureReportGroupStratifierStratumPopulation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" The stratum value, e.g. male.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroupStratifierStratum, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratum, self).elementProperties()\n        js.extend([\n            (\"component\", \"component\", MeasureReportGroupStratifierStratumComponent, True, None, False),\n            (\"measureScore\", \"measureScore\", quantity.Quantity, False, None, False),\n            (\"population\", \"population\", MeasureReportGroupStratifierStratumPopulation, True, None, False),\n            (\"value\", \"value\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MeasureReportGroupStratifierStratumComponent(backboneelement.BackboneElement):\n    \"\"\" Stratifier component values.\n    \n    A stratifier component value.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroupStratifierStratumComponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" What stratifier component of the group.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" The stratum component value, e.g. male.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroupStratifierStratumComponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratumComponent, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"value\", \"value\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MeasureReportGroupStratifierStratumPopulation(backboneelement.BackboneElement):\n    \"\"\" Population results in this stratum.\n    \n    The populations that make up the stratum, one for each type of population\n    appropriate to the measure.\n    \"\"\"\n    \n    resource_type = \"MeasureReportGroupStratifierStratumPopulation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" initial-population | numerator | numerator-exclusion | denominator\n        | denominator-exclusion | denominator-exception | measure-\n        population | measure-population-exclusion | measure-observation.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.count = None\n        \"\"\" Size of the population.\n        Type `int`. \"\"\"\n        \n        self.subjectResults = None\n        \"\"\" For subject-list reports, the subject results in this population.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureReportGroupStratifierStratumPopulation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratumPopulation, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"count\", \"count\", int, False, None, False),\n            (\"subjectResults\", \"subjectResults\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/measurereport.py": {
      "MeasureReport.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MeasureReport instance, which captures the results of a measure evaluation, including associated metadata and calculated performance metrics.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, allowing for properties to be set from existing data.\n- strict (bool, optional): When True (default), invalid variables raise a TypeError during initialization.\n\nAttributes:\n- date (FHIRDateTime, optional): The date the report was generated, stored as a string in JSON.\n- evaluatedResource (List[FHIRReference], optional): The data used to calculate the measure score.\n- group (List[MeasureReportGroup], optional): Results for each group in the measure.\n- identifier (List[Identifier], optional): Additional identifiers for the MeasureReport.\n- improvementNotation (CodeableConcept, optional): Indicates whether the score improved, decreased, or remains unchanged.\n- measure (str, required): The measure that was calculated.\n- period (Period, required): The period covered by the report.\n- reporter (FHIRReference, optional): The entity reporting the data.\n- status (str, required): The status of the report, e.g., complete, pending, or error.\n- subject (FHIRReference, optional): The individual(s) the report pertains to.\n- type (str, required): The type of report, e.g., individual or summary.\n\nDependencies:\n- The class inherits from domainresource.DomainResource, ensuring it has properties and methods associated with a FHIR resource.\n- Additional types such as FHIRDateTime, FHIRReference, Identifier, and Period are imported from relevant modules and contribute to defining the data format and validation rules for the attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.date = None\n        ' When the report was generated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.evaluatedResource = None\n        ' What data was used to calculate the measure score.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.group = None\n        ' Measure results for each group.\\n        List of `MeasureReportGroup` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the MeasureReport.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.improvementNotation = None\n        ' increase | decrease.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.measure = None\n        ' What measure was calculated.\\n        Type `str`. '\n        self.period = None\n        ' What period the report covers.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.reporter = None\n        ' Who is reporting the data.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' complete | pending | error.\\n        Type `str`. '\n        self.subject = None\n        ' What individual(s) the report is for.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' individual | subject-list | summary | data-collection.\\n        Type `str`. '\n        super(MeasureReport, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MeasureReport instance, which captures the results of a measure evaluation, including associated metadata and calculated performance metrics.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, allowing for properties to be set from existing data.\n- strict (bool, optional): When True (default), invalid variables raise a TypeError during initialization.\n\nAttributes:\n- date (FHIRDateTime, optional): The date the report was generated, stored as a string in JSON.\n- evaluatedResource (List[FHIRReference], optional): The data used to calculate the measure score.\n- group (List[MeasureReportGroup], optional): Results for each group in the measure.\n- identifier (List[Identifier], optional): Additional identifiers for the MeasureReport.\n- improvementNotation (CodeableConcept, optional): Indicates whether the score improved, decreased, or remains unchanged.\n- measure (str, required): The measure that was calculated.\n- period (Period, required): The period covered by the report.\n- reporter (FHIRReference, optional): The entity reporting the data.\n- status (str, required): The status of the report, e.g., complete, pending, or error.\n- subject (FHIRReference, optional): The individual(s) the report pertains to.\n- type (str, required): The type of report, e.g., individual or summary.\n\nDependencies:\n- The class inherits from domainresource.DomainResource, ensuring it has properties and methods associated with a FHIR resource.\n- Additional types such as FHIRDateTime, FHIRReference, Identifier, and Period are imported from relevant modules and contribute to defining the data format and validation rules for the attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MeasureReport(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance for handling FHIR date strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the date in the FHIR format or None. If a string is provided, it must match the specified regex format (`_REGEX`). The date will be parsed into a Python date representation.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date. If `jsonval` is None, this is set to None.\n- origval (Union[str, None]): The original JSON string used for instantiation, retained for potential future use.\n\nRaises:\n- TypeError: If `jsonval` is not a string when provided.\n- ValueError: If `jsonval` does not match the expected date format.\n\nConstants:\n- _REGEX (re.Pattern): A regular expression pattern used to validate the format of the FHIR date string. Defined as a class-level constant, it ensures that the input meets the expected standard before processing.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance for handling FHIR date strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the date in the FHIR format or None. If a string is provided, it must match the specified regex format (`_REGEX`). The date will be parsed into a Python date representation.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date. If `jsonval` is None, this is set to None.\n- origval (Union[str, None]): The original JSON string used for instantiation, retained for potential future use.\n\nRaises:\n- TypeError: If `jsonval` is not a string when provided.\n- ValueError: If `jsonval` does not match the expected date format.\n\nConstants:\n- _REGEX (re.Pattern): A regular expression pattern used to validate the format of the FHIR date string. Defined as a class-level constant, it ensures that the input meets the expected standard before processing.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets an attribute on the FHIRDate instance, handling special behavior for the `date` property. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the value of the class-level constant `_FIELD`, the original value (`origval`) is cleared, and both the `date` and `_FIELD` attributes are kept in sync. For all other attributes, the default behavior is applied.\n\nThis method interacts with `_FIELD`, a class-level constant that holds the string \"date\", ensuring consistency between the object's internal representation and the original JSON value provided during initialization.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets an attribute on the FHIRDate instance, handling special behavior for the `date` property. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the value of the class-level constant `_FIELD`, the original value (`origval`) is cleared, and both the `date` and `_FIELD` attributes are kept in sync. For all other attributes, the default behavior is applied.\n\nThis method interacts with `_FIELD`, a class-level constant that holds the string \"date\", ensuring consistency between the object's internal representation and the original JSON value provided during initialization.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance, if available. If not, it returns the ISO 8601 string representation of the stored date. The method utilizes the `origval` attribute, which holds the exact input JSON value when the instance was initialized. If `origval` is `None`, the method calls the `isostring` property to provide a normalized date format. This ensures that users can retrieve either the exact JSON input or a transformed version according to the standard date representation, accommodating any partial dates converted to full dates within the class.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance, if available. If not, it returns the ISO 8601 string representation of the stored date. The method utilizes the `origval` attribute, which holds the exact input JSON value when the instance was initialized. If `origval` is `None`, the method calls the `isostring` property to provide a normalized date format. This ensures that users can retrieve either the exact JSON input or a transformed version according to the standard date representation, accommodating any partial dates converted to full dates within the class.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance to a JSON-compliant dictionary by inspecting registered properties defined in `elementProperties()`. It validates that required properties are present and appropriately typed before returning the resulting dictionary.\n\nRaises:\n- FHIRValidationError: If any property has the incorrect type, if required properties are missing, or if list properties are not empty.\n\nReturns:\n- dict: A validated dictionary representation of the instance, suitable for JSON serialization.\n\nThis method utilizes the `elementProperties()` to obtain the properties associated with the instance, which include:\n- `name`: The internal name of the property.\n- `jsname`: The corresponding JSON field name.\n- `typ`: The expected type of the property.\n- `is_list`: A boolean indicating if the property is a list.\n- `of_many`: The alternative name for the property in case of lists.\n- `not_optional`: A boolean indicating if the property is required.\n\nAdditionally, the method tracks found properties and non-optional properties to ensure compliance with the FHIR specification. It raises a `FHIRValidationError` that aggregates any encountered issues during the serialization process, which can include type errors or missing required fields.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance to a JSON-compliant dictionary by inspecting registered properties defined in `elementProperties()`. It validates that required properties are present and appropriately typed before returning the resulting dictionary.\n\nRaises:\n- FHIRValidationError: If any property has the incorrect type, if required properties are missing, or if list properties are not empty.\n\nReturns:\n- dict: A validated dictionary representation of the instance, suitable for JSON serialization.\n\nThis method utilizes the `elementProperties()` to obtain the properties associated with the instance, which include:\n- `name`: The internal name of the property.\n- `jsname`: The corresponding JSON field name.\n- `typ`: The expected type of the property.\n- `is_list`: A boolean indicating if the property is a list.\n- `of_many`: The alternative name for the property in case of lists.\n- `not_optional`: A boolean indicating if the property is required.\n\nAdditionally, the method tracks found properties and non-optional properties to ensure compliance with the FHIR specification. It raises a `FHIRValidationError` that aggregates any encountered issues during the serialization process, which can include type errors or missing required fields.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance, facilitating the handling of FHIR datetime strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a datetime in ISO 8601 format. Defaults to None. This value is passed to the superclass, FHIRDate, for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A naive or aware datetime representation of the provided JSON value, initialized to None.\n\nThe __init__ method calls the superclass constructor, FHIRDate.__init__, handling the original JSON value to support datetime parsing according to FHIR specifications.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance, facilitating the handling of FHIR datetime strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a datetime in ISO 8601 format. Defaults to None. This value is passed to the superclass, FHIRDate, for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A naive or aware datetime representation of the provided JSON value, initialized to None.\n\nThe __init__ method calls the superclass constructor, FHIRDate.__init__, handling the original JSON value to support datetime parsing according to FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`, adding the `resourceType` key to the resulting dictionary. The value is set to the `resource_type` attribute of the class, which is `'FHIRAbstractResource'` for this class. The method does not take any parameters and simply returns the JSON representation of the resource instance.\n\nReturns:\n    dict: A JSON representation of the FHIR resource, including the `resourceType` field indicating the type of the resource.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class method to obtain the base JSON representation before adding the `resourceType`.\n    - `self.resource_type`: This attribute is defined as a class constant, indicating the specific resource type for this instance.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`, adding the `resourceType` key to the resulting dictionary. The value is set to the `resource_type` attribute of the class, which is `'FHIRAbstractResource'` for this class. The method does not take any parameters and simply returns the JSON representation of the resource instance.\n\nReturns:\n    dict: A JSON representation of the FHIR resource, including the `resourceType` field indicating the type of the resource.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class method to obtain the base JSON representation before adding the `resourceType`.\n    - `self.resource_type`: This attribute is defined as a class constant, indicating the specific resource type for this instance.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, setting up properties related to contained resources, extensions, and narrative text.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource's properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables during initialization; if False, allows invalid variables without raising an error.\n\nThis constructor initializes four primary attributes:\n- contained: A list intended for inline resources represented as dictionaries.\n- extension: A list for additional content defined by implementations, represented by Extension items.\n- modifierExtension: A list for extensions that must not be ignored, also represented by Extension items.\n- text: A summary of the resource for human interpretation, represented as a Narrative item.\n\nAdditionally, it calls the superclass initializer from the Resource class to ensure any standardized resource properties are also initialized. This method relies on the `resource` module for its superclass and the `extension` and `narrative` modules for defining the types of specific attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, setting up properties related to contained resources, extensions, and narrative text.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource's properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables during initialization; if False, allows invalid variables without raising an error.\n\nThis constructor initializes four primary attributes:\n- contained: A list intended for inline resources represented as dictionaries.\n- extension: A list for additional content defined by implementations, represented by Extension items.\n- modifierExtension: A list for extensions that must not be ignored, also represented by Extension items.\n- text: A summary of the resource for human interpretation, represented as a Narrative item.\n\nAdditionally, it calls the superclass initializer from the Resource class to ensure any standardized resource properties are also initialized. This method relies on the `resource` module for its superclass and the `extension` and `narrative` modules for defining the types of specific attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/measurereport.py:MeasureReport:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/measurereport.py": {
        "MeasureReport.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(MeasureReport, self).elementProperties()\n        js.extend([('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('evaluatedResource', 'evaluatedResource', fhirreference.FHIRReference, True, None, False), ('group', 'group', MeasureReportGroup, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('improvementNotation', 'improvementNotation', codeableconcept.CodeableConcept, False, None, False), ('measure', 'measure', str, False, None, True), ('period', 'period', period.Period, False, None, True), ('reporter', 'reporter', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False), ('type', 'type', str, False, None, True)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class MeasureReport(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/measurereport_test.py:MeasureReportTests:testMeasureReport1": {
      "tests/models/measurereport_test.py:MeasureReportTests:instantiate_from": {
        "fhirclient/models/measurereport.py:MeasureReport:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measurereport_test.py:MeasureReportTests:implMeasureReport1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/measurereport.py:MeasureReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measurereport_test.py:MeasureReportTests:instantiate_from": {
      "fhirclient/models/measurereport.py:MeasureReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measurereport_test.py:MeasureReportTests:testMeasureReport2": {
      "tests/models/measurereport_test.py:MeasureReportTests:instantiate_from": {
        "fhirclient/models/measurereport.py:MeasureReport:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measurereport_test.py:MeasureReportTests:implMeasureReport2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/measurereport.py:MeasureReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measurereport_test.py:MeasureReportTests:testMeasureReport3": {
      "tests/models/measurereport_test.py:MeasureReportTests:instantiate_from": {
        "fhirclient/models/measurereport.py:MeasureReport:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measurereport_test.py:MeasureReportTests:implMeasureReport3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/measurereport.py:MeasureReport:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measurereport.py:MeasureReport:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-measurereport_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 measurereport.py\n            \u2514\u2500\u2500 MeasureReport.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe MeasureReport testing module serves to validate the functionality and integrity of the MeasureReport resource, a key component of the FHIR (Fast Healthcare Interoperability Resources) standard. This module ensures that MeasureReport instances, which are used to aggregate and report performance metrics in healthcare settings, conform to expected data structures and semantic correctness. It provides capabilities for loading and verifying MeasureReport data against predefined examples, including checks for stratifiers, population counts, and other critical elements like reporting periods and metadata. By automating validation, the module addresses the need for reliable, standards-compliant performance reports, facilitating efficient integration and accuracy in health IT implementations.\n\n## FILE 1: fhirclient/models/measurereport.py\n\n- CLASS METHOD: MeasureReport.__init__\n  - CLASS SIGNATURE: class MeasureReport(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MeasureReport instance, which captures the results of a measure evaluation, including associated metadata and calculated performance metrics.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, allowing for properties to be set from existing data.\n- strict (bool, optional): When True (default), invalid variables raise a TypeError during initialization.\n\nAttributes:\n- date (FHIRDateTime, optional): The date the report was generated, stored as a string in JSON.\n- evaluatedResource (List[FHIRReference], optional): The data used to calculate the measure score.\n- group (List[MeasureReportGroup], optional): Results for each group in the measure.\n- identifier (List[Identifier], optional): Additional identifiers for the MeasureReport.\n- improvementNotation (CodeableConcept, optional): Indicates whether the score improved, decreased, or remains unchanged.\n- measure (str, required): The measure that was calculated.\n- period (Period, required): The period covered by the report.\n- reporter (FHIRReference, optional): The entity reporting the data.\n- status (str, required): The status of the report, e.g., complete, pending, or error.\n- subject (FHIRReference, optional): The individual(s) the report pertains to.\n- type (str, required): The type of report, e.g., individual or summary.\n\nDependencies:\n- The class inherits from domainresource.DomainResource, ensuring it has properties and methods associated with a FHIR resource.\n- Additional types such as FHIRDateTime, FHIRReference, Identifier, and Period are imported from relevant modules and contribute to defining the data format and validation rules for the attributes.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance for handling FHIR date strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the date in the FHIR format or None. If a string is provided, it must match the specified regex format (`_REGEX`). The date will be parsed into a Python date representation.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date. If `jsonval` is None, this is set to None.\n- origval (Union[str, None]): The original JSON string used for instantiation, retained for potential future use.\n\nRaises:\n- TypeError: If `jsonval` is not a string when provided.\n- ValueError: If `jsonval` does not match the expected date format.\n\nConstants:\n- _REGEX (re.Pattern): A regular expression pattern used to validate the format of the FHIR date string. Defined as a class-level constant, it ensures that the input meets the expected standard before processing.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance, if available. If not, it returns the ISO 8601 string representation of the stored date. The method utilizes the `origval` attribute, which holds the exact input JSON value when the instance was initialized. If `origval` is `None`, the method calls the `isostring` property to provide a normalized date format. This ensures that users can retrieve either the exact JSON input or a transformed version according to the standard date representation, accommodating any partial dates converted to full dates within the class.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets an attribute on the FHIRDate instance, handling special behavior for the `date` property. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either 'date' or the value of the class-level constant `_FIELD`, the original value (`origval`) is cleared, and both the `date` and `_FIELD` attributes are kept in sync. For all other attributes, the default behavior is applied.\n\nThis method interacts with `_FIELD`, a class-level constant that holds the string \"date\", ensuring consistency between the object's internal representation and the original JSON value provided during initialization.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance to a JSON-compliant dictionary by inspecting registered properties defined in `elementProperties()`. It validates that required properties are present and appropriately typed before returning the resulting dictionary.\n\nRaises:\n- FHIRValidationError: If any property has the incorrect type, if required properties are missing, or if list properties are not empty.\n\nReturns:\n- dict: A validated dictionary representation of the instance, suitable for JSON serialization.\n\nThis method utilizes the `elementProperties()` to obtain the properties associated with the instance, which include:\n- `name`: The internal name of the property.\n- `jsname`: The corresponding JSON field name.\n- `typ`: The expected type of the property.\n- `is_list`: A boolean indicating if the property is a list.\n- `of_many`: The alternative name for the property in case of lists.\n- `not_optional`: A boolean indicating if the property is required.\n\nAdditionally, the method tracks found properties and non-optional properties to ensure compliance with the FHIR specification. It raises a `FHIRValidationError` that aggregates any encountered issues during the serialization process, which can include type errors or missing required fields.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance, facilitating the handling of FHIR datetime strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON representation of a datetime in ISO 8601 format. Defaults to None. This value is passed to the superclass, FHIRDate, for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A naive or aware datetime representation of the provided JSON value, initialized to None.\n\nThe __init__ method calls the superclass constructor, FHIRDate.__init__, handling the original JSON value to support datetime parsing according to FHIR specifications.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`, adding the `resourceType` key to the resulting dictionary. The value is set to the `resource_type` attribute of the class, which is `'FHIRAbstractResource'` for this class. The method does not take any parameters and simply returns the JSON representation of the resource instance.\n\nReturns:\n    dict: A JSON representation of the FHIR resource, including the `resourceType` field indicating the type of the resource.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class method to obtain the base JSON representation before adding the `resourceType`.\n    - `self.resource_type`: This attribute is defined as a class constant, indicating the specific resource type for this instance.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, setting up properties related to contained resources, extensions, and narrative text.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource's properties. Defaults to None.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables during initialization; if False, allows invalid variables without raising an error.\n\nThis constructor initializes four primary attributes:\n- contained: A list intended for inline resources represented as dictionaries.\n- extension: A list for additional content defined by implementations, represented by Extension items.\n- modifierExtension: A list for extensions that must not be ignored, also represented by Extension items.\n- text: A summary of the resource for human interpretation, represented as a Narrative item.\n\nAdditionally, it calls the superclass initializer from the Resource class to ensure any standardized resource properties are also initialized. This method relies on the `resource` module for its superclass and the `extension` and `narrative` modules for defining the types of specific attributes.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/measurereport.py": "from . import domainresource\n\nclass MeasureReport(domainresource.DomainResource):\n    \"\"\" Results of a measure evaluation.\n    \n    The MeasureReport resource contains the results of the calculation of a\n    measure; and optionally a reference to the resources involved in that\n    calculation.\n    \"\"\"\n    resource_type = 'MeasureReport'\n\n    def elementProperties(self):\n        js = super(MeasureReport, self).elementProperties()\n        js.extend([('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('evaluatedResource', 'evaluatedResource', fhirreference.FHIRReference, True, None, False), ('group', 'group', MeasureReportGroup, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('improvementNotation', 'improvementNotation', codeableconcept.CodeableConcept, False, None, False), ('measure', 'measure', str, False, None, True), ('period', 'period', period.Period, False, None, True), ('reporter', 'reporter', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass MeasureReportGroup(backboneelement.BackboneElement):\n    \"\"\" Measure results for each group.\n    \n    The results of the calculation, one for each population group in the\n    measure.\n    \"\"\"\n    resource_type = 'MeasureReportGroup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Meaning of the group.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.measureScore = None\n        ' What score this group achieved.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.population = None\n        ' The populations in the group.\\n        List of `MeasureReportGroupPopulation` items (represented as `dict` in JSON). '\n        self.stratifier = None\n        ' Stratification results.\\n        List of `MeasureReportGroupStratifier` items (represented as `dict` in JSON). '\n        super(MeasureReportGroup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroup, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('measureScore', 'measureScore', quantity.Quantity, False, None, False), ('population', 'population', MeasureReportGroupPopulation, True, None, False), ('stratifier', 'stratifier', MeasureReportGroupStratifier, True, None, False)])\n        return js\n\nclass MeasureReportGroupPopulation(backboneelement.BackboneElement):\n    \"\"\" The populations in the group.\n    \n    The populations that make up the population group, one for each type of\n    population appropriate for the measure.\n    \"\"\"\n    resource_type = 'MeasureReportGroupPopulation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' initial-population | numerator | numerator-exclusion | denominator\\n        | denominator-exclusion | denominator-exception | measure-\\n        population | measure-population-exclusion | measure-observation.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.count = None\n        ' Size of the population.\\n        Type `int`. '\n        self.subjectResults = None\n        ' For subject-list reports, the subject results in this population.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(MeasureReportGroupPopulation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroupPopulation, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('count', 'count', int, False, None, False), ('subjectResults', 'subjectResults', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass MeasureReportGroupStratifier(backboneelement.BackboneElement):\n    \"\"\" Stratification results.\n    \n    When a measure includes multiple stratifiers, there will be a stratifier\n    group for each stratifier defined by the measure.\n    \"\"\"\n    resource_type = 'MeasureReportGroupStratifier'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' What stratifier of the group.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.stratum = None\n        ' Stratum results, one for each unique value, or set of values, in\\n        the stratifier, or stratifier components.\\n        List of `MeasureReportGroupStratifierStratum` items (represented as `dict` in JSON). '\n        super(MeasureReportGroupStratifier, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifier, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('stratum', 'stratum', MeasureReportGroupStratifierStratum, True, None, False)])\n        return js\n\nclass MeasureReportGroupStratifierStratum(backboneelement.BackboneElement):\n    \"\"\" Stratum results, one for each unique value, or set of values, in the\n    stratifier, or stratifier components.\n    \n    This element contains the results for a single stratum within the\n    stratifier. For example, when stratifying on administrative gender, there\n    will be four strata, one for each possible gender value.\n    \"\"\"\n    resource_type = 'MeasureReportGroupStratifierStratum'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.component = None\n        ' Stratifier component values.\\n        List of `MeasureReportGroupStratifierStratumComponent` items (represented as `dict` in JSON). '\n        self.measureScore = None\n        ' What score this stratum achieved.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.population = None\n        ' Population results in this stratum.\\n        List of `MeasureReportGroupStratifierStratumPopulation` items (represented as `dict` in JSON). '\n        self.value = None\n        ' The stratum value, e.g. male.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MeasureReportGroupStratifierStratum, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratum, self).elementProperties()\n        js.extend([('component', 'component', MeasureReportGroupStratifierStratumComponent, True, None, False), ('measureScore', 'measureScore', quantity.Quantity, False, None, False), ('population', 'population', MeasureReportGroupStratifierStratumPopulation, True, None, False), ('value', 'value', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MeasureReportGroupStratifierStratumComponent(backboneelement.BackboneElement):\n    \"\"\" Stratifier component values.\n    \n    A stratifier component value.\n    \"\"\"\n    resource_type = 'MeasureReportGroupStratifierStratumComponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' What stratifier component of the group.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' The stratum component value, e.g. male.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MeasureReportGroupStratifierStratumComponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratumComponent, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('value', 'value', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MeasureReportGroupStratifierStratumPopulation(backboneelement.BackboneElement):\n    \"\"\" Population results in this stratum.\n    \n    The populations that make up the stratum, one for each type of population\n    appropriate to the measure.\n    \"\"\"\n    resource_type = 'MeasureReportGroupStratifierStratumPopulation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' initial-population | numerator | numerator-exclusion | denominator\\n        | denominator-exclusion | denominator-exception | measure-\\n        population | measure-population-exclusion | measure-observation.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.count = None\n        ' Size of the population.\\n        Type `int`. '\n        self.subjectResults = None\n        ' For subject-list reports, the subject results in this population.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(MeasureReportGroupStratifierStratumPopulation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureReportGroupStratifierStratumPopulation, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('count', 'count', int, False, None, False), ('subjectResults', 'subjectResults', fhirreference.FHIRReference, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}