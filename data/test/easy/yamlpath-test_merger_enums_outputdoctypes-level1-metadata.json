{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_outputdoctypes",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_outputdoctypes.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.outputdoctypes import (\n\tOutputDocTypes)\n\n\nclass Test_merger_enums_outputdoctypes():\n\t\"\"\"Tests for the OutputDocTypes enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert OutputDocTypes.get_names() == [\n\t\t\t\"AUTO\",\n\t\t\t\"JSON\",\n\t\t\t\"YAML\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert OutputDocTypes.get_choices() == [\n\t\t\t\"auto\",\n\t\t\t\"json\",\n\t\t\t\"yaml\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"AUTO\", OutputDocTypes.AUTO),\n\t\t(\"JSON\", OutputDocTypes.JSON),\n\t\t(\"YAML\", OutputDocTypes.YAML),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == OutputDocTypes.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tOutputDocTypes.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/outputdoctypes.py": "\"\"\"\nImplements the OutputDocTypes enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass OutputDocTypes(Enum):\n    \"\"\"\n    Supported Output Document Types.\n\n    Options include:\n\n    `AUTO`\n        The output type is inferred from the first source document.\n\n    `JSON`\n        Force output to be JSON.\n\n    `YAML`\n        Force output to be YAML.\n    \"\"\"\n\n    AUTO = auto()\n    JSON = auto()\n    YAML = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in OutputDocTypes]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in OutputDocTypes.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"OutputDocTypes\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (OutputDocTypes) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in OutputDocTypes.get_names():\n            return OutputDocTypes[check]\n        raise NameError(\n            \"OutputDocTypes has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/outputdoctypes.py": {
      "OutputDocTypes.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all upper-cased entry names of the OutputDocTypes enumeration.\n\nThis static method retrieves the names of all enumeration members defined in the OutputDocTypes class, converting them to upper case. The method does not take any parameters and returns a list of strings, each representing a member name in upper-case format.\n\nReturns:\n    List[str]: A list of upper-case names from the OutputDocTypes enumeration.\n\nNo exceptions are raised by this method, and it relies on the enumeration members defined in the OutputDocTypes class.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in OutputDocTypes]",
        "docstring": "Get all upper-cased entry names of the OutputDocTypes enumeration.\n\nThis static method retrieves the names of all enumeration members defined in the OutputDocTypes class, converting them to upper case. The method does not take any parameters and returns a list of strings, each representing a member name in upper-case format.\n\nReturns:\n    List[str]: A list of upper-case names from the OutputDocTypes enumeration.\n\nNo exceptions are raised by this method, and it relies on the enumeration members defined in the OutputDocTypes class.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class OutputDocTypes(Enum):"
      },
      "OutputDocTypes.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Get all entry names with symbolic representations for the OutputDocTypes enumeration, returning them in lower-case format.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of lower-case names representing the enumeration values.\n\nDependencies:  \n    This method relies on OutputDocTypes.get_names(), which retrieves all upper-cased names of the enumeration. It then converts these names to lower-case and removes duplicates before returning the sorted list.\n\nSide Effects:  \n    N/A\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in OutputDocTypes.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Get all entry names with symbolic representations for the OutputDocTypes enumeration, returning them in lower-case format.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of lower-case names representing the enumeration values.\n\nDependencies:  \n    This method relies on OutputDocTypes.get_names(), which retrieves all upper-cased names of the enumeration. It then converts these names to lower-case and removes duplicates before returning the sorted list.\n\nSide Effects:  \n    N/A",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class OutputDocTypes(Enum):"
      },
      "OutputDocTypes.from_str": {
        "code": "    def from_str(name: str) -> 'OutputDocTypes':\n        \"\"\"Converts a string representation of an enumeration value to the corresponding `OutputDocTypes` enumeration instance, if valid. \n\nParameters:\n    name (str): The string name of the enumeration value to convert.\n\nReturns:\n    OutputDocTypes: The corresponding enumeration value if the input string matches an entry.\n\nRaises:\n    NameError: If the provided string does not match any enumeration names.\n\nThis method interacts with the class method `get_names()`, which retrieves the valid upper-cased enumeration names, to validate the input string. It raises a `NameError` if the input does not correspond to a valid `OutputDocTypes` value.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (OutputDocTypes) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in OutputDocTypes.get_names():\n            return OutputDocTypes[check]\n        raise NameError('OutputDocTypes has no such item:  {}'.format(name))",
        "docstring": "Converts a string representation of an enumeration value to the corresponding `OutputDocTypes` enumeration instance, if valid. \n\nParameters:\n    name (str): The string name of the enumeration value to convert.\n\nReturns:\n    OutputDocTypes: The corresponding enumeration value if the input string matches an entry.\n\nRaises:\n    NameError: If the provided string does not match any enumeration names.\n\nThis method interacts with the class method `get_names()`, which retrieves the valid upper-cased enumeration names, to validate the input string. It raises a `NameError` if the input does not correspond to a valid `OutputDocTypes` value.",
        "signature": "def from_str(name: str) -> 'OutputDocTypes':",
        "type": "Method",
        "class_signature": "class OutputDocTypes(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_choices": {},
    "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_outputdoctypes\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 outputdoctypes.py\n                \u251c\u2500\u2500 OutputDocTypes.from_str\n                \u251c\u2500\u2500 OutputDocTypes.get_choices\n                \u2514\u2500\u2500 OutputDocTypes.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and verify the functionality of the `OutputDocTypes` enumeration, which is used to standardize and manage output document types such as AUTO, JSON, and YAML. It provides capabilities to retrieve valid output type names, retrieve lowercase user-friendly choices, and convert string representations into their corresponding enumeration types, while also handling invalid inputs gracefully. By ensuring the reliability and consistency of these enumeration operations, the module solves the problem of potential issues arising from invalid or mismatched output type handling, offering developers a robust way to manage document output formats in their applications.\n\n## FILE 1: yamlpath/merger/enums/outputdoctypes.py\n\n- CLASS METHOD: OutputDocTypes.get_names\n  - CLASS SIGNATURE: class OutputDocTypes(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all upper-cased entry names of the OutputDocTypes enumeration.\n\nThis static method retrieves the names of all enumeration members defined in the OutputDocTypes class, converting them to upper case. The method does not take any parameters and returns a list of strings, each representing a member name in upper-case format.\n\nReturns:\n    List[str]: A list of upper-case names from the OutputDocTypes enumeration.\n\nNo exceptions are raised by this method, and it relies on the enumeration members defined in the OutputDocTypes class.\n\"\"\"\n```\n\n- CLASS METHOD: OutputDocTypes.get_choices\n  - CLASS SIGNATURE: class OutputDocTypes(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names with symbolic representations for the OutputDocTypes enumeration, returning them in lower-case format.\n\nParameters:  \n    N/A\n\nReturns:  \n    (List[str]) A sorted list of lower-case names representing the enumeration values.\n\nDependencies:  \n    This method relies on OutputDocTypes.get_names(), which retrieves all upper-cased names of the enumeration. It then converts these names to lower-case and removes duplicates before returning the sorted list.\n\nSide Effects:  \n    N/A\n\"\"\"\n```\n\n- CLASS METHOD: OutputDocTypes.from_str\n  - CLASS SIGNATURE: class OutputDocTypes(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'OutputDocTypes':\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a string representation of an enumeration value to the corresponding `OutputDocTypes` enumeration instance, if valid. \n\nParameters:\n    name (str): The string name of the enumeration value to convert.\n\nReturns:\n    OutputDocTypes: The corresponding enumeration value if the input string matches an entry.\n\nRaises:\n    NameError: If the provided string does not match any enumeration names.\n\nThis method interacts with the class method `get_names()`, which retrieves the valid upper-cased enumeration names, to validate the input string. It raises a `NameError` if the input does not correspond to a valid `OutputDocTypes` value.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/outputdoctypes.py": "\"\"\"\nImplements the OutputDocTypes enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass OutputDocTypes(Enum):\n    \"\"\"\n    Supported Output Document Types.\n\n    Options include:\n\n    `AUTO`\n        The output type is inferred from the first source document.\n\n    `JSON`\n        Force output to be JSON.\n\n    `YAML`\n        Force output to be YAML.\n    \"\"\"\n    AUTO = auto()\n    JSON = auto()\n    YAML = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_outputdoctypes.py:Test_merger_enums_outputdoctypes:test_get_names": {
      "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_names": {}
    },
    "tests/test_merger_enums_outputdoctypes.py:Test_merger_enums_outputdoctypes:test_get_choices": {
      "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_choices": {
        "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_names": {}
      }
    },
    "tests/test_merger_enums_outputdoctypes.py:Test_merger_enums_outputdoctypes:test_from_str": {
      "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:from_str": {
        "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_names": {}
      }
    },
    "tests/test_merger_enums_outputdoctypes.py:Test_merger_enums_outputdoctypes:test_from_str_nameerror": {
      "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:from_str": {
        "yamlpath/merger/enums/outputdoctypes.py:OutputDocTypes:get_names": {}
      }
    }
  }
}