{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_batch_context",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_batch_context.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.batch_context import BatchContext\n\nclass TestBatchContext(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testBatchContextWithoutPlan(self):\n        model = mparticle.models.batch_context.BatchContext()\n        context_dict = model.to_dict()\n        self.assertIsNone(context_dict[\"data_plan\"])\n\n    def testBatchContextWithPlan(self):\n        dataplan = mparticle.models.data_plan_context.DataPlanContext()\n        model = mparticle.models.batch_context.BatchContext(dataplan)\n        context_dict = model.to_dict()\n        self.assertIsNotNone(context_dict[\"data_plan\"])\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/batch_context.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass BatchContext(object):\n\n    def __init__(self, data_plan=None):\n        \"\"\"\n        BatchContext - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'data_plan': 'DataPlanContext'\n        }\n\n        self.attribute_map = {\n            'data_plan': 'data_plan'\n        }\n\n        self._data_plan = data_plan\n\n    @property\n    def data_plan(self):\n        \"\"\"\n        Gets the DataPlanContext of this BatchContext.\n\n\n        :return: The DataPlanContext of this BatchContext.\n        :rtype: DataPlanContext\n        \"\"\"\n        return self._data_plan\n\n    @data_plan.setter\n    def data_plan(self, data_plan):\n        \"\"\"\n        Sets the DataPlanContext of this BatchContext.\n\n\n        :param data_plan: The DataPlanContext of this BatchContext.\n        :type: DataPlanContext\n        \"\"\"\n\n        self._data_plan = data_plan\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n",
    "mparticle/models/data_plan_context.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass DataPlanContext(object):\n\n    def __init__(self, plan_id=None, plan_version=None):\n        \"\"\"\n        DataPlanContext - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'plan_id': 'str',\n            'plan_version': 'int'\n        }\n\n        self.attribute_map = {\n            'plan_id': 'plan_id',\n            'plan_version': 'plan_version'\n        }\n\n        self._plan_id = plan_id\n        self._plan_version = plan_version\n\n    @property\n    def plan_id(self):\n        \"\"\"\n        Gets the plan_id of this DataPlanContext.\n\n\n        :return: The plan_id of this DataPlanContext.\n        :rtype: str\n        \"\"\"\n        return self._plan_id\n\n    @plan_id.setter\n    def plan_id(self, plan_id):\n        \"\"\"\n        Sets the plan_id of this DataPlanContext.\n\n\n        :param plan_id: The plan_id of this DataPlanContext.\n        :type: str\n        \"\"\"\n\n        self._plan_id = plan_id\n\n    @property\n    def plan_version(self):\n        \"\"\"\n        Gets the plan_version of this DataPlanContext.\n\n\n        :return: The plan_version of this DataPlanContext.\n        :rtype: int\n        \"\"\"\n        return self._plan_version\n\n    @plan_version.setter\n    def plan_version(self, plan_version):\n        \"\"\"\n        Sets the plan_version of this DataPlanContext.\n\n\n        :param plan_version: The plan_version of this DataPlanContext.\n        :type: int\n        \"\"\"\n\n        self._plan_version = plan_version\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/batch_context.py": {
      "BatchContext.__init__": {
        "code": "    def __init__(self, data_plan=None):\n        \"\"\"Initializes a BatchContext instance, which is a model defined in Swagger for handling batch processing events. \n\n    :param data_plan: An instance of DataPlanContext, which holds the context of the data plan associated with this batch. \n                      Defaults to None if not provided.\n    \n    This constructor also defines the `swagger_types` and `attribute_map` dictionaries, which map the class attributes to their data types and their corresponding JSON keys, respectively. The `swagger_types` dictionary indicates that `data_plan` is expected to be of type 'DataPlanContext'.\"\"\"\n        '\\n        BatchContext - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'data_plan': 'DataPlanContext'}\n        self.attribute_map = {'data_plan': 'data_plan'}\n        self._data_plan = data_plan",
        "docstring": "Initializes a BatchContext instance, which is a model defined in Swagger for handling batch processing events. \n\n:param data_plan: An instance of DataPlanContext, which holds the context of the data plan associated with this batch. \n                  Defaults to None if not provided.\n\nThis constructor also defines the `swagger_types` and `attribute_map` dictionaries, which map the class attributes to their data types and their corresponding JSON keys, respectively. The `swagger_types` dictionary indicates that `data_plan` is expected to be of type 'DataPlanContext'.",
        "signature": "def __init__(self, data_plan=None):",
        "type": "Method",
        "class_signature": "class BatchContext(object):"
      },
      "BatchContext.to_dict": {
        "code": "    def to_dict(self):\n        \"\"\"Returns the properties of the BatchContext model as a dictionary. The method iterates over the attributes defined in the `swagger_types` dictionary, which maps attribute names to their types. It handles various data types, including lists, nested objects (that implement a `to_dict` method), and standard dictionary mappings, recursively converting them into dictionary format. The final result is a dictionary representation of the instance's state, enabling easy serialization.\n\nNo parameters are accepted by this method, and it returns a dictionary consisting of the model's attributes. The conversion process utilizes the `iteritems` function from the `six` module for compatibility across Python versions and the `pformat` function from the `pprint` module for pretty-printing, particularly useful for debugging and logging.\"\"\"\n        '\\n        Returns the model properties as a dict\\n        '\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result",
        "docstring": "Returns the properties of the BatchContext model as a dictionary. The method iterates over the attributes defined in the `swagger_types` dictionary, which maps attribute names to their types. It handles various data types, including lists, nested objects (that implement a `to_dict` method), and standard dictionary mappings, recursively converting them into dictionary format. The final result is a dictionary representation of the instance's state, enabling easy serialization.\n\nNo parameters are accepted by this method, and it returns a dictionary consisting of the model's attributes. The conversion process utilizes the `iteritems` function from the `six` module for compatibility across Python versions and the `pformat` function from the `pprint` module for pretty-printing, particularly useful for debugging and logging.",
        "signature": "def to_dict(self):",
        "type": "Method",
        "class_signature": "class BatchContext(object):"
      }
    },
    "mparticle/models/data_plan_context.py": {
      "DataPlanContext.__init__": {
        "code": "    def __init__(self, plan_id=None, plan_version=None):\n        \"\"\"Initializes a new instance of the DataPlanContext class, which models a data plan context defined in Swagger. \n\n    This constructor accepts two optional parameters:\n    \n    :param plan_id: A string representing the ID of the data plan. Default is None.\n    :param plan_version: An integer representing the version of the data plan. Default is None.\n\n    The class also defines two dictionaries: `swagger_types` and `attribute_map`. \n    - `swagger_types` maps attribute names to their expected data types, which helps in serializing/deserializing the model.\n    - `attribute_map` maps attribute names to their corresponding JSON keys for use in API interactions.\n\n    The attributes `_plan_id` and `_plan_version` are initialized based on the provided parameters, allowing instances of this class to encapsulate the specific data plan context used in various operations within the mParticle Event API.\"\"\"\n        '\\n        DataPlanContext - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'plan_id': 'str', 'plan_version': 'int'}\n        self.attribute_map = {'plan_id': 'plan_id', 'plan_version': 'plan_version'}\n        self._plan_id = plan_id\n        self._plan_version = plan_version",
        "docstring": "Initializes a new instance of the DataPlanContext class, which models a data plan context defined in Swagger. \n\nThis constructor accepts two optional parameters:\n\n:param plan_id: A string representing the ID of the data plan. Default is None.\n:param plan_version: An integer representing the version of the data plan. Default is None.\n\nThe class also defines two dictionaries: `swagger_types` and `attribute_map`. \n- `swagger_types` maps attribute names to their expected data types, which helps in serializing/deserializing the model.\n- `attribute_map` maps attribute names to their corresponding JSON keys for use in API interactions.\n\nThe attributes `_plan_id` and `_plan_version` are initialized based on the provided parameters, allowing instances of this class to encapsulate the specific data plan context used in various operations within the mParticle Event API.",
        "signature": "def __init__(self, plan_id=None, plan_version=None):",
        "type": "Method",
        "class_signature": "class DataPlanContext(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/batch_context.py:BatchContext:to_dict": {
      "mparticle/models/batch_context.py": {
        "BatchContext.data_plan": {
          "code": "    def data_plan(self, data_plan):\n        \"\"\"\n        Sets the DataPlanContext of this BatchContext.\n\n\n        :param data_plan: The DataPlanContext of this BatchContext.\n        :type: DataPlanContext\n        \"\"\"\n        self._data_plan = data_plan",
          "docstring": "Sets the DataPlanContext of this BatchContext.\n\n\n:param data_plan: The DataPlanContext of this BatchContext.\n:type: DataPlanContext",
          "signature": "def data_plan(self, data_plan):",
          "type": "Method",
          "class_signature": "class BatchContext(object):"
        }
      },
      "mparticle/models/data_plan_context.py": {
        "DataPlanContext.to_dict": {
          "code": "    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result",
          "docstring": "Returns the model properties as a dict",
          "signature": "def to_dict(self):",
          "type": "Method",
          "class_signature": "class DataPlanContext(object):"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mparticle-test_batch_context\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 batch_context.py\n        \u2502   \u251c\u2500\u2500 BatchContext.__init__\n        \u2502   \u2514\u2500\u2500 BatchContext.to_dict\n        \u2514\u2500\u2500 data_plan_context.py\n            \u2514\u2500\u2500 DataPlanContext.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe mParticle Batch Context module is designed to manage and validate data context within event batches sent through the mParticle Event API. It enables developers to structure and associate event data with a specified data plan, ensuring compliance with predefined schemas or standards. The module provides capabilities for initializing batch contexts, assigning or omitting data plans, and formatting these contexts into a serializable form for API interactions. By simplifying the process of integrating data governance into event streaming, it helps developers maintain data integrity and consistency while adhering to organizational or platform-level event tracking requirements.\n\n## FILE 1: mparticle/models/batch_context.py\n\n- CLASS METHOD: BatchContext.__init__\n  - CLASS SIGNATURE: class BatchContext(object):\n  - SIGNATURE: def __init__(self, data_plan=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a BatchContext instance, which is a model defined in Swagger for handling batch processing events. \n\n:param data_plan: An instance of DataPlanContext, which holds the context of the data plan associated with this batch. \n                  Defaults to None if not provided.\n\nThis constructor also defines the `swagger_types` and `attribute_map` dictionaries, which map the class attributes to their data types and their corresponding JSON keys, respectively. The `swagger_types` dictionary indicates that `data_plan` is expected to be of type 'DataPlanContext'.\n\"\"\"\n```\n\n- CLASS METHOD: BatchContext.to_dict\n  - CLASS SIGNATURE: class BatchContext(object):\n  - SIGNATURE: def to_dict(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the properties of the BatchContext model as a dictionary. The method iterates over the attributes defined in the `swagger_types` dictionary, which maps attribute names to their types. It handles various data types, including lists, nested objects (that implement a `to_dict` method), and standard dictionary mappings, recursively converting them into dictionary format. The final result is a dictionary representation of the instance's state, enabling easy serialization.\n\nNo parameters are accepted by this method, and it returns a dictionary consisting of the model's attributes. The conversion process utilizes the `iteritems` function from the `six` module for compatibility across Python versions and the `pformat` function from the `pprint` module for pretty-printing, particularly useful for debugging and logging.\n\"\"\"\n```\n\n## FILE 2: mparticle/models/data_plan_context.py\n\n- CLASS METHOD: DataPlanContext.__init__\n  - CLASS SIGNATURE: class DataPlanContext(object):\n  - SIGNATURE: def __init__(self, plan_id=None, plan_version=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the DataPlanContext class, which models a data plan context defined in Swagger. \n\nThis constructor accepts two optional parameters:\n\n:param plan_id: A string representing the ID of the data plan. Default is None.\n:param plan_version: An integer representing the version of the data plan. Default is None.\n\nThe class also defines two dictionaries: `swagger_types` and `attribute_map`. \n- `swagger_types` maps attribute names to their expected data types, which helps in serializing/deserializing the model.\n- `attribute_map` maps attribute names to their corresponding JSON keys for use in API interactions.\n\nThe attributes `_plan_id` and `_plan_version` are initialized based on the provided parameters, allowing instances of this class to encapsulate the specific data plan context used in various operations within the mParticle Event API.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/batch_context.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass BatchContext(object):\n\n    @property\n    def data_plan(self):\n        \"\"\"\n        Gets the DataPlanContext of this BatchContext.\n\n\n        :return: The DataPlanContext of this BatchContext.\n        :rtype: DataPlanContext\n        \"\"\"\n        return self._data_plan\n\n    @data_plan.setter\n    def data_plan(self, data_plan):\n        \"\"\"\n        Sets the DataPlanContext of this BatchContext.\n\n\n        :param data_plan: The DataPlanContext of this BatchContext.\n        :type: DataPlanContext\n        \"\"\"\n        self._data_plan = data_plan\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other",
    "mparticle/models/data_plan_context.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass DataPlanContext(object):\n\n    @property\n    def plan_id(self):\n        \"\"\"\n        Gets the plan_id of this DataPlanContext.\n\n\n        :return: The plan_id of this DataPlanContext.\n        :rtype: str\n        \"\"\"\n        return self._plan_id\n\n    @plan_id.setter\n    def plan_id(self, plan_id):\n        \"\"\"\n        Sets the plan_id of this DataPlanContext.\n\n\n        :param plan_id: The plan_id of this DataPlanContext.\n        :type: str\n        \"\"\"\n        self._plan_id = plan_id\n\n    @property\n    def plan_version(self):\n        \"\"\"\n        Gets the plan_version of this DataPlanContext.\n\n\n        :return: The plan_version of this DataPlanContext.\n        :rtype: int\n        \"\"\"\n        return self._plan_version\n\n    @plan_version.setter\n    def plan_version(self, plan_version):\n        \"\"\"\n        Sets the plan_version of this DataPlanContext.\n\n\n        :param plan_version: The plan_version of this DataPlanContext.\n        :type: int\n        \"\"\"\n        self._plan_version = plan_version\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_batch_context.py:TestBatchContext:testBatchContextWithPlan": {
      "mparticle/models/data_plan_context.py:DataPlanContext:__init__": {},
      "mparticle/models/batch_context.py:BatchContext:__init__": {},
      "mparticle/models/batch_context.py:BatchContext:to_dict": {
        "mparticle/models/batch_context.py:BatchContext:data_plan": {},
        "mparticle/models/data_plan_context.py:DataPlanContext:to_dict": {
          "mparticle/models/data_plan_context.py:DataPlanContext:plan_id": {},
          "mparticle/models/data_plan_context.py:DataPlanContext:plan_version": {}
        }
      }
    },
    "test/test_batch_context.py:TestBatchContext:testBatchContextWithoutPlan": {
      "mparticle/models/batch_context.py:BatchContext:__init__": {},
      "mparticle/models/batch_context.py:BatchContext:to_dict": {
        "mparticle/models/batch_context.py:BatchContext:data_plan": {}
      }
    }
  }
}