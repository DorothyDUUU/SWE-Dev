{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_device_current_state",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "modified_testcases/test_device_current_state.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\n# Update the imports to reference from main.py instead of mparticle\nfrom mparticle import DeviceCurrentState\n\nclass TestDeviceCurrentState(unittest.TestCase):\n    \"\"\" DeviceCurrentState unit test stubs \"\"\"\n\n    def setUp(self):\n        # Initialize any necessary data here\n        self.device_state = DeviceCurrentState()\n\n    def tearDown(self):\n        # Clean up any necessary data here\n        pass\n\n    def testDeviceCurrentState(self):\n        \"\"\"\n        Test DeviceCurrentState\n        \"\"\"\n        # Assuming you will fill this with actual assert logic to validate the model\n        self.assertIsInstance(self.device_state, DeviceCurrentState)\n\nif __name__ == '__main__':\n    unittest.main()",
  "GT_file_code": {
    "mparticle/models/device_current_state.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass DeviceCurrentState(object):\n\n    def __init__(self, time_since_start_ms=None, battery_level=None, data_connection_type=None, data_connection_type_detail=None, gps_state=None, total_system_memory_usage_bytes=None, disk_space_free_bytes=None, cpu=None, system_memory_available_bytes=None, system_memory_low=None, system_memory_threshold_bytes=None, application_memory_available_bytes=None, application_memory_max_bytes=None, application_memory_total_bytes=None, device_orientation=None, status_bar_orientation=None):\n        \"\"\"\n        DeviceCurrentState - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'time_since_start_ms': 'int',\n            'battery_level': 'float',\n            'data_connection_type': 'str',\n            'data_connection_type_detail': 'str',\n            'gps_state': 'bool',\n            'total_system_memory_usage_bytes': 'int',\n            'disk_space_free_bytes': 'int',\n            'cpu': 'str',\n            'system_memory_available_bytes': 'float',\n            'system_memory_low': 'bool',\n            'system_memory_threshold_bytes': 'float',\n            'application_memory_available_bytes': 'float',\n            'application_memory_max_bytes': 'float',\n            'application_memory_total_bytes': 'float',\n            'device_orientation': 'str',\n            'status_bar_orientation': 'str'\n        }\n\n        self.attribute_map = {\n            'time_since_start_ms': 'time_since_start_ms',\n            'battery_level': 'battery_level',\n            'data_connection_type': 'data_connection_type',\n            'data_connection_type_detail': 'data_connection_type_detail',\n            'gps_state': 'gps_state',\n            'total_system_memory_usage_bytes': 'total_system_memory_usage_bytes',\n            'disk_space_free_bytes': 'disk_space_free_bytes',\n            'cpu': 'cpu',\n            'system_memory_available_bytes': 'system_memory_available_bytes',\n            'system_memory_low': 'system_memory_low',\n            'system_memory_threshold_bytes': 'system_memory_threshold_bytes',\n            'application_memory_available_bytes': 'application_memory_available_bytes',\n            'application_memory_max_bytes': 'application_memory_max_bytes',\n            'application_memory_total_bytes': 'application_memory_total_bytes',\n            'device_orientation': 'device_orientation',\n            'status_bar_orientation': 'status_bar_orientation'\n        }\n\n        self._time_since_start_ms = time_since_start_ms\n        self._battery_level = battery_level\n        self._data_connection_type = data_connection_type\n        self._data_connection_type_detail = data_connection_type_detail\n        self._gps_state = gps_state\n        self._total_system_memory_usage_bytes = total_system_memory_usage_bytes\n        self._disk_space_free_bytes = disk_space_free_bytes\n        self._cpu = cpu\n        self._system_memory_available_bytes = system_memory_available_bytes\n        self._system_memory_low = system_memory_low\n        self._system_memory_threshold_bytes = system_memory_threshold_bytes\n        self._application_memory_available_bytes = application_memory_available_bytes\n        self._application_memory_max_bytes = application_memory_max_bytes\n        self._application_memory_total_bytes = application_memory_total_bytes\n        self._device_orientation = device_orientation\n        self._status_bar_orientation = status_bar_orientation\n\n    @property\n    def time_since_start_ms(self):\n        \"\"\"\n        Gets the time_since_start_ms of this DeviceCurrentState.\n\n\n        :return: The time_since_start_ms of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._time_since_start_ms\n\n    @time_since_start_ms.setter\n    def time_since_start_ms(self, time_since_start_ms):\n        \"\"\"\n        Sets the time_since_start_ms of this DeviceCurrentState.\n\n\n        :param time_since_start_ms: The time_since_start_ms of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n\n        self._time_since_start_ms = time_since_start_ms\n\n    @property\n    def battery_level(self):\n        \"\"\"\n        Gets the battery_level of this DeviceCurrentState.\n\n\n        :return: The battery_level of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._battery_level\n\n    @battery_level.setter\n    def battery_level(self, battery_level):\n        \"\"\"\n        Sets the battery_level of this DeviceCurrentState.\n\n\n        :param battery_level: The battery_level of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._battery_level = battery_level\n\n    @property\n    def data_connection_type(self):\n        \"\"\"\n        Gets the data_connection_type of this DeviceCurrentState.\n\n\n        :return: The data_connection_type of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._data_connection_type\n\n    @data_connection_type.setter\n    def data_connection_type(self, data_connection_type):\n        \"\"\"\n        Sets the data_connection_type of this DeviceCurrentState.\n\n\n        :param data_connection_type: The data_connection_type of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n\n        self._data_connection_type = data_connection_type\n\n    @property\n    def data_connection_type_detail(self):\n        \"\"\"\n        Gets the data_connection_type_detail of this DeviceCurrentState.\n\n\n        :return: The data_connection_type_detail of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._data_connection_type_detail\n\n    @data_connection_type_detail.setter\n    def data_connection_type_detail(self, data_connection_type_detail):\n        \"\"\"\n        Sets the data_connection_type_detail of this DeviceCurrentState.\n\n\n        :param data_connection_type_detail: The data_connection_type_detail of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n\n        self._data_connection_type_detail = data_connection_type_detail\n\n    @property\n    def gps_state(self):\n        \"\"\"\n        Gets the gps_state of this DeviceCurrentState.\n\n\n        :return: The gps_state of this DeviceCurrentState.\n        :rtype: bool\n        \"\"\"\n        return self._gps_state\n\n    @gps_state.setter\n    def gps_state(self, gps_state):\n        \"\"\"\n        Sets the gps_state of this DeviceCurrentState.\n\n\n        :param gps_state: The gps_state of this DeviceCurrentState.\n        :type: bool\n        \"\"\"\n\n        self._gps_state = gps_state\n\n    @property\n    def total_system_memory_usage_bytes(self):\n        \"\"\"\n        Gets the total_system_memory_usage_bytes of this DeviceCurrentState.\n\n\n        :return: The total_system_memory_usage_bytes of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._total_system_memory_usage_bytes\n\n    @total_system_memory_usage_bytes.setter\n    def total_system_memory_usage_bytes(self, total_system_memory_usage_bytes):\n        \"\"\"\n        Sets the total_system_memory_usage_bytes of this DeviceCurrentState.\n\n\n        :param total_system_memory_usage_bytes: The total_system_memory_usage_bytes of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n\n        self._total_system_memory_usage_bytes = total_system_memory_usage_bytes\n\n    @property\n    def disk_space_free_bytes(self):\n        \"\"\"\n        Gets the disk_space_free_bytes of this DeviceCurrentState.\n\n\n        :return: The disk_space_free_bytes of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._disk_space_free_bytes\n\n    @disk_space_free_bytes.setter\n    def disk_space_free_bytes(self, disk_space_free_bytes):\n        \"\"\"\n        Sets the disk_space_free_bytes of this DeviceCurrentState.\n\n\n        :param disk_space_free_bytes: The disk_space_free_bytes of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n\n        self._disk_space_free_bytes = disk_space_free_bytes\n\n    @property\n    def cpu(self):\n        \"\"\"\n        Gets the cpu of this DeviceCurrentState.\n\n\n        :return: The cpu of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._cpu\n\n    @cpu.setter\n    def cpu(self, cpu):\n        \"\"\"\n        Sets the cpu of this DeviceCurrentState.\n\n\n        :param cpu: The cpu of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n\n        self._cpu = cpu\n\n    @property\n    def system_memory_available_bytes(self):\n        \"\"\"\n        Gets the system_memory_available_bytes of this DeviceCurrentState.\n\n\n        :return: The system_memory_available_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._system_memory_available_bytes\n\n    @system_memory_available_bytes.setter\n    def system_memory_available_bytes(self, system_memory_available_bytes):\n        \"\"\"\n        Sets the system_memory_available_bytes of this DeviceCurrentState.\n\n\n        :param system_memory_available_bytes: The system_memory_available_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._system_memory_available_bytes = system_memory_available_bytes\n\n    @property\n    def system_memory_low(self):\n        \"\"\"\n        Gets the system_memory_low of this DeviceCurrentState.\n\n\n        :return: The system_memory_low of this DeviceCurrentState.\n        :rtype: bool\n        \"\"\"\n        return self._system_memory_low\n\n    @system_memory_low.setter\n    def system_memory_low(self, system_memory_low):\n        \"\"\"\n        Sets the system_memory_low of this DeviceCurrentState.\n\n\n        :param system_memory_low: The system_memory_low of this DeviceCurrentState.\n        :type: bool\n        \"\"\"\n\n        self._system_memory_low = system_memory_low\n\n    @property\n    def system_memory_threshold_bytes(self):\n        \"\"\"\n        Gets the system_memory_threshold_bytes of this DeviceCurrentState.\n\n\n        :return: The system_memory_threshold_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._system_memory_threshold_bytes\n\n    @system_memory_threshold_bytes.setter\n    def system_memory_threshold_bytes(self, system_memory_threshold_bytes):\n        \"\"\"\n        Sets the system_memory_threshold_bytes of this DeviceCurrentState.\n\n\n        :param system_memory_threshold_bytes: The system_memory_threshold_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._system_memory_threshold_bytes = system_memory_threshold_bytes\n\n    @property\n    def application_memory_available_bytes(self):\n        \"\"\"\n        Gets the application_memory_available_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_available_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_available_bytes\n\n    @application_memory_available_bytes.setter\n    def application_memory_available_bytes(self, application_memory_available_bytes):\n        \"\"\"\n        Sets the application_memory_available_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_available_bytes: The application_memory_available_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._application_memory_available_bytes = application_memory_available_bytes\n\n    @property\n    def application_memory_max_bytes(self):\n        \"\"\"\n        Gets the application_memory_max_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_max_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_max_bytes\n\n    @application_memory_max_bytes.setter\n    def application_memory_max_bytes(self, application_memory_max_bytes):\n        \"\"\"\n        Sets the application_memory_max_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_max_bytes: The application_memory_max_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._application_memory_max_bytes = application_memory_max_bytes\n\n    @property\n    def application_memory_total_bytes(self):\n        \"\"\"\n        Gets the application_memory_total_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_total_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_total_bytes\n\n    @application_memory_total_bytes.setter\n    def application_memory_total_bytes(self, application_memory_total_bytes):\n        \"\"\"\n        Sets the application_memory_total_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_total_bytes: The application_memory_total_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n\n        self._application_memory_total_bytes = application_memory_total_bytes\n\n    @property\n    def device_orientation(self):\n        \"\"\"\n        Gets the device_orientation of this DeviceCurrentState.\n\n\n        :return: The device_orientation of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._device_orientation\n\n    @device_orientation.setter\n    def device_orientation(self, device_orientation):\n        \"\"\"\n        Sets the device_orientation of this DeviceCurrentState.\n\n\n        :param device_orientation: The device_orientation of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        allowed_values = [\"unknown\", \"portrait\", \"portrait_upside_down\", \"landscape\", \"LandscapeLeft\", \"LandscapeRight\", \"FaceUp\", \"FaceDown\", \"Square\"]\n        if device_orientation not in allowed_values:\n            raise ValueError(\n                \"Invalid value for `device_orientation` ({0}), must be one of {1}\"\n                .format(device_orientation, allowed_values)\n            )\n\n        self._device_orientation = device_orientation\n\n    @property\n    def status_bar_orientation(self):\n        \"\"\"\n        Gets the status_bar_orientation of this DeviceCurrentState.\n\n\n        :return: The status_bar_orientation of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._status_bar_orientation\n\n    @status_bar_orientation.setter\n    def status_bar_orientation(self, status_bar_orientation):\n        \"\"\"\n        Sets the status_bar_orientation of this DeviceCurrentState.\n\n\n        :param status_bar_orientation: The status_bar_orientation of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        allowed_values = [\"unknown\", \"portrait\", \"portrait_upside_down\", \"landscape\", \"LandscapeLeft\", \"LandscapeRight\", \"FaceUp\", \"FaceDown\", \"Square\"]\n        if status_bar_orientation not in allowed_values:\n            raise ValueError(\n                \"Invalid value for `status_bar_orientation` ({0}), must be one of {1}\"\n                .format(status_bar_orientation, allowed_values)\n            )\n\n        self._status_bar_orientation = status_bar_orientation\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/device_current_state.py": {
      "DeviceCurrentState.__init__": {
        "code": "    def __init__(self, time_since_start_ms=None, battery_level=None, data_connection_type=None, data_connection_type_detail=None, gps_state=None, total_system_memory_usage_bytes=None, disk_space_free_bytes=None, cpu=None, system_memory_available_bytes=None, system_memory_low=None, system_memory_threshold_bytes=None, application_memory_available_bytes=None, application_memory_max_bytes=None, application_memory_total_bytes=None, device_orientation=None, status_bar_orientation=None):\n        \"\"\"Initializes a new instance of the DeviceCurrentState class, which models the current state of a device for event tracking within the mParticle Event API.\n\n    Parameters:\n    - time_since_start_ms (int, optional): The time in milliseconds since the device started (default is None).\n    - battery_level (float, optional): The device's battery level as a percentage (default is None).\n    - data_connection_type (str, optional): The type of data connection, e.g., 'WiFi' or 'cellular' (default is None).\n    - data_connection_type_detail (str, optional): Additional details about the data connection (default is None).\n    - gps_state (bool, optional): Indicates whether GPS is active (default is None).\n    - total_system_memory_usage_bytes (int, optional): Memory usage in bytes (default is None).\n    - disk_space_free_bytes (int, optional): Amount of free disk space in bytes (default is None).\n    - cpu (str, optional): Information about the CPU (default is None).\n    - system_memory_available_bytes (float, optional): Available system memory in bytes (default is None).\n    - system_memory_low (bool, optional): Indicates if system memory is low (default is None).\n    - system_memory_threshold_bytes (float, optional): Threshold for system memory in bytes (default is None).\n    - application_memory_available_bytes (float, optional): Available memory for the application in bytes (default is None).\n    - application_memory_max_bytes (float, optional): Maximum memory limit for the application in bytes (default is None).\n    - application_memory_total_bytes (float, optional): Total memory allocated to the application in bytes (default is None).\n    - device_orientation (str, optional): Current orientation of the device (default is None).\n    - status_bar_orientation (str, optional): Current orientation of the status bar (default is None).\n\n    Attributes:\n    - swagger_types (dict): Maps attribute names to their data types.\n    - attribute_map (dict): Maps attribute names to their corresponding JSON keys in the API definition.\n\n    Purpose:\n    This constructor establishes initial values for the device state attributes, thereby facilitating reporting and tracking of device metrics for analytics and monitoring through the mParticle platform.\"\"\"\n        '\\n        DeviceCurrentState - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'time_since_start_ms': 'int', 'battery_level': 'float', 'data_connection_type': 'str', 'data_connection_type_detail': 'str', 'gps_state': 'bool', 'total_system_memory_usage_bytes': 'int', 'disk_space_free_bytes': 'int', 'cpu': 'str', 'system_memory_available_bytes': 'float', 'system_memory_low': 'bool', 'system_memory_threshold_bytes': 'float', 'application_memory_available_bytes': 'float', 'application_memory_max_bytes': 'float', 'application_memory_total_bytes': 'float', 'device_orientation': 'str', 'status_bar_orientation': 'str'}\n        self.attribute_map = {'time_since_start_ms': 'time_since_start_ms', 'battery_level': 'battery_level', 'data_connection_type': 'data_connection_type', 'data_connection_type_detail': 'data_connection_type_detail', 'gps_state': 'gps_state', 'total_system_memory_usage_bytes': 'total_system_memory_usage_bytes', 'disk_space_free_bytes': 'disk_space_free_bytes', 'cpu': 'cpu', 'system_memory_available_bytes': 'system_memory_available_bytes', 'system_memory_low': 'system_memory_low', 'system_memory_threshold_bytes': 'system_memory_threshold_bytes', 'application_memory_available_bytes': 'application_memory_available_bytes', 'application_memory_max_bytes': 'application_memory_max_bytes', 'application_memory_total_bytes': 'application_memory_total_bytes', 'device_orientation': 'device_orientation', 'status_bar_orientation': 'status_bar_orientation'}\n        self._time_since_start_ms = time_since_start_ms\n        self._battery_level = battery_level\n        self._data_connection_type = data_connection_type\n        self._data_connection_type_detail = data_connection_type_detail\n        self._gps_state = gps_state\n        self._total_system_memory_usage_bytes = total_system_memory_usage_bytes\n        self._disk_space_free_bytes = disk_space_free_bytes\n        self._cpu = cpu\n        self._system_memory_available_bytes = system_memory_available_bytes\n        self._system_memory_low = system_memory_low\n        self._system_memory_threshold_bytes = system_memory_threshold_bytes\n        self._application_memory_available_bytes = application_memory_available_bytes\n        self._application_memory_max_bytes = application_memory_max_bytes\n        self._application_memory_total_bytes = application_memory_total_bytes\n        self._device_orientation = device_orientation\n        self._status_bar_orientation = status_bar_orientation",
        "docstring": "Initializes a new instance of the DeviceCurrentState class, which models the current state of a device for event tracking within the mParticle Event API.\n\nParameters:\n- time_since_start_ms (int, optional): The time in milliseconds since the device started (default is None).\n- battery_level (float, optional): The device's battery level as a percentage (default is None).\n- data_connection_type (str, optional): The type of data connection, e.g., 'WiFi' or 'cellular' (default is None).\n- data_connection_type_detail (str, optional): Additional details about the data connection (default is None).\n- gps_state (bool, optional): Indicates whether GPS is active (default is None).\n- total_system_memory_usage_bytes (int, optional): Memory usage in bytes (default is None).\n- disk_space_free_bytes (int, optional): Amount of free disk space in bytes (default is None).\n- cpu (str, optional): Information about the CPU (default is None).\n- system_memory_available_bytes (float, optional): Available system memory in bytes (default is None).\n- system_memory_low (bool, optional): Indicates if system memory is low (default is None).\n- system_memory_threshold_bytes (float, optional): Threshold for system memory in bytes (default is None).\n- application_memory_available_bytes (float, optional): Available memory for the application in bytes (default is None).\n- application_memory_max_bytes (float, optional): Maximum memory limit for the application in bytes (default is None).\n- application_memory_total_bytes (float, optional): Total memory allocated to the application in bytes (default is None).\n- device_orientation (str, optional): Current orientation of the device (default is None).\n- status_bar_orientation (str, optional): Current orientation of the status bar (default is None).\n\nAttributes:\n- swagger_types (dict): Maps attribute names to their data types.\n- attribute_map (dict): Maps attribute names to their corresponding JSON keys in the API definition.\n\nPurpose:\nThis constructor establishes initial values for the device state attributes, thereby facilitating reporting and tracking of device metrics for analytics and monitoring through the mParticle platform.",
        "signature": "def __init__(self, time_since_start_ms=None, battery_level=None, data_connection_type=None, data_connection_type_detail=None, gps_state=None, total_system_memory_usage_bytes=None, disk_space_free_bytes=None, cpu=None, system_memory_available_bytes=None, system_memory_low=None, system_memory_threshold_bytes=None, application_memory_available_bytes=None, application_memory_max_bytes=None, application_memory_total_bytes=None, device_orientation=None, status_bar_orientation=None):",
        "type": "Method",
        "class_signature": "class DeviceCurrentState(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_device_current_state\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 device_current_state.py\n            \u2514\u2500\u2500 DeviceCurrentState.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the testing and validation of the `DeviceCurrentState` class from the mParticle Event API by providing a structured framework for automated unit tests. Its primary purpose is to ensure the integrity and functionality of the `DeviceCurrentState` model, which likely represents the current state of a device for event tracking or analytics purposes. By enabling developers to verify the class's implementation through assertions and test setups, the module helps maintain the reliability of event-based integrations and data consistency within the mParticle ecosystem. This solution streamlines the process of identifying potential issues early in the development lifecycle, reducing the risk of errors in production environments.\n\n## FILE 1: mparticle/models/device_current_state.py\n\n- CLASS METHOD: DeviceCurrentState.__init__\n  - CLASS SIGNATURE: class DeviceCurrentState(object):\n  - SIGNATURE: def __init__(self, time_since_start_ms=None, battery_level=None, data_connection_type=None, data_connection_type_detail=None, gps_state=None, total_system_memory_usage_bytes=None, disk_space_free_bytes=None, cpu=None, system_memory_available_bytes=None, system_memory_low=None, system_memory_threshold_bytes=None, application_memory_available_bytes=None, application_memory_max_bytes=None, application_memory_total_bytes=None, device_orientation=None, status_bar_orientation=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the DeviceCurrentState class, which models the current state of a device for event tracking within the mParticle Event API.\n\nParameters:\n- time_since_start_ms (int, optional): The time in milliseconds since the device started (default is None).\n- battery_level (float, optional): The device's battery level as a percentage (default is None).\n- data_connection_type (str, optional): The type of data connection, e.g., 'WiFi' or 'cellular' (default is None).\n- data_connection_type_detail (str, optional): Additional details about the data connection (default is None).\n- gps_state (bool, optional): Indicates whether GPS is active (default is None).\n- total_system_memory_usage_bytes (int, optional): Memory usage in bytes (default is None).\n- disk_space_free_bytes (int, optional): Amount of free disk space in bytes (default is None).\n- cpu (str, optional): Information about the CPU (default is None).\n- system_memory_available_bytes (float, optional): Available system memory in bytes (default is None).\n- system_memory_low (bool, optional): Indicates if system memory is low (default is None).\n- system_memory_threshold_bytes (float, optional): Threshold for system memory in bytes (default is None).\n- application_memory_available_bytes (float, optional): Available memory for the application in bytes (default is None).\n- application_memory_max_bytes (float, optional): Maximum memory limit for the application in bytes (default is None).\n- application_memory_total_bytes (float, optional): Total memory allocated to the application in bytes (default is None).\n- device_orientation (str, optional): Current orientation of the device (default is None).\n- status_bar_orientation (str, optional): Current orientation of the status bar (default is None).\n\nAttributes:\n- swagger_types (dict): Maps attribute names to their data types.\n- attribute_map (dict): Maps attribute names to their corresponding JSON keys in the API definition.\n\nPurpose:\nThis constructor establishes initial values for the device state attributes, thereby facilitating reporting and tracking of device metrics for analytics and monitoring through the mParticle platform.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/device_current_state.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass DeviceCurrentState(object):\n\n    @property\n    def time_since_start_ms(self):\n        \"\"\"\n        Gets the time_since_start_ms of this DeviceCurrentState.\n\n\n        :return: The time_since_start_ms of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._time_since_start_ms\n\n    @time_since_start_ms.setter\n    def time_since_start_ms(self, time_since_start_ms):\n        \"\"\"\n        Sets the time_since_start_ms of this DeviceCurrentState.\n\n\n        :param time_since_start_ms: The time_since_start_ms of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n        self._time_since_start_ms = time_since_start_ms\n\n    @property\n    def battery_level(self):\n        \"\"\"\n        Gets the battery_level of this DeviceCurrentState.\n\n\n        :return: The battery_level of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._battery_level\n\n    @battery_level.setter\n    def battery_level(self, battery_level):\n        \"\"\"\n        Sets the battery_level of this DeviceCurrentState.\n\n\n        :param battery_level: The battery_level of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._battery_level = battery_level\n\n    @property\n    def data_connection_type(self):\n        \"\"\"\n        Gets the data_connection_type of this DeviceCurrentState.\n\n\n        :return: The data_connection_type of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._data_connection_type\n\n    @data_connection_type.setter\n    def data_connection_type(self, data_connection_type):\n        \"\"\"\n        Sets the data_connection_type of this DeviceCurrentState.\n\n\n        :param data_connection_type: The data_connection_type of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        self._data_connection_type = data_connection_type\n\n    @property\n    def data_connection_type_detail(self):\n        \"\"\"\n        Gets the data_connection_type_detail of this DeviceCurrentState.\n\n\n        :return: The data_connection_type_detail of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._data_connection_type_detail\n\n    @data_connection_type_detail.setter\n    def data_connection_type_detail(self, data_connection_type_detail):\n        \"\"\"\n        Sets the data_connection_type_detail of this DeviceCurrentState.\n\n\n        :param data_connection_type_detail: The data_connection_type_detail of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        self._data_connection_type_detail = data_connection_type_detail\n\n    @property\n    def gps_state(self):\n        \"\"\"\n        Gets the gps_state of this DeviceCurrentState.\n\n\n        :return: The gps_state of this DeviceCurrentState.\n        :rtype: bool\n        \"\"\"\n        return self._gps_state\n\n    @gps_state.setter\n    def gps_state(self, gps_state):\n        \"\"\"\n        Sets the gps_state of this DeviceCurrentState.\n\n\n        :param gps_state: The gps_state of this DeviceCurrentState.\n        :type: bool\n        \"\"\"\n        self._gps_state = gps_state\n\n    @property\n    def total_system_memory_usage_bytes(self):\n        \"\"\"\n        Gets the total_system_memory_usage_bytes of this DeviceCurrentState.\n\n\n        :return: The total_system_memory_usage_bytes of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._total_system_memory_usage_bytes\n\n    @total_system_memory_usage_bytes.setter\n    def total_system_memory_usage_bytes(self, total_system_memory_usage_bytes):\n        \"\"\"\n        Sets the total_system_memory_usage_bytes of this DeviceCurrentState.\n\n\n        :param total_system_memory_usage_bytes: The total_system_memory_usage_bytes of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n        self._total_system_memory_usage_bytes = total_system_memory_usage_bytes\n\n    @property\n    def disk_space_free_bytes(self):\n        \"\"\"\n        Gets the disk_space_free_bytes of this DeviceCurrentState.\n\n\n        :return: The disk_space_free_bytes of this DeviceCurrentState.\n        :rtype: int\n        \"\"\"\n        return self._disk_space_free_bytes\n\n    @disk_space_free_bytes.setter\n    def disk_space_free_bytes(self, disk_space_free_bytes):\n        \"\"\"\n        Sets the disk_space_free_bytes of this DeviceCurrentState.\n\n\n        :param disk_space_free_bytes: The disk_space_free_bytes of this DeviceCurrentState.\n        :type: int\n        \"\"\"\n        self._disk_space_free_bytes = disk_space_free_bytes\n\n    @property\n    def cpu(self):\n        \"\"\"\n        Gets the cpu of this DeviceCurrentState.\n\n\n        :return: The cpu of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._cpu\n\n    @cpu.setter\n    def cpu(self, cpu):\n        \"\"\"\n        Sets the cpu of this DeviceCurrentState.\n\n\n        :param cpu: The cpu of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        self._cpu = cpu\n\n    @property\n    def system_memory_available_bytes(self):\n        \"\"\"\n        Gets the system_memory_available_bytes of this DeviceCurrentState.\n\n\n        :return: The system_memory_available_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._system_memory_available_bytes\n\n    @system_memory_available_bytes.setter\n    def system_memory_available_bytes(self, system_memory_available_bytes):\n        \"\"\"\n        Sets the system_memory_available_bytes of this DeviceCurrentState.\n\n\n        :param system_memory_available_bytes: The system_memory_available_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._system_memory_available_bytes = system_memory_available_bytes\n\n    @property\n    def system_memory_low(self):\n        \"\"\"\n        Gets the system_memory_low of this DeviceCurrentState.\n\n\n        :return: The system_memory_low of this DeviceCurrentState.\n        :rtype: bool\n        \"\"\"\n        return self._system_memory_low\n\n    @system_memory_low.setter\n    def system_memory_low(self, system_memory_low):\n        \"\"\"\n        Sets the system_memory_low of this DeviceCurrentState.\n\n\n        :param system_memory_low: The system_memory_low of this DeviceCurrentState.\n        :type: bool\n        \"\"\"\n        self._system_memory_low = system_memory_low\n\n    @property\n    def system_memory_threshold_bytes(self):\n        \"\"\"\n        Gets the system_memory_threshold_bytes of this DeviceCurrentState.\n\n\n        :return: The system_memory_threshold_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._system_memory_threshold_bytes\n\n    @system_memory_threshold_bytes.setter\n    def system_memory_threshold_bytes(self, system_memory_threshold_bytes):\n        \"\"\"\n        Sets the system_memory_threshold_bytes of this DeviceCurrentState.\n\n\n        :param system_memory_threshold_bytes: The system_memory_threshold_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._system_memory_threshold_bytes = system_memory_threshold_bytes\n\n    @property\n    def application_memory_available_bytes(self):\n        \"\"\"\n        Gets the application_memory_available_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_available_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_available_bytes\n\n    @application_memory_available_bytes.setter\n    def application_memory_available_bytes(self, application_memory_available_bytes):\n        \"\"\"\n        Sets the application_memory_available_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_available_bytes: The application_memory_available_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._application_memory_available_bytes = application_memory_available_bytes\n\n    @property\n    def application_memory_max_bytes(self):\n        \"\"\"\n        Gets the application_memory_max_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_max_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_max_bytes\n\n    @application_memory_max_bytes.setter\n    def application_memory_max_bytes(self, application_memory_max_bytes):\n        \"\"\"\n        Sets the application_memory_max_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_max_bytes: The application_memory_max_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._application_memory_max_bytes = application_memory_max_bytes\n\n    @property\n    def application_memory_total_bytes(self):\n        \"\"\"\n        Gets the application_memory_total_bytes of this DeviceCurrentState.\n\n\n        :return: The application_memory_total_bytes of this DeviceCurrentState.\n        :rtype: float\n        \"\"\"\n        return self._application_memory_total_bytes\n\n    @application_memory_total_bytes.setter\n    def application_memory_total_bytes(self, application_memory_total_bytes):\n        \"\"\"\n        Sets the application_memory_total_bytes of this DeviceCurrentState.\n\n\n        :param application_memory_total_bytes: The application_memory_total_bytes of this DeviceCurrentState.\n        :type: float\n        \"\"\"\n        self._application_memory_total_bytes = application_memory_total_bytes\n\n    @property\n    def device_orientation(self):\n        \"\"\"\n        Gets the device_orientation of this DeviceCurrentState.\n\n\n        :return: The device_orientation of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._device_orientation\n\n    @device_orientation.setter\n    def device_orientation(self, device_orientation):\n        \"\"\"\n        Sets the device_orientation of this DeviceCurrentState.\n\n\n        :param device_orientation: The device_orientation of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        allowed_values = ['unknown', 'portrait', 'portrait_upside_down', 'landscape', 'LandscapeLeft', 'LandscapeRight', 'FaceUp', 'FaceDown', 'Square']\n        if device_orientation not in allowed_values:\n            raise ValueError('Invalid value for `device_orientation` ({0}), must be one of {1}'.format(device_orientation, allowed_values))\n        self._device_orientation = device_orientation\n\n    @property\n    def status_bar_orientation(self):\n        \"\"\"\n        Gets the status_bar_orientation of this DeviceCurrentState.\n\n\n        :return: The status_bar_orientation of this DeviceCurrentState.\n        :rtype: str\n        \"\"\"\n        return self._status_bar_orientation\n\n    @status_bar_orientation.setter\n    def status_bar_orientation(self, status_bar_orientation):\n        \"\"\"\n        Sets the status_bar_orientation of this DeviceCurrentState.\n\n\n        :param status_bar_orientation: The status_bar_orientation of this DeviceCurrentState.\n        :type: str\n        \"\"\"\n        allowed_values = ['unknown', 'portrait', 'portrait_upside_down', 'landscape', 'LandscapeLeft', 'LandscapeRight', 'FaceUp', 'FaceDown', 'Square']\n        if status_bar_orientation not in allowed_values:\n            raise ValueError('Invalid value for `status_bar_orientation` ({0}), must be one of {1}'.format(status_bar_orientation, allowed_values))\n        self._status_bar_orientation = status_bar_orientation\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "modified_testcases/test_device_current_state.py:TestDeviceCurrentState:setUp": {
      "mparticle/models/device_current_state.py:DeviceCurrentState:__init__": {}
    }
  }
}