{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-immunization_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/immunization_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import immunization\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ImmunizationTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        return immunization.Immunization(js)\n    \n    def testImmunization1(self):\n        inst = self.instantiate_from(\"immunization-example-protocol.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Immunization instance\")\n        self.implImmunization1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        inst2 = immunization.Immunization(js)\n        self.implImmunization1(inst2)\n    \n    def implImmunization1(self, inst):\n        self.assertEqual(inst.doseQuantity.code, \"mg\")\n        self.assertEqual(inst.doseQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.doseQuantity.value, 5)\n        self.assertEqual(inst.expirationDate.date, FHIRDate(\"2018-12-15\").date)\n        self.assertEqual(inst.expirationDate.as_json(), \"2018-12-15\")\n        self.assertEqual(inst.fundingSource.coding[0].code, \"private\")\n        self.assertEqual(inst.fundingSource.coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-funding-source\")\n        self.assertEqual(inst.id, \"protocol\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.1234\")\n        self.assertFalse(inst.isSubpotent)\n        self.assertEqual(inst.lotNumber, \"PT123F\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.occurrenceDateTime.datetime, FHIRDateTime(\"2018-06-18\").datetime)\n        self.assertEqual(inst.occurrenceDateTime.as_json(), \"2018-06-18\")\n        self.assertEqual(inst.performer[0].function.coding[0].code, \"OP\")\n        self.assertEqual(inst.performer[0].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertEqual(inst.performer[1].function.coding[0].code, \"AP\")\n        self.assertEqual(inst.performer[1].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertTrue(inst.primarySource)\n        self.assertEqual(inst.programEligibility[0].coding[0].code, \"ineligible\")\n        self.assertEqual(inst.programEligibility[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-program-eligibility\")\n        self.assertEqual(inst.protocolApplied[0].doseNumberPositiveInt, 1)\n        self.assertEqual(inst.protocolApplied[0].series, \"2-dose\")\n        self.assertEqual(inst.protocolApplied[0].targetDisease[0].coding[0].code, \"40468003\")\n        self.assertEqual(inst.protocolApplied[0].targetDisease[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.protocolApplied[1].doseNumberPositiveInt, 2)\n        self.assertEqual(inst.protocolApplied[1].series, \"3-dose\")\n        self.assertEqual(inst.protocolApplied[1].targetDisease[0].coding[0].code, \"66071002\")\n        self.assertEqual(inst.protocolApplied[1].targetDisease[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.route.coding[0].code, \"IM\")\n        self.assertEqual(inst.route.coding[0].display, \"Injection, intramuscular\")\n        self.assertEqual(inst.route.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration\")\n        self.assertEqual(inst.site.coding[0].code, \"LA\")\n        self.assertEqual(inst.site.coding[0].display, \"left arm\")\n        self.assertEqual(inst.site.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActSite\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.vaccineCode.coding[0].code, \"104\")\n        self.assertEqual(inst.vaccineCode.coding[0].system, \"http://hl7.org/fhir/sid/cvx\")\n        self.assertEqual(inst.vaccineCode.text, \"Twinrix (HepA/HepB)\")\n    \n    def testImmunization2(self):\n        inst = self.instantiate_from(\"immunization-example-subpotent.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Immunization instance\")\n        self.implImmunization2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        inst2 = immunization.Immunization(js)\n        self.implImmunization2(inst2)\n    \n    def implImmunization2(self, inst):\n        self.assertEqual(inst.doseQuantity.code, \"ml\")\n        self.assertEqual(inst.doseQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.doseQuantity.value, 0.5)\n        self.assertEqual(inst.education[0].documentType, \"253088698300010311120702\")\n        self.assertEqual(inst.education[0].presentationDate.datetime, FHIRDateTime(\"2013-01-10\").datetime)\n        self.assertEqual(inst.education[0].presentationDate.as_json(), \"2013-01-10\")\n        self.assertEqual(inst.education[0].publicationDate.datetime, FHIRDateTime(\"2012-07-02\").datetime)\n        self.assertEqual(inst.education[0].publicationDate.as_json(), \"2012-07-02\")\n        self.assertEqual(inst.expirationDate.date, FHIRDate(\"2015-02-28\").date)\n        self.assertEqual(inst.expirationDate.as_json(), \"2015-02-28\")\n        self.assertEqual(inst.fundingSource.coding[0].code, \"private\")\n        self.assertEqual(inst.fundingSource.coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-funding-source\")\n        self.assertEqual(inst.id, \"subpotent\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.1234\")\n        self.assertFalse(inst.isSubpotent)\n        self.assertEqual(inst.lotNumber, \"AAJN11K\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"Notes on adminstration of vaccine\")\n        self.assertEqual(inst.occurrenceDateTime.datetime, FHIRDateTime(\"2015-01-15\").datetime)\n        self.assertEqual(inst.occurrenceDateTime.as_json(), \"2015-01-15\")\n        self.assertEqual(inst.performer[0].function.coding[0].code, \"OP\")\n        self.assertEqual(inst.performer[0].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertEqual(inst.performer[1].function.coding[0].code, \"AP\")\n        self.assertEqual(inst.performer[1].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertTrue(inst.primarySource)\n        self.assertEqual(inst.programEligibility[0].coding[0].code, \"ineligible\")\n        self.assertEqual(inst.programEligibility[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-program-eligibility\")\n        self.assertEqual(inst.route.coding[0].code, \"IM\")\n        self.assertEqual(inst.route.coding[0].display, \"Injection, intramuscular\")\n        self.assertEqual(inst.route.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration\")\n        self.assertEqual(inst.site.coding[0].code, \"LT\")\n        self.assertEqual(inst.site.coding[0].display, \"left thigh\")\n        self.assertEqual(inst.site.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActSite\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.subpotentReason[0].coding[0].code, \"partial\")\n        self.assertEqual(inst.subpotentReason[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-subpotent-reason\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.vaccineCode.coding[0].code, \"GNHEP\")\n        self.assertEqual(inst.vaccineCode.coding[0].system, \"urn:oid:1.2.36.1.2001.1005.17\")\n        self.assertEqual(inst.vaccineCode.text, \"Hepatitis B\")\n    \n    def testImmunization3(self):\n        inst = self.instantiate_from(\"immunization-example-refused.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Immunization instance\")\n        self.implImmunization3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        inst2 = immunization.Immunization(js)\n        self.implImmunization3(inst2)\n    \n    def implImmunization3(self, inst):\n        self.assertEqual(inst.id, \"notGiven\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.occurrenceDateTime.datetime, FHIRDateTime(\"2013-01-10\").datetime)\n        self.assertEqual(inst.occurrenceDateTime.as_json(), \"2013-01-10\")\n        self.assertTrue(inst.primarySource)\n        self.assertEqual(inst.status, \"not-done\")\n        self.assertEqual(inst.statusReason.coding[0].code, \"MEDPREC\")\n        self.assertEqual(inst.statusReason.coding[0].display, \"medical precaution\")\n        self.assertEqual(inst.statusReason.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.vaccineCode.coding[0].code, \"01\")\n        self.assertEqual(inst.vaccineCode.coding[0].display, \"DTP\")\n        self.assertEqual(inst.vaccineCode.coding[0].system, \"http://hl7.org/fhir/sid/cvx\")\n    \n    def testImmunization4(self):\n        inst = self.instantiate_from(\"immunization-example-historical.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Immunization instance\")\n        self.implImmunization4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        inst2 = immunization.Immunization(js)\n        self.implImmunization4(inst2)\n    \n    def implImmunization4(self, inst):\n        self.assertEqual(inst.id, \"historical\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.1234\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"Notes on adminstration of a historical vaccine\")\n        self.assertEqual(inst.occurrenceString, \"January 2012\")\n        self.assertFalse(inst.primarySource)\n        self.assertEqual(inst.reportOrigin.coding[0].code, \"record\")\n        self.assertEqual(inst.reportOrigin.coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-origin\")\n        self.assertEqual(inst.reportOrigin.text, \"Written Record\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.vaccineCode.coding[0].code, \"GNFLU\")\n        self.assertEqual(inst.vaccineCode.coding[0].system, \"urn:oid:1.2.36.1.2001.1005.17\")\n        self.assertEqual(inst.vaccineCode.text, \"Influenza\")\n    \n    def testImmunization5(self):\n        inst = self.instantiate_from(\"immunization-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Immunization instance\")\n        self.implImmunization5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Immunization\", js[\"resourceType\"])\n        inst2 = immunization.Immunization(js)\n        self.implImmunization5(inst2)\n    \n    def implImmunization5(self, inst):\n        self.assertEqual(inst.doseQuantity.code, \"mg\")\n        self.assertEqual(inst.doseQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.doseQuantity.value, 5)\n        self.assertEqual(inst.education[0].documentType, \"253088698300010311120702\")\n        self.assertEqual(inst.education[0].presentationDate.datetime, FHIRDateTime(\"2013-01-10\").datetime)\n        self.assertEqual(inst.education[0].presentationDate.as_json(), \"2013-01-10\")\n        self.assertEqual(inst.education[0].publicationDate.datetime, FHIRDateTime(\"2012-07-02\").datetime)\n        self.assertEqual(inst.education[0].publicationDate.as_json(), \"2012-07-02\")\n        self.assertEqual(inst.expirationDate.date, FHIRDate(\"2015-02-15\").date)\n        self.assertEqual(inst.expirationDate.as_json(), \"2015-02-15\")\n        self.assertEqual(inst.fundingSource.coding[0].code, \"private\")\n        self.assertEqual(inst.fundingSource.coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-funding-source\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.1234\")\n        self.assertTrue(inst.isSubpotent)\n        self.assertEqual(inst.lotNumber, \"AAJN11K\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"Notes on adminstration of vaccine\")\n        self.assertEqual(inst.occurrenceDateTime.datetime, FHIRDateTime(\"2013-01-10\").datetime)\n        self.assertEqual(inst.occurrenceDateTime.as_json(), \"2013-01-10\")\n        self.assertEqual(inst.performer[0].function.coding[0].code, \"OP\")\n        self.assertEqual(inst.performer[0].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertEqual(inst.performer[1].function.coding[0].code, \"AP\")\n        self.assertEqual(inst.performer[1].function.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0443\")\n        self.assertTrue(inst.primarySource)\n        self.assertEqual(inst.programEligibility[0].coding[0].code, \"ineligible\")\n        self.assertEqual(inst.programEligibility[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/immunization-program-eligibility\")\n        self.assertEqual(inst.reasonCode[0].coding[0].code, \"429060002\")\n        self.assertEqual(inst.reasonCode[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.route.coding[0].code, \"IM\")\n        self.assertEqual(inst.route.coding[0].display, \"Injection, intramuscular\")\n        self.assertEqual(inst.route.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration\")\n        self.assertEqual(inst.site.coding[0].code, \"LA\")\n        self.assertEqual(inst.site.coding[0].display, \"left arm\")\n        self.assertEqual(inst.site.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActSite\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.vaccineCode.coding[0].code, \"FLUVAX\")\n        self.assertEqual(inst.vaccineCode.coding[0].system, \"urn:oid:1.2.36.1.2001.1005.17\")\n        self.assertEqual(inst.vaccineCode.text, \"Fluvax (Influenza)\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/immunization.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Immunization).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Immunization(domainresource.DomainResource):\n    \"\"\" Immunization event information.\n    \n    Describes the event of a patient being administered a vaccine or a record\n    of an immunization as reported by a patient, a clinician or another party.\n    \"\"\"\n    \n    resource_type = \"Immunization\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.doseQuantity = None\n        \"\"\" Amount of vaccine administered.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.education = None\n        \"\"\" Educational material presented to patient.\n        List of `ImmunizationEducation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter immunization was part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.expirationDate = None\n        \"\"\" Vaccine expiration date.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.fundingSource = None\n        \"\"\" Funding source for the vaccine.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.isSubpotent = None\n        \"\"\" Dose potency.\n        Type `bool`. \"\"\"\n        \n        self.location = None\n        \"\"\" Where immunization occurred.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.lotNumber = None\n        \"\"\" Vaccine lot number.\n        Type `str`. \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" Vaccine manufacturer.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Additional immunization notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceDateTime = None\n        \"\"\" Vaccine administration date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.occurrenceString = None\n        \"\"\" Vaccine administration date.\n        Type `str`. \"\"\"\n        \n        self.patient = None\n        \"\"\" Who was immunized.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.performer = None\n        \"\"\" Who performed event.\n        List of `ImmunizationPerformer` items (represented as `dict` in JSON). \"\"\"\n        \n        self.primarySource = None\n        \"\"\" Indicates context the data was recorded in.\n        Type `bool`. \"\"\"\n        \n        self.programEligibility = None\n        \"\"\" Patient eligibility for a vaccination program.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.protocolApplied = None\n        \"\"\" Protocol followed by the provider.\n        List of `ImmunizationProtocolApplied` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reaction = None\n        \"\"\" Details of a reaction that follows immunization.\n        List of `ImmunizationReaction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why immunization occurred.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why immunization occurred.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.recorded = None\n        \"\"\" When the immunization was first captured in the subject's record.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.reportOrigin = None\n        \"\"\" Indicates the source of a secondarily reported record.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.route = None\n        \"\"\" How vaccine entered body.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.site = None\n        \"\"\" Body site vaccine  was administered.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" completed | entered-in-error | not-done.\n        Type `str`. \"\"\"\n        \n        self.statusReason = None\n        \"\"\" Reason not done.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subpotentReason = None\n        \"\"\" Reason for being subpotent.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.vaccineCode = None\n        \"\"\" Vaccine product administered.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(Immunization, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Immunization, self).elementProperties()\n        js.extend([\n            (\"doseQuantity\", \"doseQuantity\", quantity.Quantity, False, None, False),\n            (\"education\", \"education\", ImmunizationEducation, True, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"expirationDate\", \"expirationDate\", fhirdate.FHIRDate, False, None, False),\n            (\"fundingSource\", \"fundingSource\", codeableconcept.CodeableConcept, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"isSubpotent\", \"isSubpotent\", bool, False, None, False),\n            (\"location\", \"location\", fhirreference.FHIRReference, False, None, False),\n            (\"lotNumber\", \"lotNumber\", str, False, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"occurrenceDateTime\", \"occurrenceDateTime\", fhirdatetime.FHIRDateTime, False, \"occurrence\", True),\n            (\"occurrenceString\", \"occurrenceString\", str, False, \"occurrence\", True),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"performer\", \"performer\", ImmunizationPerformer, True, None, False),\n            (\"primarySource\", \"primarySource\", bool, False, None, False),\n            (\"programEligibility\", \"programEligibility\", codeableconcept.CodeableConcept, True, None, False),\n            (\"protocolApplied\", \"protocolApplied\", ImmunizationProtocolApplied, True, None, False),\n            (\"reaction\", \"reaction\", ImmunizationReaction, True, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"recorded\", \"recorded\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"reportOrigin\", \"reportOrigin\", codeableconcept.CodeableConcept, False, None, False),\n            (\"route\", \"route\", codeableconcept.CodeableConcept, False, None, False),\n            (\"site\", \"site\", codeableconcept.CodeableConcept, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusReason\", \"statusReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"subpotentReason\", \"subpotentReason\", codeableconcept.CodeableConcept, True, None, False),\n            (\"vaccineCode\", \"vaccineCode\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ImmunizationEducation(backboneelement.BackboneElement):\n    \"\"\" Educational material presented to patient.\n    \n    Educational material presented to the patient (or guardian) at the time of\n    vaccine administration.\n    \"\"\"\n    \n    resource_type = \"ImmunizationEducation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.documentType = None\n        \"\"\" Educational material document identifier.\n        Type `str`. \"\"\"\n        \n        self.presentationDate = None\n        \"\"\" Educational material presentation date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.publicationDate = None\n        \"\"\" Educational material publication date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.reference = None\n        \"\"\" Educational material reference pointer.\n        Type `str`. \"\"\"\n        \n        super(ImmunizationEducation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ImmunizationEducation, self).elementProperties()\n        js.extend([\n            (\"documentType\", \"documentType\", str, False, None, False),\n            (\"presentationDate\", \"presentationDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"publicationDate\", \"publicationDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"reference\", \"reference\", str, False, None, False),\n        ])\n        return js\n\n\nclass ImmunizationPerformer(backboneelement.BackboneElement):\n    \"\"\" Who performed event.\n    \n    Indicates who performed the immunization event.\n    \"\"\"\n    \n    resource_type = \"ImmunizationPerformer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actor = None\n        \"\"\" Individual or organization who was performing.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.function = None\n        \"\"\" What type of performance was done.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ImmunizationPerformer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ImmunizationPerformer, self).elementProperties()\n        js.extend([\n            (\"actor\", \"actor\", fhirreference.FHIRReference, False, None, True),\n            (\"function\", \"function\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ImmunizationProtocolApplied(backboneelement.BackboneElement):\n    \"\"\" Protocol followed by the provider.\n    \n    The protocol (set of recommendations) being followed by the provider who\n    administered the dose.\n    \"\"\"\n    \n    resource_type = \"ImmunizationProtocolApplied\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.authority = None\n        \"\"\" Who is responsible for publishing the recommendations.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.doseNumberPositiveInt = None\n        \"\"\" Dose number within series.\n        Type `int`. \"\"\"\n        \n        self.doseNumberString = None\n        \"\"\" Dose number within series.\n        Type `str`. \"\"\"\n        \n        self.series = None\n        \"\"\" Name of vaccine series.\n        Type `str`. \"\"\"\n        \n        self.seriesDosesPositiveInt = None\n        \"\"\" Recommended number of doses for immunity.\n        Type `int`. \"\"\"\n        \n        self.seriesDosesString = None\n        \"\"\" Recommended number of doses for immunity.\n        Type `str`. \"\"\"\n        \n        self.targetDisease = None\n        \"\"\" Vaccine preventatable disease being targetted.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ImmunizationProtocolApplied, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ImmunizationProtocolApplied, self).elementProperties()\n        js.extend([\n            (\"authority\", \"authority\", fhirreference.FHIRReference, False, None, False),\n            (\"doseNumberPositiveInt\", \"doseNumberPositiveInt\", int, False, \"doseNumber\", True),\n            (\"doseNumberString\", \"doseNumberString\", str, False, \"doseNumber\", True),\n            (\"series\", \"series\", str, False, None, False),\n            (\"seriesDosesPositiveInt\", \"seriesDosesPositiveInt\", int, False, \"seriesDoses\", False),\n            (\"seriesDosesString\", \"seriesDosesString\", str, False, \"seriesDoses\", False),\n            (\"targetDisease\", \"targetDisease\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nclass ImmunizationReaction(backboneelement.BackboneElement):\n    \"\"\" Details of a reaction that follows immunization.\n    \n    Categorical data indicating that an adverse event is associated in time to\n    an immunization.\n    \"\"\"\n    \n    resource_type = \"ImmunizationReaction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.date = None\n        \"\"\" When reaction started.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Additional information on reaction.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.reported = None\n        \"\"\" Indicates self-reported reaction.\n        Type `bool`. \"\"\"\n        \n        super(ImmunizationReaction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ImmunizationReaction, self).elementProperties()\n        js.extend([\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"detail\", \"detail\", fhirreference.FHIRReference, False, None, False),\n            (\"reported\", \"reported\", bool, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance, facilitating the representation of FHIR-compliant dates in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format or None. If provided, the string is validated against the `_REGEX` pattern to ensure compliance with expected formats. If the string does not match the pattern, a ValueError is raised. If it is valid, it is converted into a Python date using the `_from_string` method.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date derived from `jsonval`. It defaults to None if no valid input is provided.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nConstants:\n- `_REGEX`: A compiled regular expression used to validate the format of `jsonval` during initialization, ensuring it conforms to the specified FHIR date format.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance, facilitating the representation of FHIR-compliant dates in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format or None. If provided, the string is validated against the `_REGEX` pattern to ensure compliance with expected formats. If the string does not match the pattern, a ValueError is raised. If it is valid, it is converted into a Python date using the `_from_string` method.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date derived from `jsonval`. It defaults to None if no valid input is provided.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nConstants:\n- `_REGEX`: A compiled regular expression used to validate the format of `jsonval` during initialization, ensuring it conforms to the specified FHIR date format.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this `FHIRDate` instance, or an ISO 8601 string representation of the date if the original JSON is not available. If `self.origval` is not `None`, it returns `self.origval`, which is set during initialization and can reflect the exact input value. If `self.origval` is `None`, it falls back to returning the `isostring`, which normalizes the date into the ISO 8601 format. The `as_json` method does not take any parameters and is intended for easy retrieval of the initial date representation used to create the object.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this `FHIRDate` instance, or an ISO 8601 string representation of the date if the original JSON is not available. If `self.origval` is not `None`, it returns `self.origval`, which is set during initialization and can reflect the exact input value. If `self.origval` is `None`, it falls back to returning the `isostring`, which normalizes the date into the ISO 8601 format. The `as_json` method does not take any parameters and is intended for easy retrieval of the initial date representation used to create the object.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/immunization.py": {
      "Immunization.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an Immunization instance, representing a record of a patient's vaccination event.\n\nThis constructor initializes all relevant properties as defined by FHIR specifications for an Immunization resource, including the amount of vaccine administered, educational materials provided, and details about the patient and the administration event.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object properties. This allows for the instance to be populated with data according to the FHIR format.\n- strict (bool, optional): If True (default), a FHIRValidationError will be raised on any validation errors. If False, such errors will be ignored.\n\nAttributes initialized include:\n- doseQuantity: Amount of vaccine administered (Quantity).\n- education: Educational material presented to the patient (List of ImmunizationEducation).\n- encounter: Encounter related to the immunization (FHIRReference).\n- expirationDate: Expiration date of the vaccine (FHIRDate).\n- fundingSource: Funding source for the vaccine (CodeableConcept).\n- identifier: Business identifier (List of Identifier).\n- isSubpotent: Indicates if the dose was subpotent (bool).\n- location: Where the immunization occurred (FHIRReference).\n- lotNumber: Vaccine lot number (str).\n- manufacturer: Vaccine manufacturer (FHIRReference).\n- note: Additional notes regarding the immunization (List of Annotation).\n- occurrenceDateTime: Date of vaccine administration (FHIRDateTime).\n- occurrenceString: Vaccine administration date as a string (str).\n- patient: Indicates who was immunized (FHIRReference).\n- performer: Who performed the immunization (List of ImmunizationPerformer).\n- primarySource: Context of data recording (bool).\n- programEligibility: Patient eligibility for vaccination (List of CodeableConcept).\n- protocolApplied: Protocol followed for the administration (List of ImmunizationProtocolApplied).\n- reaction: Details of any reactions post-immunization (List of ImmunizationReaction).\n- reasonCode: Reasons for immunization (List of CodeableConcept).\n- reasonReference: References for the reasons of immunization (List of FHIRReference).\n- recorded: Time the immunization was first captured (FHIRDateTime).\n- reportOrigin: Source of secondary reports (CodeableConcept).\n- route: Route of vaccine administration (CodeableConcept).\n- site: Body site where administered (CodeableConcept).\n- status: Status of the immunization (str).\n- statusReason: Reason for non-administration (CodeableConcept).\n- subpotentReason: Reasons for being subpotent (List of CodeableConcept).\n- vaccineCode: Code for the administered vaccine (CodeableConcept).\n\nThe constructor calls the superclass constructor, ensuring all base class properties are also initialized.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.doseQuantity = None\n        ' Amount of vaccine administered.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.education = None\n        ' Educational material presented to patient.\\n        List of `ImmunizationEducation` items (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter immunization was part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.expirationDate = None\n        ' Vaccine expiration date.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.fundingSource = None\n        ' Funding source for the vaccine.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.isSubpotent = None\n        ' Dose potency.\\n        Type `bool`. '\n        self.location = None\n        ' Where immunization occurred.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.lotNumber = None\n        ' Vaccine lot number.\\n        Type `str`. '\n        self.manufacturer = None\n        ' Vaccine manufacturer.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.note = None\n        ' Additional immunization notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.occurrenceDateTime = None\n        ' Vaccine administration date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.occurrenceString = None\n        ' Vaccine administration date.\\n        Type `str`. '\n        self.patient = None\n        ' Who was immunized.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.performer = None\n        ' Who performed event.\\n        List of `ImmunizationPerformer` items (represented as `dict` in JSON). '\n        self.primarySource = None\n        ' Indicates context the data was recorded in.\\n        Type `bool`. '\n        self.programEligibility = None\n        ' Patient eligibility for a vaccination program.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.protocolApplied = None\n        ' Protocol followed by the provider.\\n        List of `ImmunizationProtocolApplied` items (represented as `dict` in JSON). '\n        self.reaction = None\n        ' Details of a reaction that follows immunization.\\n        List of `ImmunizationReaction` items (represented as `dict` in JSON). '\n        self.reasonCode = None\n        ' Why immunization occurred.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why immunization occurred.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.recorded = None\n        \" When the immunization was first captured in the subject's record.\\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\n        self.reportOrigin = None\n        ' Indicates the source of a secondarily reported record.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.route = None\n        ' How vaccine entered body.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.site = None\n        ' Body site vaccine  was administered.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.status = None\n        ' completed | entered-in-error | not-done.\\n        Type `str`. '\n        self.statusReason = None\n        ' Reason not done.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subpotentReason = None\n        ' Reason for being subpotent.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.vaccineCode = None\n        ' Vaccine product administered.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(Immunization, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an Immunization instance, representing a record of a patient's vaccination event.\n\nThis constructor initializes all relevant properties as defined by FHIR specifications for an Immunization resource, including the amount of vaccine administered, educational materials provided, and details about the patient and the administration event.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object properties. This allows for the instance to be populated with data according to the FHIR format.\n- strict (bool, optional): If True (default), a FHIRValidationError will be raised on any validation errors. If False, such errors will be ignored.\n\nAttributes initialized include:\n- doseQuantity: Amount of vaccine administered (Quantity).\n- education: Educational material presented to the patient (List of ImmunizationEducation).\n- encounter: Encounter related to the immunization (FHIRReference).\n- expirationDate: Expiration date of the vaccine (FHIRDate).\n- fundingSource: Funding source for the vaccine (CodeableConcept).\n- identifier: Business identifier (List of Identifier).\n- isSubpotent: Indicates if the dose was subpotent (bool).\n- location: Where the immunization occurred (FHIRReference).\n- lotNumber: Vaccine lot number (str).\n- manufacturer: Vaccine manufacturer (FHIRReference).\n- note: Additional notes regarding the immunization (List of Annotation).\n- occurrenceDateTime: Date of vaccine administration (FHIRDateTime).\n- occurrenceString: Vaccine administration date as a string (str).\n- patient: Indicates who was immunized (FHIRReference).\n- performer: Who performed the immunization (List of ImmunizationPerformer).\n- primarySource: Context of data recording (bool).\n- programEligibility: Patient eligibility for vaccination (List of CodeableConcept).\n- protocolApplied: Protocol followed for the administration (List of ImmunizationProtocolApplied).\n- reaction: Details of any reactions post-immunization (List of ImmunizationReaction).\n- reasonCode: Reasons for immunization (List of CodeableConcept).\n- reasonReference: References for the reasons of immunization (List of FHIRReference).\n- recorded: Time the immunization was first captured (FHIRDateTime).\n- reportOrigin: Source of secondary reports (CodeableConcept).\n- route: Route of vaccine administration (CodeableConcept).\n- site: Body site where administered (CodeableConcept).\n- status: Status of the immunization (str).\n- statusReason: Reason for non-administration (CodeableConcept).\n- subpotentReason: Reasons for being subpotent (List of CodeableConcept).\n- vaccineCode: Code for the administered vaccine (CodeableConcept).\n\nThe constructor calls the superclass constructor, ensuring all base class properties are also initialized.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Immunization(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value that may represent a datetime in ISO 8601 format. It initializes the `datetime` attribute to None, which will later hold a `datetime.datetime` object constructed from the provided JSON value. The constructor also calls the superclass initializer of `FHIRDate`, allowing it to inherit its properties and methods.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. The default value is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is intended to store the parsed `datetime` value when the class is fully instantiated. It starts as None until the JSON value is processed.\n\nDependencies:\n- Inherits from the `FHIRDate` class, which handles the initial parsing of the provided JSON value through its own initializer, allowing the `FHIRDateTime` class to leverage functionalities from `FHIRDate`.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value that may represent a datetime in ISO 8601 format. It initializes the `datetime` attribute to None, which will later hold a `datetime.datetime` object constructed from the provided JSON value. The constructor also calls the superclass initializer of `FHIRDate`, allowing it to inherit its properties and methods.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. The default value is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is intended to store the parsed `datetime` value when the class is fully instantiated. It starts as None until the JSON value is processed.\n\nDependencies:\n- Inherits from the `FHIRDate` class, which handles the initial parsing of the provided JSON value through its own initializer, allowing the `FHIRDateTime` class to leverage functionalities from `FHIRDate`.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary representation.\n\nThis method first calls the `as_json()` method of its superclass to obtain the base JSON structure, then adds the `resourceType` key with the value of the class's `resource_type` attribute. The `resource_type` is a class-level constant defined as 'FHIRAbstractResource', which denotes the specific type of FHIR resource being represented. This method does not take any parameters and returns a dictionary that includes the necessary information for FHIR resource serialization.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including the `resourceType` key.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary representation.\n\nThis method first calls the `as_json()` method of its superclass to obtain the base JSON structure, then adds the `resourceType` key with the value of the class's `resource_type` attribute. The `resource_type` is a class-level constant defined as 'FHIRAbstractResource', which denotes the specific type of FHIR resource being represented. This method does not take any parameters and returns a dictionary that includes the necessary information for FHIR resource serialization.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including the `resourceType` key.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/immunization.py:Immunization:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/immunization_test.py:ImmunizationTests:testImmunization1": {
      "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
        "fhirclient/models/immunization.py:Immunization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/immunization.py:Immunization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/immunization_test.py:ImmunizationTests:implImmunization1": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/immunization.py:Immunization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/immunization_test.py:ImmunizationTests:testImmunization2": {
      "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
        "fhirclient/models/immunization.py:Immunization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/immunization.py:Immunization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/immunization_test.py:ImmunizationTests:implImmunization2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/immunization.py:Immunization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/immunization_test.py:ImmunizationTests:testImmunization3": {
      "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
        "fhirclient/models/immunization.py:Immunization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/immunization.py:Immunization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/immunization_test.py:ImmunizationTests:implImmunization3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/immunization.py:Immunization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/immunization_test.py:ImmunizationTests:testImmunization4": {
      "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
        "fhirclient/models/immunization.py:Immunization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/immunization.py:Immunization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/immunization_test.py:ImmunizationTests:implImmunization4": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/immunization.py:Immunization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/immunization_test.py:ImmunizationTests:testImmunization5": {
      "tests/models/immunization_test.py:ImmunizationTests:instantiate_from": {
        "fhirclient/models/immunization.py:Immunization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/immunization.py:Immunization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/immunization_test.py:ImmunizationTests:implImmunization5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/immunization.py:Immunization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/immunization.py:Immunization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/immunization.py:Immunization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-immunization_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 immunization.py\n            \u2514\u2500\u2500 Immunization.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Immunization module is designed to interact with FHIR (Fast Healthcare Interoperability Resources) data, specifically focusing on the \"Immunization\" resource. Its primary function is to validate, parse, and manage immunization data by ensuring compliance with the FHIR standard while providing structured representations of vaccination events and associated metadata. This module supports capabilities such as validating immunization data structures, extracting key information (e.g., vaccine codes, dosing information, administration details), and converting this data into consistent JSON representations. By streamlining the handling of immunization information, it solves the challenge of integrating, testing, and managing vaccine-related data in healthcare interoperability systems, enabling developers to build robust health IT solutions.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance, facilitating the representation of FHIR-compliant dates in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in ISO 8601 format or None. If provided, the string is validated against the `_REGEX` pattern to ensure compliance with expected formats. If the string does not match the pattern, a ValueError is raised. If it is valid, it is converted into a Python date using the `_from_string` method.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date derived from `jsonval`. It defaults to None if no valid input is provided.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nConstants:\n- `_REGEX`: A compiled regular expression used to validate the format of `jsonval` during initialization, ensuring it conforms to the specified FHIR date format.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this `FHIRDate` instance, or an ISO 8601 string representation of the date if the original JSON is not available. If `self.origval` is not `None`, it returns `self.origval`, which is set during initialization and can reflect the exact input value. If `self.origval` is `None`, it falls back to returning the `isostring`, which normalizes the date into the ISO 8601 format. The `as_json` method does not take any parameters and is intended for easy retrieval of the initial date representation used to create the object.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/immunization.py\n\n- CLASS METHOD: Immunization.__init__\n  - CLASS SIGNATURE: class Immunization(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an Immunization instance, representing a record of a patient's vaccination event.\n\nThis constructor initializes all relevant properties as defined by FHIR specifications for an Immunization resource, including the amount of vaccine administered, educational materials provided, and details about the patient and the administration event.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object properties. This allows for the instance to be populated with data according to the FHIR format.\n- strict (bool, optional): If True (default), a FHIRValidationError will be raised on any validation errors. If False, such errors will be ignored.\n\nAttributes initialized include:\n- doseQuantity: Amount of vaccine administered (Quantity).\n- education: Educational material presented to the patient (List of ImmunizationEducation).\n- encounter: Encounter related to the immunization (FHIRReference).\n- expirationDate: Expiration date of the vaccine (FHIRDate).\n- fundingSource: Funding source for the vaccine (CodeableConcept).\n- identifier: Business identifier (List of Identifier).\n- isSubpotent: Indicates if the dose was subpotent (bool).\n- location: Where the immunization occurred (FHIRReference).\n- lotNumber: Vaccine lot number (str).\n- manufacturer: Vaccine manufacturer (FHIRReference).\n- note: Additional notes regarding the immunization (List of Annotation).\n- occurrenceDateTime: Date of vaccine administration (FHIRDateTime).\n- occurrenceString: Vaccine administration date as a string (str).\n- patient: Indicates who was immunized (FHIRReference).\n- performer: Who performed the immunization (List of ImmunizationPerformer).\n- primarySource: Context of data recording (bool).\n- programEligibility: Patient eligibility for vaccination (List of CodeableConcept).\n- protocolApplied: Protocol followed for the administration (List of ImmunizationProtocolApplied).\n- reaction: Details of any reactions post-immunization (List of ImmunizationReaction).\n- reasonCode: Reasons for immunization (List of CodeableConcept).\n- reasonReference: References for the reasons of immunization (List of FHIRReference).\n- recorded: Time the immunization was first captured (FHIRDateTime).\n- reportOrigin: Source of secondary reports (CodeableConcept).\n- route: Route of vaccine administration (CodeableConcept).\n- site: Body site where administered (CodeableConcept).\n- status: Status of the immunization (str).\n- statusReason: Reason for non-administration (CodeableConcept).\n- subpotentReason: Reasons for being subpotent (List of CodeableConcept).\n- vaccineCode: Code for the administered vaccine (CodeableConcept).\n\nThe constructor calls the superclass constructor, ensuring all base class properties are also initialized.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON value that may represent a datetime in ISO 8601 format. It initializes the `datetime` attribute to None, which will later hold a `datetime.datetime` object constructed from the provided JSON value. The constructor also calls the superclass initializer of `FHIRDate`, allowing it to inherit its properties and methods.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. The default value is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is intended to store the parsed `datetime` value when the class is fully instantiated. It starts as None until the JSON value is processed.\n\nDependencies:\n- Inherits from the `FHIRDate` class, which handles the initial parsing of the provided JSON value through its own initializer, allowing the `FHIRDateTime` class to leverage functionalities from `FHIRDate`.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource to a JSON-compatible dictionary representation.\n\nThis method first calls the `as_json()` method of its superclass to obtain the base JSON structure, then adds the `resourceType` key with the value of the class's `resource_type` attribute. The `resource_type` is a class-level constant defined as 'FHIRAbstractResource', which denotes the specific type of FHIR resource being represented. This method does not take any parameters and returns a dictionary that includes the necessary information for FHIR resource serialization.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including the `resourceType` key.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/immunization.py": "from . import domainresource\n\nclass Immunization(domainresource.DomainResource):\n    \"\"\" Immunization event information.\n    \n    Describes the event of a patient being administered a vaccine or a record\n    of an immunization as reported by a patient, a clinician or another party.\n    \"\"\"\n    resource_type = 'Immunization'\n\n    def elementProperties(self):\n        js = super(Immunization, self).elementProperties()\n        js.extend([('doseQuantity', 'doseQuantity', quantity.Quantity, False, None, False), ('education', 'education', ImmunizationEducation, True, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('expirationDate', 'expirationDate', fhirdate.FHIRDate, False, None, False), ('fundingSource', 'fundingSource', codeableconcept.CodeableConcept, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('isSubpotent', 'isSubpotent', bool, False, None, False), ('location', 'location', fhirreference.FHIRReference, False, None, False), ('lotNumber', 'lotNumber', str, False, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('occurrenceDateTime', 'occurrenceDateTime', fhirdatetime.FHIRDateTime, False, 'occurrence', True), ('occurrenceString', 'occurrenceString', str, False, 'occurrence', True), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('performer', 'performer', ImmunizationPerformer, True, None, False), ('primarySource', 'primarySource', bool, False, None, False), ('programEligibility', 'programEligibility', codeableconcept.CodeableConcept, True, None, False), ('protocolApplied', 'protocolApplied', ImmunizationProtocolApplied, True, None, False), ('reaction', 'reaction', ImmunizationReaction, True, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('recorded', 'recorded', fhirdatetime.FHIRDateTime, False, None, False), ('reportOrigin', 'reportOrigin', codeableconcept.CodeableConcept, False, None, False), ('route', 'route', codeableconcept.CodeableConcept, False, None, False), ('site', 'site', codeableconcept.CodeableConcept, False, None, False), ('status', 'status', str, False, None, True), ('statusReason', 'statusReason', codeableconcept.CodeableConcept, False, None, False), ('subpotentReason', 'subpotentReason', codeableconcept.CodeableConcept, True, None, False), ('vaccineCode', 'vaccineCode', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass ImmunizationEducation(backboneelement.BackboneElement):\n    \"\"\" Educational material presented to patient.\n    \n    Educational material presented to the patient (or guardian) at the time of\n    vaccine administration.\n    \"\"\"\n    resource_type = 'ImmunizationEducation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.documentType = None\n        ' Educational material document identifier.\\n        Type `str`. '\n        self.presentationDate = None\n        ' Educational material presentation date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.publicationDate = None\n        ' Educational material publication date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.reference = None\n        ' Educational material reference pointer.\\n        Type `str`. '\n        super(ImmunizationEducation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ImmunizationEducation, self).elementProperties()\n        js.extend([('documentType', 'documentType', str, False, None, False), ('presentationDate', 'presentationDate', fhirdatetime.FHIRDateTime, False, None, False), ('publicationDate', 'publicationDate', fhirdatetime.FHIRDateTime, False, None, False), ('reference', 'reference', str, False, None, False)])\n        return js\n\nclass ImmunizationPerformer(backboneelement.BackboneElement):\n    \"\"\" Who performed event.\n    \n    Indicates who performed the immunization event.\n    \"\"\"\n    resource_type = 'ImmunizationPerformer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actor = None\n        ' Individual or organization who was performing.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.function = None\n        ' What type of performance was done.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ImmunizationPerformer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ImmunizationPerformer, self).elementProperties()\n        js.extend([('actor', 'actor', fhirreference.FHIRReference, False, None, True), ('function', 'function', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ImmunizationProtocolApplied(backboneelement.BackboneElement):\n    \"\"\" Protocol followed by the provider.\n    \n    The protocol (set of recommendations) being followed by the provider who\n    administered the dose.\n    \"\"\"\n    resource_type = 'ImmunizationProtocolApplied'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.authority = None\n        ' Who is responsible for publishing the recommendations.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.doseNumberPositiveInt = None\n        ' Dose number within series.\\n        Type `int`. '\n        self.doseNumberString = None\n        ' Dose number within series.\\n        Type `str`. '\n        self.series = None\n        ' Name of vaccine series.\\n        Type `str`. '\n        self.seriesDosesPositiveInt = None\n        ' Recommended number of doses for immunity.\\n        Type `int`. '\n        self.seriesDosesString = None\n        ' Recommended number of doses for immunity.\\n        Type `str`. '\n        self.targetDisease = None\n        ' Vaccine preventatable disease being targetted.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(ImmunizationProtocolApplied, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ImmunizationProtocolApplied, self).elementProperties()\n        js.extend([('authority', 'authority', fhirreference.FHIRReference, False, None, False), ('doseNumberPositiveInt', 'doseNumberPositiveInt', int, False, 'doseNumber', True), ('doseNumberString', 'doseNumberString', str, False, 'doseNumber', True), ('series', 'series', str, False, None, False), ('seriesDosesPositiveInt', 'seriesDosesPositiveInt', int, False, 'seriesDoses', False), ('seriesDosesString', 'seriesDosesString', str, False, 'seriesDoses', False), ('targetDisease', 'targetDisease', codeableconcept.CodeableConcept, True, None, False)])\n        return js\n\nclass ImmunizationReaction(backboneelement.BackboneElement):\n    \"\"\" Details of a reaction that follows immunization.\n    \n    Categorical data indicating that an adverse event is associated in time to\n    an immunization.\n    \"\"\"\n    resource_type = 'ImmunizationReaction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.date = None\n        ' When reaction started.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.detail = None\n        ' Additional information on reaction.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.reported = None\n        ' Indicates self-reported reaction.\\n        Type `bool`. '\n        super(ImmunizationReaction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ImmunizationReaction, self).elementProperties()\n        js.extend([('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('detail', 'detail', fhirreference.FHIRReference, False, None, False), ('reported', 'reported', bool, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}