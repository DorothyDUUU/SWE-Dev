{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-coverageeligibilityrequest_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/coverageeligibilityrequest_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import coverageeligibilityrequest\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CoverageEligibilityRequestTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"CoverageEligibilityRequest\", js[\"resourceType\"])\n        return coverageeligibilityrequest.CoverageEligibilityRequest(js)\n    \n    def testCoverageEligibilityRequest1(self):\n        inst = self.instantiate_from(\"coverageeligibilityrequest-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CoverageEligibilityRequest instance\")\n        self.implCoverageEligibilityRequest1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CoverageEligibilityRequest\", js[\"resourceType\"])\n        inst2 = coverageeligibilityrequest.CoverageEligibilityRequest(js)\n        self.implCoverageEligibilityRequest1(inst2)\n    \n    def implCoverageEligibilityRequest1(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.id, \"52345\")\n        self.assertEqual(inst.identifier[0].system, \"http://happyvalley.com/coverageelegibilityrequest\")\n        self.assertEqual(inst.identifier[0].value, \"52345\")\n        self.assertTrue(inst.insurance[0].focal)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority.coding[0].code, \"normal\")\n        self.assertEqual(inst.purpose[0], \"validation\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the CoverageEligibilityRequest</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testCoverageEligibilityRequest2(self):\n        inst = self.instantiate_from(\"coverageeligibilityrequest-example-2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CoverageEligibilityRequest instance\")\n        self.implCoverageEligibilityRequest2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CoverageEligibilityRequest\", js[\"resourceType\"])\n        inst2 = coverageeligibilityrequest.CoverageEligibilityRequest(js)\n        self.implCoverageEligibilityRequest2(inst2)\n    \n    def implCoverageEligibilityRequest2(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.id, \"52346\")\n        self.assertEqual(inst.identifier[0].system, \"http://happyvalley.com/coverageelegibilityrequest\")\n        self.assertEqual(inst.identifier[0].value, \"52346\")\n        self.assertEqual(inst.insurance[0].businessArrangement, \"NB8742\")\n        self.assertEqual(inst.item[0].category.coding[0].code, \"69\")\n        self.assertEqual(inst.item[0].category.coding[0].display, \"Maternity\")\n        self.assertEqual(inst.item[0].category.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-benefitcategory\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority.coding[0].code, \"normal\")\n        self.assertEqual(inst.purpose[0], \"validation\")\n        self.assertEqual(inst.purpose[1], \"benefits\")\n        self.assertEqual(inst.servicedDate.date, FHIRDate(\"2014-09-17\").date)\n        self.assertEqual(inst.servicedDate.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the CoverageEligibilityRequest</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/coverageeligibilityrequest.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass CoverageEligibilityRequest(domainresource.DomainResource):\n    \"\"\" CoverageEligibilityRequest resource.\n    \n    The CoverageEligibilityRequest provides patient and insurance coverage\n    information to an insurer for them to respond, in the form of an\n    CoverageEligibilityResponse, with information regarding whether the stated\n    coverage is valid and in-force and optionally to provide the insurance\n    details of the policy.\n    \"\"\"\n    \n    resource_type = \"CoverageEligibilityRequest\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.created = None\n        \"\"\" Creation date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.enterer = None\n        \"\"\" Author.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.facility = None\n        \"\"\" Servicing facility.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for coverage eligiblity request.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurance = None\n        \"\"\" Patient insurance information.\n        List of `CoverageEligibilityRequestInsurance` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurer = None\n        \"\"\" Coverage issuer.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Item to be evaluated for eligibiity.\n        List of `CoverageEligibilityRequestItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.patient = None\n        \"\"\" Intended recipient of products and services.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" Desired processing priority.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.provider = None\n        \"\"\" Party responsible for the request.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.purpose = None\n        \"\"\" auth-requirements | benefits | discovery | validation.\n        List of `str` items. \"\"\"\n        \n        self.servicedDate = None\n        \"\"\" Estimated date or dates of service.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.servicedPeriod = None\n        \"\"\" Estimated date or dates of service.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | cancelled | draft | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.supportingInfo = None\n        \"\"\" Supporting information.\n        List of `CoverageEligibilityRequestSupportingInfo` items (represented as `dict` in JSON). \"\"\"\n        \n        super(CoverageEligibilityRequest, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageEligibilityRequest, self).elementProperties()\n        js.extend([\n            (\"created\", \"created\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"enterer\", \"enterer\", fhirreference.FHIRReference, False, None, False),\n            (\"facility\", \"facility\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"insurance\", \"insurance\", CoverageEligibilityRequestInsurance, True, None, False),\n            (\"insurer\", \"insurer\", fhirreference.FHIRReference, False, None, True),\n            (\"item\", \"item\", CoverageEligibilityRequestItem, True, None, False),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"priority\", \"priority\", codeableconcept.CodeableConcept, False, None, False),\n            (\"provider\", \"provider\", fhirreference.FHIRReference, False, None, False),\n            (\"purpose\", \"purpose\", str, True, None, True),\n            (\"servicedDate\", \"servicedDate\", fhirdate.FHIRDate, False, \"serviced\", False),\n            (\"servicedPeriod\", \"servicedPeriod\", period.Period, False, \"serviced\", False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"supportingInfo\", \"supportingInfo\", CoverageEligibilityRequestSupportingInfo, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CoverageEligibilityRequestInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services.\n    \"\"\"\n    \n    resource_type = \"CoverageEligibilityRequestInsurance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.businessArrangement = None\n        \"\"\" Additional provider contract number.\n        Type `str`. \"\"\"\n        \n        self.coverage = None\n        \"\"\" Insurance information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.focal = None\n        \"\"\" Applicable coverage.\n        Type `bool`. \"\"\"\n        \n        super(CoverageEligibilityRequestInsurance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestInsurance, self).elementProperties()\n        js.extend([\n            (\"businessArrangement\", \"businessArrangement\", str, False, None, False),\n            (\"coverage\", \"coverage\", fhirreference.FHIRReference, False, None, True),\n            (\"focal\", \"focal\", bool, False, None, False),\n        ])\n        return js\n\n\nclass CoverageEligibilityRequestItem(backboneelement.BackboneElement):\n    \"\"\" Item to be evaluated for eligibiity.\n    \n    Service categories or billable services for which benefit details and/or an\n    authorization prior to service delivery may be required by the payor.\n    \"\"\"\n    \n    resource_type = \"CoverageEligibilityRequestItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.category = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Product or service details.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.diagnosis = None\n        \"\"\" Applicable diagnosis.\n        List of `CoverageEligibilityRequestItemDiagnosis` items (represented as `dict` in JSON). \"\"\"\n        \n        self.facility = None\n        \"\"\" Servicing facility.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Product or service billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.provider = None\n        \"\"\" Perfoming practitioner.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.supportingInfoSequence = None\n        \"\"\" Applicable exception or supporting information.\n        List of `int` items. \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(CoverageEligibilityRequestItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestItem, self).elementProperties()\n        js.extend([\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, False),\n            (\"detail\", \"detail\", fhirreference.FHIRReference, True, None, False),\n            (\"diagnosis\", \"diagnosis\", CoverageEligibilityRequestItemDiagnosis, True, None, False),\n            (\"facility\", \"facility\", fhirreference.FHIRReference, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, False),\n            (\"provider\", \"provider\", fhirreference.FHIRReference, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"supportingInfoSequence\", \"supportingInfoSequence\", int, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass CoverageEligibilityRequestItemDiagnosis(backboneelement.BackboneElement):\n    \"\"\" Applicable diagnosis.\n    \n    Patient diagnosis for which care is sought.\n    \"\"\"\n    \n    resource_type = \"CoverageEligibilityRequestItemDiagnosis\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.diagnosisCodeableConcept = None\n        \"\"\" Nature of illness or problem.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.diagnosisReference = None\n        \"\"\" Nature of illness or problem.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(CoverageEligibilityRequestItemDiagnosis, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestItemDiagnosis, self).elementProperties()\n        js.extend([\n            (\"diagnosisCodeableConcept\", \"diagnosisCodeableConcept\", codeableconcept.CodeableConcept, False, \"diagnosis\", False),\n            (\"diagnosisReference\", \"diagnosisReference\", fhirreference.FHIRReference, False, \"diagnosis\", False),\n        ])\n        return js\n\n\nclass CoverageEligibilityRequestSupportingInfo(backboneelement.BackboneElement):\n    \"\"\" Supporting information.\n    \n    Additional information codes regarding exceptions, special considerations,\n    the condition, situation, prior or concurrent issues.\n    \"\"\"\n    \n    resource_type = \"CoverageEligibilityRequestSupportingInfo\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.appliesToAll = None\n        \"\"\" Applies to all items.\n        Type `bool`. \"\"\"\n        \n        self.information = None\n        \"\"\" Data to be provided.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Information instance identifier.\n        Type `int`. \"\"\"\n        \n        super(CoverageEligibilityRequestSupportingInfo, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestSupportingInfo, self).elementProperties()\n        js.extend([\n            (\"appliesToAll\", \"appliesToAll\", bool, False, None, False),\n            (\"information\", \"information\", fhirreference.FHIRReference, False, None, True),\n            (\"sequence\", \"sequence\", int, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDate instance, which facilitates working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): The input date as an ISO 8601 formatted string or None. If provided, it must be a string matching the expected format defined by the regex `_REGEX`. If the format is valid, the date is parsed and stored; otherwise, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date from the input string as a Python date object.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- `_REGEX`: A compiled regular expression that validates the format of the input date string. It is used to ensure that the provided string adheres to the expected FHIR date format before parsing.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes a FHIRDate instance, which facilitates working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): The input date as an ISO 8601 formatted string or None. If provided, it must be a string matching the expected format defined by the regex `_REGEX`. If the format is valid, the date is parsed and stored; otherwise, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date from the input string as a Python date object.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- `_REGEX`: A compiled regular expression that validates the format of the input date string. It is used to ensure that the provided string adheres to the expected FHIR date format before parsing.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a JSON value (stored in `origval`), that value is returned. If no original value was provided during initialization, the method returns the ISO 8601 string representation of the date (via the `isostring` property). The method relies on the `origval` attribute, which is set in the `__init__` method or through the `__setattr__` override when the `date` property is modified. The `isostring` property adjusts any partial date representations to a full date format, ensuring consistency with FHIR standards.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a JSON value (stored in `origval`), that value is returned. If no original value was provided during initialization, the method returns the ISO 8601 string representation of the date (via the `isostring` property). The method relies on the `origval` attribute, which is set in the `__init__` method or through the `__setattr__` override when the `date` property is modified. The `isostring` property adjusts any partial date representations to a full date format, ensuring consistency with FHIR standards.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/coverageeligibilityrequest.py": {
      "CoverageEligibilityRequest.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a CoverageEligibilityRequest resource instance.\n\nThis constructor initializes all valid properties for the CoverageEligibilityRequest resource according to the FHIR specification. The parameters allow for optional initialization with a JSON dictionary, and strict validation checks can be enabled or disabled.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource's properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables.\n\nAttributes initialized include:\n- created: The date the request was created, represented as FHIRDateTime.\n- enterer: The author of the request, represented as a FHIRReference.\n- facility: The servicing facility for the coverage request, represented as a FHIRReference.\n- identifier: A list of Identifiers for the eligibility request.\n- insurance: A list of CoverageEligibilityRequestInsurance representing patient insurance information.\n- insurer: The coverage issuer, represented as a FHIRReference.\n- item: A list of items to evaluate for eligibility, represented as CoverageEligibilityRequestItem.\n- patient: The intended recipient of services, represented as a FHIRReference.\n- priority: The desired processing priority, represented as CodeableConcept.\n- provider: The party responsible for the request, represented as a FHIRReference.\n- purpose: A list indicating the purpose of the request, such as authorization or validation.\n- servicedDate: The estimated date of service, represented as FHIRDate.\n- servicedPeriod: The period of estimated service, represented as Period.\n- status: The status of the request, such as active or cancelled.\n- supportingInfo: A list of supporting information, represented as CoverageEligibilityRequestSupportingInfo.\n\nCalls the superclass constructor to ensure proper initialization and validation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.created = None\n        ' Creation date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.enterer = None\n        ' Author.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.facility = None\n        ' Servicing facility.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for coverage eligiblity request.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.insurance = None\n        ' Patient insurance information.\\n        List of `CoverageEligibilityRequestInsurance` items (represented as `dict` in JSON). '\n        self.insurer = None\n        ' Coverage issuer.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.item = None\n        ' Item to be evaluated for eligibiity.\\n        List of `CoverageEligibilityRequestItem` items (represented as `dict` in JSON). '\n        self.patient = None\n        ' Intended recipient of products and services.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.priority = None\n        ' Desired processing priority.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.provider = None\n        ' Party responsible for the request.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.purpose = None\n        ' auth-requirements | benefits | discovery | validation.\\n        List of `str` items. '\n        self.servicedDate = None\n        ' Estimated date or dates of service.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.servicedPeriod = None\n        ' Estimated date or dates of service.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | cancelled | draft | entered-in-error.\\n        Type `str`. '\n        self.supportingInfo = None\n        ' Supporting information.\\n        List of `CoverageEligibilityRequestSupportingInfo` items (represented as `dict` in JSON). '\n        super(CoverageEligibilityRequest, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a CoverageEligibilityRequest resource instance.\n\nThis constructor initializes all valid properties for the CoverageEligibilityRequest resource according to the FHIR specification. The parameters allow for optional initialization with a JSON dictionary, and strict validation checks can be enabled or disabled.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource's properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables.\n\nAttributes initialized include:\n- created: The date the request was created, represented as FHIRDateTime.\n- enterer: The author of the request, represented as a FHIRReference.\n- facility: The servicing facility for the coverage request, represented as a FHIRReference.\n- identifier: A list of Identifiers for the eligibility request.\n- insurance: A list of CoverageEligibilityRequestInsurance representing patient insurance information.\n- insurer: The coverage issuer, represented as a FHIRReference.\n- item: A list of items to evaluate for eligibility, represented as CoverageEligibilityRequestItem.\n- patient: The intended recipient of services, represented as a FHIRReference.\n- priority: The desired processing priority, represented as CodeableConcept.\n- provider: The party responsible for the request, represented as a FHIRReference.\n- purpose: A list indicating the purpose of the request, such as authorization or validation.\n- servicedDate: The estimated date of service, represented as FHIRDate.\n- servicedPeriod: The period of estimated service, represented as Period.\n- status: The status of the request, such as active or cancelled.\n- supportingInfo: A list of supporting information, represented as CoverageEligibilityRequestSupportingInfo.\n\nCalls the superclass constructor to ensure proper initialization and validation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class CoverageEligibilityRequest(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class, which is designed for handling FHIR datetime values in Python. The constructor accepts a JSON value (string or None), which represents a FHIR datetime. Upon initialization, it sets up a `datetime` attribute to hold the Python representation of the provided value, which will be of type `datetime.datetime` or `None`. The constructor also calls the parent class's (`FHIRDate`) initializer to ensure proper setup of the base class.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. Default is None.\n\nAttributes:\n- datetime: A Union type that holds the Python datetime object corresponding to the FHIR datetime, initialized to None.\n\nInteractions:\n- The parent class `FHIRDate` is utilized to manage FHIR date-related functionalities. The `_from_string` method defined in FHIRDate is referenced for parsing datetime strings into Python datetime objects, ensuring compatibility with FHIR specifications.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class, which is designed for handling FHIR datetime values in Python. The constructor accepts a JSON value (string or None), which represents a FHIR datetime. Upon initialization, it sets up a `datetime` attribute to hold the Python representation of the provided value, which will be of type `datetime.datetime` or `None`. The constructor also calls the parent class's (`FHIRDate`) initializer to ensure proper setup of the base class.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. Default is None.\n\nAttributes:\n- datetime: A Union type that holds the Python datetime object corresponding to the FHIR datetime, initialized to None.\n\nInteractions:\n- The parent class `FHIRDate` is utilized to manage FHIR date-related functionalities. The `_from_string` method defined in FHIRDate is referenced for parsing datetime strings into Python datetime objects, ensuring compatibility with FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns a JSON representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` attribute, which is set to the class attribute `resource_type` (defined as 'FHIRAbstractResource' in this class). This is essential for proper serialization of FHIR resources, allowing them to be correctly identified when sent to a FHIR server.\n\n:returns: A dictionary containing the JSON representation of the resource, including the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns a JSON representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` attribute, which is set to the class attribute `resource_type` (defined as 'FHIRAbstractResource' in this class). This is essential for proper serialization of FHIR resources, allowing them to be correctly identified when sent to a FHIR server.\n\n:returns: A dictionary containing the JSON representation of the resource, including the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:testCoverageEligibilityRequest1": {
      "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:instantiate_from": {
        "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:implCoverageEligibilityRequest1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:instantiate_from": {
      "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:testCoverageEligibilityRequest2": {
      "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:instantiate_from": {
        "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverageeligibilityrequest_test.py:CoverageEligibilityRequestTests:implCoverageEligibilityRequest2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverageeligibilityrequest.py:CoverageEligibilityRequest:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-coverageeligibilityrequest_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 coverageeligibilityrequest.py\n        \u2502   \u2514\u2500\u2500 CoverageEligibilityRequest.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Coverage Eligibility Request module validates and verifies healthcare coverage eligibility requests by interacting with resources conforming to the FHIR (Fast Healthcare Interoperability Resources) standard. It facilitates the creation, parsing, and validation of CoverageEligibilityRequest objects, ensuring data integrity and compliance with FHIR specifications. The module supports the inspection of key details such as request creation date, status, priority, purpose, and associated insurance or benefit information. By providing standardized functionality for handling eligibility requests, it simplifies the process of verifying patient coverage, promoting interoperability among healthcare applications and ensuring accurate and efficient determination of benefits.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDate instance, which facilitates working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): The input date as an ISO 8601 formatted string or None. If provided, it must be a string matching the expected format defined by the regex `_REGEX`. If the format is valid, the date is parsed and stored; otherwise, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date from the input string as a Python date object.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- `_REGEX`: A compiled regular expression that validates the format of the input date string. It is used to ensure that the provided string adheres to the expected FHIR date format before parsing.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a JSON value (stored in `origval`), that value is returned. If no original value was provided during initialization, the method returns the ISO 8601 string representation of the date (via the `isostring` property). The method relies on the `origval` attribute, which is set in the `__init__` method or through the `__setattr__` override when the `date` property is modified. The `isostring` property adjusts any partial date representations to a full date format, ensuring consistency with FHIR standards.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/coverageeligibilityrequest.py\n\n- CLASS METHOD: CoverageEligibilityRequest.__init__\n  - CLASS SIGNATURE: class CoverageEligibilityRequest(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a CoverageEligibilityRequest resource instance.\n\nThis constructor initializes all valid properties for the CoverageEligibilityRequest resource according to the FHIR specification. The parameters allow for optional initialization with a JSON dictionary, and strict validation checks can be enabled or disabled.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource's properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables.\n\nAttributes initialized include:\n- created: The date the request was created, represented as FHIRDateTime.\n- enterer: The author of the request, represented as a FHIRReference.\n- facility: The servicing facility for the coverage request, represented as a FHIRReference.\n- identifier: A list of Identifiers for the eligibility request.\n- insurance: A list of CoverageEligibilityRequestInsurance representing patient insurance information.\n- insurer: The coverage issuer, represented as a FHIRReference.\n- item: A list of items to evaluate for eligibility, represented as CoverageEligibilityRequestItem.\n- patient: The intended recipient of services, represented as a FHIRReference.\n- priority: The desired processing priority, represented as CodeableConcept.\n- provider: The party responsible for the request, represented as a FHIRReference.\n- purpose: A list indicating the purpose of the request, such as authorization or validation.\n- servicedDate: The estimated date of service, represented as FHIRDate.\n- servicedPeriod: The period of estimated service, represented as Period.\n- status: The status of the request, such as active or cancelled.\n- supportingInfo: A list of supporting information, represented as CoverageEligibilityRequestSupportingInfo.\n\nCalls the superclass constructor to ensure proper initialization and validation.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class, which is designed for handling FHIR datetime values in Python. The constructor accepts a JSON value (string or None), which represents a FHIR datetime. Upon initialization, it sets up a `datetime` attribute to hold the Python representation of the provided value, which will be of type `datetime.datetime` or `None`. The constructor also calls the parent class's (`FHIRDate`) initializer to ensure proper setup of the base class.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. Default is None.\n\nAttributes:\n- datetime: A Union type that holds the Python datetime object corresponding to the FHIR datetime, initialized to None.\n\nInteractions:\n- The parent class `FHIRDate` is utilized to manage FHIR date-related functionalities. The `_from_string` method defined in FHIRDate is referenced for parsing datetime strings into Python datetime objects, ensuring compatibility with FHIR specifications.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a JSON representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nThis method overrides the parent class's `as_json` method to ensure that the JSON output includes the `resourceType` attribute, which is set to the class attribute `resource_type` (defined as 'FHIRAbstractResource' in this class). This is essential for proper serialization of FHIR resources, allowing them to be correctly identified when sent to a FHIR server.\n\n:returns: A dictionary containing the JSON representation of the resource, including the `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/coverageeligibilityrequest.py": "from . import domainresource\n\nclass CoverageEligibilityRequest(domainresource.DomainResource):\n    \"\"\" CoverageEligibilityRequest resource.\n    \n    The CoverageEligibilityRequest provides patient and insurance coverage\n    information to an insurer for them to respond, in the form of an\n    CoverageEligibilityResponse, with information regarding whether the stated\n    coverage is valid and in-force and optionally to provide the insurance\n    details of the policy.\n    \"\"\"\n    resource_type = 'CoverageEligibilityRequest'\n\n    def elementProperties(self):\n        js = super(CoverageEligibilityRequest, self).elementProperties()\n        js.extend([('created', 'created', fhirdatetime.FHIRDateTime, False, None, True), ('enterer', 'enterer', fhirreference.FHIRReference, False, None, False), ('facility', 'facility', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('insurance', 'insurance', CoverageEligibilityRequestInsurance, True, None, False), ('insurer', 'insurer', fhirreference.FHIRReference, False, None, True), ('item', 'item', CoverageEligibilityRequestItem, True, None, False), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('priority', 'priority', codeableconcept.CodeableConcept, False, None, False), ('provider', 'provider', fhirreference.FHIRReference, False, None, False), ('purpose', 'purpose', str, True, None, True), ('servicedDate', 'servicedDate', fhirdate.FHIRDate, False, 'serviced', False), ('servicedPeriod', 'servicedPeriod', period.Period, False, 'serviced', False), ('status', 'status', str, False, None, True), ('supportingInfo', 'supportingInfo', CoverageEligibilityRequestSupportingInfo, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass CoverageEligibilityRequestInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services.\n    \"\"\"\n    resource_type = 'CoverageEligibilityRequestInsurance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.businessArrangement = None\n        ' Additional provider contract number.\\n        Type `str`. '\n        self.coverage = None\n        ' Insurance information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.focal = None\n        ' Applicable coverage.\\n        Type `bool`. '\n        super(CoverageEligibilityRequestInsurance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestInsurance, self).elementProperties()\n        js.extend([('businessArrangement', 'businessArrangement', str, False, None, False), ('coverage', 'coverage', fhirreference.FHIRReference, False, None, True), ('focal', 'focal', bool, False, None, False)])\n        return js\n\nclass CoverageEligibilityRequestItem(backboneelement.BackboneElement):\n    \"\"\" Item to be evaluated for eligibiity.\n    \n    Service categories or billable services for which benefit details and/or an\n    authorization prior to service delivery may be required by the payor.\n    \"\"\"\n    resource_type = 'CoverageEligibilityRequestItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.category = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detail = None\n        ' Product or service details.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.diagnosis = None\n        ' Applicable diagnosis.\\n        List of `CoverageEligibilityRequestItemDiagnosis` items (represented as `dict` in JSON). '\n        self.facility = None\n        ' Servicing facility.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Product or service billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.provider = None\n        ' Perfoming practitioner.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.supportingInfoSequence = None\n        ' Applicable exception or supporting information.\\n        List of `int` items. '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(CoverageEligibilityRequestItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestItem, self).elementProperties()\n        js.extend([('category', 'category', codeableconcept.CodeableConcept, False, None, False), ('detail', 'detail', fhirreference.FHIRReference, True, None, False), ('diagnosis', 'diagnosis', CoverageEligibilityRequestItemDiagnosis, True, None, False), ('facility', 'facility', fhirreference.FHIRReference, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, False), ('provider', 'provider', fhirreference.FHIRReference, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('supportingInfoSequence', 'supportingInfoSequence', int, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass CoverageEligibilityRequestItemDiagnosis(backboneelement.BackboneElement):\n    \"\"\" Applicable diagnosis.\n    \n    Patient diagnosis for which care is sought.\n    \"\"\"\n    resource_type = 'CoverageEligibilityRequestItemDiagnosis'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.diagnosisCodeableConcept = None\n        ' Nature of illness or problem.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.diagnosisReference = None\n        ' Nature of illness or problem.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(CoverageEligibilityRequestItemDiagnosis, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestItemDiagnosis, self).elementProperties()\n        js.extend([('diagnosisCodeableConcept', 'diagnosisCodeableConcept', codeableconcept.CodeableConcept, False, 'diagnosis', False), ('diagnosisReference', 'diagnosisReference', fhirreference.FHIRReference, False, 'diagnosis', False)])\n        return js\n\nclass CoverageEligibilityRequestSupportingInfo(backboneelement.BackboneElement):\n    \"\"\" Supporting information.\n    \n    Additional information codes regarding exceptions, special considerations,\n    the condition, situation, prior or concurrent issues.\n    \"\"\"\n    resource_type = 'CoverageEligibilityRequestSupportingInfo'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.appliesToAll = None\n        ' Applies to all items.\\n        Type `bool`. '\n        self.information = None\n        ' Data to be provided.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Information instance identifier.\\n        Type `int`. '\n        super(CoverageEligibilityRequestSupportingInfo, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageEligibilityRequestSupportingInfo, self).elementProperties()\n        js.extend([('appliesToAll', 'appliesToAll', bool, False, None, False), ('information', 'information', fhirreference.FHIRReference, False, None, True), ('sequence', 'sequence', int, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}