{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductingredient_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductingredient_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductingredient\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductIngredientTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductIngredient\", js[\"resourceType\"])\n        return medicinalproductingredient.MedicinalProductIngredient(js)\n    \n    def testMedicinalProductIngredient1(self):\n        inst = self.instantiate_from(\"medicinalproductingredient-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductIngredient instance\")\n        self.implMedicinalProductIngredient1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductIngredient\", js[\"resourceType\"])\n        inst2 = medicinalproductingredient.MedicinalProductIngredient(js)\n        self.implMedicinalProductIngredient1(inst2)\n    \n    def implMedicinalProductIngredient1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.role.coding[0].code, \"ActiveBase\")\n        self.assertEqual(inst.role.coding[0].system, \"http://ema.europa.eu/example/ingredientRole\")\n        self.assertEqual(inst.specifiedSubstance[0].code.coding[0].code, \"equixabanCompanyequixaban1\")\n        self.assertEqual(inst.specifiedSubstance[0].code.coding[0].system, \"http://ema.europa.eu/example/specifiedSubstance\")\n        self.assertEqual(inst.specifiedSubstance[0].group.coding[0].code, \"2\")\n        self.assertEqual(inst.specifiedSubstance[0].group.coding[0].system, \"http://ema.europa.eu/example/specifiedSubstanceGroup\")\n        self.assertEqual(inst.substance.code.coding[0].code, \"EQUIXABAN\")\n        self.assertEqual(inst.substance.code.coding[0].system, \"http://ema.europa.eu/example/substance\")\n        self.assertEqual(inst.substance.strength[0].presentation.denominator.unit, \"{tablet}\")\n        self.assertEqual(inst.substance.strength[0].presentation.denominator.value, 1)\n        self.assertEqual(inst.substance.strength[0].presentation.numerator.unit, \"mg\")\n        self.assertEqual(inst.substance.strength[0].presentation.numerator.value, 2.5)\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/medicinalproductingredient.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductIngredient(domainresource.DomainResource):\n    \"\"\" An ingredient of a manufactured item or pharmaceutical product.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIngredient\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allergenicIndicator = None\n        \"\"\" If the ingredient is a known or suspected allergen.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Identifier for the ingredient.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" Manufacturer of this Ingredient.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.role = None\n        \"\"\" Ingredient role e.g. Active ingredient, excipient.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.specifiedSubstance = None\n        \"\"\" A specified substance that comprises this ingredient.\n        List of `MedicinalProductIngredientSpecifiedSubstance` items (represented as `dict` in JSON). \"\"\"\n        \n        self.substance = None\n        \"\"\" The ingredient substance.\n        Type `MedicinalProductIngredientSubstance` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIngredient, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIngredient, self).elementProperties()\n        js.extend([\n            (\"allergenicIndicator\", \"allergenicIndicator\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, True, None, False),\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, True),\n            (\"specifiedSubstance\", \"specifiedSubstance\", MedicinalProductIngredientSpecifiedSubstance, True, None, False),\n            (\"substance\", \"substance\", MedicinalProductIngredientSubstance, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductIngredientSpecifiedSubstance(backboneelement.BackboneElement):\n    \"\"\" A specified substance that comprises this ingredient.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIngredientSpecifiedSubstance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" The specified substance.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.confidentiality = None\n        \"\"\" Confidentiality level of the specified substance as the ingredient.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.group = None\n        \"\"\" The group of specified substance, e.g. group 1 to 4.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.strength = None\n        \"\"\" Quantity of the substance or specified substance present in the\n        manufactured item or pharmaceutical product.\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIngredientSpecifiedSubstance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstance, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"confidentiality\", \"confidentiality\", codeableconcept.CodeableConcept, False, None, False),\n            (\"group\", \"group\", codeableconcept.CodeableConcept, False, None, True),\n            (\"strength\", \"strength\", MedicinalProductIngredientSpecifiedSubstanceStrength, True, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductIngredientSpecifiedSubstanceStrength(backboneelement.BackboneElement):\n    \"\"\" Quantity of the substance or specified substance present in the\n    manufactured item or pharmaceutical product.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIngredientSpecifiedSubstanceStrength\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.concentration = None\n        \"\"\" The strength per unitary volume (or mass).\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.concentrationLowLimit = None\n        \"\"\" A lower limit for the strength per unitary volume (or mass), for\n        when there is a range. The concentration attribute then becomes the\n        upper limit.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.country = None\n        \"\"\" The country or countries for which the strength range applies.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.measurementPoint = None\n        \"\"\" For when strength is measured at a particular point or distance.\n        Type `str`. \"\"\"\n        \n        self.presentation = None\n        \"\"\" The quantity of substance in the unit of presentation, or in the\n        volume (or mass) of the single pharmaceutical product or\n        manufactured item.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.presentationLowLimit = None\n        \"\"\" A lower limit for the quantity of substance in the unit of\n        presentation. For use when there is a range of strengths, this is\n        the lower limit, with the presentation attribute becoming the upper\n        limit.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.referenceStrength = None\n        \"\"\" Strength expressed in terms of a reference substance.\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIngredientSpecifiedSubstanceStrength, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstanceStrength, self).elementProperties()\n        js.extend([\n            (\"concentration\", \"concentration\", ratio.Ratio, False, None, False),\n            (\"concentrationLowLimit\", \"concentrationLowLimit\", ratio.Ratio, False, None, False),\n            (\"country\", \"country\", codeableconcept.CodeableConcept, True, None, False),\n            (\"measurementPoint\", \"measurementPoint\", str, False, None, False),\n            (\"presentation\", \"presentation\", ratio.Ratio, False, None, True),\n            (\"presentationLowLimit\", \"presentationLowLimit\", ratio.Ratio, False, None, False),\n            (\"referenceStrength\", \"referenceStrength\", MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, True, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(backboneelement.BackboneElement):\n    \"\"\" Strength expressed in terms of a reference substance.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.country = None\n        \"\"\" The country or countries for which the strength range applies.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.measurementPoint = None\n        \"\"\" For when strength is measured at a particular point or distance.\n        Type `str`. \"\"\"\n        \n        self.strength = None\n        \"\"\" Strength expressed in terms of a reference substance.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.strengthLowLimit = None\n        \"\"\" Strength expressed in terms of a reference substance.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.substance = None\n        \"\"\" Relevant reference substance.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, self).elementProperties()\n        js.extend([\n            (\"country\", \"country\", codeableconcept.CodeableConcept, True, None, False),\n            (\"measurementPoint\", \"measurementPoint\", str, False, None, False),\n            (\"strength\", \"strength\", ratio.Ratio, False, None, True),\n            (\"strengthLowLimit\", \"strengthLowLimit\", ratio.Ratio, False, None, False),\n            (\"substance\", \"substance\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductIngredientSubstance(backboneelement.BackboneElement):\n    \"\"\" The ingredient substance.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIngredientSubstance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" The ingredient substance.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.strength = None\n        \"\"\" Quantity of the substance or specified substance present in the\n        manufactured item or pharmaceutical product.\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIngredientSubstance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSubstance, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"strength\", \"strength\", MedicinalProductIngredientSpecifiedSubstanceStrength, True, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import ratio\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/medicinalproductingredient.py": {
      "MedicinalProductIngredient.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductIngredient instance, representing an ingredient of a manufactured item or pharmaceutical product. This constructor sets up properties for allergens, identifiers, manufacturers, roles, specified substances, and the substance itself, handling input as a JSON dictionary if provided.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError; otherwise, validation errors are ignored.\n\nAttributes initialized:\n- allergenicIndicator: Indicates if the ingredient is a known or suspected allergen (bool).\n- identifier: An identifier for the ingredient, defined as an `Identifier` type.\n- manufacturer: A list of `FHIRReference` items representing the manufacturer(s) of the ingredient.\n- role: A `CodeableConcept` defining the ingredient's role, such as active ingredient or excipient.\n- specifiedSubstance: A list of `MedicinalProductIngredientSpecifiedSubstance`, representing specified substances that comprise the ingredient.\n- substance: An instance of `MedicinalProductIngredientSubstance`, indicating the ingredient substance itself.\n\nThis class is part of the FHIR (Fast Healthcare Interoperability Resources) framework, which standardizes data formats for healthcare information. It extends `DomainResource`, which includes additional domain-specific properties and behaviors.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.allergenicIndicator = None\n        ' If the ingredient is a known or suspected allergen.\\n        Type `bool`. '\n        self.identifier = None\n        ' Identifier for the ingredient.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.manufacturer = None\n        ' Manufacturer of this Ingredient.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.role = None\n        ' Ingredient role e.g. Active ingredient, excipient.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.specifiedSubstance = None\n        ' A specified substance that comprises this ingredient.\\n        List of `MedicinalProductIngredientSpecifiedSubstance` items (represented as `dict` in JSON). '\n        self.substance = None\n        ' The ingredient substance.\\n        Type `MedicinalProductIngredientSubstance` (represented as `dict` in JSON). '\n        super(MedicinalProductIngredient, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductIngredient instance, representing an ingredient of a manufactured item or pharmaceutical product. This constructor sets up properties for allergens, identifiers, manufacturers, roles, specified substances, and the substance itself, handling input as a JSON dictionary if provided.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError; otherwise, validation errors are ignored.\n\nAttributes initialized:\n- allergenicIndicator: Indicates if the ingredient is a known or suspected allergen (bool).\n- identifier: An identifier for the ingredient, defined as an `Identifier` type.\n- manufacturer: A list of `FHIRReference` items representing the manufacturer(s) of the ingredient.\n- role: A `CodeableConcept` defining the ingredient's role, such as active ingredient or excipient.\n- specifiedSubstance: A list of `MedicinalProductIngredientSpecifiedSubstance`, representing specified substances that comprise the ingredient.\n- substance: An instance of `MedicinalProductIngredientSubstance`, indicating the ingredient substance itself.\n\nThis class is part of the FHIR (Fast Healthcare Interoperability Resources) framework, which standardizes data formats for healthcare information. It extends `DomainResource`, which includes additional domain-specific properties and behaviors.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductIngredient(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the base class's `as_json` method to include the resource type in the JSON output. It calls the `as_json` method of the superclass and appends the resource type defined by the `resource_type` class attribute, which is 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent's JSON serialization method.\n    - `self.resource_type`: A class attribute that defines the type of the resource.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the base class's `as_json` method to include the resource type in the JSON output. It calls the `as_json` method of the superclass and appends the resource type defined by the `resource_type` class attribute, which is 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent's JSON serialization method.\n    - `self.resource_type`: A class attribute that defines the type of the resource.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/medicinalproductingredient_test.py:MedicinalProductIngredientTests:testMedicinalProductIngredient1": {
      "tests/models/medicinalproductingredient_test.py:MedicinalProductIngredientTests:instantiate_from": {
        "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductingredient_test.py:MedicinalProductIngredientTests:implMedicinalProductIngredient1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductingredient_test.py:MedicinalProductIngredientTests:instantiate_from": {
      "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductingredient.py:MedicinalProductIngredient:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductingredient_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 medicinalproductingredient.py\n            \u2514\u2500\u2500 MedicinalProductIngredient.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and serialization of FHIR (Fast Healthcare Interoperability Resources) MedicinalProductIngredient resources by providing mechanisms to parse, instantiate, and verify their data integrity against the FHIR 4.0.1 specification. It ensures consistency and accuracy by supporting key features such as resource type verification, structured data validation, and conversion of resources to and from JSON format. By providing these capabilities, the module addresses the need for reliable and standardized handling of medicinal product ingredient data in healthcare applications, enabling developers to easily integrate and test FHIR-compliant resources in health IT systems.\n\n## FILE 1: fhirclient/models/medicinalproductingredient.py\n\n- CLASS METHOD: MedicinalProductIngredient.__init__\n  - CLASS SIGNATURE: class MedicinalProductIngredient(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductIngredient instance, representing an ingredient of a manufactured item or pharmaceutical product. This constructor sets up properties for allergens, identifiers, manufacturers, roles, specified substances, and the substance itself, handling input as a JSON dictionary if provided.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError; otherwise, validation errors are ignored.\n\nAttributes initialized:\n- allergenicIndicator: Indicates if the ingredient is a known or suspected allergen (bool).\n- identifier: An identifier for the ingredient, defined as an `Identifier` type.\n- manufacturer: A list of `FHIRReference` items representing the manufacturer(s) of the ingredient.\n- role: A `CodeableConcept` defining the ingredient's role, such as active ingredient or excipient.\n- specifiedSubstance: A list of `MedicinalProductIngredientSpecifiedSubstance`, representing specified substances that comprise the ingredient.\n- substance: An instance of `MedicinalProductIngredientSubstance`, indicating the ingredient substance itself.\n\nThis class is part of the FHIR (Fast Healthcare Interoperability Resources) framework, which standardizes data formats for healthcare information. It extends `DomainResource`, which includes additional domain-specific properties and behaviors.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON dictionary representation.\n\nThis method overrides the base class's `as_json` method to include the resource type in the JSON output. It calls the `as_json` method of the superclass and appends the resource type defined by the `resource_type` class attribute, which is 'FHIRAbstractResource'.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent's JSON serialization method.\n    - `self.resource_type`: A class attribute that defines the type of the resource.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/medicinalproductingredient.py": "from . import domainresource\n\nclass MedicinalProductIngredient(domainresource.DomainResource):\n    \"\"\" An ingredient of a manufactured item or pharmaceutical product.\n    \"\"\"\n    resource_type = 'MedicinalProductIngredient'\n\n    def elementProperties(self):\n        js = super(MedicinalProductIngredient, self).elementProperties()\n        js.extend([('allergenicIndicator', 'allergenicIndicator', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, True, None, False), ('role', 'role', codeableconcept.CodeableConcept, False, None, True), ('specifiedSubstance', 'specifiedSubstance', MedicinalProductIngredientSpecifiedSubstance, True, None, False), ('substance', 'substance', MedicinalProductIngredientSubstance, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MedicinalProductIngredientSpecifiedSubstance(backboneelement.BackboneElement):\n    \"\"\" A specified substance that comprises this ingredient.\n    \"\"\"\n    resource_type = 'MedicinalProductIngredientSpecifiedSubstance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' The specified substance.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.confidentiality = None\n        ' Confidentiality level of the specified substance as the ingredient.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.group = None\n        ' The group of specified substance, e.g. group 1 to 4.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.strength = None\n        ' Quantity of the substance or specified substance present in the\\n        manufactured item or pharmaceutical product.\\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON). '\n        super(MedicinalProductIngredientSpecifiedSubstance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstance, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('confidentiality', 'confidentiality', codeableconcept.CodeableConcept, False, None, False), ('group', 'group', codeableconcept.CodeableConcept, False, None, True), ('strength', 'strength', MedicinalProductIngredientSpecifiedSubstanceStrength, True, None, False)])\n        return js\n\nclass MedicinalProductIngredientSpecifiedSubstanceStrength(backboneelement.BackboneElement):\n    \"\"\" Quantity of the substance or specified substance present in the\n    manufactured item or pharmaceutical product.\n    \"\"\"\n    resource_type = 'MedicinalProductIngredientSpecifiedSubstanceStrength'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.concentration = None\n        ' The strength per unitary volume (or mass).\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.concentrationLowLimit = None\n        ' A lower limit for the strength per unitary volume (or mass), for\\n        when there is a range. The concentration attribute then becomes the\\n        upper limit.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.country = None\n        ' The country or countries for which the strength range applies.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.measurementPoint = None\n        ' For when strength is measured at a particular point or distance.\\n        Type `str`. '\n        self.presentation = None\n        ' The quantity of substance in the unit of presentation, or in the\\n        volume (or mass) of the single pharmaceutical product or\\n        manufactured item.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.presentationLowLimit = None\n        ' A lower limit for the quantity of substance in the unit of\\n        presentation. For use when there is a range of strengths, this is\\n        the lower limit, with the presentation attribute becoming the upper\\n        limit.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.referenceStrength = None\n        ' Strength expressed in terms of a reference substance.\\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength` items (represented as `dict` in JSON). '\n        super(MedicinalProductIngredientSpecifiedSubstanceStrength, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstanceStrength, self).elementProperties()\n        js.extend([('concentration', 'concentration', ratio.Ratio, False, None, False), ('concentrationLowLimit', 'concentrationLowLimit', ratio.Ratio, False, None, False), ('country', 'country', codeableconcept.CodeableConcept, True, None, False), ('measurementPoint', 'measurementPoint', str, False, None, False), ('presentation', 'presentation', ratio.Ratio, False, None, True), ('presentationLowLimit', 'presentationLowLimit', ratio.Ratio, False, None, False), ('referenceStrength', 'referenceStrength', MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, True, None, False)])\n        return js\n\nclass MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(backboneelement.BackboneElement):\n    \"\"\" Strength expressed in terms of a reference substance.\n    \"\"\"\n    resource_type = 'MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.country = None\n        ' The country or countries for which the strength range applies.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.measurementPoint = None\n        ' For when strength is measured at a particular point or distance.\\n        Type `str`. '\n        self.strength = None\n        ' Strength expressed in terms of a reference substance.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.strengthLowLimit = None\n        ' Strength expressed in terms of a reference substance.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.substance = None\n        ' Relevant reference substance.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength, self).elementProperties()\n        js.extend([('country', 'country', codeableconcept.CodeableConcept, True, None, False), ('measurementPoint', 'measurementPoint', str, False, None, False), ('strength', 'strength', ratio.Ratio, False, None, True), ('strengthLowLimit', 'strengthLowLimit', ratio.Ratio, False, None, False), ('substance', 'substance', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MedicinalProductIngredientSubstance(backboneelement.BackboneElement):\n    \"\"\" The ingredient substance.\n    \"\"\"\n    resource_type = 'MedicinalProductIngredientSubstance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' The ingredient substance.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.strength = None\n        ' Quantity of the substance or specified substance present in the\\n        manufactured item or pharmaceutical product.\\n        List of `MedicinalProductIngredientSpecifiedSubstanceStrength` items (represented as `dict` in JSON). '\n        super(MedicinalProductIngredientSubstance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductIngredientSubstance, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('strength', 'strength', MedicinalProductIngredientSpecifiedSubstanceStrength, True, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import ratio",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}