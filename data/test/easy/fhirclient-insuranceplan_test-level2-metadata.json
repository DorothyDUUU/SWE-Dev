{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-insuranceplan_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/insuranceplan_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import insuranceplan\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass InsurancePlanTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"InsurancePlan\", js[\"resourceType\"])\n        return insuranceplan.InsurancePlan(js)\n    \n    def testInsurancePlan1(self):\n        inst = self.instantiate_from(\"insuranceplan-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a InsurancePlan instance\")\n        self.implInsurancePlan1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"InsurancePlan\", js[\"resourceType\"])\n        inst2 = insuranceplan.InsurancePlan(js)\n        self.implInsurancePlan1(inst2)\n    \n    def implInsurancePlan1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name, \"foo\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>name</b>: foo</p></div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/insuranceplan.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/InsurancePlan).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass InsurancePlan(domainresource.DomainResource):\n    \"\"\" Details of a Health Insurance product/plan provided by an organization.\n    \"\"\"\n    \n    resource_type = \"InsurancePlan\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.administeredBy = None\n        \"\"\" Product administrator.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.alias = None\n        \"\"\" Alternate names.\n        List of `str` items. \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact for the product.\n        List of `InsurancePlanContact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.coverage = None\n        \"\"\" Coverage details.\n        List of `InsurancePlanCoverage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.coverageArea = None\n        \"\"\" Where product applies.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.endpoint = None\n        \"\"\" Technical endpoint.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for Product.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Official name.\n        Type `str`. \"\"\"\n        \n        self.network = None\n        \"\"\" What networks are Included.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.ownedBy = None\n        \"\"\" Plan issuer.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" When the product is available.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.plan = None\n        \"\"\" Plan details.\n        List of `InsurancePlanPlan` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Kind of product.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlan, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlan, self).elementProperties()\n        js.extend([\n            (\"administeredBy\", \"administeredBy\", fhirreference.FHIRReference, False, None, False),\n            (\"alias\", \"alias\", str, True, None, False),\n            (\"contact\", \"contact\", InsurancePlanContact, True, None, False),\n            (\"coverage\", \"coverage\", InsurancePlanCoverage, True, None, False),\n            (\"coverageArea\", \"coverageArea\", fhirreference.FHIRReference, True, None, False),\n            (\"endpoint\", \"endpoint\", fhirreference.FHIRReference, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"network\", \"network\", fhirreference.FHIRReference, True, None, False),\n            (\"ownedBy\", \"ownedBy\", fhirreference.FHIRReference, False, None, False),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"plan\", \"plan\", InsurancePlanPlan, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass InsurancePlanContact(backboneelement.BackboneElement):\n    \"\"\" Contact for the product.\n    \n    The contact for the health insurance product for a certain purpose.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanContact\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.address = None\n        \"\"\" Visiting or postal addresses for the contact.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" A name associated with the contact.\n        Type `HumanName` (represented as `dict` in JSON). \"\"\"\n        \n        self.purpose = None\n        \"\"\" The type of contact.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.telecom = None\n        \"\"\" Contact details (telephone, email, etc.)  for a contact.\n        List of `ContactPoint` items (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanContact, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanContact, self).elementProperties()\n        js.extend([\n            (\"address\", \"address\", address.Address, False, None, False),\n            (\"name\", \"name\", humanname.HumanName, False, None, False),\n            (\"purpose\", \"purpose\", codeableconcept.CodeableConcept, False, None, False),\n            (\"telecom\", \"telecom\", contactpoint.ContactPoint, True, None, False),\n        ])\n        return js\n\n\nclass InsurancePlanCoverage(backboneelement.BackboneElement):\n    \"\"\" Coverage details.\n    \n    Details about the coverage offered by the insurance product.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanCoverage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.benefit = None\n        \"\"\" List of benefits.\n        List of `InsurancePlanCoverageBenefit` items (represented as `dict` in JSON). \"\"\"\n        \n        self.network = None\n        \"\"\" What networks provide coverage.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of coverage.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanCoverage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanCoverage, self).elementProperties()\n        js.extend([\n            (\"benefit\", \"benefit\", InsurancePlanCoverageBenefit, True, None, True),\n            (\"network\", \"network\", fhirreference.FHIRReference, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass InsurancePlanCoverageBenefit(backboneelement.BackboneElement):\n    \"\"\" List of benefits.\n    \n    Specific benefits under this type of coverage.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanCoverageBenefit\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.limit = None\n        \"\"\" Benefit limits.\n        List of `InsurancePlanCoverageBenefitLimit` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requirement = None\n        \"\"\" Referral requirements.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of benefit.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanCoverageBenefit, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanCoverageBenefit, self).elementProperties()\n        js.extend([\n            (\"limit\", \"limit\", InsurancePlanCoverageBenefitLimit, True, None, False),\n            (\"requirement\", \"requirement\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass InsurancePlanCoverageBenefitLimit(backboneelement.BackboneElement):\n    \"\"\" Benefit limits.\n    \n    The specific limits on the benefit.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanCoverageBenefitLimit\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Benefit limit details.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Maximum value allowed.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanCoverageBenefitLimit, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanCoverageBenefitLimit, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"value\", \"value\", quantity.Quantity, False, None, False),\n        ])\n        return js\n\n\nclass InsurancePlanPlan(backboneelement.BackboneElement):\n    \"\"\" Plan details.\n    \n    Details about an insurance plan.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanPlan\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.coverageArea = None\n        \"\"\" Where product applies.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.generalCost = None\n        \"\"\" Overall costs.\n        List of `InsurancePlanPlanGeneralCost` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for Product.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.network = None\n        \"\"\" What networks provide coverage.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specificCost = None\n        \"\"\" Specific costs.\n        List of `InsurancePlanPlanSpecificCost` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of plan.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanPlan, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanPlan, self).elementProperties()\n        js.extend([\n            (\"coverageArea\", \"coverageArea\", fhirreference.FHIRReference, True, None, False),\n            (\"generalCost\", \"generalCost\", InsurancePlanPlanGeneralCost, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"network\", \"network\", fhirreference.FHIRReference, True, None, False),\n            (\"specificCost\", \"specificCost\", InsurancePlanPlanSpecificCost, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass InsurancePlanPlanGeneralCost(backboneelement.BackboneElement):\n    \"\"\" Overall costs.\n    \n    Overall costs associated with the plan.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanPlanGeneralCost\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.comment = None\n        \"\"\" Additional cost information.\n        Type `str`. \"\"\"\n        \n        self.cost = None\n        \"\"\" Cost value.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.groupSize = None\n        \"\"\" Number of enrollees.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of cost.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanPlanGeneralCost, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanPlanGeneralCost, self).elementProperties()\n        js.extend([\n            (\"comment\", \"comment\", str, False, None, False),\n            (\"cost\", \"cost\", money.Money, False, None, False),\n            (\"groupSize\", \"groupSize\", int, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass InsurancePlanPlanSpecificCost(backboneelement.BackboneElement):\n    \"\"\" Specific costs.\n    \n    Costs associated with the coverage provided by the product.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanPlanSpecificCost\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.benefit = None\n        \"\"\" Benefits list.\n        List of `InsurancePlanPlanSpecificCostBenefit` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" General category of benefit.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanPlanSpecificCost, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCost, self).elementProperties()\n        js.extend([\n            (\"benefit\", \"benefit\", InsurancePlanPlanSpecificCostBenefit, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass InsurancePlanPlanSpecificCostBenefit(backboneelement.BackboneElement):\n    \"\"\" Benefits list.\n    \n    List of the specific benefits under this category of benefit.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanPlanSpecificCostBenefit\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.cost = None\n        \"\"\" List of the costs.\n        List of `InsurancePlanPlanSpecificCostBenefitCost` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of specific benefit.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanPlanSpecificCostBenefit, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCostBenefit, self).elementProperties()\n        js.extend([\n            (\"cost\", \"cost\", InsurancePlanPlanSpecificCostBenefitCost, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass InsurancePlanPlanSpecificCostBenefitCost(backboneelement.BackboneElement):\n    \"\"\" List of the costs.\n    \n    List of the costs associated with a specific benefit.\n    \"\"\"\n    \n    resource_type = \"InsurancePlanPlanSpecificCostBenefitCost\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.applicability = None\n        \"\"\" in-network | out-of-network | other.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.qualifiers = None\n        \"\"\" Additional information about the cost.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of cost.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" The actual cost value.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        super(InsurancePlanPlanSpecificCostBenefitCost, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCostBenefitCost, self).elementProperties()\n        js.extend([\n            (\"applicability\", \"applicability\", codeableconcept.CodeableConcept, False, None, False),\n            (\"qualifiers\", \"qualifiers\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"value\", \"value\", quantity.Quantity, False, None, False),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import humanname\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n"
  },
  "GT_src_dict": {
    "fhirclient/models/insuranceplan.py": {
      "InsurancePlan.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes an instance of the InsurancePlan class, which represents the details of a health insurance product/plan provided by an organization. This constructor allows for the optional initialization of various properties based on a provided JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that contains the initialization data for the InsurancePlan instance. It populates attributes like `administeredBy`, `alias`, `contact`, `coverage`, and more.\n- strict (bool, optional): If set to True (default), raises a FHIRValidationError on validation errors for invalid variables. If False, allows for leniency in type checks.\n\nAttributes:\n- administeredBy (FHIRReference): Administrator for the product.\n- alias (List[str]): Alternate names for the insurance plan.\n- contact (List[InsurancePlanContact]): Contact information related to the insurance product.\n- coverage (List[InsurancePlanCoverage]): Coverage details associated with this insurance plan.\n- coverageArea (List[FHIRReference]): Areas where the insurance is effective.\n- endpoint (List[FHIRReference]): Technical endpoints associated with the plan.\n- identifier (List[Identifier]): Business identifiers for the insurance product.\n- name (str): Official name of the insurance plan.\n- network (List[FHIRReference]): Networks included within the plan.\n- ownedBy (FHIRReference): Issuer of the insurance plan.\n- period (Period): Availability period of the product.\n- plan (List[InsurancePlanPlan]): Detailed plans within the insurance product.\n- status (str): Current status of the plan (draft, active, retired, unknown).\n- type (List[CodeableConcept]): Type or category of the insurance product.\n\nThis constructor interacts with the superclass `DomainResource`, which it extends, thus utilizing its initialization routines and property management features.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.administeredBy = None\n        ' Product administrator.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.alias = None\n        ' Alternate names.\\n        List of `str` items. '\n        self.contact = None\n        ' Contact for the product.\\n        List of `InsurancePlanContact` items (represented as `dict` in JSON). '\n        self.coverage = None\n        ' Coverage details.\\n        List of `InsurancePlanCoverage` items (represented as `dict` in JSON). '\n        self.coverageArea = None\n        ' Where product applies.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.endpoint = None\n        ' Technical endpoint.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for Product.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Official name.\\n        Type `str`. '\n        self.network = None\n        ' What networks are Included.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.ownedBy = None\n        ' Plan issuer.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.period = None\n        ' When the product is available.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.plan = None\n        ' Plan details.\\n        List of `InsurancePlanPlan` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.type = None\n        ' Kind of product.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(InsurancePlan, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes an instance of the InsurancePlan class, which represents the details of a health insurance product/plan provided by an organization. This constructor allows for the optional initialization of various properties based on a provided JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that contains the initialization data for the InsurancePlan instance. It populates attributes like `administeredBy`, `alias`, `contact`, `coverage`, and more.\n- strict (bool, optional): If set to True (default), raises a FHIRValidationError on validation errors for invalid variables. If False, allows for leniency in type checks.\n\nAttributes:\n- administeredBy (FHIRReference): Administrator for the product.\n- alias (List[str]): Alternate names for the insurance plan.\n- contact (List[InsurancePlanContact]): Contact information related to the insurance product.\n- coverage (List[InsurancePlanCoverage]): Coverage details associated with this insurance plan.\n- coverageArea (List[FHIRReference]): Areas where the insurance is effective.\n- endpoint (List[FHIRReference]): Technical endpoints associated with the plan.\n- identifier (List[Identifier]): Business identifiers for the insurance product.\n- name (str): Official name of the insurance plan.\n- network (List[FHIRReference]): Networks included within the plan.\n- ownedBy (FHIRReference): Issuer of the insurance plan.\n- period (Period): Availability period of the product.\n- plan (List[InsurancePlanPlan]): Detailed plans within the insurance product.\n- status (str): Current status of the plan (draft, active, retired, unknown).\n- type (List[CodeableConcept]): Type or category of the insurance product.\n\nThis constructor interacts with the superclass `DomainResource`, which it extends, thus utilizing its initialization routines and property management features.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class InsurancePlan(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the parent class, adding the `resourceType` key to the resulting JSON dictionary. It uses `self.resource_type`, which is a class-level constant defined as 'FHIRAbstractResource', to specify the resource type. \n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes from the base class's `as_json()` output and the `resourceType`.\n\nDependencies:\n    - The method depends on the parent class's `as_json()` method to obtain the base representation and extends it by adding the resource type.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the parent class, adding the `resourceType` key to the resulting JSON dictionary. It uses `self.resource_type`, which is a class-level constant defined as 'FHIRAbstractResource', to specify the resource type. \n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes from the base class's `as_json()` output and the `resourceType`.\n\nDependencies:\n    - The method depends on the parent class's `as_json()` method to obtain the base representation and extends it by adding the resource type.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it allows setting properties based on existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError during initialization. If False, these errors are suppressed.\n\nAttributes initialized:\n- contained (list): A list of contained, inline `Resource` items.\n- extension (list): A list of additional content defined by implementations, represented as `Extension` items.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as `Extension` items.\n- text (Narrative or None): A text summary of the resource for human interpretation, represented as a `Narrative` item.\n\nThis constructor requires the parent class `Resource` from the `resource` module, which is called via the `super()` function to ensure that any base class initialization occurs correctly.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it allows setting properties based on existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError during initialization. If False, these errors are suppressed.\n\nAttributes initialized:\n- contained (list): A list of contained, inline `Resource` items.\n- extension (list): A list of additional content defined by implementations, represented as `Extension` items.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as `Extension` items.\n- text (Narrative or None): A text summary of the resource for human interpretation, represented as a `Narrative` item.\n\nThis constructor requires the parent class `Resource` from the `resource` module, which is called via the `super()` function to ensure that any base class initialization occurs correctly.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by checking and including the properties defined in `elementProperties()`. The method ensures that all required properties are present and of the correct types, raising a `FHIRValidationError` if any issues are found.\n\nParameters:\n- None\n\nReturns:\n- dict: A validated dictionary representation of the FHIR element, suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If any properties have the wrong type or if required properties are missing.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the list of properties for serialization.\n- `_matches_type(value, typ)`: to verify that the values match their expected types.\n- A set of `found` and `nonoptionals` to track which properties were serialized and to determine if any required properties were omitted.\n\nThis method is essential for converting the internal representation of FHIR elements into a format that can be easily serialized to JSON for transmission or storage.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by checking and including the properties defined in `elementProperties()`. The method ensures that all required properties are present and of the correct types, raising a `FHIRValidationError` if any issues are found.\n\nParameters:\n- None\n\nReturns:\n- dict: A validated dictionary representation of the FHIR element, suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If any properties have the wrong type or if required properties are missing.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the list of properties for serialization.\n- `_matches_type(value, typ)`: to verify that the values match their expected types.\n- A set of `found` and `nonoptionals` to track which properties were serialized and to determine if any required properties were omitted.\n\nThis method is essential for converting the internal representation of FHIR elements into a format that can be easily serialized to JSON for transmission or storage.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/insuranceplan.py:InsurancePlan:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/insuranceplan.py": {
        "InsurancePlan.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(InsurancePlan, self).elementProperties()\n        js.extend([('administeredBy', 'administeredBy', fhirreference.FHIRReference, False, None, False), ('alias', 'alias', str, True, None, False), ('contact', 'contact', InsurancePlanContact, True, None, False), ('coverage', 'coverage', InsurancePlanCoverage, True, None, False), ('coverageArea', 'coverageArea', fhirreference.FHIRReference, True, None, False), ('endpoint', 'endpoint', fhirreference.FHIRReference, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('name', 'name', str, False, None, False), ('network', 'network', fhirreference.FHIRReference, True, None, False), ('ownedBy', 'ownedBy', fhirreference.FHIRReference, False, None, False), ('period', 'period', period.Period, False, None, False), ('plan', 'plan', InsurancePlanPlan, True, None, False), ('status', 'status', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class InsurancePlan(domainresource.DomainResource):"
        }
      },
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/insuranceplan_test.py:InsurancePlanTests:testInsurancePlan1": {
      "tests/models/insuranceplan_test.py:InsurancePlanTests:instantiate_from": {
        "fhirclient/models/insuranceplan.py:InsurancePlan:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/insuranceplan.py:InsurancePlan:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/insuranceplan_test.py:InsurancePlanTests:implInsurancePlan1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/insuranceplan.py:InsurancePlan:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/insuranceplan.py:InsurancePlan:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/insuranceplan.py:InsurancePlan:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/insuranceplan_test.py:InsurancePlanTests:instantiate_from": {
      "fhirclient/models/insuranceplan.py:InsurancePlan:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/insuranceplan.py:InsurancePlan:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-insuranceplan_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 insuranceplan.py\n            \u2514\u2500\u2500 InsurancePlan.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and testing of FHIR (Fast Healthcare Interoperability Resources) `InsurancePlan` resources, ensuring compliance with FHIR standards and correct data representation. It provides functionality to instantiate, verify, and serialize `InsurancePlan` objects, confirming their structure, attributes, and content adhere to expected specifications. By supporting automated testing of `InsurancePlan` resources, the module enables developers to ensure data integrity, interoperability, and alignment with SMART Health IT standards, helping streamline the development and maintenance of healthcare applications that rely on standardized insurance data formats.\n\n## FILE 1: fhirclient/models/insuranceplan.py\n\n- CLASS METHOD: InsurancePlan.__init__\n  - CLASS SIGNATURE: class InsurancePlan(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the InsurancePlan class, which represents the details of a health insurance product/plan provided by an organization. This constructor allows for the optional initialization of various properties based on a provided JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that contains the initialization data for the InsurancePlan instance. It populates attributes like `administeredBy`, `alias`, `contact`, `coverage`, and more.\n- strict (bool, optional): If set to True (default), raises a FHIRValidationError on validation errors for invalid variables. If False, allows for leniency in type checks.\n\nAttributes:\n- administeredBy (FHIRReference): Administrator for the product.\n- alias (List[str]): Alternate names for the insurance plan.\n- contact (List[InsurancePlanContact]): Contact information related to the insurance product.\n- coverage (List[InsurancePlanCoverage]): Coverage details associated with this insurance plan.\n- coverageArea (List[FHIRReference]): Areas where the insurance is effective.\n- endpoint (List[FHIRReference]): Technical endpoints associated with the plan.\n- identifier (List[Identifier]): Business identifiers for the insurance product.\n- name (str): Official name of the insurance plan.\n- network (List[FHIRReference]): Networks included within the plan.\n- ownedBy (FHIRReference): Issuer of the insurance plan.\n- period (Period): Availability period of the product.\n- plan (List[InsurancePlanPlan]): Detailed plans within the insurance product.\n- status (str): Current status of the plan (draft, active, retired, unknown).\n- type (List[CodeableConcept]): Type or category of the insurance product.\n\nThis constructor interacts with the superclass `DomainResource`, which it extends, thus utilizing its initialization routines and property management features.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method from the parent class, adding the `resourceType` key to the resulting JSON dictionary. It uses `self.resource_type`, which is a class-level constant defined as 'FHIRAbstractResource', to specify the resource type. \n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including all attributes from the base class's `as_json()` output and the `resourceType`.\n\nDependencies:\n    - The method depends on the parent class's `as_json()` method to obtain the base representation and extends it by adding the resource type.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it allows setting properties based on existing data.\n- strict (bool, optional): If set to True (default), invalid properties will raise a TypeError during initialization. If False, these errors are suppressed.\n\nAttributes initialized:\n- contained (list): A list of contained, inline `Resource` items.\n- extension (list): A list of additional content defined by implementations, represented as `Extension` items.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as `Extension` items.\n- text (Narrative or None): A text summary of the resource for human interpretation, represented as a `Narrative` item.\n\nThis constructor requires the parent class `Resource` from the `resource` module, which is called via the `super()` function to ensure that any base class initialization occurs correctly.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIRAbstractBase instance to a JSON-compatible dictionary by checking and including the properties defined in `elementProperties()`. The method ensures that all required properties are present and of the correct types, raising a `FHIRValidationError` if any issues are found.\n\nParameters:\n- None\n\nReturns:\n- dict: A validated dictionary representation of the FHIR element, suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If any properties have the wrong type or if required properties are missing.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the list of properties for serialization.\n- `_matches_type(value, typ)`: to verify that the values match their expected types.\n- A set of `found` and `nonoptionals` to track which properties were serialized and to determine if any required properties were omitted.\n\nThis method is essential for converting the internal representation of FHIR elements into a format that can be easily serialized to JSON for transmission or storage.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/insuranceplan.py": "from . import domainresource\n\nclass InsurancePlan(domainresource.DomainResource):\n    \"\"\" Details of a Health Insurance product/plan provided by an organization.\n    \"\"\"\n    resource_type = 'InsurancePlan'\n\n    def elementProperties(self):\n        js = super(InsurancePlan, self).elementProperties()\n        js.extend([('administeredBy', 'administeredBy', fhirreference.FHIRReference, False, None, False), ('alias', 'alias', str, True, None, False), ('contact', 'contact', InsurancePlanContact, True, None, False), ('coverage', 'coverage', InsurancePlanCoverage, True, None, False), ('coverageArea', 'coverageArea', fhirreference.FHIRReference, True, None, False), ('endpoint', 'endpoint', fhirreference.FHIRReference, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('name', 'name', str, False, None, False), ('network', 'network', fhirreference.FHIRReference, True, None, False), ('ownedBy', 'ownedBy', fhirreference.FHIRReference, False, None, False), ('period', 'period', period.Period, False, None, False), ('plan', 'plan', InsurancePlanPlan, True, None, False), ('status', 'status', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass InsurancePlanContact(backboneelement.BackboneElement):\n    \"\"\" Contact for the product.\n    \n    The contact for the health insurance product for a certain purpose.\n    \"\"\"\n    resource_type = 'InsurancePlanContact'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.address = None\n        ' Visiting or postal addresses for the contact.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.name = None\n        ' A name associated with the contact.\\n        Type `HumanName` (represented as `dict` in JSON). '\n        self.purpose = None\n        ' The type of contact.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.telecom = None\n        ' Contact details (telephone, email, etc.)  for a contact.\\n        List of `ContactPoint` items (represented as `dict` in JSON). '\n        super(InsurancePlanContact, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanContact, self).elementProperties()\n        js.extend([('address', 'address', address.Address, False, None, False), ('name', 'name', humanname.HumanName, False, None, False), ('purpose', 'purpose', codeableconcept.CodeableConcept, False, None, False), ('telecom', 'telecom', contactpoint.ContactPoint, True, None, False)])\n        return js\n\nclass InsurancePlanCoverage(backboneelement.BackboneElement):\n    \"\"\" Coverage details.\n    \n    Details about the coverage offered by the insurance product.\n    \"\"\"\n    resource_type = 'InsurancePlanCoverage'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.benefit = None\n        ' List of benefits.\\n        List of `InsurancePlanCoverageBenefit` items (represented as `dict` in JSON). '\n        self.network = None\n        ' What networks provide coverage.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of coverage.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanCoverage, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanCoverage, self).elementProperties()\n        js.extend([('benefit', 'benefit', InsurancePlanCoverageBenefit, True, None, True), ('network', 'network', fhirreference.FHIRReference, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass InsurancePlanCoverageBenefit(backboneelement.BackboneElement):\n    \"\"\" List of benefits.\n    \n    Specific benefits under this type of coverage.\n    \"\"\"\n    resource_type = 'InsurancePlanCoverageBenefit'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.limit = None\n        ' Benefit limits.\\n        List of `InsurancePlanCoverageBenefitLimit` items (represented as `dict` in JSON). '\n        self.requirement = None\n        ' Referral requirements.\\n        Type `str`. '\n        self.type = None\n        ' Type of benefit.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanCoverageBenefit, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanCoverageBenefit, self).elementProperties()\n        js.extend([('limit', 'limit', InsurancePlanCoverageBenefitLimit, True, None, False), ('requirement', 'requirement', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass InsurancePlanCoverageBenefitLimit(backboneelement.BackboneElement):\n    \"\"\" Benefit limits.\n    \n    The specific limits on the benefit.\n    \"\"\"\n    resource_type = 'InsurancePlanCoverageBenefitLimit'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Benefit limit details.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' Maximum value allowed.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        super(InsurancePlanCoverageBenefitLimit, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanCoverageBenefitLimit, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('value', 'value', quantity.Quantity, False, None, False)])\n        return js\n\nclass InsurancePlanPlan(backboneelement.BackboneElement):\n    \"\"\" Plan details.\n    \n    Details about an insurance plan.\n    \"\"\"\n    resource_type = 'InsurancePlanPlan'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.coverageArea = None\n        ' Where product applies.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.generalCost = None\n        ' Overall costs.\\n        List of `InsurancePlanPlanGeneralCost` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for Product.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.network = None\n        ' What networks provide coverage.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.specificCost = None\n        ' Specific costs.\\n        List of `InsurancePlanPlanSpecificCost` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of plan.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanPlan, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanPlan, self).elementProperties()\n        js.extend([('coverageArea', 'coverageArea', fhirreference.FHIRReference, True, None, False), ('generalCost', 'generalCost', InsurancePlanPlanGeneralCost, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('network', 'network', fhirreference.FHIRReference, True, None, False), ('specificCost', 'specificCost', InsurancePlanPlanSpecificCost, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass InsurancePlanPlanGeneralCost(backboneelement.BackboneElement):\n    \"\"\" Overall costs.\n    \n    Overall costs associated with the plan.\n    \"\"\"\n    resource_type = 'InsurancePlanPlanGeneralCost'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.comment = None\n        ' Additional cost information.\\n        Type `str`. '\n        self.cost = None\n        ' Cost value.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.groupSize = None\n        ' Number of enrollees.\\n        Type `int`. '\n        self.type = None\n        ' Type of cost.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanPlanGeneralCost, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanPlanGeneralCost, self).elementProperties()\n        js.extend([('comment', 'comment', str, False, None, False), ('cost', 'cost', money.Money, False, None, False), ('groupSize', 'groupSize', int, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass InsurancePlanPlanSpecificCost(backboneelement.BackboneElement):\n    \"\"\" Specific costs.\n    \n    Costs associated with the coverage provided by the product.\n    \"\"\"\n    resource_type = 'InsurancePlanPlanSpecificCost'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.benefit = None\n        ' Benefits list.\\n        List of `InsurancePlanPlanSpecificCostBenefit` items (represented as `dict` in JSON). '\n        self.category = None\n        ' General category of benefit.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanPlanSpecificCost, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCost, self).elementProperties()\n        js.extend([('benefit', 'benefit', InsurancePlanPlanSpecificCostBenefit, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass InsurancePlanPlanSpecificCostBenefit(backboneelement.BackboneElement):\n    \"\"\" Benefits list.\n    \n    List of the specific benefits under this category of benefit.\n    \"\"\"\n    resource_type = 'InsurancePlanPlanSpecificCostBenefit'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.cost = None\n        ' List of the costs.\\n        List of `InsurancePlanPlanSpecificCostBenefitCost` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of specific benefit.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(InsurancePlanPlanSpecificCostBenefit, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCostBenefit, self).elementProperties()\n        js.extend([('cost', 'cost', InsurancePlanPlanSpecificCostBenefitCost, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass InsurancePlanPlanSpecificCostBenefitCost(backboneelement.BackboneElement):\n    \"\"\" List of the costs.\n    \n    List of the costs associated with a specific benefit.\n    \"\"\"\n    resource_type = 'InsurancePlanPlanSpecificCostBenefitCost'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.applicability = None\n        ' in-network | out-of-network | other.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.qualifiers = None\n        ' Additional information about the cost.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of cost.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' The actual cost value.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        super(InsurancePlanPlanSpecificCostBenefitCost, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(InsurancePlanPlanSpecificCostBenefitCost, self).elementProperties()\n        js.extend([('applicability', 'applicability', codeableconcept.CodeableConcept, False, None, False), ('qualifiers', 'qualifiers', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('value', 'value', quantity.Quantity, False, None, False)])\n        return js\nfrom . import address\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import humanname\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}"
  }
}