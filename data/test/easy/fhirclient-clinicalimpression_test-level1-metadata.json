{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-clinicalimpression_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/clinicalimpression_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import clinicalimpression\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ClinicalImpressionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ClinicalImpression\", js[\"resourceType\"])\n        return clinicalimpression.ClinicalImpression(js)\n    \n    def testClinicalImpression1(self):\n        inst = self.instantiate_from(\"clinicalimpression-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClinicalImpression instance\")\n        self.implClinicalImpression1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClinicalImpression\", js[\"resourceType\"])\n        inst2 = clinicalimpression.ClinicalImpression(js)\n        self.implClinicalImpression1(inst2)\n    \n    def implClinicalImpression1(self, inst):\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2014-12-06T22:33:00+11:00\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2014-12-06T22:33:00+11:00\")\n        self.assertEqual(inst.description, \"This 26 yo male patient is brought into ER by ambulance after being involved in a motor vehicle accident\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2014-12-06T22:33:00+11:00\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2014-12-06T22:33:00+11:00\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2014-12-06T20:00:00+11:00\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2014-12-06T20:00:00+11:00\")\n        self.assertEqual(inst.finding[0].itemCodeableConcept.coding[0].code, \"850.0\")\n        self.assertEqual(inst.finding[0].itemCodeableConcept.coding[0].system, \"http://hl7.org/fhir/sid/icd-9\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.investigation[0].code.text, \"Initial Examination\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.summary, \"provisional diagnoses of laceration of head and traumatic brain injury (TBI)\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/clinicalimpression.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ClinicalImpression).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ClinicalImpression(domainresource.DomainResource):\n    \"\"\" A clinical assessment performed when planning treatments and management\n    strategies for a patient.\n    \n    A record of a clinical assessment performed to determine what problem(s)\n    may affect the patient and before planning the treatments or management\n    strategies that are best to manage a patient's condition. Assessments are\n    often 1:1 with a clinical consultation / encounter,  but this varies\n    greatly depending on the clinical workflow. This resource is called\n    \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion\n    with the recording of assessment tools such as Apgar score.\n    \"\"\"\n    \n    resource_type = \"ClinicalImpression\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assessor = None\n        \"\"\" The clinician performing the assessment.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Kind of assessment performed.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" When the assessment was documented.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Why/how the assessment was performed.\n        Type `str`. \"\"\"\n        \n        self.effectiveDateTime = None\n        \"\"\" Time of assessment.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" Time of assessment.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.finding = None\n        \"\"\" Possible or likely findings and diagnoses.\n        List of `ClinicalImpressionFinding` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.investigation = None\n        \"\"\" One or more sets of investigations (signs, symptoms, etc.).\n        List of `ClinicalImpressionInvestigation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Comments made about the ClinicalImpression.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.previous = None\n        \"\"\" Reference to last assessment.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.problem = None\n        \"\"\" Relevant impressions of patient state.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.prognosisCodeableConcept = None\n        \"\"\" Estimate of likely outcome.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.prognosisReference = None\n        \"\"\" RiskAssessment expressing likely outcome.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.protocol = None\n        \"\"\" Clinical Protocol followed.\n        List of `str` items. \"\"\"\n        \n        self.status = None\n        \"\"\" in-progress | completed | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.statusReason = None\n        \"\"\" Reason for current status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" Patient or group assessed.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.summary = None\n        \"\"\" Summary of the assessment.\n        Type `str`. \"\"\"\n        \n        self.supportingInfo = None\n        \"\"\" Information supporting the clinical impression.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ClinicalImpression, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClinicalImpression, self).elementProperties()\n        js.extend([\n            (\"assessor\", \"assessor\", fhirreference.FHIRReference, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"effectiveDateTime\", \"effectiveDateTime\", fhirdatetime.FHIRDateTime, False, \"effective\", False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, \"effective\", False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"finding\", \"finding\", ClinicalImpressionFinding, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"investigation\", \"investigation\", ClinicalImpressionInvestigation, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"previous\", \"previous\", fhirreference.FHIRReference, False, None, False),\n            (\"problem\", \"problem\", fhirreference.FHIRReference, True, None, False),\n            (\"prognosisCodeableConcept\", \"prognosisCodeableConcept\", codeableconcept.CodeableConcept, True, None, False),\n            (\"prognosisReference\", \"prognosisReference\", fhirreference.FHIRReference, True, None, False),\n            (\"protocol\", \"protocol\", str, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusReason\", \"statusReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"summary\", \"summary\", str, False, None, False),\n            (\"supportingInfo\", \"supportingInfo\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ClinicalImpressionFinding(backboneelement.BackboneElement):\n    \"\"\" Possible or likely findings and diagnoses.\n    \n    Specific findings or diagnoses that were considered likely or relevant to\n    ongoing treatment.\n    \"\"\"\n    \n    resource_type = \"ClinicalImpressionFinding\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.basis = None\n        \"\"\" Which investigations support finding.\n        Type `str`. \"\"\"\n        \n        self.itemCodeableConcept = None\n        \"\"\" What was found.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.itemReference = None\n        \"\"\" What was found.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClinicalImpressionFinding, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClinicalImpressionFinding, self).elementProperties()\n        js.extend([\n            (\"basis\", \"basis\", str, False, None, False),\n            (\"itemCodeableConcept\", \"itemCodeableConcept\", codeableconcept.CodeableConcept, False, None, False),\n            (\"itemReference\", \"itemReference\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass ClinicalImpressionInvestigation(backboneelement.BackboneElement):\n    \"\"\" One or more sets of investigations (signs, symptoms, etc.).\n    \n    One or more sets of investigations (signs, symptoms, etc.). The actual\n    grouping of investigations varies greatly depending on the type and context\n    of the assessment. These investigations may include data generated during\n    the assessment process, or data previously generated and recorded that is\n    pertinent to the outcomes.\n    \"\"\"\n    \n    resource_type = \"ClinicalImpressionInvestigation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" A name/code for the set.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Record of a specific investigation.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ClinicalImpressionInvestigation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClinicalImpressionInvestigation, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"item\", \"item\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance. \nIf the instance was initialized with a JSON value (stored in the `origval` attribute), this method will return that value. \nIf no original JSON value exists, it falls back to returning the ISO 8601 string representation of the date stored in the `date` attribute via the `isostring` property. \nThis method thus allows for retrieving either the initial input or a standardized format, ensuring compatibility with FHIR date representations. \n\nAttributes used:\n- `origval`: Stores the original JSON string provided during initialization. If this is `None`, the method will return the result of the `isostring` property.\n- `isostring`: A property that returns the ISO 8601 formatted string representation of the date, normalized as per FHIR specifications.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance. \nIf the instance was initialized with a JSON value (stored in the `origval` attribute), this method will return that value. \nIf no original JSON value exists, it falls back to returning the ISO 8601 string representation of the date stored in the `date` attribute via the `isostring` property. \nThis method thus allows for retrieving either the initial input or a standardized format, ensuring compatibility with FHIR date representations. \n\nAttributes used:\n- `origval`: Stores the original JSON string provided during initialization. If this is `None`, the method will return the result of the `isostring` property.\n- `isostring`: A property that returns the ISO 8601 formatted string representation of the date, normalized as per FHIR specifications.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance, facilitating the handling of FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. This value is passed to the parent class FHIRDate for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None, which will later represent the parsed datetime value.\n\nThe constructor invokes the parent class's initializer with the provided jsonval to ensure compatibility with FHIRDate functionalities. This class is specifically designed to accommodate various FHIR datetime formats while handling certain limitations of Python's datetime class.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance, facilitating the handling of FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. This value is passed to the parent class FHIRDate for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None, which will later represent the parsed datetime value.\n\nThe constructor invokes the parent class's initializer with the provided jsonval to ensure compatibility with FHIRDate functionalities. This class is specifically designed to accommodate various FHIR datetime formats while handling certain limitations of Python's datetime class.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource into a JSON-compatible dictionary format.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` attribute specific to the FHIR resource class. It constructs a JSON representation of the instance by first calling the superclass method, then appending the `resourceType`, which is defined as a class attribute.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    - Uses `super()` to invoke `as_json()` from the parent class, ensuring the inclusion of any additional attributes defined in the base representation.\n    - The `resource_type` attribute is crucial as it identifies the type of FHIR resource and is expected to be defined in the class itself.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource into a JSON-compatible dictionary format.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` attribute specific to the FHIR resource class. It constructs a JSON representation of the instance by first calling the superclass method, then appending the `resourceType`, which is defined as a class attribute.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    - Uses `super()` to invoke `as_json()` from the parent class, ensuring the inclusion of any additional attributes defined in the base representation.\n    - The `resource_type` attribute is crucial as it identifies the type of FHIR resource and is expected to be defined in the class itself.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/clinicalimpression.py": {
      "ClinicalImpression.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a ClinicalImpression object, representing a clinical assessment performed for a patient. The constructor sets up various properties that define the assessment, including the clinician performing it, type of assessment, documented date, effective date/time, findings, investigations, subject patient, and other relevant details.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the ClinicalImpression properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; set to False to ignore validation errors.\n\nAttributes initialized:\n- assessor (FHIRReference): The clinician performing the assessment.\n- code (CodeableConcept): Kind of assessment performed.\n- date (FHIRDateTime): When the assessment was documented.\n- description (str): Reason for performing the assessment.\n- effectiveDateTime (FHIRDateTime): Actual time of the assessment.\n- effectivePeriod (Period): Time period of the assessment.\n- encounter (FHIRReference): Encounter associated with the assessment.\n- finding (list of ClinicalImpressionFinding): Findings and diagnoses related to the assessment.\n- identifier (list of Identifier): Business identifiers related to the impression.\n- investigation (list of ClinicalImpressionInvestigation): Investigations carried out during the assessment.\n- note (list of Annotation): Comments regarding the ClinicalImpression.\n- previous (FHIRReference): Reference to the last assessment, if applicable.\n- problem (list of FHIRReference): Relevant impressions of the patient.\n- prognosisCodeableConcept (list of CodeableConcept): Estimates of likely outcomes.\n- prognosisReference (list of FHIRReference): References to risk assessments.\n- protocol (list of str): Clinical protocols followed.\n- status (str): Current status of the impression (e.g., in-progress, completed).\n- statusReason (CodeableConcept): Reason for the current status.\n- subject (FHIRReference): The patient or group being assessed.\n- summary (str): Summary of the assessment.\n- supportingInfo (list of FHIRReference): Information supporting the clinical impression.\n\nThis initialization method utilizes the superclass constructor from `DomainResource` to handle shared resource properties and behaviors, ensuring comprehensive definition and structure for the ClinicalImpression resource.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.assessor = None\n        ' The clinician performing the assessment.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.code = None\n        ' Kind of assessment performed.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.date = None\n        ' When the assessment was documented.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Why/how the assessment was performed.\\n        Type `str`. '\n        self.effectiveDateTime = None\n        ' Time of assessment.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.effectivePeriod = None\n        ' Time of assessment.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.finding = None\n        ' Possible or likely findings and diagnoses.\\n        List of `ClinicalImpressionFinding` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.investigation = None\n        ' One or more sets of investigations (signs, symptoms, etc.).\\n        List of `ClinicalImpressionInvestigation` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Comments made about the ClinicalImpression.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.previous = None\n        ' Reference to last assessment.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.problem = None\n        ' Relevant impressions of patient state.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.prognosisCodeableConcept = None\n        ' Estimate of likely outcome.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.prognosisReference = None\n        ' RiskAssessment expressing likely outcome.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.protocol = None\n        ' Clinical Protocol followed.\\n        List of `str` items. '\n        self.status = None\n        ' in-progress | completed | entered-in-error.\\n        Type `str`. '\n        self.statusReason = None\n        ' Reason for current status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subject = None\n        ' Patient or group assessed.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.summary = None\n        ' Summary of the assessment.\\n        Type `str`. '\n        self.supportingInfo = None\n        ' Information supporting the clinical impression.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(ClinicalImpression, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a ClinicalImpression object, representing a clinical assessment performed for a patient. The constructor sets up various properties that define the assessment, including the clinician performing it, type of assessment, documented date, effective date/time, findings, investigations, subject patient, and other relevant details.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the ClinicalImpression properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; set to False to ignore validation errors.\n\nAttributes initialized:\n- assessor (FHIRReference): The clinician performing the assessment.\n- code (CodeableConcept): Kind of assessment performed.\n- date (FHIRDateTime): When the assessment was documented.\n- description (str): Reason for performing the assessment.\n- effectiveDateTime (FHIRDateTime): Actual time of the assessment.\n- effectivePeriod (Period): Time period of the assessment.\n- encounter (FHIRReference): Encounter associated with the assessment.\n- finding (list of ClinicalImpressionFinding): Findings and diagnoses related to the assessment.\n- identifier (list of Identifier): Business identifiers related to the impression.\n- investigation (list of ClinicalImpressionInvestigation): Investigations carried out during the assessment.\n- note (list of Annotation): Comments regarding the ClinicalImpression.\n- previous (FHIRReference): Reference to the last assessment, if applicable.\n- problem (list of FHIRReference): Relevant impressions of the patient.\n- prognosisCodeableConcept (list of CodeableConcept): Estimates of likely outcomes.\n- prognosisReference (list of FHIRReference): References to risk assessments.\n- protocol (list of str): Clinical protocols followed.\n- status (str): Current status of the impression (e.g., in-progress, completed).\n- statusReason (CodeableConcept): Reason for the current status.\n- subject (FHIRReference): The patient or group being assessed.\n- summary (str): Summary of the assessment.\n- supportingInfo (list of FHIRReference): Information supporting the clinical impression.\n\nThis initialization method utilizes the superclass constructor from `DomainResource` to handle shared resource properties and behaviors, ensuring comprehensive definition and structure for the ClinicalImpression resource.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ClinicalImpression(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/clinicalimpression.py:ClinicalImpression:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/clinicalimpression_test.py:ClinicalImpressionTests:testClinicalImpression1": {
      "tests/models/clinicalimpression_test.py:ClinicalImpressionTests:instantiate_from": {
        "fhirclient/models/clinicalimpression.py:ClinicalImpression:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/clinicalimpression.py:ClinicalImpression:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/clinicalimpression_test.py:ClinicalImpressionTests:implClinicalImpression1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/clinicalimpression.py:ClinicalImpression:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/clinicalimpression.py:ClinicalImpression:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/clinicalimpression.py:ClinicalImpression:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/clinicalimpression_test.py:ClinicalImpressionTests:instantiate_from": {
      "fhirclient/models/clinicalimpression.py:ClinicalImpression:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/clinicalimpression.py:ClinicalImpression:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-clinicalimpression_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 clinicalimpression.py\n        \u2502   \u2514\u2500\u2500 ClinicalImpression.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation, instantiation, and testing of FHIR-compliant ClinicalImpression resources, enabling interoperability with healthcare systems adhering to the FHIR 4.0.1 standard. Its primary purpose is to ensure that ClinicalImpression data, including patient assessments, diagnoses, and clinical summaries, aligns with standardized structures and formats defined by FHIR. The module provides functionality to parse and serialize ClinicalImpression resources, validate their content against expected standards, and confirm the correctness of critical data fields such as identifiers, dates, clinical findings, and metadata. This solves the problem of ensuring data consistency and compliance in clinical decision-making systems, supporting developers integrating FHIR ClinicalImpression resources into health IT applications.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance. \nIf the instance was initialized with a JSON value (stored in the `origval` attribute), this method will return that value. \nIf no original JSON value exists, it falls back to returning the ISO 8601 string representation of the date stored in the `date` attribute via the `isostring` property. \nThis method thus allows for retrieving either the initial input or a standardized format, ensuring compatibility with FHIR date representations. \n\nAttributes used:\n- `origval`: Stores the original JSON string provided during initialization. If this is `None`, the method will return the result of the `isostring` property.\n- `isostring`: A property that returns the ISO 8601 formatted string representation of the date, normalized as per FHIR specifications.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance, facilitating the handling of FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a datetime in ISO 8601 format. This value is passed to the parent class FHIRDate for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None, which will later represent the parsed datetime value.\n\nThe constructor invokes the parent class's initializer with the provided jsonval to ensure compatibility with FHIRDate functionalities. This class is specifically designed to accommodate various FHIR datetime formats while handling certain limitations of Python's datetime class.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource into a JSON-compatible dictionary format.\n\nThis method overrides the base class's `as_json()` method to include the `resourceType` attribute specific to the FHIR resource class. It constructs a JSON representation of the instance by first calling the superclass method, then appending the `resourceType`, which is defined as a class attribute.\n\nReturns:\n    dict: A dictionary representing the instance in JSON format, including the `resourceType`.\n\nDependencies:\n    - Uses `super()` to invoke `as_json()` from the parent class, ensuring the inclusion of any additional attributes defined in the base representation.\n    - The `resource_type` attribute is crucial as it identifies the type of FHIR resource and is expected to be defined in the class itself.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/clinicalimpression.py\n\n- CLASS METHOD: ClinicalImpression.__init__\n  - CLASS SIGNATURE: class ClinicalImpression(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a ClinicalImpression object, representing a clinical assessment performed for a patient. The constructor sets up various properties that define the assessment, including the clinician performing it, type of assessment, documented date, effective date/time, findings, investigations, subject patient, and other relevant details.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the ClinicalImpression properties.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; set to False to ignore validation errors.\n\nAttributes initialized:\n- assessor (FHIRReference): The clinician performing the assessment.\n- code (CodeableConcept): Kind of assessment performed.\n- date (FHIRDateTime): When the assessment was documented.\n- description (str): Reason for performing the assessment.\n- effectiveDateTime (FHIRDateTime): Actual time of the assessment.\n- effectivePeriod (Period): Time period of the assessment.\n- encounter (FHIRReference): Encounter associated with the assessment.\n- finding (list of ClinicalImpressionFinding): Findings and diagnoses related to the assessment.\n- identifier (list of Identifier): Business identifiers related to the impression.\n- investigation (list of ClinicalImpressionInvestigation): Investigations carried out during the assessment.\n- note (list of Annotation): Comments regarding the ClinicalImpression.\n- previous (FHIRReference): Reference to the last assessment, if applicable.\n- problem (list of FHIRReference): Relevant impressions of the patient.\n- prognosisCodeableConcept (list of CodeableConcept): Estimates of likely outcomes.\n- prognosisReference (list of FHIRReference): References to risk assessments.\n- protocol (list of str): Clinical protocols followed.\n- status (str): Current status of the impression (e.g., in-progress, completed).\n- statusReason (CodeableConcept): Reason for the current status.\n- subject (FHIRReference): The patient or group being assessed.\n- summary (str): Summary of the assessment.\n- supportingInfo (list of FHIRReference): Information supporting the clinical impression.\n\nThis initialization method utilizes the superclass constructor from `DomainResource` to handle shared resource properties and behaviors, ensuring comprehensive definition and structure for the ClinicalImpression resource.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/clinicalimpression.py": "from . import domainresource\n\nclass ClinicalImpression(domainresource.DomainResource):\n    \"\"\" A clinical assessment performed when planning treatments and management\n    strategies for a patient.\n    \n    A record of a clinical assessment performed to determine what problem(s)\n    may affect the patient and before planning the treatments or management\n    strategies that are best to manage a patient's condition. Assessments are\n    often 1:1 with a clinical consultation / encounter,  but this varies\n    greatly depending on the clinical workflow. This resource is called\n    \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion\n    with the recording of assessment tools such as Apgar score.\n    \"\"\"\n    resource_type = 'ClinicalImpression'\n\n    def elementProperties(self):\n        js = super(ClinicalImpression, self).elementProperties()\n        js.extend([('assessor', 'assessor', fhirreference.FHIRReference, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('effectiveDateTime', 'effectiveDateTime', fhirdatetime.FHIRDateTime, False, 'effective', False), ('effectivePeriod', 'effectivePeriod', period.Period, False, 'effective', False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('finding', 'finding', ClinicalImpressionFinding, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('investigation', 'investigation', ClinicalImpressionInvestigation, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('previous', 'previous', fhirreference.FHIRReference, False, None, False), ('problem', 'problem', fhirreference.FHIRReference, True, None, False), ('prognosisCodeableConcept', 'prognosisCodeableConcept', codeableconcept.CodeableConcept, True, None, False), ('prognosisReference', 'prognosisReference', fhirreference.FHIRReference, True, None, False), ('protocol', 'protocol', str, True, None, False), ('status', 'status', str, False, None, True), ('statusReason', 'statusReason', codeableconcept.CodeableConcept, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('summary', 'summary', str, False, None, False), ('supportingInfo', 'supportingInfo', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ClinicalImpressionFinding(backboneelement.BackboneElement):\n    \"\"\" Possible or likely findings and diagnoses.\n    \n    Specific findings or diagnoses that were considered likely or relevant to\n    ongoing treatment.\n    \"\"\"\n    resource_type = 'ClinicalImpressionFinding'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.basis = None\n        ' Which investigations support finding.\\n        Type `str`. '\n        self.itemCodeableConcept = None\n        ' What was found.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.itemReference = None\n        ' What was found.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ClinicalImpressionFinding, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClinicalImpressionFinding, self).elementProperties()\n        js.extend([('basis', 'basis', str, False, None, False), ('itemCodeableConcept', 'itemCodeableConcept', codeableconcept.CodeableConcept, False, None, False), ('itemReference', 'itemReference', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass ClinicalImpressionInvestigation(backboneelement.BackboneElement):\n    \"\"\" One or more sets of investigations (signs, symptoms, etc.).\n    \n    One or more sets of investigations (signs, symptoms, etc.). The actual\n    grouping of investigations varies greatly depending on the type and context\n    of the assessment. These investigations may include data generated during\n    the assessment process, or data previously generated and recorded that is\n    pertinent to the outcomes.\n    \"\"\"\n    resource_type = 'ClinicalImpressionInvestigation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' A name/code for the set.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.item = None\n        ' Record of a specific investigation.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(ClinicalImpressionInvestigation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClinicalImpressionInvestigation, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('item', 'item', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period"
  }
}