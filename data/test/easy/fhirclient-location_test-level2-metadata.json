{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-location_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/location_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import location\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass LocationTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Location\", js[\"resourceType\"])\n        return location.Location(js)\n    \n    def testLocation1(self):\n        inst = self.instantiate_from(\"location-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation1(inst2)\n    \n    def implLocation1(self, inst):\n        self.assertEqual(inst.address.city, \"Den Burg\")\n        self.assertEqual(inst.address.country, \"NLD\")\n        self.assertEqual(inst.address.line[0], \"Galapagosweg 91, Building A\")\n        self.assertEqual(inst.address.postalCode, \"9105 PZ\")\n        self.assertEqual(inst.address.use, \"work\")\n        self.assertEqual(inst.alias[0], \"BU MC, SW, F2\")\n        self.assertEqual(inst.alias[1], \"Burgers University Medical Center, South Wing, second floor\")\n        self.assertEqual(inst.description, \"Second floor of the Old South Wing, formerly in use by Psychiatry\")\n        self.assertEqual(inst.id, \"1\")\n        self.assertEqual(inst.identifier[0].value, \"B1-S.F2\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"instance\")\n        self.assertEqual(inst.name, \"South Wing, second floor\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"wi\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"Wing\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.position.altitude, 0)\n        self.assertEqual(inst.position.latitude, 42.25475478)\n        self.assertEqual(inst.position.longitude, -83.6945691)\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].use, \"work\")\n        self.assertEqual(inst.telecom[0].value, \"2328\")\n        self.assertEqual(inst.telecom[1].system, \"fax\")\n        self.assertEqual(inst.telecom[1].use, \"work\")\n        self.assertEqual(inst.telecom[1].value, \"2329\")\n        self.assertEqual(inst.telecom[2].system, \"email\")\n        self.assertEqual(inst.telecom[2].value, \"second wing admissions\")\n        self.assertEqual(inst.telecom[3].system, \"url\")\n        self.assertEqual(inst.telecom[3].use, \"work\")\n        self.assertEqual(inst.telecom[3].value, \"http://sampleorg.com/southwing\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Burgers UMC, South Wing, second floor</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testLocation2(self):\n        inst = self.instantiate_from(\"location-example-ambulance.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation2(inst2)\n    \n    def implLocation2(self, inst):\n        self.assertEqual(inst.description, \"Ambulance provided by Burgers University Medical Center\")\n        self.assertEqual(inst.id, \"amb\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"kind\")\n        self.assertEqual(inst.name, \"BUMC Ambulance\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"ve\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"Vehicle\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].use, \"mobile\")\n        self.assertEqual(inst.telecom[0].value, \"2329\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Mobile Clinic</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type[0].coding[0].code, \"AMB\")\n        self.assertEqual(inst.type[0].coding[0].display, \"Ambulance\")\n        self.assertEqual(inst.type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\")\n    \n    def testLocation3(self):\n        inst = self.instantiate_from(\"location-example-hl7hq.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation3(inst2)\n    \n    def implLocation3(self, inst):\n        self.assertEqual(inst.address.city, \"Ann Arbor\")\n        self.assertEqual(inst.address.country, \"USA\")\n        self.assertEqual(inst.address.line[0], \"3300 Washtenaw Avenue, Suite 227\")\n        self.assertEqual(inst.address.postalCode, \"48104\")\n        self.assertEqual(inst.address.state, \"MI\")\n        self.assertEqual(inst.description, \"HL7 Headquarters\")\n        self.assertEqual(inst.id, \"hl7\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"instance\")\n        self.assertEqual(inst.name, \"Health Level Seven International\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"bu\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"Building\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.position.latitude, -83.69471)\n        self.assertEqual(inst.position.longitude, 42.2565)\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].value, \"(+1) 734-677-7777\")\n        self.assertEqual(inst.telecom[1].system, \"fax\")\n        self.assertEqual(inst.telecom[1].value, \"(+1) 734-677-6622\")\n        self.assertEqual(inst.telecom[2].system, \"email\")\n        self.assertEqual(inst.telecom[2].value, \"hq@HL7.org\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type[0].coding[0].code, \"SLEEP\")\n        self.assertEqual(inst.type[0].coding[0].display, \"Sleep disorders unit\")\n        self.assertEqual(inst.type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\")\n    \n    def testLocation4(self):\n        inst = self.instantiate_from(\"location-example-room.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation4(inst2)\n    \n    def implLocation4(self, inst):\n        self.assertEqual(inst.alias[0], \"South Wing OR 5\")\n        self.assertEqual(inst.alias[1], \"Main Wing OR 2\")\n        self.assertEqual(inst.description, \"Old South Wing, Neuro Radiology Operation Room 1 on second floor\")\n        self.assertEqual(inst.id, \"2\")\n        self.assertEqual(inst.identifier[0].value, \"B1-S.F2.1.00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"instance\")\n        self.assertEqual(inst.name, \"South Wing Neuro OR 1\")\n        self.assertEqual(inst.operationalStatus.code, \"H\")\n        self.assertEqual(inst.operationalStatus.display, \"Housekeeping\")\n        self.assertEqual(inst.operationalStatus.system, \"http://terminology.hl7.org/CodeSystem/v2-0116\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"ro\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"Room\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.status, \"suspended\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].value, \"2329\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Burgers UMC, South Wing, second floor, Neuro Radiology Operation Room 1</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type[0].coding[0].code, \"RNEU\")\n        self.assertEqual(inst.type[0].coding[0].display, \"Neuroradiology unit\")\n        self.assertEqual(inst.type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\")\n    \n    def testLocation5(self):\n        inst = self.instantiate_from(\"location-example-patients-home.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation5(inst2)\n    \n    def implLocation5(self, inst):\n        self.assertEqual(inst.description, \"Patient's Home\")\n        self.assertEqual(inst.id, \"ph\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"kind\")\n        self.assertEqual(inst.name, \"Patient's Home\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"ho\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"House\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Patient's Home</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type[0].coding[0].code, \"PTRES\")\n        self.assertEqual(inst.type[0].coding[0].display, \"Patient's Residence\")\n        self.assertEqual(inst.type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\")\n    \n    def testLocation6(self):\n        inst = self.instantiate_from(\"location-example-ukpharmacy.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Location instance\")\n        self.implLocation6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Location\", js[\"resourceType\"])\n        inst2 = location.Location(js)\n        self.implLocation6(inst2)\n    \n    def implLocation6(self, inst):\n        self.assertEqual(inst.description, \"All Pharmacies in the United Kingdom covered by the National Pharmacy Association\")\n        self.assertEqual(inst.id, \"ukp\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.mode, \"kind\")\n        self.assertEqual(inst.name, \"UK Pharmacies\")\n        self.assertEqual(inst.physicalType.coding[0].code, \"jdn\")\n        self.assertEqual(inst.physicalType.coding[0].display, \"Jurisdiction\")\n        self.assertEqual(inst.physicalType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/location-physical-type\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">UK Pharmacies</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type[0].coding[0].code, \"PHARM\")\n        self.assertEqual(inst.type[0].coding[0].display, \"Pharmacy\")\n        self.assertEqual(inst.type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\")\n\n",
  "GT_file_code": {
    "fhirclient/models/location.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Location).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Location(domainresource.DomainResource):\n    \"\"\" Details and position information for a physical place.\n    \n    Details and position information for a physical place where services are\n    provided and resources and participants may be stored, found, contained, or\n    accommodated.\n    \"\"\"\n    \n    resource_type = \"Location\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.address = None\n        \"\"\" Physical location.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.alias = None\n        \"\"\" A list of alternate names that the location is known as, or was\n        known as, in the past.\n        List of `str` items. \"\"\"\n        \n        self.availabilityExceptions = None\n        \"\"\" Description of availability exceptions.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Additional details about the location that could be displayed as\n        further information to identify the location beyond its name.\n        Type `str`. \"\"\"\n        \n        self.endpoint = None\n        \"\"\" Technical endpoints providing access to services operated for the\n        location.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.hoursOfOperation = None\n        \"\"\" What days/times during a week is this location usually open.\n        List of `LocationHoursOfOperation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique code or number identifying the location to its users.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.managingOrganization = None\n        \"\"\" Organization responsible for provisioning and upkeep.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.mode = None\n        \"\"\" instance | kind.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name of the location as used by humans.\n        Type `str`. \"\"\"\n        \n        self.operationalStatus = None\n        \"\"\" The operational status of the location (typically only for a\n        bed/room).\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.partOf = None\n        \"\"\" Another Location this one is physically a part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.physicalType = None\n        \"\"\" Physical form of the location.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.position = None\n        \"\"\" The absolute geographic location.\n        Type `LocationPosition` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | suspended | inactive.\n        Type `str`. \"\"\"\n        \n        self.telecom = None\n        \"\"\" Contact details of the location.\n        List of `ContactPoint` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of function performed.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(Location, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Location, self).elementProperties()\n        js.extend([\n            (\"address\", \"address\", address.Address, False, None, False),\n            (\"alias\", \"alias\", str, True, None, False),\n            (\"availabilityExceptions\", \"availabilityExceptions\", str, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"endpoint\", \"endpoint\", fhirreference.FHIRReference, True, None, False),\n            (\"hoursOfOperation\", \"hoursOfOperation\", LocationHoursOfOperation, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"managingOrganization\", \"managingOrganization\", fhirreference.FHIRReference, False, None, False),\n            (\"mode\", \"mode\", str, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"operationalStatus\", \"operationalStatus\", coding.Coding, False, None, False),\n            (\"partOf\", \"partOf\", fhirreference.FHIRReference, False, None, False),\n            (\"physicalType\", \"physicalType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"position\", \"position\", LocationPosition, False, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"telecom\", \"telecom\", contactpoint.ContactPoint, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass LocationHoursOfOperation(backboneelement.BackboneElement):\n    \"\"\" What days/times during a week is this location usually open.\n    \"\"\"\n    \n    resource_type = \"LocationHoursOfOperation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allDay = None\n        \"\"\" The Location is open all day.\n        Type `bool`. \"\"\"\n        \n        self.closingTime = None\n        \"\"\" Time that the Location closes.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.daysOfWeek = None\n        \"\"\" mon | tue | wed | thu | fri | sat | sun.\n        List of `str` items. \"\"\"\n        \n        self.openingTime = None\n        \"\"\" Time that the Location opens.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        super(LocationHoursOfOperation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(LocationHoursOfOperation, self).elementProperties()\n        js.extend([\n            (\"allDay\", \"allDay\", bool, False, None, False),\n            (\"closingTime\", \"closingTime\", fhirtime.FHIRTime, False, None, False),\n            (\"daysOfWeek\", \"daysOfWeek\", str, True, None, False),\n            (\"openingTime\", \"openingTime\", fhirtime.FHIRTime, False, None, False),\n        ])\n        return js\n\n\nclass LocationPosition(backboneelement.BackboneElement):\n    \"\"\" The absolute geographic location.\n    \n    The absolute geographic location of the Location, expressed using the WGS84\n    datum (This is the same co-ordinate system used in KML).\n    \"\"\"\n    \n    resource_type = \"LocationPosition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.altitude = None\n        \"\"\" Altitude with WGS84 datum.\n        Type `float`. \"\"\"\n        \n        self.latitude = None\n        \"\"\" Latitude with WGS84 datum.\n        Type `float`. \"\"\"\n        \n        self.longitude = None\n        \"\"\" Longitude with WGS84 datum.\n        Type `float`. \"\"\"\n        \n        super(LocationPosition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(LocationPosition, self).elementProperties()\n        js.extend([\n            (\"altitude\", \"altitude\", float, False, None, False),\n            (\"latitude\", \"latitude\", float, False, None, True),\n            (\"longitude\", \"longitude\", float, False, None, True),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n"
  },
  "GT_src_dict": {
    "fhirclient/models/location.py": {
      "Location.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Location instance representing a physical place where services are provided and resources or participants may be located.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the Location instance, allowing for deserialization from a FHIR API response.\n- strict (bool, optional): If True (default), raises a TypeError for any invalid properties during initialization. If False, initialization will not be strict about property validity.\n\nAttributes:\n- address (Address, optional): Represents the physical address of the location.\n- alias (list of str, optional): Alternate names for the location.\n- availabilityExceptions (str, optional): Describes any exceptions to the location's availability.\n- description (str, optional): Additional details for identifying the location.\n- endpoint (list of FHIRReference, optional): Technical endpoints for accessing services linked to this location.\n- hoursOfOperation (list of LocationHoursOfOperation, optional): Regular operating hours of the location.\n- identifier (list of Identifier, optional): Unique identifiers for the location.\n- managingOrganization (FHIRReference, optional): Organization responsible for the location.\n- mode (str, optional): Indicates whether the location is an instance or a type (kind).\n- name (str, optional): The name of the location as used by humans.\n- operationalStatus (Coding, optional): Current operational status of the location.\n- partOf (FHIRReference, optional): Another location that this one is a part of.\n- physicalType (CodeableConcept, optional): The physical characteristics of the location.\n- position (LocationPosition, optional): Geographic coordinates for the location.\n- status (str, optional): The current status of the location (active, suspended, inactive).\n- telecom (list of ContactPoint, optional): Contact details associated with the location.\n- type (list of CodeableConcept, optional): The type of functions performed at the location.\n\nThis class relies on the domainresource.DomainResource class, from which it inherits common functionalities, including property management and validation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.address = None\n        ' Physical location.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.alias = None\n        ' A list of alternate names that the location is known as, or was\\n        known as, in the past.\\n        List of `str` items. '\n        self.availabilityExceptions = None\n        ' Description of availability exceptions.\\n        Type `str`. '\n        self.description = None\n        ' Additional details about the location that could be displayed as\\n        further information to identify the location beyond its name.\\n        Type `str`. '\n        self.endpoint = None\n        ' Technical endpoints providing access to services operated for the\\n        location.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.hoursOfOperation = None\n        ' What days/times during a week is this location usually open.\\n        List of `LocationHoursOfOperation` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique code or number identifying the location to its users.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.managingOrganization = None\n        ' Organization responsible for provisioning and upkeep.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.mode = None\n        ' instance | kind.\\n        Type `str`. '\n        self.name = None\n        ' Name of the location as used by humans.\\n        Type `str`. '\n        self.operationalStatus = None\n        ' The operational status of the location (typically only for a\\n        bed/room).\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.partOf = None\n        ' Another Location this one is physically a part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.physicalType = None\n        ' Physical form of the location.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.position = None\n        ' The absolute geographic location.\\n        Type `LocationPosition` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | suspended | inactive.\\n        Type `str`. '\n        self.telecom = None\n        ' Contact details of the location.\\n        List of `ContactPoint` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of function performed.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(Location, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Location instance representing a physical place where services are provided and resources or participants may be located.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the Location instance, allowing for deserialization from a FHIR API response.\n- strict (bool, optional): If True (default), raises a TypeError for any invalid properties during initialization. If False, initialization will not be strict about property validity.\n\nAttributes:\n- address (Address, optional): Represents the physical address of the location.\n- alias (list of str, optional): Alternate names for the location.\n- availabilityExceptions (str, optional): Describes any exceptions to the location's availability.\n- description (str, optional): Additional details for identifying the location.\n- endpoint (list of FHIRReference, optional): Technical endpoints for accessing services linked to this location.\n- hoursOfOperation (list of LocationHoursOfOperation, optional): Regular operating hours of the location.\n- identifier (list of Identifier, optional): Unique identifiers for the location.\n- managingOrganization (FHIRReference, optional): Organization responsible for the location.\n- mode (str, optional): Indicates whether the location is an instance or a type (kind).\n- name (str, optional): The name of the location as used by humans.\n- operationalStatus (Coding, optional): Current operational status of the location.\n- partOf (FHIRReference, optional): Another location that this one is a part of.\n- physicalType (CodeableConcept, optional): The physical characteristics of the location.\n- position (LocationPosition, optional): Geographic coordinates for the location.\n- status (str, optional): The current status of the location (active, suspended, inactive).\n- telecom (list of ContactPoint, optional): Contact details associated with the location.\n- type (list of CodeableConcept, optional): The type of functions performed at the location.\n\nThis class relies on the domainresource.DomainResource class, from which it inherits common functionalities, including property management and validation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Location(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Return a JSON representation of the FHIRAbstractResource instance.\n\nThe `as_json` method converts the current instance into a JSON-compatible dictionary format. It builds upon the parent class's `as_json` method and adds the `resourceType` key, which is set to the resource type defined by the class (in this case, `self.resource_type`, which is 'FHIRAbstractResource'). This ensures that the returned JSON is compliant with FHIR standards for resource representation.\n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including \n    a 'resourceType' key indicating the type of resource.\n\nDependencies:\n    - The method relies on the `as_json` implementation in the superclass (`FHIRAbstractBase`), which should return a dictionary representation of the base resource attributes.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Return a JSON representation of the FHIRAbstractResource instance.\n\nThe `as_json` method converts the current instance into a JSON-compatible dictionary format. It builds upon the parent class's `as_json` method and adds the `resourceType` key, which is set to the resource type defined by the class (in this case, `self.resource_type`, which is 'FHIRAbstractResource'). This ensures that the returned JSON is compliant with FHIR standards for resource representation.\n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including \n    a 'resourceType' key indicating the type of resource.\n\nDependencies:\n    - The method relies on the `as_json` implementation in the superclass (`FHIRAbstractBase`), which should return a dictionary representation of the base resource attributes.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource attributes. If provided, it should contain keys corresponding to the resource's attributes.\n- strict (bool, optional): If set to True (default), invalid attributes in jsondict will raise a TypeError, ensuring strict validation against the FHIR specification.\n\nAttributes:\n- contained (list): A list of contained resources (of type `Resource`), which are inline resources modeled as dictionaries in JSON.\n- extension (list): A list of additional content items (of type `Extension`), represented as dictionaries in JSON, allowing for implementation-specific extensions.\n- modifierExtension (list): A list of extensions (of type `Extension`) that must not be ignored, also represented as dictionaries in JSON.\n- text (Narrative, optional): A text summary of the resource for human interpretation, represented as a dictionary in JSON.\n\nThis initializer also calls the constructor of the superclass `Resource` from the `resource` module, ensuring that all properties valid for a FHIR Resource are correctly initialized.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource attributes. If provided, it should contain keys corresponding to the resource's attributes.\n- strict (bool, optional): If set to True (default), invalid attributes in jsondict will raise a TypeError, ensuring strict validation against the FHIR specification.\n\nAttributes:\n- contained (list): A list of contained resources (of type `Resource`), which are inline resources modeled as dictionaries in JSON.\n- extension (list): A list of additional content items (of type `Extension`), represented as dictionaries in JSON, allowing for implementation-specific extensions.\n- modifierExtension (list): A list of extensions (of type `Extension`) that must not be ignored, also represented as dictionaries in JSON.\n- text (Narrative, optional): A text summary of the resource for human interpretation, represented as a dictionary in JSON.\n\nThis initializer also calls the constructor of the superclass `Resource` from the `resource` module, ensuring that all properties valid for a FHIR Resource are correctly initialized.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance of the FHIRAbstractBase class to a JSON dictionary format by inspecting registered properties defined in `elementProperties()`. This method ensures that required properties are present and of the correct types before creating the JSON representation.\n\nReturns:\n    dict: A validated dictionary suitable for JSON serialization.\n\nRaises:\n    FHIRValidationError: If any properties are of the wrong type, required properties are missing, or if lists are incorrectly formatted.\n\nThe function utilizes `elementProperties()` to gather property specifications, such as property names (`name`), corresponding JSON names (`jsname`), expected types (`typ`), and their requirement statuses. The `found` set keeps track of which properties have been successfully located and serialized, while the `nonoptionals` set registers properties that are required and checks if they are populated.\n\nThe method also interacts with the `_matches_type` method to validate the types of values assigned to properties. Any errors encountered during this process are collected into the `errs` list, which is evaluated at the end of the function to determine if a FHIRValidationError should be raised.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance of the FHIRAbstractBase class to a JSON dictionary format by inspecting registered properties defined in `elementProperties()`. This method ensures that required properties are present and of the correct types before creating the JSON representation.\n\nReturns:\n    dict: A validated dictionary suitable for JSON serialization.\n\nRaises:\n    FHIRValidationError: If any properties are of the wrong type, required properties are missing, or if lists are incorrectly formatted.\n\nThe function utilizes `elementProperties()` to gather property specifications, such as property names (`name`), corresponding JSON names (`jsname`), expected types (`typ`), and their requirement statuses. The `found` set keeps track of which properties have been successfully located and serialized, while the `nonoptionals` set registers properties that are required and checks if they are populated.\n\nThe method also interacts with the `_matches_type` method to validate the types of values assigned to properties. Any errors encountered during this process are collected into the `errs` list, which is evaluated at the end of the function to determine if a FHIRValidationError should be raised.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/location.py:Location:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/location.py": {
        "Location.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(Location, self).elementProperties()\n        js.extend([('address', 'address', address.Address, False, None, False), ('alias', 'alias', str, True, None, False), ('availabilityExceptions', 'availabilityExceptions', str, False, None, False), ('description', 'description', str, False, None, False), ('endpoint', 'endpoint', fhirreference.FHIRReference, True, None, False), ('hoursOfOperation', 'hoursOfOperation', LocationHoursOfOperation, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('managingOrganization', 'managingOrganization', fhirreference.FHIRReference, False, None, False), ('mode', 'mode', str, False, None, False), ('name', 'name', str, False, None, False), ('operationalStatus', 'operationalStatus', coding.Coding, False, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, False, None, False), ('physicalType', 'physicalType', codeableconcept.CodeableConcept, False, None, False), ('position', 'position', LocationPosition, False, None, False), ('status', 'status', str, False, None, False), ('telecom', 'telecom', contactpoint.ContactPoint, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class Location(domainresource.DomainResource):"
        }
      },
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/location_test.py:LocationTests:testLocation1": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:instantiate_from": {
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:testLocation2": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:testLocation3": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation3": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:testLocation4": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation4": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:testLocation5": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation5": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/location_test.py:LocationTests:testLocation6": {
      "tests/models/location_test.py:LocationTests:instantiate_from": {
        "fhirclient/models/location.py:Location:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/location.py:Location:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/location_test.py:LocationTests:implLocation6": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/location.py:Location:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/location.py:Location:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/location.py:Location:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-location_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 location.py\n            \u2514\u2500\u2500 Location.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the management and validation of FHIR-compliant Location resources in healthcare systems by providing functionality for loading, interpreting, and verifying data against the HL7 FHIR 4.0.1 specifications. It supports the creation and validation of diverse location instances, such as facilities, vehicles, patient homes, and regions, ensuring the data adheres to specified structures and value constraints. By enabling robust testing of Location resource attributes (e.g., address, physical type, status, identifiers, and telecommunications), the module helps ensure interoperability and accuracy in representing key location-related data within FHIR-compliant systems. This reduces the risk of implementation errors and enhances data consistency for developers building healthcare applications.\n\n## FILE 1: fhirclient/models/location.py\n\n- CLASS METHOD: Location.__init__\n  - CLASS SIGNATURE: class Location(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Location instance representing a physical place where services are provided and resources or participants may be located.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the Location instance, allowing for deserialization from a FHIR API response.\n- strict (bool, optional): If True (default), raises a TypeError for any invalid properties during initialization. If False, initialization will not be strict about property validity.\n\nAttributes:\n- address (Address, optional): Represents the physical address of the location.\n- alias (list of str, optional): Alternate names for the location.\n- availabilityExceptions (str, optional): Describes any exceptions to the location's availability.\n- description (str, optional): Additional details for identifying the location.\n- endpoint (list of FHIRReference, optional): Technical endpoints for accessing services linked to this location.\n- hoursOfOperation (list of LocationHoursOfOperation, optional): Regular operating hours of the location.\n- identifier (list of Identifier, optional): Unique identifiers for the location.\n- managingOrganization (FHIRReference, optional): Organization responsible for the location.\n- mode (str, optional): Indicates whether the location is an instance or a type (kind).\n- name (str, optional): The name of the location as used by humans.\n- operationalStatus (Coding, optional): Current operational status of the location.\n- partOf (FHIRReference, optional): Another location that this one is a part of.\n- physicalType (CodeableConcept, optional): The physical characteristics of the location.\n- position (LocationPosition, optional): Geographic coordinates for the location.\n- status (str, optional): The current status of the location (active, suspended, inactive).\n- telecom (list of ContactPoint, optional): Contact details associated with the location.\n- type (list of CodeableConcept, optional): The type of functions performed at the location.\n\nThis class relies on the domainresource.DomainResource class, from which it inherits common functionalities, including property management and validation.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a JSON representation of the FHIRAbstractResource instance.\n\nThe `as_json` method converts the current instance into a JSON-compatible dictionary format. It builds upon the parent class's `as_json` method and adds the `resourceType` key, which is set to the resource type defined by the class (in this case, `self.resource_type`, which is 'FHIRAbstractResource'). This ensures that the returned JSON is compliant with FHIR standards for resource representation.\n\nReturns:\n    dict: A dictionary representation of the instance in JSON format, including \n    a 'resourceType' key indicating the type of resource.\n\nDependencies:\n    - The method relies on the `as_json` implementation in the superclass (`FHIRAbstractBase`), which should return a dictionary representation of the base resource attributes.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource attributes. If provided, it should contain keys corresponding to the resource's attributes.\n- strict (bool, optional): If set to True (default), invalid attributes in jsondict will raise a TypeError, ensuring strict validation against the FHIR specification.\n\nAttributes:\n- contained (list): A list of contained resources (of type `Resource`), which are inline resources modeled as dictionaries in JSON.\n- extension (list): A list of additional content items (of type `Extension`), represented as dictionaries in JSON, allowing for implementation-specific extensions.\n- modifierExtension (list): A list of extensions (of type `Extension`) that must not be ignored, also represented as dictionaries in JSON.\n- text (Narrative, optional): A text summary of the resource for human interpretation, represented as a dictionary in JSON.\n\nThis initializer also calls the constructor of the superclass `Resource` from the `resource` module, ensuring that all properties valid for a FHIR Resource are correctly initialized.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance of the FHIRAbstractBase class to a JSON dictionary format by inspecting registered properties defined in `elementProperties()`. This method ensures that required properties are present and of the correct types before creating the JSON representation.\n\nReturns:\n    dict: A validated dictionary suitable for JSON serialization.\n\nRaises:\n    FHIRValidationError: If any properties are of the wrong type, required properties are missing, or if lists are incorrectly formatted.\n\nThe function utilizes `elementProperties()` to gather property specifications, such as property names (`name`), corresponding JSON names (`jsname`), expected types (`typ`), and their requirement statuses. The `found` set keeps track of which properties have been successfully located and serialized, while the `nonoptionals` set registers properties that are required and checks if they are populated.\n\nThe method also interacts with the `_matches_type` method to validate the types of values assigned to properties. Any errors encountered during this process are collected into the `errs` list, which is evaluated at the end of the function to determine if a FHIRValidationError should be raised.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/location.py": "from . import domainresource\n\nclass Location(domainresource.DomainResource):\n    \"\"\" Details and position information for a physical place.\n    \n    Details and position information for a physical place where services are\n    provided and resources and participants may be stored, found, contained, or\n    accommodated.\n    \"\"\"\n    resource_type = 'Location'\n\n    def elementProperties(self):\n        js = super(Location, self).elementProperties()\n        js.extend([('address', 'address', address.Address, False, None, False), ('alias', 'alias', str, True, None, False), ('availabilityExceptions', 'availabilityExceptions', str, False, None, False), ('description', 'description', str, False, None, False), ('endpoint', 'endpoint', fhirreference.FHIRReference, True, None, False), ('hoursOfOperation', 'hoursOfOperation', LocationHoursOfOperation, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('managingOrganization', 'managingOrganization', fhirreference.FHIRReference, False, None, False), ('mode', 'mode', str, False, None, False), ('name', 'name', str, False, None, False), ('operationalStatus', 'operationalStatus', coding.Coding, False, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, False, None, False), ('physicalType', 'physicalType', codeableconcept.CodeableConcept, False, None, False), ('position', 'position', LocationPosition, False, None, False), ('status', 'status', str, False, None, False), ('telecom', 'telecom', contactpoint.ContactPoint, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass LocationHoursOfOperation(backboneelement.BackboneElement):\n    \"\"\" What days/times during a week is this location usually open.\n    \"\"\"\n    resource_type = 'LocationHoursOfOperation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.allDay = None\n        ' The Location is open all day.\\n        Type `bool`. '\n        self.closingTime = None\n        ' Time that the Location closes.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.daysOfWeek = None\n        ' mon | tue | wed | thu | fri | sat | sun.\\n        List of `str` items. '\n        self.openingTime = None\n        ' Time that the Location opens.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        super(LocationHoursOfOperation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(LocationHoursOfOperation, self).elementProperties()\n        js.extend([('allDay', 'allDay', bool, False, None, False), ('closingTime', 'closingTime', fhirtime.FHIRTime, False, None, False), ('daysOfWeek', 'daysOfWeek', str, True, None, False), ('openingTime', 'openingTime', fhirtime.FHIRTime, False, None, False)])\n        return js\n\nclass LocationPosition(backboneelement.BackboneElement):\n    \"\"\" The absolute geographic location.\n    \n    The absolute geographic location of the Location, expressed using the WGS84\n    datum (This is the same co-ordinate system used in KML).\n    \"\"\"\n    resource_type = 'LocationPosition'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.altitude = None\n        ' Altitude with WGS84 datum.\\n        Type `float`. '\n        self.latitude = None\n        ' Latitude with WGS84 datum.\\n        Type `float`. '\n        self.longitude = None\n        ' Longitude with WGS84 datum.\\n        Type `float`. '\n        super(LocationPosition, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(LocationPosition, self).elementProperties()\n        js.extend([('altitude', 'altitude', float, False, None, False), ('latitude', 'latitude', float, False, None, True), ('longitude', 'longitude', float, False, None, True)])\n        return js\nfrom . import address\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}"
  }
}