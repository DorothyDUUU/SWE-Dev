{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-chargeitemdefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/chargeitemdefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import chargeitemdefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ChargeItemDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ChargeItemDefinition\", js[\"resourceType\"])\n        return chargeitemdefinition.ChargeItemDefinition(js)\n    \n    def testChargeItemDefinition1(self):\n        inst = self.instantiate_from(\"chargeitemdefinition-ebm-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ChargeItemDefinition instance\")\n        self.implChargeItemDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ChargeItemDefinition\", js[\"resourceType\"])\n        inst2 = chargeitemdefinition.ChargeItemDefinition(js)\n        self.implChargeItemDefinition1(inst2)\n    \n    def implChargeItemDefinition1(self, inst):\n        self.assertEqual(inst.applicability[0].description, \"Excludes billing code 13250 for same Encounter\")\n        self.assertEqual(inst.applicability[0].expression, \"[some CQL expression]\")\n        self.assertEqual(inst.applicability[0].language, \"text/cql\")\n        self.assertEqual(inst.applicability[1].description, \"Applies only once per Encounter\")\n        self.assertEqual(inst.applicability[1].expression, \"[some CQL expression]\")\n        self.assertEqual(inst.applicability[1].language, \"text/CQL\")\n        self.assertEqual(inst.code.coding[0].code, \"30110\")\n        self.assertEqual(inst.code.coding[0].display, \"Allergologiediagnostik I\")\n        self.assertEqual(inst.code.coding[0].system, \"http://fhir.de/CodingSystem/kbv/ebm\")\n        self.assertEqual(inst.description, \"Allergologisch-diagnostischer Komplex zur Diagnostik und/oder zum Ausschluss einer (Kontakt-)Allergie vom Sp\u00e4ttyp (Typ IV), einschl. Kosten\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2018-06-30\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2018-06-30\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2018-04-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2018-04-01\")\n        self.assertEqual(inst.id, \"ebm\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].amount.currency, \"EUR\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].amount.value, 67.44)\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].code, \"gesamt-euro\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].display, \"Gesamt (Euro)\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].system, \"http://fhir.de/CodeSystem/kbv/ebm-attribute\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].type, \"base\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[1].code.coding[0].code, \"gesamt-punkte\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[1].code.coding[0].display, \"Gesamt (Punkte)\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[1].code.coding[0].system, \"http://fhir.de/CodeSystem/kbv/ebm-attribute\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[1].factor, 633)\n        self.assertEqual(inst.propertyGroup[0].priceComponent[1].type, \"informational\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://fhir.de/ChargeItemDefinition/kbv/ebm-30110\")\n        self.assertEqual(inst.version, \"2-2018\")\n    \n    def testChargeItemDefinition2(self):\n        inst = self.instantiate_from(\"chargeitemdefinition-device-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ChargeItemDefinition instance\")\n        self.implChargeItemDefinition2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ChargeItemDefinition\", js[\"resourceType\"])\n        inst2 = chargeitemdefinition.ChargeItemDefinition(js)\n        self.implChargeItemDefinition2(inst2)\n    \n    def implChargeItemDefinition2(self, inst):\n        self.assertEqual(inst.applicability[0].description, \"Verify ChargeItem pertains to Device 12345\")\n        self.assertEqual(inst.applicability[0].expression, \"%context.service.suppliedItem='Device/12345'\")\n        self.assertEqual(inst.applicability[0].language, \"text/fhirpath\")\n        self.assertEqual(inst.description, \"Financial details for  custom made device\")\n        self.assertEqual(inst.id, \"device\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].amount.currency, \"EUR\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].amount.value, 67.44)\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].code, \"VK\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].display, \"Verkaufspreis (netto)\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].code.coding[0].system, \"http://fhir.de/CodeSystem/billing-attributes\")\n        self.assertEqual(inst.propertyGroup[0].priceComponent[0].type, \"base\")\n        self.assertEqual(inst.propertyGroup[1].applicability[0].description, \"G\u00fcltigkeit Steuersatz\")\n        self.assertEqual(inst.propertyGroup[1].applicability[0].expression, \"%context.occurenceDateTime > '2018-04-01'\")\n        self.assertEqual(inst.propertyGroup[1].applicability[0].language, \"text/fhirpath\")\n        self.assertEqual(inst.propertyGroup[1].priceComponent[0].code.coding[0].code, \"MWST\")\n        self.assertEqual(inst.propertyGroup[1].priceComponent[0].code.coding[0].display, \"Mehrwersteuersatz\")\n        self.assertEqual(inst.propertyGroup[1].priceComponent[0].code.coding[0].system, \"http://fhir.de/CodeSystem/billing-attributes\")\n        self.assertEqual(inst.propertyGroup[1].priceComponent[0].factor, 1.19)\n        self.assertEqual(inst.propertyGroup[1].priceComponent[0].type, \"tax\")\n        self.assertEqual(inst.propertyGroup[2].applicability[0].description, \"G\u00fcltigkeit Steuersatz\")\n        self.assertEqual(inst.propertyGroup[2].applicability[0].expression, \"%context.occurenceDateTime <= '2018-04-01'\")\n        self.assertEqual(inst.propertyGroup[2].applicability[0].language, \"text/fhirpath\")\n        self.assertEqual(inst.propertyGroup[2].priceComponent[0].code.coding[0].code, \"MWST\")\n        self.assertEqual(inst.propertyGroup[2].priceComponent[0].code.coding[0].display, \"Mehrwersteuersatz\")\n        self.assertEqual(inst.propertyGroup[2].priceComponent[0].code.coding[0].system, \"http://fhir.de/CodeSystem/billing-attributes\")\n        self.assertEqual(inst.propertyGroup[2].priceComponent[0].factor, 1.07)\n        self.assertEqual(inst.propertyGroup[2].priceComponent[0].type, \"tax\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://sap.org/ChargeItemDefinition/device-123\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/chargeitemdefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ChargeItemDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ChargeItemDefinition(domainresource.DomainResource):\n    \"\"\" Definition of properties and rules about how the price and the\n    applicability of a ChargeItem can be determined.\n    \n    The ChargeItemDefinition resource provides the properties that apply to the\n    (billing) codes necessary to calculate costs and prices. The properties may\n    differ largely depending on type and realm, therefore this resource gives\n    only a rough structure and requires profiling for each type of billing code\n    system.\n    \"\"\"\n    \n    resource_type = \"ChargeItemDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.applicability = None\n        \"\"\" Whether or not the billing code is applicable.\n        List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON). \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the charge item definition was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Billing codes or product types this definition applies to.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.derivedFromUri = None\n        \"\"\" Underlying externally-defined charge item definition.\n        List of `str` items. \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the charge item definition.\n        Type `str`. \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the charge item definition is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the charge item definition.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instance = None\n        \"\"\" Instances this definition applies to.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for charge item definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the charge item definition was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.partOf = None\n        \"\"\" A larger definition of which this particular definition is a\n        component or step.\n        List of `str` items. \"\"\"\n        \n        self.propertyGroup = None\n        \"\"\" Group of properties which are applicable under the same conditions.\n        List of `ChargeItemDefinitionPropertyGroup` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.replaces = None\n        \"\"\" Completed or terminated request(s) whose function is taken by this\n        new request.\n        List of `str` items. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this charge item definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this charge item definition, represented\n        as a URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the charge item definition.\n        Type `str`. \"\"\"\n        \n        super(ChargeItemDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItemDefinition, self).elementProperties()\n        js.extend([\n            (\"applicability\", \"applicability\", ChargeItemDefinitionApplicability, True, None, False),\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"derivedFromUri\", \"derivedFromUri\", str, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instance\", \"instance\", fhirreference.FHIRReference, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"partOf\", \"partOf\", str, True, None, False),\n            (\"propertyGroup\", \"propertyGroup\", ChargeItemDefinitionPropertyGroup, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"replaces\", \"replaces\", str, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, True),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ChargeItemDefinitionApplicability(backboneelement.BackboneElement):\n    \"\"\" Whether or not the billing code is applicable.\n    \n    Expressions that describe applicability criteria for the billing code.\n    \"\"\"\n    \n    resource_type = \"ChargeItemDefinitionApplicability\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the condition.\n        Type `str`. \"\"\"\n        \n        self.expression = None\n        \"\"\" Boolean-valued expression.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the expression.\n        Type `str`. \"\"\"\n        \n        super(ChargeItemDefinitionApplicability, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItemDefinitionApplicability, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"expression\", \"expression\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n        ])\n        return js\n\n\nclass ChargeItemDefinitionPropertyGroup(backboneelement.BackboneElement):\n    \"\"\" Group of properties which are applicable under the same conditions.\n    \n    Group of properties which are applicable under the same conditions. If no\n    applicability rules are established for the group, then all properties\n    always apply.\n    \"\"\"\n    \n    resource_type = \"ChargeItemDefinitionPropertyGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.applicability = None\n        \"\"\" Conditions under which the priceComponent is applicable.\n        List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priceComponent = None\n        \"\"\" Components of total line item price.\n        List of `ChargeItemDefinitionPropertyGroupPriceComponent` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ChargeItemDefinitionPropertyGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItemDefinitionPropertyGroup, self).elementProperties()\n        js.extend([\n            (\"applicability\", \"applicability\", ChargeItemDefinitionApplicability, True, None, False),\n            (\"priceComponent\", \"priceComponent\", ChargeItemDefinitionPropertyGroupPriceComponent, True, None, False),\n        ])\n        return js\n\n\nclass ChargeItemDefinitionPropertyGroupPriceComponent(backboneelement.BackboneElement):\n    \"\"\" Components of total line item price.\n    \n    The price for a ChargeItem may be calculated as a base price with\n    surcharges/deductions that apply in certain conditions. A\n    ChargeItemDefinition resource that defines the prices, factors and\n    conditions that apply to a billing code is currently under development. The\n    priceComponent element can be used to offer transparency to the recipient\n    of the Invoice of how the prices have been calculated.\n    \"\"\"\n    \n    resource_type = \"ChargeItemDefinitionPropertyGroupPriceComponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Monetary amount associated with this component.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Code identifying the specific component.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Factor used for calculating this component.\n        Type `float`. \"\"\"\n        \n        self.type = None\n        \"\"\" base | surcharge | deduction | discount | tax | informational.\n        Type `str`. \"\"\"\n        \n        super(ChargeItemDefinitionPropertyGroupPriceComponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItemDefinitionPropertyGroupPriceComponent, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", money.Money, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this `FHIRDate` instance, or a standardized ISO 8601 string representation of the stored date if the original is not available. The method checks the `origval` attribute, which stores the initial JSON value passed during instantiation. If `origval` is not `None`, it returns this value; otherwise, it returns the output of the `isostring` property, which formats the date in ISO 8601 format. No additional constants are used within this method.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this `FHIRDate` instance, or a standardized ISO 8601 string representation of the stored date if the original is not available. The method checks the `origval` attribute, which stores the initial JSON value passed during instantiation. If `origval` is not `None`, it returns this value; otherwise, it returns the output of the `isostring` property, which formats the date in ISO 8601 format. No additional constants are used within this method.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/chargeitemdefinition.py": {
      "ChargeItemDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a ChargeItemDefinition resource, defining properties and rules for how the price and applicability of a ChargeItem can be determined.\n\nThis constructor initializes the ChargeItemDefinition with a set of attributes associated with the charge item, including its applicability, approval date, billing codes, and other metadata such as copyright and publisher information. It can take an optional dictionary `jsondict` to populate the resource's attributes and a `strict` parameter that dictates whether to raise validation errors for invalid data. If `strict` is set to True, any invalid input will raise a FHIRValidationError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, which can include attributes like 'applicability', 'approvalDate', 'code', etc.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError; if False, these errors are ignored.\n\nAttributes initialized include:\n- applicability: List of conditions under which the billing code is applicable (ChargeItemDefinitionApplicability).\n- approvalDate: The date when the definition was approved by the publisher (FHIRDate).\n- code: Represents the billing codes or product types associated with this definition (CodeableConcept).\n- contact: Details of the publisher (ContactDetail).\n- copyright: Restrictions on use or publication (str).\n- date: Last changed date (FHIRDateTime).\n- derivedFromUri: Links to externally-defined charge item definitions (list of str).\n- description: A natural language description of the charge item definition (str).\n- effectivePeriod: The period during which the definition is expected to be used (Period).\n- experimental: Indicates if the definition is for testing purposes (bool).\n- identifier: Additional identifiers for the definition (list of Identifier).\n- instance: References to instances this definition applies to (list of FHIRReference).\n- jurisdiction: Intended jurisdiction for the definition (list of CodeableConcept).\n- lastReviewDate: Date of last review (FHIRDate).\n- partOf: Identifiers for larger definitions containing this component (list of str).\n- propertyGroup: Groups of properties applicable under the same conditions (list of ChargeItemDefinitionPropertyGroup).\n- publisher: Name of the publisher (str).\n- replaces: Tracking completed or terminated requests (list of str).\n- status: Current status of the definition (str).\n- title: Human-friendly name for the charge item definition (str).\n- url: Canonical identifier for the charge item definition (str).\n- useContext: Context for which the content is intended (list of UsageContext).\n- version: Business version of the definition (str).\n\nThis class is part of the FHIR specification and inherits from DomainResource, which provides core functionality for handling FHIR resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.applicability = None\n        ' Whether or not the billing code is applicable.\\n        List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON). '\n        self.approvalDate = None\n        ' When the charge item definition was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.code = None\n        ' Billing codes or product types this definition applies to.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.derivedFromUri = None\n        ' Underlying externally-defined charge item definition.\\n        List of `str` items. '\n        self.description = None\n        ' Natural language description of the charge item definition.\\n        Type `str`. '\n        self.effectivePeriod = None\n        ' When the charge item definition is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.identifier = None\n        ' Additional identifier for the charge item definition.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instance = None\n        ' Instances this definition applies to.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for charge item definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the charge item definition was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.partOf = None\n        ' A larger definition of which this particular definition is a\\n        component or step.\\n        List of `str` items. '\n        self.propertyGroup = None\n        ' Group of properties which are applicable under the same conditions.\\n        List of `ChargeItemDefinitionPropertyGroup` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.replaces = None\n        ' Completed or terminated request(s) whose function is taken by this\\n        new request.\\n        List of `str` items. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.title = None\n        ' Name for this charge item definition (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this charge item definition, represented\\n        as a URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the charge item definition.\\n        Type `str`. '\n        super(ChargeItemDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a ChargeItemDefinition resource, defining properties and rules for how the price and applicability of a ChargeItem can be determined.\n\nThis constructor initializes the ChargeItemDefinition with a set of attributes associated with the charge item, including its applicability, approval date, billing codes, and other metadata such as copyright and publisher information. It can take an optional dictionary `jsondict` to populate the resource's attributes and a `strict` parameter that dictates whether to raise validation errors for invalid data. If `strict` is set to True, any invalid input will raise a FHIRValidationError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, which can include attributes like 'applicability', 'approvalDate', 'code', etc.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError; if False, these errors are ignored.\n\nAttributes initialized include:\n- applicability: List of conditions under which the billing code is applicable (ChargeItemDefinitionApplicability).\n- approvalDate: The date when the definition was approved by the publisher (FHIRDate).\n- code: Represents the billing codes or product types associated with this definition (CodeableConcept).\n- contact: Details of the publisher (ContactDetail).\n- copyright: Restrictions on use or publication (str).\n- date: Last changed date (FHIRDateTime).\n- derivedFromUri: Links to externally-defined charge item definitions (list of str).\n- description: A natural language description of the charge item definition (str).\n- effectivePeriod: The period during which the definition is expected to be used (Period).\n- experimental: Indicates if the definition is for testing purposes (bool).\n- identifier: Additional identifiers for the definition (list of Identifier).\n- instance: References to instances this definition applies to (list of FHIRReference).\n- jurisdiction: Intended jurisdiction for the definition (list of CodeableConcept).\n- lastReviewDate: Date of last review (FHIRDate).\n- partOf: Identifiers for larger definitions containing this component (list of str).\n- propertyGroup: Groups of properties applicable under the same conditions (list of ChargeItemDefinitionPropertyGroup).\n- publisher: Name of the publisher (str).\n- replaces: Tracking completed or terminated requests (list of str).\n- status: Current status of the definition (str).\n- title: Human-friendly name for the charge item definition (str).\n- url: Canonical identifier for the charge item definition (str).\n- useContext: Context for which the content is intended (list of UsageContext).\n- version: Business version of the definition (str).\n\nThis class is part of the FHIR specification and inherits from DomainResource, which provides core functionality for handling FHIR resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ChargeItemDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializer for the FHIRDateTime class, which provides a convenient way to work with FHIR datetime values in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in JSON format, or None. If provided, this value is passed to the superclass (FHIRDate) for parsing the datetime.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and is intended to store the parsed Python datetime representation of the provided jsonval. \n\nDependencies:\n- Inherits from the FHIRDate class, which provides the base functionality for FHIR data types and includes a method for parsing datetime strings.\n\nThe use of the jsonval parameter enables interaction with the FHIRDate superclass, facilitating the conversion and representation of FHIR datetime values within this class context.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializer for the FHIRDateTime class, which provides a convenient way to work with FHIR datetime values in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in JSON format, or None. If provided, this value is passed to the superclass (FHIRDate) for parsing the datetime.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and is intended to store the parsed Python datetime representation of the provided jsonval. \n\nDependencies:\n- Inherits from the FHIRDate class, which provides the base functionality for FHIR data types and includes a method for parsing datetime strings.\n\nThe use of the jsonval parameter enables interaction with the FHIRDate superclass, facilitating the conversion and representation of FHIR datetime values within this class context.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current FHIRAbstractResource instance into a JSON-compatible dictionary representation.\n\nThis method extends the functionality of its superclass's `as_json` method by adding the `resourceType` key, which is set to the class's defined `resource_type`. The output facilitates serialization of the resource instance for communication with FHIR-compliant services.\n\n:return: A dictionary representation of the FHIR resource including its `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current FHIRAbstractResource instance into a JSON-compatible dictionary representation.\n\nThis method extends the functionality of its superclass's `as_json` method by adding the `resourceType` key, which is set to the class's defined `resource_type`. The output facilitates serialization of the resource instance for communication with FHIR-compliant services.\n\n:return: A dictionary representation of the FHIR resource including its `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:testChargeItemDefinition1": {
      "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:instantiate_from": {
        "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:implChargeItemDefinition1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:instantiate_from": {
      "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:testChargeItemDefinition2": {
      "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:instantiate_from": {
        "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/chargeitemdefinition_test.py:ChargeItemDefinitionTests:implChargeItemDefinition2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/chargeitemdefinition.py:ChargeItemDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-chargeitemdefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 chargeitemdefinition.py\n        \u2502   \u2514\u2500\u2500 ChargeItemDefinition.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe provided module is designed to validate and test instances of the FHIR `ChargeItemDefinition` resource, ensuring compliance with the FHIR 4.0.1 specification. It facilitates the loading, instantiation, and verification of `ChargeItemDefinition` resources, supporting detailed validation of resource attributes such as pricing, applicability conditions, tax details, and effective periods. By enabling comprehensive testing of these resources, the module ensures accurate representation of billing-related financial data and applicability rules within healthcare systems. This helps developers verify the correctness of `ChargeItemDefinition` implementations, streamline interoperability, and reduce errors in systems that utilize FHIR-based billing structures.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this `FHIRDate` instance, or a standardized ISO 8601 string representation of the stored date if the original is not available. The method checks the `origval` attribute, which stores the initial JSON value passed during instantiation. If `origval` is not `None`, it returns this value; otherwise, it returns the output of the `isostring` property, which formats the date in ISO 8601 format. No additional constants are used within this method.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/chargeitemdefinition.py\n\n- CLASS METHOD: ChargeItemDefinition.__init__\n  - CLASS SIGNATURE: class ChargeItemDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a ChargeItemDefinition resource, defining properties and rules for how the price and applicability of a ChargeItem can be determined.\n\nThis constructor initializes the ChargeItemDefinition with a set of attributes associated with the charge item, including its applicability, approval date, billing codes, and other metadata such as copyright and publisher information. It can take an optional dictionary `jsondict` to populate the resource's attributes and a `strict` parameter that dictates whether to raise validation errors for invalid data. If `strict` is set to True, any invalid input will raise a FHIRValidationError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, which can include attributes like 'applicability', 'approvalDate', 'code', etc.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError; if False, these errors are ignored.\n\nAttributes initialized include:\n- applicability: List of conditions under which the billing code is applicable (ChargeItemDefinitionApplicability).\n- approvalDate: The date when the definition was approved by the publisher (FHIRDate).\n- code: Represents the billing codes or product types associated with this definition (CodeableConcept).\n- contact: Details of the publisher (ContactDetail).\n- copyright: Restrictions on use or publication (str).\n- date: Last changed date (FHIRDateTime).\n- derivedFromUri: Links to externally-defined charge item definitions (list of str).\n- description: A natural language description of the charge item definition (str).\n- effectivePeriod: The period during which the definition is expected to be used (Period).\n- experimental: Indicates if the definition is for testing purposes (bool).\n- identifier: Additional identifiers for the definition (list of Identifier).\n- instance: References to instances this definition applies to (list of FHIRReference).\n- jurisdiction: Intended jurisdiction for the definition (list of CodeableConcept).\n- lastReviewDate: Date of last review (FHIRDate).\n- partOf: Identifiers for larger definitions containing this component (list of str).\n- propertyGroup: Groups of properties applicable under the same conditions (list of ChargeItemDefinitionPropertyGroup).\n- publisher: Name of the publisher (str).\n- replaces: Tracking completed or terminated requests (list of str).\n- status: Current status of the definition (str).\n- title: Human-friendly name for the charge item definition (str).\n- url: Canonical identifier for the charge item definition (str).\n- useContext: Context for which the content is intended (list of UsageContext).\n- version: Business version of the definition (str).\n\nThis class is part of the FHIR specification and inherits from DomainResource, which provides core functionality for handling FHIR resources.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRDateTime class, which provides a convenient way to work with FHIR datetime values in Python. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in JSON format, or None. If provided, this value is passed to the superclass (FHIRDate) for parsing the datetime.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute is initialized to None and is intended to store the parsed Python datetime representation of the provided jsonval. \n\nDependencies:\n- Inherits from the FHIRDate class, which provides the base functionality for FHIR data types and includes a method for parsing datetime strings.\n\nThe use of the jsonval parameter enables interaction with the FHIRDate superclass, facilitating the conversion and representation of FHIR datetime values within this class context.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current FHIRAbstractResource instance into a JSON-compatible dictionary representation.\n\nThis method extends the functionality of its superclass's `as_json` method by adding the `resourceType` key, which is set to the class's defined `resource_type`. The output facilitates serialization of the resource instance for communication with FHIR-compliant services.\n\n:return: A dictionary representation of the FHIR resource including its `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/chargeitemdefinition.py": "from . import domainresource\n\nclass ChargeItemDefinition(domainresource.DomainResource):\n    \"\"\" Definition of properties and rules about how the price and the\n    applicability of a ChargeItem can be determined.\n    \n    The ChargeItemDefinition resource provides the properties that apply to the\n    (billing) codes necessary to calculate costs and prices. The properties may\n    differ largely depending on type and realm, therefore this resource gives\n    only a rough structure and requires profiling for each type of billing code\n    system.\n    \"\"\"\n    resource_type = 'ChargeItemDefinition'\n\n    def elementProperties(self):\n        js = super(ChargeItemDefinition, self).elementProperties()\n        js.extend([('applicability', 'applicability', ChargeItemDefinitionApplicability, True, None, False), ('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('derivedFromUri', 'derivedFromUri', str, True, None, False), ('description', 'description', str, False, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instance', 'instance', fhirreference.FHIRReference, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('partOf', 'partOf', str, True, None, False), ('propertyGroup', 'propertyGroup', ChargeItemDefinitionPropertyGroup, True, None, False), ('publisher', 'publisher', str, False, None, False), ('replaces', 'replaces', str, True, None, False), ('status', 'status', str, False, None, True), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, True), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ChargeItemDefinitionApplicability(backboneelement.BackboneElement):\n    \"\"\" Whether or not the billing code is applicable.\n    \n    Expressions that describe applicability criteria for the billing code.\n    \"\"\"\n    resource_type = 'ChargeItemDefinitionApplicability'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Natural language description of the condition.\\n        Type `str`. '\n        self.expression = None\n        ' Boolean-valued expression.\\n        Type `str`. '\n        self.language = None\n        ' Language of the expression.\\n        Type `str`. '\n        super(ChargeItemDefinitionApplicability, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ChargeItemDefinitionApplicability, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('expression', 'expression', str, False, None, False), ('language', 'language', str, False, None, False)])\n        return js\n\nclass ChargeItemDefinitionPropertyGroup(backboneelement.BackboneElement):\n    \"\"\" Group of properties which are applicable under the same conditions.\n    \n    Group of properties which are applicable under the same conditions. If no\n    applicability rules are established for the group, then all properties\n    always apply.\n    \"\"\"\n    resource_type = 'ChargeItemDefinitionPropertyGroup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.applicability = None\n        ' Conditions under which the priceComponent is applicable.\\n        List of `ChargeItemDefinitionApplicability` items (represented as `dict` in JSON). '\n        self.priceComponent = None\n        ' Components of total line item price.\\n        List of `ChargeItemDefinitionPropertyGroupPriceComponent` items (represented as `dict` in JSON). '\n        super(ChargeItemDefinitionPropertyGroup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ChargeItemDefinitionPropertyGroup, self).elementProperties()\n        js.extend([('applicability', 'applicability', ChargeItemDefinitionApplicability, True, None, False), ('priceComponent', 'priceComponent', ChargeItemDefinitionPropertyGroupPriceComponent, True, None, False)])\n        return js\n\nclass ChargeItemDefinitionPropertyGroupPriceComponent(backboneelement.BackboneElement):\n    \"\"\" Components of total line item price.\n    \n    The price for a ChargeItem may be calculated as a base price with\n    surcharges/deductions that apply in certain conditions. A\n    ChargeItemDefinition resource that defines the prices, factors and\n    conditions that apply to a billing code is currently under development. The\n    priceComponent element can be used to offer transparency to the recipient\n    of the Invoice of how the prices have been calculated.\n    \"\"\"\n    resource_type = 'ChargeItemDefinitionPropertyGroupPriceComponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Monetary amount associated with this component.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.code = None\n        ' Code identifying the specific component.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.factor = None\n        ' Factor used for calculating this component.\\n        Type `float`. '\n        self.type = None\n        ' base | surcharge | deduction | discount | tax | informational.\\n        Type `str`. '\n        super(ChargeItemDefinitionPropertyGroupPriceComponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ChargeItemDefinitionPropertyGroupPriceComponent, self).elementProperties()\n        js.extend([('amount', 'amount', money.Money, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('factor', 'factor', float, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}