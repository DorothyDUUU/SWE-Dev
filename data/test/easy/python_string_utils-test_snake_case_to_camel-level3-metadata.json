{
  "dir_path": "/app/python_string_utils",
  "package_name": "python_string_utils",
  "sample_name": "python_string_utils-test_snake_case_to_camel",
  "src_dir": "string_utils/",
  "test_dir": "tests/",
  "test_file": "tests/test_snake_case_to_camel.py",
  "test_code": "from unittest import TestCase\n\nfrom string_utils import snake_case_to_camel\n\n\nclass SnakeCaseToCamelTestCase(TestCase):\n    def test_cannot_handle_non_string_objects(self):\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            snake_case_to_camel(None)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"NoneType\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            snake_case_to_camel(False)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"bool\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            snake_case_to_camel(0)\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"int\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            snake_case_to_camel([])\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"list\"')\n\n        with self.assertRaises(TypeError) as raised:\n            # noinspection PyTypeChecker\n            snake_case_to_camel({'a': 1})\n\n        self.assertEqual(str(raised.exception), 'Expected \"str\", received \"dict\"')\n\n    def test_returns_original_string_if_not_snake_case(self):\n        self.assertEqual(snake_case_to_camel(''), '')\n        self.assertEqual(snake_case_to_camel('foo'), 'foo')\n        self.assertEqual(snake_case_to_camel('foo bar baz'), 'foo bar baz')\n        self.assertEqual(snake_case_to_camel('not_snake_!'), 'not_snake_!')\n        self.assertEqual(snake_case_to_camel('(not_snake)'), '(not_snake)')\n        self.assertEqual(snake_case_to_camel('123not_snake'), '123not_snake')\n\n    def test_returns_camel_case_from_correct_snake_case(self):\n        self.assertEqual(snake_case_to_camel('hello_world'), 'HelloWorld')\n        self.assertEqual(snake_case_to_camel('the_snake_is_green'), 'TheSnakeIsGreen')\n        self.assertEqual(snake_case_to_camel('the_number_of_the_beast_is_666'), 'TheNumberOfTheBeastIs666')\n        self.assertEqual(snake_case_to_camel('a_b_c_d'), 'ABCD')\n        self.assertEqual(snake_case_to_camel('_one'), 'One')\n        self.assertEqual(snake_case_to_camel('__one'), 'One')\n        self.assertEqual(snake_case_to_camel('one_'), 'One')\n        self.assertEqual(snake_case_to_camel('_one_'), 'One')\n\n    def test_should_consider_custom_separator(self):\n        s = 'snake-case-using-dashes'\n        self.assertEqual(snake_case_to_camel(s), s)\n        self.assertEqual(snake_case_to_camel(s, separator='-'), 'SnakeCaseUsingDashes')\n\n    def test_should_not_capitalize_first_letter_if_specified(self):\n        self.assertEqual(snake_case_to_camel('this_will_starts_lower_case', False), 'thisWillStartsLowerCase')\n        self.assertEqual(snake_case_to_camel('hello_world', False), 'helloWorld')\n        self.assertEqual(snake_case_to_camel('the_snake_is_green', False), 'theSnakeIsGreen')\n        self.assertEqual(snake_case_to_camel('the_number_of_the_beast_is_666', False), 'theNumberOfTheBeastIs666')\n        self.assertEqual(snake_case_to_camel('a_b_c_d', False), 'aBCD')\n        self.assertEqual(snake_case_to_camel('_one', False), 'one')\n        self.assertEqual(snake_case_to_camel('__one', False), 'one')\n        self.assertEqual(snake_case_to_camel('one_', False), 'one')\n        self.assertEqual(snake_case_to_camel('_one_', False), 'one')\n",
  "GT_file_code": {
    "string_utils/manipulation.py": "# -*- coding: utf-8 -*-\n\n# public api to export\n__all__ = [\n    'camel_case_to_snake',\n    'snake_case_to_camel',\n    'reverse',\n    'shuffle',\n    'strip_html',\n    'prettify',\n    'asciify',\n    'slugify',\n    'booleanize',\n    'strip_margin',\n    'compress',\n    'decompress',\n    'roman_encode',\n    'roman_decode',\n]\n\nimport base64\nimport random\nimport unicodedata\nimport zlib\nfrom typing import Union\nfrom uuid import uuid4\n\nfrom ._regex import *\nfrom .errors import InvalidInputError\nfrom .validation import is_snake_case, is_full_string, is_camel_case, is_integer, is_string\n\n\n# PRIVATE API\n\n\nclass __RomanNumbers:\n    # internal rule mappings for encode()\n    __mappings = [\n        # units\n        {1: 'I', 5: 'V'},\n        # tens\n        {1: 'X', 5: 'L'},\n        # hundreds\n        {1: 'C', 5: 'D'},\n        # thousands\n        {1: 'M'},\n    ]\n\n    # swap key/value definitions for decode()\n    __reversed_mappings = [{v: k for k, v in m.items()} for m in __mappings]\n\n    @classmethod\n    def __encode_digit(cls, index: int, value: int) -> str:\n        # if digit is zero, there is no sign to display\n        if value == 0:\n            return ''\n\n        # from 1 to 3 we have just to repeat the sign N times (eg: III, XXX...)\n        if value <= 3:\n            return cls.__mappings[index][1] * value\n\n        # if 4 we have to add unit prefix\n        if value == 4:\n            return cls.__mappings[index][1] + cls.__mappings[index][5]\n\n        # if is 5, is a straight map\n        if value == 5:\n            return cls.__mappings[index][5]\n\n        # if 6, 7 or 8 we have to append unit suffixes\n        if value <= 8:\n            suffix = cls.__mappings[index][1] * (value - 5)\n            return cls.__mappings[index][5] + suffix\n\n        # if 9 we have to prepend current unit to next\n        return cls.__mappings[index][1] + cls.__mappings[index + 1][1]\n\n    @classmethod\n    def encode(cls, input_number: Union[str, int]) -> str:\n        # force input conversion to a string (we need it in order to iterate on each digit)\n        input_string = str(input_number)\n\n        if not is_integer(input_string):\n            raise ValueError('Invalid input, only strings or integers are allowed')\n\n        value = int(input_string)\n\n        if value < 1 or value > 3999:\n            raise ValueError('Input must be >= 1 and <= 3999')\n\n        input_len = len(input_string)\n        output = ''\n\n        # decode digits from right to left (start from units to thousands)\n        for index in range(input_len):\n            # get actual digit value as int\n            digit = int(input_string[input_len - index - 1])\n\n            # encode digit to roman string\n            encoded_digit = cls.__encode_digit(index, digit)\n\n            # prepend encoded value to the current output in order to have the final string sorted\n            # from thousands to units\n            output = encoded_digit + output\n\n        return output\n\n    @classmethod\n    def __index_for_sign(cls, sign: str) -> int:\n        for index, mapping in enumerate(cls.__reversed_mappings):\n            if sign in mapping:\n                return index\n\n        raise ValueError('Invalid token found: \"{}\"'.format(sign))\n\n    @classmethod\n    def decode(cls, input_string: str) -> int:\n        if not is_full_string(input_string):\n            raise ValueError('Input must be a non empty string')\n\n        # reverse the provided string so that we can start parsing from units to thousands\n        reversed_string = reverse(input_string.upper())\n\n        # track last used value\n        last_value = None\n\n        # computed number to return\n        output = 0\n\n        # for each sign in the string we get its numeric value and add or subtract it to the computed output\n        for sign in reversed_string:\n            # are we dealing with units, tens, hundreds or thousands?\n            index = cls.__index_for_sign(sign)\n\n            # it's basically 1 or 5 (based on mapping rules definitions)\n            key_value = cls.__reversed_mappings[index][sign]\n\n            # Based on the level (tens, hundreds...) we have to add as many zeroes as the level into which we are\n            # in order to have the actual sign value.\n            # For instance, if we are at level 2 we are dealing with hundreds, therefore instead of 1 or 5, we will\n            # obtain 100 or 500 by adding 2 zeroes\n            sign_value = int(str(key_value) + '0' * index)\n\n            # increase total value if we are moving on with level\n            if last_value is None or sign_value >= last_value:\n                output += sign_value\n\n            # Decrease value if we are back to a previous level\n            # For instance, if we are parsing \"IX\", we first encounter \"X\" which is ten then \"I\" which is unit,\n            # So we have to do the following operation in order to get 9 (the final result): 10 - 1\n            else:\n                output -= sign_value\n\n            last_value = sign_value\n\n        return output\n\n\nclass __StringCompressor:\n\n    @staticmethod\n    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\n\n    @classmethod\n    def compress(cls, input_string: str, encoding: str = 'utf-8', compression_level: int = 9) -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n\n        if not isinstance(compression_level, int) or compression_level < 0 or compression_level > 9:\n            raise ValueError('Invalid compression_level: it must be an \"int\" between 0 and 9')\n\n        # turns input string into a sequence of bytes using provided encoding\n        original_bytes = input_string.encode(encoding)\n\n        # compress bytes using zlib library\n        compressed_bytes = zlib.compress(original_bytes, compression_level)\n\n        # encode compressed bytes using base64\n        # (this ensure that all characters will be available and that the output string can be used safely in any\n        # context such URLs)\n        encoded_bytes = base64.urlsafe_b64encode(compressed_bytes)\n\n        # finally turns base64 bytes into a string\n        output = encoded_bytes.decode(encoding)\n\n        return output\n\n    @classmethod\n    def decompress(cls, input_string: str, encoding: str = 'utf-8') -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n\n        # turns input string into a sequence of bytes\n        # (the string is assumed to be a previously compressed string, therefore we have to decode it using base64)\n        input_bytes = base64.urlsafe_b64decode(input_string)\n\n        # decompress bytes using zlib\n        decompressed_bytes = zlib.decompress(input_bytes)\n\n        # decode the decompressed bytes to get the original string back\n        original_string = decompressed_bytes.decode(encoding)\n\n        return original_string\n\n\nclass __StringFormatter:\n    def __init__(self, input_string):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        self.input_string = input_string\n\n    def __uppercase_first_char(self, regex_match):\n        return regex_match.group(0).upper()\n\n    def __remove_duplicates(self, regex_match):\n        return regex_match.group(1)[0]\n\n    def __uppercase_first_letter_after_sign(self, regex_match):\n        match = regex_match.group(1)\n        return match[:-1] + match[2].upper()\n\n    def __ensure_right_space_only(self, regex_match):\n        return regex_match.group(1).strip() + ' '\n\n    def __ensure_left_space_only(self, regex_match):\n        return ' ' + regex_match.group(1).strip()\n\n    def __ensure_spaces_around(self, regex_match):\n        return ' ' + regex_match.group(1).strip() + ' '\n\n    def __remove_internal_spaces(self, regex_match):\n        return regex_match.group(1).strip()\n\n    def __fix_saxon_genitive(self, regex_match):\n        return regex_match.group(1).replace(' ', '') + ' '\n\n    # generates a placeholder to inject temporary into the string, it will be replaced with the original\n    # value at the end of the process\n    @staticmethod\n    def __placeholder_key():\n        return '$' + uuid4().hex + '$'\n\n    def format(self) -> str:\n        # map of temporary placeholders\n        placeholders = {}\n        out = self.input_string\n\n        # looks for url or email and updates placeholders map with found values\n        placeholders.update({self.__placeholder_key(): m[0] for m in URLS_RE.findall(out)})\n        placeholders.update({self.__placeholder_key(): m for m in EMAILS_RE.findall(out)})\n\n        # replace original value with the placeholder key\n        for p in placeholders:\n            out = out.replace(placeholders[p], p, 1)\n\n        out = PRETTIFY_RE['UPPERCASE_FIRST_LETTER'].sub(self.__uppercase_first_char, out)\n        out = PRETTIFY_RE['DUPLICATES'].sub(self.__remove_duplicates, out)\n        out = PRETTIFY_RE['RIGHT_SPACE'].sub(self.__ensure_right_space_only, out)\n        out = PRETTIFY_RE['LEFT_SPACE'].sub(self.__ensure_left_space_only, out)\n        out = PRETTIFY_RE['SPACES_AROUND'].sub(self.__ensure_spaces_around, out)\n        out = PRETTIFY_RE['SPACES_INSIDE'].sub(self.__remove_internal_spaces, out)\n        out = PRETTIFY_RE['UPPERCASE_AFTER_SIGN'].sub(self.__uppercase_first_letter_after_sign, out)\n        out = PRETTIFY_RE['SAXON_GENITIVE'].sub(self.__fix_saxon_genitive, out)\n        out = out.strip()\n\n        # restore placeholder keys with their associated original value\n        for p in placeholders:\n            out = out.replace(p, placeholders[p], 1)\n\n        return out\n\n\n# PUBLIC API\n\ndef reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string[::-1]\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    return CAMEL_CASE_REPLACE_RE.sub(lambda m: m.group(1) + separator, input_string).lower()\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    tokens = [s.title() for s in input_string.split(separator) if is_full_string(s)]\n\n    if not upper_case_first:\n        tokens[0] = tokens[0].lower()\n\n    out = ''.join(tokens)\n\n    return out\n\n\ndef shuffle(input_string: str) -> str:\n    \"\"\"\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # turn the string into a list of chars\n    chars = list(input_string)\n\n    # shuffle the list\n    random.shuffle(chars)\n\n    # convert the shuffled list back to string\n    return ''.join(chars)\n\n\ndef strip_html(input_string: str, keep_tag_content: bool = False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n\n    return r.sub('', input_string)\n\n\ndef prettify(input_string: str) -> str:\n    \"\"\"\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for \"?\", \"!\" and \".\")\n    - Arithmetic operators (+, -, /, \\\\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and \\\n    after quotes (foo\" bar\"baz -> foo \"bar\" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and \\\n    after brackets (\"foo(bar )baz\" -> \"foo (bar) baz\")\n    - Percentage sign (\"%\") cannot be preceded by a space if there is a number before (\"100 %\" -> \"100%\")\n    - Saxon genitive is correct (\"Dave' s dog\" -> \"Dave's dog\")\n\n    *Examples:*\n\n    >>> prettify(' unprettified string ,, like this one,will be\"prettified\" .it\\\\' s awesome! ')\n    >>> # -> 'Unprettified string, like this one, will be \"prettified\". It\\'s awesome!'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    \"\"\"\n    formatted = __StringFormatter(input_string).format()\n    return formatted\n\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # \"NFKD\" is the algorithm which is able to successfully translate the most of non-ascii chars\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # encode string forcing ascii and ignore any errors (unrepresentable chars will be stripped out)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n\n    # turns encoded bytes into an utf-8 string\n    ascii_string = ascii_bytes.decode('utf-8')\n\n    return ascii_string\n\n\ndef slugify(input_string: str, separator: str = '-') -> str:\n    \"\"\"\n    Converts a string into a \"slug\" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n    >>> slugify('M\u00f6nst\u00e9r M\u00e4gn\u00ebt') # returns 'monster-magnet'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to \"-\").\n    :type separator: str\n    :return: Slug string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # replace any character that is NOT letter or number with spaces\n    out = NO_LETTERS_OR_NUMBERS_RE.sub(' ', input_string.lower()).strip()\n\n    # replace spaces with join sign\n    out = SPACES_RE.sub(separator, out)\n\n    # normalize joins (remove duplicates)\n    out = re.sub(re.escape(separator) + r'+', separator, out)\n\n    return asciify(out)\n\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string.lower() in ('true', '1', 'yes', 'y')\n\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    line_separator = '\\n'\n    lines = [MARGIN_RE.sub('', line) for line in input_string.split(line_separator)]\n    out = line_separator.join(lines)\n\n    return out\n\n\ndef compress(input_string: str, encoding: str = 'utf-8', compression_level: int = 9) -> str:\n    \"\"\"\n    Compress the given string by returning a shorter one that can be safely used in any context (like URL) and\n    restored back to its original state using `decompress()`.\n\n    **Bear in mind:**\n    Besides the provided `compression_level`, the compression result (how much the string is actually compressed\n    by resulting into a shorter string) depends on 2 factors:\n\n    1. The amount of data (string size): short strings might not provide a significant compression result\\\n    or even be longer than the given input string (this is due to the fact that some bytes have to be embedded\\\n    into the compressed string in order to be able to restore it later on)\\\n\n    2. The content type: random sequences of chars are very unlikely to be successfully compressed, while the best\\\n    compression result is obtained when the string contains several recurring char sequences (like in the example).\n\n    Behind the scenes this method makes use of the standard Python's zlib and base64 libraries.\n\n    *Examples:*\n\n    >>> n = 0 # <- ignore this, it's a fix for Pycharm (not fixable using ignore comments)\n    >>> # \"original\" will be a string with 169 chars:\n    >>> original = ' '.join(['word n{}'.format(n) for n in range(20)])\n    >>> # \"compressed\" will be a string of 88 chars\n    >>> compressed = compress(original)\n\n    :param input_string: String to compress (must be not empty or a ValueError will be raised).\n    :type input_string: str\n    :param encoding: String encoding (default to \"utf-8\").\n    :type encoding: str\n    :param compression_level: A value between 0 (no compression) and 9 (best compression), default to 9.\n    :type compression_level: int\n    :return: Compressed string.\n    \"\"\"\n    return __StringCompressor.compress(input_string, encoding, compression_level)\n\n\ndef decompress(input_string: str, encoding: str = 'utf-8') -> str:\n    \"\"\"\n    Restore a previously compressed string (obtained using `compress()`) back to its original state.\n\n    :param input_string: String to restore.\n    :type input_string: str\n    :param encoding: Original string encoding.\n    :type encoding: str\n    :return: Decompressed string.\n    \"\"\"\n    return __StringCompressor.decompress(input_string, encoding)\n\n\ndef roman_encode(input_number: Union[str, int]) -> str:\n    \"\"\"\n    Convert the given number/string into a roman number.\n\n    The passed input must represents a positive integer in the range 1-3999 (inclusive).\n\n    Why this limit? You may be wondering:\n\n    1. zero is forbidden since there is no related representation in roman numbers\n    2. the upper bound 3999 is due to the limitation in the ascii charset\\\n    (the higher quantity sign displayable in ascii is \"M\" which is equal to 1000, therefore based on\\\n    roman numbers rules we can use 3 times M to reach 3000 but we can't go any further in thousands without\\\n    special \"boxed chars\").\n\n    *Examples:*\n\n    >>> roman_encode(37) # returns 'XXXVIII'\n    >>> roman_encode('2020') # returns 'MMXX'\n\n    :param input_number: An integer or a string to be converted.\n    :type input_number: Union[str, int]\n    :return: Roman number string.\n    \"\"\"\n    return __RomanNumbers.encode(input_number)\n\n\ndef roman_decode(input_string: str) -> int:\n    \"\"\"\n    Decode a roman number string into an integer if the provided string is valid.\n\n    *Example:*\n\n    >>> roman_decode('VII') # returns 7\n\n    :param input_string: (Assumed) Roman number\n    :type input_string: str\n    :return: Integer value\n    \"\"\"\n    return __RomanNumbers.decode(input_string)\n",
    "string_utils/validation.py": "# -*- coding: utf-8 -*-\n\n# public api to export\n__all__ = [\n    'is_string',\n    'is_full_string',\n    'is_number',\n    'is_integer',\n    'is_decimal',\n    'is_url',\n    'is_email',\n    'is_credit_card',\n    'is_camel_case',\n    'is_snake_case',\n    'is_json',\n    'is_uuid',\n    'is_ip_v4',\n    'is_ip_v6',\n    'is_ip',\n    'is_isbn_10',\n    'is_isbn_13',\n    'is_isbn',\n    'is_palindrome',\n    'is_pangram',\n    'is_isogram',\n    'is_slug',\n    'contains_html',\n    'words_count',\n]\n\nimport json\nimport string\nfrom typing import Any, Optional, List\n\nfrom ._regex import *\nfrom .errors import InvalidInputError\n\n\n# PRIVATE API\n\n\nclass __ISBNChecker:\n    def __init__(self, input_string: str, normalize: bool = True):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        self.input_string = input_string.replace('-', '') if normalize else input_string\n\n    def is_isbn_13(self) -> bool:\n        if len(self.input_string) == 13:\n            product = 0\n\n            try:\n                for index, digit in enumerate(self.input_string):\n                    weight = 1 if (index % 2 == 0) else 3\n                    product += int(digit) * weight\n\n                return product % 10 == 0\n\n            except ValueError:\n                pass\n\n        return False\n\n    def is_isbn_10(self) -> bool:\n        if len(self.input_string) == 10:\n            product = 0\n\n            try:\n                for index, digit in enumerate(self.input_string):\n                    product += int(digit) * (index + 1)\n\n                return product % 11 == 0\n\n            except ValueError:\n                pass\n\n        return False\n\n\n# PUBLIC API\n\ndef is_string(obj: Any) -> bool:\n    \"\"\"\n    Checks if an object is a string.\n\n    *Example:*\n\n    >>> is_string('foo') # returns true\n    >>> is_string(b'foo') # returns false\n\n    :param obj: Object to test.\n    :return: True if string, false otherwise.\n    \"\"\"\n    return isinstance(obj, str)\n\n\ndef is_full_string(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is not empty (it must contains at least one non space character).\n\n    *Examples:*\n\n    >>> is_full_string(None) # returns false\n    >>> is_full_string('') # returns false\n    >>> is_full_string(' ') # returns false\n    >>> is_full_string('hello') # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if not empty, false otherwise.\n    \"\"\"\n    return is_string(input_string) and input_string.strip() != ''\n\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise InvalidInputError(input_string)\n\n    return NUMBER_RE.match(input_string) is not None\n\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    return is_number(input_string) and '.' not in input_string\n\n\ndef is_decimal(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents a decimal or not.\n\n    A decimal may be signed or unsigned or use a \"scientific notation\".\n\n    >>> is_decimal('42.0') # returns true\n    >>> is_decimal('42') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    return is_number(input_string) and '.' in input_string\n\n\n# Full url example:\n# scheme://username:password@www.domain.com:8042/folder/subfolder/file.extension?param=value&param2=value2#hash\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    valid = URL_RE.match(input_string) is not None\n\n    if allowed_schemes:\n        return valid and any([input_string.startswith(s) for s in allowed_schemes])\n\n    return valid\n\n\ndef is_email(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    \"\"\"\n    # first simple \"pre check\": it must be a non empty string with max len 320 and cannot start with a dot\n    if not is_full_string(input_string) or len(input_string) > 320 or input_string.startswith('.'):\n        return False\n\n    try:\n        # we expect 2 tokens, one before \"@\" and one after, otherwise we have an exception and the email is not valid\n        head, tail = input_string.split('@')\n\n        # head's size must be <= 64, tail <= 255, head must not start with a dot or contain multiple consecutive dots\n        if len(head) > 64 or len(tail) > 255 or head.endswith('.') or ('..' in head):\n            return False\n\n        # removes escaped spaces, so that later on the test regex will accept the string\n        head = head.replace('\\\\ ', '')\n        if head.startswith('\"') and head.endswith('\"'):\n            head = head.replace(' ', '')[1:-1]\n\n        return EMAIL_RE.match(head + '@' + tail) is not None\n\n    except ValueError:\n        # borderline case in which we have multiple \"@\" signs but the head part is correctly escaped\n        if ESCAPED_AT_SIGN.search(input_string) is not None:\n            # replace \"@\" with \"a\" in the head\n            return is_email(ESCAPED_AT_SIGN.sub('a', input_string))\n\n        return False\n\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    if card_type:\n        if card_type not in CREDIT_CARDS:\n            raise KeyError(\n                'Invalid card type \"{}\". Valid types are: {}'.format(card_type, ', '.join(CREDIT_CARDS.keys()))\n            )\n        return CREDIT_CARDS[card_type].match(input_string) is not None\n\n    for c in CREDIT_CARDS:\n        if CREDIT_CARDS[c].match(input_string) is not None:\n            return True\n\n    return False\n\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and CAMEL_CASE_TEST_RE.match(input_string) is not None\n\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if is_full_string(input_string):\n        re_map = {\n            '_': SNAKE_CASE_TEST_RE,\n            '-': SNAKE_CASE_TEST_DASH_RE\n        }\n        re_template = r'([a-z]+\\d*{sign}[a-z\\d{sign}]*|{sign}+[a-z\\d]+[a-z\\d{sign}]*)'\n        r = re_map.get(\n            separator,\n            re.compile(re_template.format(sign=re.escape(separator)), re.IGNORECASE)\n        )\n\n        return r.match(input_string) is not None\n\n    return False\n\n\ndef is_json(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is a valid json.\n\n    *Examples:*\n\n    >>> is_json('{\"name\": \"Peter\"}') # returns true\n    >>> is_json('[1, 2, 3]') # returns true\n    >>> is_json('{nope}') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if json, false otherwise\n    \"\"\"\n    if is_full_string(input_string) and JSON_WRAPPER_RE.match(input_string) is not None:\n        try:\n            return isinstance(json.loads(input_string), (dict, list))\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    return False\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    # string casting is used to allow UUID itself as input data type\n    s = str(input_string)\n\n    if allow_hex:\n        return UUID_HEX_OK_RE.match(s) is not None\n\n    return UUID_RE.match(s) is not None\n\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string) or SHALLOW_IP_V4_RE.match(input_string) is None:\n        return False\n\n    # checks that each entry in the ip is in the valid range (0 to 255)\n    for token in input_string.split('.'):\n        if not (0 <= int(token) <= 255):\n            return False\n\n    return True\n\n\ndef is_ip_v6(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v6.\n\n    *Examples:*\n\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if a v6 ip, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and IP_V6_RE.match(input_string) is not None\n\n\ndef is_ip(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip (either v4 or v6).\n\n    *Examples:*\n\n    >>> is_ip('255.200.100.75') # returns true\n    >>> is_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip('1.2.3') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip, false otherwise.\n    \"\"\"\n    return is_ip_v6(input_string) or is_ip_v4(input_string)\n\n\ndef is_palindrome(input_string: Any, ignore_spaces: bool = False, ignore_case: bool = False) -> bool:\n    \"\"\"\n    Checks if the string is a palindrome (https://en.wikipedia.org/wiki/Palindrome).\n\n    *Examples:*\n\n    >>> is_palindrome('LOL') # returns true\n    >>> is_palindrome('Lol') # returns false\n    >>> is_palindrome('Lol', ignore_case=True) # returns true\n    >>> is_palindrome('ROTFL') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param ignore_spaces: False if white spaces matter (default), true otherwise.\n    :type ignore_spaces: bool\n    :param ignore_case: False if char case matters (default), true otherwise.\n    :type ignore_case: bool\n    :return: True if the string is a palindrome (like \"otto\", or \"i topi non avevano nipoti\" if strict=False),\\\n    False otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    if ignore_spaces:\n        input_string = SPACES_RE.sub('', input_string)\n\n    string_len = len(input_string)\n\n    # Traverse the string one char at step, and for each step compares the\n    # \"head_char\" (the one on the left of the string) to the \"tail_char\" (the one on the right).\n    # In this way we avoid to manipulate the whole string in advance if not necessary and provide a faster\n    # algorithm which can scale very well for long strings.\n    for index in range(string_len):\n        head_char = input_string[index]\n        tail_char = input_string[string_len - index - 1]\n\n        if ignore_case:\n            head_char = head_char.lower()\n            tail_char = tail_char.lower()\n\n        if head_char != tail_char:\n            return False\n\n    return True\n\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    return set(SPACES_RE.sub('', input_string)).issuperset(set(string.ascii_lowercase))\n\n\ndef is_isogram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and len(set(input_string)) == len(input_string)\n\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    rex = r'^([a-z\\d]+' + re.escape(separator) + r'*?)*[a-z\\d]$'\n\n    return re.match(rex, input_string) is not None\n\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return HTML_RE.search(input_string) is not None\n\n\ndef words_count(input_string: str) -> int:\n    \"\"\"\n    Returns the number of words contained into the given string.\n\n    This method is smart, it does consider only sequence of one or more letter and/or numbers\n    as \"words\", so a string like this: \"! @ # % ... []\" will return zero!\n    Moreover it is aware of punctuation, so the count for a string like \"one,two,three.stop\"\n    will be 4 not 1 (even if there are no spaces in the string).\n\n    *Examples:*\n\n    >>> words_count('hello world') # returns 2\n    >>> words_count('one,two,three.stop') # returns 4\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: Number of words.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return len(WORDS_COUNT_RE.findall(input_string))\n\n\ndef is_isbn_10(input_string: str, normalize: bool = True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN 10 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_10('1506715214') # returns true\n    >>> is_isbn_10('150-6715214') # returns true\n    >>> is_isbn_10('150-6715214', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN 10, false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_10()\n\n\ndef is_isbn_13(input_string: str, normalize: bool = True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN 13 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_13('9780312498580') # returns true\n    >>> is_isbn_13('978-0312498580') # returns true\n    >>> is_isbn_13('978-0312498580', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN 13, false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_13()\n\n\ndef is_isbn(input_string: str, normalize: bool = True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn('9780312498580') # returns true\n    >>> is_isbn('1506715214') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_13() or checker.is_isbn_10()\n",
    "string_utils/errors.py": "# -*- coding: utf-8 -*-\n\nfrom typing import Any\n\n\nclass InvalidInputError(TypeError):\n    \"\"\"\n    Custom error raised when received object is not a string as expected.\n    \"\"\"\n\n    def __init__(self, input_data: Any):\n        \"\"\"\n        :param input_data: Any received object\n        \"\"\"\n        type_name = type(input_data).__name__\n        msg = 'Expected \"str\", received \"{}\"'.format(type_name)\n        super().__init__(msg)\n"
  },
  "GT_src_dict": {
    "string_utils/manipulation.py": {
      "snake_case_to_camel": {
        "code": "def snake_case_to_camel(input_string: str, upper_case_first: bool=True, separator: str='_') -> str:\n    \"\"\"Converts a snake_case string into a camelCase string. If the input string is not a valid snake_case string, it returns the original string.\n\nParameters:\n- input_string (str): The snake_case string to convert.\n- upper_case_first (bool): If True (default), the first letter of the resulting camelCase string will be uppercase. If False, it will be lowercase.\n- separator (str): The character used as a separator in the input string (default is '_').\n\nReturns:\n- str: The converted camelCase string if the input is valid; otherwise, the original string.\n\nDependencies:\n- The function relies on the `is_string`, `is_snake_case`, and `is_full_string` functions from the validation module for input checking. These ensure that the provided string is in the correct format for conversion. The constants used are not explicitly defined within this function but are part of the module's validation framework to assist in string processing.\"\"\"\n    '\\n    Convert a snake case string into a camel case one.\\n    (The original string is returned if is not a valid snake case string)\\n\\n    *Example:*\\n\\n    >>> snake_case_to_camel(\\'the_snake_is_green\\') # returns \\'TheSnakeIsGreen\\'\\n\\n    :param input_string: String to convert.\\n    :type input_string: str\\n    :param upper_case_first: True to turn the first letter into uppercase (default).\\n    :type upper_case_first: bool\\n    :param separator: Sign to use as separator (default to \"_\").\\n    :type separator: str\\n    :return: Converted string\\n    '\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    if not is_snake_case(input_string, separator):\n        return input_string\n    tokens = [s.title() for s in input_string.split(separator) if is_full_string(s)]\n    if not upper_case_first:\n        tokens[0] = tokens[0].lower()\n    out = ''.join(tokens)\n    return out",
        "docstring": "Converts a snake_case string into a camelCase string. If the input string is not a valid snake_case string, it returns the original string.\n\nParameters:\n- input_string (str): The snake_case string to convert.\n- upper_case_first (bool): If True (default), the first letter of the resulting camelCase string will be uppercase. If False, it will be lowercase.\n- separator (str): The character used as a separator in the input string (default is '_').\n\nReturns:\n- str: The converted camelCase string if the input is valid; otherwise, the original string.\n\nDependencies:\n- The function relies on the `is_string`, `is_snake_case`, and `is_full_string` functions from the validation module for input checking. These ensure that the provided string is in the correct format for conversion. The constants used are not explicitly defined within this function but are part of the module's validation framework to assist in string processing.",
        "signature": "def snake_case_to_camel(input_string: str, upper_case_first: bool=True, separator: str='_') -> str:",
        "type": "Function",
        "class_signature": null
      }
    },
    "string_utils/validation.py": {
      "is_string": {
        "code": "def is_string(obj: Any) -> bool:\n    \"\"\"Checks if the given object is of type string.\n\nThis function takes any object as input and verifies if it is an instance of the built-in `str` class. The output is a boolean value indicating whether the provided object is a string.\n\nParameters:\n- obj (Any): The object to evaluate.\n\nReturns:\n- bool: `True` if the object is a string, `False` otherwise.\n\nThis function is used throughout the codebase to ensure that operations which require string types are performed only on valid string objects, helping to avoid type-related errors and improving overall code reliability.\"\"\"\n    \"\\n    Checks if an object is a string.\\n\\n    *Example:*\\n\\n    >>> is_string('foo') # returns true\\n    >>> is_string(b'foo') # returns false\\n\\n    :param obj: Object to test.\\n    :return: True if string, false otherwise.\\n    \"\n    return isinstance(obj, str)",
        "docstring": "Checks if the given object is of type string.\n\nThis function takes any object as input and verifies if it is an instance of the built-in `str` class. The output is a boolean value indicating whether the provided object is a string.\n\nParameters:\n- obj (Any): The object to evaluate.\n\nReturns:\n- bool: `True` if the object is a string, `False` otherwise.\n\nThis function is used throughout the codebase to ensure that operations which require string types are performed only on valid string objects, helping to avoid type-related errors and improving overall code reliability.",
        "signature": "def is_string(obj: Any) -> bool:",
        "type": "Function",
        "class_signature": null
      },
      "is_full_string": {
        "code": "def is_full_string(input_string: Any) -> bool:\n    \"\"\"Checks if the provided input string is a non-empty string that contains at least one non-space character. \n\nThis function relies on the helper function `is_string()` to validate that the input is indeed a string. It also uses the `strip()` method to remove leading and trailing whitespace, ensuring that strings made up solely of spaces are considered empty.\n\nParameters:\n- input_string (Any): The input to be checked, which can be of any type. It is expected to be a string.\n\nReturns:\n- bool: True if `input_string` is a non-empty string with at least one non-space character; otherwise, returns False.\n\nExample:\n>>> is_full_string('hello') # returns true\n>>> is_full_string(' ') # returns false\"\"\"\n    \"\\n    Check if a string is not empty (it must contains at least one non space character).\\n\\n    *Examples:*\\n\\n    >>> is_full_string(None) # returns false\\n    >>> is_full_string('') # returns false\\n    >>> is_full_string(' ') # returns false\\n    >>> is_full_string('hello') # returns true\\n\\n    :param input_string: String to check.\\n    :type input_string: str\\n    :return: True if not empty, false otherwise.\\n    \"\n    return is_string(input_string) and input_string.strip() != ''",
        "docstring": "Checks if the provided input string is a non-empty string that contains at least one non-space character. \n\nThis function relies on the helper function `is_string()` to validate that the input is indeed a string. It also uses the `strip()` method to remove leading and trailing whitespace, ensuring that strings made up solely of spaces are considered empty.\n\nParameters:\n- input_string (Any): The input to be checked, which can be of any type. It is expected to be a string.\n\nReturns:\n- bool: True if `input_string` is a non-empty string with at least one non-space character; otherwise, returns False.\n\nExample:\n>>> is_full_string('hello') # returns true\n>>> is_full_string(' ') # returns false",
        "signature": "def is_full_string(input_string: Any) -> bool:",
        "type": "Function",
        "class_signature": null
      },
      "is_snake_case": {
        "code": "def is_snake_case(input_string: Any, separator: str='_') -> bool:\n    \"\"\"Checks if a given string is formatted as \"snake case\", which is characterized by being composed of lowercase and uppercase letters and digits, containing at least one separator (default is an underscore, but can be customized), and not starting with a number.\n\nParameters:\n- input_string (Any): The string to test for snake case formatting. Must be a non-empty string.\n- separator (str): The character used as a separator (default is '_'). \n\nReturns:\n- bool: True if the string is in snake case format, false otherwise.\n\nDependencies:\n- The function uses the `is_full_string` function to validate that the input string is a non-empty string. It also employs regular expression matching, which is handled by constants `SNAKE_CASE_TEST_RE` and `SNAKE_CASE_TEST_DASH_RE`, defined elsewhere in the module, to check for valid snake case patterns.\"\"\"\n    '\\n    Checks if a string is formatted as \"snake case\".\\n\\n    A string is considered snake case when:\\n\\n    - it\\'s composed only by lowercase/uppercase letters and digits\\n    - it contains at least one underscore (or provided separator)\\n    - it does not start with a number\\n\\n    *Examples:*\\n\\n    >>> is_snake_case(\\'foo_bar_baz\\') # returns true\\n    >>> is_snake_case(\\'foo\\') # returns false\\n\\n    :param input_string: String to test.\\n    :type input_string: str\\n    :param separator: String to use as separator.\\n    :type separator: str\\n    :return: True for a snake case string, false otherwise.\\n    '\n    if is_full_string(input_string):\n        re_map = {'_': SNAKE_CASE_TEST_RE, '-': SNAKE_CASE_TEST_DASH_RE}\n        re_template = '([a-z]+\\\\d*{sign}[a-z\\\\d{sign}]*|{sign}+[a-z\\\\d]+[a-z\\\\d{sign}]*)'\n        r = re_map.get(separator, re.compile(re_template.format(sign=re.escape(separator)), re.IGNORECASE))\n        return r.match(input_string) is not None\n    return False",
        "docstring": "Checks if a given string is formatted as \"snake case\", which is characterized by being composed of lowercase and uppercase letters and digits, containing at least one separator (default is an underscore, but can be customized), and not starting with a number.\n\nParameters:\n- input_string (Any): The string to test for snake case formatting. Must be a non-empty string.\n- separator (str): The character used as a separator (default is '_'). \n\nReturns:\n- bool: True if the string is in snake case format, false otherwise.\n\nDependencies:\n- The function uses the `is_full_string` function to validate that the input string is a non-empty string. It also employs regular expression matching, which is handled by constants `SNAKE_CASE_TEST_RE` and `SNAKE_CASE_TEST_DASH_RE`, defined elsewhere in the module, to check for valid snake case patterns.",
        "signature": "def is_snake_case(input_string: Any, separator: str='_') -> bool:",
        "type": "Function",
        "class_signature": null
      }
    },
    "string_utils/errors.py": {
      "InvalidInputError.__init__": {
        "code": "    def __init__(self, input_data: Any):\n        \"\"\"Initialize an instance of the InvalidInputError class, which is a custom error used to signal that an invalid input was provided\u2014specifically, that the input was not a string as expected.\n\nParameters:\n- input_data (Any): The object that was received, which is expected to be a string. This parameter can be of any type, and it is used to generate the error message.\n\nThe constructor derives the type of the input_data object using `type(input_data).__name__`, which returns a string representation of the actual type. It then formats a message informing that a string was expected, but a different type was received. This message is passed to the parent class (`TypeError`) via `super().__init__(msg)` to initialize the exception with the provided message.\n\nThis method does not return a value, but instead raises an exception when the input does not meet the expected criteria.\"\"\"\n        '\\n        :param input_data: Any received object\\n        '\n        type_name = type(input_data).__name__\n        msg = 'Expected \"str\", received \"{}\"'.format(type_name)\n        super().__init__(msg)",
        "docstring": "Initialize an instance of the InvalidInputError class, which is a custom error used to signal that an invalid input was provided\u2014specifically, that the input was not a string as expected.\n\nParameters:\n- input_data (Any): The object that was received, which is expected to be a string. This parameter can be of any type, and it is used to generate the error message.\n\nThe constructor derives the type of the input_data object using `type(input_data).__name__`, which returns a string representation of the actual type. It then formats a message informing that a string was expected, but a different type was received. This message is passed to the parent class (`TypeError`) via `super().__init__(msg)` to initialize the exception with the provided message.\n\nThis method does not return a value, but instead raises an exception when the input does not meet the expected criteria.",
        "signature": "def __init__(self, input_data: Any):",
        "type": "Method",
        "class_signature": "class InvalidInputError(TypeError):"
      }
    }
  },
  "dependency_dict": {
    "string_utils/manipulation.py:snake_case_to_camel": {},
    "string_utils/validation.py:is_string": {},
    "string_utils/errors.py:InvalidInputError:__init__": {},
    "string_utils/validation.py:is_snake_case": {},
    "string_utils/validation.py:is_full_string": {}
  },
  "PRD": "# PROJECT NAME: python_string_utils-test_snake_case_to_camel\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 string_utils/\n    \u251c\u2500\u2500 errors.py\n    \u2502   \u2514\u2500\u2500 InvalidInputError.__init__\n    \u251c\u2500\u2500 manipulation.py\n    \u2502   \u2514\u2500\u2500 snake_case_to_camel\n    \u2514\u2500\u2500 validation.py\n        \u251c\u2500\u2500 is_full_string\n        \u251c\u2500\u2500 is_snake_case\n        \u2514\u2500\u2500 is_string\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides a testing framework for validating the functionality and robustness of a utility function designed to convert snake_case strings into camelCase or PascalCase formats. It ensures the function accurately handles various input scenarios, including invalid data types, non-snake_case strings, correct snake_case patterns, custom separators, and optional capitalization preferences. By thoroughly verifying edge cases and expected transformations, the module ensures the reliability and correctness of the string conversion utility. This helps developers confidently integrate and leverage the function for seamless string transformations in applications requiring dynamic or standardized naming conventions.\n\n## FILE 1: string_utils/manipulation.py\n\n- FUNCTION NAME: snake_case_to_camel\n  - SIGNATURE: def snake_case_to_camel(input_string: str, upper_case_first: bool=True, separator: str='_') -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a snake_case string into a camelCase string. If the input string is not a valid snake_case string, it returns the original string.\n\nParameters:\n- input_string (str): The snake_case string to convert.\n- upper_case_first (bool): If True (default), the first letter of the resulting camelCase string will be uppercase. If False, it will be lowercase.\n- separator (str): The character used as a separator in the input string (default is '_').\n\nReturns:\n- str: The converted camelCase string if the input is valid; otherwise, the original string.\n\nDependencies:\n- The function relies on the `is_string`, `is_snake_case`, and `is_full_string` functions from the validation module for input checking. These ensure that the provided string is in the correct format for conversion. The constants used are not explicitly defined within this function but are part of the module's validation framework to assist in string processing.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - string_utils/validation.py:is_snake_case\n    - string_utils/errors.py:InvalidInputError:__init__\n    - string_utils/validation.py:is_full_string\n    - string_utils/validation.py:is_string\n\n## FILE 2: string_utils/validation.py\n\n- FUNCTION NAME: is_string\n  - SIGNATURE: def is_string(obj: Any) -> bool:\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the given object is of type string.\n\nThis function takes any object as input and verifies if it is an instance of the built-in `str` class. The output is a boolean value indicating whether the provided object is a string.\n\nParameters:\n- obj (Any): The object to evaluate.\n\nReturns:\n- bool: `True` if the object is a string, `False` otherwise.\n\nThis function is used throughout the codebase to ensure that operations which require string types are performed only on valid string objects, helping to avoid type-related errors and improving overall code reliability.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - string_utils/manipulation.py:snake_case_to_camel\n\n- FUNCTION NAME: is_snake_case\n  - SIGNATURE: def is_snake_case(input_string: Any, separator: str='_') -> bool:\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if a given string is formatted as \"snake case\", which is characterized by being composed of lowercase and uppercase letters and digits, containing at least one separator (default is an underscore, but can be customized), and not starting with a number.\n\nParameters:\n- input_string (Any): The string to test for snake case formatting. Must be a non-empty string.\n- separator (str): The character used as a separator (default is '_'). \n\nReturns:\n- bool: True if the string is in snake case format, false otherwise.\n\nDependencies:\n- The function uses the `is_full_string` function to validate that the input string is a non-empty string. It also employs regular expression matching, which is handled by constants `SNAKE_CASE_TEST_RE` and `SNAKE_CASE_TEST_DASH_RE`, defined elsewhere in the module, to check for valid snake case patterns.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - string_utils/manipulation.py:snake_case_to_camel\n    - string_utils/validation.py:is_full_string\n\n- FUNCTION NAME: is_full_string\n  - SIGNATURE: def is_full_string(input_string: Any) -> bool:\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the provided input string is a non-empty string that contains at least one non-space character. \n\nThis function relies on the helper function `is_string()` to validate that the input is indeed a string. It also uses the `strip()` method to remove leading and trailing whitespace, ensuring that strings made up solely of spaces are considered empty.\n\nParameters:\n- input_string (Any): The input to be checked, which can be of any type. It is expected to be a string.\n\nReturns:\n- bool: True if `input_string` is a non-empty string with at least one non-space character; otherwise, returns False.\n\nExample:\n>>> is_full_string('hello') # returns true\n>>> is_full_string(' ') # returns false\n\"\"\"\n```\n  - DEPENDENCIES:\n    - string_utils/manipulation.py:snake_case_to_camel\n    - string_utils/validation.py:is_string\n\n## FILE 3: string_utils/errors.py\n\n- CLASS METHOD: InvalidInputError.__init__\n  - CLASS SIGNATURE: class InvalidInputError(TypeError):\n  - SIGNATURE: def __init__(self, input_data: Any):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an instance of the InvalidInputError class, which is a custom error used to signal that an invalid input was provided\u2014specifically, that the input was not a string as expected.\n\nParameters:\n- input_data (Any): The object that was received, which is expected to be a string. This parameter can be of any type, and it is used to generate the error message.\n\nThe constructor derives the type of the input_data object using `type(input_data).__name__`, which returns a string representation of the actual type. It then formats a message informing that a string was expected, but a different type was received. This message is passed to the parent class (`TypeError`) via `super().__init__(msg)` to initialize the exception with the provided message.\n\nThis method does not return a value, but instead raises an exception when the input does not meet the expected criteria.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "string_utils/manipulation.py": "__all__ = ['camel_case_to_snake', 'snake_case_to_camel', 'reverse', 'shuffle', 'strip_html', 'prettify', 'asciify', 'slugify', 'booleanize', 'strip_margin', 'compress', 'decompress', 'roman_encode', 'roman_decode']\nimport base64\nimport random\nimport unicodedata\nimport zlib\nfrom typing import Union\nfrom uuid import uuid4\nfrom ._regex import *\nfrom .errors import InvalidInputError\nfrom .validation import is_snake_case, is_full_string, is_camel_case, is_integer, is_string\n\nclass __RomanNumbers:\n    __mappings = [{1: 'I', 5: 'V'}, {1: 'X', 5: 'L'}, {1: 'C', 5: 'D'}, {1: 'M'}]\n    __reversed_mappings = [{v: k for k, v in m.items()} for m in __mappings]\n\n    @classmethod\n    def __encode_digit(cls, index: int, value: int) -> str:\n        if value == 0:\n            return ''\n        if value <= 3:\n            return cls.__mappings[index][1] * value\n        if value == 4:\n            return cls.__mappings[index][1] + cls.__mappings[index][5]\n        if value == 5:\n            return cls.__mappings[index][5]\n        if value <= 8:\n            suffix = cls.__mappings[index][1] * (value - 5)\n            return cls.__mappings[index][5] + suffix\n        return cls.__mappings[index][1] + cls.__mappings[index + 1][1]\n\n    @classmethod\n    def encode(cls, input_number: Union[str, int]) -> str:\n        input_string = str(input_number)\n        if not is_integer(input_string):\n            raise ValueError('Invalid input, only strings or integers are allowed')\n        value = int(input_string)\n        if value < 1 or value > 3999:\n            raise ValueError('Input must be >= 1 and <= 3999')\n        input_len = len(input_string)\n        output = ''\n        for index in range(input_len):\n            digit = int(input_string[input_len - index - 1])\n            encoded_digit = cls.__encode_digit(index, digit)\n            output = encoded_digit + output\n        return output\n\n    @classmethod\n    def __index_for_sign(cls, sign: str) -> int:\n        for index, mapping in enumerate(cls.__reversed_mappings):\n            if sign in mapping:\n                return index\n        raise ValueError('Invalid token found: \"{}\"'.format(sign))\n\n    @classmethod\n    def decode(cls, input_string: str) -> int:\n        if not is_full_string(input_string):\n            raise ValueError('Input must be a non empty string')\n        reversed_string = reverse(input_string.upper())\n        last_value = None\n        output = 0\n        for sign in reversed_string:\n            index = cls.__index_for_sign(sign)\n            key_value = cls.__reversed_mappings[index][sign]\n            sign_value = int(str(key_value) + '0' * index)\n            if last_value is None or sign_value >= last_value:\n                output += sign_value\n            else:\n                output -= sign_value\n            last_value = sign_value\n        return output\n\nclass __StringCompressor:\n\n    @staticmethod\n    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\n\n    @classmethod\n    def compress(cls, input_string: str, encoding: str='utf-8', compression_level: int=9) -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n        if not isinstance(compression_level, int) or compression_level < 0 or compression_level > 9:\n            raise ValueError('Invalid compression_level: it must be an \"int\" between 0 and 9')\n        original_bytes = input_string.encode(encoding)\n        compressed_bytes = zlib.compress(original_bytes, compression_level)\n        encoded_bytes = base64.urlsafe_b64encode(compressed_bytes)\n        output = encoded_bytes.decode(encoding)\n        return output\n\n    @classmethod\n    def decompress(cls, input_string: str, encoding: str='utf-8') -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n        input_bytes = base64.urlsafe_b64decode(input_string)\n        decompressed_bytes = zlib.decompress(input_bytes)\n        original_string = decompressed_bytes.decode(encoding)\n        return original_string\n\nclass __StringFormatter:\n\n    def __init__(self, input_string):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n        self.input_string = input_string\n\n    def __uppercase_first_char(self, regex_match):\n        return regex_match.group(0).upper()\n\n    def __remove_duplicates(self, regex_match):\n        return regex_match.group(1)[0]\n\n    def __uppercase_first_letter_after_sign(self, regex_match):\n        match = regex_match.group(1)\n        return match[:-1] + match[2].upper()\n\n    def __ensure_right_space_only(self, regex_match):\n        return regex_match.group(1).strip() + ' '\n\n    def __ensure_left_space_only(self, regex_match):\n        return ' ' + regex_match.group(1).strip()\n\n    def __ensure_spaces_around(self, regex_match):\n        return ' ' + regex_match.group(1).strip() + ' '\n\n    def __remove_internal_spaces(self, regex_match):\n        return regex_match.group(1).strip()\n\n    def __fix_saxon_genitive(self, regex_match):\n        return regex_match.group(1).replace(' ', '') + ' '\n\n    @staticmethod\n    def __placeholder_key():\n        return '$' + uuid4().hex + '$'\n\n    def format(self) -> str:\n        placeholders = {}\n        out = self.input_string\n        placeholders.update({self.__placeholder_key(): m[0] for m in URLS_RE.findall(out)})\n        placeholders.update({self.__placeholder_key(): m for m in EMAILS_RE.findall(out)})\n        for p in placeholders:\n            out = out.replace(placeholders[p], p, 1)\n        out = PRETTIFY_RE['UPPERCASE_FIRST_LETTER'].sub(self.__uppercase_first_char, out)\n        out = PRETTIFY_RE['DUPLICATES'].sub(self.__remove_duplicates, out)\n        out = PRETTIFY_RE['RIGHT_SPACE'].sub(self.__ensure_right_space_only, out)\n        out = PRETTIFY_RE['LEFT_SPACE'].sub(self.__ensure_left_space_only, out)\n        out = PRETTIFY_RE['SPACES_AROUND'].sub(self.__ensure_spaces_around, out)\n        out = PRETTIFY_RE['SPACES_INSIDE'].sub(self.__remove_internal_spaces, out)\n        out = PRETTIFY_RE['UPPERCASE_AFTER_SIGN'].sub(self.__uppercase_first_letter_after_sign, out)\n        out = PRETTIFY_RE['SAXON_GENITIVE'].sub(self.__fix_saxon_genitive, out)\n        out = out.strip()\n        for p in placeholders:\n            out = out.replace(p, placeholders[p], 1)\n        return out\n\ndef reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return input_string[::-1]\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    if not is_camel_case(input_string):\n        return input_string\n    return CAMEL_CASE_REPLACE_RE.sub(lambda m: m.group(1) + separator, input_string).lower()\n\ndef shuffle(input_string: str) -> str:\n    \"\"\"\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    chars = list(input_string)\n    random.shuffle(chars)\n    return ''.join(chars)\n\ndef strip_html(input_string: str, keep_tag_content: bool=False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n    return r.sub('', input_string)\n\ndef prettify(input_string: str) -> str:\n    \"\"\"\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for \"?\", \"!\" and \".\")\n    - Arithmetic operators (+, -, /, \\\\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo\" bar\"baz -> foo \"bar\" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets (\"foo(bar )baz\" -> \"foo (bar) baz\")\n    - Percentage sign (\"%\") cannot be preceded by a space if there is a number before (\"100 %\" -> \"100%\")\n    - Saxon genitive is correct (\"Dave' s dog\" -> \"Dave's dog\")\n\n    *Examples:*\n\n    >>> prettify(' unprettified string ,, like this one,will be\"prettified\" .it\\\\' s awesome! ')\n    >>> # -> 'Unprettified string, like this one, will be \"prettified\". It's awesome!'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    \"\"\"\n    formatted = __StringFormatter(input_string).format()\n    return formatted\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    normalized = unicodedata.normalize('NFKD', input_string)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n    ascii_string = ascii_bytes.decode('utf-8')\n    return ascii_string\n\ndef slugify(input_string: str, separator: str='-') -> str:\n    \"\"\"\n    Converts a string into a \"slug\" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n    >>> slugify('M\u00f6nst\u00e9r M\u00e4gn\u00ebt') # returns 'monster-magnet'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to \"-\").\n    :type separator: str\n    :return: Slug string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    out = NO_LETTERS_OR_NUMBERS_RE.sub(' ', input_string.lower()).strip()\n    out = SPACES_RE.sub(separator, out)\n    out = re.sub(re.escape(separator) + '+', separator, out)\n    return asciify(out)\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return input_string.lower() in ('true', '1', 'yes', 'y')\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    line_separator = '\\n'\n    lines = [MARGIN_RE.sub('', line) for line in input_string.split(line_separator)]\n    out = line_separator.join(lines)\n    return out\n\ndef compress(input_string: str, encoding: str='utf-8', compression_level: int=9) -> str:\n    \"\"\"\n    Compress the given string by returning a shorter one that can be safely used in any context (like URL) and\n    restored back to its original state using `decompress()`.\n\n    **Bear in mind:**\n    Besides the provided `compression_level`, the compression result (how much the string is actually compressed\n    by resulting into a shorter string) depends on 2 factors:\n\n    1. The amount of data (string size): short strings might not provide a significant compression result    or even be longer than the given input string (this is due to the fact that some bytes have to be embedded    into the compressed string in order to be able to restore it later on)\n    2. The content type: random sequences of chars are very unlikely to be successfully compressed, while the best    compression result is obtained when the string contains several recurring char sequences (like in the example).\n\n    Behind the scenes this method makes use of the standard Python's zlib and base64 libraries.\n\n    *Examples:*\n\n    >>> n = 0 # <- ignore this, it's a fix for Pycharm (not fixable using ignore comments)\n    >>> # \"original\" will be a string with 169 chars:\n    >>> original = ' '.join(['word n{}'.format(n) for n in range(20)])\n    >>> # \"compressed\" will be a string of 88 chars\n    >>> compressed = compress(original)\n\n    :param input_string: String to compress (must be not empty or a ValueError will be raised).\n    :type input_string: str\n    :param encoding: String encoding (default to \"utf-8\").\n    :type encoding: str\n    :param compression_level: A value between 0 (no compression) and 9 (best compression), default to 9.\n    :type compression_level: int\n    :return: Compressed string.\n    \"\"\"\n    return __StringCompressor.compress(input_string, encoding, compression_level)\n\ndef decompress(input_string: str, encoding: str='utf-8') -> str:\n    \"\"\"\n    Restore a previously compressed string (obtained using `compress()`) back to its original state.\n\n    :param input_string: String to restore.\n    :type input_string: str\n    :param encoding: Original string encoding.\n    :type encoding: str\n    :return: Decompressed string.\n    \"\"\"\n    return __StringCompressor.decompress(input_string, encoding)\n\ndef roman_encode(input_number: Union[str, int]) -> str:\n    \"\"\"\n    Convert the given number/string into a roman number.\n\n    The passed input must represents a positive integer in the range 1-3999 (inclusive).\n\n    Why this limit? You may be wondering:\n\n    1. zero is forbidden since there is no related representation in roman numbers\n    2. the upper bound 3999 is due to the limitation in the ascii charset    (the higher quantity sign displayable in ascii is \"M\" which is equal to 1000, therefore based on    roman numbers rules we can use 3 times M to reach 3000 but we can't go any further in thousands without    special \"boxed chars\").\n\n    *Examples:*\n\n    >>> roman_encode(37) # returns 'XXXVIII'\n    >>> roman_encode('2020') # returns 'MMXX'\n\n    :param input_number: An integer or a string to be converted.\n    :type input_number: Union[str, int]\n    :return: Roman number string.\n    \"\"\"\n    return __RomanNumbers.encode(input_number)\n\ndef roman_decode(input_string: str) -> int:\n    \"\"\"\n    Decode a roman number string into an integer if the provided string is valid.\n\n    *Example:*\n\n    >>> roman_decode('VII') # returns 7\n\n    :param input_string: (Assumed) Roman number\n    :type input_string: str\n    :return: Integer value\n    \"\"\"\n    return __RomanNumbers.decode(input_string)",
    "string_utils/validation.py": "__all__ = ['is_string', 'is_full_string', 'is_number', 'is_integer', 'is_decimal', 'is_url', 'is_email', 'is_credit_card', 'is_camel_case', 'is_snake_case', 'is_json', 'is_uuid', 'is_ip_v4', 'is_ip_v6', 'is_ip', 'is_isbn_10', 'is_isbn_13', 'is_isbn', 'is_palindrome', 'is_pangram', 'is_isogram', 'is_slug', 'contains_html', 'words_count']\nimport json\nimport string\nfrom typing import Any, Optional, List\nfrom ._regex import *\nfrom .errors import InvalidInputError\n\nclass __ISBNChecker:\n\n    def __init__(self, input_string: str, normalize: bool=True):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n        self.input_string = input_string.replace('-', '') if normalize else input_string\n\n    def is_isbn_13(self) -> bool:\n        if len(self.input_string) == 13:\n            product = 0\n            try:\n                for index, digit in enumerate(self.input_string):\n                    weight = 1 if index % 2 == 0 else 3\n                    product += int(digit) * weight\n                return product % 10 == 0\n            except ValueError:\n                pass\n        return False\n\n    def is_isbn_10(self) -> bool:\n        if len(self.input_string) == 10:\n            product = 0\n            try:\n                for index, digit in enumerate(self.input_string):\n                    product += int(digit) * (index + 1)\n                return product % 11 == 0\n            except ValueError:\n                pass\n        return False\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise InvalidInputError(input_string)\n    return NUMBER_RE.match(input_string) is not None\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    return is_number(input_string) and '.' not in input_string\n\ndef is_decimal(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents a decimal or not.\n\n    A decimal may be signed or unsigned or use a \"scientific notation\".\n\n    >>> is_decimal('42.0') # returns true\n    >>> is_decimal('42') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    return is_number(input_string) and '.' in input_string\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]]=None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n    valid = URL_RE.match(input_string) is not None\n    if allowed_schemes:\n        return valid and any([input_string.startswith(s) for s in allowed_schemes])\n    return valid\n\ndef is_email(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string) or len(input_string) > 320 or input_string.startswith('.'):\n        return False\n    try:\n        head, tail = input_string.split('@')\n        if len(head) > 64 or len(tail) > 255 or head.endswith('.') or ('..' in head):\n            return False\n        head = head.replace('\\\\ ', '')\n        if head.startswith('\"') and head.endswith('\"'):\n            head = head.replace(' ', '')[1:-1]\n        return EMAIL_RE.match(head + '@' + tail) is not None\n    except ValueError:\n        if ESCAPED_AT_SIGN.search(input_string) is not None:\n            return is_email(ESCAPED_AT_SIGN.sub('a', input_string))\n        return False\n\ndef is_credit_card(input_string: Any, card_type: str=None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n    if card_type:\n        if card_type not in CREDIT_CARDS:\n            raise KeyError('Invalid card type \"{}\". Valid types are: {}'.format(card_type, ', '.join(CREDIT_CARDS.keys())))\n        return CREDIT_CARDS[card_type].match(input_string) is not None\n    for c in CREDIT_CARDS:\n        if CREDIT_CARDS[c].match(input_string) is not None:\n            return True\n    return False\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and CAMEL_CASE_TEST_RE.match(input_string) is not None\n\ndef is_json(input_string: Any) -> bool:\n    \"\"\"\n    Check if a string is a valid json.\n\n    *Examples:*\n\n    >>> is_json('{\"name\": \"Peter\"}') # returns true\n    >>> is_json('[1, 2, 3]') # returns true\n    >>> is_json('{nope}') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if json, false otherwise\n    \"\"\"\n    if is_full_string(input_string) and JSON_WRAPPER_RE.match(input_string) is not None:\n        try:\n            return isinstance(json.loads(input_string), (dict, list))\n        except (TypeError, ValueError, OverflowError):\n            pass\n    return False\n\ndef is_uuid(input_string: Any, allow_hex: bool=False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    s = str(input_string)\n    if allow_hex:\n        return UUID_HEX_OK_RE.match(s) is not None\n    return UUID_RE.match(s) is not None\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string) or SHALLOW_IP_V4_RE.match(input_string) is None:\n        return False\n    for token in input_string.split('.'):\n        if not 0 <= int(token) <= 255:\n            return False\n    return True\n\ndef is_ip_v6(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v6.\n\n    *Examples:*\n\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:?') # returns false (invalid \"?\")\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if a v6 ip, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and IP_V6_RE.match(input_string) is not None\n\ndef is_ip(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip (either v4 or v6).\n\n    *Examples:*\n\n    >>> is_ip('255.200.100.75') # returns true\n    >>> is_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip('1.2.3') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip, false otherwise.\n    \"\"\"\n    return is_ip_v6(input_string) or is_ip_v4(input_string)\n\ndef is_palindrome(input_string: Any, ignore_spaces: bool=False, ignore_case: bool=False) -> bool:\n    \"\"\"\n    Checks if the string is a palindrome (https://en.wikipedia.org/wiki/Palindrome).\n\n    *Examples:*\n\n    >>> is_palindrome('LOL') # returns true\n    >>> is_palindrome('Lol') # returns false\n    >>> is_palindrome('Lol', ignore_case=True) # returns true\n    >>> is_palindrome('ROTFL') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param ignore_spaces: False if white spaces matter (default), true otherwise.\n    :type ignore_spaces: bool\n    :param ignore_case: False if char case matters (default), true otherwise.\n    :type ignore_case: bool\n    :return: True if the string is a palindrome (like \"otto\", or \"i topi non avevano nipoti\" if strict=False),    False otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n    if ignore_spaces:\n        input_string = SPACES_RE.sub('', input_string)\n    string_len = len(input_string)\n    for index in range(string_len):\n        head_char = input_string[index]\n        tail_char = input_string[string_len - index - 1]\n        if ignore_case:\n            head_char = head_char.lower()\n            tail_char = tail_char.lower()\n        if head_char != tail_char:\n            return False\n    return True\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n    return set(SPACES_RE.sub('', input_string)).issuperset(set(string.ascii_lowercase))\n\ndef is_isogram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    \"\"\"\n    return is_full_string(input_string) and len(set(input_string)) == len(input_string)\n\ndef is_slug(input_string: Any, separator: str='-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n    rex = '^([a-z\\\\d]+' + re.escape(separator) + '*?)*[a-z\\\\d]$'\n    return re.match(rex, input_string) is not None\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return HTML_RE.search(input_string) is not None\n\ndef words_count(input_string: str) -> int:\n    \"\"\"\n    Returns the number of words contained into the given string.\n\n    This method is smart, it does consider only sequence of one or more letter and/or numbers\n    as \"words\", so a string like this: \"! @ # % ... []\" will return zero!\n    Moreover it is aware of punctuation, so the count for a string like \"one,two,three.stop\"\n    will be 4 not 1 (even if there are no spaces in the string).\n\n    *Examples:*\n\n    >>> words_count('hello world') # returns 2\n    >>> words_count('one,two,three.stop') # returns 4\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: Number of words.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return len(WORDS_COUNT_RE.findall(input_string))\n\ndef is_isbn_10(input_string: str, normalize: bool=True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN 10 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_10('1506715214') # returns true\n    >>> is_isbn_10('150-6715214') # returns true\n    >>> is_isbn_10('150-6715214', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN 10, false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_10()\n\ndef is_isbn_13(input_string: str, normalize: bool=True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN 13 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_13('9780312498580') # returns true\n    >>> is_isbn_13('978-0312498580') # returns true\n    >>> is_isbn_13('978-0312498580', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN 13, false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_13()\n\ndef is_isbn(input_string: str, normalize: bool=True) -> bool:\n    \"\"\"\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn('9780312498580') # returns true\n    >>> is_isbn('1506715214') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens (\"-\") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    \"\"\"\n    checker = __ISBNChecker(input_string, normalize)\n    return checker.is_isbn_13() or checker.is_isbn_10()",
    "string_utils/errors.py": "from typing import Any\n\nclass InvalidInputError(TypeError):\n    \"\"\"\n    Custom error raised when received object is not a string as expected.\n    \"\"\""
  },
  "call_tree": {
    "tests/test_snake_case_to_camel.py:SnakeCaseToCamelTestCase:test_cannot_handle_non_string_objects": {
      "string_utils/manipulation.py:snake_case_to_camel": {
        "string_utils/validation.py:is_string": {},
        "string_utils/errors.py:InvalidInputError:__init__": {}
      }
    },
    "tests/test_snake_case_to_camel.py:SnakeCaseToCamelTestCase:test_returns_camel_case_from_correct_snake_case": {
      "string_utils/manipulation.py:snake_case_to_camel": {
        "string_utils/validation.py:is_string": {},
        "string_utils/validation.py:is_snake_case": {
          "string_utils/validation.py:is_full_string": {
            "string_utils/validation.py:is_string": {}
          }
        },
        "string_utils/validation.py:is_full_string": {
          "string_utils/validation.py:is_string": {}
        }
      }
    },
    "tests/test_snake_case_to_camel.py:SnakeCaseToCamelTestCase:test_returns_original_string_if_not_snake_case": {
      "string_utils/manipulation.py:snake_case_to_camel": {
        "string_utils/validation.py:is_string": {},
        "string_utils/validation.py:is_snake_case": {
          "string_utils/validation.py:is_full_string": {
            "string_utils/validation.py:is_string": {}
          }
        }
      }
    },
    "tests/test_snake_case_to_camel.py:SnakeCaseToCamelTestCase:test_should_consider_custom_separator": {
      "string_utils/manipulation.py:snake_case_to_camel": {
        "string_utils/validation.py:is_string": {},
        "string_utils/validation.py:is_snake_case": {
          "string_utils/validation.py:is_full_string": {
            "string_utils/validation.py:is_string": {}
          }
        },
        "string_utils/validation.py:is_full_string": {
          "string_utils/validation.py:is_string": {}
        }
      }
    },
    "tests/test_snake_case_to_camel.py:SnakeCaseToCamelTestCase:test_should_not_capitalize_first_letter_if_specified": {
      "string_utils/manipulation.py:snake_case_to_camel": {
        "string_utils/validation.py:is_string": {},
        "string_utils/validation.py:is_snake_case": {
          "string_utils/validation.py:is_full_string": {
            "string_utils/validation.py:is_string": {}
          }
        },
        "string_utils/validation.py:is_full_string": {
          "string_utils/validation.py:is_string": {}
        }
      }
    }
  }
}