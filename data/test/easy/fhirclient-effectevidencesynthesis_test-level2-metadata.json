{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-effectevidencesynthesis_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/effectevidencesynthesis_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import effectevidencesynthesis\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass EffectEvidenceSynthesisTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"EffectEvidenceSynthesis\", js[\"resourceType\"])\n        return effectevidencesynthesis.EffectEvidenceSynthesis(js)\n    \n    def testEffectEvidenceSynthesis1(self):\n        inst = self.instantiate_from(\"effectevidencesynthesis-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a EffectEvidenceSynthesis instance\")\n        self.implEffectEvidenceSynthesis1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"EffectEvidenceSynthesis\", js[\"resourceType\"])\n        inst2 = effectevidencesynthesis.EffectEvidenceSynthesis(js)\n        self.implEffectEvidenceSynthesis1(inst2)\n    \n    def implEffectEvidenceSynthesis1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/effectevidencesynthesis.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass EffectEvidenceSynthesis(domainresource.DomainResource):\n    \"\"\" A quantified estimate of effect based on a body of evidence.\n    \n    The EffectEvidenceSynthesis resource describes the difference in an outcome\n    between exposures states in a population where the effect estimate is\n    derived from a combination of research studies.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesis\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the effect evidence synthesis was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.certainty = None\n        \"\"\" How certain is the effect.\n        List of `EffectEvidenceSynthesisCertainty` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the effect evidence synthesis.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectEstimate = None\n        \"\"\" What was the estimated effect.\n        List of `EffectEvidenceSynthesisEffectEstimate` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the effect evidence synthesis is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.exposure = None\n        \"\"\" What exposure?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.exposureAlternative = None\n        \"\"\" What comparison exposure?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the effect evidence synthesis.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for effect evidence synthesis (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the effect evidence synthesis was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this effect evidence synthesis (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.outcome = None\n        \"\"\" What outcome?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.population = None\n        \"\"\" What population?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.resultsByExposure = None\n        \"\"\" What was the result per exposure?.\n        List of `EffectEvidenceSynthesisResultsByExposure` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.sampleSize = None\n        \"\"\" What sample size was involved?.\n        Type `EffectEvidenceSynthesisSampleSize` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.studyType = None\n        \"\"\" Type of study.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.synthesisType = None\n        \"\"\" Type of synthesis.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this effect evidence synthesis (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" The category of the EffectEvidenceSynthesis, such as Education,\n        Treatment, Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this effect evidence synthesis,\n        represented as a URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the effect evidence synthesis.\n        Type `str`. \"\"\"\n        \n        super(EffectEvidenceSynthesis, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesis, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"certainty\", \"certainty\", EffectEvidenceSynthesisCertainty, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectEstimate\", \"effectEstimate\", EffectEvidenceSynthesisEffectEstimate, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"exposure\", \"exposure\", fhirreference.FHIRReference, False, None, True),\n            (\"exposureAlternative\", \"exposureAlternative\", fhirreference.FHIRReference, False, None, True),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"outcome\", \"outcome\", fhirreference.FHIRReference, False, None, True),\n            (\"population\", \"population\", fhirreference.FHIRReference, False, None, True),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"resultsByExposure\", \"resultsByExposure\", EffectEvidenceSynthesisResultsByExposure, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"sampleSize\", \"sampleSize\", EffectEvidenceSynthesisSampleSize, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"studyType\", \"studyType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"synthesisType\", \"synthesisType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass EffectEvidenceSynthesisCertainty(backboneelement.BackboneElement):\n    \"\"\" How certain is the effect.\n    \n    A description of the certainty of the effect estimate.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisCertainty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.certaintySubcomponent = None\n        \"\"\" A component that contributes to the overall certainty.\n        List of `EffectEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.rating = None\n        \"\"\" Certainty rating.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisCertainty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertainty, self).elementProperties()\n        js.extend([\n            (\"certaintySubcomponent\", \"certaintySubcomponent\", EffectEvidenceSynthesisCertaintyCertaintySubcomponent, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"rating\", \"rating\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisCertaintyCertaintySubcomponent(backboneelement.BackboneElement):\n    \"\"\" A component that contributes to the overall certainty.\n    \n    A description of a component of the overall certainty.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisCertaintyCertaintySubcomponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.rating = None\n        \"\"\" Subcomponent certainty rating.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of subcomponent of certainty rating.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).elementProperties()\n        js.extend([\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"rating\", \"rating\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisEffectEstimate(backboneelement.BackboneElement):\n    \"\"\" What was the estimated effect.\n    \n    The estimated effect of the exposure variant.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisEffectEstimate\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of effect estimate.\n        Type `str`. \"\"\"\n        \n        self.precisionEstimate = None\n        \"\"\" How precise the estimate is.\n        List of `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of efffect estimate.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.unitOfMeasure = None\n        \"\"\" What unit is the outcome described in?.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Point estimate.\n        Type `float`. \"\"\"\n        \n        self.variantState = None\n        \"\"\" Variant exposure states.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisEffectEstimate, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimate, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"precisionEstimate\", \"precisionEstimate\", EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"unitOfMeasure\", \"unitOfMeasure\", codeableconcept.CodeableConcept, False, None, False),\n            (\"value\", \"value\", float, False, None, False),\n            (\"variantState\", \"variantState\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(backboneelement.BackboneElement):\n    \"\"\" How precise the estimate is.\n    \n    A description of the precision of the estimate for the effect.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisEffectEstimatePrecisionEstimate\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.from_fhir = None\n        \"\"\" Lower bound.\n        Type `float`. \"\"\"\n        \n        self.level = None\n        \"\"\" Level of confidence interval.\n        Type `float`. \"\"\"\n        \n        self.to = None\n        \"\"\" Upper bound.\n        Type `float`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of precision estimate.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).elementProperties()\n        js.extend([\n            (\"from_fhir\", \"from\", float, False, None, False),\n            (\"level\", \"level\", float, False, None, False),\n            (\"to\", \"to\", float, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisResultsByExposure(backboneelement.BackboneElement):\n    \"\"\" What was the result per exposure?.\n    \n    A description of the results for each exposure considered in the effect\n    estimate.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisResultsByExposure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of results by exposure.\n        Type `str`. \"\"\"\n        \n        self.exposureState = None\n        \"\"\" exposure | exposure-alternative.\n        Type `str`. \"\"\"\n        \n        self.riskEvidenceSynthesis = None\n        \"\"\" Risk evidence synthesis.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.variantState = None\n        \"\"\" Variant exposure states.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisResultsByExposure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisResultsByExposure, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"exposureState\", \"exposureState\", str, False, None, False),\n            (\"riskEvidenceSynthesis\", \"riskEvidenceSynthesis\", fhirreference.FHIRReference, False, None, True),\n            (\"variantState\", \"variantState\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisSampleSize(backboneelement.BackboneElement):\n    \"\"\" What sample size was involved?.\n    \n    A description of the size of the sample involved in the synthesis.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisSampleSize\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of sample size.\n        Type `str`. \"\"\"\n        \n        self.numberOfParticipants = None\n        \"\"\" How many participants?.\n        Type `int`. \"\"\"\n        \n        self.numberOfStudies = None\n        \"\"\" How many studies?.\n        Type `int`. \"\"\"\n        \n        super(EffectEvidenceSynthesisSampleSize, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisSampleSize, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"numberOfParticipants\", \"numberOfParticipants\", int, False, None, False),\n            (\"numberOfStudies\", \"numberOfStudies\", int, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n"
  },
  "GT_src_dict": {
    "fhirclient/models/effectevidencesynthesis.py": {
      "EffectEvidenceSynthesis.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an EffectEvidenceSynthesis object, representing a quantified estimate of effect based on a body of evidence derived from a combination of research studies. This constructor sets various properties related to the synthesis including approval date, authors, certainty, effect estimates, exposure details, and more.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the object's attributes.\n- strict (bool, optional): When set to True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- approvalDate: FHIRDate of the approval date of the synthesis.\n- author: List of authors (ContactDetail instances).\n- certainty: List of EffectEvidenceSynthesisCertainty instances describing the certainty of the effect.\n- contact: List of publisher contact details (ContactDetail instances).\n- copyright: String for use and/or publishing restrictions.\n- date: FHIRDateTime of the last change to the synthesis.\n- description: Natural language description of the synthesis.\n- editor: List of editors (ContactDetail instances).\n- effectEstimate: List of effect estimates (EffectEvidenceSynthesisEffectEstimate instances).\n- effectivePeriod: Period during which the synthesis is expected to be relevant.\n- endorser: List of endorsers (ContactDetail instances).\n- exposure: The exposure being studied (FHIRReference).\n- exposureAlternative: Alternative exposure being compared (FHIRReference).\n- identifier: List of identifiers for this synthesis (Identifier instances).\n- jurisdiction: List of jurisdictions (CodeableConcept instances).\n- lastReviewDate: FHIRDate of the last review of the synthesis.\n- name: Computer-friendly name for the synthesis.\n- note: List of annotations for notes or explanations (Annotation instances).\n- outcome: The outcome being assessed (FHIRReference).\n- population: The population studied (FHIRReference).\n- publisher: Publisher name (organization or individual).\n- relatedArtifact: List of related artifacts (RelatedArtifact instances).\n- resultsByExposure: Results categorized by exposure (EffectEvidenceSynthesisResultsByExposure instances).\n- reviewer: List of reviewers (ContactDetail instances).\n- sampleSize: Information about the sample size involved (EffectEvidenceSynthesisSampleSize).\n- status: Current status of the synthesis (e.g., draft, active, retired, unknown).\n- studyType: Type of study conducted (CodeableConcept).\n- synthesisType: Type of synthesis performed (CodeableConcept).\n- title: Human-friendly name for the synthesis.\n- topic: List of categories related to the synthesis (CodeableConcept instances).\n- url: Canonical URI identifier for the synthesis.\n- useContext: Context for which the synthesis content is intended (UsageContext instances).\n- version: Business version of the synthesis.\n\nThe object also inherits properties from `domainresource.DomainResource`, requiring a valid FHIR resource structure.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the effect evidence synthesis was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.certainty = None\n        ' How certain is the effect.\\n        List of `EffectEvidenceSynthesisCertainty` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the effect evidence synthesis.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectEstimate = None\n        ' What was the estimated effect.\\n        List of `EffectEvidenceSynthesisEffectEstimate` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the effect evidence synthesis is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.exposure = None\n        ' What exposure?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.exposureAlternative = None\n        ' What comparison exposure?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the effect evidence synthesis.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for effect evidence synthesis (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the effect evidence synthesis was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.name = None\n        ' Name for this effect evidence synthesis (computer friendly).\\n        Type `str`. '\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.outcome = None\n        ' What outcome?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.population = None\n        ' What population?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.resultsByExposure = None\n        ' What was the result per exposure?.\\n        List of `EffectEvidenceSynthesisResultsByExposure` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.sampleSize = None\n        ' What sample size was involved?.\\n        Type `EffectEvidenceSynthesisSampleSize` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.studyType = None\n        ' Type of study.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.synthesisType = None\n        ' Type of synthesis.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this effect evidence synthesis (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' The category of the EffectEvidenceSynthesis, such as Education,\\n        Treatment, Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.url = None\n        ' Canonical identifier for this effect evidence synthesis,\\n        represented as a URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the effect evidence synthesis.\\n        Type `str`. '\n        super(EffectEvidenceSynthesis, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an EffectEvidenceSynthesis object, representing a quantified estimate of effect based on a body of evidence derived from a combination of research studies. This constructor sets various properties related to the synthesis including approval date, authors, certainty, effect estimates, exposure details, and more.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the object's attributes.\n- strict (bool, optional): When set to True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- approvalDate: FHIRDate of the approval date of the synthesis.\n- author: List of authors (ContactDetail instances).\n- certainty: List of EffectEvidenceSynthesisCertainty instances describing the certainty of the effect.\n- contact: List of publisher contact details (ContactDetail instances).\n- copyright: String for use and/or publishing restrictions.\n- date: FHIRDateTime of the last change to the synthesis.\n- description: Natural language description of the synthesis.\n- editor: List of editors (ContactDetail instances).\n- effectEstimate: List of effect estimates (EffectEvidenceSynthesisEffectEstimate instances).\n- effectivePeriod: Period during which the synthesis is expected to be relevant.\n- endorser: List of endorsers (ContactDetail instances).\n- exposure: The exposure being studied (FHIRReference).\n- exposureAlternative: Alternative exposure being compared (FHIRReference).\n- identifier: List of identifiers for this synthesis (Identifier instances).\n- jurisdiction: List of jurisdictions (CodeableConcept instances).\n- lastReviewDate: FHIRDate of the last review of the synthesis.\n- name: Computer-friendly name for the synthesis.\n- note: List of annotations for notes or explanations (Annotation instances).\n- outcome: The outcome being assessed (FHIRReference).\n- population: The population studied (FHIRReference).\n- publisher: Publisher name (organization or individual).\n- relatedArtifact: List of related artifacts (RelatedArtifact instances).\n- resultsByExposure: Results categorized by exposure (EffectEvidenceSynthesisResultsByExposure instances).\n- reviewer: List of reviewers (ContactDetail instances).\n- sampleSize: Information about the sample size involved (EffectEvidenceSynthesisSampleSize).\n- status: Current status of the synthesis (e.g., draft, active, retired, unknown).\n- studyType: Type of study conducted (CodeableConcept).\n- synthesisType: Type of synthesis performed (CodeableConcept).\n- title: Human-friendly name for the synthesis.\n- topic: List of categories related to the synthesis (CodeableConcept instances).\n- url: Canonical URI identifier for the synthesis.\n- useContext: Context for which the synthesis content is intended (UsageContext instances).\n- version: Business version of the synthesis.\n\nThe object also inherits properties from `domainresource.DomainResource`, requiring a valid FHIR resource structure.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class EffectEvidenceSynthesis(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined in the class, serves as the value for this key, allowing for correct identification of the resource type during serialization.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including all properties from the superclass and the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined in the class, serves as the value for this key, allowing for correct identification of the resource type during serialization.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including all properties from the superclass and the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If provided, it will populate the resource fields accordingly.\n- strict (bool, optional): If set to True (default), invalid values raise a TypeError during initialization. If set to False, the resource will allow invalid variables without raising an error.\n\nAttributes initialized:\n- contained: Holds a list of inline resources represented as `Resource` items in JSON.\n- extension: Holds a list of additional content defined by implementations represented as `Extension` items in JSON.\n- modifierExtension: Holds a list of extensions that cannot be ignored, also represented as `Extension` items in JSON.\n- text: Holds the text summary of the resource for human interpretation, represented as a `Narrative` in JSON.\n\nThe class inherits from `resource.Resource`, allowing it to utilize functionality defined there, particularly in the constructor called via `super()`.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If provided, it will populate the resource fields accordingly.\n- strict (bool, optional): If set to True (default), invalid values raise a TypeError during initialization. If set to False, the resource will allow invalid variables without raising an error.\n\nAttributes initialized:\n- contained: Holds a list of inline resources represented as `Resource` items in JSON.\n- extension: Holds a list of additional content defined by implementations represented as `Extension` items in JSON.\n- modifierExtension: Holds a list of extensions that cannot be ignored, also represented as `Extension` items in JSON.\n- text: Holds the text summary of the resource for human interpretation, represented as a `Narrative` in JSON.\n\nThe class inherits from `resource.Resource`, allowing it to utilize functionality defined there, particularly in the constructor called via `super()`.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that all required properties are present and have the correct types before returning the serialized output.\n\nRaises `FHIRValidationError` if there are properties with incorrect types or if any required properties are missing. The method relies on `elementProperties()` to determine the properties to be serialized, and it checks types using the `_matches_type()` method. Additionally, it tracks non-optional properties to ensure they are included in the final output.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representing the instance.\n\nSide Effects:\n    May raise `FHIRValidationError` if validation checks fail, detailing which properties are problematic.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that all required properties are present and have the correct types before returning the serialized output.\n\nRaises `FHIRValidationError` if there are properties with incorrect types or if any required properties are missing. The method relies on `elementProperties()` to determine the properties to be serialized, and it checks types using the `_matches_type()` method. Additionally, it tracks non-optional properties to ensure they are included in the final output.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representing the instance.\n\nSide Effects:\n    May raise `FHIRValidationError` if validation checks fail, detailing which properties are problematic.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/effectevidencesynthesis.py": {
        "EffectEvidenceSynthesis.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(EffectEvidenceSynthesis, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('certainty', 'certainty', EffectEvidenceSynthesisCertainty, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectEstimate', 'effectEstimate', EffectEvidenceSynthesisEffectEstimate, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('exposure', 'exposure', fhirreference.FHIRReference, False, None, True), ('exposureAlternative', 'exposureAlternative', fhirreference.FHIRReference, False, None, True), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('outcome', 'outcome', fhirreference.FHIRReference, False, None, True), ('population', 'population', fhirreference.FHIRReference, False, None, True), ('publisher', 'publisher', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('resultsByExposure', 'resultsByExposure', EffectEvidenceSynthesisResultsByExposure, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('sampleSize', 'sampleSize', EffectEvidenceSynthesisSampleSize, False, None, False), ('status', 'status', str, False, None, True), ('studyType', 'studyType', codeableconcept.CodeableConcept, False, None, False), ('synthesisType', 'synthesisType', codeableconcept.CodeableConcept, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class EffectEvidenceSynthesis(domainresource.DomainResource):"
        }
      },
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:testEffectEvidenceSynthesis1": {
      "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:instantiate_from": {
        "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:implEffectEvidenceSynthesis1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:instantiate_from": {
      "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-effectevidencesynthesis_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 effectevidencesynthesis.py\n        \u2502   \u2514\u2500\u2500 EffectEvidenceSynthesis.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe EffectEvidenceSynthesis module is designed to validate, process, and work with FHIR-compliant EffectEvidenceSynthesis resources, which are used to represent the synthesis of clinical evidence regarding the impact of interventions. It enables the instantiation, testing, and conversion of these resources into JSON, ensuring compliance with FHIR standards and facilitating interoperability between healthcare applications. The module provides functionality for verifying resource integrity, extracting and validating key clinical data elements, and handling structured metadata. By automating the handling of complex FHIR resources, this module simplifies development workflows and promotes the reliable exchange of critical healthcare evidence among systems.\n\n## FILE 1: fhirclient/models/effectevidencesynthesis.py\n\n- CLASS METHOD: EffectEvidenceSynthesis.__init__\n  - CLASS SIGNATURE: class EffectEvidenceSynthesis(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an EffectEvidenceSynthesis object, representing a quantified estimate of effect based on a body of evidence derived from a combination of research studies. This constructor sets various properties related to the synthesis including approval date, authors, certainty, effect estimates, exposure details, and more.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the object's attributes.\n- strict (bool, optional): When set to True (default), invalid variables will raise a TypeError during initialization.\n\nAttributes:\n- approvalDate: FHIRDate of the approval date of the synthesis.\n- author: List of authors (ContactDetail instances).\n- certainty: List of EffectEvidenceSynthesisCertainty instances describing the certainty of the effect.\n- contact: List of publisher contact details (ContactDetail instances).\n- copyright: String for use and/or publishing restrictions.\n- date: FHIRDateTime of the last change to the synthesis.\n- description: Natural language description of the synthesis.\n- editor: List of editors (ContactDetail instances).\n- effectEstimate: List of effect estimates (EffectEvidenceSynthesisEffectEstimate instances).\n- effectivePeriod: Period during which the synthesis is expected to be relevant.\n- endorser: List of endorsers (ContactDetail instances).\n- exposure: The exposure being studied (FHIRReference).\n- exposureAlternative: Alternative exposure being compared (FHIRReference).\n- identifier: List of identifiers for this synthesis (Identifier instances).\n- jurisdiction: List of jurisdictions (CodeableConcept instances).\n- lastReviewDate: FHIRDate of the last review of the synthesis.\n- name: Computer-friendly name for the synthesis.\n- note: List of annotations for notes or explanations (Annotation instances).\n- outcome: The outcome being assessed (FHIRReference).\n- population: The population studied (FHIRReference).\n- publisher: Publisher name (organization or individual).\n- relatedArtifact: List of related artifacts (RelatedArtifact instances).\n- resultsByExposure: Results categorized by exposure (EffectEvidenceSynthesisResultsByExposure instances).\n- reviewer: List of reviewers (ContactDetail instances).\n- sampleSize: Information about the sample size involved (EffectEvidenceSynthesisSampleSize).\n- status: Current status of the synthesis (e.g., draft, active, retired, unknown).\n- studyType: Type of study conducted (CodeableConcept).\n- synthesisType: Type of synthesis performed (CodeableConcept).\n- title: Human-friendly name for the synthesis.\n- topic: List of categories related to the synthesis (CodeableConcept instances).\n- url: Canonical URI identifier for the synthesis.\n- useContext: Context for which the synthesis content is intended (UsageContext instances).\n- version: Business version of the synthesis.\n\nThe object also inherits properties from `domainresource.DomainResource`, requiring a valid FHIR resource structure.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined in the class, serves as the value for this key, allowing for correct identification of the resource type during serialization.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including all properties from the superclass and the `resourceType`.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If provided, it will populate the resource fields accordingly.\n- strict (bool, optional): If set to True (default), invalid values raise a TypeError during initialization. If set to False, the resource will allow invalid variables without raising an error.\n\nAttributes initialized:\n- contained: Holds a list of inline resources represented as `Resource` items in JSON.\n- extension: Holds a list of additional content defined by implementations represented as `Extension` items in JSON.\n- modifierExtension: Holds a list of extensions that cannot be ignored, also represented as `Extension` items in JSON.\n- text: Holds the text summary of the resource for human interpretation, represented as a `Narrative` in JSON.\n\nThe class inherits from `resource.Resource`, allowing it to utilize functionality defined there, particularly in the constructor called via `super()`.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that all required properties are present and have the correct types before returning the serialized output.\n\nRaises `FHIRValidationError` if there are properties with incorrect types or if any required properties are missing. The method relies on `elementProperties()` to determine the properties to be serialized, and it checks types using the `_matches_type()` method. Additionally, it tracks non-optional properties to ensure they are included in the final output.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representing the instance.\n\nSide Effects:\n    May raise `FHIRValidationError` if validation checks fail, detailing which properties are problematic.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/effectevidencesynthesis.py": "from . import domainresource\n\nclass EffectEvidenceSynthesis(domainresource.DomainResource):\n    \"\"\" A quantified estimate of effect based on a body of evidence.\n    \n    The EffectEvidenceSynthesis resource describes the difference in an outcome\n    between exposures states in a population where the effect estimate is\n    derived from a combination of research studies.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesis'\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesis, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('certainty', 'certainty', EffectEvidenceSynthesisCertainty, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectEstimate', 'effectEstimate', EffectEvidenceSynthesisEffectEstimate, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('exposure', 'exposure', fhirreference.FHIRReference, False, None, True), ('exposureAlternative', 'exposureAlternative', fhirreference.FHIRReference, False, None, True), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('outcome', 'outcome', fhirreference.FHIRReference, False, None, True), ('population', 'population', fhirreference.FHIRReference, False, None, True), ('publisher', 'publisher', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('resultsByExposure', 'resultsByExposure', EffectEvidenceSynthesisResultsByExposure, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('sampleSize', 'sampleSize', EffectEvidenceSynthesisSampleSize, False, None, False), ('status', 'status', str, False, None, True), ('studyType', 'studyType', codeableconcept.CodeableConcept, False, None, False), ('synthesisType', 'synthesisType', codeableconcept.CodeableConcept, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass EffectEvidenceSynthesisCertainty(backboneelement.BackboneElement):\n    \"\"\" How certain is the effect.\n    \n    A description of the certainty of the effect estimate.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisCertainty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.certaintySubcomponent = None\n        ' A component that contributes to the overall certainty.\\n        List of `EffectEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.rating = None\n        ' Certainty rating.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisCertainty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertainty, self).elementProperties()\n        js.extend([('certaintySubcomponent', 'certaintySubcomponent', EffectEvidenceSynthesisCertaintyCertaintySubcomponent, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('rating', 'rating', codeableconcept.CodeableConcept, True, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisCertaintyCertaintySubcomponent(backboneelement.BackboneElement):\n    \"\"\" A component that contributes to the overall certainty.\n    \n    A description of a component of the overall certainty.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.rating = None\n        ' Subcomponent certainty rating.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of subcomponent of certainty rating.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).elementProperties()\n        js.extend([('note', 'note', annotation.Annotation, True, None, False), ('rating', 'rating', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisEffectEstimate(backboneelement.BackboneElement):\n    \"\"\" What was the estimated effect.\n    \n    The estimated effect of the exposure variant.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisEffectEstimate'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of effect estimate.\\n        Type `str`. '\n        self.precisionEstimate = None\n        ' How precise the estimate is.\\n        List of `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of efffect estimate.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.unitOfMeasure = None\n        ' What unit is the outcome described in?.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' Point estimate.\\n        Type `float`. '\n        self.variantState = None\n        ' Variant exposure states.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisEffectEstimate, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimate, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('precisionEstimate', 'precisionEstimate', EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('unitOfMeasure', 'unitOfMeasure', codeableconcept.CodeableConcept, False, None, False), ('value', 'value', float, False, None, False), ('variantState', 'variantState', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(backboneelement.BackboneElement):\n    \"\"\" How precise the estimate is.\n    \n    A description of the precision of the estimate for the effect.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.from_fhir = None\n        ' Lower bound.\\n        Type `float`. '\n        self.level = None\n        ' Level of confidence interval.\\n        Type `float`. '\n        self.to = None\n        ' Upper bound.\\n        Type `float`. '\n        self.type = None\n        ' Type of precision estimate.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).elementProperties()\n        js.extend([('from_fhir', 'from', float, False, None, False), ('level', 'level', float, False, None, False), ('to', 'to', float, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisResultsByExposure(backboneelement.BackboneElement):\n    \"\"\" What was the result per exposure?.\n    \n    A description of the results for each exposure considered in the effect\n    estimate.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisResultsByExposure'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of results by exposure.\\n        Type `str`. '\n        self.exposureState = None\n        ' exposure | exposure-alternative.\\n        Type `str`. '\n        self.riskEvidenceSynthesis = None\n        ' Risk evidence synthesis.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.variantState = None\n        ' Variant exposure states.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisResultsByExposure, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisResultsByExposure, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('exposureState', 'exposureState', str, False, None, False), ('riskEvidenceSynthesis', 'riskEvidenceSynthesis', fhirreference.FHIRReference, False, None, True), ('variantState', 'variantState', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisSampleSize(backboneelement.BackboneElement):\n    \"\"\" What sample size was involved?.\n    \n    A description of the size of the sample involved in the synthesis.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisSampleSize'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of sample size.\\n        Type `str`. '\n        self.numberOfParticipants = None\n        ' How many participants?.\\n        Type `int`. '\n        self.numberOfStudies = None\n        ' How many studies?.\\n        Type `int`. '\n        super(EffectEvidenceSynthesisSampleSize, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisSampleSize, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('numberOfParticipants', 'numberOfParticipants', int, False, None, False), ('numberOfStudies', 'numberOfStudies', int, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}"
  }
}