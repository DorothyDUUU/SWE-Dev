{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_attribution_info",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_attribution_info.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.attribution_info import AttributionInfo\n\n\nclass TestAttributionInfo(unittest.TestCase):\n    \"\"\" AttributionInfo unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testAttributionInfo(self):\n        \"\"\"\n        Test AttributionInfo\n        \"\"\"\n        model = mparticle.models.attribution_info.AttributionInfo()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/attribution_info.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass AttributionInfo(object):\n\n    def __init__(self, service_provider=None, publisher=None, campaign=None):\n        \"\"\"\n        AttributionInfo - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'service_provider': 'str',\n            'publisher': 'str',\n            'campaign': 'str'\n        }\n\n        self.attribute_map = {\n            'service_provider': 'service_provider',\n            'publisher': 'publisher',\n            'campaign': 'campaign'\n        }\n\n        self._service_provider = service_provider\n        self._publisher = publisher\n        self._campaign = campaign\n\n    @property\n    def service_provider(self):\n        \"\"\"\n        Gets the service_provider of this AttributionInfo.\n\n\n        :return: The service_provider of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._service_provider\n\n    @service_provider.setter\n    def service_provider(self, service_provider):\n        \"\"\"\n        Sets the service_provider of this AttributionInfo.\n\n\n        :param service_provider: The service_provider of this AttributionInfo.\n        :type: str\n        \"\"\"\n\n        self._service_provider = service_provider\n\n    @property\n    def publisher(self):\n        \"\"\"\n        Gets the publisher of this AttributionInfo.\n\n\n        :return: The publisher of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._publisher\n\n    @publisher.setter\n    def publisher(self, publisher):\n        \"\"\"\n        Sets the publisher of this AttributionInfo.\n\n\n        :param publisher: The publisher of this AttributionInfo.\n        :type: str\n        \"\"\"\n\n        self._publisher = publisher\n\n    @property\n    def campaign(self):\n        \"\"\"\n        Gets the campaign of this AttributionInfo.\n\n\n        :return: The campaign of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._campaign\n\n    @campaign.setter\n    def campaign(self, campaign):\n        \"\"\"\n        Sets the campaign of this AttributionInfo.\n\n\n        :param campaign: The campaign of this AttributionInfo.\n        :type: str\n        \"\"\"\n\n        self._campaign = campaign\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/attribution_info.py": {
      "AttributionInfo.__init__": {
        "code": "    def __init__(self, service_provider=None, publisher=None, campaign=None):\n        \"\"\"Initializes an instance of the AttributionInfo class, which models information related to attribution within the context of marketing events. This constructor accepts optional parameters for the service provider, publisher, and campaign, which represent the sources of attribution data.\n\n    :param service_provider: The name of the service provider responsible for the attribution (default is None).\n    :type service_provider: str\n    :param publisher: The name of the publisher associated with the attribution (default is None).\n    :type publisher: str\n    :param campaign: The name of the marketing campaign tied to the attribution (default is None).\n    :type campaign: str\n\n    Sets the instance attributes _service_provider, _publisher, and _campaign based on the provided arguments. The method also defines swagger_types and attribute_map as dictionaries that describe the expected types of the attributes and their corresponding JSON keys for serialization, respectively. These constants facilitate the use of the class in API contexts where serialization and data validation are required.\"\"\"\n        '\\n        AttributionInfo - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'service_provider': 'str', 'publisher': 'str', 'campaign': 'str'}\n        self.attribute_map = {'service_provider': 'service_provider', 'publisher': 'publisher', 'campaign': 'campaign'}\n        self._service_provider = service_provider\n        self._publisher = publisher\n        self._campaign = campaign",
        "docstring": "Initializes an instance of the AttributionInfo class, which models information related to attribution within the context of marketing events. This constructor accepts optional parameters for the service provider, publisher, and campaign, which represent the sources of attribution data.\n\n:param service_provider: The name of the service provider responsible for the attribution (default is None).\n:type service_provider: str\n:param publisher: The name of the publisher associated with the attribution (default is None).\n:type publisher: str\n:param campaign: The name of the marketing campaign tied to the attribution (default is None).\n:type campaign: str\n\nSets the instance attributes _service_provider, _publisher, and _campaign based on the provided arguments. The method also defines swagger_types and attribute_map as dictionaries that describe the expected types of the attributes and their corresponding JSON keys for serialization, respectively. These constants facilitate the use of the class in API contexts where serialization and data validation are required.",
        "signature": "def __init__(self, service_provider=None, publisher=None, campaign=None):",
        "type": "Method",
        "class_signature": "class AttributionInfo(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_attribution_info\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 attribution_info.py\n            \u2514\u2500\u2500 AttributionInfo.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates interaction with the mParticle Event API, specifically targeting the management and testing of attribution data via the `AttributionInfo` model. Its primary purpose is to enable developers to validate and handle attribution-related information within mParticle's data infrastructure, ensuring accurate mapping and tracking of user acquisition and engagement sources. By providing a structured interface and test environment, the module simplifies the process of verifying the integrity and reliability of attribution data, resolving challenges associated with integrating and validating such information in complex event-driven systems. This helps developers ensure seamless attribution tracking, reducing errors and saving time during implementation and debugging processes.\n\n## FILE 1: mparticle/models/attribution_info.py\n\n- CLASS METHOD: AttributionInfo.__init__\n  - CLASS SIGNATURE: class AttributionInfo(object):\n  - SIGNATURE: def __init__(self, service_provider=None, publisher=None, campaign=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the AttributionInfo class, which models information related to attribution within the context of marketing events. This constructor accepts optional parameters for the service provider, publisher, and campaign, which represent the sources of attribution data.\n\n:param service_provider: The name of the service provider responsible for the attribution (default is None).\n:type service_provider: str\n:param publisher: The name of the publisher associated with the attribution (default is None).\n:type publisher: str\n:param campaign: The name of the marketing campaign tied to the attribution (default is None).\n:type campaign: str\n\nSets the instance attributes _service_provider, _publisher, and _campaign based on the provided arguments. The method also defines swagger_types and attribute_map as dictionaries that describe the expected types of the attributes and their corresponding JSON keys for serialization, respectively. These constants facilitate the use of the class in API contexts where serialization and data validation are required.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/attribution_info.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass AttributionInfo(object):\n\n    @property\n    def service_provider(self):\n        \"\"\"\n        Gets the service_provider of this AttributionInfo.\n\n\n        :return: The service_provider of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._service_provider\n\n    @service_provider.setter\n    def service_provider(self, service_provider):\n        \"\"\"\n        Sets the service_provider of this AttributionInfo.\n\n\n        :param service_provider: The service_provider of this AttributionInfo.\n        :type: str\n        \"\"\"\n        self._service_provider = service_provider\n\n    @property\n    def publisher(self):\n        \"\"\"\n        Gets the publisher of this AttributionInfo.\n\n\n        :return: The publisher of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._publisher\n\n    @publisher.setter\n    def publisher(self, publisher):\n        \"\"\"\n        Sets the publisher of this AttributionInfo.\n\n\n        :param publisher: The publisher of this AttributionInfo.\n        :type: str\n        \"\"\"\n        self._publisher = publisher\n\n    @property\n    def campaign(self):\n        \"\"\"\n        Gets the campaign of this AttributionInfo.\n\n\n        :return: The campaign of this AttributionInfo.\n        :rtype: str\n        \"\"\"\n        return self._campaign\n\n    @campaign.setter\n    def campaign(self, campaign):\n        \"\"\"\n        Sets the campaign of this AttributionInfo.\n\n\n        :param campaign: The campaign of this AttributionInfo.\n        :type: str\n        \"\"\"\n        self._campaign = campaign\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_attribution_info.py:TestAttributionInfo:testAttributionInfo": {
      "mparticle/models/attribution_info.py:AttributionInfo:__init__": {}
    }
  }
}