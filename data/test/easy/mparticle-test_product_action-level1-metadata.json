{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_product_action",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_product_action.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.product_action import ProductAction\n\n\nclass TestProductAction(unittest.TestCase):\n    \"\"\" ProductAction unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testProductAction(self):\n        \"\"\"\n        Test ProductAction\n        \"\"\"\n        model = mparticle.models.product_action.ProductAction()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/product_action.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ProductAction(object):\n\n    def __init__(self, action=None, checkout_step=None, checkout_options=None, product_action_list=None, product_list_source=None, transaction_id=None, affiliation=None, total_amount=None, tax_amount=None, shipping_amount=None, coupon_code=None, products=None):\n        \"\"\"\n        ProductAction - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'action': 'str',\n            'checkout_step': 'int',\n            'checkout_options': 'str',\n            'product_action_list': 'str',\n            'product_list_source': 'str',\n            'transaction_id': 'str',\n            'affiliation': 'str',\n            'total_amount': 'float',\n            'tax_amount': 'float',\n            'shipping_amount': 'float',\n            'coupon_code': 'str',\n            'products': 'list[Product]'\n        }\n\n        self.attribute_map = {\n            'action': 'action',\n            'checkout_step': 'checkout_step',\n            'checkout_options': 'checkout_options',\n            'product_action_list': 'product_action_list',\n            'product_list_source': 'product_list_source',\n            'transaction_id': 'transaction_id',\n            'affiliation': 'affiliation',\n            'total_amount': 'total_amount',\n            'tax_amount': 'tax_amount',\n            'shipping_amount': 'shipping_amount',\n            'coupon_code': 'coupon_code',\n            'products': 'products'\n        }\n\n        self._action = action\n        self._checkout_step = checkout_step\n        self._checkout_options = checkout_options\n        self._product_action_list = product_action_list\n        self._product_list_source = product_list_source\n        self._transaction_id = transaction_id\n        self._affiliation = affiliation\n        self._total_amount = total_amount\n        self._tax_amount = tax_amount\n        self._shipping_amount = shipping_amount\n        self._coupon_code = coupon_code\n        self._products = products\n\n    @property\n    def action(self):\n        \"\"\"\n        Gets the action of this ProductAction.\n\n\n        :return: The action of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._action\n\n    @action.setter\n    def action(self, action):\n        \"\"\"\n        Sets the action of this ProductAction.\n\n\n        :param action: The action of this ProductAction.\n        :type: str\n        \"\"\"\n        allowed_values = [\"unknown\", \"add_to_cart\", \"remove_from_cart\", \"checkout\", \"checkout_option\", \"click\", \"view_detail\", \"purchase\", \"refund\", \"add_to_wishlist\", \"remove_from_wish_list\"]\n        if action not in allowed_values:\n            raise ValueError(\n                \"Invalid value for `action` ({0}), must be one of {1}\"\n                .format(action, allowed_values)\n            )\n\n        self._action = action\n\n    @property\n    def checkout_step(self):\n        \"\"\"\n        Gets the checkout_step of this ProductAction.\n\n\n        :return: The checkout_step of this ProductAction.\n        :rtype: int\n        \"\"\"\n        return self._checkout_step\n\n    @checkout_step.setter\n    def checkout_step(self, checkout_step):\n        \"\"\"\n        Sets the checkout_step of this ProductAction.\n\n\n        :param checkout_step: The checkout_step of this ProductAction.\n        :type: int\n        \"\"\"\n\n        self._checkout_step = checkout_step\n\n    @property\n    def checkout_options(self):\n        \"\"\"\n        Gets the checkout_options of this ProductAction.\n\n\n        :return: The checkout_options of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._checkout_options\n\n    @checkout_options.setter\n    def checkout_options(self, checkout_options):\n        \"\"\"\n        Sets the checkout_options of this ProductAction.\n\n\n        :param checkout_options: The checkout_options of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._checkout_options = checkout_options\n\n    @property\n    def product_action_list(self):\n        \"\"\"\n        Gets the product_action_list of this ProductAction.\n\n\n        :return: The product_action_list of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._product_action_list\n\n    @product_action_list.setter\n    def product_action_list(self, product_action_list):\n        \"\"\"\n        Sets the product_action_list of this ProductAction.\n\n\n        :param product_action_list: The product_action_list of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._product_action_list = product_action_list\n\n    @property\n    def product_list_source(self):\n        \"\"\"\n        Gets the product_list_source of this ProductAction.\n\n\n        :return: The product_list_source of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._product_list_source\n\n    @product_list_source.setter\n    def product_list_source(self, product_list_source):\n        \"\"\"\n        Sets the product_list_source of this ProductAction.\n\n\n        :param product_list_source: The product_list_source of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._product_list_source = product_list_source\n\n    @property\n    def transaction_id(self):\n        \"\"\"\n        Gets the transaction_id of this ProductAction.\n\n\n        :return: The transaction_id of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._transaction_id\n\n    @transaction_id.setter\n    def transaction_id(self, transaction_id):\n        \"\"\"\n        Sets the transaction_id of this ProductAction.\n\n\n        :param transaction_id: The transaction_id of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._transaction_id = transaction_id\n\n    @property\n    def affiliation(self):\n        \"\"\"\n        Gets the affiliation of this ProductAction.\n\n\n        :return: The affiliation of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._affiliation\n\n    @affiliation.setter\n    def affiliation(self, affiliation):\n        \"\"\"\n        Sets the affiliation of this ProductAction.\n\n\n        :param affiliation: The affiliation of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._affiliation = affiliation\n\n    @property\n    def total_amount(self):\n        \"\"\"\n        Gets the total_amount of this ProductAction.\n\n\n        :return: The total_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._total_amount\n\n    @total_amount.setter\n    def total_amount(self, total_amount):\n        \"\"\"\n        Sets the total_amount of this ProductAction.\n\n\n        :param total_amount: The total_amount of this ProductAction.\n        :type: float\n        \"\"\"\n\n        self._total_amount = total_amount\n\n    @property\n    def tax_amount(self):\n        \"\"\"\n        Gets the tax_amount of this ProductAction.\n\n\n        :return: The tax_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._tax_amount\n\n    @tax_amount.setter\n    def tax_amount(self, tax_amount):\n        \"\"\"\n        Sets the tax_amount of this ProductAction.\n\n\n        :param tax_amount: The tax_amount of this ProductAction.\n        :type: float\n        \"\"\"\n\n        self._tax_amount = tax_amount\n\n    @property\n    def shipping_amount(self):\n        \"\"\"\n        Gets the shipping_amount of this ProductAction.\n\n\n        :return: The shipping_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._shipping_amount\n\n    @shipping_amount.setter\n    def shipping_amount(self, shipping_amount):\n        \"\"\"\n        Sets the shipping_amount of this ProductAction.\n\n\n        :param shipping_amount: The shipping_amount of this ProductAction.\n        :type: float\n        \"\"\"\n\n        self._shipping_amount = shipping_amount\n\n    @property\n    def coupon_code(self):\n        \"\"\"\n        Gets the coupon_code of this ProductAction.\n\n\n        :return: The coupon_code of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._coupon_code\n\n    @coupon_code.setter\n    def coupon_code(self, coupon_code):\n        \"\"\"\n        Sets the coupon_code of this ProductAction.\n\n\n        :param coupon_code: The coupon_code of this ProductAction.\n        :type: str\n        \"\"\"\n\n        self._coupon_code = coupon_code\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ProductAction.\n\n\n        :return: The products of this ProductAction.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ProductAction.\n\n\n        :param products: The products of this ProductAction.\n        :type: list[Product]\n        \"\"\"\n\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/product_action.py": {
      "ProductAction.__init__": {
        "code": "    def __init__(self, action=None, checkout_step=None, checkout_options=None, product_action_list=None, product_list_source=None, transaction_id=None, affiliation=None, total_amount=None, tax_amount=None, shipping_amount=None, coupon_code=None, products=None):\n        \"\"\"Initializes a ProductAction instance, representing an action taken on a product within an event-based system, such as adding to cart, checking out, or purchasing. \n\n    Parameters:\n    - action (str): The type of action performed on the product, which must be one of the allowed values including \"add_to_cart\", \"purchase\", etc.\n    - checkout_step (int): The current step in the checkout process.\n    - checkout_options (str): Optional selections made during checkout.\n    - product_action_list (str): Identifier for the specific list of product actions.\n    - product_list_source (str): Source from which the product list is derived.\n    - transaction_id (str): Unique identifier for the transaction.\n    - affiliation (str): The affiliation of the store where the action took place.\n    - total_amount (float): The total amount of the transaction.\n    - tax_amount (float): The amount of tax applied to the transaction.\n    - shipping_amount (float): The cost of shipping for the transaction.\n    - coupon_code (str): Any coupon codes applied to the transaction.\n    - products (list[Product]): A list containing Product objects related to the action.\n\n    The class has dictionaries `swagger_types` and `attribute_map` that define the expected data types for each attribute and the mapping to the corresponding JSON keys, respectively. These dictionaries are crucial for ensuring proper serialization and deserialization when interacting with external systems.\"\"\"\n        '\\n        ProductAction - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'action': 'str', 'checkout_step': 'int', 'checkout_options': 'str', 'product_action_list': 'str', 'product_list_source': 'str', 'transaction_id': 'str', 'affiliation': 'str', 'total_amount': 'float', 'tax_amount': 'float', 'shipping_amount': 'float', 'coupon_code': 'str', 'products': 'list[Product]'}\n        self.attribute_map = {'action': 'action', 'checkout_step': 'checkout_step', 'checkout_options': 'checkout_options', 'product_action_list': 'product_action_list', 'product_list_source': 'product_list_source', 'transaction_id': 'transaction_id', 'affiliation': 'affiliation', 'total_amount': 'total_amount', 'tax_amount': 'tax_amount', 'shipping_amount': 'shipping_amount', 'coupon_code': 'coupon_code', 'products': 'products'}\n        self._action = action\n        self._checkout_step = checkout_step\n        self._checkout_options = checkout_options\n        self._product_action_list = product_action_list\n        self._product_list_source = product_list_source\n        self._transaction_id = transaction_id\n        self._affiliation = affiliation\n        self._total_amount = total_amount\n        self._tax_amount = tax_amount\n        self._shipping_amount = shipping_amount\n        self._coupon_code = coupon_code\n        self._products = products",
        "docstring": "Initializes a ProductAction instance, representing an action taken on a product within an event-based system, such as adding to cart, checking out, or purchasing. \n\nParameters:\n- action (str): The type of action performed on the product, which must be one of the allowed values including \"add_to_cart\", \"purchase\", etc.\n- checkout_step (int): The current step in the checkout process.\n- checkout_options (str): Optional selections made during checkout.\n- product_action_list (str): Identifier for the specific list of product actions.\n- product_list_source (str): Source from which the product list is derived.\n- transaction_id (str): Unique identifier for the transaction.\n- affiliation (str): The affiliation of the store where the action took place.\n- total_amount (float): The total amount of the transaction.\n- tax_amount (float): The amount of tax applied to the transaction.\n- shipping_amount (float): The cost of shipping for the transaction.\n- coupon_code (str): Any coupon codes applied to the transaction.\n- products (list[Product]): A list containing Product objects related to the action.\n\nThe class has dictionaries `swagger_types` and `attribute_map` that define the expected data types for each attribute and the mapping to the corresponding JSON keys, respectively. These dictionaries are crucial for ensuring proper serialization and deserialization when interacting with external systems.",
        "signature": "def __init__(self, action=None, checkout_step=None, checkout_options=None, product_action_list=None, product_list_source=None, transaction_id=None, affiliation=None, total_amount=None, tax_amount=None, shipping_amount=None, coupon_code=None, products=None):",
        "type": "Method",
        "class_signature": "class ProductAction(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_product_action\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 product_action.py\n            \u2514\u2500\u2500 ProductAction.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module integrates with the mParticle Event API to facilitate the management and interaction with product actions within an event-based context. Its primary purpose is to provide a structured interface for developers to represent and handle product-related events, such as adding, removing, or updating product actions within the mParticle ecosystem. By providing capabilities to model and validate product action objects, the module ensures consistent data structure and adherence to mParticle API standards. This simplifies the process for developers to programmatically interact with product action events, reducing manual effort and ensuring reliable integration with mParticle's data infrastructure.\n\n## FILE 1: mparticle/models/product_action.py\n\n- CLASS METHOD: ProductAction.__init__\n  - CLASS SIGNATURE: class ProductAction(object):\n  - SIGNATURE: def __init__(self, action=None, checkout_step=None, checkout_options=None, product_action_list=None, product_list_source=None, transaction_id=None, affiliation=None, total_amount=None, tax_amount=None, shipping_amount=None, coupon_code=None, products=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a ProductAction instance, representing an action taken on a product within an event-based system, such as adding to cart, checking out, or purchasing. \n\nParameters:\n- action (str): The type of action performed on the product, which must be one of the allowed values including \"add_to_cart\", \"purchase\", etc.\n- checkout_step (int): The current step in the checkout process.\n- checkout_options (str): Optional selections made during checkout.\n- product_action_list (str): Identifier for the specific list of product actions.\n- product_list_source (str): Source from which the product list is derived.\n- transaction_id (str): Unique identifier for the transaction.\n- affiliation (str): The affiliation of the store where the action took place.\n- total_amount (float): The total amount of the transaction.\n- tax_amount (float): The amount of tax applied to the transaction.\n- shipping_amount (float): The cost of shipping for the transaction.\n- coupon_code (str): Any coupon codes applied to the transaction.\n- products (list[Product]): A list containing Product objects related to the action.\n\nThe class has dictionaries `swagger_types` and `attribute_map` that define the expected data types for each attribute and the mapping to the corresponding JSON keys, respectively. These dictionaries are crucial for ensuring proper serialization and deserialization when interacting with external systems.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/product_action.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass ProductAction(object):\n\n    @property\n    def action(self):\n        \"\"\"\n        Gets the action of this ProductAction.\n\n\n        :return: The action of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._action\n\n    @action.setter\n    def action(self, action):\n        \"\"\"\n        Sets the action of this ProductAction.\n\n\n        :param action: The action of this ProductAction.\n        :type: str\n        \"\"\"\n        allowed_values = ['unknown', 'add_to_cart', 'remove_from_cart', 'checkout', 'checkout_option', 'click', 'view_detail', 'purchase', 'refund', 'add_to_wishlist', 'remove_from_wish_list']\n        if action not in allowed_values:\n            raise ValueError('Invalid value for `action` ({0}), must be one of {1}'.format(action, allowed_values))\n        self._action = action\n\n    @property\n    def checkout_step(self):\n        \"\"\"\n        Gets the checkout_step of this ProductAction.\n\n\n        :return: The checkout_step of this ProductAction.\n        :rtype: int\n        \"\"\"\n        return self._checkout_step\n\n    @checkout_step.setter\n    def checkout_step(self, checkout_step):\n        \"\"\"\n        Sets the checkout_step of this ProductAction.\n\n\n        :param checkout_step: The checkout_step of this ProductAction.\n        :type: int\n        \"\"\"\n        self._checkout_step = checkout_step\n\n    @property\n    def checkout_options(self):\n        \"\"\"\n        Gets the checkout_options of this ProductAction.\n\n\n        :return: The checkout_options of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._checkout_options\n\n    @checkout_options.setter\n    def checkout_options(self, checkout_options):\n        \"\"\"\n        Sets the checkout_options of this ProductAction.\n\n\n        :param checkout_options: The checkout_options of this ProductAction.\n        :type: str\n        \"\"\"\n        self._checkout_options = checkout_options\n\n    @property\n    def product_action_list(self):\n        \"\"\"\n        Gets the product_action_list of this ProductAction.\n\n\n        :return: The product_action_list of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._product_action_list\n\n    @product_action_list.setter\n    def product_action_list(self, product_action_list):\n        \"\"\"\n        Sets the product_action_list of this ProductAction.\n\n\n        :param product_action_list: The product_action_list of this ProductAction.\n        :type: str\n        \"\"\"\n        self._product_action_list = product_action_list\n\n    @property\n    def product_list_source(self):\n        \"\"\"\n        Gets the product_list_source of this ProductAction.\n\n\n        :return: The product_list_source of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._product_list_source\n\n    @product_list_source.setter\n    def product_list_source(self, product_list_source):\n        \"\"\"\n        Sets the product_list_source of this ProductAction.\n\n\n        :param product_list_source: The product_list_source of this ProductAction.\n        :type: str\n        \"\"\"\n        self._product_list_source = product_list_source\n\n    @property\n    def transaction_id(self):\n        \"\"\"\n        Gets the transaction_id of this ProductAction.\n\n\n        :return: The transaction_id of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._transaction_id\n\n    @transaction_id.setter\n    def transaction_id(self, transaction_id):\n        \"\"\"\n        Sets the transaction_id of this ProductAction.\n\n\n        :param transaction_id: The transaction_id of this ProductAction.\n        :type: str\n        \"\"\"\n        self._transaction_id = transaction_id\n\n    @property\n    def affiliation(self):\n        \"\"\"\n        Gets the affiliation of this ProductAction.\n\n\n        :return: The affiliation of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._affiliation\n\n    @affiliation.setter\n    def affiliation(self, affiliation):\n        \"\"\"\n        Sets the affiliation of this ProductAction.\n\n\n        :param affiliation: The affiliation of this ProductAction.\n        :type: str\n        \"\"\"\n        self._affiliation = affiliation\n\n    @property\n    def total_amount(self):\n        \"\"\"\n        Gets the total_amount of this ProductAction.\n\n\n        :return: The total_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._total_amount\n\n    @total_amount.setter\n    def total_amount(self, total_amount):\n        \"\"\"\n        Sets the total_amount of this ProductAction.\n\n\n        :param total_amount: The total_amount of this ProductAction.\n        :type: float\n        \"\"\"\n        self._total_amount = total_amount\n\n    @property\n    def tax_amount(self):\n        \"\"\"\n        Gets the tax_amount of this ProductAction.\n\n\n        :return: The tax_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._tax_amount\n\n    @tax_amount.setter\n    def tax_amount(self, tax_amount):\n        \"\"\"\n        Sets the tax_amount of this ProductAction.\n\n\n        :param tax_amount: The tax_amount of this ProductAction.\n        :type: float\n        \"\"\"\n        self._tax_amount = tax_amount\n\n    @property\n    def shipping_amount(self):\n        \"\"\"\n        Gets the shipping_amount of this ProductAction.\n\n\n        :return: The shipping_amount of this ProductAction.\n        :rtype: float\n        \"\"\"\n        return self._shipping_amount\n\n    @shipping_amount.setter\n    def shipping_amount(self, shipping_amount):\n        \"\"\"\n        Sets the shipping_amount of this ProductAction.\n\n\n        :param shipping_amount: The shipping_amount of this ProductAction.\n        :type: float\n        \"\"\"\n        self._shipping_amount = shipping_amount\n\n    @property\n    def coupon_code(self):\n        \"\"\"\n        Gets the coupon_code of this ProductAction.\n\n\n        :return: The coupon_code of this ProductAction.\n        :rtype: str\n        \"\"\"\n        return self._coupon_code\n\n    @coupon_code.setter\n    def coupon_code(self, coupon_code):\n        \"\"\"\n        Sets the coupon_code of this ProductAction.\n\n\n        :param coupon_code: The coupon_code of this ProductAction.\n        :type: str\n        \"\"\"\n        self._coupon_code = coupon_code\n\n    @property\n    def products(self):\n        \"\"\"\n        Gets the products of this ProductAction.\n\n\n        :return: The products of this ProductAction.\n        :rtype: list[Product]\n        \"\"\"\n        return self._products\n\n    @products.setter\n    def products(self, products):\n        \"\"\"\n        Sets the products of this ProductAction.\n\n\n        :param products: The products of this ProductAction.\n        :type: list[Product]\n        \"\"\"\n        self._products = products\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_product_action.py:TestProductAction:testProductAction": {
      "mparticle/models/product_action.py:ProductAction:__init__": {}
    }
  }
}