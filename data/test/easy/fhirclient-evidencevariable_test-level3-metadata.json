{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-evidencevariable_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/evidencevariable_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import evidencevariable\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass EvidenceVariableTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"EvidenceVariable\", js[\"resourceType\"])\n        return evidencevariable.EvidenceVariable(js)\n    \n    def testEvidenceVariable1(self):\n        inst = self.instantiate_from(\"evidencevariable-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a EvidenceVariable instance\")\n        self.implEvidenceVariable1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"EvidenceVariable\", js[\"resourceType\"])\n        inst2 = evidencevariable.EvidenceVariable(js)\n        self.implEvidenceVariable1(inst2)\n    \n    def implEvidenceVariable1(self, inst):\n        self.assertEqual(inst.characteristic[0].definitionCodeableConcept.text, \"Diabetic patients over 65\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/evidencevariable.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/EvidenceVariable).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass EvidenceVariable(domainresource.DomainResource):\n    \"\"\" A population, intervention, or exposure definition.\n    \n    The EvidenceVariable resource describes a \"PICO\" element that knowledge\n    (evidence, assertion, recommendation) is about.\n    \"\"\"\n    \n    resource_type = \"EvidenceVariable\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the evidence variable was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.characteristic = None\n        \"\"\" What defines the members of the evidence element.\n        List of `EvidenceVariableCharacteristic` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the evidence variable.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the evidence variable is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the evidence variable.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for evidence variable (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the evidence variable was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this evidence variable (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.shortTitle = None\n        \"\"\" Title for use in informal contexts.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the EvidenceVariable.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this evidence variable (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" The category of the EvidenceVariable, such as Education, Treatment,\n        Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" dichotomous | continuous | descriptive.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this evidence variable, represented as a\n        URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the evidence variable.\n        Type `str`. \"\"\"\n        \n        super(EvidenceVariable, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EvidenceVariable, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"characteristic\", \"characteristic\", EvidenceVariableCharacteristic, True, None, True),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"shortTitle\", \"shortTitle\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass EvidenceVariableCharacteristic(backboneelement.BackboneElement):\n    \"\"\" What defines the members of the evidence element.\n    \n    A characteristic that defines the members of the evidence element. Multiple\n    characteristics are applied with \"and\" semantics.\n    \"\"\"\n    \n    resource_type = \"EvidenceVariableCharacteristic\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.definitionCanonical = None\n        \"\"\" What code or expression defines members?.\n        Type `str`. \"\"\"\n        \n        self.definitionCodeableConcept = None\n        \"\"\" What code or expression defines members?.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionDataRequirement = None\n        \"\"\" What code or expression defines members?.\n        Type `DataRequirement` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionExpression = None\n        \"\"\" What code or expression defines members?.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionReference = None\n        \"\"\" What code or expression defines members?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionTriggerDefinition = None\n        \"\"\" What code or expression defines members?.\n        Type `TriggerDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the characteristic.\n        Type `str`. \"\"\"\n        \n        self.exclude = None\n        \"\"\" Whether the characteristic includes or excludes members.\n        Type `bool`. \"\"\"\n        \n        self.groupMeasure = None\n        \"\"\" mean | median | mean-of-mean | mean-of-median | median-of-mean |\n        median-of-median.\n        Type `str`. \"\"\"\n        \n        self.participantEffectiveDateTime = None\n        \"\"\" What time period do participants cover.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.participantEffectiveDuration = None\n        \"\"\" What time period do participants cover.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.participantEffectivePeriod = None\n        \"\"\" What time period do participants cover.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.participantEffectiveTiming = None\n        \"\"\" What time period do participants cover.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.timeFromStart = None\n        \"\"\" Observation time from study start.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.usageContext = None\n        \"\"\" What code/value pairs define members?.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        super(EvidenceVariableCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EvidenceVariableCharacteristic, self).elementProperties()\n        js.extend([\n            (\"definitionCanonical\", \"definitionCanonical\", str, False, \"definition\", True),\n            (\"definitionCodeableConcept\", \"definitionCodeableConcept\", codeableconcept.CodeableConcept, False, \"definition\", True),\n            (\"definitionDataRequirement\", \"definitionDataRequirement\", datarequirement.DataRequirement, False, \"definition\", True),\n            (\"definitionExpression\", \"definitionExpression\", expression.Expression, False, \"definition\", True),\n            (\"definitionReference\", \"definitionReference\", fhirreference.FHIRReference, False, \"definition\", True),\n            (\"definitionTriggerDefinition\", \"definitionTriggerDefinition\", triggerdefinition.TriggerDefinition, False, \"definition\", True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"exclude\", \"exclude\", bool, False, None, False),\n            (\"groupMeasure\", \"groupMeasure\", str, False, None, False),\n            (\"participantEffectiveDateTime\", \"participantEffectiveDateTime\", fhirdatetime.FHIRDateTime, False, \"participantEffective\", False),\n            (\"participantEffectiveDuration\", \"participantEffectiveDuration\", duration.Duration, False, \"participantEffective\", False),\n            (\"participantEffectivePeriod\", \"participantEffectivePeriod\", period.Period, False, \"participantEffective\", False),\n            (\"participantEffectiveTiming\", \"participantEffectiveTiming\", timing.Timing, False, \"participantEffective\", False),\n            (\"timeFromStart\", \"timeFromStart\", duration.Duration, False, None, False),\n            (\"usageContext\", \"usageContext\", usagecontext.UsageContext, True, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from. It checks if the provided JSON dictionary contains a valid `resourceType` that matches the class's expected `resource_type`. If the `resourceType` does not match, an exception is raised.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the resource data, expected to include a 'resourceType' key. If provided, its value must match this class's `resource_type`.\n- strict (bool, optional): Determines if strict validation is enforced for the resource data (default is True).\n\nAttributes:\n- _server (FHIRServer or None): Internal attribute to hold the server instance that the resource was retrieved from.\n\nRaises:\n- Exception: If `jsondict` is provided and its `resourceType` does not match the `resource_type` of this class.\n\nThis constructor depends on the superclass `FHIRAbstractBase`, whose constructor is called to handle the JSON dictionary, allowing standard initialization of attributes defined in that base class.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from. It checks if the provided JSON dictionary contains a valid `resourceType` that matches the class's expected `resource_type`. If the `resourceType` does not match, an exception is raised.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the resource data, expected to include a 'resourceType' key. If provided, its value must match this class's `resource_type`.\n- strict (bool, optional): Determines if strict validation is enforced for the resource data (default is True).\n\nAttributes:\n- _server (FHIRServer or None): Internal attribute to hold the server instance that the resource was retrieved from.\n\nRaises:\n- Exception: If `jsondict` is provided and its `resourceType` does not match the `resource_type` of this class.\n\nThis constructor depends on the superclass `FHIRAbstractBase`, whose constructor is called to handle the JSON dictionary, allowing standard initialization of attributes defined in that base class.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Transforms the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to include the `resourceType` attribute specific to the resource class. It takes no parameters and returns a dictionary representing the resource, including the additional `resourceType` key set to the class-specific `resource_type`.\n\nDependencies:\n- Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to retrieve the base JSON representation before adding the `resourceType`.\n- The class attribute `resource_type`, defined as 'FHIRAbstractResource', indicates the type of FHIR resource and is added to the resulting JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Transforms the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to include the `resourceType` attribute specific to the resource class. It takes no parameters and returns a dictionary representing the resource, including the additional `resourceType` key set to the class-specific `resource_type`.\n\nDependencies:\n- Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to retrieve the base JSON representation before adding the `resourceType`.\n- The class attribute `resource_type`, defined as 'FHIRAbstractResource', indicates the type of FHIR resource and is added to the resulting JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializer for the FHIRAbstractBase class, which serves as an abstract base for all FHIR elements. This constructor allows the instantiation of FHIR elements from a JSON dictionary. The `jsondict` parameter can be provided to initialize the instance's attributes based on its contents. If the `strict` parameter is set to True (default), any validation errors during the update process will raise a `FHIRValidationError`; if False, warnings will be logged instead.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data used for initializing the instance. If None, the instance is created with default attribute values.\n- strict (bool, optional): A flag to control error handling behavior. If True, the constructor raises errors on invalid data; if False, issues are logged as warnings.\n\nAttributes:\n- _resolved: A dictionary to store resolved resources, initialized to None.\n- _owner: A reference to the parent resource, initialized to None.\n\nInteractions:\nThe method calls `update_with_json` to populate the instance with data from `jsondict`, applying strict validation rules based on the `strict` parameter's value. This function raises or handles `FHIRValidationError` instances depending on the `strict` setting.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializer for the FHIRAbstractBase class, which serves as an abstract base for all FHIR elements. This constructor allows the instantiation of FHIR elements from a JSON dictionary. The `jsondict` parameter can be provided to initialize the instance's attributes based on its contents. If the `strict` parameter is set to True (default), any validation errors during the update process will raise a `FHIRValidationError`; if False, warnings will be logged instead.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data used for initializing the instance. If None, the instance is created with default attribute values.\n- strict (bool, optional): A flag to control error handling behavior. If True, the constructor raises errors on invalid data; if False, issues are logged as warnings.\n\nAttributes:\n- _resolved: A dictionary to store resolved resources, initialized to None.\n- _owner: A reference to the parent resource, initialized to None.\n\nInteractions:\nThe method calls `update_with_json` to populate the instance with data from `jsondict`, applying strict validation rules based on the `strict` parameter's value. This function raises or handles `FHIRValidationError` instances depending on the `strict` setting.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class or a list of instances from the provided JSON dictionary or array. If a single dictionary is passed, it calls the internal method `_with_json_dict` to handle the instantiation. When given a list, it attempts to instantiate each dictionary in the list, collecting instances in an array, and raising a prefixed FHIRValidationError if any instantiation fails.\n\nParameters:\n- jsonobj (dict or list of dicts): A JSON dictionary or an array of JSON dictionaries from which instances are created.\n\nReturns:\n- An instance of the receiving class if a single JSON dictionary is provided, or a list of instances if a list of dictionaries is provided.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If any errors occur during the instantiation of the JSON data.\n\nDependencies:\n- This method relies on the `_with_json_dict` method for handling individual JSON dictionaries. The `FHIRValidationError` class is used to manage validation errors during instantiation, ensuring errors are properly reported and can be traced back to the specific input causing the issue.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initializes an instance of the FHIRAbstractBase class or a list of instances from the provided JSON dictionary or array. If a single dictionary is passed, it calls the internal method `_with_json_dict` to handle the instantiation. When given a list, it attempts to instantiate each dictionary in the list, collecting instances in an array, and raising a prefixed FHIRValidationError if any instantiation fails.\n\nParameters:\n- jsonobj (dict or list of dicts): A JSON dictionary or an array of JSON dictionaries from which instances are created.\n\nReturns:\n- An instance of the receiving class if a single JSON dictionary is provided, or a list of instances if a list of dictionaries is provided.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If any errors occur during the instantiation of the JSON data.\n\nDependencies:\n- This method relies on the `_with_json_dict` method for handling individual JSON dictionaries. The `FHIRValidationError` class is used to manage validation errors during instantiation, ensuring errors are properly reported and can be traced back to the specific input causing the issue.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal method to instantiate an element from a given JSON dictionary.\n\nThis method checks that the input is a dictionary and raises a `TypeError` if it is not. Upon successful validation, it creates and returns an instance of the class using the provided JSON data.\n\nParameters:\n- jsondict (dict): A dictionary containing data to instantiate the class.\n\nReturns:\n- An instance of the class created from the provided dictionary data.\n\nRaises:\n- TypeError: If the input `jsondict` is not of type `dict`.\n- FHIRValidationError: If the instantiation from the dictionary fails (though instantiation itself does not occur here).\n\nThis method interacts with the FHIRAbstractBase class and relies on the constructor of the class to be properly defined for instantiation.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal method to instantiate an element from a given JSON dictionary.\n\nThis method checks that the input is a dictionary and raises a `TypeError` if it is not. Upon successful validation, it creates and returns an instance of the class using the provided JSON data.\n\nParameters:\n- jsondict (dict): A dictionary containing data to instantiate the class.\n\nReturns:\n- An instance of the class created from the provided dictionary data.\n\nRaises:\n- TypeError: If the input `jsondict` is not of type `dict`.\n- FHIRValidationError: If the instantiation from the dictionary fails (though instantiation itself does not occur here).\n\nThis method interacts with the FHIRAbstractBase class and relies on the constructor of the class to be properly defined for instantiation.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Initializes FHIR elements from a JSON representation while associating them with an owner resource. This method extends the functionality of `with_json()` to ensure that each instantiated element records its parent resource, facilitating the resolution of contained resources later.\n\n:param jsonobj: A JSON dictionary or a list of dictionaries representing the data to instantiate from.\n:param FHIRElement owner: The parent resource that owns the instantiated elements, utilized for resolving contained resources.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If the instantiation of elements fails due to validation errors.\n:returns: An instance or a list of instances created from the provided JSON data, with each instance having its `_owner` attribute set to the provided owner.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Initializes FHIR elements from a JSON representation while associating them with an owner resource. This method extends the functionality of `with_json()` to ensure that each instantiated element records its parent resource, facilitating the resolution of contained resources later.\n\n:param jsonobj: A JSON dictionary or a list of dictionaries representing the data to instantiate from.\n:param FHIRElement owner: The parent resource that owns the instantiated elements, utilized for resolving contained resources.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If the instantiation of elements fails due to validation errors.\n:returns: An instance or a list of instances created from the provided JSON data, with each instance having its `_owner` attribute set to the provided owner.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples, each representing a property that should be serialized from the FHIR element. Each tuple contains the following information: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional). This method serves as a blueprint for subclasses to define their specific properties for serialization to JSON format. \n\nThe returned list allows the `as_json()` method to validate and serialize the properties correctly, ensuring that required fields are present and of the correct type. By default, it returns an empty list, indicating that no properties are set in the abstract base class. Subclasses should override this method to provide their own implementation.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples, each representing a property that should be serialized from the FHIR element. Each tuple contains the following information: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional). This method serves as a blueprint for subclasses to define their specific properties for serialization to JSON format. \n\nThe returned list allows the `as_json()` method to validate and serialize the properties correctly, ensuring that required fields are present and of the correct type. By default, it returns an empty list, indicating that no properties are set in the abstract base class. Subclasses should override this method to provide their own implementation.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Updates the current instance of the FHIRAbstractBase class with data from a provided JSON dictionary.\n\n:param dict jsondict: A JSON dictionary containing data to update the instance. If the input is None, no action is taken. Raises a FHIRValidationError if the input is not a dictionary or if validation errors occur during the update process. \n:raises FHIRValidationError: If `jsondict` is not a dictionary or if there are validation errors related to property types or missing non-optional properties.\n:returns: None on success; if errors are encountered, they will be raised within the exception.\nThe method iterates over properties defined by the `elementProperties()` method, checking for types and validating values. It also tracks valid property names and keeps track of any non-optional properties that are missing. Errors encountered along the way are collected and raised as FHIRValidationError, which may contain nested validation errors for clearer debugging.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Updates the current instance of the FHIRAbstractBase class with data from a provided JSON dictionary.\n\n:param dict jsondict: A JSON dictionary containing data to update the instance. If the input is None, no action is taken. Raises a FHIRValidationError if the input is not a dictionary or if validation errors occur during the update process. \n:raises FHIRValidationError: If `jsondict` is not a dictionary or if there are validation errors related to property types or missing non-optional properties.\n:returns: None on success; if errors are encountered, they will be raised within the exception.\nThe method iterates over properties defined by the `elementProperties()` method, checking for types and validating values. It also tracks valid property names and keeps track of any non-optional properties that are missing. Errors encountered along the way are collected and raised as FHIRValidationError, which may contain nested validation errors for clearer debugging.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current FHIR element instance to a JSON dictionary by inspecting its registered properties through `elementProperties()`. This method ensures that all required properties are present and correctly typed before constructing the output dictionary. It raises a `FHIRValidationError` if any properties have the wrong type or if required properties are missing.\n\nThe method iterates over the properties defined in `elementProperties()`, checking each one's type and presence. It collects errors in the `errs` list if any issues arise during the serialization process. The returned dictionary can be directly serialized to JSON, while keeping track of required versus optional properties via the `nonoptionals` set.\n\nReturns:\n    dict: A validated dictionary representation of the instance capable of being JSON serialized.\n\nRaises:\n    FHIRValidationError: If properties are incorrectly typed or required properties are absent.\n\nConstants and Variables:\n- `errs`: A list to accumulate errors encountered during serialization.\n- `found`: A set to track which properties have been successfully included in the JSON representation.\n- `nonoptionals`: A set to track required properties that must have values assigned.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current FHIR element instance to a JSON dictionary by inspecting its registered properties through `elementProperties()`. This method ensures that all required properties are present and correctly typed before constructing the output dictionary. It raises a `FHIRValidationError` if any properties have the wrong type or if required properties are missing.\n\nThe method iterates over the properties defined in `elementProperties()`, checking each one's type and presence. It collects errors in the `errs` list if any issues arise during the serialization process. The returned dictionary can be directly serialized to JSON, while keeping track of required versus optional properties via the `nonoptionals` set.\n\nReturns:\n    dict: A validated dictionary representation of the instance capable of being JSON serialized.\n\nRaises:\n    FHIRValidationError: If properties are incorrectly typed or required properties are absent.\n\nConstants and Variables:\n- `errs`: A list to accumulate errors encountered during serialization.\n- `found`: A set to track which properties have been successfully included in the JSON representation.\n- `nonoptionals`: A set to track required properties that must have values assigned.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if the provided value matches the expected type.\n\nParameters:\n- value: The value to be checked against the type.\n- typ: The expected type to check against. Can be any valid type.\n\nReturns:\n- bool: True if the value is of the expected type, False otherwise.\n\nNotes:\n- If the value is None, it automatically returns True, allowing for optional fields.\n- It performs specific type checks to handle numeric types (int and float) and String types, considering backward compatibility with Python 2 by also checking for unicode.\n- The function utilizes the `sys` module to determine the Python version in use, enhancing cross-version compatibility.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if the provided value matches the expected type.\n\nParameters:\n- value: The value to be checked against the type.\n- typ: The expected type to check against. Can be any valid type.\n\nReturns:\n- bool: True if the value is of the expected type, False otherwise.\n\nNotes:\n- If the value is None, it automatically returns True, allowing for optional fields.\n- It performs specific type checks to handle numeric types (int and float) and String types, considering backward compatibility with Python 2 by also checking for unicode.\n- The function utilizes the `sys` module to determine the Python version in use, enhancing cross-version compatibility.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/evidencevariable.py": {
      "EvidenceVariable.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an EvidenceVariable resource, representing a population, intervention, or exposure definition. This constructor sets up various properties related to the evidence variable, including metadata like approval dates, authors, descriptions, effective periods, and characteristics describing the evidence members.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial property values for the EvidenceVariable.\n- strict (bool, optional): If True (default), will raise a FHIRValidationError on invalid properties; if False, allows for more leniency on property validation.\n\nAttributes:\n- approvalDate (str): Date when the evidence variable was approved.\n- author (list of ContactDetail): Authors of the content.\n- characteristic (list of EvidenceVariableCharacteristic): Defines the members of the evidence element.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Publishing restrictions.\n- date (str): Last modification date.\n- description (str): Natural language description of the evidence variable.\n- editor (list of ContactDetail): Editors of the content.\n- effectivePeriod (Period): Valid time period for the evidence variable.\n- endorser (list of ContactDetail): Endorsers of the content.\n- identifier (list of Identifier): Additional identifiers for the evidence variable.\n- jurisdiction (list of CodeableConcept): Intended jurisdictions for the evidence variable.\n- lastReviewDate (str): Last review date of the evidence variable.\n- name (str): Computer-friendly name for the evidence variable.\n- note (list of Annotation): Footnotes or explanatory notes.\n- publisher (str): Name of the publisher (individual or organization).\n- relatedArtifact (list of RelatedArtifact): Additional documentation or citations.\n- reviewer (list of ContactDetail): Reviewers of the content.\n- shortTitle (str): Informal context title.\n- status (str): Current status (e.g., draft, active).\n- subtitle (str): Subordinate title.\n- title (str): Human-friendly name for this evidence variable.\n- topic (list of CodeableConcept): Categories relevant to the evidence variable.\n- type (str): Type of evidence variable (e.g., dichotomous, continuous).\n- url (str): Canonical URI identifier for the evidence variable.\n- useContext (list of UsageContext): Contexts the content is intended to support.\n- version (str): Business version of the evidence variable.\n\nThis class derives from `DomainResource`, ensuring functionalities from that base class are also available in this context.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the evidence variable was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.characteristic = None\n        ' What defines the members of the evidence element.\\n        List of `EvidenceVariableCharacteristic` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the evidence variable.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the evidence variable is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the evidence variable.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for evidence variable (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the evidence variable was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.name = None\n        ' Name for this evidence variable (computer friendly).\\n        Type `str`. '\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.shortTitle = None\n        ' Title for use in informal contexts.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subtitle = None\n        ' Subordinate title of the EvidenceVariable.\\n        Type `str`. '\n        self.title = None\n        ' Name for this evidence variable (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' The category of the EvidenceVariable, such as Education, Treatment,\\n        Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' dichotomous | continuous | descriptive.\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this evidence variable, represented as a\\n        URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the evidence variable.\\n        Type `str`. '\n        super(EvidenceVariable, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an EvidenceVariable resource, representing a population, intervention, or exposure definition. This constructor sets up various properties related to the evidence variable, including metadata like approval dates, authors, descriptions, effective periods, and characteristics describing the evidence members.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial property values for the EvidenceVariable.\n- strict (bool, optional): If True (default), will raise a FHIRValidationError on invalid properties; if False, allows for more leniency on property validation.\n\nAttributes:\n- approvalDate (str): Date when the evidence variable was approved.\n- author (list of ContactDetail): Authors of the content.\n- characteristic (list of EvidenceVariableCharacteristic): Defines the members of the evidence element.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Publishing restrictions.\n- date (str): Last modification date.\n- description (str): Natural language description of the evidence variable.\n- editor (list of ContactDetail): Editors of the content.\n- effectivePeriod (Period): Valid time period for the evidence variable.\n- endorser (list of ContactDetail): Endorsers of the content.\n- identifier (list of Identifier): Additional identifiers for the evidence variable.\n- jurisdiction (list of CodeableConcept): Intended jurisdictions for the evidence variable.\n- lastReviewDate (str): Last review date of the evidence variable.\n- name (str): Computer-friendly name for the evidence variable.\n- note (list of Annotation): Footnotes or explanatory notes.\n- publisher (str): Name of the publisher (individual or organization).\n- relatedArtifact (list of RelatedArtifact): Additional documentation or citations.\n- reviewer (list of ContactDetail): Reviewers of the content.\n- shortTitle (str): Informal context title.\n- status (str): Current status (e.g., draft, active).\n- subtitle (str): Subordinate title.\n- title (str): Human-friendly name for this evidence variable.\n- topic (list of CodeableConcept): Categories relevant to the evidence variable.\n- type (str): Type of evidence variable (e.g., dichotomous, continuous).\n- url (str): Canonical URI identifier for the evidence variable.\n- useContext (list of UsageContext): Contexts the content is intended to support.\n- version (str): Business version of the evidence variable.\n\nThis class derives from `DomainResource`, ensuring functionalities from that base class are also available in this context.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class EvidenceVariable(domainresource.DomainResource):"
      },
      "EvidenceVariable.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of properties for the EvidenceVariable resource instance, detailing its attributes and their expected types. This method overrides the `elementProperties` method from the parent `DomainResource` class, adding specific attributes related to the EvidenceVariable, such as `approvalDate`, `author`, `characteristic`, and others. Each property is defined as a tuple containing the attribute name, JSON key, expected type, whether the attribute is repeated, and any relevant representation context.\n\nThe method relies on external classes for type definitions, including `FHIRDate`, `ContactDetail`, `EvidenceVariableCharacteristic`, `Period`, `CodeableConcept`, and others, which are imported from their respective modules. These types ensure proper structure and validation for the corresponding attributes.\n\nReturns:\n    - List[Tuple]: A list of tuples that define the properties of the EvidenceVariable resource.\n\nRaises:\n    - None: The method itself does not raise exceptions but utilizes the inherited validation mechanism.\"\"\"\n        js = super(EvidenceVariable, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('characteristic', 'characteristic', EvidenceVariableCharacteristic, True, None, True), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('publisher', 'publisher', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('shortTitle', 'shortTitle', str, False, None, False), ('status', 'status', str, False, None, True), ('subtitle', 'subtitle', str, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js",
        "docstring": "Returns a list of properties for the EvidenceVariable resource instance, detailing its attributes and their expected types. This method overrides the `elementProperties` method from the parent `DomainResource` class, adding specific attributes related to the EvidenceVariable, such as `approvalDate`, `author`, `characteristic`, and others. Each property is defined as a tuple containing the attribute name, JSON key, expected type, whether the attribute is repeated, and any relevant representation context.\n\nThe method relies on external classes for type definitions, including `FHIRDate`, `ContactDetail`, `EvidenceVariableCharacteristic`, `Period`, `CodeableConcept`, and others, which are imported from their respective modules. These types ensure proper structure and validation for the corresponding attributes.\n\nReturns:\n    - List[Tuple]: A list of tuples that define the properties of the EvidenceVariable resource.\n\nRaises:\n    - None: The method itself does not raise exceptions but utilizes the inherited validation mechanism.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class EvidenceVariable(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a new Resource instance.\n\nThis constructor initializes the basic properties of a FHIR Resource, including its logical ID, implicit rules, language, and metadata. If a JSON dictionary is provided, it will be used to initialize these properties. The strict parameter determines whether to raise a TypeError on validation errors.\n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If provided, it will populate the instance with values corresponding to the defined attributes.\n- strict (bool, default=True): If True, invalid properties in the JSON dictionary will raise a TypeError. If False, such errors will be ignored, allowing for non-strict validation.\n\nAttributes:\n- id (str): The logical identifier of the resource.\n- implicitRules (str): A set of rules under which this resource was created.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata about the resource, represented as a dictionary in JSON.\n\nThis class is a part of the FHIR 4.0.1 specification and inherits from the FHIRAbstractResource class. It relies on the meta module for the Meta data structure.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a new Resource instance.\n\nThis constructor initializes the basic properties of a FHIR Resource, including its logical ID, implicit rules, language, and metadata. If a JSON dictionary is provided, it will be used to initialize these properties. The strict parameter determines whether to raise a TypeError on validation errors.\n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If provided, it will populate the instance with values corresponding to the defined attributes.\n- strict (bool, default=True): If True, invalid properties in the JSON dictionary will raise a TypeError. If False, such errors will be ignored, allowing for non-strict validation.\n\nAttributes:\n- id (str): The logical identifier of the resource.\n- implicitRules (str): A set of rules under which this resource was created.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata about the resource, represented as a dictionary in JSON.\n\nThis class is a part of the FHIR 4.0.1 specification and inherits from the FHIRAbstractResource class. It relies on the meta module for the Meta data structure.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of property definitions for the Resource class, including the logical id, implicit rules, language, and metadata. This method extends the properties returned by the superclass (FHIRAbstractResource) with specific attributes related to FHIR resources. \n\nEach property is represented as a tuple containing the following elements: the attribute name, the corresponding key in the JSON dictionary, the data type, whether the property is required, whether it allows multiple values, and whether it is an abbreviated data type. Notably, the `meta` property uses the `Meta` class imported from the `meta` module, which represents metadata about the resource.\n\nReturns:\n    list: A list of tuples defining the properties of the Resource.\n\nDependencies:\n    - meta.Meta: Class defining metadata structure related to FHIR resources.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Returns a list of property definitions for the Resource class, including the logical id, implicit rules, language, and metadata. This method extends the properties returned by the superclass (FHIRAbstractResource) with specific attributes related to FHIR resources. \n\nEach property is represented as a tuple containing the following elements: the attribute name, the corresponding key in the JSON dictionary, the data type, whether the property is required, whether it allows multiple values, and whether it is an abbreviated data type. Notably, the `meta` property uses the `Meta` class imported from the `meta` module, which represents metadata about the resource.\n\nReturns:\n    list: A list of tuples defining the properties of the Resource.\n\nDependencies:\n    - meta.Meta: Class defining metadata structure related to FHIR resources.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource capable of containing narrative text, extensions, and other resources. The constructor allows for the initialization of standard resource properties through a JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource properties. Defaults to None.\n- strict (bool, optional): If True (default), invalid property assignments will raise a TypeError; otherwise, they will be ignored.\n\nRaises:\n- FHIRValidationError: Raised on validation errors if strict is True.\n\nAttributes:\n- contained (list of Resource items): Inline resources contained within this resource.\n- extension (list of Extension items): Additional content defined by implementations.\n- modifierExtension (list of Extension items): Critical extensions that are essential for understanding the resource, and cannot be ignored.\n- text (Narrative): A human-readable narrative that provides a summary of the resource.\n\nThis class extends the base Resource class from the `resource` module, ensuring compatibility with the FHIR standard.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource capable of containing narrative text, extensions, and other resources. The constructor allows for the initialization of standard resource properties through a JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource properties. Defaults to None.\n- strict (bool, optional): If True (default), invalid property assignments will raise a TypeError; otherwise, they will be ignored.\n\nRaises:\n- FHIRValidationError: Raised on validation errors if strict is True.\n\nAttributes:\n- contained (list of Resource items): Inline resources contained within this resource.\n- extension (list of Extension items): Additional content defined by implementations.\n- modifierExtension (list of Extension items): Critical extensions that are essential for understanding the resource, and cannot be ignored.\n- text (Narrative): A human-readable narrative that provides a summary of the resource.\n\nThis class extends the base Resource class from the `resource` module, ensuring compatibility with the FHIR standard.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the properties of the DomainResource class in terms of their JSON serialization requirements.\n\nThis method extends the base properties of the parent Resource class by adding specific properties for a DomainResource. It constructs a list of tuples where each tuple describes a property, its associated JSON key, its expected type, whether it's required, and its cardinality. The properties included are 'contained', 'extension', 'modifierExtension', and 'text'. The 'contained' and 'extension' properties reference the Resource and Extension classes, respectively, from the imported modules. The method returns this extended list for use in serialization and validation processes.\n\nReturns:\n    list: A list of tuples, each representing a property of the DomainResource for serialization.\n\nDependencies:\n    - resource.Resource: The base class providing foundational resource properties.\n    - extension.Extension: Defines the structure for additional content in the resource.\n    - narrative.Narrative: Represents the text summary for human interpretation.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Retrieve the properties of the DomainResource class in terms of their JSON serialization requirements.\n\nThis method extends the base properties of the parent Resource class by adding specific properties for a DomainResource. It constructs a list of tuples where each tuple describes a property, its associated JSON key, its expected type, whether it's required, and its cardinality. The properties included are 'contained', 'extension', 'modifierExtension', and 'text'. The 'contained' and 'extension' properties reference the Resource and Extension classes, respectively, from the imported modules. The method returns this extended list for use in serialization and validation processes.\n\nReturns:\n    list: A list of tuples, each representing a property of the DomainResource for serialization.\n\nDependencies:\n    - resource.Resource: The base class providing foundational resource properties.\n    - extension.Extension: Defines the structure for additional content in the resource.\n    - narrative.Narrative: Represents the text summary for human interpretation.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/evidencevariable.py:EvidenceVariable:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/evidencevariable.py:EvidenceVariable:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/evidencevariable_test.py:EvidenceVariableTests:testEvidenceVariable1": {
      "tests/models/evidencevariable_test.py:EvidenceVariableTests:instantiate_from": {
        "fhirclient/models/evidencevariable.py:EvidenceVariable:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/evidencevariable.py:EvidenceVariable:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/evidencevariable_test.py:EvidenceVariableTests:implEvidenceVariable1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/evidencevariable.py:EvidenceVariable:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/evidencevariable.py:EvidenceVariable:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/evidencevariable.py:EvidenceVariable:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/evidencevariable_test.py:EvidenceVariableTests:instantiate_from": {
      "fhirclient/models/evidencevariable.py:EvidenceVariable:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/evidencevariable.py:EvidenceVariable:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-evidencevariable_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 evidencevariable.py\n        \u2502   \u251c\u2500\u2500 EvidenceVariable.__init__\n        \u2502   \u2514\u2500\u2500 EvidenceVariable.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and interact with FHIR EvidenceVariable resources, which are used to define criteria and characteristics for evidence-based clinical data. It provides functionality to instantiate and verify EvidenceVariable JSON data, ensuring conformity to the FHIR standard. By supporting operations like validation of resource metadata, structure, and key attributes, the module facilitates the handling and testing of EvidenceVariable resources in healthcare data systems. This solves the challenge of ensuring interoperability and correctness in clinical and research applications that rely on standardized data formats, helping developers and systems maintain data integrity and adherence to FHIR specifications.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from. It checks if the provided JSON dictionary contains a valid `resourceType` that matches the class's expected `resource_type`. If the `resourceType` does not match, an exception is raised.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing the resource data, expected to include a 'resourceType' key. If provided, its value must match this class's `resource_type`.\n- strict (bool, optional): Determines if strict validation is enforced for the resource data (default is True).\n\nAttributes:\n- _server (FHIRServer or None): Internal attribute to hold the server instance that the resource was retrieved from.\n\nRaises:\n- Exception: If `jsondict` is provided and its `resourceType` does not match the `resource_type` of this class.\n\nThis constructor depends on the superclass `FHIRAbstractBase`, whose constructor is called to handle the JSON dictionary, allowing standard initialization of attributes defined in that base class.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nTransforms the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to include the `resourceType` attribute specific to the resource class. It takes no parameters and returns a dictionary representing the resource, including the additional `resourceType` key set to the class-specific `resource_type`.\n\nDependencies:\n- Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to retrieve the base JSON representation before adding the `resourceType`.\n- The class attribute `resource_type`, defined as 'FHIRAbstractResource', indicates the type of FHIR resource and is added to the resulting JSON.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRAbstractBase class, which serves as an abstract base for all FHIR elements. This constructor allows the instantiation of FHIR elements from a JSON dictionary. The `jsondict` parameter can be provided to initialize the instance's attributes based on its contents. If the `strict` parameter is set to True (default), any validation errors during the update process will raise a `FHIRValidationError`; if False, warnings will be logged instead.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data used for initializing the instance. If None, the instance is created with default attribute values.\n- strict (bool, optional): A flag to control error handling behavior. If True, the constructor raises errors on invalid data; if False, issues are logged as warnings.\n\nAttributes:\n- _resolved: A dictionary to store resolved resources, initialized to None.\n- _owner: A reference to the parent resource, initialized to None.\n\nInteractions:\nThe method calls `update_with_json` to populate the instance with data from `jsondict`, applying strict validation rules based on the `strict` parameter's value. This function raises or handles `FHIRValidationError` instances depending on the `strict` setting.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal method to instantiate an element from a given JSON dictionary.\n\nThis method checks that the input is a dictionary and raises a `TypeError` if it is not. Upon successful validation, it creates and returns an instance of the class using the provided JSON data.\n\nParameters:\n- jsondict (dict): A dictionary containing data to instantiate the class.\n\nReturns:\n- An instance of the class created from the provided dictionary data.\n\nRaises:\n- TypeError: If the input `jsondict` is not of type `dict`.\n- FHIRValidationError: If the instantiation from the dictionary fails (though instantiation itself does not occur here).\n\nThis method interacts with the FHIRAbstractBase class and relies on the constructor of the class to be properly defined for instantiation.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the provided value matches the expected type.\n\nParameters:\n- value: The value to be checked against the type.\n- typ: The expected type to check against. Can be any valid type.\n\nReturns:\n- bool: True if the value is of the expected type, False otherwise.\n\nNotes:\n- If the value is None, it automatically returns True, allowing for optional fields.\n- It performs specific type checks to handle numeric types (int and float) and String types, considering backward compatibility with Python 2 by also checking for unicode.\n- The function utilizes the `sys` module to determine the Python version in use, enhancing cross-version compatibility.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes FHIR elements from a JSON representation while associating them with an owner resource. This method extends the functionality of `with_json()` to ensure that each instantiated element records its parent resource, facilitating the resolution of contained resources later.\n\n:param jsonobj: A JSON dictionary or a list of dictionaries representing the data to instantiate from.\n:param FHIRElement owner: The parent resource that owns the instantiated elements, utilized for resolving contained resources.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If the instantiation of elements fails due to validation errors.\n:returns: An instance or a list of instances created from the provided JSON data, with each instance having its `_owner` attribute set to the provided owner.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples, each representing a property that should be serialized from the FHIR element. Each tuple contains the following information: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional). This method serves as a blueprint for subclasses to define their specific properties for serialization to JSON format. \n\nThe returned list allows the `as_json()` method to validate and serialize the properties correctly, ensuring that required fields are present and of the correct type. By default, it returns an empty list, indicating that no properties are set in the abstract base class. Subclasses should override this method to provide their own implementation.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class or a list of instances from the provided JSON dictionary or array. If a single dictionary is passed, it calls the internal method `_with_json_dict` to handle the instantiation. When given a list, it attempts to instantiate each dictionary in the list, collecting instances in an array, and raising a prefixed FHIRValidationError if any instantiation fails.\n\nParameters:\n- jsonobj (dict or list of dicts): A JSON dictionary or an array of JSON dictionaries from which instances are created.\n\nReturns:\n- An instance of the receiving class if a single JSON dictionary is provided, or a list of instances if a list of dictionaries is provided.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If any errors occur during the instantiation of the JSON data.\n\nDependencies:\n- This method relies on the `_with_json_dict` method for handling individual JSON dictionaries. The `FHIRValidationError` class is used to manage validation errors during instantiation, ensuring errors are properly reported and can be traced back to the specific input causing the issue.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current FHIR element instance to a JSON dictionary by inspecting its registered properties through `elementProperties()`. This method ensures that all required properties are present and correctly typed before constructing the output dictionary. It raises a `FHIRValidationError` if any properties have the wrong type or if required properties are missing.\n\nThe method iterates over the properties defined in `elementProperties()`, checking each one's type and presence. It collects errors in the `errs` list if any issues arise during the serialization process. The returned dictionary can be directly serialized to JSON, while keeping track of required versus optional properties via the `nonoptionals` set.\n\nReturns:\n    dict: A validated dictionary representation of the instance capable of being JSON serialized.\n\nRaises:\n    FHIRValidationError: If properties are incorrectly typed or required properties are absent.\n\nConstants and Variables:\n- `errs`: A list to accumulate errors encountered during serialization.\n- `found`: A set to track which properties have been successfully included in the JSON representation.\n- `nonoptionals`: A set to track required properties that must have values assigned.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdates the current instance of the FHIRAbstractBase class with data from a provided JSON dictionary.\n\n:param dict jsondict: A JSON dictionary containing data to update the instance. If the input is None, no action is taken. Raises a FHIRValidationError if the input is not a dictionary or if validation errors occur during the update process. \n:raises FHIRValidationError: If `jsondict` is not a dictionary or if there are validation errors related to property types or missing non-optional properties.\n:returns: None on success; if errors are encountered, they will be raised within the exception.\nThe method iterates over properties defined by the `elementProperties()` method, checking for types and validating values. It also tracks valid property names and keeps track of any non-optional properties that are missing. Errors encountered along the way are collected and raised as FHIRValidationError, which may contain nested validation errors for clearer debugging.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/evidencevariable.py\n\n- CLASS METHOD: EvidenceVariable.__init__\n  - CLASS SIGNATURE: class EvidenceVariable(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an EvidenceVariable resource, representing a population, intervention, or exposure definition. This constructor sets up various properties related to the evidence variable, including metadata like approval dates, authors, descriptions, effective periods, and characteristics describing the evidence members.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial property values for the EvidenceVariable.\n- strict (bool, optional): If True (default), will raise a FHIRValidationError on invalid properties; if False, allows for more leniency on property validation.\n\nAttributes:\n- approvalDate (str): Date when the evidence variable was approved.\n- author (list of ContactDetail): Authors of the content.\n- characteristic (list of EvidenceVariableCharacteristic): Defines the members of the evidence element.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Publishing restrictions.\n- date (str): Last modification date.\n- description (str): Natural language description of the evidence variable.\n- editor (list of ContactDetail): Editors of the content.\n- effectivePeriod (Period): Valid time period for the evidence variable.\n- endorser (list of ContactDetail): Endorsers of the content.\n- identifier (list of Identifier): Additional identifiers for the evidence variable.\n- jurisdiction (list of CodeableConcept): Intended jurisdictions for the evidence variable.\n- lastReviewDate (str): Last review date of the evidence variable.\n- name (str): Computer-friendly name for the evidence variable.\n- note (list of Annotation): Footnotes or explanatory notes.\n- publisher (str): Name of the publisher (individual or organization).\n- relatedArtifact (list of RelatedArtifact): Additional documentation or citations.\n- reviewer (list of ContactDetail): Reviewers of the content.\n- shortTitle (str): Informal context title.\n- status (str): Current status (e.g., draft, active).\n- subtitle (str): Subordinate title.\n- title (str): Human-friendly name for this evidence variable.\n- topic (list of CodeableConcept): Categories relevant to the evidence variable.\n- type (str): Type of evidence variable (e.g., dichotomous, continuous).\n- url (str): Canonical URI identifier for the evidence variable.\n- useContext (list of UsageContext): Contexts the content is intended to support.\n- version (str): Business version of the evidence variable.\n\nThis class derives from `DomainResource`, ensuring functionalities from that base class are also available in this context.\n\"\"\"\n```\n\n- CLASS METHOD: EvidenceVariable.elementProperties\n  - CLASS SIGNATURE: class EvidenceVariable(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of properties for the EvidenceVariable resource instance, detailing its attributes and their expected types. This method overrides the `elementProperties` method from the parent `DomainResource` class, adding specific attributes related to the EvidenceVariable, such as `approvalDate`, `author`, `characteristic`, and others. Each property is defined as a tuple containing the attribute name, JSON key, expected type, whether the attribute is repeated, and any relevant representation context.\n\nThe method relies on external classes for type definitions, including `FHIRDate`, `ContactDetail`, `EvidenceVariableCharacteristic`, `Period`, `CodeableConcept`, and others, which are imported from their respective modules. These types ensure proper structure and validation for the corresponding attributes.\n\nReturns:\n    - List[Tuple]: A list of tuples that define the properties of the EvidenceVariable resource.\n\nRaises:\n    - None: The method itself does not raise exceptions but utilizes the inherited validation mechanism.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of property definitions for the Resource class, including the logical id, implicit rules, language, and metadata. This method extends the properties returned by the superclass (FHIRAbstractResource) with specific attributes related to FHIR resources. \n\nEach property is represented as a tuple containing the following elements: the attribute name, the corresponding key in the JSON dictionary, the data type, whether the property is required, whether it allows multiple values, and whether it is an abbreviated data type. Notably, the `meta` property uses the `Meta` class imported from the `meta` module, which represents metadata about the resource.\n\nReturns:\n    list: A list of tuples defining the properties of the Resource.\n\nDependencies:\n    - meta.Meta: Class defining metadata structure related to FHIR resources.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new Resource instance.\n\nThis constructor initializes the basic properties of a FHIR Resource, including its logical ID, implicit rules, language, and metadata. If a JSON dictionary is provided, it will be used to initialize these properties. The strict parameter determines whether to raise a TypeError on validation errors.\n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If provided, it will populate the instance with values corresponding to the defined attributes.\n- strict (bool, default=True): If True, invalid properties in the JSON dictionary will raise a TypeError. If False, such errors will be ignored, allowing for non-strict validation.\n\nAttributes:\n- id (str): The logical identifier of the resource.\n- implicitRules (str): A set of rules under which this resource was created.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata about the resource, represented as a dictionary in JSON.\n\nThis class is a part of the FHIR 4.0.1 specification and inherits from the FHIRAbstractResource class. It relies on the meta module for the Meta data structure.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the properties of the DomainResource class in terms of their JSON serialization requirements.\n\nThis method extends the base properties of the parent Resource class by adding specific properties for a DomainResource. It constructs a list of tuples where each tuple describes a property, its associated JSON key, its expected type, whether it's required, and its cardinality. The properties included are 'contained', 'extension', 'modifierExtension', and 'text'. The 'contained' and 'extension' properties reference the Resource and Extension classes, respectively, from the imported modules. The method returns this extended list for use in serialization and validation processes.\n\nReturns:\n    list: A list of tuples, each representing a property of the DomainResource for serialization.\n\nDependencies:\n    - resource.Resource: The base class providing foundational resource properties.\n    - extension.Extension: Defines the structure for additional content in the resource.\n    - narrative.Narrative: Represents the text summary for human interpretation.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource capable of containing narrative text, extensions, and other resources. The constructor allows for the initialization of standard resource properties through a JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the resource properties. Defaults to None.\n- strict (bool, optional): If True (default), invalid property assignments will raise a TypeError; otherwise, they will be ignored.\n\nRaises:\n- FHIRValidationError: Raised on validation errors if strict is True.\n\nAttributes:\n- contained (list of Resource items): Inline resources contained within this resource.\n- extension (list of Extension items): Additional content defined by implementations.\n- modifierExtension (list of Extension items): Critical extensions that are essential for understanding the resource, and cannot be ignored.\n- text (Narrative): A human-readable narrative that provides a summary of the resource.\n\nThis class extends the base Resource class from the `resource` module, ensuring compatibility with the FHIR standard.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/evidencevariable.py": "from . import domainresource\n\nclass EvidenceVariable(domainresource.DomainResource):\n    \"\"\" A population, intervention, or exposure definition.\n    \n    The EvidenceVariable resource describes a \"PICO\" element that knowledge\n    (evidence, assertion, recommendation) is about.\n    \"\"\"\n    resource_type = 'EvidenceVariable'\nfrom . import backboneelement\n\nclass EvidenceVariableCharacteristic(backboneelement.BackboneElement):\n    \"\"\" What defines the members of the evidence element.\n    \n    A characteristic that defines the members of the evidence element. Multiple\n    characteristics are applied with \"and\" semantics.\n    \"\"\"\n    resource_type = 'EvidenceVariableCharacteristic'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.definitionCanonical = None\n        ' What code or expression defines members?.\\n        Type `str`. '\n        self.definitionCodeableConcept = None\n        ' What code or expression defines members?.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.definitionDataRequirement = None\n        ' What code or expression defines members?.\\n        Type `DataRequirement` (represented as `dict` in JSON). '\n        self.definitionExpression = None\n        ' What code or expression defines members?.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.definitionReference = None\n        ' What code or expression defines members?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.definitionTriggerDefinition = None\n        ' What code or expression defines members?.\\n        Type `TriggerDefinition` (represented as `dict` in JSON). '\n        self.description = None\n        ' Natural language description of the characteristic.\\n        Type `str`. '\n        self.exclude = None\n        ' Whether the characteristic includes or excludes members.\\n        Type `bool`. '\n        self.groupMeasure = None\n        ' mean | median | mean-of-mean | mean-of-median | median-of-mean |\\n        median-of-median.\\n        Type `str`. '\n        self.participantEffectiveDateTime = None\n        ' What time period do participants cover.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.participantEffectiveDuration = None\n        ' What time period do participants cover.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.participantEffectivePeriod = None\n        ' What time period do participants cover.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.participantEffectiveTiming = None\n        ' What time period do participants cover.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.timeFromStart = None\n        ' Observation time from study start.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.usageContext = None\n        ' What code/value pairs define members?.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        super(EvidenceVariableCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EvidenceVariableCharacteristic, self).elementProperties()\n        js.extend([('definitionCanonical', 'definitionCanonical', str, False, 'definition', True), ('definitionCodeableConcept', 'definitionCodeableConcept', codeableconcept.CodeableConcept, False, 'definition', True), ('definitionDataRequirement', 'definitionDataRequirement', datarequirement.DataRequirement, False, 'definition', True), ('definitionExpression', 'definitionExpression', expression.Expression, False, 'definition', True), ('definitionReference', 'definitionReference', fhirreference.FHIRReference, False, 'definition', True), ('definitionTriggerDefinition', 'definitionTriggerDefinition', triggerdefinition.TriggerDefinition, False, 'definition', True), ('description', 'description', str, False, None, False), ('exclude', 'exclude', bool, False, None, False), ('groupMeasure', 'groupMeasure', str, False, None, False), ('participantEffectiveDateTime', 'participantEffectiveDateTime', fhirdatetime.FHIRDateTime, False, 'participantEffective', False), ('participantEffectiveDuration', 'participantEffectiveDuration', duration.Duration, False, 'participantEffective', False), ('participantEffectivePeriod', 'participantEffectivePeriod', period.Period, False, 'participantEffective', False), ('participantEffectiveTiming', 'participantEffectiveTiming', timing.Timing, False, 'participantEffective', False), ('timeFromStart', 'timeFromStart', duration.Duration, False, None, False), ('usageContext', 'usageContext', usagecontext.UsageContext, True, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative"
  }
}