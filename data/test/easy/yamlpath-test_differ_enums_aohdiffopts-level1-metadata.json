{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_differ_enums_aohdiffopts",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_differ_enums_aohdiffopts.py",
  "test_code": "import pytest\n\nfrom yamlpath.differ.enums.aohdiffopts import AoHDiffOpts\n\n\nclass Test_differ_enums_aohdiffopts():\n\t\"\"\"Tests for the AoHDiffOpts enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert AoHDiffOpts.get_names() == [\n\t\t\t\"DEEP\",\n\t\t\t\"DPOS\",\n\t\t\t\"KEY\",\n\t\t\t\"POSITION\",\n\t\t\t\"VALUE\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert AoHDiffOpts.get_choices() == [\n\t\t\t\"deep\",\n\t\t\t\"dpos\",\n\t\t\t\"key\",\n\t\t\t\"position\",\n\t\t\t\"value\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"DEEP\", AoHDiffOpts.DEEP),\n\t\t(\"DPOS\", AoHDiffOpts.DPOS),\n\t\t(\"KEY\", AoHDiffOpts.KEY),\n\t\t(\"POSITION\", AoHDiffOpts.POSITION),\n\t\t(\"VALUE\", AoHDiffOpts.VALUE),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == AoHDiffOpts.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tAoHDiffOpts.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/differ/enums/aohdiffopts.py": "\"\"\"\nImplements the AoHDiffOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass AoHDiffOpts(Enum):\n    \"\"\"\n    Supported Array-of-Hash (AKA: List-of-Dictionaries) Diff Options.\n\n    Options include:\n\n    `DEEP`\n        Like KEY except the record pairs are deeply traversed, looking for\n        specific internal differences, after being matched up.\n\n    `DPOS`\n        Like POSITION (no KEY matching) except the record pairs are deeply\n        traversed to report every specific difference between them.\n\n    `KEY`\n        AoH records are synchronized by their identity key before being\n        compared as whole units (no deep traversal).\n\n    `POSITION`\n        AoH records are compared as whole units (no deep traversal) based on\n        their ordinal position in each document.\n\n    `VALUE`\n        AoH records are synchronized as whole units (no deep traversal) before\n        being compared.\n    \"\"\"\n\n    DEEP = auto()\n    DPOS = auto()\n    KEY = auto()\n    POSITION = auto()\n    VALUE = auto()\n\n    def __str__(self) -> str:\n        \"\"\"\n        Stringify one instance of this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (str) String value of this enumeration.\n\n        Raises:  N/A\n        \"\"\"\n        return str(self.name).lower()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in AoHDiffOpts]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in AoHDiffOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"AoHDiffOpts\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (AoHDiffOpts) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in AoHDiffOpts.get_names():\n            return AoHDiffOpts[check]\n        raise NameError(\n            \"AoHDiffOpts has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/differ/enums/aohdiffopts.py": {
      "AoHDiffOpts.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Retrieve all the entry names of the AoHDiffOpts enumeration in upper-case format.\n\nThis method does not take any parameters and returns a list of strings representing the names of the enumeration entries, converted to upper-case. It interacts with the `AoHDiffOpts` enumeration to gather these names, leveraging the `entry.name` attribute of the `Enum` class. This method is useful for obtaining standardized names that can be utilized in user interfaces or logging.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in AoHDiffOpts]",
        "docstring": "Retrieve all the entry names of the AoHDiffOpts enumeration in upper-case format.\n\nThis method does not take any parameters and returns a list of strings representing the names of the enumeration entries, converted to upper-case. It interacts with the `AoHDiffOpts` enumeration to gather these names, leveraging the `entry.name` attribute of the `Enum` class. This method is useful for obtaining standardized names that can be utilized in user interfaces or logging.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class AoHDiffOpts(Enum):"
      },
      "AoHDiffOpts.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Retrieve a list of symbolic representations (lower-cased) for all enumeration entries in AoHDiffOpts.\n\nThis method utilizes the `get_names` static method to obtain the upper-cased names of the enumeration entries, converts them to lowercase, removes any duplicates, and then sorts the result. It serves as a convenient way to access all available options in a user-friendly format.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names representing the enumeration entries.\n\nThis method relies on the `get_names` method to retrieve the original entry names. No parameters are required, and there are no side effects.\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in AoHDiffOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Retrieve a list of symbolic representations (lower-cased) for all enumeration entries in AoHDiffOpts.\n\nThis method utilizes the `get_names` static method to obtain the upper-cased names of the enumeration entries, converts them to lowercase, removes any duplicates, and then sorts the result. It serves as a convenient way to access all available options in a user-friendly format.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names representing the enumeration entries.\n\nThis method relies on the `get_names` method to retrieve the original entry names. No parameters are required, and there are no side effects.",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class AoHDiffOpts(Enum):"
      },
      "AoHDiffOpts.from_str": {
        "code": "    def from_str(name: str) -> 'AoHDiffOpts':\n        \"\"\"Convert a string to an enumerated value of AoHDiffOpts if the name matches a valid entry.\n\nParameters:\n    name (str): The name to convert into an AoHDiffOpts enumeration value.\n\nReturns:\n    AoHDiffOpts: The corresponding enumeration value if the input name is valid.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `get_names()` static method of the AoHDiffOpts class, which returns a list of valid names in uppercase format for comparison. It ensures robust validation by checking the input string against these names before attempting to convert it to the enumeration.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (AoHDiffOpts) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in AoHDiffOpts.get_names():\n            return AoHDiffOpts[check]\n        raise NameError('AoHDiffOpts has no such item:  {}'.format(name))",
        "docstring": "Convert a string to an enumerated value of AoHDiffOpts if the name matches a valid entry.\n\nParameters:\n    name (str): The name to convert into an AoHDiffOpts enumeration value.\n\nReturns:\n    AoHDiffOpts: The corresponding enumeration value if the input name is valid.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `get_names()` static method of the AoHDiffOpts class, which returns a list of valid names in uppercase format for comparison. It ensures robust validation by checking the input string against these names before attempting to convert it to the enumeration.",
        "signature": "def from_str(name: str) -> 'AoHDiffOpts':",
        "type": "Method",
        "class_signature": "class AoHDiffOpts(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_choices": {},
    "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_differ_enums_aohdiffopts\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 differ/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 aohdiffopts.py\n                \u251c\u2500\u2500 AoHDiffOpts.from_str\n                \u251c\u2500\u2500 AoHDiffOpts.get_choices\n                \u2514\u2500\u2500 AoHDiffOpts.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate the behavior of the `AoHDiffOpts` enumeration, which defines options for managing differences in arrays of hashes. It ensures that the enumeration provides accurate mappings between option names and their corresponding values, and verifies its ability to handle string-based input conversions to enumeration members. By offering a reliable way to test the integrity and functionality of these operations, the module helps developers confidently utilize the enumeration for tasks requiring structured comparisons. This eliminates potential errors and ensures consistency when working with array-of-hash difference operations in applications or libraries.\n\n## FILE 1: yamlpath/differ/enums/aohdiffopts.py\n\n- CLASS METHOD: AoHDiffOpts.get_names\n  - CLASS SIGNATURE: class AoHDiffOpts(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve all the entry names of the AoHDiffOpts enumeration in upper-case format.\n\nThis method does not take any parameters and returns a list of strings representing the names of the enumeration entries, converted to upper-case. It interacts with the `AoHDiffOpts` enumeration to gather these names, leveraging the `entry.name` attribute of the `Enum` class. This method is useful for obtaining standardized names that can be utilized in user interfaces or logging.\n\"\"\"\n```\n\n- CLASS METHOD: AoHDiffOpts.from_str\n  - CLASS SIGNATURE: class AoHDiffOpts(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'AoHDiffOpts':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string to an enumerated value of AoHDiffOpts if the name matches a valid entry.\n\nParameters:\n    name (str): The name to convert into an AoHDiffOpts enumeration value.\n\nReturns:\n    AoHDiffOpts: The corresponding enumeration value if the input name is valid.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values.\n\nThis method interacts with the `get_names()` static method of the AoHDiffOpts class, which returns a list of valid names in uppercase format for comparison. It ensures robust validation by checking the input string against these names before attempting to convert it to the enumeration.\n\"\"\"\n```\n\n- CLASS METHOD: AoHDiffOpts.get_choices\n  - CLASS SIGNATURE: class AoHDiffOpts(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a list of symbolic representations (lower-cased) for all enumeration entries in AoHDiffOpts.\n\nThis method utilizes the `get_names` static method to obtain the upper-cased names of the enumeration entries, converts them to lowercase, removes any duplicates, and then sorts the result. It serves as a convenient way to access all available options in a user-friendly format.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names representing the enumeration entries.\n\nThis method relies on the `get_names` method to retrieve the original entry names. No parameters are required, and there are no side effects.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/differ/enums/aohdiffopts.py": "\"\"\"\nImplements the AoHDiffOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass AoHDiffOpts(Enum):\n    \"\"\"\n    Supported Array-of-Hash (AKA: List-of-Dictionaries) Diff Options.\n\n    Options include:\n\n    `DEEP`\n        Like KEY except the record pairs are deeply traversed, looking for\n        specific internal differences, after being matched up.\n\n    `DPOS`\n        Like POSITION (no KEY matching) except the record pairs are deeply\n        traversed to report every specific difference between them.\n\n    `KEY`\n        AoH records are synchronized by their identity key before being\n        compared as whole units (no deep traversal).\n\n    `POSITION`\n        AoH records are compared as whole units (no deep traversal) based on\n        their ordinal position in each document.\n\n    `VALUE`\n        AoH records are synchronized as whole units (no deep traversal) before\n        being compared.\n    \"\"\"\n    DEEP = auto()\n    DPOS = auto()\n    KEY = auto()\n    POSITION = auto()\n    VALUE = auto()\n\n    def __str__(self) -> str:\n        \"\"\"\n        Stringify one instance of this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (str) String value of this enumeration.\n\n        Raises:  N/A\n        \"\"\"\n        return str(self.name).lower()"
  },
  "call_tree": {
    "tests/test_differ_enums_aohdiffopts.py:Test_differ_enums_aohdiffopts:test_get_names": {
      "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_names": {}
    },
    "tests/test_differ_enums_aohdiffopts.py:Test_differ_enums_aohdiffopts:test_get_choices": {
      "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_choices": {
        "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_names": {}
      }
    },
    "tests/test_differ_enums_aohdiffopts.py:Test_differ_enums_aohdiffopts:test_from_str": {
      "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:from_str": {
        "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_names": {}
      }
    },
    "tests/test_differ_enums_aohdiffopts.py:Test_differ_enums_aohdiffopts:test_from_str_nameerror": {
      "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:from_str": {
        "yamlpath/differ/enums/aohdiffopts.py:AoHDiffOpts:get_names": {}
      }
    }
  }
}