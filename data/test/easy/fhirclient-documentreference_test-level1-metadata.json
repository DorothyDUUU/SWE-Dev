{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-documentreference_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/documentreference_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import documentreference\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass DocumentReferenceTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"DocumentReference\", js[\"resourceType\"])\n        return documentreference.DocumentReference(js)\n    \n    def testDocumentReference1(self):\n        inst = self.instantiate_from(\"documentreference-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a DocumentReference instance\")\n        self.implDocumentReference1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"DocumentReference\", js[\"resourceType\"])\n        inst2 = documentreference.DocumentReference(js)\n        self.implDocumentReference1(inst2)\n    \n    def implDocumentReference1(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"History and Physical\")\n        self.assertEqual(inst.category[0].coding[0].display, \"History and Physical\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://ihe.net/xds/connectathon/classCodes\")\n        self.assertEqual(inst.contained[0].id, \"a2\")\n        self.assertEqual(inst.content[0].attachment.contentType, \"application/hl7-v3+xml\")\n        self.assertEqual(inst.content[0].attachment.creation.datetime, FHIRDateTime(\"2005-12-24T09:35:00+11:00\").datetime)\n        self.assertEqual(inst.content[0].attachment.creation.as_json(), \"2005-12-24T09:35:00+11:00\")\n        self.assertEqual(inst.content[0].attachment.hash, \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\")\n        self.assertEqual(inst.content[0].attachment.language, \"en-US\")\n        self.assertEqual(inst.content[0].attachment.size, 3654)\n        self.assertEqual(inst.content[0].attachment.title, \"Physical\")\n        self.assertEqual(inst.content[0].attachment.url, \"http://example.org/xds/mhd/Binary/07a6483f-732b-461e-86b6-edb665c45510\")\n        self.assertEqual(inst.content[0].format.code, \"urn:ihe:pcc:handp:2008\")\n        self.assertEqual(inst.content[0].format.display, \"History and Physical Specification\")\n        self.assertEqual(inst.content[0].format.system, \"urn:oid:1.3.6.1.4.1.19376.1.2.3\")\n        self.assertEqual(inst.context.event[0].coding[0].code, \"T-D8200\")\n        self.assertEqual(inst.context.event[0].coding[0].display, \"Arm\")\n        self.assertEqual(inst.context.event[0].coding[0].system, \"http://ihe.net/xds/connectathon/eventCodes\")\n        self.assertEqual(inst.context.facilityType.coding[0].code, \"Outpatient\")\n        self.assertEqual(inst.context.facilityType.coding[0].display, \"Outpatient\")\n        self.assertEqual(inst.context.facilityType.coding[0].system, \"http://www.ihe.net/xds/connectathon/healthcareFacilityTypeCodes\")\n        self.assertEqual(inst.context.period.end.datetime, FHIRDateTime(\"2004-12-23T08:01:00+11:00\").datetime)\n        self.assertEqual(inst.context.period.end.as_json(), \"2004-12-23T08:01:00+11:00\")\n        self.assertEqual(inst.context.period.start.datetime, FHIRDateTime(\"2004-12-23T08:00:00+11:00\").datetime)\n        self.assertEqual(inst.context.period.start.as_json(), \"2004-12-23T08:00:00+11:00\")\n        self.assertEqual(inst.context.practiceSetting.coding[0].code, \"General Medicine\")\n        self.assertEqual(inst.context.practiceSetting.coding[0].display, \"General Medicine\")\n        self.assertEqual(inst.context.practiceSetting.coding[0].system, \"http://www.ihe.net/xds/connectathon/practiceSettingCodes\")\n        self.assertEqual(inst.date.datetime, FHIRInstant(\"2005-12-24T09:43:41+11:00\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2005-12-24T09:43:41+11:00\")\n        self.assertEqual(inst.description, \"Physical\")\n        self.assertEqual(inst.docStatus, \"preliminary\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.1234\")\n        self.assertEqual(inst.masterIdentifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.masterIdentifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatesTo[0].code, \"appends\")\n        self.assertEqual(inst.securityLabel[0].coding[0].code, \"V\")\n        self.assertEqual(inst.securityLabel[0].coding[0].display, \"very restricted\")\n        self.assertEqual(inst.securityLabel[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-Confidentiality\")\n        self.assertEqual(inst.status, \"current\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"34108-1\")\n        self.assertEqual(inst.type.coding[0].display, \"Outpatient Note\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n\n",
  "GT_file_code": {
    "fhirclient/models/documentreference.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DocumentReference).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass DocumentReference(domainresource.DomainResource):\n    \"\"\" A reference to a document.\n    \n    A reference to a document of any kind for any purpose. Provides metadata\n    about the document so that the document can be discovered and managed. The\n    scope of a document is any seralized object with a mime-type, so includes\n    formal patient centric documents (CDA), cliical notes, scanned paper, and\n    non-patient specific documents like policy text.\n    \"\"\"\n    \n    resource_type = \"DocumentReference\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.authenticator = None\n        \"\"\" Who/what authenticated the document.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who and/or what authored the document.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Categorization of document.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.content = None\n        \"\"\" Document referenced.\n        List of `DocumentReferenceContent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.context = None\n        \"\"\" Clinical context of document.\n        Type `DocumentReferenceContext` (represented as `dict` in JSON). \"\"\"\n        \n        self.custodian = None\n        \"\"\" Organization which maintains the document.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" When this document reference was created.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Human-readable description.\n        Type `str`. \"\"\"\n        \n        self.docStatus = None\n        \"\"\" preliminary | final | amended | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Other identifiers for the document.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.masterIdentifier = None\n        \"\"\" Master Version Specific Identifier.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.relatesTo = None\n        \"\"\" Relationships to other documents.\n        List of `DocumentReferenceRelatesTo` items (represented as `dict` in JSON). \"\"\"\n        \n        self.securityLabel = None\n        \"\"\" Document security-tags.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" current | superseded | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Who/what is the subject of the document.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Kind of document (LOINC if possible).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(DocumentReference, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DocumentReference, self).elementProperties()\n        js.extend([\n            (\"authenticator\", \"authenticator\", fhirreference.FHIRReference, False, None, False),\n            (\"author\", \"author\", fhirreference.FHIRReference, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, True, None, False),\n            (\"content\", \"content\", DocumentReferenceContent, True, None, True),\n            (\"context\", \"context\", DocumentReferenceContext, False, None, False),\n            (\"custodian\", \"custodian\", fhirreference.FHIRReference, False, None, False),\n            (\"date\", \"date\", fhirinstant.FHIRInstant, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"docStatus\", \"docStatus\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"masterIdentifier\", \"masterIdentifier\", identifier.Identifier, False, None, False),\n            (\"relatesTo\", \"relatesTo\", DocumentReferenceRelatesTo, True, None, False),\n            (\"securityLabel\", \"securityLabel\", codeableconcept.CodeableConcept, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass DocumentReferenceContent(backboneelement.BackboneElement):\n    \"\"\" Document referenced.\n    \n    The document and format referenced. There may be multiple content element\n    repetitions, each with a different format.\n    \"\"\"\n    \n    resource_type = \"DocumentReferenceContent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.attachment = None\n        \"\"\" Where to access the document.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.format = None\n        \"\"\" Format/content rules for the document.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        super(DocumentReferenceContent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DocumentReferenceContent, self).elementProperties()\n        js.extend([\n            (\"attachment\", \"attachment\", attachment.Attachment, False, None, True),\n            (\"format\", \"format\", coding.Coding, False, None, False),\n        ])\n        return js\n\n\nclass DocumentReferenceContext(backboneelement.BackboneElement):\n    \"\"\" Clinical context of document.\n    \n    The clinical context in which the document was prepared.\n    \"\"\"\n    \n    resource_type = \"DocumentReferenceContext\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.encounter = None\n        \"\"\" Context of the document  content.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.event = None\n        \"\"\" Main clinical acts documented.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.facilityType = None\n        \"\"\" Kind of facility where patient was seen.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" Time of service that is being documented.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.practiceSetting = None\n        \"\"\" Additional details about where the content was created (e.g.\n        clinical specialty).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.related = None\n        \"\"\" Related identifiers or resources.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.sourcePatientInfo = None\n        \"\"\" Patient demographics from source.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(DocumentReferenceContext, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DocumentReferenceContext, self).elementProperties()\n        js.extend([\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, True, None, False),\n            (\"event\", \"event\", codeableconcept.CodeableConcept, True, None, False),\n            (\"facilityType\", \"facilityType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"practiceSetting\", \"practiceSetting\", codeableconcept.CodeableConcept, False, None, False),\n            (\"related\", \"related\", fhirreference.FHIRReference, True, None, False),\n            (\"sourcePatientInfo\", \"sourcePatientInfo\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass DocumentReferenceRelatesTo(backboneelement.BackboneElement):\n    \"\"\" Relationships to other documents.\n    \n    Relationships that this document has with other document references that\n    already exist.\n    \"\"\"\n    \n    resource_type = \"DocumentReferenceRelatesTo\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" replaces | transforms | signs | appends.\n        Type `str`. \"\"\"\n        \n        self.target = None\n        \"\"\" Target of the relationship.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(DocumentReferenceRelatesTo, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DocumentReferenceRelatesTo, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"target\", \"target\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for instant\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/documentreference.py": {
      "DocumentReference.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DocumentReference instance.\n\nThe `__init__` method sets up all valid properties for a FHIR DocumentReference resource. It takes an optional JSON dictionary for initialization and a strict flag that determines whether validation errors will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing key-value pairs to initialize the DocumentReference properties. Each property corresponds to the metadata of the document.\n- strict (bool, optional): If set to True (default), invalid properties in the jsondict will raise a TypeError during initialization.\n\nAttributes initialized include:\n- authenticator: Reference to the entity that authenticated the document.\n- author: A list of references to the authors of the document.\n- category: A list of categorizations for the document.\n- content: A list of content elements that reference document data.\n- context: Clinical context information for the document.\n- custodian: Reference to the organization maintaining the document.\n- date: Timestamp of when this document reference was created.\n- description: A human-readable description of the document.\n- docStatus: The status of the document (e.g., preliminary, final).\n- identifier: A list of other identifiers associated with the document.\n- masterIdentifier: The main identifier for the document version.\n- relatesTo: Relationships with other document references.\n- securityLabel: Security classifications associated with the document.\n- status: Current status of the document (e.g., current, superseded).\n- subject: Reference to the subject or patient related to the document.\n- type: A classification code for the document.\n\nThe method calls the superclass `__init__` from `DomainResource` to ensure proper initialization of inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.authenticator = None\n        ' Who/what authenticated the document.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.author = None\n        ' Who and/or what authored the document.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.category = None\n        ' Categorization of document.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.content = None\n        ' Document referenced.\\n        List of `DocumentReferenceContent` items (represented as `dict` in JSON). '\n        self.context = None\n        ' Clinical context of document.\\n        Type `DocumentReferenceContext` (represented as `dict` in JSON). '\n        self.custodian = None\n        ' Organization which maintains the document.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.date = None\n        ' When this document reference was created.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.description = None\n        ' Human-readable description.\\n        Type `str`. '\n        self.docStatus = None\n        ' preliminary | final | amended | entered-in-error.\\n        Type `str`. '\n        self.identifier = None\n        ' Other identifiers for the document.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.masterIdentifier = None\n        ' Master Version Specific Identifier.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.relatesTo = None\n        ' Relationships to other documents.\\n        List of `DocumentReferenceRelatesTo` items (represented as `dict` in JSON). '\n        self.securityLabel = None\n        ' Document security-tags.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.status = None\n        ' current | superseded | entered-in-error.\\n        Type `str`. '\n        self.subject = None\n        ' Who/what is the subject of the document.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' Kind of document (LOINC if possible).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(DocumentReference, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DocumentReference instance.\n\nThe `__init__` method sets up all valid properties for a FHIR DocumentReference resource. It takes an optional JSON dictionary for initialization and a strict flag that determines whether validation errors will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing key-value pairs to initialize the DocumentReference properties. Each property corresponds to the metadata of the document.\n- strict (bool, optional): If set to True (default), invalid properties in the jsondict will raise a TypeError during initialization.\n\nAttributes initialized include:\n- authenticator: Reference to the entity that authenticated the document.\n- author: A list of references to the authors of the document.\n- category: A list of categorizations for the document.\n- content: A list of content elements that reference document data.\n- context: Clinical context information for the document.\n- custodian: Reference to the organization maintaining the document.\n- date: Timestamp of when this document reference was created.\n- description: A human-readable description of the document.\n- docStatus: The status of the document (e.g., preliminary, final).\n- identifier: A list of other identifiers associated with the document.\n- masterIdentifier: The main identifier for the document version.\n- relatesTo: Relationships with other document references.\n- securityLabel: Security classifications associated with the document.\n- status: Current status of the document (e.g., current, superseded).\n- subject: Reference to the subject or patient related to the document.\n- type: A classification code for the document.\n\nThe method calls the superclass `__init__` from `DomainResource` to ensure proper initialization of inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DocumentReference(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a value, this method will return that value; otherwise, it falls back to returning the standardized ISO 8601 string representation of the internal date. The property accesses `origval`, which stores the original JSON input, and uses the `isostring` property if `origval` is `None`. This method is useful for retrieving the exact input JSON string when working with FHIR date objects, ensuring compatibility with external systems.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a value, this method will return that value; otherwise, it falls back to returning the standardized ISO 8601 string representation of the internal date. The property accesses `origval`, which stores the original JSON input, and uses the `isostring` property if `origval` is `None`. This method is useful for retrieving the exact input JSON string when working with FHIR date objects, ensuring compatibility with external systems.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirinstant.py": {
      "FHIRInstant.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRInstant object.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date-time value in ISO 8601 format. It can also be None if no value is provided.\n\nThis constructor initializes the `datetime` attribute to None and calls the parent class (FHIRDate) constructor with the provided `jsonval`. The `datetime` attribute is intended to hold a Python representation of the FHIR date-time, though it is not set in this initializer and remains None until processed. The class relies on the FHIRDate base class for parsing and managing FHIR date-time formats.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRInstant object.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date-time value in ISO 8601 format. It can also be None if no value is provided.\n\nThis constructor initializes the `datetime` attribute to None and calls the parent class (FHIRDate) constructor with the provided `jsonval`. The `datetime` attribute is intended to hold a Python representation of the FHIR date-time, though it is not set in this initializer and remains None until processed. The class relies on the FHIRDate base class for parsing and managing FHIR date-time formats.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRInstant(FHIRDate):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance, which extends the FHIRDate class to facilitate working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in JSON format. If None, initializes without a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A Python datetime object that represents the parsed FHIR datetime. It is initialized to None and will be set based on the parsing of jsonval.\n  \nThis constructor also calls the superclass (FHIRDate) constructor with the jsonval parameter, enabling compatibility with existing FHIRDate functionality.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance, which extends the FHIRDate class to facilitate working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in JSON format. If None, initializes without a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A Python datetime object that represents the parsed FHIR datetime. It is initialized to None and will be set based on the parsing of jsonval.\n  \nThis constructor also calls the superclass (FHIRDate) constructor with the jsonval parameter, enabling compatibility with existing FHIRDate functionality.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the `as_json` method of the parent class, \nadding a 'resourceType' key to the resulting JSON dictionary, which \nis set to the class's `resource_type` attribute. \n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding its attributes and the 'resourceType' entry.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the `as_json` method of the parent class, \nadding a 'resourceType' key to the resulting JSON dictionary, which \nis set to the class's `resource_type` attribute. \n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding its attributes and the 'resourceType' entry.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/documentreference.py:DocumentReference:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/documentreference_test.py:DocumentReferenceTests:testDocumentReference1": {
      "tests/models/documentreference_test.py:DocumentReferenceTests:instantiate_from": {
        "fhirclient/models/documentreference.py:DocumentReference:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/documentreference.py:DocumentReference:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/documentreference_test.py:DocumentReferenceTests:implDocumentReference1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/documentreference.py:DocumentReference:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/documentreference.py:DocumentReference:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/documentreference.py:DocumentReference:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/documentreference_test.py:DocumentReferenceTests:instantiate_from": {
      "fhirclient/models/documentreference.py:DocumentReference:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/documentreference.py:DocumentReference:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-documentreference_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 documentreference.py\n        \u2502   \u2514\u2500\u2500 DocumentReference.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 fhirinstant.py\n            \u2514\u2500\u2500 FHIRInstant.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe DocumentReference module is designed to handle and validate FHIR-compliant DocumentReference resources, which represent references to clinical documents within healthcare systems. The module provides functionality to parse, instantiate, and serialize DocumentReference resources in accordance with the FHIR standard, facilitating interoperability and secure exchange of medical documentation. By ensuring these resources adhere to predefined data structures and validation criteria, this module helps developers and healthcare applications manage complex, structured clinical data such as diagnostic notes, outpatient records, or care summaries. It addresses the need for reliable, standardized documentation handling within the broader ecosystem of health IT systems, improving data quality and compatibility across platforms.\n\n## FILE 1: fhirclient/models/documentreference.py\n\n- CLASS METHOD: DocumentReference.__init__\n  - CLASS SIGNATURE: class DocumentReference(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DocumentReference instance.\n\nThe `__init__` method sets up all valid properties for a FHIR DocumentReference resource. It takes an optional JSON dictionary for initialization and a strict flag that determines whether validation errors will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing key-value pairs to initialize the DocumentReference properties. Each property corresponds to the metadata of the document.\n- strict (bool, optional): If set to True (default), invalid properties in the jsondict will raise a TypeError during initialization.\n\nAttributes initialized include:\n- authenticator: Reference to the entity that authenticated the document.\n- author: A list of references to the authors of the document.\n- category: A list of categorizations for the document.\n- content: A list of content elements that reference document data.\n- context: Clinical context information for the document.\n- custodian: Reference to the organization maintaining the document.\n- date: Timestamp of when this document reference was created.\n- description: A human-readable description of the document.\n- docStatus: The status of the document (e.g., preliminary, final).\n- identifier: A list of other identifiers associated with the document.\n- masterIdentifier: The main identifier for the document version.\n- relatesTo: Relationships with other document references.\n- securityLabel: Security classifications associated with the document.\n- status: Current status of the document (e.g., current, superseded).\n- subject: Reference to the subject or patient related to the document.\n- type: A classification code for the document.\n\nThe method calls the superclass `__init__` from `DomainResource` to ensure proper initialization of inherited properties.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the instance was initialized with a value, this method will return that value; otherwise, it falls back to returning the standardized ISO 8601 string representation of the internal date. The property accesses `origval`, which stores the original JSON input, and uses the `isostring` property if `origval` is `None`. This method is useful for retrieving the exact input JSON string when working with FHIR date objects, ensuring compatibility with external systems.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirinstant.py\n\n- CLASS METHOD: FHIRInstant.__init__\n  - CLASS SIGNATURE: class FHIRInstant(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRInstant object.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date-time value in ISO 8601 format. It can also be None if no value is provided.\n\nThis constructor initializes the `datetime` attribute to None and calls the parent class (FHIRDate) constructor with the provided `jsonval`. The `datetime` attribute is intended to hold a Python representation of the FHIR date-time, though it is not set in this initializer and remains None until processed. The class relies on the FHIRDate base class for parsing and managing FHIR date-time formats.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance, which extends the FHIRDate class to facilitate working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in JSON format. If None, initializes without a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A Python datetime object that represents the parsed FHIR datetime. It is initialized to None and will be set based on the parsing of jsonval.\n  \nThis constructor also calls the superclass (FHIRDate) constructor with the jsonval parameter, enabling compatibility with existing FHIRDate functionality.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON dictionary format.\n\nThis method overrides the `as_json` method of the parent class, \nadding a 'resourceType' key to the resulting JSON dictionary, which \nis set to the class's `resource_type` attribute. \n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding its attributes and the 'resourceType' entry.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/documentreference.py": "from . import domainresource\n\nclass DocumentReference(domainresource.DomainResource):\n    \"\"\" A reference to a document.\n    \n    A reference to a document of any kind for any purpose. Provides metadata\n    about the document so that the document can be discovered and managed. The\n    scope of a document is any seralized object with a mime-type, so includes\n    formal patient centric documents (CDA), cliical notes, scanned paper, and\n    non-patient specific documents like policy text.\n    \"\"\"\n    resource_type = 'DocumentReference'\n\n    def elementProperties(self):\n        js = super(DocumentReference, self).elementProperties()\n        js.extend([('authenticator', 'authenticator', fhirreference.FHIRReference, False, None, False), ('author', 'author', fhirreference.FHIRReference, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('content', 'content', DocumentReferenceContent, True, None, True), ('context', 'context', DocumentReferenceContext, False, None, False), ('custodian', 'custodian', fhirreference.FHIRReference, False, None, False), ('date', 'date', fhirinstant.FHIRInstant, False, None, False), ('description', 'description', str, False, None, False), ('docStatus', 'docStatus', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('masterIdentifier', 'masterIdentifier', identifier.Identifier, False, None, False), ('relatesTo', 'relatesTo', DocumentReferenceRelatesTo, True, None, False), ('securityLabel', 'securityLabel', codeableconcept.CodeableConcept, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass DocumentReferenceContent(backboneelement.BackboneElement):\n    \"\"\" Document referenced.\n    \n    The document and format referenced. There may be multiple content element\n    repetitions, each with a different format.\n    \"\"\"\n    resource_type = 'DocumentReferenceContent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.attachment = None\n        ' Where to access the document.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.format = None\n        ' Format/content rules for the document.\\n        Type `Coding` (represented as `dict` in JSON). '\n        super(DocumentReferenceContent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DocumentReferenceContent, self).elementProperties()\n        js.extend([('attachment', 'attachment', attachment.Attachment, False, None, True), ('format', 'format', coding.Coding, False, None, False)])\n        return js\n\nclass DocumentReferenceContext(backboneelement.BackboneElement):\n    \"\"\" Clinical context of document.\n    \n    The clinical context in which the document was prepared.\n    \"\"\"\n    resource_type = 'DocumentReferenceContext'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.encounter = None\n        ' Context of the document  content.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.event = None\n        ' Main clinical acts documented.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.facilityType = None\n        ' Kind of facility where patient was seen.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.period = None\n        ' Time of service that is being documented.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.practiceSetting = None\n        ' Additional details about where the content was created (e.g.\\n        clinical specialty).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.related = None\n        ' Related identifiers or resources.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.sourcePatientInfo = None\n        ' Patient demographics from source.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(DocumentReferenceContext, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DocumentReferenceContext, self).elementProperties()\n        js.extend([('encounter', 'encounter', fhirreference.FHIRReference, True, None, False), ('event', 'event', codeableconcept.CodeableConcept, True, None, False), ('facilityType', 'facilityType', codeableconcept.CodeableConcept, False, None, False), ('period', 'period', period.Period, False, None, False), ('practiceSetting', 'practiceSetting', codeableconcept.CodeableConcept, False, None, False), ('related', 'related', fhirreference.FHIRReference, True, None, False), ('sourcePatientInfo', 'sourcePatientInfo', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass DocumentReferenceRelatesTo(backboneelement.BackboneElement):\n    \"\"\" Relationships to other documents.\n    \n    Relationships that this document has with other document references that\n    already exist.\n    \"\"\"\n    resource_type = 'DocumentReferenceRelatesTo'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' replaces | transforms | signs | appends.\\n        Type `str`. '\n        self.target = None\n        ' Target of the relationship.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(DocumentReferenceRelatesTo, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DocumentReferenceRelatesTo, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('target', 'target', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}