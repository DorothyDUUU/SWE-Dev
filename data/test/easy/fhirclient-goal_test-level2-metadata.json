{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-goal_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/goal_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import goal\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass GoalTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Goal\", js[\"resourceType\"])\n        return goal.Goal(js)\n    \n    def testGoal1(self):\n        inst = self.instantiate_from(\"goal-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Goal instance\")\n        self.implGoal1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Goal\", js[\"resourceType\"])\n        inst2 = goal.Goal(js)\n        self.implGoal1(inst2)\n    \n    def implGoal1(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"dietary\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/goal-category\")\n        self.assertEqual(inst.description.text, \"Target weight is 160 to 180 lbs.\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.lifecycleStatus, \"on-hold\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority.coding[0].code, \"high-priority\")\n        self.assertEqual(inst.priority.coding[0].display, \"High Priority\")\n        self.assertEqual(inst.priority.coding[0].system, \"http://terminology.hl7.org/CodeSystem/goal-priority\")\n        self.assertEqual(inst.priority.text, \"high\")\n        self.assertEqual(inst.startDate.date, FHIRDate(\"2015-04-05\").date)\n        self.assertEqual(inst.startDate.as_json(), \"2015-04-05\")\n        self.assertEqual(inst.statusDate.date, FHIRDate(\"2016-02-14\").date)\n        self.assertEqual(inst.statusDate.as_json(), \"2016-02-14\")\n        self.assertEqual(inst.statusReason, \"Patient wants to defer weight loss until after honeymoon.\")\n        self.assertEqual(inst.target[0].detailRange.high.code, \"[lb_av]\")\n        self.assertEqual(inst.target[0].detailRange.high.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.target[0].detailRange.high.unit, \"lbs\")\n        self.assertEqual(inst.target[0].detailRange.high.value, 180)\n        self.assertEqual(inst.target[0].detailRange.low.code, \"[lb_av]\")\n        self.assertEqual(inst.target[0].detailRange.low.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.target[0].detailRange.low.unit, \"lbs\")\n        self.assertEqual(inst.target[0].detailRange.low.value, 160)\n        self.assertEqual(inst.target[0].dueDate.date, FHIRDate(\"2016-04-05\").date)\n        self.assertEqual(inst.target[0].dueDate.as_json(), \"2016-04-05\")\n        self.assertEqual(inst.target[0].measure.coding[0].code, \"3141-9\")\n        self.assertEqual(inst.target[0].measure.coding[0].display, \"Weight Measured\")\n        self.assertEqual(inst.target[0].measure.coding[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.text.status, \"additional\")\n    \n    def testGoal2(self):\n        inst = self.instantiate_from(\"goal-example-stop-smoking.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Goal instance\")\n        self.implGoal2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Goal\", js[\"resourceType\"])\n        inst2 = goal.Goal(js)\n        self.implGoal2(inst2)\n    \n    def implGoal2(self, inst):\n        self.assertEqual(inst.achievementStatus.coding[0].code, \"achieved\")\n        self.assertEqual(inst.achievementStatus.coding[0].display, \"Achieved\")\n        self.assertEqual(inst.achievementStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/goal-achievement\")\n        self.assertEqual(inst.achievementStatus.text, \"Achieved\")\n        self.assertEqual(inst.description.text, \"Stop smoking\")\n        self.assertEqual(inst.id, \"stop-smoking\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.lifecycleStatus, \"completed\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcomeCode[0].coding[0].code, \"8517006\")\n        self.assertEqual(inst.outcomeCode[0].coding[0].display, \"Ex-smoker (finding)\")\n        self.assertEqual(inst.outcomeCode[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.outcomeCode[0].text, \"Former smoker\")\n        self.assertEqual(inst.startDate.date, FHIRDate(\"2015-04-05\").date)\n        self.assertEqual(inst.startDate.as_json(), \"2015-04-05\")\n        self.assertEqual(inst.text.status, \"additional\")\n\n",
  "GT_file_code": {
    "fhirclient/models/goal.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Goal).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Goal(domainresource.DomainResource):\n    \"\"\" Describes the intended objective(s) for a patient, group or organization.\n    \n    Describes the intended objective(s) for a patient, group or organization\n    care, for example, weight loss, restoring an activity of daily living,\n    obtaining herd immunity via immunization, meeting a process improvement\n    objective, etc.\n    \"\"\"\n    \n    resource_type = \"Goal\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.achievementStatus = None\n        \"\"\" in-progress | improving | worsening | no-change | achieved |\n        sustaining | not-achieved | no-progress | not-attainable.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.addresses = None\n        \"\"\" Issues addressed by this goal.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" E.g. Treatment, dietary, behavioral, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Code or text describing goal.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.expressedBy = None\n        \"\"\" Who's responsible for creating Goal?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External Ids for this goal.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lifecycleStatus = None\n        \"\"\" proposed | planned | accepted | active | on-hold | completed |\n        cancelled | entered-in-error | rejected.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Comments about the goal.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.outcomeCode = None\n        \"\"\" What result was achieved regarding the goal?.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.outcomeReference = None\n        \"\"\" Observation that resulted from goal.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" high-priority | medium-priority | low-priority.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.startCodeableConcept = None\n        \"\"\" When goal pursuit begins.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.startDate = None\n        \"\"\" When goal pursuit begins.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.statusDate = None\n        \"\"\" When goal status took effect.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.statusReason = None\n        \"\"\" Reason for current status.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Who this goal is intended for.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" Target outcome for the goal.\n        List of `GoalTarget` items (represented as `dict` in JSON). \"\"\"\n        \n        super(Goal, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Goal, self).elementProperties()\n        js.extend([\n            (\"achievementStatus\", \"achievementStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"addresses\", \"addresses\", fhirreference.FHIRReference, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, True, None, False),\n            (\"description\", \"description\", codeableconcept.CodeableConcept, False, None, True),\n            (\"expressedBy\", \"expressedBy\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"lifecycleStatus\", \"lifecycleStatus\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"outcomeCode\", \"outcomeCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"outcomeReference\", \"outcomeReference\", fhirreference.FHIRReference, True, None, False),\n            (\"priority\", \"priority\", codeableconcept.CodeableConcept, False, None, False),\n            (\"startCodeableConcept\", \"startCodeableConcept\", codeableconcept.CodeableConcept, False, \"start\", False),\n            (\"startDate\", \"startDate\", fhirdate.FHIRDate, False, \"start\", False),\n            (\"statusDate\", \"statusDate\", fhirdate.FHIRDate, False, None, False),\n            (\"statusReason\", \"statusReason\", str, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"target\", \"target\", GoalTarget, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass GoalTarget(backboneelement.BackboneElement):\n    \"\"\" Target outcome for the goal.\n    \n    Indicates what should be done by when.\n    \"\"\"\n    \n    resource_type = \"GoalTarget\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.detailBoolean = None\n        \"\"\" The target value to be achieved.\n        Type `bool`. \"\"\"\n        \n        self.detailCodeableConcept = None\n        \"\"\" The target value to be achieved.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailInteger = None\n        \"\"\" The target value to be achieved.\n        Type `int`. \"\"\"\n        \n        self.detailQuantity = None\n        \"\"\" The target value to be achieved.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailRange = None\n        \"\"\" The target value to be achieved.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailRatio = None\n        \"\"\" The target value to be achieved.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailString = None\n        \"\"\" The target value to be achieved.\n        Type `str`. \"\"\"\n        \n        self.dueDate = None\n        \"\"\" Reach goal on or before.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.dueDuration = None\n        \"\"\" Reach goal on or before.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.measure = None\n        \"\"\" The parameter whose value is being tracked.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(GoalTarget, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GoalTarget, self).elementProperties()\n        js.extend([\n            (\"detailBoolean\", \"detailBoolean\", bool, False, \"detail\", False),\n            (\"detailCodeableConcept\", \"detailCodeableConcept\", codeableconcept.CodeableConcept, False, \"detail\", False),\n            (\"detailInteger\", \"detailInteger\", int, False, \"detail\", False),\n            (\"detailQuantity\", \"detailQuantity\", quantity.Quantity, False, \"detail\", False),\n            (\"detailRange\", \"detailRange\", range.Range, False, \"detail\", False),\n            (\"detailRatio\", \"detailRatio\", ratio.Ratio, False, \"detail\", False),\n            (\"detailString\", \"detailString\", str, False, \"detail\", False),\n            (\"dueDate\", \"dueDate\", fhirdate.FHIRDate, False, \"due\", False),\n            (\"dueDuration\", \"dueDuration\", duration.Duration, False, \"due\", False),\n            (\"measure\", \"measure\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirdate\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import range\nfrom . import ratio\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/goal.py": {
      "Goal.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Goal resource, which represents the intended objectives for a patient, group, or organization within a healthcare context.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the properties of the Goal instance. If provided, it should conform to the FHIR specification for a Goal.\n- strict (bool, optional): If True (default), raises FHIRValidationError on validation errors encountered during initialization. If False, validation errors are suppressed.\n\nAttributes:\n- achievementStatus (CodeableConcept): Indicates the current status of goal achievement (e.g., in-progress, achieved).\n- addresses (list of FHIRReference): Issues that this goal addresses.\n- category (list of CodeableConcept): The type of goal, such as treatment or behavioral.\n- description (CodeableConcept): Textual description or code for the goal.\n- expressedBy (FHIRReference): The entity responsible for creating the goal.\n- identifier (list of Identifier): External identifiers associated with the goal.\n- lifecycleStatus (str): Current state of the goal (e.g., active, completed).\n- note (list of Annotation): Comments related to the goal.\n- outcomeCode (list of CodeableConcept): Outcomes that result from the goal.\n- outcomeReference (list of FHIRReference): Observations associated with the goal's outcomes.\n- priority (CodeableConcept): The priority level of the goal (e.g., high, medium, low).\n- startCodeableConcept (CodeableConcept): Indicates when goal pursuit begins.\n- startDate (FHIRDate): The date when pursuit of the goal starts.\n- statusDate (FHIRDate): The date when the current status was recorded.\n- statusReason (str): Reason for the current lifecycle status of the goal.\n- subject (FHIRReference): The individual or entity for whom the goal is intended.\n- target (list of GoalTarget): Target outcomes that specify what is to be achieved and by when.\n\nThe Goal class inherits from the DomainResource class, allowing it to leverage common resource functionality while maintaining specific attributes related to healthcare goals.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.achievementStatus = None\n        ' in-progress | improving | worsening | no-change | achieved |\\n        sustaining | not-achieved | no-progress | not-attainable.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.addresses = None\n        ' Issues addressed by this goal.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.category = None\n        ' E.g. Treatment, dietary, behavioral, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Code or text describing goal.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.expressedBy = None\n        \" Who's responsible for creating Goal?.\\n        Type `FHIRReference` (represented as `dict` in JSON). \"\n        self.identifier = None\n        ' External Ids for this goal.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.lifecycleStatus = None\n        ' proposed | planned | accepted | active | on-hold | completed |\\n        cancelled | entered-in-error | rejected.\\n        Type `str`. '\n        self.note = None\n        ' Comments about the goal.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.outcomeCode = None\n        ' What result was achieved regarding the goal?.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.outcomeReference = None\n        ' Observation that resulted from goal.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' high-priority | medium-priority | low-priority.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.startCodeableConcept = None\n        ' When goal pursuit begins.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.startDate = None\n        ' When goal pursuit begins.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.statusDate = None\n        ' When goal status took effect.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.statusReason = None\n        ' Reason for current status.\\n        Type `str`. '\n        self.subject = None\n        ' Who this goal is intended for.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.target = None\n        ' Target outcome for the goal.\\n        List of `GoalTarget` items (represented as `dict` in JSON). '\n        super(Goal, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Goal resource, which represents the intended objectives for a patient, group, or organization within a healthcare context.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the properties of the Goal instance. If provided, it should conform to the FHIR specification for a Goal.\n- strict (bool, optional): If True (default), raises FHIRValidationError on validation errors encountered during initialization. If False, validation errors are suppressed.\n\nAttributes:\n- achievementStatus (CodeableConcept): Indicates the current status of goal achievement (e.g., in-progress, achieved).\n- addresses (list of FHIRReference): Issues that this goal addresses.\n- category (list of CodeableConcept): The type of goal, such as treatment or behavioral.\n- description (CodeableConcept): Textual description or code for the goal.\n- expressedBy (FHIRReference): The entity responsible for creating the goal.\n- identifier (list of Identifier): External identifiers associated with the goal.\n- lifecycleStatus (str): Current state of the goal (e.g., active, completed).\n- note (list of Annotation): Comments related to the goal.\n- outcomeCode (list of CodeableConcept): Outcomes that result from the goal.\n- outcomeReference (list of FHIRReference): Observations associated with the goal's outcomes.\n- priority (CodeableConcept): The priority level of the goal (e.g., high, medium, low).\n- startCodeableConcept (CodeableConcept): Indicates when goal pursuit begins.\n- startDate (FHIRDate): The date when pursuit of the goal starts.\n- statusDate (FHIRDate): The date when the current status was recorded.\n- statusReason (str): Reason for the current lifecycle status of the goal.\n- subject (FHIRReference): The individual or entity for whom the goal is intended.\n- target (list of GoalTarget): Target outcomes that specify what is to be achieved and by when.\n\nThe Goal class inherits from the DomainResource class, allowing it to leverage common resource functionality while maintaining specific attributes related to healthcare goals.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Goal(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDate instance, converting an optional JSON date string into a Python date representation.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format or None. If provided, it must match the expected format defined by the regular expression _REGEX. If the string is a partial date, it will be parsed into the earliest possible full date (e.g., \"2024\" becomes \"2024-01-01\").\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as per the _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date object representing the parsed date.\n- origval (Union[str, None]): The original JSON string used to initialize the instance.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression that matches valid ISO 8601 date formats, ensuring input validation for the jsonval parameter.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes a FHIRDate instance, converting an optional JSON date string into a Python date representation.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format or None. If provided, it must match the expected format defined by the regular expression _REGEX. If the string is a partial date, it will be parsed into the earliest possible full date (e.g., \"2024\" becomes \"2024-01-01\").\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as per the _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date object representing the parsed date.\n- origval (Union[str, None]): The original JSON string used to initialize the instance.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression that matches valid ISO 8601 date formats, ensuring input validation for the jsonval parameter.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets an attribute for the FHIRDate instance, with special handling for the `date` property. If the property being set is either `date` or the constant `_FIELD` (which is also set to \"date\"), the `origval` attribute is cleared to None, ensuring that the original value does not persist when updating the date. This method maintains synchronization between the `date` attribute and the internal representation defined by `_FIELD`. For any other attributes, it behaves like the default `__setattr__`, allowing normal attribute assignment.\n\nParameters:\n- prop (str): The name of the property to set.\n- value (Any): The value to assign to the property specified by `prop`.\n\nSide Effects:\n- If `prop` is `date` or `_FIELD`, it modifies the `origval` attribute and synchronizes the `date` attribute with the new value.\n\nConstants:\n- `_FIELD`: A class-level string constant defined as \"date\" used for identifying the primary date attribute within the class.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets an attribute for the FHIRDate instance, with special handling for the `date` property. If the property being set is either `date` or the constant `_FIELD` (which is also set to \"date\"), the `origval` attribute is cleared to None, ensuring that the original value does not persist when updating the date. This method maintains synchronization between the `date` attribute and the internal representation defined by `_FIELD`. For any other attributes, it behaves like the default `__setattr__`, allowing normal attribute assignment.\n\nParameters:\n- prop (str): The name of the property to set.\n- value (Any): The value to assign to the property specified by `prop`.\n\nSide Effects:\n- If `prop` is `date` or `_FIELD`, it modifies the `origval` attribute and synchronizes the `date` attribute with the new value.\n\nConstants:\n- `_FIELD`: A class-level string constant defined as \"date\" used for identifying the primary date attribute within the class.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance, if available. If not, it will provide a standardized ISO 8601 string representation of the date. This method interacts with the `origval` attribute, which stores the original input string, and the `isostring` property that normalizes the date into ISO 8601 format. The `isostring` may alter partial dates like \"2024\" into \"2024-01-01\" to maintain compatibility with Python's date handling.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance, if available. If not, it will provide a standardized ISO 8601 string representation of the date. This method interacts with the `origval` attribute, which stores the original input string, and the `isostring` property that normalizes the date into ISO 8601 format. The `isostring` may alter partial dates like \"2024\" into \"2024-01-01\" to maintain compatibility with Python's date handling.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate._from_string": {
        "code": "    def _from_string(value: str) -> Any:\n        \"\"\"Converts an ISO 8601 date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in ISO 8601 format. It must comply with the regex pattern defined in the class to ensure it is in a valid format.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nThis method utilizes the `_parse_date` static method, which further relies on the `_parse_partial` method to handle partial dates with reduced precision and convert them to a complete `datetime.date`. The `_REGEX` constant is used for validating the input date format. If the format of the input string does not match the expected pattern, an exception will be raised.\"\"\"\n        return FHIRDate._parse_date(value)",
        "docstring": "Converts an ISO 8601 date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in ISO 8601 format. It must comply with the regex pattern defined in the class to ensure it is in a valid format.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nThis method utilizes the `_parse_date` static method, which further relies on the `_parse_partial` method to handle partial dates with reduced precision and convert them to a complete `datetime.date`. The `_REGEX` constant is used for validating the input date format. If the format of the input string does not match the expected pattern, an exception will be raised.",
        "signature": "def _from_string(value: str) -> Any:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance of the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are populated and checks that the types of the properties are correct before serialization. \n\nRaises `FHIRValidationError` if any properties have incorrect types or if required properties are missing. The method maintains two sets: `found`, which tracks the properties that have been included in the JSON output, and `nonoptionals`, which holds properties that are mandatory. A check is performed at the end to ensure all non-optional properties have been provided.\n\nReturns a validated dictionary that can be directly converted to JSON.\n\nDependencies:\n- `elementProperties()`: This method defines the attributes of the class that will be serialized, providing their names, JSON names, types, and constraints (like whether they are lists or mandatory).\n- `_matches_type()`: This is used to validate the types of the properties being serialized.\n\nAttributes:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list that collects any encountered errors during serialization.\n- `found` and `nonoptionals`: Sets used to track found properties and mandatory properties, respectively.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance of the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are populated and checks that the types of the properties are correct before serialization. \n\nRaises `FHIRValidationError` if any properties have incorrect types or if required properties are missing. The method maintains two sets: `found`, which tracks the properties that have been included in the JSON output, and `nonoptionals`, which holds properties that are mandatory. A check is performed at the end to ensure all non-optional properties have been provided.\n\nReturns a validated dictionary that can be directly converted to JSON.\n\nDependencies:\n- `elementProperties()`: This method defines the attributes of the class that will be serialized, providing their names, JSON names, types, and constraints (like whether they are lists or mandatory).\n- `_matches_type()`: This is used to validate the types of the properties being serialized.\n\nAttributes:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list that collects any encountered errors during serialization.\n- `found` and `nonoptionals`: Sets used to track found properties and mandatory properties, respectively.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the `FHIRAbstractResource` instance into a JSON representation.\n\nThis method calls the parent class's `as_json` method to obtain a base JSON dictionary and then adds the `resourceType` key, setting its value to the class's `resource_type`. This is essential for ensuring that the serialized representation correctly indicates the type of resource when being sent to a FHIR server or used in other contexts.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the resource, including the `resourceType`.\n    \nDependencies:\n    - The method relies on `super().as_json()` being able to generate a base JSON dictionary based on the attributes defined in the parent class, `FHIRAbstractBase`.\n    - The `resource_type` class attribute, which is set to 'FHIRAbstractResource', is critical for correctly labeling the resource type in the JSON output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the `FHIRAbstractResource` instance into a JSON representation.\n\nThis method calls the parent class's `as_json` method to obtain a base JSON dictionary and then adds the `resourceType` key, setting its value to the class's `resource_type`. This is essential for ensuring that the serialized representation correctly indicates the type of resource when being sent to a FHIR server or used in other contexts.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the resource, including the `resourceType`.\n    \nDependencies:\n    - The method relies on `super().as_json()` being able to generate a base JSON dictionary based on the attributes defined in the parent class, `FHIRAbstractBase`.\n    - The `resource_type` class attribute, which is set to 'FHIRAbstractResource', is critical for correctly labeling the resource type in the JSON output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. The properties include:\n  - contained: List of contained resources represented as dictionaries.\n  - extension: List of additional content extensions.\n  - modifierExtension: List of extensions that cannot be ignored.\n  - text: A summary of the resource for human interpretation, represented as a Narrative type dictionary.\n- strict (bool, default=True): If True, validation errors will raise a FHIRValidationError. If False, invalid variables will not raise an error.\n\nThis constructor calls the parent class's constructor from `resource.Resource`, enabling proper initialization of inherited properties. The resource type is set to \"DomainResource\", and it also prepares the instance to handle contained resources, extensions, and textual summaries effectively.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. The properties include:\n  - contained: List of contained resources represented as dictionaries.\n  - extension: List of additional content extensions.\n  - modifierExtension: List of extensions that cannot be ignored.\n  - text: A summary of the resource for human interpretation, represented as a Narrative type dictionary.\n- strict (bool, default=True): If True, validation errors will raise a FHIRValidationError. If False, invalid variables will not raise an error.\n\nThis constructor calls the parent class's constructor from `resource.Resource`, enabling proper initialization of inherited properties. The resource type is set to \"DomainResource\", and it also prepares the instance to handle contained resources, extensions, and textual summaries effectively.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/goal.py:Goal:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate._parse_date": {
          "code": "    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)",
          "docstring": "",
          "signature": "def _parse_date(value: str) -> datetime.date:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/goal.py": {
        "Goal.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(Goal, self).elementProperties()\n        js.extend([('achievementStatus', 'achievementStatus', codeableconcept.CodeableConcept, False, None, False), ('addresses', 'addresses', fhirreference.FHIRReference, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('description', 'description', codeableconcept.CodeableConcept, False, None, True), ('expressedBy', 'expressedBy', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('lifecycleStatus', 'lifecycleStatus', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('outcomeCode', 'outcomeCode', codeableconcept.CodeableConcept, True, None, False), ('outcomeReference', 'outcomeReference', fhirreference.FHIRReference, True, None, False), ('priority', 'priority', codeableconcept.CodeableConcept, False, None, False), ('startCodeableConcept', 'startCodeableConcept', codeableconcept.CodeableConcept, False, 'start', False), ('startDate', 'startDate', fhirdate.FHIRDate, False, 'start', False), ('statusDate', 'statusDate', fhirdate.FHIRDate, False, None, False), ('statusReason', 'statusReason', str, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('target', 'target', GoalTarget, True, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class Goal(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/goal_test.py:GoalTests:testGoal1": {
      "tests/models/goal_test.py:GoalTests:instantiate_from": {
        "fhirclient/models/goal.py:Goal:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/goal.py:Goal:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/goal_test.py:GoalTests:implGoal1": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/goal.py:Goal:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/goal.py:Goal:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/goal.py:Goal:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/goal_test.py:GoalTests:instantiate_from": {
      "fhirclient/models/goal.py:Goal:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/goal.py:Goal:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/goal_test.py:GoalTests:testGoal2": {
      "tests/models/goal_test.py:GoalTests:instantiate_from": {
        "fhirclient/models/goal.py:Goal:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/goal.py:Goal:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/goal_test.py:GoalTests:implGoal2": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/goal.py:Goal:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/goal.py:Goal:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/goal.py:Goal:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-goal_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u251c\u2500\u2500 FHIRDate._from_string\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 goal.py\n            \u2514\u2500\u2500 Goal.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and processing of FHIR Goal resources by interacting with the FHIR specification defined in SMART Health IT standards. Its primary purpose is to enable developers and systems to create, validate, and test instances of Goal resources, ensuring compliance with the FHIR 4.0.1 standard. The module provides functionality for instantiating Goals from JSON representations, validating their structure and data against predefined criteria, and extracting or comparing key attributes, such as descriptions, priorities, achievement statuses, and target metrics (e.g., weight or smoking cessation milestones). This ensures data integrity and uniformity, addressing the challenge of reliably managing and verifying Goal resource instances within healthcare applications.\n\n## FILE 1: fhirclient/models/goal.py\n\n- CLASS METHOD: Goal.__init__\n  - CLASS SIGNATURE: class Goal(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Goal resource, which represents the intended objectives for a patient, group, or organization within a healthcare context.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the properties of the Goal instance. If provided, it should conform to the FHIR specification for a Goal.\n- strict (bool, optional): If True (default), raises FHIRValidationError on validation errors encountered during initialization. If False, validation errors are suppressed.\n\nAttributes:\n- achievementStatus (CodeableConcept): Indicates the current status of goal achievement (e.g., in-progress, achieved).\n- addresses (list of FHIRReference): Issues that this goal addresses.\n- category (list of CodeableConcept): The type of goal, such as treatment or behavioral.\n- description (CodeableConcept): Textual description or code for the goal.\n- expressedBy (FHIRReference): The entity responsible for creating the goal.\n- identifier (list of Identifier): External identifiers associated with the goal.\n- lifecycleStatus (str): Current state of the goal (e.g., active, completed).\n- note (list of Annotation): Comments related to the goal.\n- outcomeCode (list of CodeableConcept): Outcomes that result from the goal.\n- outcomeReference (list of FHIRReference): Observations associated with the goal's outcomes.\n- priority (CodeableConcept): The priority level of the goal (e.g., high, medium, low).\n- startCodeableConcept (CodeableConcept): Indicates when goal pursuit begins.\n- startDate (FHIRDate): The date when pursuit of the goal starts.\n- statusDate (FHIRDate): The date when the current status was recorded.\n- statusReason (str): Reason for the current lifecycle status of the goal.\n- subject (FHIRReference): The individual or entity for whom the goal is intended.\n- target (list of GoalTarget): Target outcomes that specify what is to be achieved and by when.\n\nThe Goal class inherits from the DomainResource class, allowing it to leverage common resource functionality while maintaining specific attributes related to healthcare goals.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDate instance, converting an optional JSON date string into a Python date representation.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format or None. If provided, it must match the expected format defined by the regular expression _REGEX. If the string is a partial date, it will be parsed into the earliest possible full date (e.g., \"2024\" becomes \"2024-01-01\").\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as per the _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date object representing the parsed date.\n- origval (Union[str, None]): The original JSON string used to initialize the instance.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression that matches valid ISO 8601 date formats, ensuring input validation for the jsonval parameter.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate._from_string\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def _from_string(value: str) -> Any:\n  - DOCSTRING: \n```python\n\"\"\"\nConverts an ISO 8601 date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in ISO 8601 format. It must comply with the regex pattern defined in the class to ensure it is in a valid format.\n\nReturns:\n- Any: A `datetime.date` object representing the parsed date.\n\nThis method utilizes the `_parse_date` static method, which further relies on the `_parse_partial` method to handle partial dates with reduced precision and convert them to a complete `datetime.date`. The `_REGEX` constant is used for validating the input date format. If the format of the input string does not match the expected pattern, an exception will be raised.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance, if available. If not, it will provide a standardized ISO 8601 string representation of the date. This method interacts with the `origval` attribute, which stores the original input string, and the `isostring` property that normalizes the date into ISO 8601 format. The `isostring` may alter partial dates like \"2024\" into \"2024-01-01\" to maintain compatibility with Python's date handling.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets an attribute for the FHIRDate instance, with special handling for the `date` property. If the property being set is either `date` or the constant `_FIELD` (which is also set to \"date\"), the `origval` attribute is cleared to None, ensuring that the original value does not persist when updating the date. This method maintains synchronization between the `date` attribute and the internal representation defined by `_FIELD`. For any other attributes, it behaves like the default `__setattr__`, allowing normal attribute assignment.\n\nParameters:\n- prop (str): The name of the property to set.\n- value (Any): The value to assign to the property specified by `prop`.\n\nSide Effects:\n- If `prop` is `date` or `_FIELD`, it modifies the `origval` attribute and synchronizes the `date` attribute with the new value.\n\nConstants:\n- `_FIELD`: A class-level string constant defined as \"date\" used for identifying the primary date attribute within the class.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance of the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are populated and checks that the types of the properties are correct before serialization. \n\nRaises `FHIRValidationError` if any properties have incorrect types or if required properties are missing. The method maintains two sets: `found`, which tracks the properties that have been included in the JSON output, and `nonoptionals`, which holds properties that are mandatory. A check is performed at the end to ensure all non-optional properties have been provided.\n\nReturns a validated dictionary that can be directly converted to JSON.\n\nDependencies:\n- `elementProperties()`: This method defines the attributes of the class that will be serialized, providing their names, JSON names, types, and constraints (like whether they are lists or mandatory).\n- `_matches_type()`: This is used to validate the types of the properties being serialized.\n\nAttributes:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list that collects any encountered errors during serialization.\n- `found` and `nonoptionals`: Sets used to track found properties and mandatory properties, respectively.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the `FHIRAbstractResource` instance into a JSON representation.\n\nThis method calls the parent class's `as_json` method to obtain a base JSON dictionary and then adds the `resourceType` key, setting its value to the class's `resource_type`. This is essential for ensuring that the serialized representation correctly indicates the type of resource when being sent to a FHIR server or used in other contexts.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the resource, including the `resourceType`.\n    \nDependencies:\n    - The method relies on `super().as_json()` being able to generate a base JSON dictionary based on the attributes defined in the parent class, `FHIRAbstractBase`.\n    - The `resource_type` class attribute, which is set to 'FHIRAbstractResource', is critical for correctly labeling the resource type in the JSON output.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. The properties include:\n  - contained: List of contained resources represented as dictionaries.\n  - extension: List of additional content extensions.\n  - modifierExtension: List of extensions that cannot be ignored.\n  - text: A summary of the resource for human interpretation, represented as a Narrative type dictionary.\n- strict (bool, default=True): If True, validation errors will raise a FHIRValidationError. If False, invalid variables will not raise an error.\n\nThis constructor calls the parent class's constructor from `resource.Resource`, enabling proper initialization of inherited properties. The resource type is set to \"DomainResource\", and it also prepares the instance to handle contained resources, extensions, and textual summaries effectively.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/goal.py": "from . import domainresource\n\nclass Goal(domainresource.DomainResource):\n    \"\"\" Describes the intended objective(s) for a patient, group or organization.\n    \n    Describes the intended objective(s) for a patient, group or organization\n    care, for example, weight loss, restoring an activity of daily living,\n    obtaining herd immunity via immunization, meeting a process improvement\n    objective, etc.\n    \"\"\"\n    resource_type = 'Goal'\n\n    def elementProperties(self):\n        js = super(Goal, self).elementProperties()\n        js.extend([('achievementStatus', 'achievementStatus', codeableconcept.CodeableConcept, False, None, False), ('addresses', 'addresses', fhirreference.FHIRReference, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('description', 'description', codeableconcept.CodeableConcept, False, None, True), ('expressedBy', 'expressedBy', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('lifecycleStatus', 'lifecycleStatus', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('outcomeCode', 'outcomeCode', codeableconcept.CodeableConcept, True, None, False), ('outcomeReference', 'outcomeReference', fhirreference.FHIRReference, True, None, False), ('priority', 'priority', codeableconcept.CodeableConcept, False, None, False), ('startCodeableConcept', 'startCodeableConcept', codeableconcept.CodeableConcept, False, 'start', False), ('startDate', 'startDate', fhirdate.FHIRDate, False, 'start', False), ('statusDate', 'statusDate', fhirdate.FHIRDate, False, None, False), ('statusReason', 'statusReason', str, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('target', 'target', GoalTarget, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass GoalTarget(backboneelement.BackboneElement):\n    \"\"\" Target outcome for the goal.\n    \n    Indicates what should be done by when.\n    \"\"\"\n    resource_type = 'GoalTarget'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.detailBoolean = None\n        ' The target value to be achieved.\\n        Type `bool`. '\n        self.detailCodeableConcept = None\n        ' The target value to be achieved.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detailInteger = None\n        ' The target value to be achieved.\\n        Type `int`. '\n        self.detailQuantity = None\n        ' The target value to be achieved.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.detailRange = None\n        ' The target value to be achieved.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.detailRatio = None\n        ' The target value to be achieved.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.detailString = None\n        ' The target value to be achieved.\\n        Type `str`. '\n        self.dueDate = None\n        ' Reach goal on or before.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.dueDuration = None\n        ' Reach goal on or before.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.measure = None\n        ' The parameter whose value is being tracked.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(GoalTarget, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GoalTarget, self).elementProperties()\n        js.extend([('detailBoolean', 'detailBoolean', bool, False, 'detail', False), ('detailCodeableConcept', 'detailCodeableConcept', codeableconcept.CodeableConcept, False, 'detail', False), ('detailInteger', 'detailInteger', int, False, 'detail', False), ('detailQuantity', 'detailQuantity', quantity.Quantity, False, 'detail', False), ('detailRange', 'detailRange', range.Range, False, 'detail', False), ('detailRatio', 'detailRatio', ratio.Ratio, False, 'detail', False), ('detailString', 'detailString', str, False, 'detail', False), ('dueDate', 'dueDate', fhirdate.FHIRDate, False, 'due', False), ('dueDuration', 'dueDuration', duration.Duration, False, 'due', False), ('measure', 'measure', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirdate\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import range\nfrom . import ratio",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}