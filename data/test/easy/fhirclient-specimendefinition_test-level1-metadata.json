{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-specimendefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/specimendefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import specimendefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass SpecimenDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"SpecimenDefinition\", js[\"resourceType\"])\n        return specimendefinition.SpecimenDefinition(js)\n    \n    def testSpecimenDefinition1(self):\n        inst = self.instantiate_from(\"specimendefinition-example-serum-plasma.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a SpecimenDefinition instance\")\n        self.implSpecimenDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"SpecimenDefinition\", js[\"resourceType\"])\n        inst2 = specimendefinition.SpecimenDefinition(js)\n        self.implSpecimenDefinition1(inst2)\n    \n    def implSpecimenDefinition1(self, inst):\n        self.assertEqual(inst.id, \"2364\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.patientPreparation[0].text, \"12 hour fasting\")\n        self.assertEqual(inst.patientPreparation[1].coding[0].code, \"263678003\")\n        self.assertEqual(inst.patientPreparation[1].coding[0].display, \"At rest\")\n        self.assertEqual(inst.patientPreparation[1].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.timeAspect, \"preferrably morning time\")\n        self.assertEqual(inst.typeCollected.coding[0].code, \"122555007\")\n        self.assertEqual(inst.typeCollected.coding[0].display, \"Venous blood specimen\")\n        self.assertEqual(inst.typeCollected.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[0].container.cap.coding[0].code, \"yellow\")\n        self.assertEqual(inst.typeTested[0].container.cap.coding[0].display, \"yellow cap\")\n        self.assertEqual(inst.typeTested[0].container.cap.coding[0].system, \"urn:iso:std:iso:6710:2017\")\n        self.assertEqual(inst.typeTested[0].container.material.coding[0].code, \"61088005\")\n        self.assertEqual(inst.typeTested[0].container.material.coding[0].display, \"plastic\")\n        self.assertEqual(inst.typeTested[0].container.material.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[0].container.minimumVolumeQuantity.code, \"mL\")\n        self.assertEqual(inst.typeTested[0].container.minimumVolumeQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].container.minimumVolumeQuantity.unit, \"ml\")\n        self.assertEqual(inst.typeTested[0].container.minimumVolumeQuantity.value, 2)\n        self.assertEqual(inst.typeTested[0].container.type.coding[0].code, \"702281005\")\n        self.assertEqual(inst.typeTested[0].container.type.coding[0].display, \"Evacuated blood collection tube, thrombin/clot activator/gel separator\")\n        self.assertEqual(inst.typeTested[0].container.type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[0].handling[0].maxDuration.code, \"min\")\n        self.assertEqual(inst.typeTested[0].handling[0].maxDuration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[0].maxDuration.unit, \"minute\")\n        self.assertEqual(inst.typeTested[0].handling[0].maxDuration.value, 60)\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureQualifier.text, \"Ambient temperature\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.high.code, \"Cel\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.high.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.high.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.high.value, 25)\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.low.code, \"Cel\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.low.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.low.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[0].handling[0].temperatureRange.low.value, 15)\n        self.assertEqual(inst.typeTested[0].handling[1].maxDuration.code, \"h\")\n        self.assertEqual(inst.typeTested[0].handling[1].maxDuration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[1].maxDuration.unit, \"hour\")\n        self.assertEqual(inst.typeTested[0].handling[1].maxDuration.value, 8)\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureQualifier.text, \"Refrigerated temperature\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.high.code, \"Cel\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.high.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.high.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.high.value, 8)\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.low.code, \"Cel\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.low.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.low.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[0].handling[1].temperatureRange.low.value, 2)\n        self.assertEqual(inst.typeTested[0].preference, \"preferred\")\n        self.assertEqual(inst.typeTested[0].type.coding[0].code, \"119364003\")\n        self.assertEqual(inst.typeTested[0].type.coding[0].display, \"Serum specimen\")\n        self.assertEqual(inst.typeTested[0].type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[1].container.cap.coding[0].code, \"green\")\n        self.assertEqual(inst.typeTested[1].container.cap.coding[0].display, \"green cap\")\n        self.assertEqual(inst.typeTested[1].container.cap.coding[0].system, \"urn:iso:std:iso:6710:2017\")\n        self.assertEqual(inst.typeTested[1].container.material.coding[0].code, \"32039001\")\n        self.assertEqual(inst.typeTested[1].container.material.coding[0].display, \"glass\")\n        self.assertEqual(inst.typeTested[1].container.material.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[1].container.minimumVolumeQuantity.code, \"mL\")\n        self.assertEqual(inst.typeTested[1].container.minimumVolumeQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].container.minimumVolumeQuantity.unit, \"ml\")\n        self.assertEqual(inst.typeTested[1].container.minimumVolumeQuantity.value, 2)\n        self.assertEqual(inst.typeTested[1].container.type.coding[0].code, \"767390000\")\n        self.assertEqual(inst.typeTested[1].container.type.coding[0].display, \"Evacuated blood collection tube with heparin lithium and gel separator\")\n        self.assertEqual(inst.typeTested[1].container.type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.typeTested[1].handling[0].maxDuration.code, \"min\")\n        self.assertEqual(inst.typeTested[1].handling[0].maxDuration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[0].maxDuration.unit, \"minute\")\n        self.assertEqual(inst.typeTested[1].handling[0].maxDuration.value, 60)\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureQualifier.text, \"Ambient temperature\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.high.code, \"Cel\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.high.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.high.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.high.value, 25)\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.low.code, \"Cel\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.low.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.low.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[1].handling[0].temperatureRange.low.value, 15)\n        self.assertEqual(inst.typeTested[1].handling[1].maxDuration.code, \"h\")\n        self.assertEqual(inst.typeTested[1].handling[1].maxDuration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[1].maxDuration.unit, \"hour\")\n        self.assertEqual(inst.typeTested[1].handling[1].maxDuration.value, 8)\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureQualifier.text, \"Refrigerated temperature\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.high.code, \"Cel\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.high.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.high.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.high.value, 8)\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.low.code, \"Cel\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.low.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.low.unit, \"\u00b0C\")\n        self.assertEqual(inst.typeTested[1].handling[1].temperatureRange.low.value, 2)\n        self.assertEqual(inst.typeTested[1].preference, \"alternate\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[0].coding[0].code, \"insufficient\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[0].coding[0].display, \"insufficient specimen volume\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/rejection-criteria\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[1].coding[0].code, \"hemolized\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[1].coding[0].display, \"hemolized specimen\")\n        self.assertEqual(inst.typeTested[1].rejectionCriterion[1].coding[0].system, \"http://terminology.hl7.org/CodeSystem/rejection-criteria\")\n        self.assertEqual(inst.typeTested[1].type.coding[0].code, \"119361006\")\n        self.assertEqual(inst.typeTested[1].type.coding[0].display, \"Plasma specimen\")\n        self.assertEqual(inst.typeTested[1].type.coding[0].system, \"http://snomed.info/sct\")\n\n",
  "GT_file_code": {
    "fhirclient/models/specimendefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/SpecimenDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass SpecimenDefinition(domainresource.DomainResource):\n    \"\"\" Kind of specimen.\n    \n    A kind of specimen with associated set of requirements.\n    \"\"\"\n    \n    resource_type = \"SpecimenDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.collection = None\n        \"\"\" Specimen collection procedure.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier of a kind of specimen.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.patientPreparation = None\n        \"\"\" Patient preparation for collection.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.timeAspect = None\n        \"\"\" Time aspect for collection.\n        Type `str`. \"\"\"\n        \n        self.typeCollected = None\n        \"\"\" Kind of material to collect.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.typeTested = None\n        \"\"\" Specimen in container intended for testing by lab.\n        List of `SpecimenDefinitionTypeTested` items (represented as `dict` in JSON). \"\"\"\n        \n        super(SpecimenDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SpecimenDefinition, self).elementProperties()\n        js.extend([\n            (\"collection\", \"collection\", codeableconcept.CodeableConcept, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"patientPreparation\", \"patientPreparation\", codeableconcept.CodeableConcept, True, None, False),\n            (\"timeAspect\", \"timeAspect\", str, False, None, False),\n            (\"typeCollected\", \"typeCollected\", codeableconcept.CodeableConcept, False, None, False),\n            (\"typeTested\", \"typeTested\", SpecimenDefinitionTypeTested, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass SpecimenDefinitionTypeTested(backboneelement.BackboneElement):\n    \"\"\" Specimen in container intended for testing by lab.\n    \n    Specimen conditioned in a container as expected by the testing laboratory.\n    \"\"\"\n    \n    resource_type = \"SpecimenDefinitionTypeTested\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.container = None\n        \"\"\" The specimen's container.\n        Type `SpecimenDefinitionTypeTestedContainer` (represented as `dict` in JSON). \"\"\"\n        \n        self.handling = None\n        \"\"\" Specimen handling before testing.\n        List of `SpecimenDefinitionTypeTestedHandling` items (represented as `dict` in JSON). \"\"\"\n        \n        self.isDerived = None\n        \"\"\" Primary or secondary specimen.\n        Type `bool`. \"\"\"\n        \n        self.preference = None\n        \"\"\" preferred | alternate.\n        Type `str`. \"\"\"\n        \n        self.rejectionCriterion = None\n        \"\"\" Rejection criterion.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requirement = None\n        \"\"\" Specimen requirements.\n        Type `str`. \"\"\"\n        \n        self.retentionTime = None\n        \"\"\" Specimen retention time.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of intended specimen.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(SpecimenDefinitionTypeTested, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTested, self).elementProperties()\n        js.extend([\n            (\"container\", \"container\", SpecimenDefinitionTypeTestedContainer, False, None, False),\n            (\"handling\", \"handling\", SpecimenDefinitionTypeTestedHandling, True, None, False),\n            (\"isDerived\", \"isDerived\", bool, False, None, False),\n            (\"preference\", \"preference\", str, False, None, True),\n            (\"rejectionCriterion\", \"rejectionCriterion\", codeableconcept.CodeableConcept, True, None, False),\n            (\"requirement\", \"requirement\", str, False, None, False),\n            (\"retentionTime\", \"retentionTime\", duration.Duration, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass SpecimenDefinitionTypeTestedContainer(backboneelement.BackboneElement):\n    \"\"\" The specimen's container.\n    \"\"\"\n    \n    resource_type = \"SpecimenDefinitionTypeTestedContainer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additive = None\n        \"\"\" Additive associated with container.\n        List of `SpecimenDefinitionTypeTestedContainerAdditive` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cap = None\n        \"\"\" Color of container cap.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.capacity = None\n        \"\"\" Container capacity.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Container description.\n        Type `str`. \"\"\"\n        \n        self.material = None\n        \"\"\" Container material.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.minimumVolumeQuantity = None\n        \"\"\" Minimum volume.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.minimumVolumeString = None\n        \"\"\" Minimum volume.\n        Type `str`. \"\"\"\n        \n        self.preparation = None\n        \"\"\" Specimen container preparation.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Kind of container associated with the kind of specimen.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(SpecimenDefinitionTypeTestedContainer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedContainer, self).elementProperties()\n        js.extend([\n            (\"additive\", \"additive\", SpecimenDefinitionTypeTestedContainerAdditive, True, None, False),\n            (\"cap\", \"cap\", codeableconcept.CodeableConcept, False, None, False),\n            (\"capacity\", \"capacity\", quantity.Quantity, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"material\", \"material\", codeableconcept.CodeableConcept, False, None, False),\n            (\"minimumVolumeQuantity\", \"minimumVolumeQuantity\", quantity.Quantity, False, \"minimumVolume\", False),\n            (\"minimumVolumeString\", \"minimumVolumeString\", str, False, \"minimumVolume\", False),\n            (\"preparation\", \"preparation\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass SpecimenDefinitionTypeTestedContainerAdditive(backboneelement.BackboneElement):\n    \"\"\" Additive associated with container.\n    \n    Substance introduced in the kind of container to preserve, maintain or\n    enhance the specimen. Examples: Formalin, Citrate, EDTA.\n    \"\"\"\n    \n    resource_type = \"SpecimenDefinitionTypeTestedContainerAdditive\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additiveCodeableConcept = None\n        \"\"\" Additive associated with container.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.additiveReference = None\n        \"\"\" Additive associated with container.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(SpecimenDefinitionTypeTestedContainerAdditive, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedContainerAdditive, self).elementProperties()\n        js.extend([\n            (\"additiveCodeableConcept\", \"additiveCodeableConcept\", codeableconcept.CodeableConcept, False, \"additive\", True),\n            (\"additiveReference\", \"additiveReference\", fhirreference.FHIRReference, False, \"additive\", True),\n        ])\n        return js\n\n\nclass SpecimenDefinitionTypeTestedHandling(backboneelement.BackboneElement):\n    \"\"\" Specimen handling before testing.\n    \n    Set of instructions for preservation/transport of the specimen at a defined\n    temperature interval, prior the testing process.\n    \"\"\"\n    \n    resource_type = \"SpecimenDefinitionTypeTestedHandling\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.instruction = None\n        \"\"\" Preservation instruction.\n        Type `str`. \"\"\"\n        \n        self.maxDuration = None\n        \"\"\" Maximum preservation time.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.temperatureQualifier = None\n        \"\"\" Temperature qualifier.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.temperatureRange = None\n        \"\"\" Temperature range.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        super(SpecimenDefinitionTypeTestedHandling, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedHandling, self).elementProperties()\n        js.extend([\n            (\"instruction\", \"instruction\", str, False, None, False),\n            (\"maxDuration\", \"maxDuration\", duration.Duration, False, None, False),\n            (\"temperatureQualifier\", \"temperatureQualifier\", codeableconcept.CodeableConcept, False, None, False),\n            (\"temperatureRange\", \"temperatureRange\", range.Range, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import range\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/specimendefinition.py": {
      "SpecimenDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a SpecimenDefinition instance, representing a kind of specimen with associated requirements for collection and testing.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties. If None, the default values for all properties are used.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties during initialization.\n\nAttributes initialized:\n- collection: A list of `CodeableConcept` items indicating the specimen collection procedures.\n- identifier: An `Identifier` object representing the business identifier for the specimen type.\n- patientPreparation: A list of `CodeableConcept` items detailing any patient preparations required before specimen collection.\n- timeAspect: A string that specifies time-related considerations for collection.\n- typeCollected: A `CodeableConcept` object that indicates the type of material to be collected.\n- typeTested: A list of `SpecimenDefinitionTypeTested` items that define the specimen intended for testing in a laboratory context.\n\nThe superclass `DomainResource` is initialized to set up common properties and validation methods that may depend on the FHIR structure definitions.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.collection = None\n        ' Specimen collection procedure.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier of a kind of specimen.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.patientPreparation = None\n        ' Patient preparation for collection.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.timeAspect = None\n        ' Time aspect for collection.\\n        Type `str`. '\n        self.typeCollected = None\n        ' Kind of material to collect.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.typeTested = None\n        ' Specimen in container intended for testing by lab.\\n        List of `SpecimenDefinitionTypeTested` items (represented as `dict` in JSON). '\n        super(SpecimenDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a SpecimenDefinition instance, representing a kind of specimen with associated requirements for collection and testing.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties. If None, the default values for all properties are used.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties during initialization.\n\nAttributes initialized:\n- collection: A list of `CodeableConcept` items indicating the specimen collection procedures.\n- identifier: An `Identifier` object representing the business identifier for the specimen type.\n- patientPreparation: A list of `CodeableConcept` items detailing any patient preparations required before specimen collection.\n- timeAspect: A string that specifies time-related considerations for collection.\n- typeCollected: A `CodeableConcept` object that indicates the type of material to be collected.\n- typeTested: A list of `SpecimenDefinitionTypeTested` items that define the specimen intended for testing in a laboratory context.\n\nThe superclass `DomainResource` is initialized to set up common properties and validation methods that may depend on the FHIR structure definitions.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class SpecimenDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Generate a JSON representation of the FHIR resource instance.\n\nThis method overrides the `as_json` method from the superclass to include the `resourceType` key, which indicates the specific type of FHIR resource being represented. It returns a dictionary containing the JSON representation of the instance, ensuring that the resource type is correctly specified.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` key, set to the class's `resource_type` attribute.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to obtain the base JSON structure, ensuring the proper inclusion of default attributes defined in `FHIRAbstractBase`.\n    - The `resource_type` class attribute, defined in the `FHIRAbstractResource` class, specifies the type of the resource, which is essential for FHIR compliance.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Generate a JSON representation of the FHIR resource instance.\n\nThis method overrides the `as_json` method from the superclass to include the `resourceType` key, which indicates the specific type of FHIR resource being represented. It returns a dictionary containing the JSON representation of the instance, ensuring that the resource type is correctly specified.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` key, set to the class's `resource_type` attribute.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to obtain the base JSON structure, ensuring the proper inclusion of default attributes defined in `FHIRAbstractBase`.\n    - The `resource_type` class attribute, defined in the `FHIRAbstractResource` class, specifies the type of the resource, which is essential for FHIR compliance.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/specimendefinition.py:SpecimenDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/specimendefinition_test.py:SpecimenDefinitionTests:testSpecimenDefinition1": {
      "tests/models/specimendefinition_test.py:SpecimenDefinitionTests:instantiate_from": {
        "fhirclient/models/specimendefinition.py:SpecimenDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/specimendefinition.py:SpecimenDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/specimendefinition_test.py:SpecimenDefinitionTests:implSpecimenDefinition1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/specimendefinition.py:SpecimenDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/specimendefinition.py:SpecimenDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/specimendefinition.py:SpecimenDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/specimendefinition_test.py:SpecimenDefinitionTests:instantiate_from": {
      "fhirclient/models/specimendefinition.py:SpecimenDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/specimendefinition.py:SpecimenDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-specimendefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 specimendefinition.py\n            \u2514\u2500\u2500 SpecimenDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module facilitates the validation and testing of FHIR (Fast Healthcare Interoperability Resources) `SpecimenDefinition` resources, ensuring conformance to the FHIR Standard (v4.0.1). It provides functionality to instantiate and validate `SpecimenDefinition` objects, which define the requirements and handling instructions for specimens in healthcare settings. The module enables verification of structured data such as specimen preparation, collection, type, testing criteria, and container specifications, ensuring accuracy and reliability in representing laboratory and diagnostic requirements. By providing a framework for testing these resources, it helps developers and healthcare systems to ensure proper implementation and interoperability of specimen-related data within FHIR-based applications.\n\n## FILE 1: fhirclient/models/specimendefinition.py\n\n- CLASS METHOD: SpecimenDefinition.__init__\n  - CLASS SIGNATURE: class SpecimenDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a SpecimenDefinition instance, representing a kind of specimen with associated requirements for collection and testing.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance properties. If None, the default values for all properties are used.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on invalid properties during initialization.\n\nAttributes initialized:\n- collection: A list of `CodeableConcept` items indicating the specimen collection procedures.\n- identifier: An `Identifier` object representing the business identifier for the specimen type.\n- patientPreparation: A list of `CodeableConcept` items detailing any patient preparations required before specimen collection.\n- timeAspect: A string that specifies time-related considerations for collection.\n- typeCollected: A `CodeableConcept` object that indicates the type of material to be collected.\n- typeTested: A list of `SpecimenDefinitionTypeTested` items that define the specimen intended for testing in a laboratory context.\n\nThe superclass `DomainResource` is initialized to set up common properties and validation methods that may depend on the FHIR structure definitions.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nGenerate a JSON representation of the FHIR resource instance.\n\nThis method overrides the `as_json` method from the superclass to include the `resourceType` key, which indicates the specific type of FHIR resource being represented. It returns a dictionary containing the JSON representation of the instance, ensuring that the resource type is correctly specified.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, including the `resourceType` key, set to the class's `resource_type` attribute.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to obtain the base JSON structure, ensuring the proper inclusion of default attributes defined in `FHIRAbstractBase`.\n    - The `resource_type` class attribute, defined in the `FHIRAbstractResource` class, specifies the type of the resource, which is essential for FHIR compliance.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/specimendefinition.py": "from . import domainresource\n\nclass SpecimenDefinition(domainresource.DomainResource):\n    \"\"\" Kind of specimen.\n    \n    A kind of specimen with associated set of requirements.\n    \"\"\"\n    resource_type = 'SpecimenDefinition'\n\n    def elementProperties(self):\n        js = super(SpecimenDefinition, self).elementProperties()\n        js.extend([('collection', 'collection', codeableconcept.CodeableConcept, True, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('patientPreparation', 'patientPreparation', codeableconcept.CodeableConcept, True, None, False), ('timeAspect', 'timeAspect', str, False, None, False), ('typeCollected', 'typeCollected', codeableconcept.CodeableConcept, False, None, False), ('typeTested', 'typeTested', SpecimenDefinitionTypeTested, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass SpecimenDefinitionTypeTested(backboneelement.BackboneElement):\n    \"\"\" Specimen in container intended for testing by lab.\n    \n    Specimen conditioned in a container as expected by the testing laboratory.\n    \"\"\"\n    resource_type = 'SpecimenDefinitionTypeTested'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.container = None\n        \" The specimen's container.\\n        Type `SpecimenDefinitionTypeTestedContainer` (represented as `dict` in JSON). \"\n        self.handling = None\n        ' Specimen handling before testing.\\n        List of `SpecimenDefinitionTypeTestedHandling` items (represented as `dict` in JSON). '\n        self.isDerived = None\n        ' Primary or secondary specimen.\\n        Type `bool`. '\n        self.preference = None\n        ' preferred | alternate.\\n        Type `str`. '\n        self.rejectionCriterion = None\n        ' Rejection criterion.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.requirement = None\n        ' Specimen requirements.\\n        Type `str`. '\n        self.retentionTime = None\n        ' Specimen retention time.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of intended specimen.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(SpecimenDefinitionTypeTested, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTested, self).elementProperties()\n        js.extend([('container', 'container', SpecimenDefinitionTypeTestedContainer, False, None, False), ('handling', 'handling', SpecimenDefinitionTypeTestedHandling, True, None, False), ('isDerived', 'isDerived', bool, False, None, False), ('preference', 'preference', str, False, None, True), ('rejectionCriterion', 'rejectionCriterion', codeableconcept.CodeableConcept, True, None, False), ('requirement', 'requirement', str, False, None, False), ('retentionTime', 'retentionTime', duration.Duration, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass SpecimenDefinitionTypeTestedContainer(backboneelement.BackboneElement):\n    \"\"\" The specimen's container.\n    \"\"\"\n    resource_type = 'SpecimenDefinitionTypeTestedContainer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.additive = None\n        ' Additive associated with container.\\n        List of `SpecimenDefinitionTypeTestedContainerAdditive` items (represented as `dict` in JSON). '\n        self.cap = None\n        ' Color of container cap.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.capacity = None\n        ' Container capacity.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.description = None\n        ' Container description.\\n        Type `str`. '\n        self.material = None\n        ' Container material.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.minimumVolumeQuantity = None\n        ' Minimum volume.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.minimumVolumeString = None\n        ' Minimum volume.\\n        Type `str`. '\n        self.preparation = None\n        ' Specimen container preparation.\\n        Type `str`. '\n        self.type = None\n        ' Kind of container associated with the kind of specimen.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(SpecimenDefinitionTypeTestedContainer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedContainer, self).elementProperties()\n        js.extend([('additive', 'additive', SpecimenDefinitionTypeTestedContainerAdditive, True, None, False), ('cap', 'cap', codeableconcept.CodeableConcept, False, None, False), ('capacity', 'capacity', quantity.Quantity, False, None, False), ('description', 'description', str, False, None, False), ('material', 'material', codeableconcept.CodeableConcept, False, None, False), ('minimumVolumeQuantity', 'minimumVolumeQuantity', quantity.Quantity, False, 'minimumVolume', False), ('minimumVolumeString', 'minimumVolumeString', str, False, 'minimumVolume', False), ('preparation', 'preparation', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass SpecimenDefinitionTypeTestedContainerAdditive(backboneelement.BackboneElement):\n    \"\"\" Additive associated with container.\n    \n    Substance introduced in the kind of container to preserve, maintain or\n    enhance the specimen. Examples: Formalin, Citrate, EDTA.\n    \"\"\"\n    resource_type = 'SpecimenDefinitionTypeTestedContainerAdditive'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.additiveCodeableConcept = None\n        ' Additive associated with container.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.additiveReference = None\n        ' Additive associated with container.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(SpecimenDefinitionTypeTestedContainerAdditive, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedContainerAdditive, self).elementProperties()\n        js.extend([('additiveCodeableConcept', 'additiveCodeableConcept', codeableconcept.CodeableConcept, False, 'additive', True), ('additiveReference', 'additiveReference', fhirreference.FHIRReference, False, 'additive', True)])\n        return js\n\nclass SpecimenDefinitionTypeTestedHandling(backboneelement.BackboneElement):\n    \"\"\" Specimen handling before testing.\n    \n    Set of instructions for preservation/transport of the specimen at a defined\n    temperature interval, prior the testing process.\n    \"\"\"\n    resource_type = 'SpecimenDefinitionTypeTestedHandling'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.instruction = None\n        ' Preservation instruction.\\n        Type `str`. '\n        self.maxDuration = None\n        ' Maximum preservation time.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.temperatureQualifier = None\n        ' Temperature qualifier.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.temperatureRange = None\n        ' Temperature range.\\n        Type `Range` (represented as `dict` in JSON). '\n        super(SpecimenDefinitionTypeTestedHandling, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(SpecimenDefinitionTypeTestedHandling, self).elementProperties()\n        js.extend([('instruction', 'instruction', str, False, None, False), ('maxDuration', 'maxDuration', duration.Duration, False, None, False), ('temperatureQualifier', 'temperatureQualifier', codeableconcept.CodeableConcept, False, None, False), ('temperatureRange', 'temperatureRange', range.Range, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import range",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}