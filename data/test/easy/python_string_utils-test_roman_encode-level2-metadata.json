{
  "dir_path": "/app/python_string_utils",
  "package_name": "python_string_utils",
  "sample_name": "python_string_utils-test_roman_encode",
  "src_dir": "string_utils/",
  "test_dir": "tests/",
  "test_file": "tests/test_roman_encode.py",
  "test_code": "from unittest import TestCase\n\nfrom string_utils.manipulation import roman_encode\n\n\nclass RomanEncodeTestCase(TestCase):\n    def test_encode_throws_an_exception_if_number_is_less_than_1(self):\n        self.assertRaises(ValueError, lambda: roman_encode(0))\n        self.assertRaises(ValueError, lambda: roman_encode(-12))\n\n    def test_encode_throws_an_exception_if_number_is_decimal(self):\n        # noinspection PyTypeChecker\n        self.assertRaises(ValueError, lambda: roman_encode(1.1))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(ValueError, lambda: roman_encode(-4.3))\n\n    def test_encode_throws_an_exception_if_input_is_not_a_number(self):\n        # noinspection PyTypeChecker\n        self.assertRaises(ValueError, lambda: roman_encode(None))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(ValueError, lambda: roman_encode(False))\n\n        # noinspection PyTypeChecker\n        self.assertRaises(ValueError, lambda: roman_encode([11]))\n\n    def test_encode_accepts_strings(self):\n        self.assertEqual(roman_encode('15'), 'XV')\n        self.assertEqual(roman_encode('9'), 'IX')\n        self.assertEqual(roman_encode('30'), 'XXX')\n\n    def test_units_are_encoded_as_expected(self):\n        self.assertEqual(roman_encode(1), 'I')\n        self.assertEqual(roman_encode(2), 'II')\n        self.assertEqual(roman_encode(3), 'III')\n        self.assertEqual(roman_encode(4), 'IV')\n        self.assertEqual(roman_encode(5), 'V')\n        self.assertEqual(roman_encode(6), 'VI')\n        self.assertEqual(roman_encode(7), 'VII')\n        self.assertEqual(roman_encode(8), 'VIII')\n        self.assertEqual(roman_encode(9), 'IX')\n\n    def test_tens_are_encoded_as_expected(self):\n        self.assertEqual(roman_encode(10), 'X')\n        self.assertEqual(roman_encode(20), 'XX')\n        self.assertEqual(roman_encode(30), 'XXX')\n        self.assertEqual(roman_encode(40), 'XL')\n        self.assertEqual(roman_encode(50), 'L')\n        self.assertEqual(roman_encode(60), 'LX')\n        self.assertEqual(roman_encode(70), 'LXX')\n        self.assertEqual(roman_encode(80), 'LXXX')\n        self.assertEqual(roman_encode(90), 'XC')\n\n    def test_tens_and_units_are_encoded_as_expected(self):\n        # 1x\n        self.assertEqual(roman_encode(11), 'XI')\n        self.assertEqual(roman_encode(12), 'XII')\n        self.assertEqual(roman_encode(13), 'XIII')\n        self.assertEqual(roman_encode(14), 'XIV')\n        self.assertEqual(roman_encode(15), 'XV')\n        self.assertEqual(roman_encode(16), 'XVI')\n        self.assertEqual(roman_encode(17), 'XVII')\n        self.assertEqual(roman_encode(18), 'XVIII')\n        self.assertEqual(roman_encode(19), 'XIX')\n\n        # 2x\n        self.assertEqual(roman_encode(21), 'XXI')\n        self.assertEqual(roman_encode(22), 'XXII')\n        self.assertEqual(roman_encode(23), 'XXIII')\n        self.assertEqual(roman_encode(24), 'XXIV')\n        self.assertEqual(roman_encode(25), 'XXV')\n        self.assertEqual(roman_encode(26), 'XXVI')\n        self.assertEqual(roman_encode(27), 'XXVII')\n        self.assertEqual(roman_encode(28), 'XXVIII')\n        self.assertEqual(roman_encode(29), 'XXIX')\n\n        # 3x\n        self.assertEqual(roman_encode(31), 'XXXI')\n        self.assertEqual(roman_encode(32), 'XXXII')\n        self.assertEqual(roman_encode(33), 'XXXIII')\n        self.assertEqual(roman_encode(34), 'XXXIV')\n        self.assertEqual(roman_encode(35), 'XXXV')\n        self.assertEqual(roman_encode(36), 'XXXVI')\n        self.assertEqual(roman_encode(37), 'XXXVII')\n        self.assertEqual(roman_encode(38), 'XXXVIII')\n        self.assertEqual(roman_encode(39), 'XXXIX')\n\n        # 4x\n        self.assertEqual(roman_encode(41), 'XLI')\n        self.assertEqual(roman_encode(42), 'XLII')\n        self.assertEqual(roman_encode(43), 'XLIII')\n        self.assertEqual(roman_encode(44), 'XLIV')\n        self.assertEqual(roman_encode(45), 'XLV')\n        self.assertEqual(roman_encode(46), 'XLVI')\n        self.assertEqual(roman_encode(47), 'XLVII')\n        self.assertEqual(roman_encode(48), 'XLVIII')\n        self.assertEqual(roman_encode(49), 'XLIX')\n\n        # 5x\n        self.assertEqual(roman_encode(51), 'LI')\n        self.assertEqual(roman_encode(52), 'LII')\n        self.assertEqual(roman_encode(53), 'LIII')\n        self.assertEqual(roman_encode(54), 'LIV')\n        self.assertEqual(roman_encode(55), 'LV')\n        self.assertEqual(roman_encode(56), 'LVI')\n        self.assertEqual(roman_encode(57), 'LVII')\n        self.assertEqual(roman_encode(58), 'LVIII')\n        self.assertEqual(roman_encode(59), 'LIX')\n\n        # 6x\n        self.assertEqual(roman_encode(61), 'LXI')\n        self.assertEqual(roman_encode(62), 'LXII')\n        self.assertEqual(roman_encode(63), 'LXIII')\n        self.assertEqual(roman_encode(64), 'LXIV')\n        self.assertEqual(roman_encode(65), 'LXV')\n        self.assertEqual(roman_encode(66), 'LXVI')\n        self.assertEqual(roman_encode(67), 'LXVII')\n        self.assertEqual(roman_encode(68), 'LXVIII')\n        self.assertEqual(roman_encode(69), 'LXIX')\n\n        # 7x\n        self.assertEqual(roman_encode(71), 'LXXI')\n        self.assertEqual(roman_encode(72), 'LXXII')\n        self.assertEqual(roman_encode(73), 'LXXIII')\n        self.assertEqual(roman_encode(74), 'LXXIV')\n        self.assertEqual(roman_encode(75), 'LXXV')\n        self.assertEqual(roman_encode(76), 'LXXVI')\n        self.assertEqual(roman_encode(77), 'LXXVII')\n        self.assertEqual(roman_encode(78), 'LXXVIII')\n        self.assertEqual(roman_encode(79), 'LXXIX')\n\n        # 8x\n        self.assertEqual(roman_encode(81), 'LXXXI')\n        self.assertEqual(roman_encode(82), 'LXXXII')\n        self.assertEqual(roman_encode(83), 'LXXXIII')\n        self.assertEqual(roman_encode(84), 'LXXXIV')\n        self.assertEqual(roman_encode(85), 'LXXXV')\n        self.assertEqual(roman_encode(86), 'LXXXVI')\n        self.assertEqual(roman_encode(87), 'LXXXVII')\n        self.assertEqual(roman_encode(88), 'LXXXVIII')\n        self.assertEqual(roman_encode(89), 'LXXXIX')\n\n        # 9x\n        self.assertEqual(roman_encode(91), 'XCI')\n        self.assertEqual(roman_encode(92), 'XCII')\n        self.assertEqual(roman_encode(93), 'XCIII')\n        self.assertEqual(roman_encode(94), 'XCIV')\n        self.assertEqual(roman_encode(95), 'XCV')\n        self.assertEqual(roman_encode(96), 'XCVI')\n        self.assertEqual(roman_encode(97), 'XCVII')\n        self.assertEqual(roman_encode(98), 'XCVIII')\n        self.assertEqual(roman_encode(99), 'XCIX')\n\n    def test_hundreds_are_encoded_as_expected(self):\n        self.assertEqual(roman_encode(100), 'C')\n        self.assertEqual(roman_encode(200), 'CC')\n        self.assertEqual(roman_encode(300), 'CCC')\n        self.assertEqual(roman_encode(400), 'CD')\n        self.assertEqual(roman_encode(500), 'D')\n        self.assertEqual(roman_encode(600), 'DC')\n        self.assertEqual(roman_encode(700), 'DCC')\n        self.assertEqual(roman_encode(800), 'DCCC')\n        self.assertEqual(roman_encode(900), 'CM')\n\n    def test_thousands_are_encoded_as_expected(self):\n        self.assertEqual(roman_encode(1000), 'M')\n        self.assertEqual(roman_encode(2000), 'MM')\n        self.assertEqual(roman_encode(3000), 'MMM')\n\n    def test_combined_numbers_encode(self):\n        self.assertEqual(roman_encode(3001), 'MMMI')\n        self.assertEqual(roman_encode(3090), 'MMMXC')\n        self.assertEqual(roman_encode(1200), 'MCC')\n        self.assertEqual(roman_encode(2739), 'MMDCCXXXIX')\n        self.assertEqual(roman_encode(3999), 'MMMCMXCIX')\n",
  "GT_file_code": {
    "string_utils/manipulation.py": "# -*- coding: utf-8 -*-\n\n# public api to export\n__all__ = [\n    'camel_case_to_snake',\n    'snake_case_to_camel',\n    'reverse',\n    'shuffle',\n    'strip_html',\n    'prettify',\n    'asciify',\n    'slugify',\n    'booleanize',\n    'strip_margin',\n    'compress',\n    'decompress',\n    'roman_encode',\n    'roman_decode',\n]\n\nimport base64\nimport random\nimport unicodedata\nimport zlib\nfrom typing import Union\nfrom uuid import uuid4\n\nfrom ._regex import *\nfrom .errors import InvalidInputError\nfrom .validation import is_snake_case, is_full_string, is_camel_case, is_integer, is_string\n\n\n# PRIVATE API\n\n\nclass __RomanNumbers:\n    # internal rule mappings for encode()\n    __mappings = [\n        # units\n        {1: 'I', 5: 'V'},\n        # tens\n        {1: 'X', 5: 'L'},\n        # hundreds\n        {1: 'C', 5: 'D'},\n        # thousands\n        {1: 'M'},\n    ]\n\n    # swap key/value definitions for decode()\n    __reversed_mappings = [{v: k for k, v in m.items()} for m in __mappings]\n\n    @classmethod\n    def __encode_digit(cls, index: int, value: int) -> str:\n        # if digit is zero, there is no sign to display\n        if value == 0:\n            return ''\n\n        # from 1 to 3 we have just to repeat the sign N times (eg: III, XXX...)\n        if value <= 3:\n            return cls.__mappings[index][1] * value\n\n        # if 4 we have to add unit prefix\n        if value == 4:\n            return cls.__mappings[index][1] + cls.__mappings[index][5]\n\n        # if is 5, is a straight map\n        if value == 5:\n            return cls.__mappings[index][5]\n\n        # if 6, 7 or 8 we have to append unit suffixes\n        if value <= 8:\n            suffix = cls.__mappings[index][1] * (value - 5)\n            return cls.__mappings[index][5] + suffix\n\n        # if 9 we have to prepend current unit to next\n        return cls.__mappings[index][1] + cls.__mappings[index + 1][1]\n\n    @classmethod\n    def encode(cls, input_number: Union[str, int]) -> str:\n        # force input conversion to a string (we need it in order to iterate on each digit)\n        input_string = str(input_number)\n\n        if not is_integer(input_string):\n            raise ValueError('Invalid input, only strings or integers are allowed')\n\n        value = int(input_string)\n\n        if value < 1 or value > 3999:\n            raise ValueError('Input must be >= 1 and <= 3999')\n\n        input_len = len(input_string)\n        output = ''\n\n        # decode digits from right to left (start from units to thousands)\n        for index in range(input_len):\n            # get actual digit value as int\n            digit = int(input_string[input_len - index - 1])\n\n            # encode digit to roman string\n            encoded_digit = cls.__encode_digit(index, digit)\n\n            # prepend encoded value to the current output in order to have the final string sorted\n            # from thousands to units\n            output = encoded_digit + output\n\n        return output\n\n    @classmethod\n    def __index_for_sign(cls, sign: str) -> int:\n        for index, mapping in enumerate(cls.__reversed_mappings):\n            if sign in mapping:\n                return index\n\n        raise ValueError('Invalid token found: \"{}\"'.format(sign))\n\n    @classmethod\n    def decode(cls, input_string: str) -> int:\n        if not is_full_string(input_string):\n            raise ValueError('Input must be a non empty string')\n\n        # reverse the provided string so that we can start parsing from units to thousands\n        reversed_string = reverse(input_string.upper())\n\n        # track last used value\n        last_value = None\n\n        # computed number to return\n        output = 0\n\n        # for each sign in the string we get its numeric value and add or subtract it to the computed output\n        for sign in reversed_string:\n            # are we dealing with units, tens, hundreds or thousands?\n            index = cls.__index_for_sign(sign)\n\n            # it's basically 1 or 5 (based on mapping rules definitions)\n            key_value = cls.__reversed_mappings[index][sign]\n\n            # Based on the level (tens, hundreds...) we have to add as many zeroes as the level into which we are\n            # in order to have the actual sign value.\n            # For instance, if we are at level 2 we are dealing with hundreds, therefore instead of 1 or 5, we will\n            # obtain 100 or 500 by adding 2 zeroes\n            sign_value = int(str(key_value) + '0' * index)\n\n            # increase total value if we are moving on with level\n            if last_value is None or sign_value >= last_value:\n                output += sign_value\n\n            # Decrease value if we are back to a previous level\n            # For instance, if we are parsing \"IX\", we first encounter \"X\" which is ten then \"I\" which is unit,\n            # So we have to do the following operation in order to get 9 (the final result): 10 - 1\n            else:\n                output -= sign_value\n\n            last_value = sign_value\n\n        return output\n\n\nclass __StringCompressor:\n\n    @staticmethod\n    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\n\n    @classmethod\n    def compress(cls, input_string: str, encoding: str = 'utf-8', compression_level: int = 9) -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n\n        if not isinstance(compression_level, int) or compression_level < 0 or compression_level > 9:\n            raise ValueError('Invalid compression_level: it must be an \"int\" between 0 and 9')\n\n        # turns input string into a sequence of bytes using provided encoding\n        original_bytes = input_string.encode(encoding)\n\n        # compress bytes using zlib library\n        compressed_bytes = zlib.compress(original_bytes, compression_level)\n\n        # encode compressed bytes using base64\n        # (this ensure that all characters will be available and that the output string can be used safely in any\n        # context such URLs)\n        encoded_bytes = base64.urlsafe_b64encode(compressed_bytes)\n\n        # finally turns base64 bytes into a string\n        output = encoded_bytes.decode(encoding)\n\n        return output\n\n    @classmethod\n    def decompress(cls, input_string: str, encoding: str = 'utf-8') -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n\n        # turns input string into a sequence of bytes\n        # (the string is assumed to be a previously compressed string, therefore we have to decode it using base64)\n        input_bytes = base64.urlsafe_b64decode(input_string)\n\n        # decompress bytes using zlib\n        decompressed_bytes = zlib.decompress(input_bytes)\n\n        # decode the decompressed bytes to get the original string back\n        original_string = decompressed_bytes.decode(encoding)\n\n        return original_string\n\n\nclass __StringFormatter:\n    def __init__(self, input_string):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n\n        self.input_string = input_string\n\n    def __uppercase_first_char(self, regex_match):\n        return regex_match.group(0).upper()\n\n    def __remove_duplicates(self, regex_match):\n        return regex_match.group(1)[0]\n\n    def __uppercase_first_letter_after_sign(self, regex_match):\n        match = regex_match.group(1)\n        return match[:-1] + match[2].upper()\n\n    def __ensure_right_space_only(self, regex_match):\n        return regex_match.group(1).strip() + ' '\n\n    def __ensure_left_space_only(self, regex_match):\n        return ' ' + regex_match.group(1).strip()\n\n    def __ensure_spaces_around(self, regex_match):\n        return ' ' + regex_match.group(1).strip() + ' '\n\n    def __remove_internal_spaces(self, regex_match):\n        return regex_match.group(1).strip()\n\n    def __fix_saxon_genitive(self, regex_match):\n        return regex_match.group(1).replace(' ', '') + ' '\n\n    # generates a placeholder to inject temporary into the string, it will be replaced with the original\n    # value at the end of the process\n    @staticmethod\n    def __placeholder_key():\n        return '$' + uuid4().hex + '$'\n\n    def format(self) -> str:\n        # map of temporary placeholders\n        placeholders = {}\n        out = self.input_string\n\n        # looks for url or email and updates placeholders map with found values\n        placeholders.update({self.__placeholder_key(): m[0] for m in URLS_RE.findall(out)})\n        placeholders.update({self.__placeholder_key(): m for m in EMAILS_RE.findall(out)})\n\n        # replace original value with the placeholder key\n        for p in placeholders:\n            out = out.replace(placeholders[p], p, 1)\n\n        out = PRETTIFY_RE['UPPERCASE_FIRST_LETTER'].sub(self.__uppercase_first_char, out)\n        out = PRETTIFY_RE['DUPLICATES'].sub(self.__remove_duplicates, out)\n        out = PRETTIFY_RE['RIGHT_SPACE'].sub(self.__ensure_right_space_only, out)\n        out = PRETTIFY_RE['LEFT_SPACE'].sub(self.__ensure_left_space_only, out)\n        out = PRETTIFY_RE['SPACES_AROUND'].sub(self.__ensure_spaces_around, out)\n        out = PRETTIFY_RE['SPACES_INSIDE'].sub(self.__remove_internal_spaces, out)\n        out = PRETTIFY_RE['UPPERCASE_AFTER_SIGN'].sub(self.__uppercase_first_letter_after_sign, out)\n        out = PRETTIFY_RE['SAXON_GENITIVE'].sub(self.__fix_saxon_genitive, out)\n        out = out.strip()\n\n        # restore placeholder keys with their associated original value\n        for p in placeholders:\n            out = out.replace(p, placeholders[p], 1)\n\n        return out\n\n\n# PUBLIC API\n\ndef reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string[::-1]\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    return CAMEL_CASE_REPLACE_RE.sub(lambda m: m.group(1) + separator, input_string).lower()\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    tokens = [s.title() for s in input_string.split(separator) if is_full_string(s)]\n\n    if not upper_case_first:\n        tokens[0] = tokens[0].lower()\n\n    out = ''.join(tokens)\n\n    return out\n\n\ndef shuffle(input_string: str) -> str:\n    \"\"\"\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # turn the string into a list of chars\n    chars = list(input_string)\n\n    # shuffle the list\n    random.shuffle(chars)\n\n    # convert the shuffled list back to string\n    return ''.join(chars)\n\n\ndef strip_html(input_string: str, keep_tag_content: bool = False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n\n    return r.sub('', input_string)\n\n\ndef prettify(input_string: str) -> str:\n    \"\"\"\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for \"?\", \"!\" and \".\")\n    - Arithmetic operators (+, -, /, \\\\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and \\\n    after quotes (foo\" bar\"baz -> foo \"bar\" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and \\\n    after brackets (\"foo(bar )baz\" -> \"foo (bar) baz\")\n    - Percentage sign (\"%\") cannot be preceded by a space if there is a number before (\"100 %\" -> \"100%\")\n    - Saxon genitive is correct (\"Dave' s dog\" -> \"Dave's dog\")\n\n    *Examples:*\n\n    >>> prettify(' unprettified string ,, like this one,will be\"prettified\" .it\\\\' s awesome! ')\n    >>> # -> 'Unprettified string, like this one, will be \"prettified\". It\\'s awesome!'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    \"\"\"\n    formatted = __StringFormatter(input_string).format()\n    return formatted\n\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # \"NFKD\" is the algorithm which is able to successfully translate the most of non-ascii chars\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # encode string forcing ascii and ignore any errors (unrepresentable chars will be stripped out)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n\n    # turns encoded bytes into an utf-8 string\n    ascii_string = ascii_bytes.decode('utf-8')\n\n    return ascii_string\n\n\ndef slugify(input_string: str, separator: str = '-') -> str:\n    \"\"\"\n    Converts a string into a \"slug\" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n    >>> slugify('M\u00f6nst\u00e9r M\u00e4gn\u00ebt') # returns 'monster-magnet'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to \"-\").\n    :type separator: str\n    :return: Slug string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # replace any character that is NOT letter or number with spaces\n    out = NO_LETTERS_OR_NUMBERS_RE.sub(' ', input_string.lower()).strip()\n\n    # replace spaces with join sign\n    out = SPACES_RE.sub(separator, out)\n\n    # normalize joins (remove duplicates)\n    out = re.sub(re.escape(separator) + r'+', separator, out)\n\n    return asciify(out)\n\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string.lower() in ('true', '1', 'yes', 'y')\n\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    line_separator = '\\n'\n    lines = [MARGIN_RE.sub('', line) for line in input_string.split(line_separator)]\n    out = line_separator.join(lines)\n\n    return out\n\n\ndef compress(input_string: str, encoding: str = 'utf-8', compression_level: int = 9) -> str:\n    \"\"\"\n    Compress the given string by returning a shorter one that can be safely used in any context (like URL) and\n    restored back to its original state using `decompress()`.\n\n    **Bear in mind:**\n    Besides the provided `compression_level`, the compression result (how much the string is actually compressed\n    by resulting into a shorter string) depends on 2 factors:\n\n    1. The amount of data (string size): short strings might not provide a significant compression result\\\n    or even be longer than the given input string (this is due to the fact that some bytes have to be embedded\\\n    into the compressed string in order to be able to restore it later on)\\\n\n    2. The content type: random sequences of chars are very unlikely to be successfully compressed, while the best\\\n    compression result is obtained when the string contains several recurring char sequences (like in the example).\n\n    Behind the scenes this method makes use of the standard Python's zlib and base64 libraries.\n\n    *Examples:*\n\n    >>> n = 0 # <- ignore this, it's a fix for Pycharm (not fixable using ignore comments)\n    >>> # \"original\" will be a string with 169 chars:\n    >>> original = ' '.join(['word n{}'.format(n) for n in range(20)])\n    >>> # \"compressed\" will be a string of 88 chars\n    >>> compressed = compress(original)\n\n    :param input_string: String to compress (must be not empty or a ValueError will be raised).\n    :type input_string: str\n    :param encoding: String encoding (default to \"utf-8\").\n    :type encoding: str\n    :param compression_level: A value between 0 (no compression) and 9 (best compression), default to 9.\n    :type compression_level: int\n    :return: Compressed string.\n    \"\"\"\n    return __StringCompressor.compress(input_string, encoding, compression_level)\n\n\ndef decompress(input_string: str, encoding: str = 'utf-8') -> str:\n    \"\"\"\n    Restore a previously compressed string (obtained using `compress()`) back to its original state.\n\n    :param input_string: String to restore.\n    :type input_string: str\n    :param encoding: Original string encoding.\n    :type encoding: str\n    :return: Decompressed string.\n    \"\"\"\n    return __StringCompressor.decompress(input_string, encoding)\n\n\ndef roman_encode(input_number: Union[str, int]) -> str:\n    \"\"\"\n    Convert the given number/string into a roman number.\n\n    The passed input must represents a positive integer in the range 1-3999 (inclusive).\n\n    Why this limit? You may be wondering:\n\n    1. zero is forbidden since there is no related representation in roman numbers\n    2. the upper bound 3999 is due to the limitation in the ascii charset\\\n    (the higher quantity sign displayable in ascii is \"M\" which is equal to 1000, therefore based on\\\n    roman numbers rules we can use 3 times M to reach 3000 but we can't go any further in thousands without\\\n    special \"boxed chars\").\n\n    *Examples:*\n\n    >>> roman_encode(37) # returns 'XXXVIII'\n    >>> roman_encode('2020') # returns 'MMXX'\n\n    :param input_number: An integer or a string to be converted.\n    :type input_number: Union[str, int]\n    :return: Roman number string.\n    \"\"\"\n    return __RomanNumbers.encode(input_number)\n\n\ndef roman_decode(input_string: str) -> int:\n    \"\"\"\n    Decode a roman number string into an integer if the provided string is valid.\n\n    *Example:*\n\n    >>> roman_decode('VII') # returns 7\n\n    :param input_string: (Assumed) Roman number\n    :type input_string: str\n    :return: Integer value\n    \"\"\"\n    return __RomanNumbers.decode(input_string)\n"
  },
  "GT_src_dict": {
    "string_utils/manipulation.py": {
      "__RomanNumbers.encode": {
        "code": "    def encode(cls, input_number: Union[str, int]) -> str:\n        \"\"\"Converts a given integer or string representing a positive integer (between 1 and 3999 inclusive) into its corresponding Roman numeral representation.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or string that can be parsed as an integer, which will be converted to a Roman numeral. Only integers within the range of 1 to 3999 are valid inputs.\n\nReturns:\n- str: The Roman numeral equivalent of the input number as a string.\n\nRaises:\n- ValueError: If the input is not a valid integer string or an integer, or if it falls outside the valid range (1 to 3999).\n\nDependencies:\n- The method relies on the helper method `__encode_digit()` to convert individual digits based on predefined mappings found in `__mappings`, which are class-level constants that define the Roman numeral symbols for units, tens, hundreds, and thousands.\n- The function also utilizes the `is_integer()` validation method to ensure the input is indeed an integer before conversion.\"\"\"\n        input_string = str(input_number)\n        if not is_integer(input_string):\n            raise ValueError('Invalid input, only strings or integers are allowed')\n        value = int(input_string)\n        if value < 1 or value > 3999:\n            raise ValueError('Input must be >= 1 and <= 3999')\n        input_len = len(input_string)\n        output = ''\n        for index in range(input_len):\n            digit = int(input_string[input_len - index - 1])\n            encoded_digit = cls.__encode_digit(index, digit)\n            output = encoded_digit + output\n        return output",
        "docstring": "Converts a given integer or string representing a positive integer (between 1 and 3999 inclusive) into its corresponding Roman numeral representation.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or string that can be parsed as an integer, which will be converted to a Roman numeral. Only integers within the range of 1 to 3999 are valid inputs.\n\nReturns:\n- str: The Roman numeral equivalent of the input number as a string.\n\nRaises:\n- ValueError: If the input is not a valid integer string or an integer, or if it falls outside the valid range (1 to 3999).\n\nDependencies:\n- The method relies on the helper method `__encode_digit()` to convert individual digits based on predefined mappings found in `__mappings`, which are class-level constants that define the Roman numeral symbols for units, tens, hundreds, and thousands.\n- The function also utilizes the `is_integer()` validation method to ensure the input is indeed an integer before conversion.",
        "signature": "def encode(cls, input_number: Union[str, int]) -> str:",
        "type": "Method",
        "class_signature": "class __RomanNumbers:"
      },
      "roman_encode": {
        "code": "def roman_encode(input_number: Union[str, int]) -> str:\n    \"\"\"Convert a positive integer or a string representation of an integer (within the range 1-3999) into its corresponding Roman numeral string.\n\nThis function relies on the `__RomanNumbers` class, which encapsulates the encoding logic for Roman numerals. The encoding process uses predefined mappings for units, tens, hundreds, and thousands, ensuring that the return value adheres to Roman numeral conventions.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or a string that represents a positive integer to be converted into a Roman numeral.\n\nReturns:\n- str: The corresponding Roman numeral as a string.\n\nRaises:\n- ValueError: If the input is not a positive integer or is outside the specified range.\n\nExamples:\n>>> roman_encode(37)  # returns 'XXXVIII'\n>>> roman_encode('2020')  # returns 'MMXX'\"\"\"\n    '\\n    Convert the given number/string into a roman number.\\n\\n    The passed input must represents a positive integer in the range 1-3999 (inclusive).\\n\\n    Why this limit? You may be wondering:\\n\\n    1. zero is forbidden since there is no related representation in roman numbers\\n    2. the upper bound 3999 is due to the limitation in the ascii charset    (the higher quantity sign displayable in ascii is \"M\" which is equal to 1000, therefore based on    roman numbers rules we can use 3 times M to reach 3000 but we can\\'t go any further in thousands without    special \"boxed chars\").\\n\\n    *Examples:*\\n\\n    >>> roman_encode(37) # returns \\'XXXVIII\\'\\n    >>> roman_encode(\\'2020\\') # returns \\'MMXX\\'\\n\\n    :param input_number: An integer or a string to be converted.\\n    :type input_number: Union[str, int]\\n    :return: Roman number string.\\n    '\n    return __RomanNumbers.encode(input_number)",
        "docstring": "Convert a positive integer or a string representation of an integer (within the range 1-3999) into its corresponding Roman numeral string.\n\nThis function relies on the `__RomanNumbers` class, which encapsulates the encoding logic for Roman numerals. The encoding process uses predefined mappings for units, tens, hundreds, and thousands, ensuring that the return value adheres to Roman numeral conventions.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or a string that represents a positive integer to be converted into a Roman numeral.\n\nReturns:\n- str: The corresponding Roman numeral as a string.\n\nRaises:\n- ValueError: If the input is not a positive integer or is outside the specified range.\n\nExamples:\n>>> roman_encode(37)  # returns 'XXXVIII'\n>>> roman_encode('2020')  # returns 'MMXX'",
        "signature": "def roman_encode(input_number: Union[str, int]) -> str:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "string_utils/manipulation.py:roman_encode": {},
    "string_utils/manipulation.py:__RomanNumbers:encode": {
      "string_utils/manipulation.py": {
        "__RomanNumbers.__encode_digit": {
          "code": "    def __encode_digit(cls, index: int, value: int) -> str:\n        if value == 0:\n            return ''\n        if value <= 3:\n            return cls.__mappings[index][1] * value\n        if value == 4:\n            return cls.__mappings[index][1] + cls.__mappings[index][5]\n        if value == 5:\n            return cls.__mappings[index][5]\n        if value <= 8:\n            suffix = cls.__mappings[index][1] * (value - 5)\n            return cls.__mappings[index][5] + suffix\n        return cls.__mappings[index][1] + cls.__mappings[index + 1][1]",
          "docstring": "",
          "signature": "def __encode_digit(cls, index: int, value: int) -> str:",
          "type": "Method",
          "class_signature": "class __RomanNumbers:"
        }
      },
      "string_utils/validation.py": {
        "is_integer": {
          "code": "def is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    return is_number(input_string) and '.' not in input_string",
          "docstring": "Checks whether the given string represents an integer or not.\n\nAn integer may be signed or unsigned or use a \"scientific notation\".\n\n*Examples:*\n\n>>> is_integer('42') # returns true\n>>> is_integer('42.0') # returns false\n\n:param input_string: String to check\n:type input_string: str\n:return: True if integer, false otherwise",
          "signature": "def is_integer(input_string: str) -> bool:",
          "type": "Function",
          "class_signature": null
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: python_string_utils-test_roman_encode\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 string_utils/\n    \u2514\u2500\u2500 manipulation.py\n        \u251c\u2500\u2500 __RomanNumbers.encode\n        \u2514\u2500\u2500 roman_encode\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is a dedicated test suite designed to validate the functionality of a Roman numeral encoding utility. Its primary purpose is to ensure the correctness of the `roman_encode` function, which converts numeric values into their Roman numeral representations. The module provides extensive test cases that cover a wide range of inputs, including valid integers, string-based numeric inputs, and various edge cases such as invalid, decimal, or negative numbers. Through comprehensive assertion checks, it ensures that the encoding logic adheres to the expected behavior and handles errors appropriately. This module solves the problem of verifying the reliability and robustness of the Roman numeral conversion logic, offering developers confidence in its accuracy for integration or end-user use cases.\n\n## FILE 1: string_utils/manipulation.py\n\n- FUNCTION NAME: roman_encode\n  - SIGNATURE: def roman_encode(input_number: Union[str, int]) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a positive integer or a string representation of an integer (within the range 1-3999) into its corresponding Roman numeral string.\n\nThis function relies on the `__RomanNumbers` class, which encapsulates the encoding logic for Roman numerals. The encoding process uses predefined mappings for units, tens, hundreds, and thousands, ensuring that the return value adheres to Roman numeral conventions.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or a string that represents a positive integer to be converted into a Roman numeral.\n\nReturns:\n- str: The corresponding Roman numeral as a string.\n\nRaises:\n- ValueError: If the input is not a positive integer or is outside the specified range.\n\nExamples:\n>>> roman_encode(37)  # returns 'XXXVIII'\n>>> roman_encode('2020')  # returns 'MMXX'\n\"\"\"\n```\n  - DEPENDENCIES:\n    - string_utils/manipulation.py:__RomanNumbers:encode\n\n- CLASS METHOD: __RomanNumbers.encode\n  - CLASS SIGNATURE: class __RomanNumbers:\n  - SIGNATURE: def encode(cls, input_number: Union[str, int]) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a given integer or string representing a positive integer (between 1 and 3999 inclusive) into its corresponding Roman numeral representation.\n\nParameters:\n- input_number (Union[str, int]): A positive integer or string that can be parsed as an integer, which will be converted to a Roman numeral. Only integers within the range of 1 to 3999 are valid inputs.\n\nReturns:\n- str: The Roman numeral equivalent of the input number as a string.\n\nRaises:\n- ValueError: If the input is not a valid integer string or an integer, or if it falls outside the valid range (1 to 3999).\n\nDependencies:\n- The method relies on the helper method `__encode_digit()` to convert individual digits based on predefined mappings found in `__mappings`, which are class-level constants that define the Roman numeral symbols for units, tens, hundreds, and thousands.\n- The function also utilizes the `is_integer()` validation method to ensure the input is indeed an integer before conversion.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "string_utils/manipulation.py": "__all__ = ['camel_case_to_snake', 'snake_case_to_camel', 'reverse', 'shuffle', 'strip_html', 'prettify', 'asciify', 'slugify', 'booleanize', 'strip_margin', 'compress', 'decompress', 'roman_encode', 'roman_decode']\nimport base64\nimport random\nimport unicodedata\nimport zlib\nfrom typing import Union\nfrom uuid import uuid4\nfrom ._regex import *\nfrom .errors import InvalidInputError\nfrom .validation import is_snake_case, is_full_string, is_camel_case, is_integer, is_string\n\nclass __RomanNumbers:\n    __mappings = [{1: 'I', 5: 'V'}, {1: 'X', 5: 'L'}, {1: 'C', 5: 'D'}, {1: 'M'}]\n    __reversed_mappings = [{v: k for k, v in m.items()} for m in __mappings]\n\n    @classmethod\n    def __encode_digit(cls, index: int, value: int) -> str:\n        if value == 0:\n            return ''\n        if value <= 3:\n            return cls.__mappings[index][1] * value\n        if value == 4:\n            return cls.__mappings[index][1] + cls.__mappings[index][5]\n        if value == 5:\n            return cls.__mappings[index][5]\n        if value <= 8:\n            suffix = cls.__mappings[index][1] * (value - 5)\n            return cls.__mappings[index][5] + suffix\n        return cls.__mappings[index][1] + cls.__mappings[index + 1][1]\n\n    @classmethod\n    def __index_for_sign(cls, sign: str) -> int:\n        for index, mapping in enumerate(cls.__reversed_mappings):\n            if sign in mapping:\n                return index\n        raise ValueError('Invalid token found: \"{}\"'.format(sign))\n\n    @classmethod\n    def decode(cls, input_string: str) -> int:\n        if not is_full_string(input_string):\n            raise ValueError('Input must be a non empty string')\n        reversed_string = reverse(input_string.upper())\n        last_value = None\n        output = 0\n        for sign in reversed_string:\n            index = cls.__index_for_sign(sign)\n            key_value = cls.__reversed_mappings[index][sign]\n            sign_value = int(str(key_value) + '0' * index)\n            if last_value is None or sign_value >= last_value:\n                output += sign_value\n            else:\n                output -= sign_value\n            last_value = sign_value\n        return output\n\nclass __StringCompressor:\n\n    @staticmethod\n    def __require_valid_input_and_encoding(input_string: str, encoding: str):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n        if len(input_string) == 0:\n            raise ValueError('Input string cannot be empty')\n        if not is_string(encoding):\n            raise ValueError('Invalid encoding')\n\n    @classmethod\n    def compress(cls, input_string: str, encoding: str='utf-8', compression_level: int=9) -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n        if not isinstance(compression_level, int) or compression_level < 0 or compression_level > 9:\n            raise ValueError('Invalid compression_level: it must be an \"int\" between 0 and 9')\n        original_bytes = input_string.encode(encoding)\n        compressed_bytes = zlib.compress(original_bytes, compression_level)\n        encoded_bytes = base64.urlsafe_b64encode(compressed_bytes)\n        output = encoded_bytes.decode(encoding)\n        return output\n\n    @classmethod\n    def decompress(cls, input_string: str, encoding: str='utf-8') -> str:\n        cls.__require_valid_input_and_encoding(input_string, encoding)\n        input_bytes = base64.urlsafe_b64decode(input_string)\n        decompressed_bytes = zlib.decompress(input_bytes)\n        original_string = decompressed_bytes.decode(encoding)\n        return original_string\n\nclass __StringFormatter:\n\n    def __init__(self, input_string):\n        if not is_string(input_string):\n            raise InvalidInputError(input_string)\n        self.input_string = input_string\n\n    def __uppercase_first_char(self, regex_match):\n        return regex_match.group(0).upper()\n\n    def __remove_duplicates(self, regex_match):\n        return regex_match.group(1)[0]\n\n    def __uppercase_first_letter_after_sign(self, regex_match):\n        match = regex_match.group(1)\n        return match[:-1] + match[2].upper()\n\n    def __ensure_right_space_only(self, regex_match):\n        return regex_match.group(1).strip() + ' '\n\n    def __ensure_left_space_only(self, regex_match):\n        return ' ' + regex_match.group(1).strip()\n\n    def __ensure_spaces_around(self, regex_match):\n        return ' ' + regex_match.group(1).strip() + ' '\n\n    def __remove_internal_spaces(self, regex_match):\n        return regex_match.group(1).strip()\n\n    def __fix_saxon_genitive(self, regex_match):\n        return regex_match.group(1).replace(' ', '') + ' '\n\n    @staticmethod\n    def __placeholder_key():\n        return '$' + uuid4().hex + '$'\n\n    def format(self) -> str:\n        placeholders = {}\n        out = self.input_string\n        placeholders.update({self.__placeholder_key(): m[0] for m in URLS_RE.findall(out)})\n        placeholders.update({self.__placeholder_key(): m for m in EMAILS_RE.findall(out)})\n        for p in placeholders:\n            out = out.replace(placeholders[p], p, 1)\n        out = PRETTIFY_RE['UPPERCASE_FIRST_LETTER'].sub(self.__uppercase_first_char, out)\n        out = PRETTIFY_RE['DUPLICATES'].sub(self.__remove_duplicates, out)\n        out = PRETTIFY_RE['RIGHT_SPACE'].sub(self.__ensure_right_space_only, out)\n        out = PRETTIFY_RE['LEFT_SPACE'].sub(self.__ensure_left_space_only, out)\n        out = PRETTIFY_RE['SPACES_AROUND'].sub(self.__ensure_spaces_around, out)\n        out = PRETTIFY_RE['SPACES_INSIDE'].sub(self.__remove_internal_spaces, out)\n        out = PRETTIFY_RE['UPPERCASE_AFTER_SIGN'].sub(self.__uppercase_first_letter_after_sign, out)\n        out = PRETTIFY_RE['SAXON_GENITIVE'].sub(self.__fix_saxon_genitive, out)\n        out = out.strip()\n        for p in placeholders:\n            out = out.replace(p, placeholders[p], 1)\n        return out\n\ndef reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return input_string[::-1]\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    if not is_camel_case(input_string):\n        return input_string\n    return CAMEL_CASE_REPLACE_RE.sub(lambda m: m.group(1) + separator, input_string).lower()\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool=True, separator: str='_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    if not is_snake_case(input_string, separator):\n        return input_string\n    tokens = [s.title() for s in input_string.split(separator) if is_full_string(s)]\n    if not upper_case_first:\n        tokens[0] = tokens[0].lower()\n    out = ''.join(tokens)\n    return out\n\ndef shuffle(input_string: str) -> str:\n    \"\"\"\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    chars = list(input_string)\n    random.shuffle(chars)\n    return ''.join(chars)\n\ndef strip_html(input_string: str, keep_tag_content: bool=False) -> str:\n    \"\"\"\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\n    >>> strip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=True) # returns 'test: click here'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n    return r.sub('', input_string)\n\ndef prettify(input_string: str) -> str:\n    \"\"\"\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for \"?\", \"!\" and \".\")\n    - Arithmetic operators (+, -, /, \\\\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo\" bar\"baz -> foo \"bar\" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets (\"foo(bar )baz\" -> \"foo (bar) baz\")\n    - Percentage sign (\"%\") cannot be preceded by a space if there is a number before (\"100 %\" -> \"100%\")\n    - Saxon genitive is correct (\"Dave' s dog\" -> \"Dave's dog\")\n\n    *Examples:*\n\n    >>> prettify(' unprettified string ,, like this one,will be\"prettified\" .it\\\\' s awesome! ')\n    >>> # -> 'Unprettified string, like this one, will be \"prettified\". It's awesome!'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    \"\"\"\n    formatted = __StringFormatter(input_string).format()\n    return formatted\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    normalized = unicodedata.normalize('NFKD', input_string)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n    ascii_string = ascii_bytes.decode('utf-8')\n    return ascii_string\n\ndef slugify(input_string: str, separator: str='-') -> str:\n    \"\"\"\n    Converts a string into a \"slug\" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify('Top 10 Reasons To Love Dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n    >>> slugify('M\u00f6nst\u00e9r M\u00e4gn\u00ebt') # returns 'monster-magnet'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to \"-\").\n    :type separator: str\n    :return: Slug string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    out = NO_LETTERS_OR_NUMBERS_RE.sub(' ', input_string.lower()).strip()\n    out = SPACES_RE.sub(separator, out)\n    out = re.sub(re.escape(separator) + '+', separator, out)\n    return asciify(out)\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    return input_string.lower() in ('true', '1', 'yes', 'y')\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    line_separator = '\\n'\n    lines = [MARGIN_RE.sub('', line) for line in input_string.split(line_separator)]\n    out = line_separator.join(lines)\n    return out\n\ndef compress(input_string: str, encoding: str='utf-8', compression_level: int=9) -> str:\n    \"\"\"\n    Compress the given string by returning a shorter one that can be safely used in any context (like URL) and\n    restored back to its original state using `decompress()`.\n\n    **Bear in mind:**\n    Besides the provided `compression_level`, the compression result (how much the string is actually compressed\n    by resulting into a shorter string) depends on 2 factors:\n\n    1. The amount of data (string size): short strings might not provide a significant compression result    or even be longer than the given input string (this is due to the fact that some bytes have to be embedded    into the compressed string in order to be able to restore it later on)\n    2. The content type: random sequences of chars are very unlikely to be successfully compressed, while the best    compression result is obtained when the string contains several recurring char sequences (like in the example).\n\n    Behind the scenes this method makes use of the standard Python's zlib and base64 libraries.\n\n    *Examples:*\n\n    >>> n = 0 # <- ignore this, it's a fix for Pycharm (not fixable using ignore comments)\n    >>> # \"original\" will be a string with 169 chars:\n    >>> original = ' '.join(['word n{}'.format(n) for n in range(20)])\n    >>> # \"compressed\" will be a string of 88 chars\n    >>> compressed = compress(original)\n\n    :param input_string: String to compress (must be not empty or a ValueError will be raised).\n    :type input_string: str\n    :param encoding: String encoding (default to \"utf-8\").\n    :type encoding: str\n    :param compression_level: A value between 0 (no compression) and 9 (best compression), default to 9.\n    :type compression_level: int\n    :return: Compressed string.\n    \"\"\"\n    return __StringCompressor.compress(input_string, encoding, compression_level)\n\ndef decompress(input_string: str, encoding: str='utf-8') -> str:\n    \"\"\"\n    Restore a previously compressed string (obtained using `compress()`) back to its original state.\n\n    :param input_string: String to restore.\n    :type input_string: str\n    :param encoding: Original string encoding.\n    :type encoding: str\n    :return: Decompressed string.\n    \"\"\"\n    return __StringCompressor.decompress(input_string, encoding)\n\ndef roman_decode(input_string: str) -> int:\n    \"\"\"\n    Decode a roman number string into an integer if the provided string is valid.\n\n    *Example:*\n\n    >>> roman_decode('VII') # returns 7\n\n    :param input_string: (Assumed) Roman number\n    :type input_string: str\n    :return: Integer value\n    \"\"\"\n    return __RomanNumbers.decode(input_string)"
  },
  "call_tree": {
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_combined_numbers_encode": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_encode_accepts_strings": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_encode_throws_an_exception_if_input_is_not_a_number": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          }
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_encode_throws_an_exception_if_number_is_decimal": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          }
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_encode_throws_an_exception_if_number_is_less_than_1": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          }
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_hundreds_are_encoded_as_expected": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_tens_and_units_are_encoded_as_expected": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_tens_are_encoded_as_expected": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_thousands_are_encoded_as_expected": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    },
    "tests/test_roman_encode.py:RomanEncodeTestCase:test_units_are_encoded_as_expected": {
      "string_utils/manipulation.py:roman_encode": {
        "string_utils/manipulation.py:__RomanNumbers:encode": {
          "string_utils/validation.py:is_integer": {
            "string_utils/validation.py:is_number": {}
          },
          "string_utils/manipulation.py:__RomanNumbers:__encode_digit": {}
        }
      }
    }
  }
}