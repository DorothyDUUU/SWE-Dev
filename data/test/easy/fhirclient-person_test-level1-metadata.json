{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-person_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/person_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import person\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass PersonTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Person\", js[\"resourceType\"])\n        return person.Person(js)\n    \n    def testPerson1(self):\n        inst = self.instantiate_from(\"person-example-f002-ariadne.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Person instance\")\n        self.implPerson1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Person\", js[\"resourceType\"])\n        inst2 = person.Person(js)\n        self.implPerson1(inst2)\n    \n    def implPerson1(self, inst):\n        self.assertTrue(inst.active)\n        self.assertEqual(inst.birthDate.date, FHIRDate(\"1963\").date)\n        self.assertEqual(inst.birthDate.as_json(), \"1963\")\n        self.assertEqual(inst.gender, \"female\")\n        self.assertEqual(inst.id, \"f002\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name[0].text, \"Ariadne Bor-Jansma\")\n        self.assertEqual(inst.name[0].use, \"usual\")\n        self.assertEqual(inst.photo.contentType, \"image/jpeg\")\n        self.assertEqual(inst.telecom[0].system, \"phone\")\n        self.assertEqual(inst.telecom[0].use, \"home\")\n        self.assertEqual(inst.telecom[0].value, \"+31201234567\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testPerson2(self):\n        inst = self.instantiate_from(\"person-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Person instance\")\n        self.implPerson2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Person\", js[\"resourceType\"])\n        inst2 = person.Person(js)\n        self.implPerson2(inst2)\n    \n    def implPerson2(self, inst):\n        self.assertTrue(inst.active)\n        self.assertEqual(inst.address[0].city, \"PleasantVille\")\n        self.assertEqual(inst.address[0].line[0], \"534 Erewhon St\")\n        self.assertEqual(inst.address[0].postalCode, \"3999\")\n        self.assertEqual(inst.address[0].state, \"Vic\")\n        self.assertEqual(inst.address[0].use, \"home\")\n        self.assertEqual(inst.birthDate.date, FHIRDate(\"1974-12-25\").date)\n        self.assertEqual(inst.birthDate.as_json(), \"1974-12-25\")\n        self.assertEqual(inst.gender, \"male\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].period.start.datetime, FHIRDateTime(\"2001-05-06\").datetime)\n        self.assertEqual(inst.identifier[0].period.start.as_json(), \"2001-05-06\")\n        self.assertEqual(inst.identifier[0].system, \"urn:oid:1.2.36.146.595.217.0.1\")\n        self.assertEqual(inst.identifier[0].type.coding[0].code, \"MR\")\n        self.assertEqual(inst.identifier[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0203\")\n        self.assertEqual(inst.identifier[0].use, \"usual\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name[0].family, \"Chalmers\")\n        self.assertEqual(inst.name[0].given[0], \"Peter\")\n        self.assertEqual(inst.name[0].given[1], \"James\")\n        self.assertEqual(inst.name[0].use, \"official\")\n        self.assertEqual(inst.name[1].given[0], \"Jim\")\n        self.assertEqual(inst.name[1].use, \"usual\")\n        self.assertEqual(inst.telecom[0].use, \"home\")\n        self.assertEqual(inst.telecom[1].system, \"phone\")\n        self.assertEqual(inst.telecom[1].use, \"work\")\n        self.assertEqual(inst.telecom[1].value, \"(03) 5555 6473\")\n        self.assertEqual(inst.telecom[2].system, \"email\")\n        self.assertEqual(inst.telecom[2].use, \"home\")\n        self.assertEqual(inst.telecom[2].value, \"Jim@example.org\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/person.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Person).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Person(domainresource.DomainResource):\n    \"\"\" A generic person record.\n    \n    Demographics and administrative information about a person independent of a\n    specific health-related context.\n    \"\"\"\n    \n    resource_type = \"Person\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.active = None\n        \"\"\" This person's record is in active use.\n        Type `bool`. \"\"\"\n        \n        self.address = None\n        \"\"\" One or more addresses for the person.\n        List of `Address` items (represented as `dict` in JSON). \"\"\"\n        \n        self.birthDate = None\n        \"\"\" The date on which the person was born.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.gender = None\n        \"\"\" male | female | other | unknown.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" A human identifier for this person.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.link = None\n        \"\"\" Link to a resource that concerns the same actual person.\n        List of `PersonLink` items (represented as `dict` in JSON). \"\"\"\n        \n        self.managingOrganization = None\n        \"\"\" The organization that is the custodian of the person record.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" A name associated with the person.\n        List of `HumanName` items (represented as `dict` in JSON). \"\"\"\n        \n        self.photo = None\n        \"\"\" Image of the person.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.telecom = None\n        \"\"\" A contact detail for the person.\n        List of `ContactPoint` items (represented as `dict` in JSON). \"\"\"\n        \n        super(Person, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Person, self).elementProperties()\n        js.extend([\n            (\"active\", \"active\", bool, False, None, False),\n            (\"address\", \"address\", address.Address, True, None, False),\n            (\"birthDate\", \"birthDate\", fhirdate.FHIRDate, False, None, False),\n            (\"gender\", \"gender\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"link\", \"link\", PersonLink, True, None, False),\n            (\"managingOrganization\", \"managingOrganization\", fhirreference.FHIRReference, False, None, False),\n            (\"name\", \"name\", humanname.HumanName, True, None, False),\n            (\"photo\", \"photo\", attachment.Attachment, False, None, False),\n            (\"telecom\", \"telecom\", contactpoint.ContactPoint, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass PersonLink(backboneelement.BackboneElement):\n    \"\"\" Link to a resource that concerns the same actual person.\n    \"\"\"\n    \n    resource_type = \"PersonLink\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assurance = None\n        \"\"\" level1 | level2 | level3 | level4.\n        Type `str`. \"\"\"\n        \n        self.target = None\n        \"\"\" The resource to which this actual person is associated.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(PersonLink, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PersonLink, self).elementProperties()\n        js.extend([\n            (\"assurance\", \"assurance\", str, False, None, False),\n            (\"target\", \"target\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import attachment\nfrom . import contactpoint\nfrom . import fhirdate\nfrom . import fhirreference\nfrom . import humanname\nfrom . import identifier\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize an instance of the FHIRDate class, designed to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional parameter that should be a string representing a FHIR date in ISO 8601 format. If not provided, the default is None. If a value is provided, it must match the expected format defined by the class's regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation in Python's datetime format. It is set based on the jsonval provided, using the _from_string method for conversion.\n- origval (Union[str, None]): Holds the original JSON string used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format.\n\nThis initializer leverages the _REGEX class constant, which defines the expected format for FHIR dates, ensuring input validation. The _from_string method is also utilized to convert the valid string representation into a Python date object.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize an instance of the FHIRDate class, designed to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional parameter that should be a string representing a FHIR date in ISO 8601 format. If not provided, the default is None. If a value is provided, it must match the expected format defined by the class's regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation in Python's datetime format. It is set based on the jsonval provided, using the _from_string method for conversion.\n- origval (Union[str, None]): Holds the original JSON string used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format.\n\nThis initializer leverages the _REGEX class constant, which defines the expected format for FHIR dates, ensuring input validation. The _from_string method is also utilized to convert the valid string representation into a Python date object.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available and not None, it is returned directly. If `origval` is None, the method returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` property of the instance, which represents the parsed date. This method provides a means to retrieve either the exact input format or a normalized version, depending on what was provided during initialization.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available and not None, it is returned directly. If `origval` is None, the method returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` property of the instance, which represents the parsed date. This method provides a means to retrieve either the exact input format or a normalized version, depending on what was provided during initialization.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns a JSON representation of the FHIRAbstractResource instance, including its resource type.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to ensure that the JSON output contains a 'resourceType' field, which is set to the value of the `resource_type` class attribute. \n\nNo parameters are required. The method returns a dictionary that represents the resource in JSON format, including the added 'resourceType' key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to obtain the base JSON representation.\n- `self.resource_type`: A class attribute that defines the type of the FHIR resource, crucial for interoperability within the FHIR framework.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns a JSON representation of the FHIRAbstractResource instance, including its resource type.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to ensure that the JSON output contains a 'resourceType' field, which is set to the value of the `resource_type` class attribute. \n\nNo parameters are required. The method returns a dictionary that represents the resource in JSON format, including the added 'resourceType' key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to obtain the base JSON representation.\n- `self.resource_type`: A class attribute that defines the type of the FHIR resource, crucial for interoperability within the FHIR framework.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime in FHIR format. If None, an empty instance is created.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the Python datetime representation of the provided JSON string. Initially set to None until populated from `jsonval`.\n\nThis initializer invokes the superclass FHIRDate's constructor using `super().__init__(jsonval)`, ensuring that the parent class's initialization logic is also applied to handle the FHIR datetime format.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime in FHIR format. If None, an empty instance is created.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the Python datetime representation of the provided JSON string. Initially set to None until populated from `jsonval`.\n\nThis initializer invokes the superclass FHIRDate's constructor using `super().__init__(jsonval)`, ensuring that the parent class's initialization logic is also applied to handle the FHIR datetime format.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/person.py": {
      "Person.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Person object representing a generic person record with demographic and administrative information.\n\nThis constructor initializes various properties related to a person, such as `active` status, `address`, `birthDate`, `gender`, and other identifying attributes. If a `jsondict` is provided, it can be used to set these properties during initialization. The `strict` parameter controls error handling for validation; if set to True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the Person's properties.\n- strict (bool, optional): If True (default), raises a TypeError on validation errors; if False, allows invalid variables.\n\nAttributes:\n- active (bool): Indicates if the person's record is in active use.\n- address (list of Address): Contains one or more addresses for the person.\n- birthDate (FHIRDate): The date of birth of the person.\n- gender (str): Gender of the person, indicated as male, female, other, or unknown.\n- identifier (list of Identifier): Human identifiers for this person.\n- link (list of PersonLink): Links to resources concerning the same actual person.\n- managingOrganization (FHIRReference): The organization that is custodian of the person record.\n- name (list of HumanName): Names associated with the person.\n- photo (Attachment): An image of the person.\n- telecom (list of ContactPoint): Contact details for the person.\n\nDependencies:\n- This class inherits from `domainresource.DomainResource` and utilizes several other classes including `Address`, `Identifier`, `PersonLink`, `FHIRReference`, `HumanName`, `Attachment`, and `ContactPoint` that are defined and imported from related modules.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.active = None\n        \" This person's record is in active use.\\n        Type `bool`. \"\n        self.address = None\n        ' One or more addresses for the person.\\n        List of `Address` items (represented as `dict` in JSON). '\n        self.birthDate = None\n        ' The date on which the person was born.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.gender = None\n        ' male | female | other | unknown.\\n        Type `str`. '\n        self.identifier = None\n        ' A human identifier for this person.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.link = None\n        ' Link to a resource that concerns the same actual person.\\n        List of `PersonLink` items (represented as `dict` in JSON). '\n        self.managingOrganization = None\n        ' The organization that is the custodian of the person record.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.name = None\n        ' A name associated with the person.\\n        List of `HumanName` items (represented as `dict` in JSON). '\n        self.photo = None\n        ' Image of the person.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.telecom = None\n        ' A contact detail for the person.\\n        List of `ContactPoint` items (represented as `dict` in JSON). '\n        super(Person, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Person object representing a generic person record with demographic and administrative information.\n\nThis constructor initializes various properties related to a person, such as `active` status, `address`, `birthDate`, `gender`, and other identifying attributes. If a `jsondict` is provided, it can be used to set these properties during initialization. The `strict` parameter controls error handling for validation; if set to True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the Person's properties.\n- strict (bool, optional): If True (default), raises a TypeError on validation errors; if False, allows invalid variables.\n\nAttributes:\n- active (bool): Indicates if the person's record is in active use.\n- address (list of Address): Contains one or more addresses for the person.\n- birthDate (FHIRDate): The date of birth of the person.\n- gender (str): Gender of the person, indicated as male, female, other, or unknown.\n- identifier (list of Identifier): Human identifiers for this person.\n- link (list of PersonLink): Links to resources concerning the same actual person.\n- managingOrganization (FHIRReference): The organization that is custodian of the person record.\n- name (list of HumanName): Names associated with the person.\n- photo (Attachment): An image of the person.\n- telecom (list of ContactPoint): Contact details for the person.\n\nDependencies:\n- This class inherits from `domainresource.DomainResource` and utilizes several other classes including `Address`, `Identifier`, `PersonLink`, `FHIRReference`, `HumanName`, `Attachment`, and `ContactPoint` that are defined and imported from related modules.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Person(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/person.py:Person:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/person_test.py:PersonTests:testPerson1": {
      "tests/models/person_test.py:PersonTests:instantiate_from": {
        "fhirclient/models/person.py:Person:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/person.py:Person:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/person_test.py:PersonTests:implPerson1": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/person.py:Person:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/person.py:Person:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/person.py:Person:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/person_test.py:PersonTests:instantiate_from": {
      "fhirclient/models/person.py:Person:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/person.py:Person:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/person_test.py:PersonTests:testPerson2": {
      "tests/models/person_test.py:PersonTests:instantiate_from": {
        "fhirclient/models/person.py:Person:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/person.py:Person:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/person_test.py:PersonTests:implPerson2": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/person.py:Person:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/person.py:Person:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/person.py:Person:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-person_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 person.py\n            \u2514\u2500\u2500 Person.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and ensure the proper instantiation and integrity of FHIR-compliant `Person` resources, leveraging the SMART Health IT framework. It facilitates the parsing, validation, and round-trip serialization of `Person` data, ensuring that the resource adheres to FHIR standards in structure and content. Additionally, it verifies key attributes such as identifiers, demographic details, contact information, and associated metadata for accuracy and completeness. By providing a robust mechanism for testing `Person` resources, the module addresses the need for reliable data handling within healthcare interoperability solutions, aiding developers in maintaining conformance with FHIR specifications.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an instance of the FHIRDate class, designed to facilitate working with FHIR dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional parameter that should be a string representing a FHIR date in ISO 8601 format. If not provided, the default is None. If a value is provided, it must match the expected format defined by the class's regex constant _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation in Python's datetime format. It is set based on the jsonval provided, using the _from_string method for conversion.\n- origval (Union[str, None]): Holds the original JSON string used to initialize the instance.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format.\n\nThis initializer leverages the _REGEX class constant, which defines the expected format for FHIR dates, ensuring input validation. The _from_string method is also utilized to convert the valid string representation into a Python date object.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the original value (`origval`) is available and not None, it is returned directly. If `origval` is None, the method returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` property of the instance, which represents the parsed date. This method provides a means to retrieve either the exact input format or a normalized version, depending on what was provided during initialization.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a JSON representation of the FHIRAbstractResource instance, including its resource type.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase` to ensure that the JSON output contains a 'resourceType' field, which is set to the value of the `resource_type` class attribute. \n\nNo parameters are required. The method returns a dictionary that represents the resource in JSON format, including the added 'resourceType' key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to obtain the base JSON representation.\n- `self.resource_type`: A class attribute that defines the type of the FHIR resource, crucial for interoperability within the FHIR framework.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime in FHIR format. If None, an empty instance is created.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the Python datetime representation of the provided JSON string. Initially set to None until populated from `jsonval`.\n\nThis initializer invokes the superclass FHIRDate's constructor using `super().__init__(jsonval)`, ensuring that the parent class's initialization logic is also applied to handle the FHIR datetime format.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/person.py\n\n- CLASS METHOD: Person.__init__\n  - CLASS SIGNATURE: class Person(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Person object representing a generic person record with demographic and administrative information.\n\nThis constructor initializes various properties related to a person, such as `active` status, `address`, `birthDate`, `gender`, and other identifying attributes. If a `jsondict` is provided, it can be used to set these properties during initialization. The `strict` parameter controls error handling for validation; if set to True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to initialize the Person's properties.\n- strict (bool, optional): If True (default), raises a TypeError on validation errors; if False, allows invalid variables.\n\nAttributes:\n- active (bool): Indicates if the person's record is in active use.\n- address (list of Address): Contains one or more addresses for the person.\n- birthDate (FHIRDate): The date of birth of the person.\n- gender (str): Gender of the person, indicated as male, female, other, or unknown.\n- identifier (list of Identifier): Human identifiers for this person.\n- link (list of PersonLink): Links to resources concerning the same actual person.\n- managingOrganization (FHIRReference): The organization that is custodian of the person record.\n- name (list of HumanName): Names associated with the person.\n- photo (Attachment): An image of the person.\n- telecom (list of ContactPoint): Contact details for the person.\n\nDependencies:\n- This class inherits from `domainresource.DomainResource` and utilizes several other classes including `Address`, `Identifier`, `PersonLink`, `FHIRReference`, `HumanName`, `Attachment`, and `ContactPoint` that are defined and imported from related modules.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/person.py": "from . import domainresource\n\nclass Person(domainresource.DomainResource):\n    \"\"\" A generic person record.\n    \n    Demographics and administrative information about a person independent of a\n    specific health-related context.\n    \"\"\"\n    resource_type = 'Person'\n\n    def elementProperties(self):\n        js = super(Person, self).elementProperties()\n        js.extend([('active', 'active', bool, False, None, False), ('address', 'address', address.Address, True, None, False), ('birthDate', 'birthDate', fhirdate.FHIRDate, False, None, False), ('gender', 'gender', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('link', 'link', PersonLink, True, None, False), ('managingOrganization', 'managingOrganization', fhirreference.FHIRReference, False, None, False), ('name', 'name', humanname.HumanName, True, None, False), ('photo', 'photo', attachment.Attachment, False, None, False), ('telecom', 'telecom', contactpoint.ContactPoint, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass PersonLink(backboneelement.BackboneElement):\n    \"\"\" Link to a resource that concerns the same actual person.\n    \"\"\"\n    resource_type = 'PersonLink'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assurance = None\n        ' level1 | level2 | level3 | level4.\\n        Type `str`. '\n        self.target = None\n        ' The resource to which this actual person is associated.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(PersonLink, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PersonLink, self).elementProperties()\n        js.extend([('assurance', 'assurance', str, False, None, False), ('target', 'target', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import address\nfrom . import attachment\nfrom . import contactpoint\nfrom . import fhirdate\nfrom . import fhirreference\nfrom . import humanname\nfrom . import identifier"
  }
}