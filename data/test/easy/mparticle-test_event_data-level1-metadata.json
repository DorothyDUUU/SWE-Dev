{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_event_data",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_event_data.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.event_data import EventData\n\n\nclass TestEventData(unittest.TestCase):\n    \"\"\" EventData unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testEventData(self):\n        \"\"\"\n        Test EventData\n        \"\"\"\n        model = mparticle.models.event_data.EventData()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/event_data.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass EventData(object):\n\n    def __init__(self, timestamp_unixtime_ms=None, event_id=None,\n                 source_message_id=None, session_id=None,\n                 session_uuid=None, custom_attributes=None,\n                 location=None, device_current_state=None):\n        \"\"\"\n        EventData - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this EventData.\n\n\n        :return: The timestamp_unixtime_ms of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this EventData.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this EventData.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this EventData.\n\n\n        :return: The event_id of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this EventData.\n\n\n        :param event_id: The event_id of this EventData.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this EventData.\n\n\n        :return: The source_message_id of this EventData.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this EventData.\n\n\n        :param source_message_id: The source_message_id of this EventData.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this EventData.\n\n\n        :return: The session_id of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this EventData.\n\n\n        :param session_id: The session_id of this EventData.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this EventData.\n\n\n        :return: The session_uuid of this EventData.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this EventData.\n\n\n        :param session_uuid: The session_uuid of this EventData.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this EventData.\n\n\n        :return: The custom_attributes of this EventData.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this EventData.\n\n\n        :param custom_attributes: The custom_attributes of this EventData.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this EventData.\n\n\n        :return: The location of this EventData.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this EventData.\n\n\n        :param location: The location of this EventData.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this EventData.\n\n\n        :return: The device_current_state of this EventData.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this EventData.\n\n\n        :param device_current_state: The device_current_state of this EventData.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/event_data.py": {
      "EventData.__init__": {
        "code": "    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None):\n        \"\"\"Initialize an EventData instance, which represents an event in the mParticle Event API. This class is part of the model defined in Swagger and encapsulates event-related information including timestamps, event IDs, session identifiers, custom attributes, geographical location, and device state.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time format (milliseconds).\n- event_id (int, optional): Unique identifier for the event.\n- source_message_id (str, optional): Identifier for the source message associated with the event.\n- session_id (int, optional): Identifier for the session during which the event occurred.\n- session_uuid (str, optional): UUID representing the session.\n- custom_attributes (dict, optional): A dictionary of custom attributes related to the event (key-value pairs where both keys and values are strings).\n- location (GeoLocation, optional): An instance of GeoLocation representing the geographic location associated with the event.\n- device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState representing the current state of the device when the event occurred.\n\nThis constructor initializes the instance attributes and maps them to their respective types and JSON keys, facilitating easy serialization and access. It relies on additional classes, GeoLocation and DeviceCurrentState, for handling location and device state attributes, respectively.\"\"\"\n        '\\n        EventData - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self._custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state",
        "docstring": "Initialize an EventData instance, which represents an event in the mParticle Event API. This class is part of the model defined in Swagger and encapsulates event-related information including timestamps, event IDs, session identifiers, custom attributes, geographical location, and device state.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time format (milliseconds).\n- event_id (int, optional): Unique identifier for the event.\n- source_message_id (str, optional): Identifier for the source message associated with the event.\n- session_id (int, optional): Identifier for the session during which the event occurred.\n- session_uuid (str, optional): UUID representing the session.\n- custom_attributes (dict, optional): A dictionary of custom attributes related to the event (key-value pairs where both keys and values are strings).\n- location (GeoLocation, optional): An instance of GeoLocation representing the geographic location associated with the event.\n- device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState representing the current state of the device when the event occurred.\n\nThis constructor initializes the instance attributes and maps them to their respective types and JSON keys, facilitating easy serialization and access. It relies on additional classes, GeoLocation and DeviceCurrentState, for handling location and device state attributes, respectively.",
        "signature": "def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None):",
        "type": "Method",
        "class_signature": "class EventData(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_event_data\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 event_data.py\n            \u2514\u2500\u2500 EventData.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module interacts with the mParticle Event API and facilitates the creation and validation of event data models for integration with the mParticle ecosystem. Its primary purpose is to ensure that event data structures conform to the API's specifications by enabling the definition, testing, and handling of event data objects. By providing functionality to validate and manage event data, the module simplifies the process for developers to integrate their systems with mParticle's platform, ensuring seamless event tracking and analytics workflows. This addresses common challenges related to maintaining data integrity and compatibility in the exchange of event information.\n\n## FILE 1: mparticle/models/event_data.py\n\n- CLASS METHOD: EventData.__init__\n  - CLASS SIGNATURE: class EventData(object):\n  - SIGNATURE: def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an EventData instance, which represents an event in the mParticle Event API. This class is part of the model defined in Swagger and encapsulates event-related information including timestamps, event IDs, session identifiers, custom attributes, geographical location, and device state.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in Unix time format (milliseconds).\n- event_id (int, optional): Unique identifier for the event.\n- source_message_id (str, optional): Identifier for the source message associated with the event.\n- session_id (int, optional): Identifier for the session during which the event occurred.\n- session_uuid (str, optional): UUID representing the session.\n- custom_attributes (dict, optional): A dictionary of custom attributes related to the event (key-value pairs where both keys and values are strings).\n- location (GeoLocation, optional): An instance of GeoLocation representing the geographic location associated with the event.\n- device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState representing the current state of the device when the event occurred.\n\nThis constructor initializes the instance attributes and maps them to their respective types and JSON keys, facilitating easy serialization and access. It relies on additional classes, GeoLocation and DeviceCurrentState, for handling location and device state attributes, respectively.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/event_data.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass EventData(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this EventData.\n\n\n        :return: The timestamp_unixtime_ms of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this EventData.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this EventData.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this EventData.\n\n\n        :return: The event_id of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this EventData.\n\n\n        :param event_id: The event_id of this EventData.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this EventData.\n\n\n        :return: The source_message_id of this EventData.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this EventData.\n\n\n        :param source_message_id: The source_message_id of this EventData.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this EventData.\n\n\n        :return: The session_id of this EventData.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this EventData.\n\n\n        :param session_id: The session_id of this EventData.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this EventData.\n\n\n        :return: The session_uuid of this EventData.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this EventData.\n\n\n        :param session_uuid: The session_uuid of this EventData.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this EventData.\n\n\n        :return: The custom_attributes of this EventData.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this EventData.\n\n\n        :param custom_attributes: The custom_attributes of this EventData.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this EventData.\n\n\n        :return: The location of this EventData.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this EventData.\n\n\n        :param location: The location of this EventData.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this EventData.\n\n\n        :return: The device_current_state of this EventData.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this EventData.\n\n\n        :param device_current_state: The device_current_state of this EventData.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_event_data.py:TestEventData:testEventData": {
      "mparticle/models/event_data.py:EventData:__init__": {}
    }
  }
}