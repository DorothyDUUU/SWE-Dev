{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-explanationofbenefit_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/explanationofbenefit_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import explanationofbenefit\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ExplanationOfBenefitTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ExplanationOfBenefit\", js[\"resourceType\"])\n        return explanationofbenefit.ExplanationOfBenefit(js)\n    \n    def testExplanationOfBenefit1(self):\n        inst = self.instantiate_from(\"explanationofbenefit-example-2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ExplanationOfBenefit instance\")\n        self.implExplanationOfBenefit1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ExplanationOfBenefit\", js[\"resourceType\"])\n        inst2 = explanationofbenefit.ExplanationOfBenefit(js)\n        self.implExplanationOfBenefit1(inst2)\n    \n    def implExplanationOfBenefit1(self, inst):\n        self.assertEqual(inst.accident.date.date, FHIRDate(\"2014-02-14\").date)\n        self.assertEqual(inst.accident.date.as_json(), \"2014-02-14\")\n        self.assertEqual(inst.accident.type.coding[0].code, \"SPT\")\n        self.assertEqual(inst.accident.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n        self.assertEqual(inst.billablePeriod.end.datetime, FHIRDateTime(\"2014-03-01\").datetime)\n        self.assertEqual(inst.billablePeriod.end.as_json(), \"2014-03-01\")\n        self.assertEqual(inst.billablePeriod.start.datetime, FHIRDateTime(\"2014-02-01\").datetime)\n        self.assertEqual(inst.billablePeriod.start.as_json(), \"2014-02-01\")\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Could not process.\")\n        self.assertEqual(inst.formCode.coding[0].code, \"2\")\n        self.assertEqual(inst.formCode.coding[0].system, \"http://terminology.hl7.org/CodeSystem/forms-codes\")\n        self.assertEqual(inst.id, \"EB3501\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.BenefitsInc.com/fhir/explanationofbenefit\")\n        self.assertEqual(inst.identifier[0].value, \"error-1\")\n        self.assertTrue(inst.insurance[0].focal)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"error\")\n        self.assertEqual(inst.precedence, 2)\n        self.assertEqual(inst.procedure[0].date.datetime, FHIRDateTime(\"2014-02-14\").datetime)\n        self.assertEqual(inst.procedure[0].date.as_json(), \"2014-02-14\")\n        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].code, \"123001\")\n        self.assertEqual(inst.procedure[0].procedureCodeableConcept.coding[0].system, \"http://hl7.org/fhir/sid/ex-icd-10-procedures\")\n        self.assertEqual(inst.procedure[0].sequence, 1)\n        self.assertEqual(inst.processNote[0].language.coding[0].code, \"en-CA\")\n        self.assertEqual(inst.processNote[0].language.coding[0].system, \"urn:ietf:bcp:47\")\n        self.assertEqual(inst.processNote[0].number, 1)\n        self.assertEqual(inst.processNote[0].text, \"Invalid claim\")\n        self.assertEqual(inst.processNote[0].type, \"display\")\n        self.assertEqual(inst.related[0].reference.system, \"http://www.BenefitsInc.com/case-number\")\n        self.assertEqual(inst.related[0].reference.value, \"23-56Tu-XX-47-20150M14\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.subType.coding[0].code, \"emergency\")\n        self.assertEqual(inst.subType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-claimsubtype\")\n        self.assertEqual(inst.supportingInfo[0].category.coding[0].code, \"employmentimpacted\")\n        self.assertEqual(inst.supportingInfo[0].category.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claiminformationcategory\")\n        self.assertEqual(inst.supportingInfo[0].sequence, 1)\n        self.assertEqual(inst.supportingInfo[0].timingPeriod.end.datetime, FHIRDateTime(\"2014-02-28\").datetime)\n        self.assertEqual(inst.supportingInfo[0].timingPeriod.end.as_json(), \"2014-02-28\")\n        self.assertEqual(inst.supportingInfo[0].timingPeriod.start.datetime, FHIRDateTime(\"2014-02-14\").datetime)\n        self.assertEqual(inst.supportingInfo[0].timingPeriod.start.as_json(), \"2014-02-14\")\n        self.assertEqual(inst.supportingInfo[1].category.coding[0].code, \"hospitalized\")\n        self.assertEqual(inst.supportingInfo[1].category.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claiminformationcategory\")\n        self.assertEqual(inst.supportingInfo[1].sequence, 2)\n        self.assertEqual(inst.supportingInfo[1].timingPeriod.end.datetime, FHIRDateTime(\"2014-02-16\").datetime)\n        self.assertEqual(inst.supportingInfo[1].timingPeriod.end.as_json(), \"2014-02-16\")\n        self.assertEqual(inst.supportingInfo[1].timingPeriod.start.datetime, FHIRDateTime(\"2014-02-14\").datetime)\n        self.assertEqual(inst.supportingInfo[1].timingPeriod.start.as_json(), \"2014-02-14\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 2478.57)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 0.0)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n    \n    def testExplanationOfBenefit2(self):\n        inst = self.instantiate_from(\"explanationofbenefit-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ExplanationOfBenefit instance\")\n        self.implExplanationOfBenefit2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ExplanationOfBenefit\", js[\"resourceType\"])\n        inst2 = explanationofbenefit.ExplanationOfBenefit(js)\n        self.implExplanationOfBenefit2(inst2)\n    \n    def implExplanationOfBenefit2(self, inst):\n        self.assertEqual(inst.careTeam[0].sequence, 1)\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Claim settled as per contract.\")\n        self.assertEqual(inst.id, \"EB3500\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.BenefitsInc.com/fhir/explanationofbenefit\")\n        self.assertEqual(inst.identifier[0].value, \"987654321\")\n        self.assertTrue(inst.insurance[0].focal)\n        self.assertEqual(inst.item[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.value, 120.0)\n        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].adjudication[1].value, 0.8)\n        self.assertEqual(inst.item[0].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[2].amount.value, 96.0)\n        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].careTeamSequence[0], 1)\n        self.assertEqual(inst.item[0].net.currency, \"USD\")\n        self.assertEqual(inst.item[0].net.value, 135.57)\n        self.assertEqual(inst.item[0].productOrService.coding[0].code, \"1205\")\n        self.assertEqual(inst.item[0].productOrService.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-USCLS\")\n        self.assertEqual(inst.item[0].sequence, 1)\n        self.assertEqual(inst.item[0].servicedDate.date, FHIRDate(\"2014-08-16\").date)\n        self.assertEqual(inst.item[0].servicedDate.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.item[0].unitPrice.currency, \"USD\")\n        self.assertEqual(inst.item[0].unitPrice.value, 135.57)\n        self.assertEqual(inst.item[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].adjudication[0].amount.value, 180.0)\n        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[1].careTeamSequence[0], 1)\n        self.assertEqual(inst.item[1].detail[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].adjudication[0].amount.value, 180.0)\n        self.assertEqual(inst.item[1].detail[0].adjudication[0].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[1].detail[0].net.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].net.value, 200.0)\n        self.assertEqual(inst.item[1].detail[0].productOrService.coding[0].code, \"group\")\n        self.assertEqual(inst.item[1].detail[0].sequence, 1)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].amount.value, 200.0)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[1].value, 0.9)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].amount.value, 180.0)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].net.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].net.value, 200.0)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].code, \"1205\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].productOrService.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-USCLS\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].sequence, 1)\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].unitPrice.currency, \"USD\")\n        self.assertEqual(inst.item[1].detail[0].subDetail[0].unitPrice.value, 200.0)\n        self.assertEqual(inst.item[1].net.currency, \"USD\")\n        self.assertEqual(inst.item[1].net.value, 200.0)\n        self.assertEqual(inst.item[1].productOrService.coding[0].code, \"group\")\n        self.assertEqual(inst.item[1].sequence, 2)\n        self.assertEqual(inst.item[1].servicedDate.date, FHIRDate(\"2014-08-16\").date)\n        self.assertEqual(inst.item[1].servicedDate.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"complete\")\n        self.assertEqual(inst.payee.type.coding[0].code, \"provider\")\n        self.assertEqual(inst.payee.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payeetype\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the ExplanationOfBenefit</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 135.57)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 96.0)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/explanationofbenefit.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ExplanationOfBenefit(domainresource.DomainResource):\n    \"\"\" Explanation of Benefit resource.\n    \n    This resource provides: the claim details; adjudication details from the\n    processing of a Claim; and optionally account balance information, for\n    informing the subscriber of the benefits provided.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefit\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.accident = None\n        \"\"\" Details of the event.\n        Type `ExplanationOfBenefitAccident` (represented as `dict` in JSON). \"\"\"\n        \n        self.addItem = None\n        \"\"\" Insurer added line items.\n        List of `ExplanationOfBenefitAddItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Header-level adjudication.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.benefitBalance = None\n        \"\"\" Balance by Benefit Category.\n        List of `ExplanationOfBenefitBenefitBalance` items (represented as `dict` in JSON). \"\"\"\n        \n        self.benefitPeriod = None\n        \"\"\" When the benefits are applicable.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.billablePeriod = None\n        \"\"\" Relevant time frame for the claim.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.careTeam = None\n        \"\"\" Care Team members.\n        List of `ExplanationOfBenefitCareTeam` items (represented as `dict` in JSON). \"\"\"\n        \n        self.claim = None\n        \"\"\" Claim reference.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.claimResponse = None\n        \"\"\" Claim response reference.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.created = None\n        \"\"\" Response creation date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.diagnosis = None\n        \"\"\" Pertinent diagnosis information.\n        List of `ExplanationOfBenefitDiagnosis` items (represented as `dict` in JSON). \"\"\"\n        \n        self.disposition = None\n        \"\"\" Disposition Message.\n        Type `str`. \"\"\"\n        \n        self.enterer = None\n        \"\"\" Author of the claim.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.facility = None\n        \"\"\" Servicing Facility.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.form = None\n        \"\"\" Printed reference or actual form.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.formCode = None\n        \"\"\" Printed form identifier.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.fundsReserve = None\n        \"\"\" Funds reserved status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.fundsReserveRequested = None\n        \"\"\" For whom to reserve funds.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for the resource.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurance = None\n        \"\"\" Patient insurance information.\n        List of `ExplanationOfBenefitInsurance` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurer = None\n        \"\"\" Party responsible for reimbursement.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Product or service provided.\n        List of `ExplanationOfBenefitItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.originalPrescription = None\n        \"\"\" Original prescription if superceded by fulfiller.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.outcome = None\n        \"\"\" queued | complete | error | partial.\n        Type `str`. \"\"\"\n        \n        self.patient = None\n        \"\"\" The recipient of the products and services.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.payee = None\n        \"\"\" Recipient of benefits payable.\n        Type `ExplanationOfBenefitPayee` (represented as `dict` in JSON). \"\"\"\n        \n        self.payment = None\n        \"\"\" Payment Details.\n        Type `ExplanationOfBenefitPayment` (represented as `dict` in JSON). \"\"\"\n        \n        self.preAuthRef = None\n        \"\"\" Preauthorization reference.\n        List of `str` items. \"\"\"\n        \n        self.preAuthRefPeriod = None\n        \"\"\" Preauthorization in-effect period.\n        List of `Period` items (represented as `dict` in JSON). \"\"\"\n        \n        self.precedence = None\n        \"\"\" Precedence (primary, secondary, etc.).\n        Type `int`. \"\"\"\n        \n        self.prescription = None\n        \"\"\" Prescription authorizing services or products.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" Desired processing urgency.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.procedure = None\n        \"\"\" Clinical procedures performed.\n        List of `ExplanationOfBenefitProcedure` items (represented as `dict` in JSON). \"\"\"\n        \n        self.processNote = None\n        \"\"\" Note concerning adjudication.\n        List of `ExplanationOfBenefitProcessNote` items (represented as `dict` in JSON). \"\"\"\n        \n        self.provider = None\n        \"\"\" Party responsible for the claim.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.referral = None\n        \"\"\" Treatment Referral.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.related = None\n        \"\"\" Prior or corollary claims.\n        List of `ExplanationOfBenefitRelated` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | cancelled | draft | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.subType = None\n        \"\"\" More granular claim type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.supportingInfo = None\n        \"\"\" Supporting information.\n        List of `ExplanationOfBenefitSupportingInfo` items (represented as `dict` in JSON). \"\"\"\n        \n        self.total = None\n        \"\"\" Adjudication totals.\n        List of `ExplanationOfBenefitTotal` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Category or discipline.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.use = None\n        \"\"\" claim | preauthorization | predetermination.\n        Type `str`. \"\"\"\n        \n        super(ExplanationOfBenefit, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefit, self).elementProperties()\n        js.extend([\n            (\"accident\", \"accident\", ExplanationOfBenefitAccident, False, None, False),\n            (\"addItem\", \"addItem\", ExplanationOfBenefitAddItem, True, None, False),\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"benefitBalance\", \"benefitBalance\", ExplanationOfBenefitBenefitBalance, True, None, False),\n            (\"benefitPeriod\", \"benefitPeriod\", period.Period, False, None, False),\n            (\"billablePeriod\", \"billablePeriod\", period.Period, False, None, False),\n            (\"careTeam\", \"careTeam\", ExplanationOfBenefitCareTeam, True, None, False),\n            (\"claim\", \"claim\", fhirreference.FHIRReference, False, None, False),\n            (\"claimResponse\", \"claimResponse\", fhirreference.FHIRReference, False, None, False),\n            (\"created\", \"created\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"diagnosis\", \"diagnosis\", ExplanationOfBenefitDiagnosis, True, None, False),\n            (\"disposition\", \"disposition\", str, False, None, False),\n            (\"enterer\", \"enterer\", fhirreference.FHIRReference, False, None, False),\n            (\"facility\", \"facility\", fhirreference.FHIRReference, False, None, False),\n            (\"form\", \"form\", attachment.Attachment, False, None, False),\n            (\"formCode\", \"formCode\", codeableconcept.CodeableConcept, False, None, False),\n            (\"fundsReserve\", \"fundsReserve\", codeableconcept.CodeableConcept, False, None, False),\n            (\"fundsReserveRequested\", \"fundsReserveRequested\", codeableconcept.CodeableConcept, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"insurance\", \"insurance\", ExplanationOfBenefitInsurance, True, None, True),\n            (\"insurer\", \"insurer\", fhirreference.FHIRReference, False, None, True),\n            (\"item\", \"item\", ExplanationOfBenefitItem, True, None, False),\n            (\"originalPrescription\", \"originalPrescription\", fhirreference.FHIRReference, False, None, False),\n            (\"outcome\", \"outcome\", str, False, None, True),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"payee\", \"payee\", ExplanationOfBenefitPayee, False, None, False),\n            (\"payment\", \"payment\", ExplanationOfBenefitPayment, False, None, False),\n            (\"preAuthRef\", \"preAuthRef\", str, True, None, False),\n            (\"preAuthRefPeriod\", \"preAuthRefPeriod\", period.Period, True, None, False),\n            (\"precedence\", \"precedence\", int, False, None, False),\n            (\"prescription\", \"prescription\", fhirreference.FHIRReference, False, None, False),\n            (\"priority\", \"priority\", codeableconcept.CodeableConcept, False, None, False),\n            (\"procedure\", \"procedure\", ExplanationOfBenefitProcedure, True, None, False),\n            (\"processNote\", \"processNote\", ExplanationOfBenefitProcessNote, True, None, False),\n            (\"provider\", \"provider\", fhirreference.FHIRReference, False, None, True),\n            (\"referral\", \"referral\", fhirreference.FHIRReference, False, None, False),\n            (\"related\", \"related\", ExplanationOfBenefitRelated, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subType\", \"subType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"supportingInfo\", \"supportingInfo\", ExplanationOfBenefitSupportingInfo, True, None, False),\n            (\"total\", \"total\", ExplanationOfBenefitTotal, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"use\", \"use\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ExplanationOfBenefitAccident(backboneelement.BackboneElement):\n    \"\"\" Details of the event.\n    \n    Details of a accident which resulted in injuries which required the\n    products and services listed in the claim.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitAccident\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.date = None\n        \"\"\" When the incident occurred.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.locationAddress = None\n        \"\"\" Where the event occurred.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationReference = None\n        \"\"\" Where the event occurred.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The nature of the accident.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitAccident, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAccident, self).elementProperties()\n        js.extend([\n            (\"date\", \"date\", fhirdate.FHIRDate, False, None, False),\n            (\"locationAddress\", \"locationAddress\", address.Address, False, \"location\", False),\n            (\"locationReference\", \"locationReference\", fhirreference.FHIRReference, False, \"location\", False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitAddItem(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The first-tier service adjudications for payor added product or service\n    lines.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitAddItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items adjudication.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" Anatomical location.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Insurer added line items.\n        List of `ExplanationOfBenefitAddItemDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.detailSequence = None\n        \"\"\" Detail sequence number.\n        List of `int` items. \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.itemSequence = None\n        \"\"\" Item sequence number.\n        List of `int` items. \"\"\"\n        \n        self.locationAddress = None\n        \"\"\" Place of service or where product was supplied.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationCodeableConcept = None\n        \"\"\" Place of service or where product was supplied.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationReference = None\n        \"\"\" Place of service or where product was supplied.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.programCode = None\n        \"\"\" Program the product or service is provided under.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.provider = None\n        \"\"\" Authorized providers.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.servicedDate = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.servicedPeriod = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.subDetailSequence = None\n        \"\"\" Subdetail sequence number.\n        List of `int` items. \"\"\"\n        \n        self.subSite = None\n        \"\"\" Anatomical sub-location.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitAddItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItem, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, False, None, False),\n            (\"detail\", \"detail\", ExplanationOfBenefitAddItemDetail, True, None, False),\n            (\"detailSequence\", \"detailSequence\", int, True, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"itemSequence\", \"itemSequence\", int, True, None, False),\n            (\"locationAddress\", \"locationAddress\", address.Address, False, \"location\", False),\n            (\"locationCodeableConcept\", \"locationCodeableConcept\", codeableconcept.CodeableConcept, False, \"location\", False),\n            (\"locationReference\", \"locationReference\", fhirreference.FHIRReference, False, \"location\", False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"programCode\", \"programCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"provider\", \"provider\", fhirreference.FHIRReference, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"servicedDate\", \"servicedDate\", fhirdate.FHIRDate, False, \"serviced\", False),\n            (\"servicedPeriod\", \"servicedPeriod\", period.Period, False, \"serviced\", False),\n            (\"subDetailSequence\", \"subDetailSequence\", int, True, None, False),\n            (\"subSite\", \"subSite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitAddItemDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The second-tier service adjudications for payor added services.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitAddItemDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items adjudication.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.subDetail = None\n        \"\"\" Insurer added line items.\n        List of `ExplanationOfBenefitAddItemDetailSubDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitAddItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItemDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"subDetail\", \"subDetail\", ExplanationOfBenefitAddItemDetailSubDetail, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitAddItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The third-tier service adjudications for payor added services.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitAddItemDetailSubDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items adjudication.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitAddItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItemDetailSubDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitBenefitBalance(backboneelement.BackboneElement):\n    \"\"\" Balance by Benefit Category.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitBenefitBalance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.category = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Description of the benefit or services covered.\n        Type `str`. \"\"\"\n        \n        self.excluded = None\n        \"\"\" Excluded from the plan.\n        Type `bool`. \"\"\"\n        \n        self.financial = None\n        \"\"\" Benefit Summary.\n        List of `ExplanationOfBenefitBenefitBalanceFinancial` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Short name for the benefit.\n        Type `str`. \"\"\"\n        \n        self.network = None\n        \"\"\" In or out of network.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.term = None\n        \"\"\" Annual or lifetime.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.unit = None\n        \"\"\" Individual or family.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitBenefitBalance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitBenefitBalance, self).elementProperties()\n        js.extend([\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"excluded\", \"excluded\", bool, False, None, False),\n            (\"financial\", \"financial\", ExplanationOfBenefitBenefitBalanceFinancial, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"network\", \"network\", codeableconcept.CodeableConcept, False, None, False),\n            (\"term\", \"term\", codeableconcept.CodeableConcept, False, None, False),\n            (\"unit\", \"unit\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitBenefitBalanceFinancial(backboneelement.BackboneElement):\n    \"\"\" Benefit Summary.\n    \n    Benefits Used to date.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitBenefitBalanceFinancial\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allowedMoney = None\n        \"\"\" Benefits allowed.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.allowedString = None\n        \"\"\" Benefits allowed.\n        Type `str`. \"\"\"\n        \n        self.allowedUnsignedInt = None\n        \"\"\" Benefits allowed.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.usedMoney = None\n        \"\"\" Benefits used.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.usedUnsignedInt = None\n        \"\"\" Benefits used.\n        Type `int`. \"\"\"\n        \n        super(ExplanationOfBenefitBenefitBalanceFinancial, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitBenefitBalanceFinancial, self).elementProperties()\n        js.extend([\n            (\"allowedMoney\", \"allowedMoney\", money.Money, False, \"allowed\", False),\n            (\"allowedString\", \"allowedString\", str, False, \"allowed\", False),\n            (\"allowedUnsignedInt\", \"allowedUnsignedInt\", int, False, \"allowed\", False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"usedMoney\", \"usedMoney\", money.Money, False, \"used\", False),\n            (\"usedUnsignedInt\", \"usedUnsignedInt\", int, False, \"used\", False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitCareTeam(backboneelement.BackboneElement):\n    \"\"\" Care Team members.\n    \n    The members of the team who provided the products and services.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitCareTeam\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.provider = None\n        \"\"\" Practitioner or organization.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.qualification = None\n        \"\"\" Practitioner credential or specialization.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.responsible = None\n        \"\"\" Indicator of the lead practitioner.\n        Type `bool`. \"\"\"\n        \n        self.role = None\n        \"\"\" Function within the team.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Order of care team.\n        Type `int`. \"\"\"\n        \n        super(ExplanationOfBenefitCareTeam, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitCareTeam, self).elementProperties()\n        js.extend([\n            (\"provider\", \"provider\", fhirreference.FHIRReference, False, None, True),\n            (\"qualification\", \"qualification\", codeableconcept.CodeableConcept, False, None, False),\n            (\"responsible\", \"responsible\", bool, False, None, False),\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitDiagnosis(backboneelement.BackboneElement):\n    \"\"\" Pertinent diagnosis information.\n    \n    Information about diagnoses relevant to the claim items.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitDiagnosis\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.diagnosisCodeableConcept = None\n        \"\"\" Nature of illness or problem.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.diagnosisReference = None\n        \"\"\" Nature of illness or problem.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.onAdmission = None\n        \"\"\" Present on admission.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.packageCode = None\n        \"\"\" Package billing code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Diagnosis instance identifier.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" Timing or nature of the diagnosis.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitDiagnosis, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitDiagnosis, self).elementProperties()\n        js.extend([\n            (\"diagnosisCodeableConcept\", \"diagnosisCodeableConcept\", codeableconcept.CodeableConcept, False, \"diagnosis\", True),\n            (\"diagnosisReference\", \"diagnosisReference\", fhirreference.FHIRReference, False, \"diagnosis\", True),\n            (\"onAdmission\", \"onAdmission\", codeableconcept.CodeableConcept, False, None, False),\n            (\"packageCode\", \"packageCode\", codeableconcept.CodeableConcept, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services specified on the claim.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitInsurance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.coverage = None\n        \"\"\" Insurance information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.focal = None\n        \"\"\" Coverage to be used for adjudication.\n        Type `bool`. \"\"\"\n        \n        self.preAuthRef = None\n        \"\"\" Prior authorization reference number.\n        List of `str` items. \"\"\"\n        \n        super(ExplanationOfBenefitInsurance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitInsurance, self).elementProperties()\n        js.extend([\n            (\"coverage\", \"coverage\", fhirreference.FHIRReference, False, None, True),\n            (\"focal\", \"focal\", bool, False, None, True),\n            (\"preAuthRef\", \"preAuthRef\", str, True, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitItem(backboneelement.BackboneElement):\n    \"\"\" Product or service provided.\n    \n    A claim line. Either a simple (a product or service) or a 'group' of\n    details which can also be a simple items or groups of sub-details.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Adjudication details.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" Anatomical location.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.careTeamSequence = None\n        \"\"\" Applicable care team members.\n        List of `int` items. \"\"\"\n        \n        self.category = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Additional items.\n        List of `ExplanationOfBenefitItemDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.diagnosisSequence = None\n        \"\"\" Applicable diagnoses.\n        List of `int` items. \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounters related to this billed item.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.informationSequence = None\n        \"\"\" Applicable exception and supporting information.\n        List of `int` items. \"\"\"\n        \n        self.locationAddress = None\n        \"\"\" Place of service or where product was supplied.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationCodeableConcept = None\n        \"\"\" Place of service or where product was supplied.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationReference = None\n        \"\"\" Place of service or where product was supplied.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Product or service billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.procedureSequence = None\n        \"\"\" Applicable procedures.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.programCode = None\n        \"\"\" Program the product or service is provided under.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.revenue = None\n        \"\"\" Revenue or cost center code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Item instance identifier.\n        Type `int`. \"\"\"\n        \n        self.servicedDate = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.servicedPeriod = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.subSite = None\n        \"\"\" Anatomical sub-location.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.udi = None\n        \"\"\" Unique device identifier.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItem, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, False, None, False),\n            (\"careTeamSequence\", \"careTeamSequence\", int, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, False),\n            (\"detail\", \"detail\", ExplanationOfBenefitItemDetail, True, None, False),\n            (\"diagnosisSequence\", \"diagnosisSequence\", int, True, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, True, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"informationSequence\", \"informationSequence\", int, True, None, False),\n            (\"locationAddress\", \"locationAddress\", address.Address, False, \"location\", False),\n            (\"locationCodeableConcept\", \"locationCodeableConcept\", codeableconcept.CodeableConcept, False, \"location\", False),\n            (\"locationReference\", \"locationReference\", fhirreference.FHIRReference, False, \"location\", False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"procedureSequence\", \"procedureSequence\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"programCode\", \"programCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"revenue\", \"revenue\", codeableconcept.CodeableConcept, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"servicedDate\", \"servicedDate\", fhirdate.FHIRDate, False, \"serviced\", False),\n            (\"servicedPeriod\", \"servicedPeriod\", period.Period, False, \"serviced\", False),\n            (\"subSite\", \"subSite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"udi\", \"udi\", fhirreference.FHIRReference, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitItemAdjudication(backboneelement.BackboneElement):\n    \"\"\" Adjudication details.\n    \n    If this item is a group then the values here are a summary of the\n    adjudication of the detail items. If this item is a simple product or\n    service then this is the result of the adjudication of this item.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitItemAdjudication\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Monetary amount.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Type of adjudication information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Explanation of adjudication outcome.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Non-monitary value.\n        Type `float`. \"\"\"\n        \n        super(ExplanationOfBenefitItemAdjudication, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemAdjudication, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", money.Money, False, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n            (\"reason\", \"reason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"value\", \"value\", float, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitItemDetail(backboneelement.BackboneElement):\n    \"\"\" Additional items.\n    \n    Second-tier of goods and services.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitItemDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Detail level adjudication details.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.programCode = None\n        \"\"\" Program the product or service is provided under.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.revenue = None\n        \"\"\" Revenue or cost center code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Product or service provided.\n        Type `int`. \"\"\"\n        \n        self.subDetail = None\n        \"\"\" Additional items.\n        List of `ExplanationOfBenefitItemDetailSubDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.udi = None\n        \"\"\" Unique device identifier.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"programCode\", \"programCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"revenue\", \"revenue\", codeableconcept.CodeableConcept, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"subDetail\", \"subDetail\", ExplanationOfBenefitItemDetailSubDetail, True, None, False),\n            (\"udi\", \"udi\", fhirreference.FHIRReference, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Additional items.\n    \n    Third-tier of goods and services.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitItemDetailSubDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Subdetail level adjudication details.\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Benefit classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.programCode = None\n        \"\"\" Program the product or service is provided under.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.revenue = None\n        \"\"\" Revenue or cost center code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Product or service provided.\n        Type `int`. \"\"\"\n        \n        self.udi = None\n        \"\"\" Unique device identifier.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemDetailSubDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ExplanationOfBenefitItemAdjudication, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"programCode\", \"programCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"revenue\", \"revenue\", codeableconcept.CodeableConcept, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"udi\", \"udi\", fhirreference.FHIRReference, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitPayee(backboneelement.BackboneElement):\n    \"\"\" Recipient of benefits payable.\n    \n    The party to be reimbursed for cost of the products and services according\n    to the terms of the policy.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitPayee\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.party = None\n        \"\"\" Recipient reference.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Category of recipient.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitPayee, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitPayee, self).elementProperties()\n        js.extend([\n            (\"party\", \"party\", fhirreference.FHIRReference, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitPayment(backboneelement.BackboneElement):\n    \"\"\" Payment Details.\n    \n    Payment details for the adjudication of the claim.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitPayment\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjustment = None\n        \"\"\" Payment adjustment for non-claim issues.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.adjustmentReason = None\n        \"\"\" Explanation for the variance.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.amount = None\n        \"\"\" Payable amount after adjustment.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Expected date of payment.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier for the payment.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Partial or complete payment.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitPayment, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitPayment, self).elementProperties()\n        js.extend([\n            (\"adjustment\", \"adjustment\", money.Money, False, None, False),\n            (\"adjustmentReason\", \"adjustmentReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"amount\", \"amount\", money.Money, False, None, False),\n            (\"date\", \"date\", fhirdate.FHIRDate, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitProcedure(backboneelement.BackboneElement):\n    \"\"\" Clinical procedures performed.\n    \n    Procedures performed on the patient relevant to the billing items with the\n    claim.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitProcedure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.date = None\n        \"\"\" When the procedure was performed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.procedureCodeableConcept = None\n        \"\"\" Specific clinical procedure.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.procedureReference = None\n        \"\"\" Specific clinical procedure.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Procedure instance identifier.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" Category of Procedure.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.udi = None\n        \"\"\" Unique device identifier.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitProcedure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitProcedure, self).elementProperties()\n        js.extend([\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"procedureCodeableConcept\", \"procedureCodeableConcept\", codeableconcept.CodeableConcept, False, \"procedure\", True),\n            (\"procedureReference\", \"procedureReference\", fhirreference.FHIRReference, False, \"procedure\", True),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n            (\"udi\", \"udi\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitProcessNote(backboneelement.BackboneElement):\n    \"\"\" Note concerning adjudication.\n    \n    A note that describes or explains adjudication results in a human readable\n    form.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitProcessNote\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the text.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.number = None\n        \"\"\" Note instance identifier.\n        Type `int`. \"\"\"\n        \n        self.text = None\n        \"\"\" Note explanatory text.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" display | print | printoper.\n        Type `str`. \"\"\"\n        \n        super(ExplanationOfBenefitProcessNote, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitProcessNote, self).elementProperties()\n        js.extend([\n            (\"language\", \"language\", codeableconcept.CodeableConcept, False, None, False),\n            (\"number\", \"number\", int, False, None, False),\n            (\"text\", \"text\", str, False, None, False),\n            (\"type\", \"type\", str, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitRelated(backboneelement.BackboneElement):\n    \"\"\" Prior or corollary claims.\n    \n    Other claims which are related to this claim such as prior submissions or\n    claims for related services or for the same event.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitRelated\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.claim = None\n        \"\"\" Reference to the related claim.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.reference = None\n        \"\"\" File or case reference.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" How the reference claim is related.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitRelated, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitRelated, self).elementProperties()\n        js.extend([\n            (\"claim\", \"claim\", fhirreference.FHIRReference, False, None, False),\n            (\"reference\", \"reference\", identifier.Identifier, False, None, False),\n            (\"relationship\", \"relationship\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitSupportingInfo(backboneelement.BackboneElement):\n    \"\"\" Supporting information.\n    \n    Additional information codes regarding exceptions, special considerations,\n    the condition, situation, prior or concurrent issues.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitSupportingInfo\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.category = None\n        \"\"\" Classification of the supplied information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Type of information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Explanation for the information.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.sequence = None\n        \"\"\" Information instance identifier.\n        Type `int`. \"\"\"\n        \n        self.timingDate = None\n        \"\"\" When it occurred.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" When it occurred.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" Data to be provided.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Data to be provided.\n        Type `bool`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Data to be provided.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Data to be provided.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Data to be provided.\n        Type `str`. \"\"\"\n        \n        super(ExplanationOfBenefitSupportingInfo, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitSupportingInfo, self).elementProperties()\n        js.extend([\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"reason\", \"reason\", coding.Coding, False, None, False),\n            (\"sequence\", \"sequence\", int, False, None, True),\n            (\"timingDate\", \"timingDate\", fhirdate.FHIRDate, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", False),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", False),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", False),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", False),\n            (\"valueString\", \"valueString\", str, False, \"value\", False),\n        ])\n        return js\n\n\nclass ExplanationOfBenefitTotal(backboneelement.BackboneElement):\n    \"\"\" Adjudication totals.\n    \n    Categorized monetary totals for the adjudication.\n    \"\"\"\n    \n    resource_type = \"ExplanationOfBenefitTotal\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Financial total for the category.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Type of adjudication information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ExplanationOfBenefitTotal, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ExplanationOfBenefitTotal, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", money.Money, False, None, True),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDate instance, which facilitates working with FHIR-compliant dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A date string in ISO 8601 format. If provided, the string must match a specific regex format (_REGEX) that ensures it's a valid FHIR date. If not a string, a TypeError is raised. If the date string is valid, it is converted into a Python datetime.date object.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation of the provided FHIR date string. Initialized to None if jsonval is not provided or if parsing fails.\n- origval (Union[str, None]): Stores the original FHIR date string provided during initialization.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression pattern that validates the format of the input date string. Defined at the class level, it is utilized during initialization to ensure that the input conforms to expected FHIR date formats.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes a FHIRDate instance, which facilitates working with FHIR-compliant dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A date string in ISO 8601 format. If provided, the string must match a specific regex format (_REGEX) that ensures it's a valid FHIR date. If not a string, a TypeError is raised. If the date string is valid, it is converted into a Python datetime.date object.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation of the provided FHIR date string. Initialized to None if jsonval is not provided or if parsing fails.\n- origval (Union[str, None]): Stores the original FHIR date string provided during initialization.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression pattern that validates the format of the input date string. Defined at the class level, it is utilized during initialization to ensure that the input conforms to expected FHIR date formats.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date. The method checks the `origval` attribute, which stores the original input value passed during initialization. If `origval` is `None`, it falls back to the `isostring` property, which provides a standardized date format, normalized for partial dates and time zone adjustments. This method is useful for retrieving the input that reflects the original format of the date value as provided by FHIR standards.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date. The method checks the `origval` attribute, which stores the original input value passed during initialization. If `origval` is `None`, it falls back to the `isostring` property, which provides a standardized date format, normalized for partial dates and time zone adjustments. This method is useful for retrieving the input that reflects the original format of the date value as provided by FHIR standards.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/explanationofbenefit.py": {
      "ExplanationOfBenefit.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an ExplanationOfBenefit resource instance.\n\nThis constructor initializes all valid properties for the ExplanationOfBenefit class, representing a detailed account of claims processing, including claims details, adjudication information, and benefits provided to the subscriber. \n\nParameters:\n- jsondict (dict, optional): A dictionary to use for initialization. If provided, it is used to set the attributes of the instance based on the data contained in the dictionary.\n- strict (bool, optional): If set to True (default), it raises a FHIRValidationError on validation errors. If False, the instance will ignore invalid variables without raising an error.\n\nAttributes:\n- accident (ExplanationOfBenefitAccident, optional): Details of the event related to the claim.\n- addItem (List[ExplanationOfBenefitAddItem], optional): Additional line items added by the insurer.\n- adjudication (List[ExplanationOfBenefitItemAdjudication], optional): Adjudication details at the header level.\n- benefitBalance (List[ExplanationOfBenefitBenefitBalance], optional): Details of the balance for the benefit category.\n- benefitPeriod (Period, optional): The period during which the benefits apply.\n- billablePeriod (Period, optional): The time frame relevant to the claim.\n- careTeam (List[ExplanationOfBenefitCareTeam], optional): Members of the care team involved in the claim.\n- claim (FHIRReference, optional): A reference to the related claim.\n- claimResponse (FHIRReference, optional): A reference to the claim response.\n- created (FHIRDateTime, required): The date when the response was created.\n- diagnosis (List[ExplanationOfBenefitDiagnosis], optional): Information regarding diagnoses relevant to the claim.\n- disposition (str, optional): Message indicating the status of the claim adjudication.\n- enterer (FHIRReference, optional): The author of the claim.\n- facility (FHIRReference, optional): The facility that provided the services.\n- form (Attachment, optional): Reference to a printed form used in the claim.\n- formCode (CodeableConcept, optional): The identifier for the printed form.\n- fundsReserve (CodeableConcept, optional): Status indicating whether funds are reserved.\n- fundsReserveRequested (CodeableConcept, optional): Information about who to reserve funds for.\n- identifier (List[Identifier], optional): Business identifiers for the resource.\n- insurance (List[ExplanationOfBenefitInsurance], required): Information about the patient's insurance coverage.\n- insurer (FHIRReference, required): The party responsible for making reimbursements.\n- item (List[ExplanationOfBenefitItem], optional): Details of products or services provided.\n- originalPrescription (FHIRReference, optional): The original prescription reference if applicable.\n- outcome (str, required): The outcome status of the claim processing.\n- patient (FHIRReference, required): The recipient of the healthcare products and services.\n- payee (ExplanationOfBenefitPayee, optional): The party designated to receive the benefits.\n- payment (ExplanationOfBenefitPayment, optional): Details regarding payments made for the claim.\n- preAuthRef (List[str], optional): References to any preauthorization details.\n- preAuthRefPeriod (List[Period], optional): The period when preauthorization is valid.\n- precedence (int, optional): The precedence level for the claim (e.g. primary, secondary).\n- prescription (FHIRReference, optional): Reference for the prescription authorizing services.\n- priority (CodeableConcept, optional): Indicates the desired process urgency.\n- procedure (List[ExplanationOfBenefitProcedure], optional): Clinical procedures performed relevant to the claim.\n- processNote (List[ExplanationOfBenefitProcessNote], optional): Notes that explain the adjudication results.\n- provider (FHIRReference, required): The party responsible for the claim.\n- referral (FHIRReference, optional): Reference to any treatment referrals related to the claim.\n- related (List[ExplanationOfBenefitRelated], optional): References to prior or corollary claims.\n- status (str, required): Current status of the claim (active, cancelled, etc.).\n- subType (CodeableConcept, optional): A more granular classification of the claim type.\n- supportingInfo (List[ExplanationOfBenefitSupportingInfo], optional): Additional supporting information relevant to the claim.\n- total (List[ExplanationOfBenefitTotal], optional): Summary of financial totals associated with the adjudication.\n- type (CodeableConcept, required): Category or discipline of the claim.\n- use (str, required): The type of use for the claim (e.g., claim, preauthorization).\n\nThis class interacts with various subclasses and types defined throughout the FHIR model, supporting an intricate structure for healthcare reimbursement documentation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.accident = None\n        ' Details of the event.\\n        Type `ExplanationOfBenefitAccident` (represented as `dict` in JSON). '\n        self.addItem = None\n        ' Insurer added line items.\\n        List of `ExplanationOfBenefitAddItem` items (represented as `dict` in JSON). '\n        self.adjudication = None\n        ' Header-level adjudication.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.benefitBalance = None\n        ' Balance by Benefit Category.\\n        List of `ExplanationOfBenefitBenefitBalance` items (represented as `dict` in JSON). '\n        self.benefitPeriod = None\n        ' When the benefits are applicable.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.billablePeriod = None\n        ' Relevant time frame for the claim.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.careTeam = None\n        ' Care Team members.\\n        List of `ExplanationOfBenefitCareTeam` items (represented as `dict` in JSON). '\n        self.claim = None\n        ' Claim reference.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.claimResponse = None\n        ' Claim response reference.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.created = None\n        ' Response creation date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.diagnosis = None\n        ' Pertinent diagnosis information.\\n        List of `ExplanationOfBenefitDiagnosis` items (represented as `dict` in JSON). '\n        self.disposition = None\n        ' Disposition Message.\\n        Type `str`. '\n        self.enterer = None\n        ' Author of the claim.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.facility = None\n        ' Servicing Facility.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.form = None\n        ' Printed reference or actual form.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.formCode = None\n        ' Printed form identifier.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.fundsReserve = None\n        ' Funds reserved status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.fundsReserveRequested = None\n        ' For whom to reserve funds.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for the resource.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.insurance = None\n        ' Patient insurance information.\\n        List of `ExplanationOfBenefitInsurance` items (represented as `dict` in JSON). '\n        self.insurer = None\n        ' Party responsible for reimbursement.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.item = None\n        ' Product or service provided.\\n        List of `ExplanationOfBenefitItem` items (represented as `dict` in JSON). '\n        self.originalPrescription = None\n        ' Original prescription if superceded by fulfiller.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.outcome = None\n        ' queued | complete | error | partial.\\n        Type `str`. '\n        self.patient = None\n        ' The recipient of the products and services.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.payee = None\n        ' Recipient of benefits payable.\\n        Type `ExplanationOfBenefitPayee` (represented as `dict` in JSON). '\n        self.payment = None\n        ' Payment Details.\\n        Type `ExplanationOfBenefitPayment` (represented as `dict` in JSON). '\n        self.preAuthRef = None\n        ' Preauthorization reference.\\n        List of `str` items. '\n        self.preAuthRefPeriod = None\n        ' Preauthorization in-effect period.\\n        List of `Period` items (represented as `dict` in JSON). '\n        self.precedence = None\n        ' Precedence (primary, secondary, etc.).\\n        Type `int`. '\n        self.prescription = None\n        ' Prescription authorizing services or products.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.priority = None\n        ' Desired processing urgency.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.procedure = None\n        ' Clinical procedures performed.\\n        List of `ExplanationOfBenefitProcedure` items (represented as `dict` in JSON). '\n        self.processNote = None\n        ' Note concerning adjudication.\\n        List of `ExplanationOfBenefitProcessNote` items (represented as `dict` in JSON). '\n        self.provider = None\n        ' Party responsible for the claim.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.referral = None\n        ' Treatment Referral.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.related = None\n        ' Prior or corollary claims.\\n        List of `ExplanationOfBenefitRelated` items (represented as `dict` in JSON). '\n        self.status = None\n        ' active | cancelled | draft | entered-in-error.\\n        Type `str`. '\n        self.subType = None\n        ' More granular claim type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.supportingInfo = None\n        ' Supporting information.\\n        List of `ExplanationOfBenefitSupportingInfo` items (represented as `dict` in JSON). '\n        self.total = None\n        ' Adjudication totals.\\n        List of `ExplanationOfBenefitTotal` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Category or discipline.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.use = None\n        ' claim | preauthorization | predetermination.\\n        Type `str`. '\n        super(ExplanationOfBenefit, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an ExplanationOfBenefit resource instance.\n\nThis constructor initializes all valid properties for the ExplanationOfBenefit class, representing a detailed account of claims processing, including claims details, adjudication information, and benefits provided to the subscriber. \n\nParameters:\n- jsondict (dict, optional): A dictionary to use for initialization. If provided, it is used to set the attributes of the instance based on the data contained in the dictionary.\n- strict (bool, optional): If set to True (default), it raises a FHIRValidationError on validation errors. If False, the instance will ignore invalid variables without raising an error.\n\nAttributes:\n- accident (ExplanationOfBenefitAccident, optional): Details of the event related to the claim.\n- addItem (List[ExplanationOfBenefitAddItem], optional): Additional line items added by the insurer.\n- adjudication (List[ExplanationOfBenefitItemAdjudication], optional): Adjudication details at the header level.\n- benefitBalance (List[ExplanationOfBenefitBenefitBalance], optional): Details of the balance for the benefit category.\n- benefitPeriod (Period, optional): The period during which the benefits apply.\n- billablePeriod (Period, optional): The time frame relevant to the claim.\n- careTeam (List[ExplanationOfBenefitCareTeam], optional): Members of the care team involved in the claim.\n- claim (FHIRReference, optional): A reference to the related claim.\n- claimResponse (FHIRReference, optional): A reference to the claim response.\n- created (FHIRDateTime, required): The date when the response was created.\n- diagnosis (List[ExplanationOfBenefitDiagnosis], optional): Information regarding diagnoses relevant to the claim.\n- disposition (str, optional): Message indicating the status of the claim adjudication.\n- enterer (FHIRReference, optional): The author of the claim.\n- facility (FHIRReference, optional): The facility that provided the services.\n- form (Attachment, optional): Reference to a printed form used in the claim.\n- formCode (CodeableConcept, optional): The identifier for the printed form.\n- fundsReserve (CodeableConcept, optional): Status indicating whether funds are reserved.\n- fundsReserveRequested (CodeableConcept, optional): Information about who to reserve funds for.\n- identifier (List[Identifier], optional): Business identifiers for the resource.\n- insurance (List[ExplanationOfBenefitInsurance], required): Information about the patient's insurance coverage.\n- insurer (FHIRReference, required): The party responsible for making reimbursements.\n- item (List[ExplanationOfBenefitItem], optional): Details of products or services provided.\n- originalPrescription (FHIRReference, optional): The original prescription reference if applicable.\n- outcome (str, required): The outcome status of the claim processing.\n- patient (FHIRReference, required): The recipient of the healthcare products and services.\n- payee (ExplanationOfBenefitPayee, optional): The party designated to receive the benefits.\n- payment (ExplanationOfBenefitPayment, optional): Details regarding payments made for the claim.\n- preAuthRef (List[str], optional): References to any preauthorization details.\n- preAuthRefPeriod (List[Period], optional): The period when preauthorization is valid.\n- precedence (int, optional): The precedence level for the claim (e.g. primary, secondary).\n- prescription (FHIRReference, optional): Reference for the prescription authorizing services.\n- priority (CodeableConcept, optional): Indicates the desired process urgency.\n- procedure (List[ExplanationOfBenefitProcedure], optional): Clinical procedures performed relevant to the claim.\n- processNote (List[ExplanationOfBenefitProcessNote], optional): Notes that explain the adjudication results.\n- provider (FHIRReference, required): The party responsible for the claim.\n- referral (FHIRReference, optional): Reference to any treatment referrals related to the claim.\n- related (List[ExplanationOfBenefitRelated], optional): References to prior or corollary claims.\n- status (str, required): Current status of the claim (active, cancelled, etc.).\n- subType (CodeableConcept, optional): A more granular classification of the claim type.\n- supportingInfo (List[ExplanationOfBenefitSupportingInfo], optional): Additional supporting information relevant to the claim.\n- total (List[ExplanationOfBenefitTotal], optional): Summary of financial totals associated with the adjudication.\n- type (CodeableConcept, required): Category or discipline of the claim.\n- use (str, required): The type of use for the claim (e.g., claim, preauthorization).\n\nThis class interacts with various subclasses and types defined throughout the FHIR model, supporting an intricate structure for healthcare reimbursement documentation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ExplanationOfBenefit(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR datetime value, or None. This value is passed to the parent class (FHIRDate) for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object representing the FHIR datetime. Initially set to None and will be populated upon parsing the provided jsonval.\n\nThis constructor leverages the FHIRDate superclass to handle the JSON input, ensuring compatibility with FHIR standards as specified in the associated documentation (http://hl7.org/fhir/R4/datatypes.html#datetime).\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR datetime value, or None. This value is passed to the parent class (FHIRDate) for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object representing the FHIR datetime. Initially set to None and will be populated upon parsing the provided jsonval.\n\nThis constructor leverages the FHIRDate superclass to handle the JSON input, ensuring compatibility with FHIR standards as specified in the associated documentation (http://hl7.org/fhir/R4/datatypes.html#datetime).",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON-serializable dictionary.\n    \nThis method overrides the base class's as_json method to include the \n'resourceType' key, which is set to the string representation of the \ninstance's resource type (defined as the class attribute `resource_type`). \nThe resulting dictionary can be used for serialization and transmission \nof FHIR resource data.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding the 'resourceType'.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON-serializable dictionary.\n    \nThis method overrides the base class's as_json method to include the \n'resourceType' key, which is set to the string representation of the \ninstance's resource type (defined as the class attribute `resource_type`). \nThe resulting dictionary can be used for serialization and transmission \nof FHIR resource data.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding the 'resourceType'.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:testExplanationOfBenefit1": {
      "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:instantiate_from": {
        "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:implExplanationOfBenefit1": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:instantiate_from": {
      "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:testExplanationOfBenefit2": {
      "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:instantiate_from": {
        "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/explanationofbenefit_test.py:ExplanationOfBenefitTests:implExplanationOfBenefit2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/explanationofbenefit.py:ExplanationOfBenefit:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-explanationofbenefit_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 explanationofbenefit.py\n        \u2502   \u2514\u2500\u2500 ExplanationOfBenefit.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to test and validate the functionality of the `ExplanationOfBenefit` resource in the context of the FHIR (Fast Healthcare Interoperability Resources) standard, specifically version 4.0.1. Its primary purpose is to ensure the accurate representation, processing, and serialization of insurance claim data, including information such as accident details, billing periods, claim outcomes, and financial adjudication. By leveraging sample JSON representations of `ExplanationOfBenefit` instances, the module verifies compliance with FHIR specifications, including correct handling of dates, coding systems, and resource structures. This ensures reliable integration and correctness for users or developers working with healthcare claims, facilitating interoperability in health IT systems.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDate instance, which facilitates working with FHIR-compliant dates in Python.\n\nParameters:\n- jsonval (Union[str, None]): A date string in ISO 8601 format. If provided, the string must match a specific regex format (_REGEX) that ensures it's a valid FHIR date. If not a string, a TypeError is raised. If the date string is valid, it is converted into a Python datetime.date object.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation of the provided FHIR date string. Initialized to None if jsonval is not provided or if parsing fails.\n- origval (Union[str, None]): Stores the original FHIR date string provided during initialization.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regular expression pattern that validates the format of the input date string. Defined at the class level, it is utilized during initialization to ensure that the input conforms to expected FHIR date formats.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date. The method checks the `origval` attribute, which stores the original input value passed during initialization. If `origval` is `None`, it falls back to the `isostring` property, which provides a standardized date format, normalized for partial dates and time zone adjustments. This method is useful for retrieving the input that reflects the original format of the date value as provided by FHIR standards.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/explanationofbenefit.py\n\n- CLASS METHOD: ExplanationOfBenefit.__init__\n  - CLASS SIGNATURE: class ExplanationOfBenefit(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an ExplanationOfBenefit resource instance.\n\nThis constructor initializes all valid properties for the ExplanationOfBenefit class, representing a detailed account of claims processing, including claims details, adjudication information, and benefits provided to the subscriber. \n\nParameters:\n- jsondict (dict, optional): A dictionary to use for initialization. If provided, it is used to set the attributes of the instance based on the data contained in the dictionary.\n- strict (bool, optional): If set to True (default), it raises a FHIRValidationError on validation errors. If False, the instance will ignore invalid variables without raising an error.\n\nAttributes:\n- accident (ExplanationOfBenefitAccident, optional): Details of the event related to the claim.\n- addItem (List[ExplanationOfBenefitAddItem], optional): Additional line items added by the insurer.\n- adjudication (List[ExplanationOfBenefitItemAdjudication], optional): Adjudication details at the header level.\n- benefitBalance (List[ExplanationOfBenefitBenefitBalance], optional): Details of the balance for the benefit category.\n- benefitPeriod (Period, optional): The period during which the benefits apply.\n- billablePeriod (Period, optional): The time frame relevant to the claim.\n- careTeam (List[ExplanationOfBenefitCareTeam], optional): Members of the care team involved in the claim.\n- claim (FHIRReference, optional): A reference to the related claim.\n- claimResponse (FHIRReference, optional): A reference to the claim response.\n- created (FHIRDateTime, required): The date when the response was created.\n- diagnosis (List[ExplanationOfBenefitDiagnosis], optional): Information regarding diagnoses relevant to the claim.\n- disposition (str, optional): Message indicating the status of the claim adjudication.\n- enterer (FHIRReference, optional): The author of the claim.\n- facility (FHIRReference, optional): The facility that provided the services.\n- form (Attachment, optional): Reference to a printed form used in the claim.\n- formCode (CodeableConcept, optional): The identifier for the printed form.\n- fundsReserve (CodeableConcept, optional): Status indicating whether funds are reserved.\n- fundsReserveRequested (CodeableConcept, optional): Information about who to reserve funds for.\n- identifier (List[Identifier], optional): Business identifiers for the resource.\n- insurance (List[ExplanationOfBenefitInsurance], required): Information about the patient's insurance coverage.\n- insurer (FHIRReference, required): The party responsible for making reimbursements.\n- item (List[ExplanationOfBenefitItem], optional): Details of products or services provided.\n- originalPrescription (FHIRReference, optional): The original prescription reference if applicable.\n- outcome (str, required): The outcome status of the claim processing.\n- patient (FHIRReference, required): The recipient of the healthcare products and services.\n- payee (ExplanationOfBenefitPayee, optional): The party designated to receive the benefits.\n- payment (ExplanationOfBenefitPayment, optional): Details regarding payments made for the claim.\n- preAuthRef (List[str], optional): References to any preauthorization details.\n- preAuthRefPeriod (List[Period], optional): The period when preauthorization is valid.\n- precedence (int, optional): The precedence level for the claim (e.g. primary, secondary).\n- prescription (FHIRReference, optional): Reference for the prescription authorizing services.\n- priority (CodeableConcept, optional): Indicates the desired process urgency.\n- procedure (List[ExplanationOfBenefitProcedure], optional): Clinical procedures performed relevant to the claim.\n- processNote (List[ExplanationOfBenefitProcessNote], optional): Notes that explain the adjudication results.\n- provider (FHIRReference, required): The party responsible for the claim.\n- referral (FHIRReference, optional): Reference to any treatment referrals related to the claim.\n- related (List[ExplanationOfBenefitRelated], optional): References to prior or corollary claims.\n- status (str, required): Current status of the claim (active, cancelled, etc.).\n- subType (CodeableConcept, optional): A more granular classification of the claim type.\n- supportingInfo (List[ExplanationOfBenefitSupportingInfo], optional): Additional supporting information relevant to the claim.\n- total (List[ExplanationOfBenefitTotal], optional): Summary of financial totals associated with the adjudication.\n- type (CodeableConcept, required): Category or discipline of the claim.\n- use (str, required): The type of use for the claim (e.g., claim, preauthorization).\n\nThis class interacts with various subclasses and types defined throughout the FHIR model, supporting an intricate structure for healthcare reimbursement documentation.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR datetime value, or None. This value is passed to the parent class (FHIRDate) for processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object representing the FHIR datetime. Initially set to None and will be populated upon parsing the provided jsonval.\n\nThis constructor leverages the FHIRDate superclass to handle the JSON input, ensuring compatibility with FHIR standards as specified in the associated documentation (http://hl7.org/fhir/R4/datatypes.html#datetime).\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON-serializable dictionary.\n    \nThis method overrides the base class's as_json method to include the \n'resourceType' key, which is set to the string representation of the \ninstance's resource type (defined as the class attribute `resource_type`). \nThe resulting dictionary can be used for serialization and transmission \nof FHIR resource data.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, \nincluding the 'resourceType'.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/explanationofbenefit.py": "from . import domainresource\n\nclass ExplanationOfBenefit(domainresource.DomainResource):\n    \"\"\" Explanation of Benefit resource.\n    \n    This resource provides: the claim details; adjudication details from the\n    processing of a Claim; and optionally account balance information, for\n    informing the subscriber of the benefits provided.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefit'\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefit, self).elementProperties()\n        js.extend([('accident', 'accident', ExplanationOfBenefitAccident, False, None, False), ('addItem', 'addItem', ExplanationOfBenefitAddItem, True, None, False), ('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('benefitBalance', 'benefitBalance', ExplanationOfBenefitBenefitBalance, True, None, False), ('benefitPeriod', 'benefitPeriod', period.Period, False, None, False), ('billablePeriod', 'billablePeriod', period.Period, False, None, False), ('careTeam', 'careTeam', ExplanationOfBenefitCareTeam, True, None, False), ('claim', 'claim', fhirreference.FHIRReference, False, None, False), ('claimResponse', 'claimResponse', fhirreference.FHIRReference, False, None, False), ('created', 'created', fhirdatetime.FHIRDateTime, False, None, True), ('diagnosis', 'diagnosis', ExplanationOfBenefitDiagnosis, True, None, False), ('disposition', 'disposition', str, False, None, False), ('enterer', 'enterer', fhirreference.FHIRReference, False, None, False), ('facility', 'facility', fhirreference.FHIRReference, False, None, False), ('form', 'form', attachment.Attachment, False, None, False), ('formCode', 'formCode', codeableconcept.CodeableConcept, False, None, False), ('fundsReserve', 'fundsReserve', codeableconcept.CodeableConcept, False, None, False), ('fundsReserveRequested', 'fundsReserveRequested', codeableconcept.CodeableConcept, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('insurance', 'insurance', ExplanationOfBenefitInsurance, True, None, True), ('insurer', 'insurer', fhirreference.FHIRReference, False, None, True), ('item', 'item', ExplanationOfBenefitItem, True, None, False), ('originalPrescription', 'originalPrescription', fhirreference.FHIRReference, False, None, False), ('outcome', 'outcome', str, False, None, True), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('payee', 'payee', ExplanationOfBenefitPayee, False, None, False), ('payment', 'payment', ExplanationOfBenefitPayment, False, None, False), ('preAuthRef', 'preAuthRef', str, True, None, False), ('preAuthRefPeriod', 'preAuthRefPeriod', period.Period, True, None, False), ('precedence', 'precedence', int, False, None, False), ('prescription', 'prescription', fhirreference.FHIRReference, False, None, False), ('priority', 'priority', codeableconcept.CodeableConcept, False, None, False), ('procedure', 'procedure', ExplanationOfBenefitProcedure, True, None, False), ('processNote', 'processNote', ExplanationOfBenefitProcessNote, True, None, False), ('provider', 'provider', fhirreference.FHIRReference, False, None, True), ('referral', 'referral', fhirreference.FHIRReference, False, None, False), ('related', 'related', ExplanationOfBenefitRelated, True, None, False), ('status', 'status', str, False, None, True), ('subType', 'subType', codeableconcept.CodeableConcept, False, None, False), ('supportingInfo', 'supportingInfo', ExplanationOfBenefitSupportingInfo, True, None, False), ('total', 'total', ExplanationOfBenefitTotal, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('use', 'use', str, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass ExplanationOfBenefitAccident(backboneelement.BackboneElement):\n    \"\"\" Details of the event.\n    \n    Details of a accident which resulted in injuries which required the\n    products and services listed in the claim.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitAccident'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.date = None\n        ' When the incident occurred.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.locationAddress = None\n        ' Where the event occurred.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.locationReference = None\n        ' Where the event occurred.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' The nature of the accident.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitAccident, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAccident, self).elementProperties()\n        js.extend([('date', 'date', fhirdate.FHIRDate, False, None, False), ('locationAddress', 'locationAddress', address.Address, False, 'location', False), ('locationReference', 'locationReference', fhirreference.FHIRReference, False, 'location', False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitAddItem(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The first-tier service adjudications for payor added product or service\n    lines.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitAddItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items adjudication.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' Anatomical location.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detail = None\n        ' Insurer added line items.\\n        List of `ExplanationOfBenefitAddItemDetail` items (represented as `dict` in JSON). '\n        self.detailSequence = None\n        ' Detail sequence number.\\n        List of `int` items. '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.itemSequence = None\n        ' Item sequence number.\\n        List of `int` items. '\n        self.locationAddress = None\n        ' Place of service or where product was supplied.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.locationCodeableConcept = None\n        ' Place of service or where product was supplied.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.locationReference = None\n        ' Place of service or where product was supplied.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.programCode = None\n        ' Program the product or service is provided under.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.provider = None\n        ' Authorized providers.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.servicedDate = None\n        ' Date or dates of service or product delivery.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.servicedPeriod = None\n        ' Date or dates of service or product delivery.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.subDetailSequence = None\n        ' Subdetail sequence number.\\n        List of `int` items. '\n        self.subSite = None\n        ' Anatomical sub-location.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitAddItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItem, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, False, None, False), ('detail', 'detail', ExplanationOfBenefitAddItemDetail, True, None, False), ('detailSequence', 'detailSequence', int, True, None, False), ('factor', 'factor', float, False, None, False), ('itemSequence', 'itemSequence', int, True, None, False), ('locationAddress', 'locationAddress', address.Address, False, 'location', False), ('locationCodeableConcept', 'locationCodeableConcept', codeableconcept.CodeableConcept, False, 'location', False), ('locationReference', 'locationReference', fhirreference.FHIRReference, False, 'location', False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('programCode', 'programCode', codeableconcept.CodeableConcept, True, None, False), ('provider', 'provider', fhirreference.FHIRReference, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('servicedDate', 'servicedDate', fhirdate.FHIRDate, False, 'serviced', False), ('servicedPeriod', 'servicedPeriod', period.Period, False, 'serviced', False), ('subDetailSequence', 'subDetailSequence', int, True, None, False), ('subSite', 'subSite', codeableconcept.CodeableConcept, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitAddItemDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The second-tier service adjudications for payor added services.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitAddItemDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items adjudication.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.subDetail = None\n        ' Insurer added line items.\\n        List of `ExplanationOfBenefitAddItemDetailSubDetail` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitAddItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItemDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('subDetail', 'subDetail', ExplanationOfBenefitAddItemDetailSubDetail, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitAddItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The third-tier service adjudications for payor added services.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitAddItemDetailSubDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items adjudication.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitAddItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitAddItemDetailSubDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitBenefitBalance(backboneelement.BackboneElement):\n    \"\"\" Balance by Benefit Category.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitBenefitBalance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.category = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.description = None\n        ' Description of the benefit or services covered.\\n        Type `str`. '\n        self.excluded = None\n        ' Excluded from the plan.\\n        Type `bool`. '\n        self.financial = None\n        ' Benefit Summary.\\n        List of `ExplanationOfBenefitBenefitBalanceFinancial` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Short name for the benefit.\\n        Type `str`. '\n        self.network = None\n        ' In or out of network.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.term = None\n        ' Annual or lifetime.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.unit = None\n        ' Individual or family.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitBenefitBalance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitBenefitBalance, self).elementProperties()\n        js.extend([('category', 'category', codeableconcept.CodeableConcept, False, None, True), ('description', 'description', str, False, None, False), ('excluded', 'excluded', bool, False, None, False), ('financial', 'financial', ExplanationOfBenefitBenefitBalanceFinancial, True, None, False), ('name', 'name', str, False, None, False), ('network', 'network', codeableconcept.CodeableConcept, False, None, False), ('term', 'term', codeableconcept.CodeableConcept, False, None, False), ('unit', 'unit', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitBenefitBalanceFinancial(backboneelement.BackboneElement):\n    \"\"\" Benefit Summary.\n    \n    Benefits Used to date.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitBenefitBalanceFinancial'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.allowedMoney = None\n        ' Benefits allowed.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.allowedString = None\n        ' Benefits allowed.\\n        Type `str`. '\n        self.allowedUnsignedInt = None\n        ' Benefits allowed.\\n        Type `int`. '\n        self.type = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.usedMoney = None\n        ' Benefits used.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.usedUnsignedInt = None\n        ' Benefits used.\\n        Type `int`. '\n        super(ExplanationOfBenefitBenefitBalanceFinancial, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitBenefitBalanceFinancial, self).elementProperties()\n        js.extend([('allowedMoney', 'allowedMoney', money.Money, False, 'allowed', False), ('allowedString', 'allowedString', str, False, 'allowed', False), ('allowedUnsignedInt', 'allowedUnsignedInt', int, False, 'allowed', False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('usedMoney', 'usedMoney', money.Money, False, 'used', False), ('usedUnsignedInt', 'usedUnsignedInt', int, False, 'used', False)])\n        return js\n\nclass ExplanationOfBenefitCareTeam(backboneelement.BackboneElement):\n    \"\"\" Care Team members.\n    \n    The members of the team who provided the products and services.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitCareTeam'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.provider = None\n        ' Practitioner or organization.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.qualification = None\n        ' Practitioner credential or specialization.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.responsible = None\n        ' Indicator of the lead practitioner.\\n        Type `bool`. '\n        self.role = None\n        ' Function within the team.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Order of care team.\\n        Type `int`. '\n        super(ExplanationOfBenefitCareTeam, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitCareTeam, self).elementProperties()\n        js.extend([('provider', 'provider', fhirreference.FHIRReference, False, None, True), ('qualification', 'qualification', codeableconcept.CodeableConcept, False, None, False), ('responsible', 'responsible', bool, False, None, False), ('role', 'role', codeableconcept.CodeableConcept, False, None, False), ('sequence', 'sequence', int, False, None, True)])\n        return js\n\nclass ExplanationOfBenefitDiagnosis(backboneelement.BackboneElement):\n    \"\"\" Pertinent diagnosis information.\n    \n    Information about diagnoses relevant to the claim items.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitDiagnosis'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.diagnosisCodeableConcept = None\n        ' Nature of illness or problem.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.diagnosisReference = None\n        ' Nature of illness or problem.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.onAdmission = None\n        ' Present on admission.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.packageCode = None\n        ' Package billing code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Diagnosis instance identifier.\\n        Type `int`. '\n        self.type = None\n        ' Timing or nature of the diagnosis.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitDiagnosis, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitDiagnosis, self).elementProperties()\n        js.extend([('diagnosisCodeableConcept', 'diagnosisCodeableConcept', codeableconcept.CodeableConcept, False, 'diagnosis', True), ('diagnosisReference', 'diagnosisReference', fhirreference.FHIRReference, False, 'diagnosis', True), ('onAdmission', 'onAdmission', codeableconcept.CodeableConcept, False, None, False), ('packageCode', 'packageCode', codeableconcept.CodeableConcept, False, None, False), ('sequence', 'sequence', int, False, None, True), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js\n\nclass ExplanationOfBenefitInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services specified on the claim.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitInsurance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.coverage = None\n        ' Insurance information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.focal = None\n        ' Coverage to be used for adjudication.\\n        Type `bool`. '\n        self.preAuthRef = None\n        ' Prior authorization reference number.\\n        List of `str` items. '\n        super(ExplanationOfBenefitInsurance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitInsurance, self).elementProperties()\n        js.extend([('coverage', 'coverage', fhirreference.FHIRReference, False, None, True), ('focal', 'focal', bool, False, None, True), ('preAuthRef', 'preAuthRef', str, True, None, False)])\n        return js\n\nclass ExplanationOfBenefitItem(backboneelement.BackboneElement):\n    \"\"\" Product or service provided.\n    \n    A claim line. Either a simple (a product or service) or a 'group' of\n    details which can also be a simple items or groups of sub-details.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Adjudication details.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' Anatomical location.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.careTeamSequence = None\n        ' Applicable care team members.\\n        List of `int` items. '\n        self.category = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detail = None\n        ' Additional items.\\n        List of `ExplanationOfBenefitItemDetail` items (represented as `dict` in JSON). '\n        self.diagnosisSequence = None\n        ' Applicable diagnoses.\\n        List of `int` items. '\n        self.encounter = None\n        ' Encounters related to this billed item.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.informationSequence = None\n        ' Applicable exception and supporting information.\\n        List of `int` items. '\n        self.locationAddress = None\n        ' Place of service or where product was supplied.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.locationCodeableConcept = None\n        ' Place of service or where product was supplied.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.locationReference = None\n        ' Place of service or where product was supplied.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Product or service billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.procedureSequence = None\n        ' Applicable procedures.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.programCode = None\n        ' Program the product or service is provided under.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.revenue = None\n        ' Revenue or cost center code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Item instance identifier.\\n        Type `int`. '\n        self.servicedDate = None\n        ' Date or dates of service or product delivery.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.servicedPeriod = None\n        ' Date or dates of service or product delivery.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.subSite = None\n        ' Anatomical sub-location.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.udi = None\n        ' Unique device identifier.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItem, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, False, None, False), ('careTeamSequence', 'careTeamSequence', int, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, False), ('detail', 'detail', ExplanationOfBenefitItemDetail, True, None, False), ('diagnosisSequence', 'diagnosisSequence', int, True, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, True, None, False), ('factor', 'factor', float, False, None, False), ('informationSequence', 'informationSequence', int, True, None, False), ('locationAddress', 'locationAddress', address.Address, False, 'location', False), ('locationCodeableConcept', 'locationCodeableConcept', codeableconcept.CodeableConcept, False, 'location', False), ('locationReference', 'locationReference', fhirreference.FHIRReference, False, 'location', False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('procedureSequence', 'procedureSequence', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('programCode', 'programCode', codeableconcept.CodeableConcept, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('revenue', 'revenue', codeableconcept.CodeableConcept, False, None, False), ('sequence', 'sequence', int, False, None, True), ('servicedDate', 'servicedDate', fhirdate.FHIRDate, False, 'serviced', False), ('servicedPeriod', 'servicedPeriod', period.Period, False, 'serviced', False), ('subSite', 'subSite', codeableconcept.CodeableConcept, True, None, False), ('udi', 'udi', fhirreference.FHIRReference, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitItemAdjudication(backboneelement.BackboneElement):\n    \"\"\" Adjudication details.\n    \n    If this item is a group then the values here are a summary of the\n    adjudication of the detail items. If this item is a simple product or\n    service then this is the result of the adjudication of this item.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitItemAdjudication'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Monetary amount.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.category = None\n        ' Type of adjudication information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.reason = None\n        ' Explanation of adjudication outcome.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' Non-monitary value.\\n        Type `float`. '\n        super(ExplanationOfBenefitItemAdjudication, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemAdjudication, self).elementProperties()\n        js.extend([('amount', 'amount', money.Money, False, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, True), ('reason', 'reason', codeableconcept.CodeableConcept, False, None, False), ('value', 'value', float, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitItemDetail(backboneelement.BackboneElement):\n    \"\"\" Additional items.\n    \n    Second-tier of goods and services.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitItemDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Detail level adjudication details.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.category = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.programCode = None\n        ' Program the product or service is provided under.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.revenue = None\n        ' Revenue or cost center code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Product or service provided.\\n        Type `int`. '\n        self.subDetail = None\n        ' Additional items.\\n        List of `ExplanationOfBenefitItemDetailSubDetail` items (represented as `dict` in JSON). '\n        self.udi = None\n        ' Unique device identifier.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, False), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('programCode', 'programCode', codeableconcept.CodeableConcept, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('revenue', 'revenue', codeableconcept.CodeableConcept, False, None, False), ('sequence', 'sequence', int, False, None, True), ('subDetail', 'subDetail', ExplanationOfBenefitItemDetailSubDetail, True, None, False), ('udi', 'udi', fhirreference.FHIRReference, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Additional items.\n    \n    Third-tier of goods and services.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitItemDetailSubDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Subdetail level adjudication details.\\n        List of `ExplanationOfBenefitItemAdjudication` items (represented as `dict` in JSON). '\n        self.category = None\n        ' Benefit classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.programCode = None\n        ' Program the product or service is provided under.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.revenue = None\n        ' Revenue or cost center code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Product or service provided.\\n        Type `int`. '\n        self.udi = None\n        ' Unique device identifier.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitItemDetailSubDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ExplanationOfBenefitItemAdjudication, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, False), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('programCode', 'programCode', codeableconcept.CodeableConcept, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('revenue', 'revenue', codeableconcept.CodeableConcept, False, None, False), ('sequence', 'sequence', int, False, None, True), ('udi', 'udi', fhirreference.FHIRReference, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitPayee(backboneelement.BackboneElement):\n    \"\"\" Recipient of benefits payable.\n    \n    The party to be reimbursed for cost of the products and services according\n    to the terms of the policy.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitPayee'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.party = None\n        ' Recipient reference.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' Category of recipient.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitPayee, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitPayee, self).elementProperties()\n        js.extend([('party', 'party', fhirreference.FHIRReference, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitPayment(backboneelement.BackboneElement):\n    \"\"\" Payment Details.\n    \n    Payment details for the adjudication of the claim.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitPayment'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjustment = None\n        ' Payment adjustment for non-claim issues.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.adjustmentReason = None\n        ' Explanation for the variance.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.amount = None\n        ' Payable amount after adjustment.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.date = None\n        ' Expected date of payment.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.identifier = None\n        ' Business identifier for the payment.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.type = None\n        ' Partial or complete payment.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitPayment, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitPayment, self).elementProperties()\n        js.extend([('adjustment', 'adjustment', money.Money, False, None, False), ('adjustmentReason', 'adjustmentReason', codeableconcept.CodeableConcept, False, None, False), ('amount', 'amount', money.Money, False, None, False), ('date', 'date', fhirdate.FHIRDate, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitProcedure(backboneelement.BackboneElement):\n    \"\"\" Clinical procedures performed.\n    \n    Procedures performed on the patient relevant to the billing items with the\n    claim.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitProcedure'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.date = None\n        ' When the procedure was performed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.procedureCodeableConcept = None\n        ' Specific clinical procedure.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.procedureReference = None\n        ' Specific clinical procedure.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Procedure instance identifier.\\n        Type `int`. '\n        self.type = None\n        ' Category of Procedure.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.udi = None\n        ' Unique device identifier.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitProcedure, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitProcedure, self).elementProperties()\n        js.extend([('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('procedureCodeableConcept', 'procedureCodeableConcept', codeableconcept.CodeableConcept, False, 'procedure', True), ('procedureReference', 'procedureReference', fhirreference.FHIRReference, False, 'procedure', True), ('sequence', 'sequence', int, False, None, True), ('type', 'type', codeableconcept.CodeableConcept, True, None, False), ('udi', 'udi', fhirreference.FHIRReference, True, None, False)])\n        return js\n\nclass ExplanationOfBenefitProcessNote(backboneelement.BackboneElement):\n    \"\"\" Note concerning adjudication.\n    \n    A note that describes or explains adjudication results in a human readable\n    form.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitProcessNote'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.language = None\n        ' Language of the text.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.number = None\n        ' Note instance identifier.\\n        Type `int`. '\n        self.text = None\n        ' Note explanatory text.\\n        Type `str`. '\n        self.type = None\n        ' display | print | printoper.\\n        Type `str`. '\n        super(ExplanationOfBenefitProcessNote, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitProcessNote, self).elementProperties()\n        js.extend([('language', 'language', codeableconcept.CodeableConcept, False, None, False), ('number', 'number', int, False, None, False), ('text', 'text', str, False, None, False), ('type', 'type', str, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitRelated(backboneelement.BackboneElement):\n    \"\"\" Prior or corollary claims.\n    \n    Other claims which are related to this claim such as prior submissions or\n    claims for related services or for the same event.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitRelated'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.claim = None\n        ' Reference to the related claim.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.reference = None\n        ' File or case reference.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.relationship = None\n        ' How the reference claim is related.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitRelated, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitRelated, self).elementProperties()\n        js.extend([('claim', 'claim', fhirreference.FHIRReference, False, None, False), ('reference', 'reference', identifier.Identifier, False, None, False), ('relationship', 'relationship', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ExplanationOfBenefitSupportingInfo(backboneelement.BackboneElement):\n    \"\"\" Supporting information.\n    \n    Additional information codes regarding exceptions, special considerations,\n    the condition, situation, prior or concurrent issues.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitSupportingInfo'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.category = None\n        ' Classification of the supplied information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.code = None\n        ' Type of information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.reason = None\n        ' Explanation for the information.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.sequence = None\n        ' Information instance identifier.\\n        Type `int`. '\n        self.timingDate = None\n        ' When it occurred.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.timingPeriod = None\n        ' When it occurred.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.valueAttachment = None\n        ' Data to be provided.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' Data to be provided.\\n        Type `bool`. '\n        self.valueQuantity = None\n        ' Data to be provided.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Data to be provided.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Data to be provided.\\n        Type `str`. '\n        super(ExplanationOfBenefitSupportingInfo, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitSupportingInfo, self).elementProperties()\n        js.extend([('category', 'category', codeableconcept.CodeableConcept, False, None, True), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('reason', 'reason', coding.Coding, False, None, False), ('sequence', 'sequence', int, False, None, True), ('timingDate', 'timingDate', fhirdate.FHIRDate, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', False), ('valueBoolean', 'valueBoolean', bool, False, 'value', False), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', False), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', False), ('valueString', 'valueString', str, False, 'value', False)])\n        return js\n\nclass ExplanationOfBenefitTotal(backboneelement.BackboneElement):\n    \"\"\" Adjudication totals.\n    \n    Categorized monetary totals for the adjudication.\n    \"\"\"\n    resource_type = 'ExplanationOfBenefitTotal'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Financial total for the category.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.category = None\n        ' Type of adjudication information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ExplanationOfBenefitTotal, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ExplanationOfBenefitTotal, self).elementProperties()\n        js.extend([('amount', 'amount', money.Money, False, None, True), ('category', 'category', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import address\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}