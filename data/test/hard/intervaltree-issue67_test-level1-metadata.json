{
  "dir_path": "/app/intervaltree",
  "package_name": "intervaltree",
  "sample_name": "intervaltree-issue67_test",
  "src_dir": "intervaltree/",
  "test_dir": "test/",
  "test_file": "test/issues/issue67_test.py",
  "test_code": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nTest module: IntervalTree, insertion of a sequence of intervals caused\ninvariant violation\nSubmitted as issue #67 (Inserting intervals in specific sequence results in\ninvalid tree) by suola\n\nCopyright 2013-2018 Chaim Leib Halbert\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom __future__ import absolute_import\nfrom intervaltree import IntervalTree\nimport pytest\n\ndef test_interval_insertion_67():\n    intervals = (\n        (3657433088, 3665821696),\n        (2415132672, 2415394816),\n        (201326592, 268435456),\n        (163868672, 163870720),\n        (3301965824, 3303014400),\n        (4026531840, 4294967296),\n        (3579899904, 3579904000),\n        (3439329280, 3443523584),\n        (3431201536, 3431201664),\n        (3589144576, 3589275648),\n        (2531000320, 2531033088),\n        (4187287552, 4187291648),\n        (3561766912, 3561783296),\n        (3046182912, 3046187008),\n        (3506438144, 3506962432),\n        (3724953872, 3724953888),\n        (3518234624, 3518496768),\n        (3840335872, 3840344064),\n        (3492279181, 3492279182),\n        (3447717888, 3456106496),\n        (3589390336, 3589398528),\n        (3486372962, 3486372963),\n        (3456106496, 3472883712),\n        (3508595496, 3508595498),\n        (3511853376, 3511853440),\n        (3452226160, 3452226168),\n        (3544510720, 3544510736),\n        (3525894144, 3525902336),\n        (3524137920, 3524137984),\n        (3508853334, 3508853335),\n        (3467337728, 3467341824),\n        (3463212256, 3463212260),\n        (3446643456, 3446643712),\n        (3473834176, 3473834240),\n        (3487039488, 3487105024),\n        (3444686112, 3444686144),\n        (3459268608, 3459276800),\n        (3483369472, 3485466624),\n    )\n    tree = IntervalTree()\n    for interval in intervals:\n        tree.addi(*interval)\n    tree.verify()\n\n",
  "GT_file_code": {
    "intervaltree/interval.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nInterval class\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom numbers import Number\nfrom collections import namedtuple\n\n\n# noinspection PyBroadException\nclass Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):\n    __slots__ = ()  # Saves memory, avoiding the need to create __dict__ for each interval\n\n    def __new__(cls, begin, end, data=None):\n        return super(Interval, cls).__new__(cls, begin, end, data)\n    \n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Whether the interval overlaps the given point, range or Interval.\n        :param begin: beginning point of the range, or the point, or an Interval\n        :param end: end point of the range. Optional if not testing ranges.\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            # An overlap means that some C exists that is inside both ranges:\n            #   begin <= C < end\n            # and \n            #   self.begin <= C < self.end\n            # See https://stackoverflow.com/questions/3269434/whats-the-most-efficient-way-to-test-two-integer-ranges-for-overlap/3269471#3269471\n            return begin < self.end and end > self.begin\n        try:\n            return self.overlaps(begin.begin, begin.end)\n        except:\n            return self.contains_point(begin)\n\n    def overlap_size(self, begin, end=None):\n        \"\"\"\n        Return the overlap size between two intervals or a point\n        :param begin: beginning point of the range, or the point, or an Interval\n        :param end: end point of the range. Optional if not testing ranges.\n        :return: Return the overlap size, None if not overlap is found\n        :rtype: depends on the given input (e.g., int will be returned for int interval and timedelta for\n        datetime intervals)\n        \"\"\"\n        overlaps = self.overlaps(begin, end)\n        if not overlaps:\n            return 0\n\n        if end is not None:\n            # case end is given\n            i0 = max(self.begin, begin)\n            i1 = min(self.end, end)\n            return i1 - i0\n        # assume the type is interval, in other cases, an exception will be thrown\n        i0 = max(self.begin, begin.begin)\n        i1 = min(self.end, begin.end)\n        return i1 - i0\n\n    def contains_point(self, p):\n        \"\"\"\n        Whether the Interval contains p.\n        :param p: a point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.begin <= p < self.end\n    \n    def range_matches(self, other):\n        \"\"\"\n        Whether the begins equal and the ends equal. Compare __eq__().\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return (\n            self.begin == other.begin and \n            self.end == other.end\n        )\n    \n    def contains_interval(self, other):\n        \"\"\"\n        Whether other is contained in this Interval.\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return (\n            self.begin <= other.begin and\n            self.end >= other.end\n        )\n    \n    def distance_to(self, other):\n        \"\"\"\n        Returns the size of the gap between intervals, or 0 \n        if they touch or overlap.\n        :param other: Interval or point\n        :return: distance\n        :rtype: Number\n        \"\"\"\n        if self.overlaps(other):\n            return 0\n        try:\n            if self.begin < other.begin:\n                return other.begin - self.end\n            else:\n                return self.begin - other.end\n        except:\n            if self.end <= other:\n                return other - self.end\n            else:\n                return self.begin - other\n\n    def is_null(self):\n        \"\"\"\n        Whether this equals the null interval.\n        :return: True if end <= begin else False\n        :rtype: bool\n        \"\"\"\n        return self.begin >= self.end\n\n    def length(self):\n        \"\"\"\n        The distance covered by this Interval.\n        :return: length\n        :type: Number\n        \"\"\"\n        if self.is_null():\n            return 0\n        return self.end - self.begin\n\n    def __hash__(self):\n        \"\"\"\n        Depends on begin and end only.\n        :return: hash\n        :rtype: Number\n        \"\"\"\n        return hash((self.begin, self.end))\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether the begins equal, the ends equal, and the data fields\n        equal. Compare range_matches().\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return (\n            self.begin == other.begin and\n            self.end == other.end and\n            self.data == other.data\n        )\n\n    def __cmp__(self, other):\n        \"\"\"\n        Tells whether other sorts before, after or equal to this\n        Interval.\n\n        Sorting is by begins, then by ends, then by data fields.\n\n        If data fields are not both sortable types, data fields are\n        compared alphabetically by type name.\n        :param other: Interval\n        :return: -1, 0, 1\n        :rtype: int\n        \"\"\"\n        s = self[0:2]\n        try:\n            o = other[0:2]\n        except:\n            o = (other,)\n        if s != o:\n            return -1 if s < o else 1\n        try:\n            if self.data == other.data:\n                return 0\n            return -1 if self.data < other.data else 1\n        except TypeError:\n            s = type(self.data).__name__\n            o = type(other.data).__name__\n            if s == o:\n                return 0\n            return -1 if s < o else 1\n\n    def __lt__(self, other):\n        \"\"\"\n        Less than operator. Parrots __cmp__()\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.__cmp__(other) < 0\n\n    def __gt__(self, other):\n        \"\"\"\n        Greater than operator. Parrots __cmp__()\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.__cmp__(other) > 0\n\n    def _raise_if_null(self, other):\n        \"\"\"\n        :raises ValueError: if either self or other is a null Interval\n        \"\"\"\n        if self.is_null():\n            raise ValueError(\"Cannot compare null Intervals!\")\n        if hasattr(other, 'is_null') and other.is_null():\n            raise ValueError(\"Cannot compare null Intervals!\")\n\n    def lt(self, other):\n        \"\"\"\n        Strictly less than. Returns True if no part of this Interval\n        extends higher than or into other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.end <= getattr(other, 'begin', other)\n\n    def le(self, other):\n        \"\"\"\n        Less than or overlaps. Returns True if no part of this Interval\n        extends higher than other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.end <= getattr(other, 'end', other)\n\n    def gt(self, other):\n        \"\"\"\n        Strictly greater than. Returns True if no part of this Interval\n        extends lower than or into other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        if hasattr(other, 'end'):\n            return self.begin >= other.end\n        else:\n            return self.begin > other\n\n    def ge(self, other):\n        \"\"\"\n        Greater than or overlaps. Returns True if no part of this Interval\n        extends lower than other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.begin >= getattr(other, 'begin', other)\n\n    def _get_fields(self):\n        \"\"\"\n        Used by str, unicode, repr and __reduce__.\n\n        Returns only the fields necessary to reconstruct the Interval.\n        :return: reconstruction info\n        :rtype: tuple\n        \"\"\"\n        if self.data is not None:\n            return self.begin, self.end, self.data\n        else:\n            return self.begin, self.end\n    \n    def __repr__(self):\n        \"\"\"\n        Executable string representation of this Interval.\n        :return: string representation\n        :rtype: str\n        \"\"\"\n        if isinstance(self.begin, Number):\n            s_begin = str(self.begin)\n            s_end = str(self.end)\n        else:\n            s_begin = repr(self.begin)\n            s_end = repr(self.end)\n        if self.data is None:\n            return \"Interval({0}, {1})\".format(s_begin, s_end)\n        else:\n            return \"Interval({0}, {1}, {2})\".format(s_begin, s_end, repr(self.data))\n\n    __str__ = __repr__\n\n    def copy(self):\n        \"\"\"\n        Shallow copy.\n        :return: copy of self\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin, self.end, self.data)\n    \n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :return: pickle data\n        :rtype: tuple\n        \"\"\"\n        return Interval, self._get_fields()\n",
    "intervaltree/node.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic: internal tree nodes.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom operator import attrgetter\nfrom math import floor, log\n\n\ndef l2(num):\n    \"\"\"\n    log base 2\n    :rtype real\n    \"\"\"\n    return log(num, 2)\n\n\nclass Node(object):\n    __slots__ = (\n        'x_center',\n        's_center',\n        'left_node',\n        'right_node',\n        'depth',\n        'balance'\n    )\n    def __init__(self,\n                 x_center=None,\n                 s_center=set(),\n                 left_node=None,\n                 right_node=None):\n        self.x_center = x_center\n        self.s_center = set(s_center)\n        self.left_node = left_node\n        self.right_node = right_node\n        self.depth = 0    # will be set when rotated\n        self.balance = 0  # ditto\n        self.rotate()\n\n    @classmethod\n    def from_interval(cls, interval):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        center = interval.begin\n        return Node(center, [interval])\n\n    @classmethod\n    def from_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        return Node.from_sorted_intervals(sorted(intervals))\n\n    @classmethod\n    def from_sorted_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        node = Node()\n        node = node.init_from_sorted(intervals)\n        return node\n\n    def init_from_sorted(self, intervals):\n        # assumes that intervals is a non-empty collection.\n        # Else, next line raises IndexError\n        center_iv = intervals[len(intervals) // 2]\n        self.x_center = center_iv.begin\n        self.s_center = set()\n        s_left = []\n        s_right = []\n        for k in intervals:\n            if k.end <= self.x_center:\n                s_left.append(k)\n            elif k.begin > self.x_center:\n                s_right.append(k)\n            else:\n                self.s_center.add(k)\n        self.left_node = Node.from_sorted_intervals(s_left)\n        self.right_node = Node.from_sorted_intervals(s_right)\n        return self.rotate()\n\n    def center_hit(self, interval):\n        \"\"\"Returns whether interval overlaps self.x_center.\"\"\"\n        return interval.contains_point(self.x_center)\n\n    def hit_branch(self, interval):\n        \"\"\"\n        Assuming not center_hit(interval), return which branch\n        (left=0, right=1) interval is in.\n        \"\"\"\n        return interval.begin > self.x_center\n\n    def refresh_balance(self):\n        \"\"\"\n        Recalculate self.balance and self.depth based on child node values.\n        \"\"\"\n        left_depth = self.left_node.depth if self.left_node else 0\n        right_depth = self.right_node.depth if self.right_node else 0\n        self.depth = 1 + max(left_depth, right_depth)\n        self.balance = right_depth - left_depth\n\n    def compute_depth(self):\n        \"\"\"\n        Recursively computes true depth of the subtree. Should only\n        be needed for debugging. Unless something is wrong, the\n        depth field should reflect the correct depth of the subtree.\n        \"\"\"\n        left_depth = self.left_node.compute_depth() if self.left_node else 0\n        right_depth = self.right_node.compute_depth() if self.right_node else 0\n        return 1 + max(left_depth, right_depth)\n\n    def rotate(self):\n        \"\"\"\n        Does rotating, if necessary, to balance this node, and\n        returns the new top node.\n        \"\"\"\n        self.refresh_balance()\n        if abs(self.balance) < 2:\n            return self\n        # balance > 0  is the heavy side\n        my_heavy = self.balance > 0\n        child_heavy = self[my_heavy].balance > 0\n        if my_heavy == child_heavy or self[my_heavy].balance == 0:\n            ## Heavy sides same\n            #    self     save\n            #  save   -> 1   self\n            # 1\n            #\n            ## Heavy side balanced\n            #    self     save         save\n            #  save   -> 1   self  -> 1  self.rot()\n            #  1  2         2\n            return self.srotate()\n        else:\n            return self.drotate()\n\n    def srotate(self):\n        \"\"\"Single rotation. Assumes that balance is +-2.\"\"\"\n        #     self        save         save\n        #   save 3  ->   1   self  -> 1   self.rot()\n        #  1   2            2   3\n        #\n        #  self            save                save\n        # 3   save  ->  self  1    -> self.rot()   1\n        #    2   1     3   2\n\n        #assert(self.balance != 0)\n        heavy = self.balance > 0\n        light = not heavy\n        save = self[heavy]\n        #print(\"srotate: bal={},{}\".format(self.balance, save.balance))\n        #self.print_structure()\n        self[heavy] = save[light]   # 2\n        #assert(save[light])\n        save[light] = self.rotate()  # Needed to ensure the 2 and 3 are balanced under new subnode\n\n        # Some intervals may overlap both self.x_center and save.x_center\n        # Promote those to the new tip of the tree\n        promotees = [iv for iv in save[light].s_center if save.center_hit(iv)]\n        if promotees:\n            for iv in promotees:\n                save[light] = save[light].remove(iv)  # may trigger pruning\n            # TODO: Use Node.add() here, to simplify future balancing improvements.\n            # For now, this is the same as augmenting save.s_center, but that may\n            # change.\n            save.s_center.update(promotees)\n        save.refresh_balance()\n        return save\n\n    def drotate(self):\n        # First rotation\n        my_heavy = self.balance > 0\n        self[my_heavy] = self[my_heavy].srotate()\n        self.refresh_balance()\n\n        # Second rotation\n        result = self.srotate()\n\n        return result\n\n    def add(self, interval):\n        \"\"\"\n        Returns self after adding the interval and balancing.\n        \"\"\"\n        if self.center_hit(interval):\n            self.s_center.add(interval)\n            return self\n        else:\n            direction = self.hit_branch(interval)\n            if not self[direction]:\n                self[direction] = Node.from_interval(interval)\n                self.refresh_balance()\n                return self\n            else:\n                self[direction] = self[direction].add(interval)\n                return self.rotate()\n\n    def remove(self, interval):\n        \"\"\"\n        Returns self after removing the interval and balancing.\n\n        If interval is not present, raise ValueError.\n        \"\"\"\n        # since this is a list, called methods can set this to [1],\n        # making it true\n        done = []\n        return self.remove_interval_helper(interval, done, should_raise_error=True)\n\n    def discard(self, interval):\n        \"\"\"\n        Returns self after removing interval and balancing.\n\n        If interval is not present, do nothing.\n        \"\"\"\n        done = []\n        return self.remove_interval_helper(interval, done, should_raise_error=False)\n\n    def remove_interval_helper(self, interval, done, should_raise_error):\n        \"\"\"\n        Returns self after removing interval and balancing.\n        If interval doesn't exist, raise ValueError.\n\n        This method may set done to [1] to tell all callers that\n        rebalancing has completed.\n\n        See Eternally Confuzzled's jsw_remove_r function (lines 1-32)\n        in his AVL tree article for reference.\n        \"\"\"\n        #trace = interval.begin == 347 and interval.end == 353\n        #if trace: print('\\nRemoving from {} interval {}'.format(\n        #   self.x_center, interval))\n        if self.center_hit(interval):\n            #if trace: print('Hit at {}'.format(self.x_center))\n            if not should_raise_error and interval not in self.s_center:\n                done.append(1)\n                #if trace: print('Doing nothing.')\n                return self\n            try:\n                # raises error if interval not present - this is\n                # desired.\n                self.s_center.remove(interval)\n            except:\n                self.print_structure()\n                raise KeyError(interval)\n            if self.s_center:     # keep this node\n                done.append(1)    # no rebalancing necessary\n                #if trace: print('Removed, no rebalancing.')\n                return self\n\n            # If we reach here, no intervals are left in self.s_center.\n            # So, prune self.\n            return self.prune()\n        else:  # interval not in s_center\n            direction = self.hit_branch(interval)\n\n            if not self[direction]:\n                if should_raise_error:\n                    raise ValueError\n                done.append(1)\n                return self\n\n            #if trace:\n            #   print('Descending to {} branch'.format(\n            #       ['left', 'right'][direction]\n            #       ))\n            self[direction] = self[direction].remove_interval_helper(interval, done, should_raise_error)\n\n            # Clean up\n            if not done:\n                #if trace:\n                #    print('Rotating {}'.format(self.x_center))\n                #    self.print_structure()\n                return self.rotate()\n            return self\n\n    def search_overlap(self, point_list):\n        \"\"\"\n        Returns all intervals that overlap the point_list.\n        \"\"\"\n        result = set()\n        for j in point_list:\n            self.search_point(j, result)\n        return result\n\n    def search_point(self, point, result):\n        \"\"\"\n        Returns all intervals that contain point.\n        \"\"\"\n        for k in self.s_center:\n            if k.begin <= point < k.end:\n                result.add(k)\n        if point < self.x_center and self[0]:\n            return self[0].search_point(point, result)\n        elif point > self.x_center and self[1]:\n            return self[1].search_point(point, result)\n        return result\n\n    def prune(self):\n        \"\"\"\n        On a subtree where the root node's s_center is empty,\n        return a new subtree with no empty s_centers.\n        \"\"\"\n        if not self[0] or not self[1]:    # if I have an empty branch\n            direction = not self[0]       # graft the other branch here\n            #if trace:\n            #    print('Grafting {} branch'.format(\n            #       'right' if direction else 'left'))\n\n            result = self[direction]\n            #if result: result.verify()\n            return result\n        else:\n            # Replace the root node with the greatest predecessor.\n            heir, self[0] = self[0].pop_greatest_child()\n            #if trace:\n            #    print('Replacing {} with {}.'.format(\n            #        self.x_center, heir.x_center\n            #        ))\n            #    print('Removed greatest predecessor:')\n            #    self.print_structure()\n\n            #if self[0]: self[0].verify()\n            #if self[1]: self[1].verify()\n\n            # Set up the heir as the new root node\n            (heir[0], heir[1]) = (self[0], self[1])\n            #if trace: print('Setting up the heir:')\n            #if trace: heir.print_structure()\n\n            # popping the predecessor may have unbalanced this node;\n            # fix it\n            heir.refresh_balance()\n            heir = heir.rotate()\n            #heir.verify()\n            #if trace: print('Rotated the heir:')\n            #if trace: heir.print_structure()\n            return heir\n\n    def pop_greatest_child(self):\n        \"\"\"\n        Used when pruning a node with both a left and a right branch.\n        Returns (greatest_child, node), where:\n          * greatest_child is a new node to replace the removed node.\n          * node is the subtree after:\n              - removing the greatest child\n              - balancing\n              - moving overlapping nodes into greatest_child\n\n        Assumes that self.s_center is not empty.\n\n        See Eternally Confuzzled's jsw_remove_r function (lines 34-54)\n        in his AVL tree article for reference.\n        \"\"\"\n        #print('Popping from {}'.format(self.x_center))\n        if not self.right_node:         # This node is the greatest child.\n            # To reduce the chances of an overlap with a parent, return\n            # a child node containing the smallest possible number of\n            # intervals, as close as possible to the maximum bound.\n            ivs = sorted(self.s_center, key=attrgetter('end', 'begin'))\n            max_iv = ivs.pop()\n            new_x_center = self.x_center\n            while ivs:\n                next_max_iv = ivs.pop()\n                if next_max_iv.end == max_iv.end: continue\n                new_x_center = max(new_x_center, next_max_iv.end)\n            def get_new_s_center():\n                for iv in self.s_center:\n                    if iv.contains_point(new_x_center): yield iv\n\n            # Create a new node with the largest x_center possible.\n            child = Node(new_x_center, get_new_s_center())\n            self.s_center -= child.s_center\n\n            #print('Pop hit! Returning child   = {}'.format(\n            #    child.print_structure(tostring=True)\n            #    ))\n            #assert not child[0]\n            #assert not child[1]\n\n            if self.s_center:\n                #print('     and returning newnode = {}'.format( self ))\n                #self.verify()\n                return child, self\n            else:\n                #print('     and returning newnode = {}'.format( self[0] ))\n                #if self[0]: self[0].verify()\n                return child, self[0]  # Rotate left child up\n\n        else:\n            #print('Pop descent to {}'.format(self[1].x_center))\n            (greatest_child, self[1]) = self[1].pop_greatest_child()\n\n            # Move any overlaps into greatest_child\n            for iv in set(self.s_center):\n                if iv.contains_point(greatest_child.x_center):\n                    self.s_center.remove(iv)\n                    greatest_child.add(iv)\n\n            #print('Pop Returning child   = {}'.format(\n            #    greatest_child.print_structure(tostring=True)\n            #    ))\n            if self.s_center:\n                #print('and returning newnode = {}'.format(\n                #    new_self.print_structure(tostring=True)\n                #    ))\n                #new_self.verify()\n                self.refresh_balance()\n                new_self = self.rotate()\n                return greatest_child, new_self\n            else:\n                new_self = self.prune()\n                #print('and returning prune = {}'.format(\n                #    new_self.print_structure(tostring=True)\n                #    ))\n                #if new_self: new_self.verify()\n                return greatest_child, new_self\n\n    def contains_point(self, p):\n        \"\"\"\n        Returns whether this node or a child overlaps p.\n        \"\"\"\n        for iv in self.s_center:\n            if iv.contains_point(p):\n                return True\n        branch = self[p > self.x_center]\n        return branch and branch.contains_point(p)\n\n    def all_children(self):\n        return self.all_children_helper(set())\n\n    def all_children_helper(self, result):\n        result.update(self.s_center)\n        if self[0]:\n            self[0].all_children_helper(result)\n        if self[1]:\n            self[1].all_children_helper(result)\n        return result\n\n    def verify(self, parents=set()):\n        \"\"\"\n        ## DEBUG ONLY ##\n        Recursively ensures that the invariants of an interval subtree\n        hold.\n        \"\"\"\n        assert(isinstance(self.s_center, set))\n\n        bal = self.balance\n        assert abs(bal) < 2, \\\n            \"Error: Rotation should have happened, but didn't! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n        self.refresh_balance()\n        assert bal == self.balance, \\\n            \"Error: self.balance not set correctly! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n\n        assert self.s_center, \\\n            \"Error: s_center is empty! \\n{}\".format(\n                self.print_structure(tostring=True)\n            )\n        for iv in self.s_center:\n            assert hasattr(iv, 'begin')\n            assert hasattr(iv, 'end')\n            assert iv.begin < iv.end\n            assert iv.overlaps(self.x_center)\n            for parent in sorted(parents):\n                assert not iv.contains_point(parent), \\\n                    \"Error: Overlaps ancestor ({})! \\n{}\\n\\n{}\".format(\n                        parent, iv, self.print_structure(tostring=True)\n                    )\n        if self[0]:\n            assert self[0].x_center < self.x_center, \\\n                \"Error: Out-of-order left child! {}\".format(self.x_center)\n            self[0].verify(parents.union([self.x_center]))\n        if self[1]:\n            assert self[1].x_center > self.x_center, \\\n                \"Error: Out-of-order right child! {}\".format(self.x_center)\n            self[1].verify(parents.union([self.x_center]))\n\n    def __getitem__(self, index):\n        \"\"\"\n        Returns the left child if input is equivalent to False, or\n        the right side otherwise.\n        \"\"\"\n        if index:\n            return self.right_node\n        else:\n            return self.left_node\n\n    def __setitem__(self, key, value):\n        \"\"\"Sets the left (0) or right (1) child.\"\"\"\n        if key:\n            self.right_node = value\n        else:\n            self.left_node = value\n\n    def __str__(self):\n        \"\"\"\n        Shows info about this node.\n\n        Since Nodes are internal data structures not revealed to the\n        user, I'm not bothering to make this copy-paste-executable as a\n        constructor.\n        \"\"\"\n        return \"Node<{0}, depth={1}, balance={2}>\".format(\n            self.x_center,\n            self.depth,\n            self.balance\n        )\n        #fieldcount = 'c_count,has_l,has_r = <{}, {}, {}>'.format(\n        #    len(self.s_center),\n        #    bool(self.left_node),\n        #    bool(self.right_node)\n        #)\n        #fields = [self.x_center, self.balance, fieldcount]\n        #return \"Node({}, b={}, {})\".format(*fields)\n\n    def count_nodes(self):\n        \"\"\"\n        Count the number of Nodes in this subtree.\n        :rtype: int\n        \"\"\"\n        count = 1\n        if self.left_node:\n            count += self.left_node.count_nodes()\n        if self.right_node:\n            count += self.right_node.count_nodes()\n        return count\n\n    def depth_score(self, n, m):\n        \"\"\"\n        Calculates flaws in balancing the tree.\n        :param n: size of tree\n        :param m: number of Nodes in tree\n        :rtype: real\n        \"\"\"\n        if n == 0:\n            return 0.0\n\n        # dopt is the optimal maximum depth of the tree\n        dopt = 1 + int(floor(l2(m)))\n        f = 1 / float(1 + n - dopt)\n        return f * self.depth_score_helper(1, dopt)\n\n    def depth_score_helper(self, d, dopt):\n        \"\"\"\n        Gets a weighted count of the number of Intervals deeper than dopt.\n        :param d: current depth, starting from 0\n        :param dopt: optimal maximum depth of a leaf Node\n        :rtype: real\n        \"\"\"\n        # di is how may levels deeper than optimal d is\n        di = d - dopt\n        if di > 0:\n            count = di * len(self.s_center)\n        else:\n            count = 0\n        if self.right_node:\n            count += self.right_node.depth_score_helper(d + 1, dopt)\n        if self.left_node:\n            count += self.left_node.depth_score_helper(d + 1, dopt)\n        return count\n\n    def print_structure(self, indent=0, tostring=False):\n        \"\"\"\n        For debugging.\n        \"\"\"\n        nl = '\\n'\n        sp = indent * '    '\n\n        rlist = [str(self) + nl]\n        if self.s_center:\n            for iv in sorted(self.s_center):\n                rlist.append(sp + ' ' + repr(iv) + nl)\n        if self.left_node:\n            rlist.append(sp + '<:  ')  # no CR\n            rlist.append(self.left_node.print_structure(indent + 1, True))\n        if self.right_node:\n            rlist.append(sp + '>:  ')  # no CR\n            rlist.append(self.right_node.print_structure(indent + 1, True))\n        result = ''.join(rlist)\n        if tostring:\n            return result\n        else:\n            print(result)\n",
    "intervaltree/intervaltree.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom .interval import Interval\nfrom .node import Node\nfrom numbers import Number\nfrom sortedcontainers import SortedDict\nfrom copy import copy\nfrom warnings import warn\n\ntry:\n    from collections.abc import MutableSet  # Python 3?\nexcept ImportError:\n    from collections import MutableSet\n\ntry:\n    xrange  # Python 2?\nexcept NameError:  # pragma: no cover\n    xrange = range\n\n\n# noinspection PyBroadException\nclass IntervalTree(MutableSet):\n    \"\"\"\n    A binary lookup tree of intervals.\n    The intervals contained in the tree are represented using ``Interval(a, b, data)`` objects.\n    Each such object represents a half-open interval ``[a, b)`` with optional data.\n\n    Examples:\n    ---------\n\n    Initialize a blank tree::\n\n        >>> tree = IntervalTree()\n        >>> tree\n        IntervalTree()\n\n    Initialize a tree from an iterable set of Intervals in O(n * log n)::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-20.0, -10.0)])\n        >>> tree\n        IntervalTree([Interval(-20.0, -10.0), Interval(-10, 10)])\n        >>> len(tree)\n        2\n\n    Note that this is a set, i.e. repeated intervals are ignored. However,\n    Intervals with different data fields are regarded as different::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-10, 10), Interval(-10, 10, \"x\")])\n        >>> tree\n        IntervalTree([Interval(-10, 10), Interval(-10, 10, 'x')])\n        >>> len(tree)\n        2\n\n    Insertions::\n        >>> tree = IntervalTree()\n        >>> tree[0:1] = \"data\"\n        >>> tree.add(Interval(10, 20))\n        >>> tree.addi(19.9, 20)\n        >>> tree\n        IntervalTree([Interval(0, 1, 'data'), Interval(10, 20), Interval(19.9, 20)])\n        >>> tree.update([Interval(19.9, 20.1), Interval(20.1, 30)])\n        >>> len(tree)\n        5\n\n        Inserting the same Interval twice does nothing::\n            >>> tree = IntervalTree()\n            >>> tree[-10:20] = \"arbitrary data\"\n            >>> tree[-10:20] = None  # Note that this is also an insertion\n            >>> tree\n            IntervalTree([Interval(-10, 20), Interval(-10, 20, 'arbitrary data')])\n            >>> tree[-10:20] = None  # This won't change anything\n            >>> tree[-10:20] = \"arbitrary data\" # Neither will this\n            >>> len(tree)\n            2\n\n    Deletions::\n        >>> tree = IntervalTree(Interval(b, e) for b, e in [(-10, 10), (-20, -10), (10, 20)])\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(-10, 10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        Traceback (most recent call last):\n        ...\n        ValueError\n        >>> tree.discard(Interval(-10, 10))  # Same as remove, but no exception on failure\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n\n    Delete intervals, overlapping a given point::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.1)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1)])\n\n    Delete intervals, overlapping an interval::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(0, 0.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.7, 1.8)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.6)  # Null interval does nothing\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.5)  # Ditto\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n\n    Delete intervals, enveloped in the range::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.0, 1.5)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.1, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.7)\n        >>> tree\n        IntervalTree()\n\n    Point queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[-1.1]   == set([Interval(-1.1, 1.1)])\n        >>> assert tree.at(1.1) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])   # Same as tree[1.1]\n        >>> assert tree.at(1.5) == set([Interval(0.5, 1.7)])                        # Same as tree[1.5]\n\n    Interval overlap queries\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.overlap(1.7, 1.8) == set()\n        >>> assert tree.overlap(1.5, 1.8) == set([Interval(0.5, 1.7)])\n        >>> assert tree[1.5:1.8] == set([Interval(0.5, 1.7)])                       # same as previous\n        >>> assert tree.overlap(1.1, 1.8) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[1.1:1.8] == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])  # same as previous\n\n    Interval envelop queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.envelop(-0.5, 0.5) == set()\n        >>> assert tree.envelop(-0.5, 1.5) == set([Interval(-0.5, 1.5)])\n\n    Membership queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> Interval(-0.5, 0.5) in tree\n        False\n        >>> Interval(-1.1, 1.1) in tree\n        True\n        >>> Interval(-1.1, 1.1, \"x\") in tree\n        False\n        >>> tree.overlaps(-1.1)\n        True\n        >>> tree.overlaps(1.7)\n        False\n        >>> tree.overlaps(1.7, 1.8)\n        False\n        >>> tree.overlaps(-1.2, -1.1)\n        False\n        >>> tree.overlaps(-1.2, -1.0)\n        True\n\n    Sizing::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> len(tree)\n        3\n        >>> tree.is_empty()\n        False\n        >>> IntervalTree().is_empty()\n        True\n        >>> not tree\n        False\n        >>> not IntervalTree()\n        True\n        >>> print(tree.begin())    # using print() because of floats in Python 2.6\n        -1.1\n        >>> print(tree.end())      # ditto\n        1.7\n\n    Iteration::\n\n        >>> tree = IntervalTree([Interval(-11, 11), Interval(-5, 15), Interval(5, 17)])\n        >>> [iv.begin for iv in sorted(tree)]\n        [-11, -5, 5]\n        >>> assert tree.items() == set([Interval(-5, 15), Interval(-11, 11), Interval(5, 17)])\n\n    Copy- and typecasting, pickling::\n\n        >>> tree0 = IntervalTree([Interval(0, 1, \"x\"), Interval(1, 2, [\"x\"])])\n        >>> tree1 = IntervalTree(tree0)  # Shares Interval objects\n        >>> tree2 = tree0.copy()         # Shallow copy (same as above, as Intervals are singletons)\n        >>> import pickle\n        >>> tree3 = pickle.loads(pickle.dumps(tree0))  # Deep copy\n        >>> list(tree0[1])[0].data[0] = \"y\"  # affects shallow copies, but not deep copies\n        >>> tree0\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree1\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree2\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree3\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['x'])])\n\n    Equality testing::\n\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1)])\n        True\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1, \"x\")])\n        False\n    \"\"\"\n    @classmethod\n    def from_tuples(cls, tups):\n        \"\"\"\n        Create a new IntervalTree from an iterable of 2- or 3-tuples,\n         where the tuple lists begin, end, and optionally data.\n        \"\"\"\n        ivs = [Interval(*t) for t in tups]\n        return IntervalTree(ivs)\n\n    def __init__(self, intervals=None):\n        \"\"\"\n        Set up a tree. If intervals is provided, add all the intervals\n        to the tree.\n\n        Completes in O(n*log n) time.\n        \"\"\"\n        intervals = set(intervals) if intervals is not None else set()\n        for iv in intervals:\n            if iv.is_null():\n                raise ValueError(\n                    \"IntervalTree: Null Interval objects not allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n        self.all_intervals = intervals\n        self.top_node = Node.from_intervals(self.all_intervals)\n        self.boundary_table = SortedDict()\n        for iv in self.all_intervals:\n            self._add_boundaries(iv)\n\n    def copy(self):\n        \"\"\"\n        Construct a new IntervalTree using shallow copies of the\n        intervals in the source tree.\n\n        Completes in O(n*log n) time.\n        :rtype: IntervalTree\n        \"\"\"\n        return IntervalTree(iv.copy() for iv in self)\n\n    def _add_boundaries(self, interval):\n        \"\"\"\n        Records the boundaries of the interval in the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if begin in self.boundary_table:\n            self.boundary_table[begin] += 1\n        else:\n            self.boundary_table[begin] = 1\n\n        if end in self.boundary_table:\n            self.boundary_table[end] += 1\n        else:\n            self.boundary_table[end] = 1\n\n    def _remove_boundaries(self, interval):\n        \"\"\"\n        Removes the boundaries of the interval from the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if self.boundary_table[begin] == 1:\n            del self.boundary_table[begin]\n        else:\n            self.boundary_table[begin] -= 1\n\n        if self.boundary_table[end] == 1:\n            del self.boundary_table[end]\n        else:\n            self.boundary_table[end] -= 1\n\n    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n\n        if interval.is_null():\n            raise ValueError(\n                \"IntervalTree: Null Interval objects not allowed in IntervalTree:\"\n                \" {0}\".format(interval)\n            )\n\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)\n    append = add\n\n    def addi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for add(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.add(Interval(begin, end, data))\n    appendi = addi\n\n    def update(self, intervals):\n        \"\"\"\n        Given an iterable of intervals, add them to the tree.\n\n        Completes in O(m*log(n+m), where m = number of intervals to\n        add.\n        \"\"\"\n        for iv in intervals:\n            self.add(iv)\n\n    def remove(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, raises\n        ValueError.\n\n        Completes in O(log n) time.\n        \"\"\"\n        #self.verify()\n        if interval not in self:\n            #print(self.all_intervals)\n            raise ValueError\n        self.top_node = self.top_node.remove(interval)\n        self.all_intervals.remove(interval)\n        self._remove_boundaries(interval)\n        #self.verify()\n\n    def removei(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for remove(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.remove(Interval(begin, end, data))\n\n    def discard(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, does\n        nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            return\n        self.all_intervals.discard(interval)\n        self.top_node = self.top_node.discard(interval)\n        self._remove_boundaries(interval)\n\n    def discardi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for discard(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.discard(Interval(begin, end, data))\n\n    def difference(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals in self but not\n        in other.\n        \"\"\"\n        ivs = set()\n        for iv in self:\n            if iv not in other:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def difference_update(self, other):\n        \"\"\"\n        Removes all intervals in other from self.\n        \"\"\"\n        for iv in other:\n            self.discard(iv)\n\n    def union(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals from self\n        and other.\n        \"\"\"\n        return IntervalTree(set(self).union(other))\n\n    def intersection(self, other):\n        \"\"\"\n        Returns a new tree of all intervals common to both self and\n        other.\n        \"\"\"\n        ivs = set()\n        shorter, longer = sorted([self, other], key=len)\n        for iv in shorter:\n            if iv in longer:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def intersection_update(self, other):\n        \"\"\"\n        Removes intervals from self unless they also exist in other.\n        \"\"\"\n        ivs = list(self)\n        for iv in ivs:\n            if iv not in other:\n                self.remove(iv)\n\n    def symmetric_difference(self, other):\n        \"\"\"\n        Return a tree with elements only in self or other but not\n        both.\n        \"\"\"\n        if not isinstance(other, set): other = set(other)\n        me = set(self)\n        ivs = me.difference(other).union(other.difference(me))\n        return IntervalTree(ivs)\n\n    def symmetric_difference_update(self, other):\n        \"\"\"\n        Throws out all intervals except those only in self or other,\n        not both.\n        \"\"\"\n        other = set(other)\n        ivs = list(self)\n        for iv in ivs:\n            if iv in other:\n                self.remove(iv)\n                other.remove(iv)\n        self.update(other)\n\n    def remove_overlap(self, begin, end=None):\n        \"\"\"\n        Removes all intervals overlapping the given point or range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range (this is 1 for a point)\n        \"\"\"\n        hitlist = self.at(begin) if end is None else self.overlap(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def remove_envelop(self, begin, end):\n        \"\"\"\n        Removes all intervals completely enveloped in the given range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range\n        \"\"\"\n        hitlist = self.envelop(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def chop(self, begin, end, datafunc=None):\n        \"\"\"\n        Like remove_envelop(), but trims back Intervals hanging into\n        the chopped area so that nothing overlaps.\n        \"\"\"\n        insertions = set()\n        begin_hits = [iv for iv in self.at(begin) if iv.begin < begin]\n        end_hits = [iv for iv in self.at(end) if iv.end > end]\n\n        if datafunc:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, datafunc(iv, True)))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, datafunc(iv, False)))\n        else:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, iv.data))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, iv.data))\n\n        self.remove_envelop(begin, end)\n        self.difference_update(begin_hits)\n        self.difference_update(end_hits)\n        self.update(insertions)\n\n    def slice(self, point, datafunc=None):\n        \"\"\"\n        Split Intervals that overlap point into two new Intervals. if\n        specified, uses datafunc(interval, islower=True/False) to\n        set the data field of the new Intervals.\n        :param point: where to slice\n        :param datafunc(interval, isupper): callable returning a new\n        value for the interval's data field\n        \"\"\"\n        hitlist = set(iv for iv in self.at(point) if iv.begin < point)\n        insertions = set()\n        if datafunc:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, datafunc(iv, True)))\n                insertions.add(Interval(point, iv.end, datafunc(iv, False)))\n        else:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, iv.data))\n                insertions.add(Interval(point, iv.end, iv.data))\n        self.difference_update(hitlist)\n        self.update(insertions)\n\n    def clear(self):\n        \"\"\"\n        Empties the tree.\n\n        Completes in O(1) tine.\n        \"\"\"\n        self.__init__()\n\n    def find_nested(self):\n        \"\"\"\n        Returns a dictionary mapping parent intervals to sets of\n        intervals overlapped by and contained in the parent.\n\n        Completes in O(n^2) time.\n        :rtype: dict of [Interval, set of Interval]\n        \"\"\"\n        result = {}\n\n        def add_if_nested():\n            if parent.contains_interval(child):\n                if parent not in result:\n                    result[parent] = set()\n                result[parent].add(child)\n\n        long_ivs = sorted(self.all_intervals, key=Interval.length, reverse=True)\n        for i, parent in enumerate(long_ivs):\n            for child in long_ivs[i + 1:]:\n                add_if_nested()\n        return result\n\n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        point or range.\n\n        Completes in O(r*log n) time, where r is the size of the\n        search range.\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            return self.overlaps_range(begin, end)\n        elif isinstance(begin, Number):\n            return self.overlaps_point(begin)\n        else:\n            return self.overlaps_range(begin.begin, begin.end)\n\n    def overlaps_point(self, p):\n        \"\"\"\n        Returns whether some interval in the tree overlaps p.\n\n        Completes in O(log n) time.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        return bool(self.top_node.contains_point(p))\n\n    def overlaps_range(self, begin, end):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        range. Returns False if given a null interval over which to\n        test.\n\n        Completes in O(r*log n) time, where r is the range length and n\n        is the table size.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        elif begin >= end:\n            return False\n        elif self.overlaps_point(begin):\n            return True\n        return any(\n            self.overlaps_point(bound)\n            for bound in self.boundary_table\n            if begin < bound < end\n        )\n\n    def split_overlaps(self):\n        \"\"\"\n        Finds all intervals with overlapping ranges and splits them\n        along the range boundaries.\n\n        Completes in worst-case O(n^2*log n) time (many interval\n        boundaries are inside many intervals), best-case O(n*log n)\n        time (small number of overlaps << n per interval).\n        \"\"\"\n        if not self:\n            return\n        if len(self.boundary_table) == 2:\n            return\n\n        bounds = sorted(self.boundary_table)  # get bound locations\n\n        new_ivs = set()\n        for lbound, ubound in zip(bounds[:-1], bounds[1:]):\n            for iv in self[lbound]:\n                new_ivs.add(Interval(lbound, ubound, iv.data))\n\n        self.__init__(new_ivs)\n\n    def merge_overlaps(self, data_reducer=None, data_initializer=None, strict=True):\n        \"\"\"\n        Finds all intervals with overlapping ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initializer created with copy.copy(data_initializer).\n\n        If strict is True (default), intervals are only merged if\n        their ranges actually overlap; adjacent, touching intervals\n        will not be merged. If strict is False, intervals are merged\n        even if they are only end-to-end adjacent.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                if (higher.begin < lower.end or\n                    not strict and higher.begin == lower.end):  # should merge\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:  # annihilate the data, since we don't know how to merge it\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def merge_equals(self, data_reducer=None, data_initializer=None):\n        \"\"\"\n        Finds all intervals with equal ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                if higher.range_matches(lower):  # should merge\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:  # annihilate the data, since we don't know how to merge it\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def merge_neighbors(\n        self,\n        data_reducer=None,\n        data_initializer=None,\n        distance=1,\n        strict=True,\n    ):\n        \"\"\"\n        Finds all adjacent intervals with range terminals less than or equal to\n        the given distance and merges them into a single interval. If provided,\n        uses data_reducer and data_initializer with similar semantics to\n        Python's built-in reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        If strict is True (default), only discrete intervals are merged if\n        their ranges are within the given distance; overlapping intervals\n        will not be merged. If strict is False, both neighbors and overlapping\n        intervals are merged.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n\n        sorted_intervals = sorted(self.all_intervals)  # get sorted intervals\n        merged = []\n        # use mutable object to allow new_series() to modify it\n        current_reduced = [None]\n        higher = None  # iterating variable, which new_series() needs access to\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:  # data_initializer is not None\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n\n        for higher in sorted_intervals:\n            if merged:  # series already begun\n                lower = merged[-1]\n                margin = higher.begin - lower.end\n                if margin <= distance:  # should merge\n                    if strict and margin < 0:\n                        new_series()\n                        continue\n                    else:\n                        upper_bound = max(lower.end, higher.end)\n                        if data_reducer is not None:\n                            current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                        else:  # annihilate the data, since we don't know how to merge it\n                            current_reduced[0] = None\n                        merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:  # not merged; is first of Intervals to merge\n                new_series()\n\n        self.__init__(merged)\n\n    def items(self):\n        \"\"\"\n        Constructs and returns a set of all intervals in the tree.\n\n        Completes in O(n) time.\n        :rtype: set of Interval\n        \"\"\"\n        return set(self.all_intervals)\n\n    def is_empty(self):\n        \"\"\"\n        Returns whether the tree is empty.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return 0 == len(self)\n\n    def at(self, p):\n        \"\"\"\n        Returns the set of all intervals that contain p.\n\n        Completes in O(m + log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        return root.search_point(p, set())\n\n    def envelop(self, begin, end=None):\n        \"\"\"\n        Returns the set of all intervals fully contained in the range\n        [begin, end).\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.envelop(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set()) # bound_begin might be greater\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)  # up to, but not including end\n        result.update(root.search_overlap(\n            # slice notation is slightly slower\n            boundary_table.keys()[index] for index in xrange(bound_begin, bound_end)\n        ))\n\n        # TODO: improve envelop() to use node info instead of less-efficient filtering\n        result = set(\n            iv for iv in result\n            if iv.begin >= begin and iv.end <= end\n        )\n        return result\n\n    def overlap(self, begin, end=None):\n        \"\"\"\n        Returns a set of all intervals overlapping the given range.\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.overlap(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())  # bound_begin might be greater\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)  # up to, but not including end\n        result.update(root.search_overlap(\n            # slice notation is slightly slower\n            boundary_table.keys()[index] for index in xrange(bound_begin, bound_end)\n        ))\n        return result\n\n    def begin(self):\n        \"\"\"\n        Returns the lower bound of the first interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[0]\n\n    def end(self):\n        \"\"\"\n        Returns the upper bound of the last interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[-1]\n\n    def range(self):\n        \"\"\"\n        Returns a minimum-spanning Interval that encloses all the\n        members of this IntervalTree. If the tree is empty, returns\n        null Interval.\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin(), self.end())\n\n    def span(self):\n        \"\"\"\n        Returns the length of the minimum-spanning Interval that\n        encloses all the members of this IntervalTree. If the tree\n        is empty, return 0.\n        \"\"\"\n        if not self:\n            return 0\n        return self.end() - self.begin()\n\n    def print_structure(self, tostring=False):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Pretty-prints the structure of the tree.\n        If tostring is true, prints nothing and returns a string.\n        :rtype: None or str\n        \"\"\"\n        if self.top_node:\n            return self.top_node.print_structure(tostring=tostring)\n        else:\n            result = \"<empty IntervalTree>\"\n            if not tostring:\n                print(result)\n            else:\n                return result\n\n    def verify(self):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Checks the table to ensure that the invariants are held.\n        \"\"\"\n        if self.all_intervals:\n            ## top_node.all_children() == self.all_intervals\n            try:\n                assert self.top_node.all_children() == self.all_intervals\n            except AssertionError as e:\n                print(\n                    'Error: the tree and the membership set are out of sync!'\n                )\n                tivs = set(self.top_node.all_children())\n                print('top_node.all_children() - all_intervals:')\n                try:\n                    pprint\n                except NameError:\n                    from pprint import pprint\n                pprint(tivs - self.all_intervals)\n                print('all_intervals - top_node.all_children():')\n                pprint(self.all_intervals - tivs)\n                raise e\n\n            ## All members are Intervals\n            for iv in self:\n                assert isinstance(iv, Interval), (\n                    \"Error: Only Interval objects allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n\n            ## No null intervals\n            for iv in self:\n                assert not iv.is_null(), (\n                    \"Error: Null Interval objects not allowed in IntervalTree:\"\n                    \" {0}\".format(iv)\n                )\n\n            ## Reconstruct boundary_table\n            bound_check = {}\n            for iv in self:\n                if iv.begin in bound_check:\n                    bound_check[iv.begin] += 1\n                else:\n                    bound_check[iv.begin] = 1\n                if iv.end in bound_check:\n                    bound_check[iv.end] += 1\n                else:\n                    bound_check[iv.end] = 1\n\n            ## Reconstructed boundary table (bound_check) ==? boundary_table\n            assert set(self.boundary_table.keys()) == set(bound_check.keys()),\\\n                'Error: boundary_table is out of sync with ' \\\n                'the intervals in the tree!'\n\n            # For efficiency reasons this should be iteritems in Py2, but we\n            # don't care much for efficiency in debug methods anyway.\n            for key, val in self.boundary_table.items():\n                assert bound_check[key] == val, \\\n                    'Error: boundary_table[{0}] should be {1},' \\\n                    ' but is {2}!'.format(\n                        key, bound_check[key], val)\n\n            ## Internal tree structure\n            self.top_node.verify(set())\n        else:\n            ## Verify empty tree\n            assert not self.boundary_table, \\\n                \"Error: boundary table should be empty!\"\n            assert self.top_node is None, \\\n                \"Error: top_node isn't None!\"\n\n    def score(self, full_report=False):\n        \"\"\"\n        Returns a number between 0 and 1, indicating how suboptimal the tree\n        is. The lower, the better. Roughly, this number represents the\n        fraction of flawed Intervals in the tree.\n        :rtype: float\n        \"\"\"\n        if len(self) <= 2:\n            return 0.0\n\n        n = len(self)\n        m = self.top_node.count_nodes()\n\n        def s_center_score():\n            \"\"\"\n            Returns a normalized score, indicating roughly how many times\n            intervals share s_center with other intervals. Output is full-scale\n            from 0 to 1.\n            :rtype: float\n            \"\"\"\n            raw = n - m\n            maximum = n - 1\n            return raw / float(maximum)\n\n        report = {\n            \"depth\": self.top_node.depth_score(n, m),\n            \"s_center\": s_center_score(),\n        }\n        cumulative = max(report.values())\n        report[\"_cumulative\"] = cumulative\n        if full_report:\n            return report\n        return cumulative\n\n\n    def __getitem__(self, index):\n        \"\"\"\n        Returns a set of all intervals overlapping the given index or\n        slice.\n\n        Completes in O(k * log(n) + m) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range (this is 1 for a point)\n        :rtype: set of Interval\n        \"\"\"\n        try:\n            start, stop = index.start, index.stop\n            if start is None:\n                start = self.begin()\n                if stop is None:\n                    return set(self)\n            if stop is None:\n                stop = self.end()\n            return self.overlap(start, stop)\n        except AttributeError:\n            return self.at(index)\n\n    def __setitem__(self, index, value):\n        \"\"\"\n        Adds a new interval to the tree. A shortcut for\n        add(Interval(index.start, index.stop, value)).\n\n        If an identical Interval object with equal range and data\n        already exists, does nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        self.addi(index.start, index.stop, value)\n\n    def __delitem__(self, point):\n        \"\"\"\n        Delete all items overlapping point.\n        \"\"\"\n        self.remove_overlap(point)\n\n    def __contains__(self, item):\n        \"\"\"\n        Returns whether item exists as an Interval in the tree.\n        This method only returns True for exact matches; for\n        overlaps, see the overlaps() method.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        # Removed point-checking code; it might trick the user into\n        # thinking that this is O(1), which point-checking isn't.\n        #if isinstance(item, Interval):\n        return item in self.all_intervals\n        #else:\n        #    return self.contains_point(item)\n\n    def containsi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for (Interval(begin, end, data) in tree).\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return Interval(begin, end, data) in self\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()\n    iter = __iter__\n\n    def __len__(self):\n        \"\"\"\n        Returns how many intervals are in the tree.\n\n        Completes in O(1) time.\n        :rtype: int\n        \"\"\"\n        return len(self.all_intervals)\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether two IntervalTrees are equal.\n\n        Completes in O(n) time if sizes are equal; O(1) time otherwise.\n        :rtype: bool\n        \"\"\"\n        return (\n            isinstance(other, IntervalTree) and\n            self.all_intervals == other.all_intervals\n        )\n\n    def __repr__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        ivs = sorted(self)\n        if not ivs:\n            return \"IntervalTree()\"\n        else:\n            return \"IntervalTree({0})\".format(ivs)\n\n    __str__ = __repr__\n\n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :rtype: tuple\n        \"\"\"\n        return IntervalTree, (sorted(self.all_intervals),)\n\n"
  },
  "GT_src_dict": {
    "intervaltree/interval.py": {
      "Interval.contains_point": {
        "code": "    def contains_point(self, p):\n        \"\"\"Determines if a given point `p` lies within the bounds of the Interval.\n\nParameters:\n- `p`: A point (of any comparable type) to be checked for containment in the Interval.\n\nReturns:\n- `True` if `p` is greater than or equal to `self.begin` and less than `self.end`, indicating that `p` is within the interval range; otherwise returns `False`.\n\nThis method relies on the instance attributes `begin` and `end`, which define the bounds of the Interval. The `begin` attribute marks the inclusive lower boundary, and the `end` attribute marks the exclusive upper boundary of the interval. This method does not raise exceptions and is designed to be simple and efficient, allowing straightforward point containment checks against the interval.\"\"\"\n        '\\n        Whether the Interval contains p.\\n        :param p: a point\\n        :return: True or False\\n        :rtype: bool\\n        '\n        return self.begin <= p < self.end",
        "docstring": "Determines if a given point `p` lies within the bounds of the Interval.\n\nParameters:\n- `p`: A point (of any comparable type) to be checked for containment in the Interval.\n\nReturns:\n- `True` if `p` is greater than or equal to `self.begin` and less than `self.end`, indicating that `p` is within the interval range; otherwise returns `False`.\n\nThis method relies on the instance attributes `begin` and `end`, which define the bounds of the Interval. The `begin` attribute marks the inclusive lower boundary, and the `end` attribute marks the exclusive upper boundary of the interval. This method does not raise exceptions and is designed to be simple and efficient, allowing straightforward point containment checks against the interval.",
        "signature": "def contains_point(self, p):",
        "type": "Method",
        "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
      },
      "Interval.__hash__": {
        "code": "    def __hash__(self):\n        \"\"\"Returns a hash value for the Interval instance based solely on its `begin` and `end` attributes. This is essential for using Interval instances as keys in dictionaries or sets, ensuring that instances with the same start and end points yield the same hash. The hash function relies on the immutable nature of the `begin` and `end` values to maintain consistency. No parameters are required for this method, and it returns a hash value, which is a Number, that uniquely identifies the Interval based on its start and end points.\"\"\"\n        '\\n        Depends on begin and end only.\\n        :return: hash\\n        :rtype: Number\\n        '\n        return hash((self.begin, self.end))",
        "docstring": "Returns a hash value for the Interval instance based solely on its `begin` and `end` attributes. This is essential for using Interval instances as keys in dictionaries or sets, ensuring that instances with the same start and end points yield the same hash. The hash function relies on the immutable nature of the `begin` and `end` values to maintain consistency. No parameters are required for this method, and it returns a hash value, which is a Number, that uniquely identifies the Interval based on its start and end points.",
        "signature": "def __hash__(self):",
        "type": "Method",
        "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
      }
    },
    "intervaltree/node.py": {
      "Node.add": {
        "code": "    def add(self, interval):\n        \"\"\"Adds an interval to the subtree represented by the Node and rebalances the tree if necessary.\n\nParameters:\n- interval: An object representing an interval that needs to be added to the Node. This interval should have `begin` and `end` properties for the method to determine overlaps and correct placement within the tree.\n\nReturns:\n- Node: The current instance of the Node after attempting to add the interval and performing necessary rotations for balancing the tree.\n\nSide Effects:\n- Modifies the Node's internal structures, specifically adjusting the `s_center`, `left_node`, or `right_node` as needed for proper organization of intervals within the interval tree.\n\nDependencies:\n- The method relies on `center_hit` to check if the interval overlaps with the current Node's center and `hit_branch` to determine which child (left or right) to traverse based on the placement of the interval.\n- It also uses the `Node.from_interval` class method to create a new Node when a child Node does not already exist in the indicated branch.\n- The method calls `refresh_balance` to update the Node's balance after modifications and `rotate` to ensure the tree remains balanced after adding new intervals.\"\"\"\n        '\\n        Returns self after adding the interval and balancing.\\n        '\n        if self.center_hit(interval):\n            self.s_center.add(interval)\n            return self\n        else:\n            direction = self.hit_branch(interval)\n            if not self[direction]:\n                self[direction] = Node.from_interval(interval)\n                self.refresh_balance()\n                return self\n            else:\n                self[direction] = self[direction].add(interval)\n                return self.rotate()",
        "docstring": "Adds an interval to the subtree represented by the Node and rebalances the tree if necessary.\n\nParameters:\n- interval: An object representing an interval that needs to be added to the Node. This interval should have `begin` and `end` properties for the method to determine overlaps and correct placement within the tree.\n\nReturns:\n- Node: The current instance of the Node after attempting to add the interval and performing necessary rotations for balancing the tree.\n\nSide Effects:\n- Modifies the Node's internal structures, specifically adjusting the `s_center`, `left_node`, or `right_node` as needed for proper organization of intervals within the interval tree.\n\nDependencies:\n- The method relies on `center_hit` to check if the interval overlaps with the current Node's center and `hit_branch` to determine which child (left or right) to traverse based on the placement of the interval.\n- It also uses the `Node.from_interval` class method to create a new Node when a child Node does not already exist in the indicated branch.\n- The method calls `refresh_balance` to update the Node's balance after modifications and `rotate` to ensure the tree remains balanced after adding new intervals.",
        "signature": "def add(self, interval):",
        "type": "Method",
        "class_signature": "class Node(object):"
      },
      "Node.prune": {
        "code": "    def prune(self):\n        \"\"\"Prune the subtree rooted at the current node if its `s_center` is empty. This function \n    checks the child branches of the node and performs adjustments to ensure no empty \n    subtrees remain in the interval tree. If one side is empty, the other side becomes the \n    new root. If both children are present, it replaces the current root with the greatest \n    predecessor from the left branch and rebalances the resulting tree.\n\n    Returns:\n        Node: A new subtree without any empty `s_center` nodes.\n\n    Side Effects:\n        Modifies the current node by rearranging its children and potentially rebalancing \n        the tree structure.\n\n    This method interacts with the `pop_greatest_child()` method to find the greatest \n    predecessor and ensures the tree remains balanced through the use of `refresh_balance()` \n    and `rotate()` methods defined in the Node class.\"\"\"\n        \"\\n        On a subtree where the root node's s_center is empty,\\n        return a new subtree with no empty s_centers.\\n        \"\n        if not self[0] or not self[1]:\n            direction = not self[0]\n            result = self[direction]\n            return result\n        else:\n            heir, self[0] = self[0].pop_greatest_child()\n            heir[0], heir[1] = (self[0], self[1])\n            heir.refresh_balance()\n            heir = heir.rotate()\n            return heir",
        "docstring": "Prune the subtree rooted at the current node if its `s_center` is empty. This function \nchecks the child branches of the node and performs adjustments to ensure no empty \nsubtrees remain in the interval tree. If one side is empty, the other side becomes the \nnew root. If both children are present, it replaces the current root with the greatest \npredecessor from the left branch and rebalances the resulting tree.\n\nReturns:\n    Node: A new subtree without any empty `s_center` nodes.\n\nSide Effects:\n    Modifies the current node by rearranging its children and potentially rebalancing \n    the tree structure.\n\nThis method interacts with the `pop_greatest_child()` method to find the greatest \npredecessor and ensures the tree remains balanced through the use of `refresh_balance()` \nand `rotate()` methods defined in the Node class.",
        "signature": "def prune(self):",
        "type": "Method",
        "class_signature": "class Node(object):"
      },
      "Node.pop_greatest_child": {
        "code": "    def pop_greatest_child(self):\n        \"\"\"Handles the removal of the greatest child node when pruning a node with both left and right branches in the interval tree. It returns a tuple containing the greatest child node and the updated subtree after removing the greatest child, balancing, and moving any overlapping intervals into the greatest child.\n\nAssumes that the node's `s_center` set is not empty, meaning it contains intervals. The method checks if there is a right child; if not, it processes the current node as the greatest child, adjusting values to minimize overlaps. If there is a right child, it recursively calls itself on that branch to find and remove the greatest child.\n\nReturns:\n    Tuple[Node, Node]: A tuple where the first element is the node of the greatest child and the second element is the subtree adjusted after removal and balancing.\n\nNote:\n    The method relies on the `s_center` attribute, which stores the set of intervals associated with the node, and the child node management using `left_node` and `right_node` attributes, which specify the left and right children of the node, respectively.\"\"\"\n        \"\\n        Used when pruning a node with both a left and a right branch.\\n        Returns (greatest_child, node), where:\\n          * greatest_child is a new node to replace the removed node.\\n          * node is the subtree after:\\n              - removing the greatest child\\n              - balancing\\n              - moving overlapping nodes into greatest_child\\n\\n        Assumes that self.s_center is not empty.\\n\\n        See Eternally Confuzzled's jsw_remove_r function (lines 34-54)\\n        in his AVL tree article for reference.\\n        \"\n        if not self.right_node:\n            ivs = sorted(self.s_center, key=attrgetter('end', 'begin'))\n            max_iv = ivs.pop()\n            new_x_center = self.x_center\n            while ivs:\n                next_max_iv = ivs.pop()\n                if next_max_iv.end == max_iv.end:\n                    continue\n                new_x_center = max(new_x_center, next_max_iv.end)\n\n            def get_new_s_center():\n                for iv in self.s_center:\n                    if iv.contains_point(new_x_center):\n                        yield iv\n            child = Node(new_x_center, get_new_s_center())\n            self.s_center -= child.s_center\n            if self.s_center:\n                return (child, self)\n            else:\n                return (child, self[0])\n        else:\n            greatest_child, self[1] = self[1].pop_greatest_child()\n            for iv in set(self.s_center):\n                if iv.contains_point(greatest_child.x_center):\n                    self.s_center.remove(iv)\n                    greatest_child.add(iv)\n            if self.s_center:\n                self.refresh_balance()\n                new_self = self.rotate()\n                return (greatest_child, new_self)\n            else:\n                new_self = self.prune()\n                return (greatest_child, new_self)",
        "docstring": "Handles the removal of the greatest child node when pruning a node with both left and right branches in the interval tree. It returns a tuple containing the greatest child node and the updated subtree after removing the greatest child, balancing, and moving any overlapping intervals into the greatest child.\n\nAssumes that the node's `s_center` set is not empty, meaning it contains intervals. The method checks if there is a right child; if not, it processes the current node as the greatest child, adjusting values to minimize overlaps. If there is a right child, it recursively calls itself on that branch to find and remove the greatest child.\n\nReturns:\n    Tuple[Node, Node]: A tuple where the first element is the node of the greatest child and the second element is the subtree adjusted after removal and balancing.\n\nNote:\n    The method relies on the `s_center` attribute, which stores the set of intervals associated with the node, and the child node management using `left_node` and `right_node` attributes, which specify the left and right children of the node, respectively.",
        "signature": "def pop_greatest_child(self):",
        "type": "Method",
        "class_signature": "class Node(object):"
      },
      "Node.__getitem__": {
        "code": "    def __getitem__(self, index):\n        \"\"\"Returns the left child node if the input index is equivalent to False (0), or the right child node if the input index is True (1). This method allows for easy access to the child nodes of the current Node in the interval tree. The `index` parameter is expected to be an integer where `0` indicates the left child and `1` indicates the right child. The return value is the corresponding child Node, which could be `None` if that child does not exist. This method is integral to the tree's operations, facilitating navigation through child nodes during interval addition, removal, and search processes.\"\"\"\n        '\\n        Returns the left child if input is equivalent to False, or\\n        the right side otherwise.\\n        '\n        if index:\n            return self.right_node\n        else:\n            return self.left_node",
        "docstring": "Returns the left child node if the input index is equivalent to False (0), or the right child node if the input index is True (1). This method allows for easy access to the child nodes of the current Node in the interval tree. The `index` parameter is expected to be an integer where `0` indicates the left child and `1` indicates the right child. The return value is the corresponding child Node, which could be `None` if that child does not exist. This method is integral to the tree's operations, facilitating navigation through child nodes during interval addition, removal, and search processes.",
        "signature": "def __getitem__(self, index):",
        "type": "Method",
        "class_signature": "class Node(object):"
      },
      "Node.__setitem__": {
        "code": "    def __setitem__(self, key, value):\n        \"\"\"Sets the left or right child of the node based on the given key.\n\nParameters:\n- key (int): An integer indicating which child to set; 0 for the left child, 1 for the right child.\n- value (Node): The Node instance to assign as the specified child.\n\nThis method directly modifies the `left_node` or `right_node` attributes of the Node instance, allowing the tree structure to be built or updated. It is part of the internal operations of an interval tree where maintaining parent-child relationships is essential for tree balancing and interval management.\"\"\"\n        'Sets the left (0) or right (1) child.'\n        if key:\n            self.right_node = value\n        else:\n            self.left_node = value",
        "docstring": "Sets the left or right child of the node based on the given key.\n\nParameters:\n- key (int): An integer indicating which child to set; 0 for the left child, 1 for the right child.\n- value (Node): The Node instance to assign as the specified child.\n\nThis method directly modifies the `left_node` or `right_node` attributes of the Node instance, allowing the tree structure to be built or updated. It is part of the internal operations of an interval tree where maintaining parent-child relationships is essential for tree balancing and interval management.",
        "signature": "def __setitem__(self, key, value):",
        "type": "Method",
        "class_signature": "class Node(object):"
      }
    },
    "intervaltree/intervaltree.py": {
      "IntervalTree.__init__": {
        "code": "    def __init__(self, intervals=None):\n        \"\"\"Initialize an `IntervalTree` instance, optionally populated with a set of intervals. The intervals must be valid, i.e., they cannot be null. If provided, the method will check each interval for validity and construct the tree efficiently.\n\nParameters:\n- `intervals` (iterable, optional): An optional iterable containing `Interval` objects to initialize the tree. If None, an empty tree is created.\n\nRaises:\n- `ValueError`: If any `Interval` in the provided set is null.\n\nAttributes:\n- `self.all_intervals`: A set of all valid intervals contained in the tree.\n- `self.top_node`: The root node of the interval tree, constructed from the provided intervals using `Node.from_intervals()`.\n- `self.boundary_table`: A `SortedDict` managing the boundaries of the intervals for efficient lookup and operations.\n\nComplexity:\n- The initialization completes in O(n * log n) time, where n is the number of intervals provided.\"\"\"\n        '\\n        Set up a tree. If intervals is provided, add all the intervals\\n        to the tree.\\n\\n        Completes in O(n*log n) time.\\n        '\n        intervals = set(intervals) if intervals is not None else set()\n        for iv in intervals:\n            if iv.is_null():\n                raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(iv))\n        self.all_intervals = intervals\n        self.top_node = Node.from_intervals(self.all_intervals)\n        self.boundary_table = SortedDict()\n        for iv in self.all_intervals:\n            self._add_boundaries(iv)",
        "docstring": "Initialize an `IntervalTree` instance, optionally populated with a set of intervals. The intervals must be valid, i.e., they cannot be null. If provided, the method will check each interval for validity and construct the tree efficiently.\n\nParameters:\n- `intervals` (iterable, optional): An optional iterable containing `Interval` objects to initialize the tree. If None, an empty tree is created.\n\nRaises:\n- `ValueError`: If any `Interval` in the provided set is null.\n\nAttributes:\n- `self.all_intervals`: A set of all valid intervals contained in the tree.\n- `self.top_node`: The root node of the interval tree, constructed from the provided intervals using `Node.from_intervals()`.\n- `self.boundary_table`: A `SortedDict` managing the boundaries of the intervals for efficient lookup and operations.\n\nComplexity:\n- The initialization completes in O(n * log n) time, where n is the number of intervals provided.",
        "signature": "def __init__(self, intervals=None):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      },
      "IntervalTree.addi": {
        "code": "    def addi(self, begin, end, data=None):\n        \"\"\"Shortcut for adding a new interval to the IntervalTree, represented by the specified start and end points.\n\nParameters:\n- begin (float): The start point of the interval to be added.\n- end (float): The end point of the interval to be added.\n- data (optional): Optional data associated with the interval.\n\nReturns:\n- The method returns the result of calling the add() method with a new Interval object created from the provided parameters.\n\nComplexity:\n- Completes in O(log n) time, where n is the number of intervals in the tree.\n\nSide Effects:\n- If the interval represented by (begin, end) already exists in the tree, this method will not modify the tree. If the interval is valid and not a null interval (checked using the is_null method in the Interval class), it will be added to the tree's collection of intervals.\"\"\"\n        '\\n        Shortcut for add(Interval(begin, end, data)).\\n\\n        Completes in O(log n) time.\\n        '\n        return self.add(Interval(begin, end, data))",
        "docstring": "Shortcut for adding a new interval to the IntervalTree, represented by the specified start and end points.\n\nParameters:\n- begin (float): The start point of the interval to be added.\n- end (float): The end point of the interval to be added.\n- data (optional): Optional data associated with the interval.\n\nReturns:\n- The method returns the result of calling the add() method with a new Interval object created from the provided parameters.\n\nComplexity:\n- Completes in O(log n) time, where n is the number of intervals in the tree.\n\nSide Effects:\n- If the interval represented by (begin, end) already exists in the tree, this method will not modify the tree. If the interval is valid and not a null interval (checked using the is_null method in the Interval class), it will be added to the tree's collection of intervals.",
        "signature": "def addi(self, begin, end, data=None):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      },
      "IntervalTree.verify": {
        "code": "    def verify(self):\n        \"\"\"Checks the internal state of the IntervalTree to ensure that its invariants are maintained. This method validates that the intervals in the tree match those in the membership set, that all members are valid Interval objects, and that no null intervals exist. It also reconstructs the boundary table and verifies its integrity against the intervals present in the tree.\n\nNo parameters are required, and the method does not return any values. Instead, it will raise an AssertionError with a descriptive message if any of the integrity checks fail. Notable variables used within this method include `self.all_intervals`, which contains the set of all intervals in the tree, and `self.boundary_table`, which maps the boundaries of the stored intervals.\n\nDependencies include the `Interval` class, which must be properly defined to enable type checking, and the associated `top_node` structure that manages the binary tree's hierarchy.\"\"\"\n        '\\n        ## FOR DEBUGGING ONLY ##\\n        Checks the table to ensure that the invariants are held.\\n        '\n        if self.all_intervals:\n            try:\n                assert self.top_node.all_children() == self.all_intervals\n            except AssertionError as e:\n                print('Error: the tree and the membership set are out of sync!')\n                tivs = set(self.top_node.all_children())\n                print('top_node.all_children() - all_intervals:')\n                try:\n                    pprint\n                except NameError:\n                    from pprint import pprint\n                pprint(tivs - self.all_intervals)\n                print('all_intervals - top_node.all_children():')\n                pprint(self.all_intervals - tivs)\n                raise e\n            for iv in self:\n                assert isinstance(iv, Interval), 'Error: Only Interval objects allowed in IntervalTree: {0}'.format(iv)\n            for iv in self:\n                assert not iv.is_null(), 'Error: Null Interval objects not allowed in IntervalTree: {0}'.format(iv)\n            bound_check = {}\n            for iv in self:\n                if iv.begin in bound_check:\n                    bound_check[iv.begin] += 1\n                else:\n                    bound_check[iv.begin] = 1\n                if iv.end in bound_check:\n                    bound_check[iv.end] += 1\n                else:\n                    bound_check[iv.end] = 1\n            assert set(self.boundary_table.keys()) == set(bound_check.keys()), 'Error: boundary_table is out of sync with the intervals in the tree!'\n            for key, val in self.boundary_table.items():\n                assert bound_check[key] == val, 'Error: boundary_table[{0}] should be {1}, but is {2}!'.format(key, bound_check[key], val)\n            self.top_node.verify(set())\n        else:\n            assert not self.boundary_table, 'Error: boundary table should be empty!'\n            assert self.top_node is None, \"Error: top_node isn't None!\"",
        "docstring": "Checks the internal state of the IntervalTree to ensure that its invariants are maintained. This method validates that the intervals in the tree match those in the membership set, that all members are valid Interval objects, and that no null intervals exist. It also reconstructs the boundary table and verifies its integrity against the intervals present in the tree.\n\nNo parameters are required, and the method does not return any values. Instead, it will raise an AssertionError with a descriptive message if any of the integrity checks fail. Notable variables used within this method include `self.all_intervals`, which contains the set of all intervals in the tree, and `self.boundary_table`, which maps the boundaries of the stored intervals.\n\nDependencies include the `Interval` class, which must be properly defined to enable type checking, and the associated `top_node` structure that manages the binary tree's hierarchy.",
        "signature": "def verify(self):",
        "type": "Method",
        "class_signature": "class IntervalTree(MutableSet):"
      }
    }
  },
  "dependency_dict": {
    "intervaltree/intervaltree.py:IntervalTree:__init__": {
      "intervaltree/node.py": {
        "Node.from_intervals": {
          "code": "    def from_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        return Node.from_sorted_intervals(sorted(intervals))",
          "docstring": ":rtype : Node",
          "signature": "def from_intervals(cls, intervals):",
          "type": "Method",
          "class_signature": "class Node(object):"
        }
      }
    },
    "intervaltree/intervaltree.py:IntervalTree:addi": {
      "intervaltree/interval.py": {
        "Interval.__new__": {
          "code": "    def __new__(cls, begin, end, data=None):\n        return super(Interval, cls).__new__(cls, begin, end, data)",
          "docstring": "",
          "signature": "def __new__(cls, begin, end, data=None):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        }
      },
      "intervaltree/intervaltree.py": {
        "IntervalTree.add": {
          "code": "    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n        if interval.is_null():\n            raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(interval))\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)",
          "docstring": "Adds an interval to the tree, if not already present.\n\nCompletes in O(log n) time.",
          "signature": "def add(self, interval):",
          "type": "Method",
          "class_signature": "class IntervalTree(MutableSet):"
        }
      }
    },
    "intervaltree/intervaltree.py:IntervalTree:verify": {
      "intervaltree/node.py": {
        "Node.all_children": {
          "code": "    def all_children(self):\n        return self.all_children_helper(set())",
          "docstring": "",
          "signature": "def all_children(self):",
          "type": "Method",
          "class_signature": "class Node(object):"
        },
        "Node.verify": {
          "code": "    def verify(self, parents=set()):\n        \"\"\"\n        ## DEBUG ONLY ##\n        Recursively ensures that the invariants of an interval subtree\n        hold.\n        \"\"\"\n        assert isinstance(self.s_center, set)\n        bal = self.balance\n        assert abs(bal) < 2, \"Error: Rotation should have happened, but didn't! \\n{}\".format(self.print_structure(tostring=True))\n        self.refresh_balance()\n        assert bal == self.balance, 'Error: self.balance not set correctly! \\n{}'.format(self.print_structure(tostring=True))\n        assert self.s_center, 'Error: s_center is empty! \\n{}'.format(self.print_structure(tostring=True))\n        for iv in self.s_center:\n            assert hasattr(iv, 'begin')\n            assert hasattr(iv, 'end')\n            assert iv.begin < iv.end\n            assert iv.overlaps(self.x_center)\n            for parent in sorted(parents):\n                assert not iv.contains_point(parent), 'Error: Overlaps ancestor ({})! \\n{}\\n\\n{}'.format(parent, iv, self.print_structure(tostring=True))\n        if self[0]:\n            assert self[0].x_center < self.x_center, 'Error: Out-of-order left child! {}'.format(self.x_center)\n            self[0].verify(parents.union([self.x_center]))\n        if self[1]:\n            assert self[1].x_center > self.x_center, 'Error: Out-of-order right child! {}'.format(self.x_center)\n            self[1].verify(parents.union([self.x_center]))",
          "docstring": "## DEBUG ONLY ##\nRecursively ensures that the invariants of an interval subtree\nhold.",
          "signature": "def verify(self, parents=set()):",
          "type": "Method",
          "class_signature": "class Node(object):"
        }
      },
      "intervaltree/interval.py": {
        "Interval.is_null": {
          "code": "    def is_null(self):\n        \"\"\"\n        Whether this equals the null interval.\n        :return: True if end <= begin else False\n        :rtype: bool\n        \"\"\"\n        return self.begin >= self.end",
          "docstring": "Whether this equals the null interval.\n:return: True if end <= begin else False\n:rtype: bool",
          "signature": "def is_null(self):",
          "type": "Method",
          "class_signature": "class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):"
        }
      },
      "intervaltree/intervaltree.py": {
        "IntervalTree.__iter__": {
          "code": "    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()",
          "docstring": "Returns an iterator over all the intervals in the tree.\n\nCompletes in O(1) time.\n:rtype: collections.Iterable[Interval]",
          "signature": "def __iter__(self):",
          "type": "Method",
          "class_signature": "class IntervalTree(MutableSet):"
        }
      }
    },
    "intervaltree/node.py:Node:add": {
      "intervaltree/node.py": {
        "Node.center_hit": {
          "code": "    def center_hit(self, interval):\n        \"\"\"Returns whether interval overlaps self.x_center.\"\"\"\n        return interval.contains_point(self.x_center)",
          "docstring": "Returns whether interval overlaps self.x_center.",
          "signature": "def center_hit(self, interval):",
          "type": "Method",
          "class_signature": "class Node(object):"
        }
      }
    },
    "intervaltree/node.py:Node:prune": {}
  },
  "call_tree": {
    "test/issues/issue67_test.py:test_interval_insertion_67": {
      "intervaltree/intervaltree.py:IntervalTree:__init__": {
        "intervaltree/node.py:Node:from_intervals": {}
      },
      "intervaltree/intervaltree.py:IntervalTree:addi": {
        "intervaltree/interval.py:Interval:__new__": {},
        "intervaltree/intervaltree.py:IntervalTree:add": {
          "intervaltree/intervaltree.py:IntervalTree:__contains__": {
            "intervaltree/interval.py:Interval:__hash__": {}
          },
          "intervaltree/interval.py:Interval:is_null": {},
          "intervaltree/node.py:Node:from_interval": {
            "intervaltree/node.py:Node:__init__": {
              "intervaltree/interval.py:Interval:__hash__": {},
              "intervaltree/node.py:Node:rotate": {
                "intervaltree/node.py:Node:refresh_balance": {}
              }
            }
          },
          "intervaltree/interval.py:Interval:__hash__": {},
          "intervaltree/intervaltree.py:IntervalTree:_add_boundaries": {},
          "intervaltree/node.py:Node:add": {
            "intervaltree/node.py:Node:center_hit": {
              "intervaltree/interval.py:Interval:contains_point": {}
            },
            "intervaltree/node.py:Node:hit_branch": {},
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:from_interval": {
              "intervaltree/node.py:Node:__init__": {
                "intervaltree/interval.py:Interval:__hash__": {},
                "intervaltree/node.py:Node:rotate": {
                  "intervaltree/node.py:Node:refresh_balance": {}
                }
              }
            },
            "intervaltree/node.py:Node:__setitem__": {},
            "intervaltree/node.py:Node:refresh_balance": {},
            "intervaltree/node.py:Node:add": {
              "[ignored_or_cut_off]": "..."
            },
            "intervaltree/node.py:Node:rotate": {
              "intervaltree/node.py:Node:refresh_balance": {},
              "intervaltree/node.py:Node:__getitem__": {},
              "intervaltree/node.py:Node:srotate": {
                "intervaltree/node.py:Node:__getitem__": {},
                "intervaltree/node.py:Node:__setitem__": {},
                "intervaltree/node.py:Node:rotate": {
                  "[ignored_or_cut_off]": "..."
                },
                "intervaltree/node.py:Node:center_hit": {
                  "intervaltree/interval.py:Interval:contains_point": {}
                },
                "intervaltree/node.py:Node:refresh_balance": {}
              }
            }
          }
        }
      },
      "intervaltree/intervaltree.py:IntervalTree:verify": {
        "intervaltree/interval.py:Interval:Interval": {},
        "intervaltree/node.py:Node:all_children": {
          "intervaltree/node.py:Node:all_children_helper": {
            "intervaltree/node.py:Node:__getitem__": {},
            "intervaltree/node.py:Node:all_children_helper": {
              "[ignored_or_cut_off]": "..."
            }
          }
        },
        "intervaltree/intervaltree.py:IntervalTree:__iter__": {},
        "intervaltree/interval.py:Interval:is_null": {},
        "intervaltree/node.py:Node:verify": {
          "intervaltree/node.py:Node:refresh_balance": {},
          "intervaltree/interval.py:Interval:overlaps": {
            "intervaltree/interval.py:Interval:contains_point": {}
          },
          "intervaltree/node.py:Node:__getitem__": {},
          "intervaltree/node.py:Node:verify": {
            "[ignored_or_cut_off]": "..."
          }
        }
      }
    },
    "intervaltree/node.py:Node:pop_greatest_child": {
      "intervaltree/node.py:Node:__getitem__": {},
      "intervaltree/node.py:Node:pop_greatest_child": {
        "[ignored_or_cut_off]": "..."
      },
      "intervaltree/node.py:Node:__setitem__": {},
      "intervaltree/interval.py:Interval:contains_point": {},
      "intervaltree/interval.py:Interval:__hash__": {},
      "intervaltree/node.py:Node:add": {
        "intervaltree/node.py:Node:center_hit": {
          "intervaltree/interval.py:Interval:contains_point": {}
        },
        "intervaltree/interval.py:Interval:__hash__": {}
      },
      "intervaltree/node.py:Node:prune": {
        "intervaltree/node.py:Node:__getitem__": {}
      }
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue67_test/intervaltree-issue67_test/test/intervaltree_methods/setlike_test.py:test_update": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue67_test/intervaltree-issue67_test/test/intervaltree_methods/setlike_test.py:test_difference": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue67_test/intervaltree-issue67_test/test/intervaltree_methods/setlike_test.py:test_difference_operator": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue67_test/intervaltree-issue67_test/test/optimality/optimality_test_matrix.py:OptimalityTestMatrix:test_prebuilt": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/intervaltree-image-issue67_test/intervaltree-issue67_test/modified_testcases/optimality/optimality_test_matrix.py:OptimalityTestMatrix:test_prebuilt": {
      "intervaltree/intervaltree.py:IntervalTree:IntervalTree": {}
    }
  },
  "PRD": "# PROJECT NAME: intervaltree-issue67_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 intervaltree/\n    \u251c\u2500\u2500 interval.py\n    \u2502   \u251c\u2500\u2500 Interval.__hash__\n    \u2502   \u2514\u2500\u2500 Interval.contains_point\n    \u251c\u2500\u2500 intervaltree.py\n    \u2502   \u251c\u2500\u2500 IntervalTree.IntervalTree\n    \u2502   \u251c\u2500\u2500 IntervalTree.__init__\n    \u2502   \u251c\u2500\u2500 IntervalTree.addi\n    \u2502   \u2514\u2500\u2500 IntervalTree.verify\n    \u2514\u2500\u2500 node.py\n        \u251c\u2500\u2500 Node.__getitem__\n        \u251c\u2500\u2500 Node.__setitem__\n        \u251c\u2500\u2500 Node.add\n        \u251c\u2500\u2500 Node.pop_greatest_child\n        \u2514\u2500\u2500 Node.prune\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module provides functionality for handling and managing interval-based data structures using a mutable, self-balancing interval tree. It supports efficient querying of intervals based on specific points, range overlaps, or complete range envelopment, enabling versatile data manipulation and retrieval. By offering robust insertion and validation of intervals, the module ensures the structural integrity and accuracy of the tree, even in complex scenarios involving edge cases. This solves critical problems for developers working with interval-based datasets, such as memory management, query optimization, and consistency in operations, making it a reliable tool for applications requiring dynamic interval computations.\n\n## FILE 1: intervaltree/interval.py\n\n- CLASS METHOD: Interval.contains_point\n  - CLASS SIGNATURE: class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):\n  - SIGNATURE: def contains_point(self, p):\n  - DOCSTRING: \n```python\n\"\"\"\nDetermines if a given point `p` lies within the bounds of the Interval.\n\nParameters:\n- `p`: A point (of any comparable type) to be checked for containment in the Interval.\n\nReturns:\n- `True` if `p` is greater than or equal to `self.begin` and less than `self.end`, indicating that `p` is within the interval range; otherwise returns `False`.\n\nThis method relies on the instance attributes `begin` and `end`, which define the bounds of the Interval. The `begin` attribute marks the inclusive lower boundary, and the `end` attribute marks the exclusive upper boundary of the interval. This method does not raise exceptions and is designed to be simple and efficient, allowing straightforward point containment checks against the interval.\n\"\"\"\n```\n\n- CLASS METHOD: Interval.__hash__\n  - CLASS SIGNATURE: class Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):\n  - SIGNATURE: def __hash__(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a hash value for the Interval instance based solely on its `begin` and `end` attributes. This is essential for using Interval instances as keys in dictionaries or sets, ensuring that instances with the same start and end points yield the same hash. The hash function relies on the immutable nature of the `begin` and `end` values to maintain consistency. No parameters are required for this method, and it returns a hash value, which is a Number, that uniquely identifies the Interval based on its start and end points.\n\"\"\"\n```\n\n## FILE 2: intervaltree/node.py\n\n- CLASS METHOD: Node.__getitem__\n  - CLASS SIGNATURE: class Node(object):\n  - SIGNATURE: def __getitem__(self, index):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the left child node if the input index is equivalent to False (0), or the right child node if the input index is True (1). This method allows for easy access to the child nodes of the current Node in the interval tree. The `index` parameter is expected to be an integer where `0` indicates the left child and `1` indicates the right child. The return value is the corresponding child Node, which could be `None` if that child does not exist. This method is integral to the tree's operations, facilitating navigation through child nodes during interval addition, removal, and search processes.\n\"\"\"\n```\n\n- CLASS METHOD: Node.prune\n  - CLASS SIGNATURE: class Node(object):\n  - SIGNATURE: def prune(self):\n  - DOCSTRING: \n```python\n\"\"\"\nPrune the subtree rooted at the current node if its `s_center` is empty. This function \nchecks the child branches of the node and performs adjustments to ensure no empty \nsubtrees remain in the interval tree. If one side is empty, the other side becomes the \nnew root. If both children are present, it replaces the current root with the greatest \npredecessor from the left branch and rebalances the resulting tree.\n\nReturns:\n    Node: A new subtree without any empty `s_center` nodes.\n\nSide Effects:\n    Modifies the current node by rearranging its children and potentially rebalancing \n    the tree structure.\n\nThis method interacts with the `pop_greatest_child()` method to find the greatest \npredecessor and ensures the tree remains balanced through the use of `refresh_balance()` \nand `rotate()` methods defined in the Node class.\n\"\"\"\n```\n\n- CLASS METHOD: Node.pop_greatest_child\n  - CLASS SIGNATURE: class Node(object):\n  - SIGNATURE: def pop_greatest_child(self):\n  - DOCSTRING: \n```python\n\"\"\"\nHandles the removal of the greatest child node when pruning a node with both left and right branches in the interval tree. It returns a tuple containing the greatest child node and the updated subtree after removing the greatest child, balancing, and moving any overlapping intervals into the greatest child.\n\nAssumes that the node's `s_center` set is not empty, meaning it contains intervals. The method checks if there is a right child; if not, it processes the current node as the greatest child, adjusting values to minimize overlaps. If there is a right child, it recursively calls itself on that branch to find and remove the greatest child.\n\nReturns:\n    Tuple[Node, Node]: A tuple where the first element is the node of the greatest child and the second element is the subtree adjusted after removal and balancing.\n\nNote:\n    The method relies on the `s_center` attribute, which stores the set of intervals associated with the node, and the child node management using `left_node` and `right_node` attributes, which specify the left and right children of the node, respectively.\n\"\"\"\n```\n\n- CLASS METHOD: Node.__setitem__\n  - CLASS SIGNATURE: class Node(object):\n  - SIGNATURE: def __setitem__(self, key, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the left or right child of the node based on the given key.\n\nParameters:\n- key (int): An integer indicating which child to set; 0 for the left child, 1 for the right child.\n- value (Node): The Node instance to assign as the specified child.\n\nThis method directly modifies the `left_node` or `right_node` attributes of the Node instance, allowing the tree structure to be built or updated. It is part of the internal operations of an interval tree where maintaining parent-child relationships is essential for tree balancing and interval management.\n\"\"\"\n```\n\n- CLASS METHOD: Node.add\n  - CLASS SIGNATURE: class Node(object):\n  - SIGNATURE: def add(self, interval):\n  - DOCSTRING: \n```python\n\"\"\"\nAdds an interval to the subtree represented by the Node and rebalances the tree if necessary.\n\nParameters:\n- interval: An object representing an interval that needs to be added to the Node. This interval should have `begin` and `end` properties for the method to determine overlaps and correct placement within the tree.\n\nReturns:\n- Node: The current instance of the Node after attempting to add the interval and performing necessary rotations for balancing the tree.\n\nSide Effects:\n- Modifies the Node's internal structures, specifically adjusting the `s_center`, `left_node`, or `right_node` as needed for proper organization of intervals within the interval tree.\n\nDependencies:\n- The method relies on `center_hit` to check if the interval overlaps with the current Node's center and `hit_branch` to determine which child (left or right) to traverse based on the placement of the interval.\n- It also uses the `Node.from_interval` class method to create a new Node when a child Node does not already exist in the indicated branch.\n- The method calls `refresh_balance` to update the Node's balance after modifications and `rotate` to ensure the tree remains balanced after adding new intervals.\n\"\"\"\n```\n\n## FILE 3: intervaltree/intervaltree.py\n\n- CLASS METHOD: IntervalTree.verify\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def verify(self):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks the internal state of the IntervalTree to ensure that its invariants are maintained. This method validates that the intervals in the tree match those in the membership set, that all members are valid Interval objects, and that no null intervals exist. It also reconstructs the boundary table and verifies its integrity against the intervals present in the tree.\n\nNo parameters are required, and the method does not return any values. Instead, it will raise an AssertionError with a descriptive message if any of the integrity checks fail. Notable variables used within this method include `self.all_intervals`, which contains the set of all intervals in the tree, and `self.boundary_table`, which maps the boundaries of the stored intervals.\n\nDependencies include the `Interval` class, which must be properly defined to enable type checking, and the associated `top_node` structure that manages the binary tree's hierarchy.\n\"\"\"\n```\n\n- CLASS METHOD: IntervalTree.addi\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def addi(self, begin, end, data=None):\n  - DOCSTRING: \n```python\n\"\"\"\nShortcut for adding a new interval to the IntervalTree, represented by the specified start and end points.\n\nParameters:\n- begin (float): The start point of the interval to be added.\n- end (float): The end point of the interval to be added.\n- data (optional): Optional data associated with the interval.\n\nReturns:\n- The method returns the result of calling the add() method with a new Interval object created from the provided parameters.\n\nComplexity:\n- Completes in O(log n) time, where n is the number of intervals in the tree.\n\nSide Effects:\n- If the interval represented by (begin, end) already exists in the tree, this method will not modify the tree. If the interval is valid and not a null interval (checked using the is_null method in the Interval class), it will be added to the tree's collection of intervals.\n\"\"\"\n```\n\n- CLASS METHOD: IntervalTree.__init__\n  - CLASS SIGNATURE: class IntervalTree(MutableSet):\n  - SIGNATURE: def __init__(self, intervals=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an `IntervalTree` instance, optionally populated with a set of intervals. The intervals must be valid, i.e., they cannot be null. If provided, the method will check each interval for validity and construct the tree efficiently.\n\nParameters:\n- `intervals` (iterable, optional): An optional iterable containing `Interval` objects to initialize the tree. If None, an empty tree is created.\n\nRaises:\n- `ValueError`: If any `Interval` in the provided set is null.\n\nAttributes:\n- `self.all_intervals`: A set of all valid intervals contained in the tree.\n- `self.top_node`: The root node of the interval tree, constructed from the provided intervals using `Node.from_intervals()`.\n- `self.boundary_table`: A `SortedDict` managing the boundaries of the intervals for efficient lookup and operations.\n\nComplexity:\n- The initialization completes in O(n * log n) time, where n is the number of intervals provided.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "intervaltree/interval.py": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nInterval class\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom numbers import Number\nfrom collections import namedtuple\n\nclass Interval(namedtuple('IntervalBase', ['begin', 'end', 'data'])):\n    __slots__ = ()\n\n    def __new__(cls, begin, end, data=None):\n        return super(Interval, cls).__new__(cls, begin, end, data)\n\n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Whether the interval overlaps the given point, range or Interval.\n        :param begin: beginning point of the range, or the point, or an Interval\n        :param end: end point of the range. Optional if not testing ranges.\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            return begin < self.end and end > self.begin\n        try:\n            return self.overlaps(begin.begin, begin.end)\n        except:\n            return self.contains_point(begin)\n\n    def overlap_size(self, begin, end=None):\n        \"\"\"\n        Return the overlap size between two intervals or a point\n        :param begin: beginning point of the range, or the point, or an Interval\n        :param end: end point of the range. Optional if not testing ranges.\n        :return: Return the overlap size, None if not overlap is found\n        :rtype: depends on the given input (e.g., int will be returned for int interval and timedelta for\n        datetime intervals)\n        \"\"\"\n        overlaps = self.overlaps(begin, end)\n        if not overlaps:\n            return 0\n        if end is not None:\n            i0 = max(self.begin, begin)\n            i1 = min(self.end, end)\n            return i1 - i0\n        i0 = max(self.begin, begin.begin)\n        i1 = min(self.end, begin.end)\n        return i1 - i0\n\n    def range_matches(self, other):\n        \"\"\"\n        Whether the begins equal and the ends equal. Compare __eq__().\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.begin == other.begin and self.end == other.end\n\n    def contains_interval(self, other):\n        \"\"\"\n        Whether other is contained in this Interval.\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.begin <= other.begin and self.end >= other.end\n\n    def distance_to(self, other):\n        \"\"\"\n        Returns the size of the gap between intervals, or 0 \n        if they touch or overlap.\n        :param other: Interval or point\n        :return: distance\n        :rtype: Number\n        \"\"\"\n        if self.overlaps(other):\n            return 0\n        try:\n            if self.begin < other.begin:\n                return other.begin - self.end\n            else:\n                return self.begin - other.end\n        except:\n            if self.end <= other:\n                return other - self.end\n            else:\n                return self.begin - other\n\n    def is_null(self):\n        \"\"\"\n        Whether this equals the null interval.\n        :return: True if end <= begin else False\n        :rtype: bool\n        \"\"\"\n        return self.begin >= self.end\n\n    def length(self):\n        \"\"\"\n        The distance covered by this Interval.\n        :return: length\n        :type: Number\n        \"\"\"\n        if self.is_null():\n            return 0\n        return self.end - self.begin\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether the begins equal, the ends equal, and the data fields\n        equal. Compare range_matches().\n        :param other: Interval\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.begin == other.begin and self.end == other.end and (self.data == other.data)\n\n    def __cmp__(self, other):\n        \"\"\"\n        Tells whether other sorts before, after or equal to this\n        Interval.\n\n        Sorting is by begins, then by ends, then by data fields.\n\n        If data fields are not both sortable types, data fields are\n        compared alphabetically by type name.\n        :param other: Interval\n        :return: -1, 0, 1\n        :rtype: int\n        \"\"\"\n        s = self[0:2]\n        try:\n            o = other[0:2]\n        except:\n            o = (other,)\n        if s != o:\n            return -1 if s < o else 1\n        try:\n            if self.data == other.data:\n                return 0\n            return -1 if self.data < other.data else 1\n        except TypeError:\n            s = type(self.data).__name__\n            o = type(other.data).__name__\n            if s == o:\n                return 0\n            return -1 if s < o else 1\n\n    def __lt__(self, other):\n        \"\"\"\n        Less than operator. Parrots __cmp__()\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.__cmp__(other) < 0\n\n    def __gt__(self, other):\n        \"\"\"\n        Greater than operator. Parrots __cmp__()\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        return self.__cmp__(other) > 0\n\n    def _raise_if_null(self, other):\n        \"\"\"\n        :raises ValueError: if either self or other is a null Interval\n        \"\"\"\n        if self.is_null():\n            raise ValueError('Cannot compare null Intervals!')\n        if hasattr(other, 'is_null') and other.is_null():\n            raise ValueError('Cannot compare null Intervals!')\n\n    def lt(self, other):\n        \"\"\"\n        Strictly less than. Returns True if no part of this Interval\n        extends higher than or into other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.end <= getattr(other, 'begin', other)\n\n    def le(self, other):\n        \"\"\"\n        Less than or overlaps. Returns True if no part of this Interval\n        extends higher than other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.end <= getattr(other, 'end', other)\n\n    def gt(self, other):\n        \"\"\"\n        Strictly greater than. Returns True if no part of this Interval\n        extends lower than or into other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        if hasattr(other, 'end'):\n            return self.begin >= other.end\n        else:\n            return self.begin > other\n\n    def ge(self, other):\n        \"\"\"\n        Greater than or overlaps. Returns True if no part of this Interval\n        extends lower than other.\n        :raises ValueError: if either self or other is a null Interval\n        :param other: Interval or point\n        :return: True or False\n        :rtype: bool\n        \"\"\"\n        self._raise_if_null(other)\n        return self.begin >= getattr(other, 'begin', other)\n\n    def _get_fields(self):\n        \"\"\"\n        Used by str, unicode, repr and __reduce__.\n\n        Returns only the fields necessary to reconstruct the Interval.\n        :return: reconstruction info\n        :rtype: tuple\n        \"\"\"\n        if self.data is not None:\n            return (self.begin, self.end, self.data)\n        else:\n            return (self.begin, self.end)\n\n    def __repr__(self):\n        \"\"\"\n        Executable string representation of this Interval.\n        :return: string representation\n        :rtype: str\n        \"\"\"\n        if isinstance(self.begin, Number):\n            s_begin = str(self.begin)\n            s_end = str(self.end)\n        else:\n            s_begin = repr(self.begin)\n            s_end = repr(self.end)\n        if self.data is None:\n            return 'Interval({0}, {1})'.format(s_begin, s_end)\n        else:\n            return 'Interval({0}, {1}, {2})'.format(s_begin, s_end, repr(self.data))\n    __str__ = __repr__\n\n    def copy(self):\n        \"\"\"\n        Shallow copy.\n        :return: copy of self\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin, self.end, self.data)\n\n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :return: pickle data\n        :rtype: tuple\n        \"\"\"\n        return (Interval, self._get_fields())",
    "intervaltree/node.py": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic: internal tree nodes.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom operator import attrgetter\nfrom math import floor, log\n\ndef l2(num):\n    \"\"\"\n    log base 2\n    :rtype real\n    \"\"\"\n    return log(num, 2)\n\nclass Node(object):\n    __slots__ = ('x_center', 's_center', 'left_node', 'right_node', 'depth', 'balance')\n\n    def __init__(self, x_center=None, s_center=set(), left_node=None, right_node=None):\n        self.x_center = x_center\n        self.s_center = set(s_center)\n        self.left_node = left_node\n        self.right_node = right_node\n        self.depth = 0\n        self.balance = 0\n        self.rotate()\n\n    @classmethod\n    def from_interval(cls, interval):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        center = interval.begin\n        return Node(center, [interval])\n\n    @classmethod\n    def from_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        return Node.from_sorted_intervals(sorted(intervals))\n\n    @classmethod\n    def from_sorted_intervals(cls, intervals):\n        \"\"\"\n        :rtype : Node\n        \"\"\"\n        if not intervals:\n            return None\n        node = Node()\n        node = node.init_from_sorted(intervals)\n        return node\n\n    def init_from_sorted(self, intervals):\n        center_iv = intervals[len(intervals) // 2]\n        self.x_center = center_iv.begin\n        self.s_center = set()\n        s_left = []\n        s_right = []\n        for k in intervals:\n            if k.end <= self.x_center:\n                s_left.append(k)\n            elif k.begin > self.x_center:\n                s_right.append(k)\n            else:\n                self.s_center.add(k)\n        self.left_node = Node.from_sorted_intervals(s_left)\n        self.right_node = Node.from_sorted_intervals(s_right)\n        return self.rotate()\n\n    def center_hit(self, interval):\n        \"\"\"Returns whether interval overlaps self.x_center.\"\"\"\n        return interval.contains_point(self.x_center)\n\n    def hit_branch(self, interval):\n        \"\"\"\n        Assuming not center_hit(interval), return which branch\n        (left=0, right=1) interval is in.\n        \"\"\"\n        return interval.begin > self.x_center\n\n    def refresh_balance(self):\n        \"\"\"\n        Recalculate self.balance and self.depth based on child node values.\n        \"\"\"\n        left_depth = self.left_node.depth if self.left_node else 0\n        right_depth = self.right_node.depth if self.right_node else 0\n        self.depth = 1 + max(left_depth, right_depth)\n        self.balance = right_depth - left_depth\n\n    def compute_depth(self):\n        \"\"\"\n        Recursively computes true depth of the subtree. Should only\n        be needed for debugging. Unless something is wrong, the\n        depth field should reflect the correct depth of the subtree.\n        \"\"\"\n        left_depth = self.left_node.compute_depth() if self.left_node else 0\n        right_depth = self.right_node.compute_depth() if self.right_node else 0\n        return 1 + max(left_depth, right_depth)\n\n    def rotate(self):\n        \"\"\"\n        Does rotating, if necessary, to balance this node, and\n        returns the new top node.\n        \"\"\"\n        self.refresh_balance()\n        if abs(self.balance) < 2:\n            return self\n        my_heavy = self.balance > 0\n        child_heavy = self[my_heavy].balance > 0\n        if my_heavy == child_heavy or self[my_heavy].balance == 0:\n            return self.srotate()\n        else:\n            return self.drotate()\n\n    def srotate(self):\n        \"\"\"Single rotation. Assumes that balance is +-2.\"\"\"\n        heavy = self.balance > 0\n        light = not heavy\n        save = self[heavy]\n        self[heavy] = save[light]\n        save[light] = self.rotate()\n        promotees = [iv for iv in save[light].s_center if save.center_hit(iv)]\n        if promotees:\n            for iv in promotees:\n                save[light] = save[light].remove(iv)\n            save.s_center.update(promotees)\n        save.refresh_balance()\n        return save\n\n    def drotate(self):\n        my_heavy = self.balance > 0\n        self[my_heavy] = self[my_heavy].srotate()\n        self.refresh_balance()\n        result = self.srotate()\n        return result\n\n    def remove(self, interval):\n        \"\"\"\n        Returns self after removing the interval and balancing.\n\n        If interval is not present, raise ValueError.\n        \"\"\"\n        done = []\n        return self.remove_interval_helper(interval, done, should_raise_error=True)\n\n    def discard(self, interval):\n        \"\"\"\n        Returns self after removing interval and balancing.\n\n        If interval is not present, do nothing.\n        \"\"\"\n        done = []\n        return self.remove_interval_helper(interval, done, should_raise_error=False)\n\n    def remove_interval_helper(self, interval, done, should_raise_error):\n        \"\"\"\n        Returns self after removing interval and balancing.\n        If interval doesn't exist, raise ValueError.\n\n        This method may set done to [1] to tell all callers that\n        rebalancing has completed.\n\n        See Eternally Confuzzled's jsw_remove_r function (lines 1-32)\n        in his AVL tree article for reference.\n        \"\"\"\n        if self.center_hit(interval):\n            if not should_raise_error and interval not in self.s_center:\n                done.append(1)\n                return self\n            try:\n                self.s_center.remove(interval)\n            except:\n                self.print_structure()\n                raise KeyError(interval)\n            if self.s_center:\n                done.append(1)\n                return self\n            return self.prune()\n        else:\n            direction = self.hit_branch(interval)\n            if not self[direction]:\n                if should_raise_error:\n                    raise ValueError\n                done.append(1)\n                return self\n            self[direction] = self[direction].remove_interval_helper(interval, done, should_raise_error)\n            if not done:\n                return self.rotate()\n            return self\n\n    def search_overlap(self, point_list):\n        \"\"\"\n        Returns all intervals that overlap the point_list.\n        \"\"\"\n        result = set()\n        for j in point_list:\n            self.search_point(j, result)\n        return result\n\n    def search_point(self, point, result):\n        \"\"\"\n        Returns all intervals that contain point.\n        \"\"\"\n        for k in self.s_center:\n            if k.begin <= point < k.end:\n                result.add(k)\n        if point < self.x_center and self[0]:\n            return self[0].search_point(point, result)\n        elif point > self.x_center and self[1]:\n            return self[1].search_point(point, result)\n        return result\n\n    def contains_point(self, p):\n        \"\"\"\n        Returns whether this node or a child overlaps p.\n        \"\"\"\n        for iv in self.s_center:\n            if iv.contains_point(p):\n                return True\n        branch = self[p > self.x_center]\n        return branch and branch.contains_point(p)\n\n    def all_children(self):\n        return self.all_children_helper(set())\n\n    def all_children_helper(self, result):\n        result.update(self.s_center)\n        if self[0]:\n            self[0].all_children_helper(result)\n        if self[1]:\n            self[1].all_children_helper(result)\n        return result\n\n    def verify(self, parents=set()):\n        \"\"\"\n        ## DEBUG ONLY ##\n        Recursively ensures that the invariants of an interval subtree\n        hold.\n        \"\"\"\n        assert isinstance(self.s_center, set)\n        bal = self.balance\n        assert abs(bal) < 2, \"Error: Rotation should have happened, but didn't! \\n{}\".format(self.print_structure(tostring=True))\n        self.refresh_balance()\n        assert bal == self.balance, 'Error: self.balance not set correctly! \\n{}'.format(self.print_structure(tostring=True))\n        assert self.s_center, 'Error: s_center is empty! \\n{}'.format(self.print_structure(tostring=True))\n        for iv in self.s_center:\n            assert hasattr(iv, 'begin')\n            assert hasattr(iv, 'end')\n            assert iv.begin < iv.end\n            assert iv.overlaps(self.x_center)\n            for parent in sorted(parents):\n                assert not iv.contains_point(parent), 'Error: Overlaps ancestor ({})! \\n{}\\n\\n{}'.format(parent, iv, self.print_structure(tostring=True))\n        if self[0]:\n            assert self[0].x_center < self.x_center, 'Error: Out-of-order left child! {}'.format(self.x_center)\n            self[0].verify(parents.union([self.x_center]))\n        if self[1]:\n            assert self[1].x_center > self.x_center, 'Error: Out-of-order right child! {}'.format(self.x_center)\n            self[1].verify(parents.union([self.x_center]))\n\n    def __str__(self):\n        \"\"\"\n        Shows info about this node.\n\n        Since Nodes are internal data structures not revealed to the\n        user, I'm not bothering to make this copy-paste-executable as a\n        constructor.\n        \"\"\"\n        return 'Node<{0}, depth={1}, balance={2}>'.format(self.x_center, self.depth, self.balance)\n\n    def count_nodes(self):\n        \"\"\"\n        Count the number of Nodes in this subtree.\n        :rtype: int\n        \"\"\"\n        count = 1\n        if self.left_node:\n            count += self.left_node.count_nodes()\n        if self.right_node:\n            count += self.right_node.count_nodes()\n        return count\n\n    def depth_score(self, n, m):\n        \"\"\"\n        Calculates flaws in balancing the tree.\n        :param n: size of tree\n        :param m: number of Nodes in tree\n        :rtype: real\n        \"\"\"\n        if n == 0:\n            return 0.0\n        dopt = 1 + int(floor(l2(m)))\n        f = 1 / float(1 + n - dopt)\n        return f * self.depth_score_helper(1, dopt)\n\n    def depth_score_helper(self, d, dopt):\n        \"\"\"\n        Gets a weighted count of the number of Intervals deeper than dopt.\n        :param d: current depth, starting from 0\n        :param dopt: optimal maximum depth of a leaf Node\n        :rtype: real\n        \"\"\"\n        di = d - dopt\n        if di > 0:\n            count = di * len(self.s_center)\n        else:\n            count = 0\n        if self.right_node:\n            count += self.right_node.depth_score_helper(d + 1, dopt)\n        if self.left_node:\n            count += self.left_node.depth_score_helper(d + 1, dopt)\n        return count\n\n    def print_structure(self, indent=0, tostring=False):\n        \"\"\"\n        For debugging.\n        \"\"\"\n        nl = '\\n'\n        sp = indent * '    '\n        rlist = [str(self) + nl]\n        if self.s_center:\n            for iv in sorted(self.s_center):\n                rlist.append(sp + ' ' + repr(iv) + nl)\n        if self.left_node:\n            rlist.append(sp + '<:  ')\n            rlist.append(self.left_node.print_structure(indent + 1, True))\n        if self.right_node:\n            rlist.append(sp + '>:  ')\n            rlist.append(self.right_node.print_structure(indent + 1, True))\n        result = ''.join(rlist)\n        if tostring:\n            return result\n        else:\n            print(result)",
    "intervaltree/intervaltree.py": "\"\"\"\nintervaltree: A mutable, self-balancing interval tree for Python 2 and 3.\nQueries may be by point, by range overlap, or by range envelopment.\n\nCore logic.\n\nCopyright 2013-2018 Chaim Leib Halbert\nModifications Copyright 2014 Konstantin Tretyakov\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom .interval import Interval\nfrom .node import Node\nfrom numbers import Number\nfrom sortedcontainers import SortedDict\nfrom copy import copy\nfrom warnings import warn\ntry:\n    from collections.abc import MutableSet\nexcept ImportError:\n    from collections import MutableSet\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\nclass IntervalTree(MutableSet):\n    \"\"\"\n    A binary lookup tree of intervals.\n    The intervals contained in the tree are represented using ``Interval(a, b, data)`` objects.\n    Each such object represents a half-open interval ``[a, b)`` with optional data.\n\n    Examples:\n    ---------\n\n    Initialize a blank tree::\n\n        >>> tree = IntervalTree()\n        >>> tree\n        IntervalTree()\n\n    Initialize a tree from an iterable set of Intervals in O(n * log n)::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-20.0, -10.0)])\n        >>> tree\n        IntervalTree([Interval(-20.0, -10.0), Interval(-10, 10)])\n        >>> len(tree)\n        2\n\n    Note that this is a set, i.e. repeated intervals are ignored. However,\n    Intervals with different data fields are regarded as different::\n\n        >>> tree = IntervalTree([Interval(-10, 10), Interval(-10, 10), Interval(-10, 10, \"x\")])\n        >>> tree\n        IntervalTree([Interval(-10, 10), Interval(-10, 10, 'x')])\n        >>> len(tree)\n        2\n\n    Insertions::\n        >>> tree = IntervalTree()\n        >>> tree[0:1] = \"data\"\n        >>> tree.add(Interval(10, 20))\n        >>> tree.addi(19.9, 20)\n        >>> tree\n        IntervalTree([Interval(0, 1, 'data'), Interval(10, 20), Interval(19.9, 20)])\n        >>> tree.update([Interval(19.9, 20.1), Interval(20.1, 30)])\n        >>> len(tree)\n        5\n\n        Inserting the same Interval twice does nothing::\n            >>> tree = IntervalTree()\n            >>> tree[-10:20] = \"arbitrary data\"\n            >>> tree[-10:20] = None  # Note that this is also an insertion\n            >>> tree\n            IntervalTree([Interval(-10, 20), Interval(-10, 20, 'arbitrary data')])\n            >>> tree[-10:20] = None  # This won't change anything\n            >>> tree[-10:20] = \"arbitrary data\" # Neither will this\n            >>> len(tree)\n            2\n\n    Deletions::\n        >>> tree = IntervalTree(Interval(b, e) for b, e in [(-10, 10), (-20, -10), (10, 20)])\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(-10, 10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n        >>> tree.remove(Interval(-10, 10))\n        Traceback (most recent call last):\n        ...\n        ValueError\n        >>> tree.discard(Interval(-10, 10))  # Same as remove, but no exception on failure\n        >>> tree\n        IntervalTree([Interval(-20, -10), Interval(10, 20)])\n\n    Delete intervals, overlapping a given point::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.1)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1)])\n\n    Delete intervals, overlapping an interval::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(0, 0.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.7, 1.8)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.6)  # Null interval does nothing\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_overlap(1.6, 1.5)  # Ditto\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n\n    Delete intervals, enveloped in the range::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.0, 1.5)\n        >>> tree\n        IntervalTree([Interval(-1.1, 1.1), Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(-1.1, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.5)\n        >>> tree\n        IntervalTree([Interval(0.5, 1.7)])\n        >>> tree.remove_envelop(0.5, 1.7)\n        >>> tree\n        IntervalTree()\n\n    Point queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[-1.1]   == set([Interval(-1.1, 1.1)])\n        >>> assert tree.at(1.1) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])   # Same as tree[1.1]\n        >>> assert tree.at(1.5) == set([Interval(0.5, 1.7)])                        # Same as tree[1.5]\n\n    Interval overlap queries\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.overlap(1.7, 1.8) == set()\n        >>> assert tree.overlap(1.5, 1.8) == set([Interval(0.5, 1.7)])\n        >>> assert tree[1.5:1.8] == set([Interval(0.5, 1.7)])                       # same as previous\n        >>> assert tree.overlap(1.1, 1.8) == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree[1.1:1.8] == set([Interval(-0.5, 1.5), Interval(0.5, 1.7)])  # same as previous\n\n    Interval envelop queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> assert tree.envelop(-0.5, 0.5) == set()\n        >>> assert tree.envelop(-0.5, 1.5) == set([Interval(-0.5, 1.5)])\n\n    Membership queries::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> Interval(-0.5, 0.5) in tree\n        False\n        >>> Interval(-1.1, 1.1) in tree\n        True\n        >>> Interval(-1.1, 1.1, \"x\") in tree\n        False\n        >>> tree.overlaps(-1.1)\n        True\n        >>> tree.overlaps(1.7)\n        False\n        >>> tree.overlaps(1.7, 1.8)\n        False\n        >>> tree.overlaps(-1.2, -1.1)\n        False\n        >>> tree.overlaps(-1.2, -1.0)\n        True\n\n    Sizing::\n\n        >>> tree = IntervalTree([Interval(-1.1, 1.1), Interval(-0.5, 1.5), Interval(0.5, 1.7)])\n        >>> len(tree)\n        3\n        >>> tree.is_empty()\n        False\n        >>> IntervalTree().is_empty()\n        True\n        >>> not tree\n        False\n        >>> not IntervalTree()\n        True\n        >>> print(tree.begin())    # using print() because of floats in Python 2.6\n        -1.1\n        >>> print(tree.end())      # ditto\n        1.7\n\n    Iteration::\n\n        >>> tree = IntervalTree([Interval(-11, 11), Interval(-5, 15), Interval(5, 17)])\n        >>> [iv.begin for iv in sorted(tree)]\n        [-11, -5, 5]\n        >>> assert tree.items() == set([Interval(-5, 15), Interval(-11, 11), Interval(5, 17)])\n\n    Copy- and typecasting, pickling::\n\n        >>> tree0 = IntervalTree([Interval(0, 1, \"x\"), Interval(1, 2, [\"x\"])])\n        >>> tree1 = IntervalTree(tree0)  # Shares Interval objects\n        >>> tree2 = tree0.copy()         # Shallow copy (same as above, as Intervals are singletons)\n        >>> import pickle\n        >>> tree3 = pickle.loads(pickle.dumps(tree0))  # Deep copy\n        >>> list(tree0[1])[0].data[0] = \"y\"  # affects shallow copies, but not deep copies\n        >>> tree0\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree1\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree2\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['y'])])\n        >>> tree3\n        IntervalTree([Interval(0, 1, 'x'), Interval(1, 2, ['x'])])\n\n    Equality testing::\n\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1)])\n        True\n        >>> IntervalTree([Interval(0, 1)]) == IntervalTree([Interval(0, 1, \"x\")])\n        False\n    \"\"\"\n\n    @classmethod\n    def from_tuples(cls, tups):\n        \"\"\"\n        Create a new IntervalTree from an iterable of 2- or 3-tuples,\n         where the tuple lists begin, end, and optionally data.\n        \"\"\"\n        ivs = [Interval(*t) for t in tups]\n        return IntervalTree(ivs)\n\n    def copy(self):\n        \"\"\"\n        Construct a new IntervalTree using shallow copies of the\n        intervals in the source tree.\n\n        Completes in O(n*log n) time.\n        :rtype: IntervalTree\n        \"\"\"\n        return IntervalTree((iv.copy() for iv in self))\n\n    def _add_boundaries(self, interval):\n        \"\"\"\n        Records the boundaries of the interval in the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if begin in self.boundary_table:\n            self.boundary_table[begin] += 1\n        else:\n            self.boundary_table[begin] = 1\n        if end in self.boundary_table:\n            self.boundary_table[end] += 1\n        else:\n            self.boundary_table[end] = 1\n\n    def _remove_boundaries(self, interval):\n        \"\"\"\n        Removes the boundaries of the interval from the boundary table.\n        \"\"\"\n        begin = interval.begin\n        end = interval.end\n        if self.boundary_table[begin] == 1:\n            del self.boundary_table[begin]\n        else:\n            self.boundary_table[begin] -= 1\n        if self.boundary_table[end] == 1:\n            del self.boundary_table[end]\n        else:\n            self.boundary_table[end] -= 1\n\n    def add(self, interval):\n        \"\"\"\n        Adds an interval to the tree, if not already present.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval in self:\n            return\n        if interval.is_null():\n            raise ValueError('IntervalTree: Null Interval objects not allowed in IntervalTree: {0}'.format(interval))\n        if not self.top_node:\n            self.top_node = Node.from_interval(interval)\n        else:\n            self.top_node = self.top_node.add(interval)\n        self.all_intervals.add(interval)\n        self._add_boundaries(interval)\n    append = add\n    appendi = addi\n\n    def update(self, intervals):\n        \"\"\"\n        Given an iterable of intervals, add them to the tree.\n\n        Completes in O(m*log(n+m), where m = number of intervals to\n        add.\n        \"\"\"\n        for iv in intervals:\n            self.add(iv)\n\n    def remove(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, raises\n        ValueError.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            raise ValueError\n        self.top_node = self.top_node.remove(interval)\n        self.all_intervals.remove(interval)\n        self._remove_boundaries(interval)\n\n    def removei(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for remove(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.remove(Interval(begin, end, data))\n\n    def discard(self, interval):\n        \"\"\"\n        Removes an interval from the tree, if present. If not, does\n        nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        if interval not in self:\n            return\n        self.all_intervals.discard(interval)\n        self.top_node = self.top_node.discard(interval)\n        self._remove_boundaries(interval)\n\n    def discardi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for discard(Interval(begin, end, data)).\n\n        Completes in O(log n) time.\n        \"\"\"\n        return self.discard(Interval(begin, end, data))\n\n    def difference(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals in self but not\n        in other.\n        \"\"\"\n        ivs = set()\n        for iv in self:\n            if iv not in other:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def difference_update(self, other):\n        \"\"\"\n        Removes all intervals in other from self.\n        \"\"\"\n        for iv in other:\n            self.discard(iv)\n\n    def union(self, other):\n        \"\"\"\n        Returns a new tree, comprising all intervals from self\n        and other.\n        \"\"\"\n        return IntervalTree(set(self).union(other))\n\n    def intersection(self, other):\n        \"\"\"\n        Returns a new tree of all intervals common to both self and\n        other.\n        \"\"\"\n        ivs = set()\n        shorter, longer = sorted([self, other], key=len)\n        for iv in shorter:\n            if iv in longer:\n                ivs.add(iv)\n        return IntervalTree(ivs)\n\n    def intersection_update(self, other):\n        \"\"\"\n        Removes intervals from self unless they also exist in other.\n        \"\"\"\n        ivs = list(self)\n        for iv in ivs:\n            if iv not in other:\n                self.remove(iv)\n\n    def symmetric_difference(self, other):\n        \"\"\"\n        Return a tree with elements only in self or other but not\n        both.\n        \"\"\"\n        if not isinstance(other, set):\n            other = set(other)\n        me = set(self)\n        ivs = me.difference(other).union(other.difference(me))\n        return IntervalTree(ivs)\n\n    def symmetric_difference_update(self, other):\n        \"\"\"\n        Throws out all intervals except those only in self or other,\n        not both.\n        \"\"\"\n        other = set(other)\n        ivs = list(self)\n        for iv in ivs:\n            if iv in other:\n                self.remove(iv)\n                other.remove(iv)\n        self.update(other)\n\n    def remove_overlap(self, begin, end=None):\n        \"\"\"\n        Removes all intervals overlapping the given point or range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range (this is 1 for a point)\n        \"\"\"\n        hitlist = self.at(begin) if end is None else self.overlap(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def remove_envelop(self, begin, end):\n        \"\"\"\n        Removes all intervals completely enveloped in the given range.\n\n        Completes in O((r+m)*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * r = size of the search range\n        \"\"\"\n        hitlist = self.envelop(begin, end)\n        for iv in hitlist:\n            self.remove(iv)\n\n    def chop(self, begin, end, datafunc=None):\n        \"\"\"\n        Like remove_envelop(), but trims back Intervals hanging into\n        the chopped area so that nothing overlaps.\n        \"\"\"\n        insertions = set()\n        begin_hits = [iv for iv in self.at(begin) if iv.begin < begin]\n        end_hits = [iv for iv in self.at(end) if iv.end > end]\n        if datafunc:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, datafunc(iv, True)))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, datafunc(iv, False)))\n        else:\n            for iv in begin_hits:\n                insertions.add(Interval(iv.begin, begin, iv.data))\n            for iv in end_hits:\n                insertions.add(Interval(end, iv.end, iv.data))\n        self.remove_envelop(begin, end)\n        self.difference_update(begin_hits)\n        self.difference_update(end_hits)\n        self.update(insertions)\n\n    def slice(self, point, datafunc=None):\n        \"\"\"\n        Split Intervals that overlap point into two new Intervals. if\n        specified, uses datafunc(interval, islower=True/False) to\n        set the data field of the new Intervals.\n        :param point: where to slice\n        :param datafunc(interval, isupper): callable returning a new\n        value for the interval's data field\n        \"\"\"\n        hitlist = set((iv for iv in self.at(point) if iv.begin < point))\n        insertions = set()\n        if datafunc:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, datafunc(iv, True)))\n                insertions.add(Interval(point, iv.end, datafunc(iv, False)))\n        else:\n            for iv in hitlist:\n                insertions.add(Interval(iv.begin, point, iv.data))\n                insertions.add(Interval(point, iv.end, iv.data))\n        self.difference_update(hitlist)\n        self.update(insertions)\n\n    def clear(self):\n        \"\"\"\n        Empties the tree.\n\n        Completes in O(1) tine.\n        \"\"\"\n        self.__init__()\n\n    def find_nested(self):\n        \"\"\"\n        Returns a dictionary mapping parent intervals to sets of\n        intervals overlapped by and contained in the parent.\n\n        Completes in O(n^2) time.\n        :rtype: dict of [Interval, set of Interval]\n        \"\"\"\n        result = {}\n\n        def add_if_nested():\n            if parent.contains_interval(child):\n                if parent not in result:\n                    result[parent] = set()\n                result[parent].add(child)\n        long_ivs = sorted(self.all_intervals, key=Interval.length, reverse=True)\n        for i, parent in enumerate(long_ivs):\n            for child in long_ivs[i + 1:]:\n                add_if_nested()\n        return result\n\n    def overlaps(self, begin, end=None):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        point or range.\n\n        Completes in O(r*log n) time, where r is the size of the\n        search range.\n        :rtype: bool\n        \"\"\"\n        if end is not None:\n            return self.overlaps_range(begin, end)\n        elif isinstance(begin, Number):\n            return self.overlaps_point(begin)\n        else:\n            return self.overlaps_range(begin.begin, begin.end)\n\n    def overlaps_point(self, p):\n        \"\"\"\n        Returns whether some interval in the tree overlaps p.\n\n        Completes in O(log n) time.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        return bool(self.top_node.contains_point(p))\n\n    def overlaps_range(self, begin, end):\n        \"\"\"\n        Returns whether some interval in the tree overlaps the given\n        range. Returns False if given a null interval over which to\n        test.\n\n        Completes in O(r*log n) time, where r is the range length and n\n        is the table size.\n        :rtype: bool\n        \"\"\"\n        if self.is_empty():\n            return False\n        elif begin >= end:\n            return False\n        elif self.overlaps_point(begin):\n            return True\n        return any((self.overlaps_point(bound) for bound in self.boundary_table if begin < bound < end))\n\n    def split_overlaps(self):\n        \"\"\"\n        Finds all intervals with overlapping ranges and splits them\n        along the range boundaries.\n\n        Completes in worst-case O(n^2*log n) time (many interval\n        boundaries are inside many intervals), best-case O(n*log n)\n        time (small number of overlaps << n per interval).\n        \"\"\"\n        if not self:\n            return\n        if len(self.boundary_table) == 2:\n            return\n        bounds = sorted(self.boundary_table)\n        new_ivs = set()\n        for lbound, ubound in zip(bounds[:-1], bounds[1:]):\n            for iv in self[lbound]:\n                new_ivs.add(Interval(lbound, ubound, iv.data))\n        self.__init__(new_ivs)\n\n    def merge_overlaps(self, data_reducer=None, data_initializer=None, strict=True):\n        \"\"\"\n        Finds all intervals with overlapping ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initializer created with copy.copy(data_initializer).\n\n        If strict is True (default), intervals are only merged if\n        their ranges actually overlap; adjacent, touching intervals\n        will not be merged. If strict is False, intervals are merged\n        even if they are only end-to-end adjacent.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                if higher.begin < lower.end or (not strict and higher.begin == lower.end):\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def merge_equals(self, data_reducer=None, data_initializer=None):\n        \"\"\"\n        Finds all intervals with equal ranges and merges them\n        into a single interval. If provided, uses data_reducer and\n        data_initializer with similar semantics to Python's built-in\n        reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                if higher.range_matches(lower):\n                    upper_bound = max(lower.end, higher.end)\n                    if data_reducer is not None:\n                        current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                    else:\n                        current_reduced[0] = None\n                    merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def merge_neighbors(self, data_reducer=None, data_initializer=None, distance=1, strict=True):\n        \"\"\"\n        Finds all adjacent intervals with range terminals less than or equal to\n        the given distance and merges them into a single interval. If provided,\n        uses data_reducer and data_initializer with similar semantics to\n        Python's built-in reduce(reducer_func[, initializer]), as follows:\n\n        If data_reducer is set to a function, combines the data\n        fields of the Intervals with\n            current_reduced_data = data_reducer(current_reduced_data, new_data)\n        If data_reducer is None, the merged Interval's data\n        field will be set to None, ignoring all the data fields\n        of the merged Intervals.\n\n        On encountering the first Interval to merge, if\n        data_initializer is None (default), uses the first\n        Interval's data field as the first value for\n        current_reduced_data. If data_initializer is not None,\n        current_reduced_data is set to a shallow copy of\n        data_initiazer created with\n            copy.copy(data_initializer).\n\n        If strict is True (default), only discrete intervals are merged if\n        their ranges are within the given distance; overlapping intervals\n        will not be merged. If strict is False, both neighbors and overlapping\n        intervals are merged.\n\n        Completes in O(n*logn) time.\n        \"\"\"\n        if not self:\n            return\n        sorted_intervals = sorted(self.all_intervals)\n        merged = []\n        current_reduced = [None]\n        higher = None\n\n        def new_series():\n            if data_initializer is None:\n                current_reduced[0] = higher.data\n                merged.append(higher)\n                return\n            else:\n                current_reduced[0] = copy(data_initializer)\n                current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                merged.append(Interval(higher.begin, higher.end, current_reduced[0]))\n        for higher in sorted_intervals:\n            if merged:\n                lower = merged[-1]\n                margin = higher.begin - lower.end\n                if margin <= distance:\n                    if strict and margin < 0:\n                        new_series()\n                        continue\n                    else:\n                        upper_bound = max(lower.end, higher.end)\n                        if data_reducer is not None:\n                            current_reduced[0] = data_reducer(current_reduced[0], higher.data)\n                        else:\n                            current_reduced[0] = None\n                        merged[-1] = Interval(lower.begin, upper_bound, current_reduced[0])\n                else:\n                    new_series()\n            else:\n                new_series()\n        self.__init__(merged)\n\n    def items(self):\n        \"\"\"\n        Constructs and returns a set of all intervals in the tree.\n\n        Completes in O(n) time.\n        :rtype: set of Interval\n        \"\"\"\n        return set(self.all_intervals)\n\n    def is_empty(self):\n        \"\"\"\n        Returns whether the tree is empty.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return 0 == len(self)\n\n    def at(self, p):\n        \"\"\"\n        Returns the set of all intervals that contain p.\n\n        Completes in O(m + log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        return root.search_point(p, set())\n\n    def envelop(self, begin, end=None):\n        \"\"\"\n        Returns the set of all intervals fully contained in the range\n        [begin, end).\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.envelop(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)\n        result.update(root.search_overlap((boundary_table.keys()[index] for index in xrange(bound_begin, bound_end))))\n        result = set((iv for iv in result if iv.begin >= begin and iv.end <= end))\n        return result\n\n    def overlap(self, begin, end=None):\n        \"\"\"\n        Returns a set of all intervals overlapping the given range.\n\n        Completes in O(m + k*log n) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range\n        :rtype: set of Interval\n        \"\"\"\n        root = self.top_node\n        if not root:\n            return set()\n        if end is None:\n            iv = begin\n            return self.overlap(iv.begin, iv.end)\n        elif begin >= end:\n            return set()\n        result = root.search_point(begin, set())\n        boundary_table = self.boundary_table\n        bound_begin = boundary_table.bisect_left(begin)\n        bound_end = boundary_table.bisect_left(end)\n        result.update(root.search_overlap((boundary_table.keys()[index] for index in xrange(bound_begin, bound_end))))\n        return result\n\n    def begin(self):\n        \"\"\"\n        Returns the lower bound of the first interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[0]\n\n    def end(self):\n        \"\"\"\n        Returns the upper bound of the last interval in the tree.\n\n        Completes in O(1) time.\n        \"\"\"\n        if not self.boundary_table:\n            return 0\n        return self.boundary_table.keys()[-1]\n\n    def range(self):\n        \"\"\"\n        Returns a minimum-spanning Interval that encloses all the\n        members of this IntervalTree. If the tree is empty, returns\n        null Interval.\n        :rtype: Interval\n        \"\"\"\n        return Interval(self.begin(), self.end())\n\n    def span(self):\n        \"\"\"\n        Returns the length of the minimum-spanning Interval that\n        encloses all the members of this IntervalTree. If the tree\n        is empty, return 0.\n        \"\"\"\n        if not self:\n            return 0\n        return self.end() - self.begin()\n\n    def print_structure(self, tostring=False):\n        \"\"\"\n        ## FOR DEBUGGING ONLY ##\n        Pretty-prints the structure of the tree.\n        If tostring is true, prints nothing and returns a string.\n        :rtype: None or str\n        \"\"\"\n        if self.top_node:\n            return self.top_node.print_structure(tostring=tostring)\n        else:\n            result = '<empty IntervalTree>'\n            if not tostring:\n                print(result)\n            else:\n                return result\n\n    def score(self, full_report=False):\n        \"\"\"\n        Returns a number between 0 and 1, indicating how suboptimal the tree\n        is. The lower, the better. Roughly, this number represents the\n        fraction of flawed Intervals in the tree.\n        :rtype: float\n        \"\"\"\n        if len(self) <= 2:\n            return 0.0\n        n = len(self)\n        m = self.top_node.count_nodes()\n\n        def s_center_score():\n            \"\"\"\n            Returns a normalized score, indicating roughly how many times\n            intervals share s_center with other intervals. Output is full-scale\n            from 0 to 1.\n            :rtype: float\n            \"\"\"\n            raw = n - m\n            maximum = n - 1\n            return raw / float(maximum)\n        report = {'depth': self.top_node.depth_score(n, m), 's_center': s_center_score()}\n        cumulative = max(report.values())\n        report['_cumulative'] = cumulative\n        if full_report:\n            return report\n        return cumulative\n\n    def __getitem__(self, index):\n        \"\"\"\n        Returns a set of all intervals overlapping the given index or\n        slice.\n\n        Completes in O(k * log(n) + m) time, where:\n          * n = size of the tree\n          * m = number of matches\n          * k = size of the search range (this is 1 for a point)\n        :rtype: set of Interval\n        \"\"\"\n        try:\n            start, stop = (index.start, index.stop)\n            if start is None:\n                start = self.begin()\n                if stop is None:\n                    return set(self)\n            if stop is None:\n                stop = self.end()\n            return self.overlap(start, stop)\n        except AttributeError:\n            return self.at(index)\n\n    def __setitem__(self, index, value):\n        \"\"\"\n        Adds a new interval to the tree. A shortcut for\n        add(Interval(index.start, index.stop, value)).\n\n        If an identical Interval object with equal range and data\n        already exists, does nothing.\n\n        Completes in O(log n) time.\n        \"\"\"\n        self.addi(index.start, index.stop, value)\n\n    def __delitem__(self, point):\n        \"\"\"\n        Delete all items overlapping point.\n        \"\"\"\n        self.remove_overlap(point)\n\n    def __contains__(self, item):\n        \"\"\"\n        Returns whether item exists as an Interval in the tree.\n        This method only returns True for exact matches; for\n        overlaps, see the overlaps() method.\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return item in self.all_intervals\n\n    def containsi(self, begin, end, data=None):\n        \"\"\"\n        Shortcut for (Interval(begin, end, data) in tree).\n\n        Completes in O(1) time.\n        :rtype: bool\n        \"\"\"\n        return Interval(begin, end, data) in self\n\n    def __iter__(self):\n        \"\"\"\n        Returns an iterator over all the intervals in the tree.\n\n        Completes in O(1) time.\n        :rtype: collections.Iterable[Interval]\n        \"\"\"\n        return self.all_intervals.__iter__()\n    iter = __iter__\n\n    def __len__(self):\n        \"\"\"\n        Returns how many intervals are in the tree.\n\n        Completes in O(1) time.\n        :rtype: int\n        \"\"\"\n        return len(self.all_intervals)\n\n    def __eq__(self, other):\n        \"\"\"\n        Whether two IntervalTrees are equal.\n\n        Completes in O(n) time if sizes are equal; O(1) time otherwise.\n        :rtype: bool\n        \"\"\"\n        return isinstance(other, IntervalTree) and self.all_intervals == other.all_intervals\n\n    def __repr__(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        ivs = sorted(self)\n        if not ivs:\n            return 'IntervalTree()'\n        else:\n            return 'IntervalTree({0})'.format(ivs)\n    __str__ = __repr__\n\n    def __reduce__(self):\n        \"\"\"\n        For pickle-ing.\n        :rtype: tuple\n        \"\"\"\n        return (IntervalTree, (sorted(self.all_intervals),))"
  }
}