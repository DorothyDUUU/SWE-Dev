{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_enums_pathseparators",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_enums_pathseparators.py",
  "test_code": "import pytest\n\nfrom yamlpath.enums import PathSeparators\n\n# Legacy spelling compatibility:\nfrom yamlpath.enums import PathSeperators\n\n\nclass Test_enums_PathSeparators():\n\t\"\"\"Tests for the PathSeparators enumeration.\"\"\"\n\t@pytest.mark.parametrize(\"pathsep_module\", [PathSeparators, PathSeperators])\n\tdef test_get_names(self, pathsep_module):\n\t\tassert pathsep_module.get_names() == [\n\t\t\t\"AUTO\",\n\t\t\t\"DOT\",\n\t\t\t\"FSLASH\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(PathSeparators.AUTO, '.'),\n\t\t(PathSeparators.DOT, '.'),\n\t\t(PathSeparators.FSLASH, '/'),\n\t])\n\tdef test_str(self, input, output):\n\t\tassert output == str(input)\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\".\", PathSeparators.DOT),\n\t\t(\"/\", PathSeparators.FSLASH),\n\t\t(\"DOT\", PathSeparators.DOT),\n\t\t(\"FSLASH\", PathSeparators.FSLASH),\n\t\t(PathSeparators.DOT, PathSeparators.DOT),\n\t\t(PathSeparators.FSLASH, PathSeparators.FSLASH),\n\t])\n\t@pytest.mark.parametrize(\"pathsep_module\", [PathSeparators, PathSeperators])\n\tdef test_from_str(self, input, output, pathsep_module):\n\t\tassert output == pathsep_module.from_str(input)\n\n\t@pytest.mark.parametrize(\"pathsep_module\", [PathSeparators, PathSeperators])\n\tdef test_from_str_nameerror(self, pathsep_module):\n\t\twith pytest.raises(NameError):\n\t\t\tpathsep_module.from_str(\"NO SUCH NAME\")\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"abc\", PathSeparators.DOT),\n\t\t(\"abc.123\", PathSeparators.DOT),\n\t\t(\"/abc\", PathSeparators.FSLASH),\n\t\t(\"/abc/123\", PathSeparators.FSLASH),\n\t])\n\t@pytest.mark.parametrize(\"pathsep_module\", [PathSeparators, PathSeperators])\n\t@pytest.mark.parametrize(\"func_name\", [\"infer_separator\", \"infer_seperator\"])\n\tdef test_infer_separator(self, input, output, pathsep_module, func_name):\n\t\tassert output == getattr(pathsep_module, func_name)(input)\n",
  "GT_file_code": {
    "yamlpath/enums/pathseparators.py": "\"\"\"\nImplements the PathSeparators enumeration.\n\nCopyright 2019, 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass PathSeparators(Enum):\n    \"\"\"\n    Supported YAML Path segment separators.\n\n    Separators include:\n\n    `AUTO`\n        The separator must be manually dictated or automatically inferred from\n        the YAML Path being evaluated.\n\n    `DOT`\n        YAML Path segments are separated via dots (.).\n\n    `FSLASH`\n        YAML Path segments are separated via forward-slashes (/).\n    \"\"\"\n\n    AUTO = auto()\n    DOT = auto()\n    FSLASH = auto()\n\n    def __str__(self) -> str:\n        \"\"\"Get a String representation of this employed enum's value.\"\"\"\n        separator = '.'\n        if self is PathSeparators.FSLASH:\n            separator = '/'\n        return separator\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in PathSeparators]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in PathSeparators.get_names()]\n        symbols = [str(e) for e in PathSeparators]\n        choices = list(set(names + symbols))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"PathSeparators\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (PathSeparators) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        if isinstance(name, PathSeparators):\n            return name\n\n        check: str = str(name).upper()\n        if check == '.':\n            check = \"DOT\"\n        elif check == '/':\n            check = \"FSLASH\"\n\n        if check in PathSeparators.get_names():\n            return PathSeparators[check]\n        raise NameError(\"PathSeparators has no such item, {}.\".format(check))\n\n    @staticmethod\n    def infer_separator(yaml_path: str) -> \"PathSeparators\":\n        \"\"\"\n        Infer the separator used within a sample YAML Path.\n\n        Will attempt to return the best PathSeparators match.  Always returns\n        `PathSeparators.AUTO` when the sample is empty.\n\n        Parameters:\n            1. yaml_path (str) The sample YAML Path to evaluate\n\n        Returns: (PathSeparators) the inferred PathSeparators value\n\n        Raises:  N/A\n        \"\"\"\n        separator: PathSeparators = PathSeparators.AUTO\n\n        if yaml_path:\n            if yaml_path[0] == '/':\n                separator = PathSeparators.FSLASH\n            else:\n                separator = PathSeparators.DOT\n\n        return separator\n\n    @staticmethod\n    def infer_seperator(yaml_path: str) -> \"PathSeparators\":\n        \"\"\"\n        Infer the separator used within a sample YAML Path.\n\n        Will attempt to return the best PathSeparators match.  Always returns\n        `PathSeparators.AUTO` when the sample is empty.\n\n        This is provided for compatibility with older versions,\n        before the spelling was updated to \"separator.\"\n\n        Parameters:\n            1. yaml_path (str) The sample YAML Path to evaluate\n\n        Returns: (PathSeparators) the inferred PathSeparators value\n\n        Raises:  N/A\n        \"\"\"\n        return PathSeparators.infer_separator(yaml_path)\n"
  },
  "GT_src_dict": {
    "yamlpath/enums/pathseparators.py": {
      "PathSeparators.__str__": {
        "code": "    def __str__(self) -> str:\n        \"\"\"Get a string representation of the employed enumeration value for the PathSeparators class. The method returns a specific separator character based on the instance of the enum: '.' for DOT and '/' for FSLASH. If the instance is AUTO, the default separator '.' is returned. No parameters are required for this method. The method interacts with the PathSeparators class to determine the output based on the enum instance.\"\"\"\n        \"Get a String representation of this employed enum's value.\"\n        separator = '.'\n        if self is PathSeparators.FSLASH:\n            separator = '/'\n        return separator",
        "docstring": "Get a string representation of the employed enumeration value for the PathSeparators class. The method returns a specific separator character based on the instance of the enum: '.' for DOT and '/' for FSLASH. If the instance is AUTO, the default separator '.' is returned. No parameters are required for this method. The method interacts with the PathSeparators class to determine the output based on the enum instance.",
        "signature": "def __str__(self) -> str:",
        "type": "Method",
        "class_signature": "class PathSeparators(Enum):"
      },
      "PathSeparators.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all upper-case names of the enumeration values in the PathSeparators class.\n\nThis static method retrieves the names of all entries in the PathSeparators enumeration and transforms them into upper-case strings. It does not take any parameters and returns a list of strings, each representing the upper-cased name of an enumeration member.\n\nThis method interacts with the enumeration entries defined within the PathSeparators class, which includes AUTO, DOT, and FSLASH. It leverages the `entry.name` property to access the names of the enumeration members.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in PathSeparators]",
        "docstring": "Get all upper-case names of the enumeration values in the PathSeparators class.\n\nThis static method retrieves the names of all entries in the PathSeparators enumeration and transforms them into upper-case strings. It does not take any parameters and returns a list of strings, each representing the upper-cased name of an enumeration member.\n\nThis method interacts with the enumeration entries defined within the PathSeparators class, which includes AUTO, DOT, and FSLASH. It leverages the `entry.name` property to access the names of the enumeration members.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class PathSeparators(Enum):"
      },
      "PathSeparators.from_str": {
        "code": "    def from_str(name: str) -> 'PathSeparators':\n        \"\"\"Convert a string representation of a YAML Path segment separator to its corresponding \nPathSeparators enumeration value.\n\nParameters:\n    name (str): The string name to convert. It can be an upper-case or lower-case variant \n    of the enumeration names, or valid symbolic representations such as '.' for DOT \n    and '/' for FSLASH.\n\nReturns:\n    PathSeparators: The corresponding enumeration value for the given name.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values defined \n    in PathSeparators.\n\nThis method interacts with the static method `get_names()` to retrieve the valid names \nof the enumeration. The method also handles input by converting certain symbols ('.' and '/')\nto their enumeration names (DOT and FSLASH, respectively).\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (PathSeparators) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        if isinstance(name, PathSeparators):\n            return name\n        check: str = str(name).upper()\n        if check == '.':\n            check = 'DOT'\n        elif check == '/':\n            check = 'FSLASH'\n        if check in PathSeparators.get_names():\n            return PathSeparators[check]\n        raise NameError('PathSeparators has no such item, {}.'.format(check))",
        "docstring": "Convert a string representation of a YAML Path segment separator to its corresponding \nPathSeparators enumeration value.\n\nParameters:\n    name (str): The string name to convert. It can be an upper-case or lower-case variant \n    of the enumeration names, or valid symbolic representations such as '.' for DOT \n    and '/' for FSLASH.\n\nReturns:\n    PathSeparators: The corresponding enumeration value for the given name.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values defined \n    in PathSeparators.\n\nThis method interacts with the static method `get_names()` to retrieve the valid names \nof the enumeration. The method also handles input by converting certain symbols ('.' and '/')\nto their enumeration names (DOT and FSLASH, respectively).",
        "signature": "def from_str(name: str) -> 'PathSeparators':",
        "type": "Method",
        "class_signature": "class PathSeparators(Enum):"
      },
      "PathSeparators.infer_separator": {
        "code": "    def infer_separator(yaml_path: str) -> 'PathSeparators':\n        \"\"\"Infer the separator used within a sample YAML Path.\n\nThis method evaluates the provided `yaml_path` string to determine the appropriate `PathSeparators` enumeration value, indicating the segment separator in the path. If the `yaml_path` is empty, it defaults to `PathSeparators.AUTO`. If the first character of the `yaml_path` is a forward slash ('/'), it returns `PathSeparators.FSLASH`; otherwise, it returns `PathSeparators.DOT`.\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the provided path.\n\nThis method uses the `PathSeparators` enumeration, which defines the possible segment separators and the associated logic to infer the correct one based on the input string.\"\"\"\n        '\\n        Infer the separator used within a sample YAML Path.\\n\\n        Will attempt to return the best PathSeparators match.  Always returns\\n        `PathSeparators.AUTO` when the sample is empty.\\n\\n        Parameters:\\n            1. yaml_path (str) The sample YAML Path to evaluate\\n\\n        Returns: (PathSeparators) the inferred PathSeparators value\\n\\n        Raises:  N/A\\n        '\n        separator: PathSeparators = PathSeparators.AUTO\n        if yaml_path:\n            if yaml_path[0] == '/':\n                separator = PathSeparators.FSLASH\n            else:\n                separator = PathSeparators.DOT\n        return separator",
        "docstring": "Infer the separator used within a sample YAML Path.\n\nThis method evaluates the provided `yaml_path` string to determine the appropriate `PathSeparators` enumeration value, indicating the segment separator in the path. If the `yaml_path` is empty, it defaults to `PathSeparators.AUTO`. If the first character of the `yaml_path` is a forward slash ('/'), it returns `PathSeparators.FSLASH`; otherwise, it returns `PathSeparators.DOT`.\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the provided path.\n\nThis method uses the `PathSeparators` enumeration, which defines the possible segment separators and the associated logic to infer the correct one based on the input string.",
        "signature": "def infer_separator(yaml_path: str) -> 'PathSeparators':",
        "type": "Method",
        "class_signature": "class PathSeparators(Enum):"
      },
      "PathSeparators.infer_seperator": {
        "code": "    def infer_seperator(yaml_path: str) -> 'PathSeparators':\n        \"\"\"Infer the separator used within a sample YAML Path.\n\nThis method analyzes the provided `yaml_path` string to determine the appropriate \nPathSeparators enumeration value that represents the separator used. If the string is empty, \nit will return `PathSeparators.AUTO`. This method exists for backward compatibility \nwith older versions that used the misspelled \"infer_seperator\".\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the separator found \n    in the `yaml_path`.\n\nSee also: `infer_separator` for the current implementation of the inference logic.\"\"\"\n        '\\n        Infer the separator used within a sample YAML Path.\\n\\n        Will attempt to return the best PathSeparators match.  Always returns\\n        `PathSeparators.AUTO` when the sample is empty.\\n\\n        This is provided for compatibility with older versions,\\n        before the spelling was updated to \"separator.\"\\n\\n        Parameters:\\n            1. yaml_path (str) The sample YAML Path to evaluate\\n\\n        Returns: (PathSeparators) the inferred PathSeparators value\\n\\n        Raises:  N/A\\n        '\n        return PathSeparators.infer_separator(yaml_path)",
        "docstring": "Infer the separator used within a sample YAML Path.\n\nThis method analyzes the provided `yaml_path` string to determine the appropriate \nPathSeparators enumeration value that represents the separator used. If the string is empty, \nit will return `PathSeparators.AUTO`. This method exists for backward compatibility \nwith older versions that used the misspelled \"infer_seperator\".\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the separator found \n    in the `yaml_path`.\n\nSee also: `infer_separator` for the current implementation of the inference logic.",
        "signature": "def infer_seperator(yaml_path: str) -> 'PathSeparators':",
        "type": "Method",
        "class_signature": "class PathSeparators(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/enums/pathseparators.py:PathSeparators:from_str": {},
    "yamlpath/enums/pathseparators.py:PathSeparators:infer_seperator": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_enums_pathseparators\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 enums/\n        \u2514\u2500\u2500 pathseparators.py\n            \u251c\u2500\u2500 PathSeparators.__str__\n            \u251c\u2500\u2500 PathSeparators.from_str\n            \u251c\u2500\u2500 PathSeparators.get_names\n            \u251c\u2500\u2500 PathSeparators.infer_separator\n            \u2514\u2500\u2500 PathSeparators.infer_seperator\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the functionality of the `PathSeparators` enumeration, which standardizes and manages different path separator conventions within the application. It provides capabilities for retrieving all valid separator names, converting between string representations and enumeration types, and inferring the appropriate path separator based on input data formats. By ensuring consistent handling of path separators (e.g., dot notation or forward slashes), the module addresses the complexity of interpreting and normalizing file paths or structured data paths, reducing errors and ambiguity for developers working with path-related logic.\n\n## FILE 1: yamlpath/enums/pathseparators.py\n\n- CLASS METHOD: PathSeparators.infer_seperator\n  - CLASS SIGNATURE: class PathSeparators(Enum):\n  - SIGNATURE: def infer_seperator(yaml_path: str) -> 'PathSeparators':\n  - DOCSTRING: \n```python\n\"\"\"\nInfer the separator used within a sample YAML Path.\n\nThis method analyzes the provided `yaml_path` string to determine the appropriate \nPathSeparators enumeration value that represents the separator used. If the string is empty, \nit will return `PathSeparators.AUTO`. This method exists for backward compatibility \nwith older versions that used the misspelled \"infer_seperator\".\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the separator found \n    in the `yaml_path`.\n\nSee also: `infer_separator` for the current implementation of the inference logic.\n\"\"\"\n```\n\n- CLASS METHOD: PathSeparators.from_str\n  - CLASS SIGNATURE: class PathSeparators(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'PathSeparators':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string representation of a YAML Path segment separator to its corresponding \nPathSeparators enumeration value.\n\nParameters:\n    name (str): The string name to convert. It can be an upper-case or lower-case variant \n    of the enumeration names, or valid symbolic representations such as '.' for DOT \n    and '/' for FSLASH.\n\nReturns:\n    PathSeparators: The corresponding enumeration value for the given name.\n\nRaises:\n    NameError: If the provided name does not match any of the enumeration values defined \n    in PathSeparators.\n\nThis method interacts with the static method `get_names()` to retrieve the valid names \nof the enumeration. The method also handles input by converting certain symbols ('.' and '/')\nto their enumeration names (DOT and FSLASH, respectively).\n\"\"\"\n```\n\n- CLASS METHOD: PathSeparators.get_names\n  - CLASS SIGNATURE: class PathSeparators(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all upper-case names of the enumeration values in the PathSeparators class.\n\nThis static method retrieves the names of all entries in the PathSeparators enumeration and transforms them into upper-case strings. It does not take any parameters and returns a list of strings, each representing the upper-cased name of an enumeration member.\n\nThis method interacts with the enumeration entries defined within the PathSeparators class, which includes AUTO, DOT, and FSLASH. It leverages the `entry.name` property to access the names of the enumeration members.\n\"\"\"\n```\n\n- CLASS METHOD: PathSeparators.__str__\n  - CLASS SIGNATURE: class PathSeparators(Enum):\n  - SIGNATURE: def __str__(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet a string representation of the employed enumeration value for the PathSeparators class. The method returns a specific separator character based on the instance of the enum: '.' for DOT and '/' for FSLASH. If the instance is AUTO, the default separator '.' is returned. No parameters are required for this method. The method interacts with the PathSeparators class to determine the output based on the enum instance.\n\"\"\"\n```\n\n- CLASS METHOD: PathSeparators.infer_separator\n  - CLASS SIGNATURE: class PathSeparators(Enum):\n  - SIGNATURE: def infer_separator(yaml_path: str) -> 'PathSeparators':\n  - DOCSTRING: \n```python\n\"\"\"\nInfer the separator used within a sample YAML Path.\n\nThis method evaluates the provided `yaml_path` string to determine the appropriate `PathSeparators` enumeration value, indicating the segment separator in the path. If the `yaml_path` is empty, it defaults to `PathSeparators.AUTO`. If the first character of the `yaml_path` is a forward slash ('/'), it returns `PathSeparators.FSLASH`; otherwise, it returns `PathSeparators.DOT`.\n\nParameters:\n    yaml_path (str): The sample YAML Path to evaluate.\n\nReturns:\n    PathSeparators: The inferred PathSeparators value based on the provided path.\n\nThis method uses the `PathSeparators` enumeration, which defines the possible segment separators and the associated logic to infer the correct one based on the input string.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/enums/pathseparators.py": "\"\"\"\nImplements the PathSeparators enumeration.\n\nCopyright 2019, 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass PathSeparators(Enum):\n    \"\"\"\n    Supported YAML Path segment separators.\n\n    Separators include:\n\n    `AUTO`\n        The separator must be manually dictated or automatically inferred from\n        the YAML Path being evaluated.\n\n    `DOT`\n        YAML Path segments are separated via dots (.).\n\n    `FSLASH`\n        YAML Path segments are separated via forward-slashes (/).\n    \"\"\"\n    AUTO = auto()\n    DOT = auto()\n    FSLASH = auto()\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in PathSeparators.get_names()]\n        symbols = [str(e) for e in PathSeparators]\n        choices = list(set(names + symbols))\n        choices.sort()\n        return choices"
  },
  "call_tree": {
    "tests/test_enums_pathseparators.py:Test_enums_PathSeparators:test_get_names": {
      "yamlpath/enums/pathseparators.py:PathSeparators:get_names": {}
    },
    "tests/test_enums_pathseparators.py:Test_enums_PathSeparators:test_str": {
      "yamlpath/enums/pathseparators.py:PathSeparators:__str__": {}
    },
    "tests/test_enums_pathseparators.py:Test_enums_PathSeparators:test_from_str": {
      "yamlpath/enums/pathseparators.py:PathSeparators:from_str": {
        "yamlpath/enums/pathseparators.py:PathSeparators:get_names": {}
      }
    },
    "tests/test_enums_pathseparators.py:Test_enums_PathSeparators:test_from_str_nameerror": {
      "yamlpath/enums/pathseparators.py:PathSeparators:from_str": {
        "yamlpath/enums/pathseparators.py:PathSeparators:get_names": {}
      }
    },
    "tests/test_enums_pathseparators.py:Test_enums_PathSeparators:test_infer_separator": {
      "yamlpath/enums/pathseparators.py:PathSeparators:infer_separator": {},
      "yamlpath/enums/pathseparators.py:PathSeparators:infer_seperator": {
        "yamlpath/enums/pathseparators.py:PathSeparators:infer_separator": {}
      }
    }
  }
}