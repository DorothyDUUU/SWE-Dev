{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_service_module_name",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/enums/test_service_module_name.py",
  "test_code": "from mypy_boto3_builder.enums.service_module_name import ServiceModuleName\n\n\nclass TestServiceModuleName:\n    def test_properties(self) -> None:\n        assert ServiceModuleName.paginator.stub_file_name == \"paginator.pyi\"\n        assert ServiceModuleName.paginator.file_name == \"paginator.py\"\n        assert ServiceModuleName.paginator.template_name == \"paginator.pyi.jinja2\"\n",
  "GT_file_code": {
    "mypy_boto3_builder/enums/service_module_name.py": "\"\"\"\nEnum for service modules.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom enum import Enum\n\n\nclass ServiceModuleName(Enum):\n    \"\"\"\n    Enum for service modules.\n    \"\"\"\n\n    client = \"client\"\n    service_resource = \"service_resource\"\n    paginator = \"paginator\"\n    waiter = \"waiter\"\n    type_defs = \"type_defs\"\n    literals = \"literals\"\n\n    @property\n    def stub_file_name(self) -> str:\n        \"\"\"\n        Module file name.\n        \"\"\"\n        return f\"{self.value}.pyi\"\n\n    @property\n    def file_name(self) -> str:\n        \"\"\"\n        Module file name.\n        \"\"\"\n        return f\"{self.value}.py\"\n\n    @property\n    def template_name(self) -> str:\n        \"\"\"\n        Module template file name.\n        \"\"\"\n        return f\"{self.value}.pyi.jinja2\"\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/enums/service_module_name.py": {
      "ServiceModuleName.stub_file_name": {
        "code": "    def stub_file_name(self) -> str:\n        \"\"\"Returns the file name for the module's stub, formatted as '{module_name}.pyi', where '{module_name}' is the value associated with the current enumeration instance. This method does not take any parameters and returns a string representing the stub file name. It directly utilizes the `value` property inherited from the Enum class to construct the file name. The method is designed for use in the context of service modules defined in the `ServiceModuleName` enum, helping to standardize file naming for different service module files.\"\"\"\n        '\\n        Module file name.\\n        '\n        return f'{self.value}.pyi'",
        "docstring": "Returns the file name for the module's stub, formatted as '{module_name}.pyi', where '{module_name}' is the value associated with the current enumeration instance. This method does not take any parameters and returns a string representing the stub file name. It directly utilizes the `value` property inherited from the Enum class to construct the file name. The method is designed for use in the context of service modules defined in the `ServiceModuleName` enum, helping to standardize file naming for different service module files.",
        "signature": "def stub_file_name(self) -> str:",
        "type": "Method",
        "class_signature": "class ServiceModuleName(Enum):"
      },
      "ServiceModuleName.file_name": {
        "code": "    def file_name(self) -> str:\n        \"\"\"Returns the module file name corresponding to the service module name.\n\nThe method constructs the file name by appending the '.py' extension to the value of the enum member, which represents the name of the service module. The value is defined in the ServiceModuleName enum, ensuring consistency across module references. \n\nNo input parameters are required. This method returns a string representing the full file name of the service module.\"\"\"\n        '\\n        Module file name.\\n        '\n        return f'{self.value}.py'",
        "docstring": "Returns the module file name corresponding to the service module name.\n\nThe method constructs the file name by appending the '.py' extension to the value of the enum member, which represents the name of the service module. The value is defined in the ServiceModuleName enum, ensuring consistency across module references. \n\nNo input parameters are required. This method returns a string representing the full file name of the service module.",
        "signature": "def file_name(self) -> str:",
        "type": "Method",
        "class_signature": "class ServiceModuleName(Enum):"
      },
      "ServiceModuleName.template_name": {
        "code": "    def template_name(self) -> str:\n        \"\"\"Returns the template file name for the service module, formatted as '{module_name}.pyi.jinja2', where {module_name} is the string value of the Enum instance. This property allows for dynamic generation of template names based on the module's name, which is defined by the Enum values. There are no input parameters. The return value is a string representing the template file name associated with the service module instance of the ServiceModuleName Enum.\"\"\"\n        '\\n        Module template file name.\\n        '\n        return f'{self.value}.pyi.jinja2'",
        "docstring": "Returns the template file name for the service module, formatted as '{module_name}.pyi.jinja2', where {module_name} is the string value of the Enum instance. This property allows for dynamic generation of template names based on the module's name, which is defined by the Enum values. There are no input parameters. The return value is a string representing the template file name associated with the service module instance of the ServiceModuleName Enum.",
        "signature": "def template_name(self) -> str:",
        "type": "Method",
        "class_signature": "class ServiceModuleName(Enum):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_service_module_name\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 enums/\n        \u2514\u2500\u2500 service_module_name.py\n            \u251c\u2500\u2500 ServiceModuleName.file_name\n            \u251c\u2500\u2500 ServiceModuleName.stub_file_name\n            \u2514\u2500\u2500 ServiceModuleName.template_name\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the organization and management of service-specific file configurations used in code generation workflows. It provides an interface to define and retrieve properties for file names and template names associated with different service components, such as paginators. By standardizing and centralizing these configurations, the module ensures consistency and simplifies the process of generating service module files, addressing pain points related to manual file handling and reducing potential errors in template-based code generation.\n\n## FILE 1: mypy_boto3_builder/enums/service_module_name.py\n\n- CLASS METHOD: ServiceModuleName.template_name\n  - CLASS SIGNATURE: class ServiceModuleName(Enum):\n  - SIGNATURE: def template_name(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the template file name for the service module, formatted as '{module_name}.pyi.jinja2', where {module_name} is the string value of the Enum instance. This property allows for dynamic generation of template names based on the module's name, which is defined by the Enum values. There are no input parameters. The return value is a string representing the template file name associated with the service module instance of the ServiceModuleName Enum.\n\"\"\"\n```\n\n- CLASS METHOD: ServiceModuleName.stub_file_name\n  - CLASS SIGNATURE: class ServiceModuleName(Enum):\n  - SIGNATURE: def stub_file_name(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the file name for the module's stub, formatted as '{module_name}.pyi', where '{module_name}' is the value associated with the current enumeration instance. This method does not take any parameters and returns a string representing the stub file name. It directly utilizes the `value` property inherited from the Enum class to construct the file name. The method is designed for use in the context of service modules defined in the `ServiceModuleName` enum, helping to standardize file naming for different service module files.\n\"\"\"\n```\n\n- CLASS METHOD: ServiceModuleName.file_name\n  - CLASS SIGNATURE: class ServiceModuleName(Enum):\n  - SIGNATURE: def file_name(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the module file name corresponding to the service module name.\n\nThe method constructs the file name by appending the '.py' extension to the value of the enum member, which represents the name of the service module. The value is defined in the ServiceModuleName enum, ensuring consistency across module references. \n\nNo input parameters are required. This method returns a string representing the full file name of the service module.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/enums/service_module_name.py": "\"\"\"\nEnum for service modules.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom enum import Enum\n\nclass ServiceModuleName(Enum):\n    \"\"\"\n    Enum for service modules.\n    \"\"\"\n    client = 'client'\n    service_resource = 'service_resource'\n    paginator = 'paginator'\n    waiter = 'waiter'\n    type_defs = 'type_defs'\n    literals = 'literals'"
  },
  "call_tree": {
    "tests/enums/test_service_module_name.py:TestServiceModuleName:test_properties": {
      "mypy_boto3_builder/enums/service_module_name.py:ServiceModuleName:stub_file_name": {},
      "mypy_boto3_builder/enums/service_module_name.py:ServiceModuleName:file_name": {},
      "mypy_boto3_builder/enums/service_module_name.py:ServiceModuleName:template_name": {}
    }
  }
}