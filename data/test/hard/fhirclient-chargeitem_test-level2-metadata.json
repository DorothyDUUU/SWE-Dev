{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-chargeitem_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/chargeitem_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import chargeitem\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ChargeItemTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ChargeItem\", js[\"resourceType\"])\n        return chargeitem.ChargeItem(js)\n    \n    def testChargeItem1(self):\n        inst = self.instantiate_from(\"chargeitem-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ChargeItem instance\")\n        self.implChargeItem1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ChargeItem\", js[\"resourceType\"])\n        inst2 = chargeitem.ChargeItem(js)\n        self.implChargeItem1(inst2)\n    \n    def implChargeItem1(self, inst):\n        self.assertEqual(inst.code.coding[0].code, \"01510\")\n        self.assertEqual(inst.code.coding[0].display, \"Zusatzpauschale f\u00fcr Beobachtung nach diagnostischer Koronarangiografie\")\n        self.assertEqual(inst.definitionUri[0], \"http://www.kbv.de/tools/ebm/html/01520_2904360860826220813632.html\")\n        self.assertEqual(inst.enteredDate.datetime, FHIRDateTime(\"2017-01-25T23:55:04+01:00\").datetime)\n        self.assertEqual(inst.enteredDate.as_json(), \"2017-01-25T23:55:04+01:00\")\n        self.assertEqual(inst.factorOverride, 0.8)\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://myHospital.org/ChargeItems\")\n        self.assertEqual(inst.identifier[0].value, \"654321\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"The code is only applicable for periods longer than 4h\")\n        self.assertEqual(inst.note[0].time.datetime, FHIRDateTime(\"2017-01-25T23:55:04+01:00\").datetime)\n        self.assertEqual(inst.note[0].time.as_json(), \"2017-01-25T23:55:04+01:00\")\n        self.assertEqual(inst.occurrencePeriod.end.datetime, FHIRDateTime(\"2017-01-25T12:35:00+01:00\").datetime)\n        self.assertEqual(inst.occurrencePeriod.end.as_json(), \"2017-01-25T12:35:00+01:00\")\n        self.assertEqual(inst.occurrencePeriod.start.datetime, FHIRDateTime(\"2017-01-25T08:00:00+01:00\").datetime)\n        self.assertEqual(inst.occurrencePeriod.start.as_json(), \"2017-01-25T08:00:00+01:00\")\n        self.assertEqual(inst.overrideReason, \"Patient is Cardiologist's golf buddy, so he gets a 20% discount!\")\n        self.assertEqual(inst.performer[0].function.coding[0].code, \"17561000\")\n        self.assertEqual(inst.performer[0].function.coding[0].display, \"Cardiologist\")\n        self.assertEqual(inst.performer[0].function.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.performer[1].function.coding[0].code, \"224542009\")\n        self.assertEqual(inst.performer[1].function.coding[0].display, \"Coronary Care Nurse\")\n        self.assertEqual(inst.performer[1].function.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.priceOverride.currency, \"EUR\")\n        self.assertEqual(inst.priceOverride.value, 40)\n        self.assertEqual(inst.quantity.value, 1)\n        self.assertEqual(inst.reason[0].coding[0].code, \"123456\")\n        self.assertEqual(inst.reason[0].coding[0].display, \"DIAG-1\")\n        self.assertEqual(inst.reason[0].coding[0].system, \"http://hl7.org/fhir/sid/icd-10\")\n        self.assertEqual(inst.status, \"billable\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Example of ChargeItem Usage in Context of the German EBM Billing code system</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/chargeitem.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ChargeItem).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ChargeItem(domainresource.DomainResource):\n    \"\"\" Item containing charge code(s) associated with the provision of healthcare\n    provider products.\n    \n    The resource ChargeItem describes the provision of healthcare provider\n    products for a certain patient, therefore referring not only to the\n    product, but containing in addition details of the provision, like date,\n    time, amounts and participating organizations and persons. Main Usage of\n    the ChargeItem is to enable the billing process and internal cost\n    allocation.\n    \"\"\"\n    \n    resource_type = \"ChargeItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.account = None\n        \"\"\" Account to place this charge.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodysite = None\n        \"\"\" Anatomical location, if relevant.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" A code that identifies the charge, like a billing code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.context = None\n        \"\"\" Encounter / Episode associated with event.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.costCenter = None\n        \"\"\" Organization that has ownership of the (potential, future) revenue.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionCanonical = None\n        \"\"\" Resource defining the code of this ChargeItem.\n        List of `str` items. \"\"\"\n        \n        self.definitionUri = None\n        \"\"\" Defining information about the code of this charge item.\n        List of `str` items. \"\"\"\n        \n        self.enteredDate = None\n        \"\"\" Date the charge item was entered.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.enterer = None\n        \"\"\" Individual who was entering.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.factorOverride = None\n        \"\"\" Factor overriding the associated rules.\n        Type `float`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for item.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Comments made about the ChargeItem.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceDateTime = None\n        \"\"\" When the charged service was applied.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.occurrencePeriod = None\n        \"\"\" When the charged service was applied.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceTiming = None\n        \"\"\" When the charged service was applied.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.overrideReason = None\n        \"\"\" Reason for overriding the list price/factor.\n        Type `str`. \"\"\"\n        \n        self.partOf = None\n        \"\"\" Part of referenced ChargeItem.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.performer = None\n        \"\"\" Who performed charged service.\n        List of `ChargeItemPerformer` items (represented as `dict` in JSON). \"\"\"\n        \n        self.performingOrganization = None\n        \"\"\" Organization providing the charged service.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.priceOverride = None\n        \"\"\" Price overriding the associated rules.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.productCodeableConcept = None\n        \"\"\" Product charged.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.productReference = None\n        \"\"\" Product charged.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Quantity of which the charge item has been serviced.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Why was the charged  service rendered?.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requestingOrganization = None\n        \"\"\" Organization requesting the charged service.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.service = None\n        \"\"\" Which rendered service is being charged?.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" planned | billable | not-billable | aborted | billed | entered-in-\n        error | unknown.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Individual service was done for/to.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.supportingInformation = None\n        \"\"\" Further information supporting this charge.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ChargeItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItem, self).elementProperties()\n        js.extend([\n            (\"account\", \"account\", fhirreference.FHIRReference, True, None, False),\n            (\"bodysite\", \"bodysite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"context\", \"context\", fhirreference.FHIRReference, False, None, False),\n            (\"costCenter\", \"costCenter\", fhirreference.FHIRReference, False, None, False),\n            (\"definitionCanonical\", \"definitionCanonical\", str, True, None, False),\n            (\"definitionUri\", \"definitionUri\", str, True, None, False),\n            (\"enteredDate\", \"enteredDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"enterer\", \"enterer\", fhirreference.FHIRReference, False, None, False),\n            (\"factorOverride\", \"factorOverride\", float, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"occurrenceDateTime\", \"occurrenceDateTime\", fhirdatetime.FHIRDateTime, False, \"occurrence\", False),\n            (\"occurrencePeriod\", \"occurrencePeriod\", period.Period, False, \"occurrence\", False),\n            (\"occurrenceTiming\", \"occurrenceTiming\", timing.Timing, False, \"occurrence\", False),\n            (\"overrideReason\", \"overrideReason\", str, False, None, False),\n            (\"partOf\", \"partOf\", fhirreference.FHIRReference, True, None, False),\n            (\"performer\", \"performer\", ChargeItemPerformer, True, None, False),\n            (\"performingOrganization\", \"performingOrganization\", fhirreference.FHIRReference, False, None, False),\n            (\"priceOverride\", \"priceOverride\", money.Money, False, None, False),\n            (\"productCodeableConcept\", \"productCodeableConcept\", codeableconcept.CodeableConcept, False, \"product\", False),\n            (\"productReference\", \"productReference\", fhirreference.FHIRReference, False, \"product\", False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"reason\", \"reason\", codeableconcept.CodeableConcept, True, None, False),\n            (\"requestingOrganization\", \"requestingOrganization\", fhirreference.FHIRReference, False, None, False),\n            (\"service\", \"service\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"supportingInformation\", \"supportingInformation\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ChargeItemPerformer(backboneelement.BackboneElement):\n    \"\"\" Who performed charged service.\n    \n    Indicates who or what performed or participated in the charged service.\n    \"\"\"\n    \n    resource_type = \"ChargeItemPerformer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actor = None\n        \"\"\" Individual who was performing.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.function = None\n        \"\"\" What type of performance was done.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ChargeItemPerformer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ChargeItemPerformer, self).elementProperties()\n        js.extend([\n            (\"actor\", \"actor\", fhirreference.FHIRReference, False, None, True),\n            (\"function\", \"function\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\nfrom . import timing\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance, storing the date derived from the given JSON value (if provided).\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a date in FHIR format. If provided, it must match a predefined regex format. If the format is invalid or not a string, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, or None if jsonval is not provided.\n- origval (Union[str, None]): Stores the original JSON string used for initialization.\n\nConstants:\n- _REGEX: A compiled regular expression for validating the format of the provided FHIR date string; defined as a class-level attribute and used to ensure the format aligns with FHIR specifications.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance, storing the date derived from the given JSON value (if provided).\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a date in FHIR format. If provided, it must match a predefined regex format. If the format is invalid or not a string, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, or None if jsonval is not provided.\n- origval (Union[str, None]): Stores the original JSON string used for initialization.\n\nConstants:\n- _REGEX: A compiled regular expression for validating the format of the provided FHIR date string; defined as a class-level attribute and used to ensure the format aligns with FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Handles attribute assignment for FHIRDate instances.\n\nParameters:\n- prop (str): The name of the property being set.\n- value (Any): The value to set for the specified property.\n\nThe method primarily manages the synchronization between the `date` attribute and the `_FIELD` attribute (which is set to \"date\"). If either of these properties is being modified, it clears the `origval` attribute to ensure consistency. It achieves this by utilizing the `object.__setattr__` method to bypass potential issues with infinite recursion during assignment. \n\nDependencies:\n- `_FIELD`: A class-level constant defined in FHIRDate that holds the string \"date\". It is used here to facilitate the synchronization of the `date` attribute and its internal representation.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Handles attribute assignment for FHIRDate instances.\n\nParameters:\n- prop (str): The name of the property being set.\n- value (Any): The value to set for the specified property.\n\nThe method primarily manages the synchronization between the `date` attribute and the `_FIELD` attribute (which is set to \"date\"). If either of these properties is being modified, it clears the `origval` attribute to ensure consistency. It achieves this by utilizing the `object.__setattr__` method to bypass potential issues with infinite recursion during assignment. \n\nDependencies:\n- `_FIELD`: A class-level constant defined in FHIRDate that holds the string \"date\". It is used here to facilitate the synchronization of the `date` attribute and its internal representation.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate. If the original value (`origval`) is not None, it will be returned. Otherwise, if `origval` is None, the method returns the standardized ISO 8601 string representation of the date using the `isostring` property. \n\nThe `origval` attribute is initialized during object instantiation and stores the initial JSON string input. The `isostring` property computes the ISO 8601 format based on the internal `date` representation, providing a way to access the date in a universally recognized format while accounting for potential discrepancies in partial dates.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate. If the original value (`origval`) is not None, it will be returned. Otherwise, if `origval` is None, the method returns the standardized ISO 8601 string representation of the date using the `isostring` property. \n\nThe `origval` attribute is initialized during object instantiation and stores the initial JSON string input. The `isostring` property computes the ISO 8601 format based on the internal `date` representation, providing a way to access the date in a universally recognized format while accounting for potential discrepancies in partial dates.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/chargeitem.py": {
      "ChargeItem.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a ChargeItem instance representing healthcare provider products associated with a patient. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the ChargeItem. \n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid values; if False, allows invalid values.\n\nAttributes:\n- account: FHIRReference indicating the account to place this charge.\n- bodysite: CodeableConcept indicating anatomical location if applicable.\n- code: CodeableConcept that identifies the charge, such as a billing code.\n- context: FHIRReference for the Encounter or Episode associated with this charge.\n- costCenter: FHIRReference representing the organization that owns future revenue from this charge.\n- definitionCanonical: List of strings defining the resource code for this charge item.\n- definitionUri: List of strings providing defining information about the charge's code.\n- enteredDate: FHIRDateTime string indicating when the charge item was entered.\n- enterer: FHIRReference for the individual who entered the charge.\n- factorOverride: float for any factor overriding associated rules.\n- identifier: List of Identifier items for business identification of the item.\n- note: List of Annotation items containing comments about the ChargeItem.\n- occurrenceDateTime: FHIRDateTime string for when the service was charged.\n- occurrencePeriod: Period indicating when the service was applied.\n- occurrenceTiming: Timing indicating when the charged service was performed.\n- overrideReason: string indicating reasons for overriding pricing.\n- partOf: List of FHIRReference for ChargeItems that are part of this one.\n- performer: List of ChargeItemPerformer indicating who performed the service.\n- performingOrganization: FHIRReference for the organization providing the service.\n- priceOverride: Money type for prices that override standard rules.\n- productCodeableConcept: CodeableConcept for the product charged.\n- productReference: FHIRReference for the charged product.\n- quantity: Quantity type representing the amount billed.\n- reason: List of CodeableConcept for the rationale behind the charge.\n- requestingOrganization: FHIRReference for the organization requesting the service.\n- service: List of FHIRReference for the services rendered and charged.\n- status: string indicating the current status of the charge item (e.g., planned, billed).\n- subject: FHIRReference for the individual receiving the service.\n- supportingInformation: List of FHIRReference for additional information related to the charge.\n\nThe ChargeItem is primarily used to facilitate billing and internal cost allocation related to healthcare services.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.account = None\n        ' Account to place this charge.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.bodysite = None\n        ' Anatomical location, if relevant.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.code = None\n        ' A code that identifies the charge, like a billing code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.context = None\n        ' Encounter / Episode associated with event.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.costCenter = None\n        ' Organization that has ownership of the (potential, future) revenue.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.definitionCanonical = None\n        ' Resource defining the code of this ChargeItem.\\n        List of `str` items. '\n        self.definitionUri = None\n        ' Defining information about the code of this charge item.\\n        List of `str` items. '\n        self.enteredDate = None\n        ' Date the charge item was entered.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.enterer = None\n        ' Individual who was entering.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.factorOverride = None\n        ' Factor overriding the associated rules.\\n        Type `float`. '\n        self.identifier = None\n        ' Business Identifier for item.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Comments made about the ChargeItem.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.occurrenceDateTime = None\n        ' When the charged service was applied.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.occurrencePeriod = None\n        ' When the charged service was applied.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.occurrenceTiming = None\n        ' When the charged service was applied.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.overrideReason = None\n        ' Reason for overriding the list price/factor.\\n        Type `str`. '\n        self.partOf = None\n        ' Part of referenced ChargeItem.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.performer = None\n        ' Who performed charged service.\\n        List of `ChargeItemPerformer` items (represented as `dict` in JSON). '\n        self.performingOrganization = None\n        ' Organization providing the charged service.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.priceOverride = None\n        ' Price overriding the associated rules.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.productCodeableConcept = None\n        ' Product charged.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.productReference = None\n        ' Product charged.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Quantity of which the charge item has been serviced.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.reason = None\n        ' Why was the charged  service rendered?.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.requestingOrganization = None\n        ' Organization requesting the charged service.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.service = None\n        ' Which rendered service is being charged?.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' planned | billable | not-billable | aborted | billed | entered-in-\\n        error | unknown.\\n        Type `str`. '\n        self.subject = None\n        ' Individual service was done for/to.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.supportingInformation = None\n        ' Further information supporting this charge.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(ChargeItem, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a ChargeItem instance representing healthcare provider products associated with a patient. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the ChargeItem. \n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid values; if False, allows invalid values.\n\nAttributes:\n- account: FHIRReference indicating the account to place this charge.\n- bodysite: CodeableConcept indicating anatomical location if applicable.\n- code: CodeableConcept that identifies the charge, such as a billing code.\n- context: FHIRReference for the Encounter or Episode associated with this charge.\n- costCenter: FHIRReference representing the organization that owns future revenue from this charge.\n- definitionCanonical: List of strings defining the resource code for this charge item.\n- definitionUri: List of strings providing defining information about the charge's code.\n- enteredDate: FHIRDateTime string indicating when the charge item was entered.\n- enterer: FHIRReference for the individual who entered the charge.\n- factorOverride: float for any factor overriding associated rules.\n- identifier: List of Identifier items for business identification of the item.\n- note: List of Annotation items containing comments about the ChargeItem.\n- occurrenceDateTime: FHIRDateTime string for when the service was charged.\n- occurrencePeriod: Period indicating when the service was applied.\n- occurrenceTiming: Timing indicating when the charged service was performed.\n- overrideReason: string indicating reasons for overriding pricing.\n- partOf: List of FHIRReference for ChargeItems that are part of this one.\n- performer: List of ChargeItemPerformer indicating who performed the service.\n- performingOrganization: FHIRReference for the organization providing the service.\n- priceOverride: Money type for prices that override standard rules.\n- productCodeableConcept: CodeableConcept for the product charged.\n- productReference: FHIRReference for the charged product.\n- quantity: Quantity type representing the amount billed.\n- reason: List of CodeableConcept for the rationale behind the charge.\n- requestingOrganization: FHIRReference for the organization requesting the service.\n- service: List of FHIRReference for the services rendered and charged.\n- status: string indicating the current status of the charge item (e.g., planned, billed).\n- subject: FHIRReference for the individual receiving the service.\n- supportingInformation: List of FHIRReference for additional information related to the charge.\n\nThe ChargeItem is primarily used to facilitate billing and internal cost allocation related to healthcare services.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ChargeItem(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance of the FHIRAbstractBase class to a JSON dictionary format based on its registered properties.\n\nThis method inspects the properties defined in `elementProperties()`, ensuring that required properties are not `None` (and lists are not empty) and that non-optional properties match the expected types. It raises a `FHIRValidationError` if properties have incorrect types or if required properties are missing during this process.\n\nReturns:\n    dict: A validated JSON serializable dictionary representing the current instance.\n\nRaises:\n    FHIRValidationError: If any property has an incorrect type, or if any required (non-optional) property is missing.\n\nThe method utilizes two main sets:\n- `found`: keeps track of which properties have been successfully found and serialized.\n- `nonoptionals`: tracks the properties that are marked as non-optional and must be provided with a value during serialization.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance of the FHIRAbstractBase class to a JSON dictionary format based on its registered properties.\n\nThis method inspects the properties defined in `elementProperties()`, ensuring that required properties are not `None` (and lists are not empty) and that non-optional properties match the expected types. It raises a `FHIRValidationError` if properties have incorrect types or if required properties are missing during this process.\n\nReturns:\n    dict: A validated JSON serializable dictionary representing the current instance.\n\nRaises:\n    FHIRValidationError: If any property has an incorrect type, or if any required (non-optional) property is missing.\n\nThe method utilizes two main sets:\n- `found`: keeps track of which properties have been successfully found and serialized.\n- `nonoptionals`: tracks the properties that are marked as non-optional and must be provided with a value during serialization.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance, allowing for the representation of FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the FHIR datetime value in ISO 8601 format. Defaults to None.\n\nSide Effects:\n- Initializes the `datetime` attribute as None, which will store the corresponding Python datetime object after processing the input value.\n- Calls the parent class's initializer (`super().__init__(jsonval)`) to handle any initialization logic defined in the FHIRDate class, ensuring compatibility with existing functionality.\n\nThis constructor relies on the FHIRDate class to parse the input, which is essential for converting the FHIR datetime format into a usable form within the FHIRDateTime class.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance, allowing for the representation of FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the FHIR datetime value in ISO 8601 format. Defaults to None.\n\nSide Effects:\n- Initializes the `datetime` attribute as None, which will store the corresponding Python datetime object after processing the input value.\n- Calls the parent class's initializer (`super().__init__(jsonval)`) to handle any initialization logic defined in the FHIRDate class, ensuring compatibility with existing functionality.\n\nThis constructor relies on the FHIRDate class to parse the input, which is essential for converting the FHIR datetime format into a usable form within the FHIRDateTime class.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON-compatible dictionary representation.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute in the returned JSON. It utilizes the `super()` function to call the parent class's JSON serialization, ensuring that all base class attributes are included.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType` set to the class's `resource_type`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON-compatible dictionary representation.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute in the returned JSON. It utilizes the `super()` function to call the parent class's JSON serialization, ensuring that all base class attributes are included.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType` set to the class's `resource_type`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance with optional JSON dictionary initialization.\n\nThis constructor sets up the DomainResource attributes, which include `contained`, `extension`, `modifierExtension`, and `text`. Each of these attributes corresponds to components defined in the FHIR specification. The `contained` attribute represents inline resources, while `extension` and `modifierExtension` hold additional content defined by implementations, with the latter being extensions that cannot be ignored. The `text` attribute provides a human-readable summary of the resource's content.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, default values (None) are set.\n- strict (bool, default=True): Determines whether validation errors will raise a TypeError. If set to False, validation errors are ignored.\n\nRaises:\n- FHIRValidationError: If validation errors occur and strict is True.\n\nThis method extends from the `Resource` class, initializing base resource properties through a call to the superclass constructor, ensuring all inherited functionality is properly set up.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance with optional JSON dictionary initialization.\n\nThis constructor sets up the DomainResource attributes, which include `contained`, `extension`, `modifierExtension`, and `text`. Each of these attributes corresponds to components defined in the FHIR specification. The `contained` attribute represents inline resources, while `extension` and `modifierExtension` hold additional content defined by implementations, with the latter being extensions that cannot be ignored. The `text` attribute provides a human-readable summary of the resource's content.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, default values (None) are set.\n- strict (bool, default=True): Determines whether validation errors will raise a TypeError. If set to False, validation errors are ignored.\n\nRaises:\n- FHIRValidationError: If validation errors occur and strict is True.\n\nThis method extends from the `Resource` class, initializing base resource properties through a call to the superclass constructor, ensuring all inherited functionality is properly set up.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/chargeitem.py:ChargeItem:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/chargeitem.py": {
        "ChargeItem.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(ChargeItem, self).elementProperties()\n        js.extend([('account', 'account', fhirreference.FHIRReference, True, None, False), ('bodysite', 'bodysite', codeableconcept.CodeableConcept, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('context', 'context', fhirreference.FHIRReference, False, None, False), ('costCenter', 'costCenter', fhirreference.FHIRReference, False, None, False), ('definitionCanonical', 'definitionCanonical', str, True, None, False), ('definitionUri', 'definitionUri', str, True, None, False), ('enteredDate', 'enteredDate', fhirdatetime.FHIRDateTime, False, None, False), ('enterer', 'enterer', fhirreference.FHIRReference, False, None, False), ('factorOverride', 'factorOverride', float, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('occurrenceDateTime', 'occurrenceDateTime', fhirdatetime.FHIRDateTime, False, 'occurrence', False), ('occurrencePeriod', 'occurrencePeriod', period.Period, False, 'occurrence', False), ('occurrenceTiming', 'occurrenceTiming', timing.Timing, False, 'occurrence', False), ('overrideReason', 'overrideReason', str, False, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('performer', 'performer', ChargeItemPerformer, True, None, False), ('performingOrganization', 'performingOrganization', fhirreference.FHIRReference, False, None, False), ('priceOverride', 'priceOverride', money.Money, False, None, False), ('productCodeableConcept', 'productCodeableConcept', codeableconcept.CodeableConcept, False, 'product', False), ('productReference', 'productReference', fhirreference.FHIRReference, False, 'product', False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('reason', 'reason', codeableconcept.CodeableConcept, True, None, False), ('requestingOrganization', 'requestingOrganization', fhirreference.FHIRReference, False, None, False), ('service', 'service', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('supportingInformation', 'supportingInformation', fhirreference.FHIRReference, True, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class ChargeItem(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/chargeitem_test.py:ChargeItemTests:testChargeItem1": {
      "tests/models/chargeitem_test.py:ChargeItemTests:instantiate_from": {
        "fhirclient/models/chargeitem.py:ChargeItem:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/chargeitem.py:ChargeItem:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/chargeitem_test.py:ChargeItemTests:implChargeItem1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/chargeitem.py:ChargeItem:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/chargeitem.py:ChargeItem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/chargeitem.py:ChargeItem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/chargeitem_test.py:ChargeItemTests:instantiate_from": {
      "fhirclient/models/chargeitem.py:ChargeItem:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/chargeitem.py:ChargeItem:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-chargeitem_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 chargeitem.py\n        \u2502   \u2514\u2500\u2500 ChargeItem.__init__\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and testing of FHIR (Fast Healthcare Interoperability Resources) ChargeItem resources, ensuring adherence to the FHIR 4.0.1 specification. It enables instantiation and verification of ChargeItem data, which is primarily used to represent financial details associated with healthcare services, such as billing codes, costs, discounts, and associated metadata like notes, periods, and performers. By providing structured tests for data accuracy, consistency, and compliance, this module enhances developers' ability to reliably integrate and manage ChargeItem resources within healthcare systems. It solves the problem of ensuring data integrity and standardization when implementing FHIR-based solutions for billing and financial transactions in healthcare environments.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance, storing the date derived from the given JSON value (if provided).\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a date in FHIR format. If provided, it must match a predefined regex format. If the format is invalid or not a string, an error is raised.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the date parsed from the jsonval, or None if jsonval is not provided.\n- origval (Union[str, None]): Stores the original JSON string used for initialization.\n\nConstants:\n- _REGEX: A compiled regular expression for validating the format of the provided FHIR date string; defined as a class-level attribute and used to ensure the format aligns with FHIR specifications.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate. If the original value (`origval`) is not None, it will be returned. Otherwise, if `origval` is None, the method returns the standardized ISO 8601 string representation of the date using the `isostring` property. \n\nThe `origval` attribute is initialized during object instantiation and stores the initial JSON string input. The `isostring` property computes the ISO 8601 format based on the internal `date` representation, providing a way to access the date in a universally recognized format while accounting for potential discrepancies in partial dates.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nHandles attribute assignment for FHIRDate instances.\n\nParameters:\n- prop (str): The name of the property being set.\n- value (Any): The value to set for the specified property.\n\nThe method primarily manages the synchronization between the `date` attribute and the `_FIELD` attribute (which is set to \"date\"). If either of these properties is being modified, it clears the `origval` attribute to ensure consistency. It achieves this by utilizing the `object.__setattr__` method to bypass potential issues with infinite recursion during assignment. \n\nDependencies:\n- `_FIELD`: A class-level constant defined in FHIRDate that holds the string \"date\". It is used here to facilitate the synchronization of the `date` attribute and its internal representation.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/chargeitem.py\n\n- CLASS METHOD: ChargeItem.__init__\n  - CLASS SIGNATURE: class ChargeItem(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a ChargeItem instance representing healthcare provider products associated with a patient. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the ChargeItem. \n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid values; if False, allows invalid values.\n\nAttributes:\n- account: FHIRReference indicating the account to place this charge.\n- bodysite: CodeableConcept indicating anatomical location if applicable.\n- code: CodeableConcept that identifies the charge, such as a billing code.\n- context: FHIRReference for the Encounter or Episode associated with this charge.\n- costCenter: FHIRReference representing the organization that owns future revenue from this charge.\n- definitionCanonical: List of strings defining the resource code for this charge item.\n- definitionUri: List of strings providing defining information about the charge's code.\n- enteredDate: FHIRDateTime string indicating when the charge item was entered.\n- enterer: FHIRReference for the individual who entered the charge.\n- factorOverride: float for any factor overriding associated rules.\n- identifier: List of Identifier items for business identification of the item.\n- note: List of Annotation items containing comments about the ChargeItem.\n- occurrenceDateTime: FHIRDateTime string for when the service was charged.\n- occurrencePeriod: Period indicating when the service was applied.\n- occurrenceTiming: Timing indicating when the charged service was performed.\n- overrideReason: string indicating reasons for overriding pricing.\n- partOf: List of FHIRReference for ChargeItems that are part of this one.\n- performer: List of ChargeItemPerformer indicating who performed the service.\n- performingOrganization: FHIRReference for the organization providing the service.\n- priceOverride: Money type for prices that override standard rules.\n- productCodeableConcept: CodeableConcept for the product charged.\n- productReference: FHIRReference for the charged product.\n- quantity: Quantity type representing the amount billed.\n- reason: List of CodeableConcept for the rationale behind the charge.\n- requestingOrganization: FHIRReference for the organization requesting the service.\n- service: List of FHIRReference for the services rendered and charged.\n- status: string indicating the current status of the charge item (e.g., planned, billed).\n- subject: FHIRReference for the individual receiving the service.\n- supportingInformation: List of FHIRReference for additional information related to the charge.\n\nThe ChargeItem is primarily used to facilitate billing and internal cost allocation related to healthcare services.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance of the FHIRAbstractBase class to a JSON dictionary format based on its registered properties.\n\nThis method inspects the properties defined in `elementProperties()`, ensuring that required properties are not `None` (and lists are not empty) and that non-optional properties match the expected types. It raises a `FHIRValidationError` if properties have incorrect types or if required properties are missing during this process.\n\nReturns:\n    dict: A validated JSON serializable dictionary representing the current instance.\n\nRaises:\n    FHIRValidationError: If any property has an incorrect type, or if any required (non-optional) property is missing.\n\nThe method utilizes two main sets:\n- `found`: keeps track of which properties have been successfully found and serialized.\n- `nonoptionals`: tracks the properties that are marked as non-optional and must be provided with a value during serialization.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance, allowing for the representation of FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the FHIR datetime value in ISO 8601 format. Defaults to None.\n\nSide Effects:\n- Initializes the `datetime` attribute as None, which will store the corresponding Python datetime object after processing the input value.\n- Calls the parent class's initializer (`super().__init__(jsonval)`) to handle any initialization logic defined in the FHIRDate class, ensuring compatibility with existing functionality.\n\nThis constructor relies on the FHIRDate class to parse the input, which is essential for converting the FHIR datetime format into a usable form within the FHIRDateTime class.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON-compatible dictionary representation.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute in the returned JSON. It utilizes the `super()` function to call the parent class's JSON serialization, ensuring that all base class attributes are included.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the `resourceType` set to the class's `resource_type`.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance with optional JSON dictionary initialization.\n\nThis constructor sets up the DomainResource attributes, which include `contained`, `extension`, `modifierExtension`, and `text`. Each of these attributes corresponds to components defined in the FHIR specification. The `contained` attribute represents inline resources, while `extension` and `modifierExtension` hold additional content defined by implementations, with the latter being extensions that cannot be ignored. The `text` attribute provides a human-readable summary of the resource's content.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, default values (None) are set.\n- strict (bool, default=True): Determines whether validation errors will raise a TypeError. If set to False, validation errors are ignored.\n\nRaises:\n- FHIRValidationError: If validation errors occur and strict is True.\n\nThis method extends from the `Resource` class, initializing base resource properties through a call to the superclass constructor, ensuring all inherited functionality is properly set up.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/chargeitem.py": "from . import domainresource\n\nclass ChargeItem(domainresource.DomainResource):\n    \"\"\" Item containing charge code(s) associated with the provision of healthcare\n    provider products.\n    \n    The resource ChargeItem describes the provision of healthcare provider\n    products for a certain patient, therefore referring not only to the\n    product, but containing in addition details of the provision, like date,\n    time, amounts and participating organizations and persons. Main Usage of\n    the ChargeItem is to enable the billing process and internal cost\n    allocation.\n    \"\"\"\n    resource_type = 'ChargeItem'\n\n    def elementProperties(self):\n        js = super(ChargeItem, self).elementProperties()\n        js.extend([('account', 'account', fhirreference.FHIRReference, True, None, False), ('bodysite', 'bodysite', codeableconcept.CodeableConcept, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('context', 'context', fhirreference.FHIRReference, False, None, False), ('costCenter', 'costCenter', fhirreference.FHIRReference, False, None, False), ('definitionCanonical', 'definitionCanonical', str, True, None, False), ('definitionUri', 'definitionUri', str, True, None, False), ('enteredDate', 'enteredDate', fhirdatetime.FHIRDateTime, False, None, False), ('enterer', 'enterer', fhirreference.FHIRReference, False, None, False), ('factorOverride', 'factorOverride', float, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('occurrenceDateTime', 'occurrenceDateTime', fhirdatetime.FHIRDateTime, False, 'occurrence', False), ('occurrencePeriod', 'occurrencePeriod', period.Period, False, 'occurrence', False), ('occurrenceTiming', 'occurrenceTiming', timing.Timing, False, 'occurrence', False), ('overrideReason', 'overrideReason', str, False, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('performer', 'performer', ChargeItemPerformer, True, None, False), ('performingOrganization', 'performingOrganization', fhirreference.FHIRReference, False, None, False), ('priceOverride', 'priceOverride', money.Money, False, None, False), ('productCodeableConcept', 'productCodeableConcept', codeableconcept.CodeableConcept, False, 'product', False), ('productReference', 'productReference', fhirreference.FHIRReference, False, 'product', False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('reason', 'reason', codeableconcept.CodeableConcept, True, None, False), ('requestingOrganization', 'requestingOrganization', fhirreference.FHIRReference, False, None, False), ('service', 'service', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('supportingInformation', 'supportingInformation', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ChargeItemPerformer(backboneelement.BackboneElement):\n    \"\"\" Who performed charged service.\n    \n    Indicates who or what performed or participated in the charged service.\n    \"\"\"\n    resource_type = 'ChargeItemPerformer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actor = None\n        ' Individual who was performing.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.function = None\n        ' What type of performance was done.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ChargeItemPerformer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ChargeItemPerformer, self).elementProperties()\n        js.extend([('actor', 'actor', fhirreference.FHIRReference, False, None, True), ('function', 'function', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\nfrom . import timing",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}