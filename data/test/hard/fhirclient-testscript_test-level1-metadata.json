{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-testscript_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/testscript_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import testscript\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass TestScriptTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        return testscript.TestScript(js)\n    \n    def testTestScript1(self):\n        inst = self.instantiate_from(\"testscript-example-search.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript1(inst2)\n    \n    def implTestScript1(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertEqual(inst.description, \"TestScript example resource with simple Patient search test. The read tests will utilize user defined dynamic variables that will hold the Patient search parameter values.\")\n        self.assertTrue(inst.experimental)\n        self.assertFalse(inst.fixture[0].autocreate)\n        self.assertFalse(inst.fixture[0].autodelete)\n        self.assertEqual(inst.fixture[0].id, \"fixture-patient-create\")\n        self.assertEqual(inst.id, \"testscript-example-search\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9881\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Search Operation\")\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#search\")\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"TestScript Example Search\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient Search Operation\")\n        self.assertEqual(inst.setup.action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.setup.action[0].operation.description, \"Test simple search to verify server support.\")\n        self.assertTrue(inst.setup.action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[0].operation.params, \"?family=DONTEXPECTAMATCH&given=DONTEXPECTAMATCH\")\n        self.assertEqual(inst.setup.action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[0].operation.type.code, \"search\")\n        self.assertEqual(inst.setup.action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.description, \"Confirm that the request url contains the family search parameter.\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.direction, \"request\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.operator, \"contains\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.requestURL, \"family\")\n        self.assertFalse(inst.setup.action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[2].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.setup.action[2].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[2].assert_fhir.responseCode, \"200\")\n        self.assertFalse(inst.setup.action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[3].assert_fhir.description, \"Confirm that the returned resource type is Bundle.\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.resource, \"Bundle\")\n        self.assertFalse(inst.setup.action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[4].assert_fhir.description, \"Confirm that the returned Bundle correctly defines the navigation links.\")\n        self.assertTrue(inst.setup.action[4].assert_fhir.navigationLinks)\n        self.assertFalse(inst.setup.action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.test[0].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Create a Patient resource and capture the returned HTTP Header Location.\")\n        self.assertTrue(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.responseId, \"PatientCreateResponse\")\n        self.assertEqual(inst.test[0].action[0].operation.sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"create\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 201(Created).\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.response, \"created\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the returned HTTP Header Location is present.\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.headerField, \"Location\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.operator, \"notEmpty\")\n        self.assertFalse(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].operation.accept, \"xml\")\n        self.assertEqual(inst.test[0].action[3].operation.description, \"Read the created Patient using the captured Location URL value.\")\n        self.assertTrue(inst.test[0].action[3].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[3].operation.type.code, \"read\")\n        self.assertEqual(inst.test[0].action[3].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[3].operation.url, \"${PatientCreateLocation}\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[5].assert_fhir.description, \"Confirm that the returned resource type is Patient.\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.resource, \"Patient\")\n        self.assertFalse(inst.test[0].action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Create a Patient resource and capture the returned HTTP Header Location. Then search for (read) that Patient using the Location URL value and validate the response.\")\n        self.assertEqual(inst.test[0].id, \"01-PatientCreateSearch\")\n        self.assertEqual(inst.test[0].name, \"Patient Create Search\")\n        self.assertEqual(inst.test[1].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[1].action[0].operation.description, \"Search for Patient resources on the destination test system.\")\n        self.assertTrue(inst.test[1].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[1].action[0].operation.params, \"?family=${PatientSearchFamilyName}&given=${PatientSearchGivenName}\")\n        self.assertEqual(inst.test[1].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[1].action[0].operation.type.code, \"search\")\n        self.assertEqual(inst.test[1].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[1].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[2].assert_fhir.contentType, \"xml\")\n        self.assertEqual(inst.test[1].action[2].assert_fhir.description, \"Confirm that the returned format is XML.\")\n        self.assertFalse(inst.test[1].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[3].assert_fhir.description, \"Confirm that the returned resource type is Bundle.\")\n        self.assertEqual(inst.test[1].action[3].assert_fhir.resource, \"Bundle\")\n        self.assertFalse(inst.test[1].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[4].assert_fhir.description, \"Confirm that the returned Bundle conforms to the base FHIR specification.\")\n        self.assertEqual(inst.test[1].action[4].assert_fhir.validateProfileId, \"bundle-profile\")\n        self.assertFalse(inst.test[1].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[5].assert_fhir.description, \"Confirm that the returned Bundle type equals 'searchset'.\")\n        self.assertEqual(inst.test[1].action[5].assert_fhir.operator, \"equals\")\n        self.assertEqual(inst.test[1].action[5].assert_fhir.path, \"fhir:Bundle/fhir:type/@value\")\n        self.assertEqual(inst.test[1].action[5].assert_fhir.value, \"searchset\")\n        self.assertFalse(inst.test[1].action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[6].assert_fhir.description, \"Confirm that the returned Bundle total is greater than or equal to the number of returned entries.\")\n        self.assertEqual(inst.test[1].action[6].assert_fhir.expression, \"Bundle.total.toInteger() >= entry.count()\")\n        self.assertFalse(inst.test[1].action[6].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].description, \"Search for Patient resources using the user defined dynamic variables ${PatientSearchFamilyName} and ${PatientSearchGivenName} and validate response.\")\n        self.assertEqual(inst.test[1].id, \"02-PatientSearchDynamic\")\n        self.assertEqual(inst.test[1].name, \"Patient Search Dynamic\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example-search\")\n        self.assertEqual(inst.variable[0].headerField, \"Location\")\n        self.assertEqual(inst.variable[0].name, \"PatientCreateLocation\")\n        self.assertEqual(inst.variable[0].sourceId, \"PatientCreateResponse\")\n        self.assertEqual(inst.variable[1].description, \"Enter patient search criteria for a known family name on the target system\")\n        self.assertEqual(inst.variable[1].hint, \"[Family name]\")\n        self.assertEqual(inst.variable[1].name, \"PatientSearchFamilyName\")\n        self.assertEqual(inst.variable[2].description, \"Enter patient search criteria for a known given name on the target system\")\n        self.assertEqual(inst.variable[2].hint, \"[Given name]\")\n        self.assertEqual(inst.variable[2].name, \"PatientSearchGivenName\")\n        self.assertEqual(inst.variable[3].description, \"Evaluate the returned Patient searchset Bundle.total value\")\n        self.assertEqual(inst.variable[3].expression, \"Bundle.total.toInteger()\")\n        self.assertEqual(inst.variable[3].name, \"PatientSearchBundleTotal\")\n        self.assertEqual(inst.version, \"1.0\")\n    \n    def testTestScript2(self):\n        inst = self.instantiate_from(\"testscript-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript2(inst2)\n    \n    def implTestScript2(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertEqual(inst.description, \"TestScript example resource with setup to delete if present and create a new instance of a Patient; and single test definition to read the created Patient with various asserts.\")\n        self.assertTrue(inst.experimental)\n        self.assertFalse(inst.fixture[0].autocreate)\n        self.assertFalse(inst.fixture[0].autodelete)\n        self.assertEqual(inst.fixture[0].id, \"fixture-patient-create\")\n        self.assertFalse(inst.fixture[1].autocreate)\n        self.assertFalse(inst.fixture[1].autodelete)\n        self.assertEqual(inst.fixture[1].id, \"fixture-patient-minimum\")\n        self.assertEqual(inst.id, \"testscript-example\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9876\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Update, Read and Delete Operations\")\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#delete\")\n        self.assertEqual(inst.metadata.capability[0].link[1], \"http://hl7.org/fhir/http.html#read\")\n        self.assertEqual(inst.metadata.capability[0].link[2], \"http://hl7.org/fhir/http.html#update\")\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"TestScript Example\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient Conditional Create (Update), Read and Delete Operations\")\n        self.assertEqual(inst.setup.action[0].operation.accept, \"json\")\n        self.assertEqual(inst.setup.action[0].operation.description, \"Execute a delete operation to insure the patient does not exist on the server.\")\n        self.assertTrue(inst.setup.action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[0].operation.label, \"SetupDeletePatient\")\n        self.assertEqual(inst.setup.action[0].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[0].operation.type.code, \"delete\")\n        self.assertEqual(inst.setup.action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK) or 204(No Content).\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.operator, \"in\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.responseCode, \"200,204\")\n        self.assertFalse(inst.setup.action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[2].operation.accept, \"json\")\n        self.assertEqual(inst.setup.action[2].operation.contentType, \"json\")\n        self.assertEqual(inst.setup.action[2].operation.description, \"Create patient resource on test server using the contents of fixture-patient-create\")\n        self.assertTrue(inst.setup.action[2].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[2].operation.label, \"SetupCreatePatient\")\n        self.assertEqual(inst.setup.action[2].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[2].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[2].operation.sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.setup.action[2].operation.type.code, \"update\")\n        self.assertEqual(inst.setup.action[2].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.description, \"Confirm that the returned HTTP status is 201(Created).\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.responseCode, \"201\")\n        self.assertFalse(inst.setup.action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[4].operation.description, \"Read the created patient resource on the test server using the id from fixture-patient-create. Verify contents.\")\n        self.assertTrue(inst.setup.action[4].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[4].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[4].operation.targetId, \"fixture-patient-create\")\n        self.assertEqual(inst.setup.action[4].operation.type.code, \"read\")\n        self.assertEqual(inst.setup.action[4].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.setup.action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[6].assert_fhir.compareToSourceExpression, \"Patient.name.first().family\")\n        self.assertEqual(inst.setup.action[6].assert_fhir.compareToSourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.setup.action[6].assert_fhir.description, \"Confirm that the returned Patient contains the expected family name 'Chalmers'. Uses explicit compareToSourceId reference to fixture-patient-create used to create the Patient.\")\n        self.assertEqual(inst.setup.action[6].assert_fhir.operator, \"equals\")\n        self.assertFalse(inst.setup.action[6].assert_fhir.warningOnly)\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.teardown.action[0].operation.description, \"Delete the patient resource on the test server using the id from fixture-patient-create.\")\n        self.assertTrue(inst.teardown.action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.teardown.action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.teardown.action[0].operation.targetId, \"fixture-patient-create\")\n        self.assertEqual(inst.teardown.action[0].operation.type.code, \"delete\")\n        self.assertEqual(inst.teardown.action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Read the patient resource on the test server using the id from fixture-patient-create. Prevent URL encoding of the request.\")\n        self.assertFalse(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.responseId, \"fixture-patient-read\")\n        self.assertEqual(inst.test[0].action[0].operation.targetId, \"fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.label, \"01-ReadPatientOK\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the returned HTTP Header Last-Modified is present. Warning only as the server might not support versioning.\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.headerField, \"Last-Modified\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.operator, \"notEmpty\")\n        self.assertTrue(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].assert_fhir.description, \"Confirm that the returned resource type is Patient.\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.resource, \"Patient\")\n        self.assertFalse(inst.test[0].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[4].assert_fhir.description, \"Confirm that the returned Patient conforms to the base FHIR specification.\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.validateProfileId, \"patient-profile\")\n        self.assertFalse(inst.test[0].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[5].assert_fhir.description, \"Confirm that the returned Patient contains the expected family name 'Chalmers'. Uses explicit sourceId reference to read responseId fixture.\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.operator, \"equals\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.path, \"fhir:Patient/fhir:name/fhir:family/@value\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.sourceId, \"fixture-patient-read\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.value, \"Chalmers\")\n        self.assertFalse(inst.test[0].action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[6].assert_fhir.description, \"Confirm that the returned Patient contains the expected given name 'Peter'. Uses explicit sourceId reference to read responseId fixture.\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.operator, \"equals\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.path, \"fhir:Patient/fhir:name/fhir:given/@value\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.sourceId, \"fixture-patient-read\")\n        self.assertEqual(inst.test[0].action[6].assert_fhir.value, \"Peter\")\n        self.assertFalse(inst.test[0].action[6].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[7].assert_fhir.compareToSourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.compareToSourcePath, \"fhir:Patient/fhir:name/fhir:family/@value\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.operator, \"equals\")\n        self.assertEqual(inst.test[0].action[7].assert_fhir.path, \"fhir:Patient/fhir:name/fhir:family/@value\")\n        self.assertFalse(inst.test[0].action[7].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[8].assert_fhir.compareToSourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.compareToSourcePath, \"fhir:Patient/fhir:name/fhir:given/@value\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.path, \"fhir:Patient/fhir:name/fhir:given/@value\")\n        self.assertEqual(inst.test[0].action[8].assert_fhir.sourceId, \"fixture-patient-read\")\n        self.assertFalse(inst.test[0].action[8].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[9].assert_fhir.description, \"Confirm that the returned resource contains the expected retained elements and values. Warning only to provide users with reviewable results.\")\n        self.assertEqual(inst.test[0].action[9].assert_fhir.minimumId, \"fixture-patient-minimum\")\n        self.assertTrue(inst.test[0].action[9].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Read a Patient and validate response.\")\n        self.assertEqual(inst.test[0].id, \"01-ReadPatient\")\n        self.assertEqual(inst.test[0].name, \"Read Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example\")\n        self.assertEqual(inst.useContext[0].code.code, \"focus\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"positive\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://terminology.hl7.org/CodeSystem/variant-state\")\n        self.assertEqual(inst.variable[0].name, \"createResourceId\")\n        self.assertEqual(inst.variable[0].path, \"Patient/id\")\n        self.assertEqual(inst.variable[0].sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.version, \"1.0\")\n    \n    def testTestScript3(self):\n        inst = self.instantiate_from(\"testscript-example-readtest.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript3(inst2)\n    \n    def implTestScript3(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertEqual(inst.description, \"TestScript example resource with ported Sprinkler basic read tests R001, R002, R003, R004. The read tests will utilize user defined dynamic variables that will hold the Patient resource id values.\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"testscript-example-readtest\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9879\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Read Operation\")\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#read\")\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"TestScript Example Read Test\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient Read Operation\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.test[0].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Read the known Patient resource on the destination test system using the user defined dynamic variable ${KnownPatientResourceId}.\")\n        self.assertTrue(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.params, \"/${KnownPatientResourceId}\")\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the returned format is XML.\")\n        self.assertFalse(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].assert_fhir.description, \"Confirm that the returned HTTP Header Last-Modified is present. Warning only as the server might not support versioning.\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.headerField, \"Last-Modified\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.operator, \"notEmpty\")\n        self.assertTrue(inst.test[0].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[4].assert_fhir.description, \"Confirm that the returned resource type is Patient.\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.resource, \"Patient\")\n        self.assertFalse(inst.test[0].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[5].assert_fhir.description, \"Confirm that the returned Patient conforms to the base FHIR specification.\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.validateProfileId, \"patient-profile\")\n        self.assertFalse(inst.test[0].action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Read a known Patient and validate response.\")\n        self.assertEqual(inst.test[0].id, \"R001\")\n        self.assertEqual(inst.test[0].name, \"Sprinkler Read Test R001\")\n        self.assertEqual(inst.test[1].action[0].operation.accept, \"xml\")\n        self.assertTrue(inst.test[1].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[1].action[0].operation.params, \"/1\")\n        self.assertEqual(inst.test[1].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[1].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[1].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 404(Not Found).\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.response, \"notFound\")\n        self.assertFalse(inst.test[1].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].description, \"Read an unknown Resource Type and validate response.\")\n        self.assertEqual(inst.test[1].id, \"R002\")\n        self.assertEqual(inst.test[1].name, \"Sprinkler Read Test R002\")\n        self.assertEqual(inst.test[2].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[2].action[0].operation.description, \"Attempt to read the non-existing Patient resource on the destination test system using the user defined dynamic variable ${NonExistsPatientResourceId}.\")\n        self.assertTrue(inst.test[2].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[2].action[0].operation.params, \"/${NonExistsPatientResourceId}\")\n        self.assertEqual(inst.test[2].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[2].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[2].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[2].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 404(Not Found).\")\n        self.assertEqual(inst.test[2].action[1].assert_fhir.response, \"notFound\")\n        self.assertFalse(inst.test[2].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[2].description, \"Read a known, non-existing Patient and validate response.\")\n        self.assertEqual(inst.test[2].id, \"R003\")\n        self.assertEqual(inst.test[2].name, \"Sprinkler Read Test R003\")\n        self.assertEqual(inst.test[3].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[3].action[0].operation.description, \"Attempt to read a Patient resource on the destination test system using known bad formatted resource id.\")\n        self.assertTrue(inst.test[3].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[3].action[0].operation.params, \"/ID-may-not-contain-CAPITALS\")\n        self.assertEqual(inst.test[3].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[3].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[3].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[3].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 400(Bad Request).\")\n        self.assertEqual(inst.test[3].action[1].assert_fhir.response, \"bad\")\n        self.assertFalse(inst.test[3].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[3].description, \"Read a Patient using a known bad formatted resource id and validate response.\")\n        self.assertEqual(inst.test[3].id, \"R004\")\n        self.assertEqual(inst.test[3].name, \"Sprinkler Read Test R004\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example-readtest\")\n        self.assertEqual(inst.variable[0].defaultValue, \"example\")\n        self.assertEqual(inst.variable[0].name, \"KnownPatientResourceId\")\n        self.assertEqual(inst.variable[1].defaultValue, \"does-not-exist\")\n        self.assertEqual(inst.variable[1].name, \"NonExistsPatientResourceId\")\n        self.assertEqual(inst.version, \"1.0\")\n    \n    def testTestScript4(self):\n        inst = self.instantiate_from(\"testscript-example-multisystem.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript4(inst2)\n    \n    def implTestScript4(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertEqual(inst.destination[0].index, 1)\n        self.assertEqual(inst.destination[0].profile.code, \"FHIR-Server\")\n        self.assertEqual(inst.destination[1].index, 2)\n        self.assertEqual(inst.destination[1].profile.code, \"FHIR-Server\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"testscript-example-multisystem\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9878\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Read Operation\")\n        self.assertEqual(inst.metadata.capability[0].destination, 1)\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#read\")\n        self.assertEqual(inst.metadata.capability[0].origin[0], 1)\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.capability[1].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[1].description, \"Patient Read Operation\")\n        self.assertEqual(inst.metadata.capability[1].destination, 2)\n        self.assertEqual(inst.metadata.capability[1].link[0], \"http://hl7.org/fhir/http.html#read\")\n        self.assertEqual(inst.metadata.capability[1].origin[0], 1)\n        self.assertTrue(inst.metadata.capability[1].required)\n        self.assertFalse(inst.metadata.capability[1].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"testscript-example-multisystem\")\n        self.assertEqual(inst.origin[0].index, 1)\n        self.assertEqual(inst.origin[0].profile.code, \"FHIR-Client\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient Read Operation\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.test[0].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Read a Patient from the first destination test system and perform basic validation.\")\n        self.assertEqual(inst.test[0].action[0].operation.destination, 1)\n        self.assertTrue(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.origin, 1)\n        self.assertEqual(inst.test[0].action[0].operation.params, \"/${Dest1PatientResourceId}\")\n        self.assertEqual(inst.test[0].action[0].operation.requestId, \"request-read-patient-01\")\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the request method GET was sent by the client system under test.\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.requestMethod, \"get\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the client requested an Accept of xml.\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.direction, \"request\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.headerField, \"Accept\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.operator, \"contains\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.value, \"xml\")\n        self.assertFalse(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[4].assert_fhir.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.description, \"Confirm that the returned format is XML.\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.direction, \"response\")\n        self.assertFalse(inst.test[0].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[5].assert_fhir.description, \"Confirm that the returned resource type is Patient.\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[5].assert_fhir.resource, \"Patient\")\n        self.assertFalse(inst.test[0].action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Read a Patient from the first destination test system using the user defined dynamic variable ${Dest1PatientResourceId}. Perform basic validation.\")\n        self.assertEqual(inst.test[0].id, \"01-ReadPatient-Destination1\")\n        self.assertEqual(inst.test[0].name, \"ReadPatient-Destination1\")\n        self.assertEqual(inst.test[1].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[1].action[0].operation.contentType, \"xml\")\n        self.assertEqual(inst.test[1].action[0].operation.description, \"Read a Patient from the second destination test system and perform basic validation.\")\n        self.assertEqual(inst.test[1].action[0].operation.destination, 2)\n        self.assertTrue(inst.test[1].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[1].action[0].operation.origin, 1)\n        self.assertEqual(inst.test[1].action[0].operation.params, \"/${Dest2PatientResourceId}\")\n        self.assertEqual(inst.test[1].action[0].operation.requestHeader[0].field, \"Accept-Charset\")\n        self.assertEqual(inst.test[1].action[0].operation.requestHeader[0].value, \"utf-8\")\n        self.assertEqual(inst.test[1].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[1].action[0].operation.type.code, \"read\")\n        self.assertEqual(inst.test[1].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.description, \"Confirm that the client requested an Accept of xml.\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.direction, \"request\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.headerField, \"Accept\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.operator, \"contains\")\n        self.assertEqual(inst.test[1].action[1].assert_fhir.value, \"xml\")\n        self.assertFalse(inst.test[1].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[2].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[1].action[2].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[1].action[2].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[1].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[3].assert_fhir.contentType, \"xml\")\n        self.assertEqual(inst.test[1].action[3].assert_fhir.description, \"Confirm that the returned format is XML.\")\n        self.assertEqual(inst.test[1].action[3].assert_fhir.direction, \"response\")\n        self.assertFalse(inst.test[1].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].action[4].assert_fhir.description, \"Confirm that the returned resource type is Patient.\")\n        self.assertEqual(inst.test[1].action[4].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[1].action[4].assert_fhir.resource, \"Patient\")\n        self.assertFalse(inst.test[1].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[1].description, \"Read a Patient from the second destination test system using the user defined dynamic variable ${Dest2PatientResourceId}. Perform basic validation.\")\n        self.assertEqual(inst.test[1].id, \"02-ReadPatient-Destination2\")\n        self.assertEqual(inst.test[1].name, \"ReadPatient-Destination2\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Multisystem Test Script\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example-multisystem\")\n        self.assertEqual(inst.variable[0].defaultValue, \"example\")\n        self.assertEqual(inst.variable[0].name, \"Dest1PatientResourceId\")\n        self.assertEqual(inst.variable[1].defaultValue, \"example\")\n        self.assertEqual(inst.variable[1].name, \"Dest2PatientResourceId\")\n        self.assertEqual(inst.version, \"1.0\")\n    \n    def testTestScript5(self):\n        inst = self.instantiate_from(\"testscript-example-update.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript5(inst2)\n    \n    def implTestScript5(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertEqual(inst.description, \"TestScript example resource with setup to delete if present and create a new instance of a Patient; and single test definition to update that Patient with various asserts.\")\n        self.assertTrue(inst.experimental)\n        self.assertFalse(inst.fixture[0].autocreate)\n        self.assertFalse(inst.fixture[0].autodelete)\n        self.assertEqual(inst.fixture[0].id, \"fixture-patient-create\")\n        self.assertFalse(inst.fixture[1].autocreate)\n        self.assertFalse(inst.fixture[1].autodelete)\n        self.assertEqual(inst.fixture[1].id, \"fixture-patient-update\")\n        self.assertEqual(inst.id, \"testscript-example-update\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9882\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Update and Delete Operations\")\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#update\")\n        self.assertEqual(inst.metadata.capability[0].link[1], \"http://hl7.org/fhir/http.html#delete\")\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"TestScript Example Update\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient (Conditional) Create, Update, Delete Operations\")\n        self.assertEqual(inst.setup.action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.setup.action[0].operation.description, \"Execute a delete operation to insure the patient does not exist on the server.\")\n        self.assertTrue(inst.setup.action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[0].operation.label, \"SetupDeletePatient\")\n        self.assertEqual(inst.setup.action[0].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[0].operation.type.code, \"delete\")\n        self.assertEqual(inst.setup.action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK) or 204(No Content).\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.operator, \"in\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.responseCode, \"200,204\")\n        self.assertFalse(inst.setup.action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[2].operation.accept, \"xml\")\n        self.assertEqual(inst.setup.action[2].operation.contentType, \"xml\")\n        self.assertEqual(inst.setup.action[2].operation.description, \"Create patient resource on test server using the contents of fixture-patient-create\")\n        self.assertTrue(inst.setup.action[2].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[2].operation.label, \"SetupCreatePatient\")\n        self.assertEqual(inst.setup.action[2].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[2].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[2].operation.sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.setup.action[2].operation.type.code, \"update\")\n        self.assertEqual(inst.setup.action[2].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.description, \"Confirm that the returned HTTP status is 201(Created).\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.responseCode, \"201\")\n        self.assertFalse(inst.setup.action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.test[0].action[0].operation.accept, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Update patient resource on test server using the contents of fixture-patient-update\")\n        self.assertTrue(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.label, \"SetupUpdatePatient\")\n        self.assertEqual(inst.test[0].action[0].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.sourceId, \"fixture-patient-update\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"update\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.contentType, \"xml\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the returned format is XML.\")\n        self.assertFalse(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].assert_fhir.description, \"Confirm that the returned HTTP Header Last-Modified is present. Warning only as the server might not support versioning.\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.headerField, \"Last-Modified\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.operator, \"notEmpty\")\n        self.assertTrue(inst.test[0].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Update a Patient and validate response.\")\n        self.assertEqual(inst.test[0].id, \"01-UpdatePatient\")\n        self.assertEqual(inst.test[0].name, \"Update Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example-update\")\n        self.assertEqual(inst.variable[0].name, \"createResourceId\")\n        self.assertEqual(inst.variable[0].path, \"Patient/id\")\n        self.assertEqual(inst.variable[0].sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.version, \"1.0\")\n    \n    def testTestScript6(self):\n        inst = self.instantiate_from(\"testscript-example-history.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a TestScript instance\")\n        self.implTestScript6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"TestScript\", js[\"resourceType\"])\n        inst2 = testscript.TestScript(js)\n        self.implTestScript6(inst2)\n    \n    def implTestScript6(self, inst):\n        self.assertEqual(inst.contact[0].name, \"Support\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"support@HL7.org\")\n        self.assertEqual(inst.copyright, \"\u00a9 HL7.org 2011+\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-01-18\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-01-18\")\n        self.assertTrue(inst.experimental)\n        self.assertFalse(inst.fixture[0].autocreate)\n        self.assertFalse(inst.fixture[0].autodelete)\n        self.assertEqual(inst.fixture[0].id, \"fixture-patient-create\")\n        self.assertFalse(inst.fixture[1].autocreate)\n        self.assertFalse(inst.fixture[1].autodelete)\n        self.assertEqual(inst.fixture[1].id, \"fixture-patient-update\")\n        self.assertEqual(inst.id, \"testscript-example-history\")\n        self.assertEqual(inst.identifier.system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier.value, \"urn:oid:1.3.6.1.4.1.21367.2005.3.7.9877\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.metadata.capability[0].capabilities, \"CapabilityStatement/example\")\n        self.assertEqual(inst.metadata.capability[0].description, \"Patient Update, Delete and History (Instance) Operations\")\n        self.assertEqual(inst.metadata.capability[0].link[0], \"http://hl7.org/fhir/http.html#update\")\n        self.assertEqual(inst.metadata.capability[0].link[1], \"http://hl7.org/fhir/http.html#delete\")\n        self.assertEqual(inst.metadata.capability[0].link[2], \"http://hl7.org/fhir/http.html#history\")\n        self.assertTrue(inst.metadata.capability[0].required)\n        self.assertFalse(inst.metadata.capability[0].validated)\n        self.assertEqual(inst.metadata.link[0].description, \"Demographics and other administrative information about an individual or animal receiving care or other health-related services.\")\n        self.assertEqual(inst.metadata.link[0].url, \"http://hl7.org/fhir/patient.html\")\n        self.assertEqual(inst.name, \"TestScript Example History\")\n        self.assertEqual(inst.publisher, \"HL7\")\n        self.assertEqual(inst.purpose, \"Patient (Conditional) Create, Update, Delete and History (Instance) Operations\")\n        self.assertEqual(inst.setup.action[0].operation.accept, \"json\")\n        self.assertEqual(inst.setup.action[0].operation.description, \"Execute a delete operation to insure the patient does not exist on the server.\")\n        self.assertTrue(inst.setup.action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[0].operation.label, \"SetupDeletePatient\")\n        self.assertEqual(inst.setup.action[0].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[0].operation.type.code, \"delete\")\n        self.assertEqual(inst.setup.action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK) or 204(No Content).\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.operator, \"in\")\n        self.assertEqual(inst.setup.action[1].assert_fhir.responseCode, \"200,204\")\n        self.assertFalse(inst.setup.action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[2].operation.accept, \"json\")\n        self.assertEqual(inst.setup.action[2].operation.contentType, \"json\")\n        self.assertEqual(inst.setup.action[2].operation.description, \"Create patient resource on test server using the contents of fixture-patient-create\")\n        self.assertTrue(inst.setup.action[2].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[2].operation.label, \"SetupCreatePatient\")\n        self.assertEqual(inst.setup.action[2].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[2].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[2].operation.sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.setup.action[2].operation.type.code, \"update\")\n        self.assertEqual(inst.setup.action[2].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.description, \"Confirm that the returned HTTP status is 201(Created).\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[3].assert_fhir.responseCode, \"201\")\n        self.assertFalse(inst.setup.action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.setup.action[4].operation.accept, \"json\")\n        self.assertEqual(inst.setup.action[4].operation.contentType, \"json\")\n        self.assertEqual(inst.setup.action[4].operation.description, \"Update patient resource on test server using the contents of fixture-patient-update\")\n        self.assertTrue(inst.setup.action[4].operation.encodeRequestUrl)\n        self.assertEqual(inst.setup.action[4].operation.label, \"SetupUpdatePatient\")\n        self.assertEqual(inst.setup.action[4].operation.params, \"/${createResourceId}\")\n        self.assertEqual(inst.setup.action[4].operation.resource, \"Patient\")\n        self.assertEqual(inst.setup.action[4].operation.sourceId, \"fixture-patient-update\")\n        self.assertEqual(inst.setup.action[4].operation.type.code, \"update\")\n        self.assertEqual(inst.setup.action[4].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.setup.action[5].assert_fhir.responseCode, \"200\")\n        self.assertFalse(inst.setup.action[5].assert_fhir.warningOnly)\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.test[0].action[0].operation.accept, \"json\")\n        self.assertEqual(inst.test[0].action[0].operation.contentType, \"json\")\n        self.assertEqual(inst.test[0].action[0].operation.description, \"Get the Patient history on the test server using the id from fixture-patient-create.\")\n        self.assertTrue(inst.test[0].action[0].operation.encodeRequestUrl)\n        self.assertEqual(inst.test[0].action[0].operation.resource, \"Patient\")\n        self.assertEqual(inst.test[0].action[0].operation.targetId, \"fixture-patient-create\")\n        self.assertEqual(inst.test[0].action[0].operation.type.code, \"history\")\n        self.assertEqual(inst.test[0].action[0].operation.type.system, \"http://terminology.hl7.org/CodeSystem/testscript-operation-codes\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.description, \"Confirm that the returned HTTP status is 200(OK).\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.direction, \"response\")\n        self.assertEqual(inst.test[0].action[1].assert_fhir.response, \"okay\")\n        self.assertFalse(inst.test[0].action[1].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[2].assert_fhir.description, \"Confirm that the returned resource type is Bundle.\")\n        self.assertEqual(inst.test[0].action[2].assert_fhir.resource, \"Bundle\")\n        self.assertFalse(inst.test[0].action[2].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[3].assert_fhir.description, \"Confirm that the returned Bundle conforms to the base FHIR specification.\")\n        self.assertEqual(inst.test[0].action[3].assert_fhir.validateProfileId, \"bundle-profile\")\n        self.assertFalse(inst.test[0].action[3].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].action[4].assert_fhir.description, \"Confirm that the returned Bundle type equals 'history'.\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.operator, \"equals\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.path, \"fhir:Bundle/fhir:type/@value\")\n        self.assertEqual(inst.test[0].action[4].assert_fhir.value, \"history\")\n        self.assertFalse(inst.test[0].action[4].assert_fhir.warningOnly)\n        self.assertEqual(inst.test[0].description, \"Get the history for a known Patient and validate response.\")\n        self.assertEqual(inst.test[0].id, \"01-HistoryPatient\")\n        self.assertEqual(inst.test[0].name, \"History Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/TestScript/testscript-example-history\")\n        self.assertEqual(inst.variable[0].name, \"createResourceId\")\n        self.assertEqual(inst.variable[0].path, \"Patient/id\")\n        self.assertEqual(inst.variable[0].sourceId, \"fixture-patient-create\")\n        self.assertEqual(inst.version, \"1.0\")\n\n",
  "GT_file_code": {
    "fhirclient/models/testscript.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/TestScript).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass TestScript(domainresource.DomainResource):\n    \"\"\" Describes a set of tests.\n    \n    A structured set of tests against a FHIR server or client implementation to\n    determine compliance against the FHIR specification.\n    \"\"\"\n    \n    resource_type = \"TestScript\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the test script.\n        Type `str`. \"\"\"\n        \n        self.destination = None\n        \"\"\" An abstract server representing a destination or receiver in a\n        message exchange.\n        List of `TestScriptDestination` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.fixture = None\n        \"\"\" Fixture in the test script - by reference (uri).\n        List of `TestScriptFixture` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the test script.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for test script (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.metadata = None\n        \"\"\" Required capability that is assumed to function correctly on the\n        FHIR server being tested.\n        Type `TestScriptMetadata` (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this test script (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.origin = None\n        \"\"\" An abstract server representing a client or sender in a message\n        exchange.\n        List of `TestScriptOrigin` items (represented as `dict` in JSON). \"\"\"\n        \n        self.profile = None\n        \"\"\" Reference of the validation profile.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this test script is defined.\n        Type `str`. \"\"\"\n        \n        self.setup = None\n        \"\"\" A series of required setup operations before tests are executed.\n        Type `TestScriptSetup` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.teardown = None\n        \"\"\" A series of required clean up steps.\n        Type `TestScriptTeardown` (represented as `dict` in JSON). \"\"\"\n        \n        self.test = None\n        \"\"\" A test in this script.\n        List of `TestScriptTest` items (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this test script (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this test script, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.variable = None\n        \"\"\" Placeholder for evaluated elements.\n        List of `TestScriptVariable` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the test script.\n        Type `str`. \"\"\"\n        \n        super(TestScript, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScript, self).elementProperties()\n        js.extend([\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"destination\", \"destination\", TestScriptDestination, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"fixture\", \"fixture\", TestScriptFixture, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"metadata\", \"metadata\", TestScriptMetadata, False, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"origin\", \"origin\", TestScriptOrigin, True, None, False),\n            (\"profile\", \"profile\", fhirreference.FHIRReference, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"setup\", \"setup\", TestScriptSetup, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"teardown\", \"teardown\", TestScriptTeardown, False, None, False),\n            (\"test\", \"test\", TestScriptTest, True, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, True),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"variable\", \"variable\", TestScriptVariable, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass TestScriptDestination(backboneelement.BackboneElement):\n    \"\"\" An abstract server representing a destination or receiver in a message\n    exchange.\n    \n    An abstract server used in operations within this test script in the\n    destination element.\n    \"\"\"\n    \n    resource_type = \"TestScriptDestination\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.index = None\n        \"\"\" The index of the abstract destination server starting at 1.\n        Type `int`. \"\"\"\n        \n        self.profile = None\n        \"\"\" FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-\n        SDC-FormProcessor.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptDestination, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptDestination, self).elementProperties()\n        js.extend([\n            (\"index\", \"index\", int, False, None, True),\n            (\"profile\", \"profile\", coding.Coding, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptFixture(backboneelement.BackboneElement):\n    \"\"\" Fixture in the test script - by reference (uri).\n    \n    Fixture in the test script - by reference (uri). All fixtures are required\n    for the test script to execute.\n    \"\"\"\n    \n    resource_type = \"TestScriptFixture\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.autocreate = None\n        \"\"\" Whether or not to implicitly create the fixture during setup.\n        Type `bool`. \"\"\"\n        \n        self.autodelete = None\n        \"\"\" Whether or not to implicitly delete the fixture during teardown.\n        Type `bool`. \"\"\"\n        \n        self.resource = None\n        \"\"\" Reference of the resource.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptFixture, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptFixture, self).elementProperties()\n        js.extend([\n            (\"autocreate\", \"autocreate\", bool, False, None, True),\n            (\"autodelete\", \"autodelete\", bool, False, None, True),\n            (\"resource\", \"resource\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nclass TestScriptMetadata(backboneelement.BackboneElement):\n    \"\"\" Required capability that is assumed to function correctly on the FHIR\n    server being tested.\n    \n    The required capability must exist and are assumed to function correctly on\n    the FHIR server being tested.\n    \"\"\"\n    \n    resource_type = \"TestScriptMetadata\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.capability = None\n        \"\"\" Capabilities  that are assumed to function correctly on the FHIR\n        server being tested.\n        List of `TestScriptMetadataCapability` items (represented as `dict` in JSON). \"\"\"\n        \n        self.link = None\n        \"\"\" Links to the FHIR specification.\n        List of `TestScriptMetadataLink` items (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptMetadata, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptMetadata, self).elementProperties()\n        js.extend([\n            (\"capability\", \"capability\", TestScriptMetadataCapability, True, None, True),\n            (\"link\", \"link\", TestScriptMetadataLink, True, None, False),\n        ])\n        return js\n\n\nclass TestScriptMetadataCapability(backboneelement.BackboneElement):\n    \"\"\" Capabilities  that are assumed to function correctly on the FHIR server\n    being tested.\n    \n    Capabilities that must exist and are assumed to function correctly on the\n    FHIR server being tested.\n    \"\"\"\n    \n    resource_type = \"TestScriptMetadataCapability\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.capabilities = None\n        \"\"\" Required Capability Statement.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" The expected capabilities of the server.\n        Type `str`. \"\"\"\n        \n        self.destination = None\n        \"\"\" Which server these requirements apply to.\n        Type `int`. \"\"\"\n        \n        self.link = None\n        \"\"\" Links to the FHIR specification.\n        List of `str` items. \"\"\"\n        \n        self.origin = None\n        \"\"\" Which origin server these requirements apply to.\n        List of `int` items. \"\"\"\n        \n        self.required = None\n        \"\"\" Are the capabilities required?.\n        Type `bool`. \"\"\"\n        \n        self.validated = None\n        \"\"\" Are the capabilities validated?.\n        Type `bool`. \"\"\"\n        \n        super(TestScriptMetadataCapability, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptMetadataCapability, self).elementProperties()\n        js.extend([\n            (\"capabilities\", \"capabilities\", str, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"destination\", \"destination\", int, False, None, False),\n            (\"link\", \"link\", str, True, None, False),\n            (\"origin\", \"origin\", int, True, None, False),\n            (\"required\", \"required\", bool, False, None, True),\n            (\"validated\", \"validated\", bool, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptMetadataLink(backboneelement.BackboneElement):\n    \"\"\" Links to the FHIR specification.\n    \n    A link to the FHIR specification that this test is covering.\n    \"\"\"\n    \n    resource_type = \"TestScriptMetadataLink\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Short description.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" URL to the specification.\n        Type `str`. \"\"\"\n        \n        super(TestScriptMetadataLink, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptMetadataLink, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptOrigin(backboneelement.BackboneElement):\n    \"\"\" An abstract server representing a client or sender in a message exchange.\n    \n    An abstract server used in operations within this test script in the origin\n    element.\n    \"\"\"\n    \n    resource_type = \"TestScriptOrigin\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.index = None\n        \"\"\" The index of the abstract origin server starting at 1.\n        Type `int`. \"\"\"\n        \n        self.profile = None\n        \"\"\" FHIR-Client | FHIR-SDC-FormFiller.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptOrigin, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptOrigin, self).elementProperties()\n        js.extend([\n            (\"index\", \"index\", int, False, None, True),\n            (\"profile\", \"profile\", coding.Coding, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptSetup(backboneelement.BackboneElement):\n    \"\"\" A series of required setup operations before tests are executed.\n    \"\"\"\n    \n    resource_type = \"TestScriptSetup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" A setup operation or assert to perform.\n        List of `TestScriptSetupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptSetup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptSetup, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestScriptSetupAction, True, None, True),\n        ])\n        return js\n\n\nclass TestScriptSetupAction(backboneelement.BackboneElement):\n    \"\"\" A setup operation or assert to perform.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    \n    resource_type = \"TestScriptSetupAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assert_fhir = None\n        \"\"\" The assertion to perform.\n        Type `TestScriptSetupActionAssert` (represented as `dict` in JSON). \"\"\"\n        \n        self.operation = None\n        \"\"\" The setup operation to perform.\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptSetupAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptSetupAction, self).elementProperties()\n        js.extend([\n            (\"assert_fhir\", \"assert\", TestScriptSetupActionAssert, False, None, False),\n            (\"operation\", \"operation\", TestScriptSetupActionOperation, False, None, False),\n        ])\n        return js\n\n\nclass TestScriptSetupActionAssert(backboneelement.BackboneElement):\n    \"\"\" The assertion to perform.\n    \n    Evaluates the results of previous operations to determine if the server\n    under test behaves appropriately.\n    \"\"\"\n    \n    resource_type = \"TestScriptSetupActionAssert\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.compareToSourceExpression = None\n        \"\"\" The FHIRPath expression to evaluate against the source fixture.\n        Type `str`. \"\"\"\n        \n        self.compareToSourceId = None\n        \"\"\" Id of the source fixture to be evaluated.\n        Type `str`. \"\"\"\n        \n        self.compareToSourcePath = None\n        \"\"\" XPath or JSONPath expression to evaluate against the source fixture.\n        Type `str`. \"\"\"\n        \n        self.contentType = None\n        \"\"\" Mime type to compare against the 'Content-Type' header.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Tracking/reporting assertion description.\n        Type `str`. \"\"\"\n        \n        self.direction = None\n        \"\"\" response | request.\n        Type `str`. \"\"\"\n        \n        self.expression = None\n        \"\"\" The FHIRPath expression to be evaluated.\n        Type `str`. \"\"\"\n        \n        self.headerField = None\n        \"\"\" HTTP header field name.\n        Type `str`. \"\"\"\n        \n        self.label = None\n        \"\"\" Tracking/logging assertion label.\n        Type `str`. \"\"\"\n        \n        self.minimumId = None\n        \"\"\" Fixture Id of minimum content resource.\n        Type `str`. \"\"\"\n        \n        self.navigationLinks = None\n        \"\"\" Perform validation on navigation links?.\n        Type `bool`. \"\"\"\n        \n        self.operator = None\n        \"\"\" equals | notEquals | in | notIn | greaterThan | lessThan | empty |\n        notEmpty | contains | notContains | eval.\n        Type `str`. \"\"\"\n        \n        self.path = None\n        \"\"\" XPath or JSONPath expression.\n        Type `str`. \"\"\"\n        \n        self.requestMethod = None\n        \"\"\" delete | get | options | patch | post | put | head.\n        Type `str`. \"\"\"\n        \n        self.requestURL = None\n        \"\"\" Request URL comparison value.\n        Type `str`. \"\"\"\n        \n        self.resource = None\n        \"\"\" Resource type.\n        Type `str`. \"\"\"\n        \n        self.response = None\n        \"\"\" okay | created | noContent | notModified | bad | forbidden |\n        notFound | methodNotAllowed | conflict | gone | preconditionFailed\n        | unprocessable.\n        Type `str`. \"\"\"\n        \n        self.responseCode = None\n        \"\"\" HTTP response code to test.\n        Type `str`. \"\"\"\n        \n        self.sourceId = None\n        \"\"\" Fixture Id of source expression or headerField.\n        Type `str`. \"\"\"\n        \n        self.validateProfileId = None\n        \"\"\" Profile Id of validation profile reference.\n        Type `str`. \"\"\"\n        \n        self.value = None\n        \"\"\" The value to compare to.\n        Type `str`. \"\"\"\n        \n        self.warningOnly = None\n        \"\"\" Will this assert produce a warning only on error?.\n        Type `bool`. \"\"\"\n        \n        super(TestScriptSetupActionAssert, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptSetupActionAssert, self).elementProperties()\n        js.extend([\n            (\"compareToSourceExpression\", \"compareToSourceExpression\", str, False, None, False),\n            (\"compareToSourceId\", \"compareToSourceId\", str, False, None, False),\n            (\"compareToSourcePath\", \"compareToSourcePath\", str, False, None, False),\n            (\"contentType\", \"contentType\", str, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"direction\", \"direction\", str, False, None, False),\n            (\"expression\", \"expression\", str, False, None, False),\n            (\"headerField\", \"headerField\", str, False, None, False),\n            (\"label\", \"label\", str, False, None, False),\n            (\"minimumId\", \"minimumId\", str, False, None, False),\n            (\"navigationLinks\", \"navigationLinks\", bool, False, None, False),\n            (\"operator\", \"operator\", str, False, None, False),\n            (\"path\", \"path\", str, False, None, False),\n            (\"requestMethod\", \"requestMethod\", str, False, None, False),\n            (\"requestURL\", \"requestURL\", str, False, None, False),\n            (\"resource\", \"resource\", str, False, None, False),\n            (\"response\", \"response\", str, False, None, False),\n            (\"responseCode\", \"responseCode\", str, False, None, False),\n            (\"sourceId\", \"sourceId\", str, False, None, False),\n            (\"validateProfileId\", \"validateProfileId\", str, False, None, False),\n            (\"value\", \"value\", str, False, None, False),\n            (\"warningOnly\", \"warningOnly\", bool, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptSetupActionOperation(backboneelement.BackboneElement):\n    \"\"\" The setup operation to perform.\n    \n    The operation to perform.\n    \"\"\"\n    \n    resource_type = \"TestScriptSetupActionOperation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.accept = None\n        \"\"\" Mime type to accept in the payload of the response, with charset\n        etc..\n        Type `str`. \"\"\"\n        \n        self.contentType = None\n        \"\"\" Mime type of the request payload contents, with charset etc..\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Tracking/reporting operation description.\n        Type `str`. \"\"\"\n        \n        self.destination = None\n        \"\"\" Server responding to the request.\n        Type `int`. \"\"\"\n        \n        self.encodeRequestUrl = None\n        \"\"\" Whether or not to send the request url in encoded format.\n        Type `bool`. \"\"\"\n        \n        self.label = None\n        \"\"\" Tracking/logging operation label.\n        Type `str`. \"\"\"\n        \n        self.method = None\n        \"\"\" delete | get | options | patch | post | put | head.\n        Type `str`. \"\"\"\n        \n        self.origin = None\n        \"\"\" Server initiating the request.\n        Type `int`. \"\"\"\n        \n        self.params = None\n        \"\"\" Explicitly defined path parameters.\n        Type `str`. \"\"\"\n        \n        self.requestHeader = None\n        \"\"\" Each operation can have one or more header elements.\n        List of `TestScriptSetupActionOperationRequestHeader` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requestId = None\n        \"\"\" Fixture Id of mapped request.\n        Type `str`. \"\"\"\n        \n        self.resource = None\n        \"\"\" Resource type.\n        Type `str`. \"\"\"\n        \n        self.responseId = None\n        \"\"\" Fixture Id of mapped response.\n        Type `str`. \"\"\"\n        \n        self.sourceId = None\n        \"\"\" Fixture Id of body for PUT and POST requests.\n        Type `str`. \"\"\"\n        \n        self.targetId = None\n        \"\"\" Id of fixture used for extracting the [id],  [type], and [vid] for\n        GET requests.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" The operation code type that will be executed.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Request URL.\n        Type `str`. \"\"\"\n        \n        super(TestScriptSetupActionOperation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptSetupActionOperation, self).elementProperties()\n        js.extend([\n            (\"accept\", \"accept\", str, False, None, False),\n            (\"contentType\", \"contentType\", str, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"destination\", \"destination\", int, False, None, False),\n            (\"encodeRequestUrl\", \"encodeRequestUrl\", bool, False, None, True),\n            (\"label\", \"label\", str, False, None, False),\n            (\"method\", \"method\", str, False, None, False),\n            (\"origin\", \"origin\", int, False, None, False),\n            (\"params\", \"params\", str, False, None, False),\n            (\"requestHeader\", \"requestHeader\", TestScriptSetupActionOperationRequestHeader, True, None, False),\n            (\"requestId\", \"requestId\", str, False, None, False),\n            (\"resource\", \"resource\", str, False, None, False),\n            (\"responseId\", \"responseId\", str, False, None, False),\n            (\"sourceId\", \"sourceId\", str, False, None, False),\n            (\"targetId\", \"targetId\", str, False, None, False),\n            (\"type\", \"type\", coding.Coding, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n        ])\n        return js\n\n\nclass TestScriptSetupActionOperationRequestHeader(backboneelement.BackboneElement):\n    \"\"\" Each operation can have one or more header elements.\n    \n    Header elements would be used to set HTTP headers.\n    \"\"\"\n    \n    resource_type = \"TestScriptSetupActionOperationRequestHeader\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.field = None\n        \"\"\" HTTP header field name.\n        Type `str`. \"\"\"\n        \n        self.value = None\n        \"\"\" HTTP headerfield value.\n        Type `str`. \"\"\"\n        \n        super(TestScriptSetupActionOperationRequestHeader, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptSetupActionOperationRequestHeader, self).elementProperties()\n        js.extend([\n            (\"field\", \"field\", str, False, None, True),\n            (\"value\", \"value\", str, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptTeardown(backboneelement.BackboneElement):\n    \"\"\" A series of required clean up steps.\n    \n    A series of operations required to clean up after all the tests are\n    executed (successfully or otherwise).\n    \"\"\"\n    \n    resource_type = \"TestScriptTeardown\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" One or more teardown operations to perform.\n        List of `TestScriptTeardownAction` items (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptTeardown, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptTeardown, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestScriptTeardownAction, True, None, True),\n        ])\n        return js\n\n\nclass TestScriptTeardownAction(backboneelement.BackboneElement):\n    \"\"\" One or more teardown operations to perform.\n    \n    The teardown action will only contain an operation.\n    \"\"\"\n    \n    resource_type = \"TestScriptTeardownAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.operation = None\n        \"\"\" The teardown operation to perform.\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptTeardownAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptTeardownAction, self).elementProperties()\n        js.extend([\n            (\"operation\", \"operation\", TestScriptSetupActionOperation, False, None, True),\n        ])\n        return js\n\n\nclass TestScriptTest(backboneelement.BackboneElement):\n    \"\"\" A test in this script.\n    \"\"\"\n    \n    resource_type = \"TestScriptTest\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" A test operation or assert to perform.\n        List of `TestScriptTestAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Tracking/reporting short description of the test.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Tracking/logging name of this test.\n        Type `str`. \"\"\"\n        \n        super(TestScriptTest, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptTest, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", TestScriptTestAction, True, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n        ])\n        return js\n\n\nclass TestScriptTestAction(backboneelement.BackboneElement):\n    \"\"\" A test operation or assert to perform.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    \n    resource_type = \"TestScriptTestAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assert_fhir = None\n        \"\"\" The setup assertion to perform.\n        Type `TestScriptSetupActionAssert` (represented as `dict` in JSON). \"\"\"\n        \n        self.operation = None\n        \"\"\" The setup operation to perform.\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). \"\"\"\n        \n        super(TestScriptTestAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptTestAction, self).elementProperties()\n        js.extend([\n            (\"assert_fhir\", \"assert\", TestScriptSetupActionAssert, False, None, False),\n            (\"operation\", \"operation\", TestScriptSetupActionOperation, False, None, False),\n        ])\n        return js\n\n\nclass TestScriptVariable(backboneelement.BackboneElement):\n    \"\"\" Placeholder for evaluated elements.\n    \n    Variable is set based either on element value in response body or on header\n    field value in the response headers.\n    \"\"\"\n    \n    resource_type = \"TestScriptVariable\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.defaultValue = None\n        \"\"\" Default, hard-coded, or user-defined value for this variable.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the variable.\n        Type `str`. \"\"\"\n        \n        self.expression = None\n        \"\"\" The FHIRPath expression against the fixture body.\n        Type `str`. \"\"\"\n        \n        self.headerField = None\n        \"\"\" HTTP header field name for source.\n        Type `str`. \"\"\"\n        \n        self.hint = None\n        \"\"\" Hint help text for default value to enter.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Descriptive name for this variable.\n        Type `str`. \"\"\"\n        \n        self.path = None\n        \"\"\" XPath or JSONPath against the fixture body.\n        Type `str`. \"\"\"\n        \n        self.sourceId = None\n        \"\"\" Fixture Id of source expression or headerField within this variable.\n        Type `str`. \"\"\"\n        \n        super(TestScriptVariable, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TestScriptVariable, self).elementProperties()\n        js.extend([\n            (\"defaultValue\", \"defaultValue\", str, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"expression\", \"expression\", str, False, None, False),\n            (\"headerField\", \"headerField\", str, False, None, False),\n            (\"hint\", \"hint\", str, False, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"path\", \"path\", str, False, None, False),\n            (\"sourceId\", \"sourceId\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n"
  },
  "GT_src_dict": {
    "fhirclient/models/testscript.py": {
      "TestScript.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a TestScript resource representing a structured set of tests against a FHIR server or client implementation to determine compliance with the FHIR specification.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, containing various properties of the TestScript such as 'contact', 'copyright', and 'metadata'.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, the object is created with invalid variables without raising errors.\n\nAttributes:\n- contact: Contact details for the publisher (list of ContactDetail).\n- copyright: Use and/or publishing restrictions (string).\n- date: Date last changed (FHIRDateTime).\n- description: Natural language description of the test script (string).\n- destination: Abstract server representing a destination in message exchanges (list of TestScriptDestination).\n- experimental: Indicates if the script is for testing purposes (boolean).\n- fixture: Reference fixtures required for the test script (list of TestScriptFixture).\n- identifier: Additional identifier for the test script (Identifier).\n- jurisdiction: Intended jurisdiction for the test script (list of CodeableConcept).\n- metadata: Required capability that is assumed to function correctly on the FHIR server being tested (TestScriptMetadata).\n- name: Computer-friendly name for the test script (string).\n- origin: Abstract server representing a client or sender in message exchanges (list of TestScriptOrigin).\n- profile: Reference of the validation profile (list of FHIRReference).\n- publisher: Name of the publisher (string).\n- purpose: Reason for defining the test script (string).\n- setup: Required setup operations before tests are executed (TestScriptSetup).\n- status: Status of the test script (string).\n- teardown: Required cleanup steps (TestScriptTeardown).\n- test: Tests included in the script (list of TestScriptTest).\n- title: Human-friendly name for the test script (string).\n- url: Canonical URI identifier for the test script (string).\n- useContext: Context that the content is intended to support (list of UsageContext).\n- variable: Placeholder for evaluated elements (list of TestScriptVariable).\n- version: Business version of the test script (string).\n\nThe initialization also calls the parent class `DomainResource`'s initializer, allowing it to set up inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the test script.\\n        Type `str`. '\n        self.destination = None\n        ' An abstract server representing a destination or receiver in a\\n        message exchange.\\n        List of `TestScriptDestination` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.fixture = None\n        ' Fixture in the test script - by reference (uri).\\n        List of `TestScriptFixture` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the test script.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for test script (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.metadata = None\n        ' Required capability that is assumed to function correctly on the\\n        FHIR server being tested.\\n        Type `TestScriptMetadata` (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this test script (computer friendly).\\n        Type `str`. '\n        self.origin = None\n        ' An abstract server representing a client or sender in a message\\n        exchange.\\n        List of `TestScriptOrigin` items (represented as `dict` in JSON). '\n        self.profile = None\n        ' Reference of the validation profile.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this test script is defined.\\n        Type `str`. '\n        self.setup = None\n        ' A series of required setup operations before tests are executed.\\n        Type `TestScriptSetup` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.teardown = None\n        ' A series of required clean up steps.\\n        Type `TestScriptTeardown` (represented as `dict` in JSON). '\n        self.test = None\n        ' A test in this script.\\n        List of `TestScriptTest` items (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this test script (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this test script, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.variable = None\n        ' Placeholder for evaluated elements.\\n        List of `TestScriptVariable` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the test script.\\n        Type `str`. '\n        super(TestScript, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a TestScript resource representing a structured set of tests against a FHIR server or client implementation to determine compliance with the FHIR specification.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, containing various properties of the TestScript such as 'contact', 'copyright', and 'metadata'.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, the object is created with invalid variables without raising errors.\n\nAttributes:\n- contact: Contact details for the publisher (list of ContactDetail).\n- copyright: Use and/or publishing restrictions (string).\n- date: Date last changed (FHIRDateTime).\n- description: Natural language description of the test script (string).\n- destination: Abstract server representing a destination in message exchanges (list of TestScriptDestination).\n- experimental: Indicates if the script is for testing purposes (boolean).\n- fixture: Reference fixtures required for the test script (list of TestScriptFixture).\n- identifier: Additional identifier for the test script (Identifier).\n- jurisdiction: Intended jurisdiction for the test script (list of CodeableConcept).\n- metadata: Required capability that is assumed to function correctly on the FHIR server being tested (TestScriptMetadata).\n- name: Computer-friendly name for the test script (string).\n- origin: Abstract server representing a client or sender in message exchanges (list of TestScriptOrigin).\n- profile: Reference of the validation profile (list of FHIRReference).\n- publisher: Name of the publisher (string).\n- purpose: Reason for defining the test script (string).\n- setup: Required setup operations before tests are executed (TestScriptSetup).\n- status: Status of the test script (string).\n- teardown: Required cleanup steps (TestScriptTeardown).\n- test: Tests included in the script (list of TestScriptTest).\n- title: Human-friendly name for the test script (string).\n- url: Canonical URI identifier for the test script (string).\n- useContext: Context that the content is intended to support (list of UsageContext).\n- variable: Placeholder for evaluated elements (list of TestScriptVariable).\n- version: Business version of the test script (string).\n\nThe initialization also calls the parent class `DomainResource`'s initializer, allowing it to set up inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class TestScript(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a JSON value that conforms to the FHIR datetime format. If provided, this value will be passed to the superclass initializer to parse and potentially store the original JSON.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None that will hold the Python representation of the provided FHIR datetime. \n\nThis constructor invokes the superclass (FHIRDate) initializer, enabling backward compatibility and the use of associated properties and methods defined in FHIRDate. The class includes constants such as `_REGEX`, which defines a regular expression for validating FHIR datetime strings, and `_FIELD`, denoting the expected field name for datetime values.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a JSON value that conforms to the FHIR datetime format. If provided, this value will be passed to the superclass initializer to parse and potentially store the original JSON.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None that will hold the Python representation of the provided FHIR datetime. \n\nThis constructor invokes the superclass (FHIRDate) initializer, enabling backward compatibility and the use of associated properties and methods defined in FHIRDate. The class includes constants such as `_REGEX`, which defines a regular expression for validating FHIR datetime strings, and `_FIELD`, denoting the expected field name for datetime values.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the superclass's `as_json` method to include the `resourceType` key, which specifies the type of the FHIR resource represented by the instance. The method does not take any parameters and returns a dictionary that includes all the attributes from the superclass's JSON representation, enhanced with the `resourceType`.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.\n\nDependencies:\n    - Calls the `as_json` method from the superclass (FHIRAbstractBase) to retrieve the base attributes.\n    - Uses the `resource_type` class attribute, defined as 'FHIRAbstractResource', to set the value for the `resourceType` key in the JSON output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the superclass's `as_json` method to include the `resourceType` key, which specifies the type of the FHIR resource represented by the instance. The method does not take any parameters and returns a dictionary that includes all the attributes from the superclass's JSON representation, enhanced with the `resourceType`.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.\n\nDependencies:\n    - Calls the `as_json` method from the superclass (FHIRAbstractBase) to retrieve the base attributes.\n    - Uses the `resource_type` class attribute, defined as 'FHIRAbstractResource', to set the value for the `resourceType` key in the JSON output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string if the original value is not available. The method checks if `self.origval` is not `None`, and if so, it returns this original value; otherwise, it returns the `isostring` property, which represents the date in ISO 8601 format. This method is essential for retrieving the input data in its original form, which can be useful for serialization or other data processing tasks within FHIR implementations. The `isostring` is dependent on the `date` attribute, and partial dates are normalized into full dates in this conversion process.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string if the original value is not available. The method checks if `self.origval` is not `None`, and if so, it returns this original value; otherwise, it returns the `isostring` property, which represents the date in ISO 8601 format. This method is essential for retrieving the input data in its original form, which can be useful for serialization or other data processing tasks within FHIR implementations. The `isostring` is dependent on the `date` attribute, and partial dates are normalized into full dates in this conversion process.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/testscript.py:TestScript:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/testscript_test.py:TestScriptTests:testTestScript1": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:testTestScript2": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:testTestScript3": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:testTestScript4": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:testTestScript5": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/testscript_test.py:TestScriptTests:testTestScript6": {
      "tests/models/testscript_test.py:TestScriptTests:instantiate_from": {
        "fhirclient/models/testscript.py:TestScript:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/testscript.py:TestScript:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/testscript_test.py:TestScriptTests:implTestScript6": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/testscript.py:TestScript:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/testscript.py:TestScript:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/testscript.py:TestScript:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-testscript_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 testscript.py\n            \u2514\u2500\u2500 TestScript.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides a comprehensive testing framework for validating FHIR-compliant operations, specifically focused on operations related to the \"Patient\" resource. It facilitates the execution and verification of various FHIR interactions, including resource creation, reading, updating, deleting, searching, and retrieving resource histories, ensuring compliance with FHIR standards. By supporting dynamic variables, assertions on HTTP responses, and validation against FHIR specifications, it enables developers to automate the testing of interoperability and conformance of healthcare systems. The module addresses the need for rigorous and repeatable testing of FHIR implementations, ensuring seamless integration and functionality in healthcare IT environments.\n\n## FILE 1: fhirclient/models/testscript.py\n\n- CLASS METHOD: TestScript.__init__\n  - CLASS SIGNATURE: class TestScript(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a TestScript resource representing a structured set of tests against a FHIR server or client implementation to determine compliance with the FHIR specification.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, containing various properties of the TestScript such as 'contact', 'copyright', and 'metadata'.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, the object is created with invalid variables without raising errors.\n\nAttributes:\n- contact: Contact details for the publisher (list of ContactDetail).\n- copyright: Use and/or publishing restrictions (string).\n- date: Date last changed (FHIRDateTime).\n- description: Natural language description of the test script (string).\n- destination: Abstract server representing a destination in message exchanges (list of TestScriptDestination).\n- experimental: Indicates if the script is for testing purposes (boolean).\n- fixture: Reference fixtures required for the test script (list of TestScriptFixture).\n- identifier: Additional identifier for the test script (Identifier).\n- jurisdiction: Intended jurisdiction for the test script (list of CodeableConcept).\n- metadata: Required capability that is assumed to function correctly on the FHIR server being tested (TestScriptMetadata).\n- name: Computer-friendly name for the test script (string).\n- origin: Abstract server representing a client or sender in message exchanges (list of TestScriptOrigin).\n- profile: Reference of the validation profile (list of FHIRReference).\n- publisher: Name of the publisher (string).\n- purpose: Reason for defining the test script (string).\n- setup: Required setup operations before tests are executed (TestScriptSetup).\n- status: Status of the test script (string).\n- teardown: Required cleanup steps (TestScriptTeardown).\n- test: Tests included in the script (list of TestScriptTest).\n- title: Human-friendly name for the test script (string).\n- url: Canonical URI identifier for the test script (string).\n- useContext: Context that the content is intended to support (list of UsageContext).\n- variable: Placeholder for evaluated elements (list of TestScriptVariable).\n- version: Business version of the test script (string).\n\nThe initialization also calls the parent class `DomainResource`'s initializer, allowing it to set up inherited properties.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representation of a JSON value that conforms to the FHIR datetime format. If provided, this value will be passed to the superclass initializer to parse and potentially store the original JSON.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None that will hold the Python representation of the provided FHIR datetime. \n\nThis constructor invokes the superclass (FHIRDate) initializer, enabling backward compatibility and the use of associated properties and methods defined in FHIRDate. The class includes constants such as `_REGEX`, which defines a regular expression for validating FHIR datetime strings, and `_FIELD`, denoting the expected field name for datetime values.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the superclass's `as_json` method to include the `resourceType` key, which specifies the type of the FHIR resource represented by the instance. The method does not take any parameters and returns a dictionary that includes all the attributes from the superclass's JSON representation, enhanced with the `resourceType`.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.\n\nDependencies:\n    - Calls the `as_json` method from the superclass (FHIRAbstractBase) to retrieve the base attributes.\n    - Uses the `resource_type` class attribute, defined as 'FHIRAbstractResource', to set the value for the `resourceType` key in the JSON output.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string if the original value is not available. The method checks if `self.origval` is not `None`, and if so, it returns this original value; otherwise, it returns the `isostring` property, which represents the date in ISO 8601 format. This method is essential for retrieving the input data in its original form, which can be useful for serialization or other data processing tasks within FHIR implementations. The `isostring` is dependent on the `date` attribute, and partial dates are normalized into full dates in this conversion process.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/testscript.py": "from . import domainresource\n\nclass TestScript(domainresource.DomainResource):\n    \"\"\" Describes a set of tests.\n    \n    A structured set of tests against a FHIR server or client implementation to\n    determine compliance against the FHIR specification.\n    \"\"\"\n    resource_type = 'TestScript'\n\n    def elementProperties(self):\n        js = super(TestScript, self).elementProperties()\n        js.extend([('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('destination', 'destination', TestScriptDestination, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('fixture', 'fixture', TestScriptFixture, True, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('metadata', 'metadata', TestScriptMetadata, False, None, False), ('name', 'name', str, False, None, True), ('origin', 'origin', TestScriptOrigin, True, None, False), ('profile', 'profile', fhirreference.FHIRReference, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('setup', 'setup', TestScriptSetup, False, None, False), ('status', 'status', str, False, None, True), ('teardown', 'teardown', TestScriptTeardown, False, None, False), ('test', 'test', TestScriptTest, True, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, True), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('variable', 'variable', TestScriptVariable, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass TestScriptDestination(backboneelement.BackboneElement):\n    \"\"\" An abstract server representing a destination or receiver in a message\n    exchange.\n    \n    An abstract server used in operations within this test script in the\n    destination element.\n    \"\"\"\n    resource_type = 'TestScriptDestination'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.index = None\n        ' The index of the abstract destination server starting at 1.\\n        Type `int`. '\n        self.profile = None\n        ' FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-\\n        SDC-FormProcessor.\\n        Type `Coding` (represented as `dict` in JSON). '\n        super(TestScriptDestination, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptDestination, self).elementProperties()\n        js.extend([('index', 'index', int, False, None, True), ('profile', 'profile', coding.Coding, False, None, True)])\n        return js\n\nclass TestScriptFixture(backboneelement.BackboneElement):\n    \"\"\" Fixture in the test script - by reference (uri).\n    \n    Fixture in the test script - by reference (uri). All fixtures are required\n    for the test script to execute.\n    \"\"\"\n    resource_type = 'TestScriptFixture'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.autocreate = None\n        ' Whether or not to implicitly create the fixture during setup.\\n        Type `bool`. '\n        self.autodelete = None\n        ' Whether or not to implicitly delete the fixture during teardown.\\n        Type `bool`. '\n        self.resource = None\n        ' Reference of the resource.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(TestScriptFixture, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptFixture, self).elementProperties()\n        js.extend([('autocreate', 'autocreate', bool, False, None, True), ('autodelete', 'autodelete', bool, False, None, True), ('resource', 'resource', fhirreference.FHIRReference, False, None, False)])\n        return js\n\nclass TestScriptMetadata(backboneelement.BackboneElement):\n    \"\"\" Required capability that is assumed to function correctly on the FHIR\n    server being tested.\n    \n    The required capability must exist and are assumed to function correctly on\n    the FHIR server being tested.\n    \"\"\"\n    resource_type = 'TestScriptMetadata'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.capability = None\n        ' Capabilities  that are assumed to function correctly on the FHIR\\n        server being tested.\\n        List of `TestScriptMetadataCapability` items (represented as `dict` in JSON). '\n        self.link = None\n        ' Links to the FHIR specification.\\n        List of `TestScriptMetadataLink` items (represented as `dict` in JSON). '\n        super(TestScriptMetadata, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptMetadata, self).elementProperties()\n        js.extend([('capability', 'capability', TestScriptMetadataCapability, True, None, True), ('link', 'link', TestScriptMetadataLink, True, None, False)])\n        return js\n\nclass TestScriptMetadataCapability(backboneelement.BackboneElement):\n    \"\"\" Capabilities  that are assumed to function correctly on the FHIR server\n    being tested.\n    \n    Capabilities that must exist and are assumed to function correctly on the\n    FHIR server being tested.\n    \"\"\"\n    resource_type = 'TestScriptMetadataCapability'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.capabilities = None\n        ' Required Capability Statement.\\n        Type `str`. '\n        self.description = None\n        ' The expected capabilities of the server.\\n        Type `str`. '\n        self.destination = None\n        ' Which server these requirements apply to.\\n        Type `int`. '\n        self.link = None\n        ' Links to the FHIR specification.\\n        List of `str` items. '\n        self.origin = None\n        ' Which origin server these requirements apply to.\\n        List of `int` items. '\n        self.required = None\n        ' Are the capabilities required?.\\n        Type `bool`. '\n        self.validated = None\n        ' Are the capabilities validated?.\\n        Type `bool`. '\n        super(TestScriptMetadataCapability, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptMetadataCapability, self).elementProperties()\n        js.extend([('capabilities', 'capabilities', str, False, None, True), ('description', 'description', str, False, None, False), ('destination', 'destination', int, False, None, False), ('link', 'link', str, True, None, False), ('origin', 'origin', int, True, None, False), ('required', 'required', bool, False, None, True), ('validated', 'validated', bool, False, None, True)])\n        return js\n\nclass TestScriptMetadataLink(backboneelement.BackboneElement):\n    \"\"\" Links to the FHIR specification.\n    \n    A link to the FHIR specification that this test is covering.\n    \"\"\"\n    resource_type = 'TestScriptMetadataLink'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Short description.\\n        Type `str`. '\n        self.url = None\n        ' URL to the specification.\\n        Type `str`. '\n        super(TestScriptMetadataLink, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptMetadataLink, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('url', 'url', str, False, None, True)])\n        return js\n\nclass TestScriptOrigin(backboneelement.BackboneElement):\n    \"\"\" An abstract server representing a client or sender in a message exchange.\n    \n    An abstract server used in operations within this test script in the origin\n    element.\n    \"\"\"\n    resource_type = 'TestScriptOrigin'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.index = None\n        ' The index of the abstract origin server starting at 1.\\n        Type `int`. '\n        self.profile = None\n        ' FHIR-Client | FHIR-SDC-FormFiller.\\n        Type `Coding` (represented as `dict` in JSON). '\n        super(TestScriptOrigin, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptOrigin, self).elementProperties()\n        js.extend([('index', 'index', int, False, None, True), ('profile', 'profile', coding.Coding, False, None, True)])\n        return js\n\nclass TestScriptSetup(backboneelement.BackboneElement):\n    \"\"\" A series of required setup operations before tests are executed.\n    \"\"\"\n    resource_type = 'TestScriptSetup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' A setup operation or assert to perform.\\n        List of `TestScriptSetupAction` items (represented as `dict` in JSON). '\n        super(TestScriptSetup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptSetup, self).elementProperties()\n        js.extend([('action', 'action', TestScriptSetupAction, True, None, True)])\n        return js\n\nclass TestScriptSetupAction(backboneelement.BackboneElement):\n    \"\"\" A setup operation or assert to perform.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    resource_type = 'TestScriptSetupAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assert_fhir = None\n        ' The assertion to perform.\\n        Type `TestScriptSetupActionAssert` (represented as `dict` in JSON). '\n        self.operation = None\n        ' The setup operation to perform.\\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestScriptSetupAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptSetupAction, self).elementProperties()\n        js.extend([('assert_fhir', 'assert', TestScriptSetupActionAssert, False, None, False), ('operation', 'operation', TestScriptSetupActionOperation, False, None, False)])\n        return js\n\nclass TestScriptSetupActionAssert(backboneelement.BackboneElement):\n    \"\"\" The assertion to perform.\n    \n    Evaluates the results of previous operations to determine if the server\n    under test behaves appropriately.\n    \"\"\"\n    resource_type = 'TestScriptSetupActionAssert'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.compareToSourceExpression = None\n        ' The FHIRPath expression to evaluate against the source fixture.\\n        Type `str`. '\n        self.compareToSourceId = None\n        ' Id of the source fixture to be evaluated.\\n        Type `str`. '\n        self.compareToSourcePath = None\n        ' XPath or JSONPath expression to evaluate against the source fixture.\\n        Type `str`. '\n        self.contentType = None\n        \" Mime type to compare against the 'Content-Type' header.\\n        Type `str`. \"\n        self.description = None\n        ' Tracking/reporting assertion description.\\n        Type `str`. '\n        self.direction = None\n        ' response | request.\\n        Type `str`. '\n        self.expression = None\n        ' The FHIRPath expression to be evaluated.\\n        Type `str`. '\n        self.headerField = None\n        ' HTTP header field name.\\n        Type `str`. '\n        self.label = None\n        ' Tracking/logging assertion label.\\n        Type `str`. '\n        self.minimumId = None\n        ' Fixture Id of minimum content resource.\\n        Type `str`. '\n        self.navigationLinks = None\n        ' Perform validation on navigation links?.\\n        Type `bool`. '\n        self.operator = None\n        ' equals | notEquals | in | notIn | greaterThan | lessThan | empty |\\n        notEmpty | contains | notContains | eval.\\n        Type `str`. '\n        self.path = None\n        ' XPath or JSONPath expression.\\n        Type `str`. '\n        self.requestMethod = None\n        ' delete | get | options | patch | post | put | head.\\n        Type `str`. '\n        self.requestURL = None\n        ' Request URL comparison value.\\n        Type `str`. '\n        self.resource = None\n        ' Resource type.\\n        Type `str`. '\n        self.response = None\n        ' okay | created | noContent | notModified | bad | forbidden |\\n        notFound | methodNotAllowed | conflict | gone | preconditionFailed\\n        | unprocessable.\\n        Type `str`. '\n        self.responseCode = None\n        ' HTTP response code to test.\\n        Type `str`. '\n        self.sourceId = None\n        ' Fixture Id of source expression or headerField.\\n        Type `str`. '\n        self.validateProfileId = None\n        ' Profile Id of validation profile reference.\\n        Type `str`. '\n        self.value = None\n        ' The value to compare to.\\n        Type `str`. '\n        self.warningOnly = None\n        ' Will this assert produce a warning only on error?.\\n        Type `bool`. '\n        super(TestScriptSetupActionAssert, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptSetupActionAssert, self).elementProperties()\n        js.extend([('compareToSourceExpression', 'compareToSourceExpression', str, False, None, False), ('compareToSourceId', 'compareToSourceId', str, False, None, False), ('compareToSourcePath', 'compareToSourcePath', str, False, None, False), ('contentType', 'contentType', str, False, None, False), ('description', 'description', str, False, None, False), ('direction', 'direction', str, False, None, False), ('expression', 'expression', str, False, None, False), ('headerField', 'headerField', str, False, None, False), ('label', 'label', str, False, None, False), ('minimumId', 'minimumId', str, False, None, False), ('navigationLinks', 'navigationLinks', bool, False, None, False), ('operator', 'operator', str, False, None, False), ('path', 'path', str, False, None, False), ('requestMethod', 'requestMethod', str, False, None, False), ('requestURL', 'requestURL', str, False, None, False), ('resource', 'resource', str, False, None, False), ('response', 'response', str, False, None, False), ('responseCode', 'responseCode', str, False, None, False), ('sourceId', 'sourceId', str, False, None, False), ('validateProfileId', 'validateProfileId', str, False, None, False), ('value', 'value', str, False, None, False), ('warningOnly', 'warningOnly', bool, False, None, True)])\n        return js\n\nclass TestScriptSetupActionOperation(backboneelement.BackboneElement):\n    \"\"\" The setup operation to perform.\n    \n    The operation to perform.\n    \"\"\"\n    resource_type = 'TestScriptSetupActionOperation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.accept = None\n        ' Mime type to accept in the payload of the response, with charset\\n        etc..\\n        Type `str`. '\n        self.contentType = None\n        ' Mime type of the request payload contents, with charset etc..\\n        Type `str`. '\n        self.description = None\n        ' Tracking/reporting operation description.\\n        Type `str`. '\n        self.destination = None\n        ' Server responding to the request.\\n        Type `int`. '\n        self.encodeRequestUrl = None\n        ' Whether or not to send the request url in encoded format.\\n        Type `bool`. '\n        self.label = None\n        ' Tracking/logging operation label.\\n        Type `str`. '\n        self.method = None\n        ' delete | get | options | patch | post | put | head.\\n        Type `str`. '\n        self.origin = None\n        ' Server initiating the request.\\n        Type `int`. '\n        self.params = None\n        ' Explicitly defined path parameters.\\n        Type `str`. '\n        self.requestHeader = None\n        ' Each operation can have one or more header elements.\\n        List of `TestScriptSetupActionOperationRequestHeader` items (represented as `dict` in JSON). '\n        self.requestId = None\n        ' Fixture Id of mapped request.\\n        Type `str`. '\n        self.resource = None\n        ' Resource type.\\n        Type `str`. '\n        self.responseId = None\n        ' Fixture Id of mapped response.\\n        Type `str`. '\n        self.sourceId = None\n        ' Fixture Id of body for PUT and POST requests.\\n        Type `str`. '\n        self.targetId = None\n        ' Id of fixture used for extracting the [id],  [type], and [vid] for\\n        GET requests.\\n        Type `str`. '\n        self.type = None\n        ' The operation code type that will be executed.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.url = None\n        ' Request URL.\\n        Type `str`. '\n        super(TestScriptSetupActionOperation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptSetupActionOperation, self).elementProperties()\n        js.extend([('accept', 'accept', str, False, None, False), ('contentType', 'contentType', str, False, None, False), ('description', 'description', str, False, None, False), ('destination', 'destination', int, False, None, False), ('encodeRequestUrl', 'encodeRequestUrl', bool, False, None, True), ('label', 'label', str, False, None, False), ('method', 'method', str, False, None, False), ('origin', 'origin', int, False, None, False), ('params', 'params', str, False, None, False), ('requestHeader', 'requestHeader', TestScriptSetupActionOperationRequestHeader, True, None, False), ('requestId', 'requestId', str, False, None, False), ('resource', 'resource', str, False, None, False), ('responseId', 'responseId', str, False, None, False), ('sourceId', 'sourceId', str, False, None, False), ('targetId', 'targetId', str, False, None, False), ('type', 'type', coding.Coding, False, None, False), ('url', 'url', str, False, None, False)])\n        return js\n\nclass TestScriptSetupActionOperationRequestHeader(backboneelement.BackboneElement):\n    \"\"\" Each operation can have one or more header elements.\n    \n    Header elements would be used to set HTTP headers.\n    \"\"\"\n    resource_type = 'TestScriptSetupActionOperationRequestHeader'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.field = None\n        ' HTTP header field name.\\n        Type `str`. '\n        self.value = None\n        ' HTTP headerfield value.\\n        Type `str`. '\n        super(TestScriptSetupActionOperationRequestHeader, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptSetupActionOperationRequestHeader, self).elementProperties()\n        js.extend([('field', 'field', str, False, None, True), ('value', 'value', str, False, None, True)])\n        return js\n\nclass TestScriptTeardown(backboneelement.BackboneElement):\n    \"\"\" A series of required clean up steps.\n    \n    A series of operations required to clean up after all the tests are\n    executed (successfully or otherwise).\n    \"\"\"\n    resource_type = 'TestScriptTeardown'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' One or more teardown operations to perform.\\n        List of `TestScriptTeardownAction` items (represented as `dict` in JSON). '\n        super(TestScriptTeardown, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptTeardown, self).elementProperties()\n        js.extend([('action', 'action', TestScriptTeardownAction, True, None, True)])\n        return js\n\nclass TestScriptTeardownAction(backboneelement.BackboneElement):\n    \"\"\" One or more teardown operations to perform.\n    \n    The teardown action will only contain an operation.\n    \"\"\"\n    resource_type = 'TestScriptTeardownAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.operation = None\n        ' The teardown operation to perform.\\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestScriptTeardownAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptTeardownAction, self).elementProperties()\n        js.extend([('operation', 'operation', TestScriptSetupActionOperation, False, None, True)])\n        return js\n\nclass TestScriptTest(backboneelement.BackboneElement):\n    \"\"\" A test in this script.\n    \"\"\"\n    resource_type = 'TestScriptTest'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' A test operation or assert to perform.\\n        List of `TestScriptTestAction` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Tracking/reporting short description of the test.\\n        Type `str`. '\n        self.name = None\n        ' Tracking/logging name of this test.\\n        Type `str`. '\n        super(TestScriptTest, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptTest, self).elementProperties()\n        js.extend([('action', 'action', TestScriptTestAction, True, None, True), ('description', 'description', str, False, None, False), ('name', 'name', str, False, None, False)])\n        return js\n\nclass TestScriptTestAction(backboneelement.BackboneElement):\n    \"\"\" A test operation or assert to perform.\n    \n    Action would contain either an operation or an assertion.\n    \"\"\"\n    resource_type = 'TestScriptTestAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assert_fhir = None\n        ' The setup assertion to perform.\\n        Type `TestScriptSetupActionAssert` (represented as `dict` in JSON). '\n        self.operation = None\n        ' The setup operation to perform.\\n        Type `TestScriptSetupActionOperation` (represented as `dict` in JSON). '\n        super(TestScriptTestAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptTestAction, self).elementProperties()\n        js.extend([('assert_fhir', 'assert', TestScriptSetupActionAssert, False, None, False), ('operation', 'operation', TestScriptSetupActionOperation, False, None, False)])\n        return js\n\nclass TestScriptVariable(backboneelement.BackboneElement):\n    \"\"\" Placeholder for evaluated elements.\n    \n    Variable is set based either on element value in response body or on header\n    field value in the response headers.\n    \"\"\"\n    resource_type = 'TestScriptVariable'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.defaultValue = None\n        ' Default, hard-coded, or user-defined value for this variable.\\n        Type `str`. '\n        self.description = None\n        ' Natural language description of the variable.\\n        Type `str`. '\n        self.expression = None\n        ' The FHIRPath expression against the fixture body.\\n        Type `str`. '\n        self.headerField = None\n        ' HTTP header field name for source.\\n        Type `str`. '\n        self.hint = None\n        ' Hint help text for default value to enter.\\n        Type `str`. '\n        self.name = None\n        ' Descriptive name for this variable.\\n        Type `str`. '\n        self.path = None\n        ' XPath or JSONPath against the fixture body.\\n        Type `str`. '\n        self.sourceId = None\n        ' Fixture Id of source expression or headerField within this variable.\\n        Type `str`. '\n        super(TestScriptVariable, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TestScriptVariable, self).elementProperties()\n        js.extend([('defaultValue', 'defaultValue', str, False, None, False), ('description', 'description', str, False, None, False), ('expression', 'expression', str, False, None, False), ('headerField', 'headerField', str, False, None, False), ('hint', 'hint', str, False, None, False), ('name', 'name', str, False, None, True), ('path', 'path', str, False, None, False), ('sourceId', 'sourceId', str, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)"
  }
}