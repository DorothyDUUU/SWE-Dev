{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-appointment_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/appointment_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import appointment\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass AppointmentTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Appointment\", js[\"resourceType\"])\n        return appointment.Appointment(js)\n    \n    def testAppointment1(self):\n        inst = self.instantiate_from(\"appointment-example2doctors.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Appointment instance\")\n        self.implAppointment1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Appointment\", js[\"resourceType\"])\n        inst2 = appointment.Appointment(js)\n        self.implAppointment1(inst2)\n    \n    def implAppointment1(self, inst):\n        self.assertEqual(inst.appointmentType.coding[0].code, \"WALKIN\")\n        self.assertEqual(inst.appointmentType.coding[0].display, \"A previously unscheduled walk-in visit\")\n        self.assertEqual(inst.appointmentType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0276\")\n        self.assertEqual(inst.comment, \"Clarify the results of the MRI to ensure context of test was correct\")\n        self.assertEqual(inst.description, \"Discussion about Peter Chalmers MRI results\")\n        self.assertEqual(inst.end.datetime, FHIRInstant(\"2013-12-09T11:00:00Z\").datetime)\n        self.assertEqual(inst.end.as_json(), \"2013-12-09T11:00:00Z\")\n        self.assertEqual(inst.id, \"2docs\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.participant[0].required, \"information-only\")\n        self.assertEqual(inst.participant[0].status, \"accepted\")\n        self.assertEqual(inst.participant[1].required, \"required\")\n        self.assertEqual(inst.participant[1].status, \"accepted\")\n        self.assertEqual(inst.participant[2].required, \"required\")\n        self.assertEqual(inst.participant[2].status, \"accepted\")\n        self.assertEqual(inst.participant[3].required, \"information-only\")\n        self.assertEqual(inst.participant[3].status, \"accepted\")\n        self.assertEqual(inst.priority, 5)\n        self.assertEqual(inst.serviceCategory[0].coding[0].code, \"gp\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].display, \"General Practice\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].system, \"http://example.org/service-category\")\n        self.assertEqual(inst.serviceType[0].coding[0].code, \"52\")\n        self.assertEqual(inst.serviceType[0].coding[0].display, \"General Discussion\")\n        self.assertEqual(inst.specialty[0].coding[0].code, \"394814009\")\n        self.assertEqual(inst.specialty[0].coding[0].display, \"General practice\")\n        self.assertEqual(inst.specialty[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.start.datetime, FHIRInstant(\"2013-12-09T09:00:00Z\").datetime)\n        self.assertEqual(inst.start.as_json(), \"2013-12-09T09:00:00Z\")\n        self.assertEqual(inst.status, \"booked\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Brian MRI results discussion</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testAppointment2(self):\n        inst = self.instantiate_from(\"appointment-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Appointment instance\")\n        self.implAppointment2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Appointment\", js[\"resourceType\"])\n        inst2 = appointment.Appointment(js)\n        self.implAppointment2(inst2)\n    \n    def implAppointment2(self, inst):\n        self.assertEqual(inst.appointmentType.coding[0].code, \"FOLLOWUP\")\n        self.assertEqual(inst.appointmentType.coding[0].display, \"A follow up visit from a previous appointment\")\n        self.assertEqual(inst.appointmentType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0276\")\n        self.assertEqual(inst.comment, \"Further expand on the results of the MRI and determine the next actions that may be appropriate.\")\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2013-10-10\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2013-10-10\")\n        self.assertEqual(inst.description, \"Discussion on the results of your recent MRI\")\n        self.assertEqual(inst.end.datetime, FHIRInstant(\"2013-12-10T11:00:00Z\").datetime)\n        self.assertEqual(inst.end.as_json(), \"2013-12-10T11:00:00Z\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.participant[0].required, \"required\")\n        self.assertEqual(inst.participant[0].status, \"accepted\")\n        self.assertEqual(inst.participant[1].required, \"required\")\n        self.assertEqual(inst.participant[1].status, \"accepted\")\n        self.assertEqual(inst.participant[1].type[0].coding[0].code, \"ATND\")\n        self.assertEqual(inst.participant[1].type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\")\n        self.assertEqual(inst.participant[2].required, \"required\")\n        self.assertEqual(inst.participant[2].status, \"accepted\")\n        self.assertEqual(inst.priority, 5)\n        self.assertEqual(inst.serviceCategory[0].coding[0].code, \"gp\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].display, \"General Practice\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].system, \"http://example.org/service-category\")\n        self.assertEqual(inst.serviceType[0].coding[0].code, \"52\")\n        self.assertEqual(inst.serviceType[0].coding[0].display, \"General Discussion\")\n        self.assertEqual(inst.specialty[0].coding[0].code, \"394814009\")\n        self.assertEqual(inst.specialty[0].coding[0].display, \"General practice\")\n        self.assertEqual(inst.specialty[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.start.datetime, FHIRInstant(\"2013-12-10T09:00:00Z\").datetime)\n        self.assertEqual(inst.start.as_json(), \"2013-12-10T09:00:00Z\")\n        self.assertEqual(inst.status, \"booked\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Brian MRI results discussion</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testAppointment3(self):\n        inst = self.instantiate_from(\"appointment-example-request.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Appointment instance\")\n        self.implAppointment3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Appointment\", js[\"resourceType\"])\n        inst2 = appointment.Appointment(js)\n        self.implAppointment3(inst2)\n    \n    def implAppointment3(self, inst):\n        self.assertEqual(inst.appointmentType.coding[0].code, \"WALKIN\")\n        self.assertEqual(inst.appointmentType.coding[0].display, \"A previously unscheduled walk-in visit\")\n        self.assertEqual(inst.appointmentType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v2-0276\")\n        self.assertEqual(inst.comment, \"Further expand on the results of the MRI and determine the next actions that may be appropriate.\")\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2015-12-02\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2015-12-02\")\n        self.assertEqual(inst.description, \"Discussion on the results of your recent MRI\")\n        self.assertEqual(inst.id, \"examplereq\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.org/sampleappointment-identifier\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.minutesDuration, 15)\n        self.assertEqual(inst.participant[0].required, \"required\")\n        self.assertEqual(inst.participant[0].status, \"needs-action\")\n        self.assertEqual(inst.participant[1].required, \"required\")\n        self.assertEqual(inst.participant[1].status, \"needs-action\")\n        self.assertEqual(inst.participant[1].type[0].coding[0].code, \"ATND\")\n        self.assertEqual(inst.participant[1].type[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ParticipationType\")\n        self.assertEqual(inst.participant[2].required, \"required\")\n        self.assertEqual(inst.participant[2].status, \"accepted\")\n        self.assertEqual(inst.priority, 5)\n        self.assertEqual(inst.reasonCode[0].coding[0].code, \"413095006\")\n        self.assertEqual(inst.reasonCode[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.reasonCode[0].text, \"Clinical Review\")\n        self.assertEqual(inst.requestedPeriod[0].end.datetime, FHIRDateTime(\"2016-06-09\").datetime)\n        self.assertEqual(inst.requestedPeriod[0].end.as_json(), \"2016-06-09\")\n        self.assertEqual(inst.requestedPeriod[0].start.datetime, FHIRDateTime(\"2016-06-02\").datetime)\n        self.assertEqual(inst.requestedPeriod[0].start.as_json(), \"2016-06-02\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].code, \"gp\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].display, \"General Practice\")\n        self.assertEqual(inst.serviceCategory[0].coding[0].system, \"http://example.org/service-category\")\n        self.assertEqual(inst.specialty[0].coding[0].code, \"394814009\")\n        self.assertEqual(inst.specialty[0].coding[0].display, \"General practice\")\n        self.assertEqual(inst.specialty[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.status, \"proposed\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Brian MRI results discussion</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/appointment.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Appointment).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Appointment(domainresource.DomainResource):\n    \"\"\" A booking of a healthcare event among patient(s), practitioner(s), related\n    person(s) and/or device(s) for a specific date/time. This may result in one\n    or more Encounter(s).\n    \"\"\"\n    \n    resource_type = \"Appointment\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.appointmentType = None\n        \"\"\" The style of appointment or patient that has been booked in the\n        slot (not service type).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" The service request this appointment is allocated to assess.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cancelationReason = None\n        \"\"\" The coded reason for the appointment being cancelled.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.comment = None\n        \"\"\" Additional comments.\n        Type `str`. \"\"\"\n        \n        self.created = None\n        \"\"\" The date that this appointment was initially created.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Shown on a subject line in a meeting request, or appointment list.\n        Type `str`. \"\"\"\n        \n        self.end = None\n        \"\"\" When appointment is to conclude.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External Ids for this item.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.minutesDuration = None\n        \"\"\" Can be less than start/end (e.g. estimate).\n        Type `int`. \"\"\"\n        \n        self.participant = None\n        \"\"\" Participants involved in appointment.\n        List of `AppointmentParticipant` items (represented as `dict` in JSON). \"\"\"\n        \n        self.patientInstruction = None\n        \"\"\" Detailed information and instructions for the patient.\n        Type `str`. \"\"\"\n        \n        self.priority = None\n        \"\"\" Used to make informed decisions if needing to re-prioritize.\n        Type `int`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Coded reason this appointment is scheduled.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Reason the appointment is to take place (resource).\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requestedPeriod = None\n        \"\"\" Potential date/time interval(s) requested to allocate the\n        appointment within.\n        List of `Period` items (represented as `dict` in JSON). \"\"\"\n        \n        self.serviceCategory = None\n        \"\"\" A broad categorization of the service that is to be performed\n        during this appointment.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.serviceType = None\n        \"\"\" The specific service that is to be performed during this\n        appointment.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.slot = None\n        \"\"\" The slots that this appointment is filling.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specialty = None\n        \"\"\" The specialty of a practitioner that would be required to perform\n        the service requested in this appointment.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.start = None\n        \"\"\" When appointment is to take place.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" proposed | pending | booked | arrived | fulfilled | cancelled |\n        noshow | entered-in-error | checked-in | waitlist.\n        Type `str`. \"\"\"\n        \n        self.supportingInformation = None\n        \"\"\" Additional information to support the appointment.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(Appointment, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Appointment, self).elementProperties()\n        js.extend([\n            (\"appointmentType\", \"appointmentType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"cancelationReason\", \"cancelationReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"comment\", \"comment\", str, False, None, False),\n            (\"created\", \"created\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"end\", \"end\", fhirinstant.FHIRInstant, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"minutesDuration\", \"minutesDuration\", int, False, None, False),\n            (\"participant\", \"participant\", AppointmentParticipant, True, None, True),\n            (\"patientInstruction\", \"patientInstruction\", str, False, None, False),\n            (\"priority\", \"priority\", int, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"requestedPeriod\", \"requestedPeriod\", period.Period, True, None, False),\n            (\"serviceCategory\", \"serviceCategory\", codeableconcept.CodeableConcept, True, None, False),\n            (\"serviceType\", \"serviceType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"slot\", \"slot\", fhirreference.FHIRReference, True, None, False),\n            (\"specialty\", \"specialty\", codeableconcept.CodeableConcept, True, None, False),\n            (\"start\", \"start\", fhirinstant.FHIRInstant, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"supportingInformation\", \"supportingInformation\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass AppointmentParticipant(backboneelement.BackboneElement):\n    \"\"\" Participants involved in appointment.\n    \n    List of participants involved in the appointment.\n    \"\"\"\n    \n    resource_type = \"AppointmentParticipant\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actor = None\n        \"\"\" Person, Location/HealthcareService or Device.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" Participation period of the actor.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.required = None\n        \"\"\" required | optional | information-only.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" accepted | declined | tentative | needs-action.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Role of participant in the appointment.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(AppointmentParticipant, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(AppointmentParticipant, self).elementProperties()\n        js.extend([\n            (\"actor\", \"actor\", fhirreference.FHIRReference, False, None, False),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"required\", \"required\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for instant\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/appointment.py": {
      "Appointment.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an Appointment instance.\n\nThe __init__ method sets up all the valid properties for an Appointment object, which represents a healthcare event booking for a patient and healthcare practitioners. The properties include details about the appointment type, participants, scheduling information, and reasons for scheduling or cancellation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the appointment.\n- strict (bool, default=True): If True, raises a FHIRValidationError for invalid properties; if False, allows non-conforming attributes.\n\nAttributes Initialized:\n- appointmentType: Describes the type of appointment booked.\n- basedOn: References the associated service requests.\n- cancelationReason: Encodes the reason for any cancellation.\n- comment: Stores additional comments related to the appointment.\n- created: Captures the creation date of the appointment.\n- description: Provides a summary for the appointment.\n- end: Indicates when the appointment is set to conclude.\n- identifier: Holds external identifiers for the appointment.\n- minutesDuration: Defines the estimated duration of the appointment.\n- participant: Lists participants involved in the appointment.\n- patientInstruction: Contains instructions for the patient.\n- priority: Helps in prioritizing appointments.\n- reasonCode: Coded reasons for scheduling the appointment.\n- reasonReference: References underlying reasons for scheduling.\n- requestedPeriod: Denotes potential intervals for the appointment.\n- serviceCategory: Categorizes the service type being provided.\n- serviceType: Specifies the exact service to be delivered.\n- slot: References the timeslot the appointment occupies.\n- specialty: Identifies the specialty of the required practitioner.\n- start: Specifies when the appointment occurs.\n- status: Indicates the current status of the appointment.\n- supportingInformation: Lists additional relevant information.\n\nThis class extends from `domainresource.DomainResource`, integrating properties and behavior relevant to FHIR (Fast Healthcare Interoperability Resources) standards.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.appointmentType = None\n        ' The style of appointment or patient that has been booked in the\\n        slot (not service type).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.basedOn = None\n        ' The service request this appointment is allocated to assess.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.cancelationReason = None\n        ' The coded reason for the appointment being cancelled.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.comment = None\n        ' Additional comments.\\n        Type `str`. '\n        self.created = None\n        ' The date that this appointment was initially created.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Shown on a subject line in a meeting request, or appointment list.\\n        Type `str`. '\n        self.end = None\n        ' When appointment is to conclude.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.identifier = None\n        ' External Ids for this item.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.minutesDuration = None\n        ' Can be less than start/end (e.g. estimate).\\n        Type `int`. '\n        self.participant = None\n        ' Participants involved in appointment.\\n        List of `AppointmentParticipant` items (represented as `dict` in JSON). '\n        self.patientInstruction = None\n        ' Detailed information and instructions for the patient.\\n        Type `str`. '\n        self.priority = None\n        ' Used to make informed decisions if needing to re-prioritize.\\n        Type `int`. '\n        self.reasonCode = None\n        ' Coded reason this appointment is scheduled.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Reason the appointment is to take place (resource).\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.requestedPeriod = None\n        ' Potential date/time interval(s) requested to allocate the\\n        appointment within.\\n        List of `Period` items (represented as `dict` in JSON). '\n        self.serviceCategory = None\n        ' A broad categorization of the service that is to be performed\\n        during this appointment.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.serviceType = None\n        ' The specific service that is to be performed during this\\n        appointment.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.slot = None\n        ' The slots that this appointment is filling.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.specialty = None\n        ' The specialty of a practitioner that would be required to perform\\n        the service requested in this appointment.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.start = None\n        ' When appointment is to take place.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.status = None\n        ' proposed | pending | booked | arrived | fulfilled | cancelled |\\n        noshow | entered-in-error | checked-in | waitlist.\\n        Type `str`. '\n        self.supportingInformation = None\n        ' Additional information to support the appointment.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(Appointment, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an Appointment instance.\n\nThe __init__ method sets up all the valid properties for an Appointment object, which represents a healthcare event booking for a patient and healthcare practitioners. The properties include details about the appointment type, participants, scheduling information, and reasons for scheduling or cancellation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the appointment.\n- strict (bool, default=True): If True, raises a FHIRValidationError for invalid properties; if False, allows non-conforming attributes.\n\nAttributes Initialized:\n- appointmentType: Describes the type of appointment booked.\n- basedOn: References the associated service requests.\n- cancelationReason: Encodes the reason for any cancellation.\n- comment: Stores additional comments related to the appointment.\n- created: Captures the creation date of the appointment.\n- description: Provides a summary for the appointment.\n- end: Indicates when the appointment is set to conclude.\n- identifier: Holds external identifiers for the appointment.\n- minutesDuration: Defines the estimated duration of the appointment.\n- participant: Lists participants involved in the appointment.\n- patientInstruction: Contains instructions for the patient.\n- priority: Helps in prioritizing appointments.\n- reasonCode: Coded reasons for scheduling the appointment.\n- reasonReference: References underlying reasons for scheduling.\n- requestedPeriod: Denotes potential intervals for the appointment.\n- serviceCategory: Categorizes the service type being provided.\n- serviceType: Specifies the exact service to be delivered.\n- slot: References the timeslot the appointment occupies.\n- specialty: Identifies the specialty of the required practitioner.\n- start: Specifies when the appointment occurs.\n- status: Indicates the current status of the appointment.\n- supportingInformation: Lists additional relevant information.\n\nThis class extends from `domainresource.DomainResource`, integrating properties and behavior relevant to FHIR (Fast Healthcare Interoperability Resources) standards.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Appointment(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDate instance, facilitating the management of FHIR-compliant date representations.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in ISO 8601 format. If provided, it must match a specific format validated by the _REGEX constant.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format defined by the _REGEX pattern.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date from jsonval, or None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original JSON string used to create the instance.\n\nConstants:\n- _REGEX: A compiled regular expression pattern used to validate the format of jsonval. It ensures that only correctly formatted date strings are processed during initialization.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes a FHIRDate instance, facilitating the management of FHIR-compliant date representations.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in ISO 8601 format. If provided, it must match a specific format validated by the _REGEX constant.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format defined by the _REGEX pattern.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date from jsonval, or None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original JSON string used to create the instance.\n\nConstants:\n- _REGEX: A compiled regular expression pattern used to validate the format of jsonval. It ensures that only correctly formatted date strings are processed during initialization.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Overrides the default behavior for setting attributes in the FHIRDate class.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nThis method synchronizes the `origval` attribute with the `date` attribute whenever `date` or `_FIELD` (which is a constant set to 'date') is being set. It ensures that when the `date` value is updated, the original JSON string used for initialization (`origval`) is cleared to prevent inconsistency. For other attributes, it simply sets the attribute without any additional logic.\n\nConstants Used:\n- `_FIELD`: A string constant defined within the class, set to \"date\", which serves as a reference for the `date` attribute within the synchronization logic.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Overrides the default behavior for setting attributes in the FHIRDate class.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nThis method synchronizes the `origval` attribute with the `date` attribute whenever `date` or `_FIELD` (which is a constant set to 'date') is being set. It ensures that when the `date` value is updated, the original JSON string used for initialization (`origval`) is cleared to prevent inconsistency. For other attributes, it simply sets the attribute without any additional logic.\n\nConstants Used:\n- `_FIELD`: A string constant defined within the class, set to \"date\", which serves as a reference for the `date` attribute within the synchronization logic.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a valid JSON value, this method will return that original value. If no original value is present (i.e., if the instance was created without a JSON argument), it will return the ISO 8601 string representation of the date, which is accessible through the `isostring` property. The `origval` attribute, which holds the initial JSON input, is utilized to determine which value to return.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a valid JSON value, this method will return that original value. If no original value is present (i.e., if the instance was created without a JSON argument), it will return the ISO 8601 string representation of the date, which is accessible through the `isostring` property. The `origval` attribute, which holds the initial JSON input, is utilized to determine which value to return.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are present and not None, and that all present properties are of the correct types. \n\nRaises a `FHIRValidationError` if any properties are of the wrong type, required properties are missing, or if non-None values do not meet type constraints. \n\nReturns a validated dictionary that can be further processed or serialized to JSON.\n\nAttributes Used:\n- `self.elementProperties()`: A method that returns a list of tuples containing property names, JSON names, expected types, and other metadata.\n- `self._matches_type(value, typ)`: A method used to check if a value is of the expected type.\n\nConstants:\n- `js` (dict): A dictionary that accumulates key-value pairs for serialization.\n- `errs` (list): A list that collects any errors encountered during the validation process.\n- `found` (set): A set used to keep track of properties that have been found and validated.\n- `nonoptionals` (set): A set that contains names of required properties that must be provided.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are present and not None, and that all present properties are of the correct types. \n\nRaises a `FHIRValidationError` if any properties are of the wrong type, required properties are missing, or if non-None values do not meet type constraints. \n\nReturns a validated dictionary that can be further processed or serialized to JSON.\n\nAttributes Used:\n- `self.elementProperties()`: A method that returns a list of tuples containing property names, JSON names, expected types, and other metadata.\n- `self._matches_type(value, typ)`: A method used to check if a value is of the expected type.\n\nConstants:\n- `js` (dict): A dictionary that accumulates key-value pairs for serialization.\n- `errs` (list): A list that collects any errors encountered during the validation process.\n- `found` (set): A set used to keep track of properties that have been found and validated.\n- `nonoptionals` (set): A set that contains names of required properties that must be provided.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirinstant.py": {
      "FHIRInstant.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRInstant class, a subclass of FHIRDate designed for handling FHIR instants.\n\nParameters:\n- jsonval (Union[str, None]): An optional ISO 8601 string representation of the instant. If provided, it is passed to the superclass (FHIRDate) for parsing. Otherwise, it defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A private attribute initialized to None, intended to hold the parsed datetime representation of the JSON value.\n\nThis constructor leverages the superclass's capabilities to parse the provided JSON value, ensuring compatibility with FHIR specifications while managing the idiosyncrasies of Python's datetime handling.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRInstant class, a subclass of FHIRDate designed for handling FHIR instants.\n\nParameters:\n- jsonval (Union[str, None]): An optional ISO 8601 string representation of the instant. If provided, it is passed to the superclass (FHIRDate) for parsing. Otherwise, it defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A private attribute initialized to None, intended to hold the parsed datetime representation of the JSON value.\n\nThis constructor leverages the superclass's capabilities to parse the provided JSON value, ensuring compatibility with FHIR specifications while managing the idiosyncrasies of Python's datetime handling.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRInstant(FHIRDate):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing a FHIR datetime value. This value is passed to the superclass initializer, FHIRDate, for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object that will represent the parsed FHIR datetime value. It is initially set to None.\n\nThis constructor sets up the FHIRDateTime object by initializing the datetime attribute and calling the superclass constructor to handle the input JSON. It relies on the behavior of the FHIRDate class to properly parse the provided JSON representation of the datetime.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing a FHIR datetime value. This value is passed to the superclass initializer, FHIRDate, for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object that will represent the parsed FHIR datetime value. It is initially set to None.\n\nThis constructor sets up the FHIRDateTime object by initializing the datetime attribute and calling the superclass constructor to handle the input JSON. It relies on the behavior of the FHIRDate class to properly parse the provided JSON representation of the datetime.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from its superclass to add the 'resourceType' key to the serialized JSON representation. The value of 'resourceType' is set to the value of the class attribute `resource_type`, which identifies the specific type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary representation of the instance, including all attributes from the superclass and an added 'resourceType' key.\n\nDependencies:\n    - Relies on the superclass's `as_json` method to gather the base attributes.\n    - Utilizes the `resource_type` attribute defined in the FHIRAbstractResource class, which specifies the type of FHIR resource for this instance.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from its superclass to add the 'resourceType' key to the serialized JSON representation. The value of 'resourceType' is set to the value of the class attribute `resource_type`, which identifies the specific type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary representation of the instance, including all attributes from the superclass and an added 'resourceType' key.\n\nDependencies:\n    - Relies on the superclass's `as_json` method to gather the base attributes.\n    - Utilizes the `resource_type` attribute defined in the FHIRAbstractResource class, which specifies the type of FHIR resource for this instance.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and inline resources. \n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If not provided, defaults to None.\n- strict (bool, optional): A flag that dictates whether to raise a FHIRValidationError for invalid properties. Defaults to True, causing a TypeError for invalid input.\n\nAttributes initialized include:\n- contained: Holds a list of inline resources, represented as dictionaries.\n- extension: Contains additional content as defined by implementations, represented as a list of Extension items.\n- modifierExtension: Stores extensions that must not be ignored, also represented as a list of Extension items.\n- text: Represents a text summary of the resource for human interpretation, of type Narrative.\n\nThis constructor also calls the superclass (`resource.Resource`) constructor to ensure proper initialization of inherited properties. The interactions with imported modules, `extension` and `narrative`, define the types for the extension and text attributes, respectively.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and inline resources. \n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If not provided, defaults to None.\n- strict (bool, optional): A flag that dictates whether to raise a FHIRValidationError for invalid properties. Defaults to True, causing a TypeError for invalid input.\n\nAttributes initialized include:\n- contained: Holds a list of inline resources, represented as dictionaries.\n- extension: Contains additional content as defined by implementations, represented as a list of Extension items.\n- modifierExtension: Stores extensions that must not be ignored, also represented as a list of Extension items.\n- text: Represents a text summary of the resource for human interpretation, of type Narrative.\n\nThis constructor also calls the superclass (`resource.Resource`) constructor to ensure proper initialization of inherited properties. The interactions with imported modules, `extension` and `narrative`, define the types for the extension and text attributes, respectively.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/appointment.py:Appointment:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirinstant.py": {
        "FHIRInstant._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRInstant(FHIRDate):"
        }
      },
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/appointment.py": {
        "Appointment.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(Appointment, self).elementProperties()\n        js.extend([('appointmentType', 'appointmentType', codeableconcept.CodeableConcept, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('cancelationReason', 'cancelationReason', codeableconcept.CodeableConcept, False, None, False), ('comment', 'comment', str, False, None, False), ('created', 'created', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('end', 'end', fhirinstant.FHIRInstant, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('minutesDuration', 'minutesDuration', int, False, None, False), ('participant', 'participant', AppointmentParticipant, True, None, True), ('patientInstruction', 'patientInstruction', str, False, None, False), ('priority', 'priority', int, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('requestedPeriod', 'requestedPeriod', period.Period, True, None, False), ('serviceCategory', 'serviceCategory', codeableconcept.CodeableConcept, True, None, False), ('serviceType', 'serviceType', codeableconcept.CodeableConcept, True, None, False), ('slot', 'slot', fhirreference.FHIRReference, True, None, False), ('specialty', 'specialty', codeableconcept.CodeableConcept, True, None, False), ('start', 'start', fhirinstant.FHIRInstant, False, None, False), ('status', 'status', str, False, None, True), ('supportingInformation', 'supportingInformation', fhirreference.FHIRReference, True, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class Appointment(domainresource.DomainResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
  },
  "call_tree": {
    "tests/models/appointment_test.py:AppointmentTests:testAppointment1": {
      "tests/models/appointment_test.py:AppointmentTests:instantiate_from": {
        "fhirclient/models/appointment.py:Appointment:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/appointment.py:Appointment:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/appointment_test.py:AppointmentTests:implAppointment1": {
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/appointment.py:Appointment:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/appointment.py:Appointment:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/appointment.py:Appointment:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/appointment_test.py:AppointmentTests:instantiate_from": {
      "fhirclient/models/appointment.py:Appointment:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/appointment.py:Appointment:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/appointment_test.py:AppointmentTests:testAppointment2": {
      "tests/models/appointment_test.py:AppointmentTests:instantiate_from": {
        "fhirclient/models/appointment.py:Appointment:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/appointment.py:Appointment:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/appointment_test.py:AppointmentTests:implAppointment2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/appointment.py:Appointment:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/appointment.py:Appointment:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/appointment.py:Appointment:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
                      "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/appointment_test.py:AppointmentTests:testAppointment3": {
      "tests/models/appointment_test.py:AppointmentTests:instantiate_from": {
        "fhirclient/models/appointment.py:Appointment:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/appointment.py:Appointment:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/appointment_test.py:AppointmentTests:implAppointment3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/appointment.py:Appointment:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/appointment.py:Appointment:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/appointment.py:Appointment:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-appointment_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 appointment.py\n        \u2502   \u2514\u2500\u2500 Appointment.__init__\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 fhirinstant.py\n            \u2514\u2500\u2500 FHIRInstant.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and thoroughly test the behavior and structure of FHIR Appointment resources based on the HL7 FHIR standard (version 4.0.1). It ensures proper instantiation, serialization, and deserialization of Appointment resources while validating key attributes such as participant roles, status, scheduling details, priorities, and relevant metadata. Through a series of precise and detailed assertions, the module verifies compliance with FHIR specifications for both standard and extended use cases, including walk-in, follow-up, and proposed appointments. By automating these validation tests, the module helps developers ensure the integrity, consistency, and interoperability of Appointment data, reducing errors and streamlining the implementation of healthcare applications utilizing FHIR resources.\n\n## FILE 1: fhirclient/models/appointment.py\n\n- CLASS METHOD: Appointment.__init__\n  - CLASS SIGNATURE: class Appointment(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an Appointment instance.\n\nThe __init__ method sets up all the valid properties for an Appointment object, which represents a healthcare event booking for a patient and healthcare practitioners. The properties include details about the appointment type, participants, scheduling information, and reasons for scheduling or cancellation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the appointment.\n- strict (bool, default=True): If True, raises a FHIRValidationError for invalid properties; if False, allows non-conforming attributes.\n\nAttributes Initialized:\n- appointmentType: Describes the type of appointment booked.\n- basedOn: References the associated service requests.\n- cancelationReason: Encodes the reason for any cancellation.\n- comment: Stores additional comments related to the appointment.\n- created: Captures the creation date of the appointment.\n- description: Provides a summary for the appointment.\n- end: Indicates when the appointment is set to conclude.\n- identifier: Holds external identifiers for the appointment.\n- minutesDuration: Defines the estimated duration of the appointment.\n- participant: Lists participants involved in the appointment.\n- patientInstruction: Contains instructions for the patient.\n- priority: Helps in prioritizing appointments.\n- reasonCode: Coded reasons for scheduling the appointment.\n- reasonReference: References underlying reasons for scheduling.\n- requestedPeriod: Denotes potential intervals for the appointment.\n- serviceCategory: Categorizes the service type being provided.\n- serviceType: Specifies the exact service to be delivered.\n- slot: References the timeslot the appointment occupies.\n- specialty: Identifies the specialty of the required practitioner.\n- start: Specifies when the appointment occurs.\n- status: Indicates the current status of the appointment.\n- supportingInformation: Lists additional relevant information.\n\nThis class extends from `domainresource.DomainResource`, integrating properties and behavior relevant to FHIR (Fast Healthcare Interoperability Resources) standards.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDate instance, facilitating the management of FHIR-compliant date representations.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in ISO 8601 format. If provided, it must match a specific format validated by the _REGEX constant.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format defined by the _REGEX pattern.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python date, datetime, or time object representing the parsed date from jsonval, or None if jsonval is not provided or invalid.\n- origval (Union[str, None]): Stores the original JSON string used to create the instance.\n\nConstants:\n- _REGEX: A compiled regular expression pattern used to validate the format of jsonval. It ensures that only correctly formatted date strings are processed during initialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a valid JSON value, this method will return that original value. If no original value is present (i.e., if the instance was created without a JSON argument), it will return the ISO 8601 string representation of the date, which is accessible through the `isostring` property. The `origval` attribute, which holds the initial JSON input, is utilized to determine which value to return.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nOverrides the default behavior for setting attributes in the FHIRDate class.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nThis method synchronizes the `origval` attribute with the `date` attribute whenever `date` or `_FIELD` (which is a constant set to 'date') is being set. It ensures that when the `date` value is updated, the original JSON string used for initialization (`origval`) is cleared to prevent inconsistency. For other attributes, it simply sets the attribute without any additional logic.\n\nConstants Used:\n- `_FIELD`: A string constant defined within the class, set to \"date\", which serves as a reference for the `date` attribute within the synchronization logic.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. It verifies that all required properties are present and not None, and that all present properties are of the correct types. \n\nRaises a `FHIRValidationError` if any properties are of the wrong type, required properties are missing, or if non-None values do not meet type constraints. \n\nReturns a validated dictionary that can be further processed or serialized to JSON.\n\nAttributes Used:\n- `self.elementProperties()`: A method that returns a list of tuples containing property names, JSON names, expected types, and other metadata.\n- `self._matches_type(value, typ)`: A method used to check if a value is of the expected type.\n\nConstants:\n- `js` (dict): A dictionary that accumulates key-value pairs for serialization.\n- `errs` (list): A list that collects any errors encountered during the validation process.\n- `found` (set): A set used to keep track of properties that have been found and validated.\n- `nonoptionals` (set): A set that contains names of required properties that must be provided.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirinstant.py\n\n- CLASS METHOD: FHIRInstant.__init__\n  - CLASS SIGNATURE: class FHIRInstant(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRInstant class, a subclass of FHIRDate designed for handling FHIR instants.\n\nParameters:\n- jsonval (Union[str, None]): An optional ISO 8601 string representation of the instant. If provided, it is passed to the superclass (FHIRDate) for parsing. Otherwise, it defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A private attribute initialized to None, intended to hold the parsed datetime representation of the JSON value.\n\nThis constructor leverages the superclass's capabilities to parse the provided JSON value, ensuring compatibility with FHIR specifications while managing the idiosyncrasies of Python's datetime handling.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional JSON string representing a FHIR datetime value. This value is passed to the superclass initializer, FHIRDate, for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object that will represent the parsed FHIR datetime value. It is initially set to None.\n\nThis constructor sets up the FHIRDateTime object by initializing the datetime attribute and calling the superclass constructor to handle the input JSON. It relies on the behavior of the FHIRDate class to properly parse the provided JSON representation of the datetime.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from its superclass to add the 'resourceType' key to the serialized JSON representation. The value of 'resourceType' is set to the value of the class attribute `resource_type`, which identifies the specific type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary representation of the instance, including all attributes from the superclass and an added 'resourceType' key.\n\nDependencies:\n    - Relies on the superclass's `as_json` method to gather the base attributes.\n    - Utilizes the `resource_type` attribute defined in the FHIRAbstractResource class, which specifies the type of FHIR resource for this instance.\n\"\"\"\n```\n\n## FILE 7: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and inline resources. \n\nParameters:\n- jsondict (dict, optional): A dictionary for initializing the resource properties. If not provided, defaults to None.\n- strict (bool, optional): A flag that dictates whether to raise a FHIRValidationError for invalid properties. Defaults to True, causing a TypeError for invalid input.\n\nAttributes initialized include:\n- contained: Holds a list of inline resources, represented as dictionaries.\n- extension: Contains additional content as defined by implementations, represented as a list of Extension items.\n- modifierExtension: Stores extensions that must not be ignored, also represented as a list of Extension items.\n- text: Represents a text summary of the resource for human interpretation, of type Narrative.\n\nThis constructor also calls the superclass (`resource.Resource`) constructor to ensure proper initialization of inherited properties. The interactions with imported modules, `extension` and `narrative`, define the types for the extension and text attributes, respectively.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/appointment.py": "from . import domainresource\n\nclass Appointment(domainresource.DomainResource):\n    \"\"\" A booking of a healthcare event among patient(s), practitioner(s), related\n    person(s) and/or device(s) for a specific date/time. This may result in one\n    or more Encounter(s).\n    \"\"\"\n    resource_type = 'Appointment'\n\n    def elementProperties(self):\n        js = super(Appointment, self).elementProperties()\n        js.extend([('appointmentType', 'appointmentType', codeableconcept.CodeableConcept, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('cancelationReason', 'cancelationReason', codeableconcept.CodeableConcept, False, None, False), ('comment', 'comment', str, False, None, False), ('created', 'created', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('end', 'end', fhirinstant.FHIRInstant, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('minutesDuration', 'minutesDuration', int, False, None, False), ('participant', 'participant', AppointmentParticipant, True, None, True), ('patientInstruction', 'patientInstruction', str, False, None, False), ('priority', 'priority', int, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('requestedPeriod', 'requestedPeriod', period.Period, True, None, False), ('serviceCategory', 'serviceCategory', codeableconcept.CodeableConcept, True, None, False), ('serviceType', 'serviceType', codeableconcept.CodeableConcept, True, None, False), ('slot', 'slot', fhirreference.FHIRReference, True, None, False), ('specialty', 'specialty', codeableconcept.CodeableConcept, True, None, False), ('start', 'start', fhirinstant.FHIRInstant, False, None, False), ('status', 'status', str, False, None, True), ('supportingInformation', 'supportingInformation', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass AppointmentParticipant(backboneelement.BackboneElement):\n    \"\"\" Participants involved in appointment.\n    \n    List of participants involved in the appointment.\n    \"\"\"\n    resource_type = 'AppointmentParticipant'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actor = None\n        ' Person, Location/HealthcareService or Device.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.period = None\n        ' Participation period of the actor.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.required = None\n        ' required | optional | information-only.\\n        Type `str`. '\n        self.status = None\n        ' accepted | declined | tentative | needs-action.\\n        Type `str`. '\n        self.type = None\n        ' Role of participant in the appointment.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(AppointmentParticipant, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(AppointmentParticipant, self).elementProperties()\n        js.extend([('actor', 'actor', fhirreference.FHIRReference, False, None, False), ('period', 'period', period.Period, False, None, False), ('required', 'required', str, False, None, False), ('status', 'status', str, False, None, True), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}