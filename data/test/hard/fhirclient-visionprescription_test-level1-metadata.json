{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-visionprescription_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/visionprescription_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import visionprescription\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass VisionPrescriptionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"VisionPrescription\", js[\"resourceType\"])\n        return visionprescription.VisionPrescription(js)\n    \n    def testVisionPrescription1(self):\n        inst = self.instantiate_from(\"visionprescription-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a VisionPrescription instance\")\n        self.implVisionPrescription1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"VisionPrescription\", js[\"resourceType\"])\n        inst2 = visionprescription.VisionPrescription(js)\n        self.implVisionPrescription1(inst2)\n    \n    def implVisionPrescription1(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-06-15\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-06-15\")\n        self.assertEqual(inst.dateWritten.datetime, FHIRDateTime(\"2014-06-15\").datetime)\n        self.assertEqual(inst.dateWritten.as_json(), \"2014-06-15\")\n        self.assertEqual(inst.id, \"33123\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.happysight.com/prescription\")\n        self.assertEqual(inst.identifier[0].value, \"15013\")\n        self.assertEqual(inst.lensSpecification[0].add, 2.0)\n        self.assertEqual(inst.lensSpecification[0].eye, \"right\")\n        self.assertEqual(inst.lensSpecification[0].prism[0].amount, 0.5)\n        self.assertEqual(inst.lensSpecification[0].prism[0].base, \"down\")\n        self.assertEqual(inst.lensSpecification[0].product.coding[0].code, \"lens\")\n        self.assertEqual(inst.lensSpecification[0].product.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-visionprescriptionproduct\")\n        self.assertEqual(inst.lensSpecification[0].sphere, -2.0)\n        self.assertEqual(inst.lensSpecification[1].add, 2.0)\n        self.assertEqual(inst.lensSpecification[1].axis, 180)\n        self.assertEqual(inst.lensSpecification[1].cylinder, -0.5)\n        self.assertEqual(inst.lensSpecification[1].eye, \"left\")\n        self.assertEqual(inst.lensSpecification[1].prism[0].amount, 0.5)\n        self.assertEqual(inst.lensSpecification[1].prism[0].base, \"up\")\n        self.assertEqual(inst.lensSpecification[1].product.coding[0].code, \"lens\")\n        self.assertEqual(inst.lensSpecification[1].product.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-visionprescriptionproduct\")\n        self.assertEqual(inst.lensSpecification[1].sphere, -1.0)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testVisionPrescription2(self):\n        inst = self.instantiate_from(\"visionprescription-example-1.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a VisionPrescription instance\")\n        self.implVisionPrescription2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"VisionPrescription\", js[\"resourceType\"])\n        inst2 = visionprescription.VisionPrescription(js)\n        self.implVisionPrescription2(inst2)\n    \n    def implVisionPrescription2(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-06-15\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-06-15\")\n        self.assertEqual(inst.dateWritten.datetime, FHIRDateTime(\"2014-06-15\").datetime)\n        self.assertEqual(inst.dateWritten.as_json(), \"2014-06-15\")\n        self.assertEqual(inst.id, \"33124\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.happysight.com/prescription\")\n        self.assertEqual(inst.identifier[0].value, \"15014\")\n        self.assertEqual(inst.lensSpecification[0].add, 1.75)\n        self.assertEqual(inst.lensSpecification[0].axis, 160)\n        self.assertEqual(inst.lensSpecification[0].backCurve, 8.7)\n        self.assertEqual(inst.lensSpecification[0].brand, \"OphthaGuard\")\n        self.assertEqual(inst.lensSpecification[0].color, \"green\")\n        self.assertEqual(inst.lensSpecification[0].cylinder, -2.25)\n        self.assertEqual(inst.lensSpecification[0].diameter, 14.0)\n        self.assertEqual(inst.lensSpecification[0].duration.code, \"month\")\n        self.assertEqual(inst.lensSpecification[0].duration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.lensSpecification[0].duration.unit, \"month\")\n        self.assertEqual(inst.lensSpecification[0].duration.value, 1)\n        self.assertEqual(inst.lensSpecification[0].eye, \"right\")\n        self.assertEqual(inst.lensSpecification[0].note[0].text, \"Shade treatment for extreme light sensitivity\")\n        self.assertEqual(inst.lensSpecification[0].power, -2.75)\n        self.assertEqual(inst.lensSpecification[0].product.coding[0].code, \"contact\")\n        self.assertEqual(inst.lensSpecification[0].product.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-visionprescriptionproduct\")\n        self.assertEqual(inst.lensSpecification[1].add, 1.75)\n        self.assertEqual(inst.lensSpecification[1].axis, 160)\n        self.assertEqual(inst.lensSpecification[1].backCurve, 8.7)\n        self.assertEqual(inst.lensSpecification[1].brand, \"OphthaGuard\")\n        self.assertEqual(inst.lensSpecification[1].color, \"green\")\n        self.assertEqual(inst.lensSpecification[1].cylinder, -3.5)\n        self.assertEqual(inst.lensSpecification[1].diameter, 14.0)\n        self.assertEqual(inst.lensSpecification[1].duration.code, \"month\")\n        self.assertEqual(inst.lensSpecification[1].duration.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.lensSpecification[1].duration.unit, \"month\")\n        self.assertEqual(inst.lensSpecification[1].duration.value, 1)\n        self.assertEqual(inst.lensSpecification[1].eye, \"left\")\n        self.assertEqual(inst.lensSpecification[1].note[0].text, \"Shade treatment for extreme light sensitivity\")\n        self.assertEqual(inst.lensSpecification[1].power, -2.75)\n        self.assertEqual(inst.lensSpecification[1].product.coding[0].code, \"contact\")\n        self.assertEqual(inst.lensSpecification[1].product.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-visionprescriptionproduct\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Sample Contract Lens prescription</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/visionprescription.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/VisionPrescription).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass VisionPrescription(domainresource.DomainResource):\n    \"\"\" Prescription for vision correction products for a patient.\n    \n    An authorization for the provision of glasses and/or contact lenses to a\n    patient.\n    \"\"\"\n    \n    resource_type = \"VisionPrescription\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.created = None\n        \"\"\" Response creation date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.dateWritten = None\n        \"\"\" When prescription was authorized.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Created during encounter / admission / stay.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for vision prescription.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lensSpecification = None\n        \"\"\" Vision lens authorization.\n        List of `VisionPrescriptionLensSpecification` items (represented as `dict` in JSON). \"\"\"\n        \n        self.patient = None\n        \"\"\" Who prescription is for.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.prescriber = None\n        \"\"\" Who authorized the vision prescription.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | cancelled | draft | entered-in-error.\n        Type `str`. \"\"\"\n        \n        super(VisionPrescription, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VisionPrescription, self).elementProperties()\n        js.extend([\n            (\"created\", \"created\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"dateWritten\", \"dateWritten\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"lensSpecification\", \"lensSpecification\", VisionPrescriptionLensSpecification, True, None, True),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"prescriber\", \"prescriber\", fhirreference.FHIRReference, False, None, True),\n            (\"status\", \"status\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass VisionPrescriptionLensSpecification(backboneelement.BackboneElement):\n    \"\"\" Vision lens authorization.\n    \n    Contain the details of  the individual lens specifications and serves as\n    the authorization for the fullfillment by certified professionals.\n    \"\"\"\n    \n    resource_type = \"VisionPrescriptionLensSpecification\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.add = None\n        \"\"\" Added power for multifocal levels.\n        Type `float`. \"\"\"\n        \n        self.axis = None\n        \"\"\" Lens meridian which contain no power for astigmatism.\n        Type `int`. \"\"\"\n        \n        self.backCurve = None\n        \"\"\" Contact lens back curvature.\n        Type `float`. \"\"\"\n        \n        self.brand = None\n        \"\"\" Brand required.\n        Type `str`. \"\"\"\n        \n        self.color = None\n        \"\"\" Color required.\n        Type `str`. \"\"\"\n        \n        self.cylinder = None\n        \"\"\" Lens power for astigmatism.\n        Type `float`. \"\"\"\n        \n        self.diameter = None\n        \"\"\" Contact lens diameter.\n        Type `float`. \"\"\"\n        \n        self.duration = None\n        \"\"\" Lens wear duration.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.eye = None\n        \"\"\" right | left.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Notes for coatings.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.power = None\n        \"\"\" Contact lens power.\n        Type `float`. \"\"\"\n        \n        self.prism = None\n        \"\"\" Eye alignment compensation.\n        List of `VisionPrescriptionLensSpecificationPrism` items (represented as `dict` in JSON). \"\"\"\n        \n        self.product = None\n        \"\"\" Product to be supplied.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.sphere = None\n        \"\"\" Power of the lens.\n        Type `float`. \"\"\"\n        \n        super(VisionPrescriptionLensSpecification, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VisionPrescriptionLensSpecification, self).elementProperties()\n        js.extend([\n            (\"add\", \"add\", float, False, None, False),\n            (\"axis\", \"axis\", int, False, None, False),\n            (\"backCurve\", \"backCurve\", float, False, None, False),\n            (\"brand\", \"brand\", str, False, None, False),\n            (\"color\", \"color\", str, False, None, False),\n            (\"cylinder\", \"cylinder\", float, False, None, False),\n            (\"diameter\", \"diameter\", float, False, None, False),\n            (\"duration\", \"duration\", quantity.Quantity, False, None, False),\n            (\"eye\", \"eye\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"power\", \"power\", float, False, None, False),\n            (\"prism\", \"prism\", VisionPrescriptionLensSpecificationPrism, True, None, False),\n            (\"product\", \"product\", codeableconcept.CodeableConcept, False, None, True),\n            (\"sphere\", \"sphere\", float, False, None, False),\n        ])\n        return js\n\n\nclass VisionPrescriptionLensSpecificationPrism(backboneelement.BackboneElement):\n    \"\"\" Eye alignment compensation.\n    \n    Allows for adjustment on two axis.\n    \"\"\"\n    \n    resource_type = \"VisionPrescriptionLensSpecificationPrism\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Amount of adjustment.\n        Type `float`. \"\"\"\n        \n        self.base = None\n        \"\"\" up | down | in | out.\n        Type `str`. \"\"\"\n        \n        super(VisionPrescriptionLensSpecificationPrism, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(VisionPrescriptionLensSpecificationPrism, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", float, False, None, True),\n            (\"base\", \"base\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance. If the original JSON value (`origval`) is not set, it returns the ISO 8601 string representation of the date. The method leverages the `isostring` property, which normalizes the date format, including handling partial dates. This method does not take any parameters and is primarily used to retrieve the input value for serialization or representation purposes.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance. If the original JSON value (`origval`) is not set, it returns the ISO 8601 string representation of the date. The method leverages the `isostring` property, which normalizes the date format, including handling partial dates. This method does not take any parameters and is primarily used to retrieve the input value for serialization or representation purposes.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format (or None). This value is passed to the constructor of the superclass, FHIRDate, for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None, intended to hold the Python representation of the provided ISO 8601 datetime string when parsed.\n\nThis constructor leverages the `FHIRDate` class for its initialization, which is responsible for parsing and storing the ISO 8601 datetime string. If the `jsonval` is provided, it will be processed by the superclass to allow for further manipulation within the FHIRDateTime class.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format (or None). This value is passed to the constructor of the superclass, FHIRDate, for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None, intended to hold the Python representation of the provided ISO 8601 datetime string when parsed.\n\nThis constructor leverages the `FHIRDate` class for its initialization, which is responsible for parsing and storing the ISO 8601 datetime string. If the `jsonval` is provided, it will be processed by the superclass to allow for further manipulation within the FHIRDateTime class.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` of the instance, which is defined by the class attribute `resource_type`. The resulting dictionary can be used for serialization, such as sending data to a FHIR server.\n\nReturns:\n    dict: A JSON-compatible representation of the instance, including the `resourceType` key.\n\nDependencies:\n    - The method calls `super()` to include attributes defined in the parent class, `FHIRAbstractBase`, ensuring all necessary fields are serialized.\n    - It relies on the `resource_type` class attribute to set the `resourceType` in the output JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` of the instance, which is defined by the class attribute `resource_type`. The resulting dictionary can be used for serialization, such as sending data to a FHIR server.\n\nReturns:\n    dict: A JSON-compatible representation of the instance, including the `resourceType` key.\n\nDependencies:\n    - The method calls `super()` to include attributes defined in the parent class, `FHIRAbstractBase`, ensuring all necessary fields are serialized.\n    - It relies on the `resource_type` class attribute to set the `resourceType` in the output JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/visionprescription.py": {
      "VisionPrescription.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a VisionPrescription instance, representing a prescription for vision correction products such as glasses and contact lenses for a patient. This constructor sets initial values for various properties including creation date, authorization date, encounter reference, business identifiers, lens specifications, patient reference, prescriber reference, and status of the prescription.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the VisionPrescription. If not provided, the attributes will be initialized to None.\n- strict (bool, default=True): If True, raises a TypeError for invalid properties during initialization, ensuring strict adherence to the FHIR specification.\n\nAttributes:\n- created (FHIRDateTime): Represents when the response was created.\n- dateWritten (FHIRDateTime): Indicates when the prescription was authorized.\n- encounter (FHIRReference): Reference to the encounter during which the prescription was created.\n- identifier (list of Identifier): A list of business identifiers associated with the vision prescription.\n- lensSpecification (list of VisionPrescriptionLensSpecification): Contains the specific details of lens authorizations.\n- patient (FHIRReference): A reference to the patient for whom the prescription is issued.\n- prescriber (FHIRReference): A reference to the person who authorized the vision prescription.\n- status (str): Represents the current status of the prescription, such as active, cancelled, draft, or entered-in-error.\n\nThis class relies on several types such as FHIRDateTime, FHIRReference, Identifier, and VisionPrescriptionLensSpecification, which are defined elsewhere in the code. These types are utilized to enforce specific data structures and validation as per the FHIR standard for medical resource representation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.created = None\n        ' Response creation date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.dateWritten = None\n        ' When prescription was authorized.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.encounter = None\n        ' Created during encounter / admission / stay.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for vision prescription.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.lensSpecification = None\n        ' Vision lens authorization.\\n        List of `VisionPrescriptionLensSpecification` items (represented as `dict` in JSON). '\n        self.patient = None\n        ' Who prescription is for.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.prescriber = None\n        ' Who authorized the vision prescription.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | cancelled | draft | entered-in-error.\\n        Type `str`. '\n        super(VisionPrescription, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a VisionPrescription instance, representing a prescription for vision correction products such as glasses and contact lenses for a patient. This constructor sets initial values for various properties including creation date, authorization date, encounter reference, business identifiers, lens specifications, patient reference, prescriber reference, and status of the prescription.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the VisionPrescription. If not provided, the attributes will be initialized to None.\n- strict (bool, default=True): If True, raises a TypeError for invalid properties during initialization, ensuring strict adherence to the FHIR specification.\n\nAttributes:\n- created (FHIRDateTime): Represents when the response was created.\n- dateWritten (FHIRDateTime): Indicates when the prescription was authorized.\n- encounter (FHIRReference): Reference to the encounter during which the prescription was created.\n- identifier (list of Identifier): A list of business identifiers associated with the vision prescription.\n- lensSpecification (list of VisionPrescriptionLensSpecification): Contains the specific details of lens authorizations.\n- patient (FHIRReference): A reference to the patient for whom the prescription is issued.\n- prescriber (FHIRReference): A reference to the person who authorized the vision prescription.\n- status (str): Represents the current status of the prescription, such as active, cancelled, draft, or entered-in-error.\n\nThis class relies on several types such as FHIRDateTime, FHIRReference, Identifier, and VisionPrescriptionLensSpecification, which are defined elsewhere in the code. These types are utilized to enforce specific data structures and validation as per the FHIR standard for medical resource representation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class VisionPrescription(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/visionprescription_test.py:VisionPrescriptionTests:testVisionPrescription1": {
      "tests/models/visionprescription_test.py:VisionPrescriptionTests:instantiate_from": {
        "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/visionprescription_test.py:VisionPrescriptionTests:implVisionPrescription1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/visionprescription_test.py:VisionPrescriptionTests:instantiate_from": {
      "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/visionprescription_test.py:VisionPrescriptionTests:testVisionPrescription2": {
      "tests/models/visionprescription_test.py:VisionPrescriptionTests:instantiate_from": {
        "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/visionprescription_test.py:VisionPrescriptionTests:implVisionPrescription2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/visionprescription.py:VisionPrescription:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/visionprescription.py:VisionPrescription:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-visionprescription_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 visionprescription.py\n            \u2514\u2500\u2500 VisionPrescription.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Vision Prescription module facilitates the validation, parsing, and processing of VisionPrescription resources compliant with the FHIR (Fast Healthcare Interoperability Resources) standard. It enables the handling of prescription data for corrective lenses, including attributes such as lens specifications, identifiers, creation dates, and status metadata. By supporting structured representation and comprehensive testing of prescription data, the module ensures the integrity and reliability of information exchanged in healthcare environments. This functionality addresses the need for accurate and consistent management of vision-related healthcare data, enabling developers to seamlessly integrate prescription handling into health IT systems.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance. If the original JSON value (`origval`) is not set, it returns the ISO 8601 string representation of the date. The method leverages the `isostring` property, which normalizes the date format, including handling partial dates. This method does not take any parameters and is primarily used to retrieve the input value for serialization or representation purposes.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a datetime in ISO 8601 format (or None). This value is passed to the constructor of the superclass, FHIRDate, for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object initialized to None, intended to hold the Python representation of the provided ISO 8601 datetime string when parsed.\n\nThis constructor leverages the `FHIRDate` class for its initialization, which is responsible for parsing and storing the ISO 8601 datetime string. If the `jsonval` is provided, it will be processed by the superclass to allow for further manipulation within the FHIRDateTime class.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current FHIRAbstractResource instance to a JSON-compatible dictionary format.\n\nThis method overrides the `as_json` method of the parent class to include the `resourceType` of the instance, which is defined by the class attribute `resource_type`. The resulting dictionary can be used for serialization, such as sending data to a FHIR server.\n\nReturns:\n    dict: A JSON-compatible representation of the instance, including the `resourceType` key.\n\nDependencies:\n    - The method calls `super()` to include attributes defined in the parent class, `FHIRAbstractBase`, ensuring all necessary fields are serialized.\n    - It relies on the `resource_type` class attribute to set the `resourceType` in the output JSON.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/visionprescription.py\n\n- CLASS METHOD: VisionPrescription.__init__\n  - CLASS SIGNATURE: class VisionPrescription(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a VisionPrescription instance, representing a prescription for vision correction products such as glasses and contact lenses for a patient. This constructor sets initial values for various properties including creation date, authorization date, encounter reference, business identifiers, lens specifications, patient reference, prescriber reference, and status of the prescription.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the VisionPrescription. If not provided, the attributes will be initialized to None.\n- strict (bool, default=True): If True, raises a TypeError for invalid properties during initialization, ensuring strict adherence to the FHIR specification.\n\nAttributes:\n- created (FHIRDateTime): Represents when the response was created.\n- dateWritten (FHIRDateTime): Indicates when the prescription was authorized.\n- encounter (FHIRReference): Reference to the encounter during which the prescription was created.\n- identifier (list of Identifier): A list of business identifiers associated with the vision prescription.\n- lensSpecification (list of VisionPrescriptionLensSpecification): Contains the specific details of lens authorizations.\n- patient (FHIRReference): A reference to the patient for whom the prescription is issued.\n- prescriber (FHIRReference): A reference to the person who authorized the vision prescription.\n- status (str): Represents the current status of the prescription, such as active, cancelled, draft, or entered-in-error.\n\nThis class relies on several types such as FHIRDateTime, FHIRReference, Identifier, and VisionPrescriptionLensSpecification, which are defined elsewhere in the code. These types are utilized to enforce specific data structures and validation as per the FHIR standard for medical resource representation.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/visionprescription.py": "from . import domainresource\n\nclass VisionPrescription(domainresource.DomainResource):\n    \"\"\" Prescription for vision correction products for a patient.\n    \n    An authorization for the provision of glasses and/or contact lenses to a\n    patient.\n    \"\"\"\n    resource_type = 'VisionPrescription'\n\n    def elementProperties(self):\n        js = super(VisionPrescription, self).elementProperties()\n        js.extend([('created', 'created', fhirdatetime.FHIRDateTime, False, None, True), ('dateWritten', 'dateWritten', fhirdatetime.FHIRDateTime, False, None, True), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('lensSpecification', 'lensSpecification', VisionPrescriptionLensSpecification, True, None, True), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('prescriber', 'prescriber', fhirreference.FHIRReference, False, None, True), ('status', 'status', str, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass VisionPrescriptionLensSpecification(backboneelement.BackboneElement):\n    \"\"\" Vision lens authorization.\n    \n    Contain the details of  the individual lens specifications and serves as\n    the authorization for the fullfillment by certified professionals.\n    \"\"\"\n    resource_type = 'VisionPrescriptionLensSpecification'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.add = None\n        ' Added power for multifocal levels.\\n        Type `float`. '\n        self.axis = None\n        ' Lens meridian which contain no power for astigmatism.\\n        Type `int`. '\n        self.backCurve = None\n        ' Contact lens back curvature.\\n        Type `float`. '\n        self.brand = None\n        ' Brand required.\\n        Type `str`. '\n        self.color = None\n        ' Color required.\\n        Type `str`. '\n        self.cylinder = None\n        ' Lens power for astigmatism.\\n        Type `float`. '\n        self.diameter = None\n        ' Contact lens diameter.\\n        Type `float`. '\n        self.duration = None\n        ' Lens wear duration.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.eye = None\n        ' right | left.\\n        Type `str`. '\n        self.note = None\n        ' Notes for coatings.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.power = None\n        ' Contact lens power.\\n        Type `float`. '\n        self.prism = None\n        ' Eye alignment compensation.\\n        List of `VisionPrescriptionLensSpecificationPrism` items (represented as `dict` in JSON). '\n        self.product = None\n        ' Product to be supplied.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.sphere = None\n        ' Power of the lens.\\n        Type `float`. '\n        super(VisionPrescriptionLensSpecification, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VisionPrescriptionLensSpecification, self).elementProperties()\n        js.extend([('add', 'add', float, False, None, False), ('axis', 'axis', int, False, None, False), ('backCurve', 'backCurve', float, False, None, False), ('brand', 'brand', str, False, None, False), ('color', 'color', str, False, None, False), ('cylinder', 'cylinder', float, False, None, False), ('diameter', 'diameter', float, False, None, False), ('duration', 'duration', quantity.Quantity, False, None, False), ('eye', 'eye', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('power', 'power', float, False, None, False), ('prism', 'prism', VisionPrescriptionLensSpecificationPrism, True, None, False), ('product', 'product', codeableconcept.CodeableConcept, False, None, True), ('sphere', 'sphere', float, False, None, False)])\n        return js\n\nclass VisionPrescriptionLensSpecificationPrism(backboneelement.BackboneElement):\n    \"\"\" Eye alignment compensation.\n    \n    Allows for adjustment on two axis.\n    \"\"\"\n    resource_type = 'VisionPrescriptionLensSpecificationPrism'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Amount of adjustment.\\n        Type `float`. '\n        self.base = None\n        ' up | down | in | out.\\n        Type `str`. '\n        super(VisionPrescriptionLensSpecificationPrism, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(VisionPrescriptionLensSpecificationPrism, self).elementProperties()\n        js.extend([('amount', 'amount', float, False, None, True), ('base', 'base', str, False, None, True)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity"
  }
}