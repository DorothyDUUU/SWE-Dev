{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductindication_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductindication_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductindication\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductIndicationTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductIndication\", js[\"resourceType\"])\n        return medicinalproductindication.MedicinalProductIndication(js)\n    \n    def testMedicinalProductIndication1(self):\n        inst = self.instantiate_from(\"medicinalproductindication-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductIndication instance\")\n        self.implMedicinalProductIndication1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductIndication\", js[\"resourceType\"])\n        inst2 = medicinalproductindication.MedicinalProductIndication(js)\n        self.implMedicinalProductIndication1(inst2)\n    \n    def implMedicinalProductIndication1(self, inst):\n        self.assertEqual(inst.comorbidity[0].coding[0].code, \"Hipsurgery\")\n        self.assertEqual(inst.comorbidity[0].coding[0].system, \"http://ema.europa.eu/example/comorbidity\")\n        self.assertEqual(inst.diseaseSymptomProcedure.coding[0].code, \"Venousthromboembolismprophylaxis\")\n        self.assertEqual(inst.diseaseSymptomProcedure.coding[0].system, \"http://ema.europa.eu/example/indicationasdisease-symptom-procedure\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.intendedEffect.coding[0].code, \"PRYLX\")\n        self.assertEqual(inst.intendedEffect.coding[0].system, \"http://ema.europa.eu/example/intendedeffect\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.population[0].ageRange.low.unit, \"a\")\n        self.assertEqual(inst.population[0].ageRange.low.value, 18)\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/medicinalproductindication.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductIndication(domainresource.DomainResource):\n    \"\"\" MedicinalProductIndication.\n    \n    Indication for the Medicinal Product.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIndication\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.comorbidity = None\n        \"\"\" Comorbidity (concurrent condition) or co-infection as part of the\n        indication.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.diseaseStatus = None\n        \"\"\" The status of the disease or symptom for which the indication\n        applies.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.diseaseSymptomProcedure = None\n        \"\"\" The disease, symptom or procedure that is the indication for\n        treatment.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.duration = None\n        \"\"\" Timing or duration information as part of the indication.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.intendedEffect = None\n        \"\"\" The intended effect, aim or strategy to be achieved by the\n        indication.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.otherTherapy = None\n        \"\"\" Information about the use of the medicinal product in relation to\n        other therapies described as part of the indication.\n        List of `MedicinalProductIndicationOtherTherapy` items (represented as `dict` in JSON). \"\"\"\n        \n        self.population = None\n        \"\"\" The population group to which this applies.\n        List of `Population` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" The medication for which this is an indication.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.undesirableEffect = None\n        \"\"\" Describe the undesirable effects of the medicinal product.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIndication, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIndication, self).elementProperties()\n        js.extend([\n            (\"comorbidity\", \"comorbidity\", codeableconcept.CodeableConcept, True, None, False),\n            (\"diseaseStatus\", \"diseaseStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"diseaseSymptomProcedure\", \"diseaseSymptomProcedure\", codeableconcept.CodeableConcept, False, None, False),\n            (\"duration\", \"duration\", quantity.Quantity, False, None, False),\n            (\"intendedEffect\", \"intendedEffect\", codeableconcept.CodeableConcept, False, None, False),\n            (\"otherTherapy\", \"otherTherapy\", MedicinalProductIndicationOtherTherapy, True, None, False),\n            (\"population\", \"population\", population.Population, True, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, True, None, False),\n            (\"undesirableEffect\", \"undesirableEffect\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductIndicationOtherTherapy(backboneelement.BackboneElement):\n    \"\"\" Information about the use of the medicinal product in relation to other\n    therapies described as part of the indication.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductIndicationOtherTherapy\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.medicationCodeableConcept = None\n        \"\"\" Reference to a specific medication (active substance, medicinal\n        product or class of products) as part of an indication or\n        contraindication.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.medicationReference = None\n        \"\"\" Reference to a specific medication (active substance, medicinal\n        product or class of products) as part of an indication or\n        contraindication.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.therapyRelationshipType = None\n        \"\"\" The type of relationship between the medicinal product indication\n        or contraindication and another therapy.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductIndicationOtherTherapy, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductIndicationOtherTherapy, self).elementProperties()\n        js.extend([\n            (\"medicationCodeableConcept\", \"medicationCodeableConcept\", codeableconcept.CodeableConcept, False, \"medication\", True),\n            (\"medicationReference\", \"medicationReference\", fhirreference.FHIRReference, False, \"medication\", True),\n            (\"therapyRelationshipType\", \"therapyRelationshipType\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import population\nfrom . import quantity\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes an instance of the FHIRAbstractResource class, which extends the FHIRAbstractBase to include server interaction capabilities. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data, which must include a 'resourceType' key that matches the class's resource_type. If it does not match, an exception is raised.\n- strict (bool, optional): Indicates whether to enforce strict type checks while initializing. Default is True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If 'jsondict' is provided and the 'resourceType' does not match the class's resource_type, indicating that the data is incompatible.\n\nAttributes:\n- _server (FHIRServer or None): The server the instance was read from, initialized to None.\n\nInteractions:\nThis constructor calls the superclass's __init__ method from FHIRAbstractBase, ensuring proper initialization and handling of any additional parameters defined there.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes an instance of the FHIRAbstractResource class, which extends the FHIRAbstractBase to include server interaction capabilities. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data, which must include a 'resourceType' key that matches the class's resource_type. If it does not match, an exception is raised.\n- strict (bool, optional): Indicates whether to enforce strict type checks while initializing. Default is True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If 'jsondict' is provided and the 'resourceType' does not match the class's resource_type, indicating that the data is incompatible.\n\nAttributes:\n- _server (FHIRServer or None): The server the instance was read from, initialized to None.\n\nInteractions:\nThis constructor calls the superclass's __init__ method from FHIRAbstractBase, ensuring proper initialization and handling of any additional parameters defined there.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource to a JSON dictionary representation.\n\nThis method overrides the `as_json` method of the superclass to include an additional key, 'resourceType', which is set to the value of the `resource_type` class attribute. This ensures that the JSON representation conforms to FHIR standards by explicitly indicating the type of resource being represented.\n\nReturns:\n    dict: A JSON dictionary representing the FHIR resource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to get the base JSON structure.\n    - `self.resource_type`: A class attribute that defines the type of the FHIR resource, ensuring proper identification in the JSON output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource to a JSON dictionary representation.\n\nThis method overrides the `as_json` method of the superclass to include an additional key, 'resourceType', which is set to the value of the `resource_type` class attribute. This ensures that the JSON representation conforms to FHIR standards by explicitly indicating the type of resource being represented.\n\nReturns:\n    dict: A JSON dictionary representing the FHIR resource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to get the base JSON structure.\n    - `self.resource_type`: A class attribute that defines the type of the FHIR resource, ensuring proper identification in the JSON output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class. The constructor takes an optional JSON dictionary to populate the instance's attributes and a `strict` flag to control error handling behavior during initialization. If `strict` is set to True, any validation errors encountered during the update from the provided JSON will raise a `FHIRValidationError`. If set to False, warnings for validation errors will be logged instead.\n\n    Parameters:\n    - jsondict (dict, optional): A JSON dictionary used for initializing the instance's attributes.\n    - strict (bool, optional): If True (default), raises `FHIRValidationError` on validation errors; otherwise, logs warnings.\n\n    Attributes:\n    - _resolved (dict): A dictionary holding resolved resources, initially set to None.\n    - _owner (FHIRAbstractBase or None): Points to the parent resource, allowing for hierarchical resource relationships, initially set to None.\n    \n    Interacts with `update_with_json` method to handle initialization from the provided JSON and perform validation. The `logger` is used to log warnings when strict initialization is not enforced.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializes an instance of the FHIRAbstractBase class. The constructor takes an optional JSON dictionary to populate the instance's attributes and a `strict` flag to control error handling behavior during initialization. If `strict` is set to True, any validation errors encountered during the update from the provided JSON will raise a `FHIRValidationError`. If set to False, warnings for validation errors will be logged instead.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the instance's attributes.\n- strict (bool, optional): If True (default), raises `FHIRValidationError` on validation errors; otherwise, logs warnings.\n\nAttributes:\n- _resolved (dict): A dictionary holding resolved resources, initially set to None.\n- _owner (FHIRAbstractBase or None): Points to the parent resource, allowing for hierarchical resource relationships, initially set to None.\n\nInteracts with `update_with_json` method to handle initialization from the provided JSON and perform validation. The `logger` is used to log warnings when strict initialization is not enforced.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or an array of JSON dictionaries. If the input is a dictionary containing a \"resourceType\", it utilizes the `FHIRElementFactory` to create the appropriate class instance based on the specified resource type. The method raises a TypeError for inputs that are neither dictionaries nor lists of dictionaries, ensuring the correct data type is processed.\n\nParameters:\n- jsonobj: A dict or a list of dicts that contains the JSON data used to instantiate the class or its instances.\n\nReturns:\n- An instance of the class if a single dictionary is provided, or a list of instances if a list of dictionaries is given, both constructed from the JSON data.\n\nRaises:\n- TypeError: When the input is not of the expected dict or list of dict types.\n- FHIRValidationError: If instantiation fails due to validation issues with the provided JSON data.\n\nThis method interacts with the internal method `_with_json_dict`, which handles the actual instantiation of a single dictionary. Each instance created may also rely on the `elementProperties` method for determining valid attributes during initialization.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or an array of JSON dictionaries. If the input is a dictionary containing a \"resourceType\", it utilizes the `FHIRElementFactory` to create the appropriate class instance based on the specified resource type. The method raises a TypeError for inputs that are neither dictionaries nor lists of dictionaries, ensuring the correct data type is processed.\n\nParameters:\n- jsonobj: A dict or a list of dicts that contains the JSON data used to instantiate the class or its instances.\n\nReturns:\n- An instance of the class if a single dictionary is provided, or a list of instances if a list of dictionaries is given, both constructed from the JSON data.\n\nRaises:\n- TypeError: When the input is not of the expected dict or list of dict types.\n- FHIRValidationError: If instantiation fails due to validation issues with the provided JSON data.\n\nThis method interacts with the internal method `_with_json_dict`, which handles the actual instantiation of a single dictionary. Each instance created may also rely on the `elementProperties` method for determining valid attributes during initialization.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal method to instantiate a FHIRAbstractBase class from a JSON dictionary.\n\n:param jsondict: A dictionary containing data for initializing an instance of the class.\n:raises TypeError: If the provided `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If instantiation fails during the update process using the provided dictionary.\n:returns: An instance of the class created from the values present in `jsondict`.\n\nThis method is intended for internal use within the class hierarchy, ensuring that only valid dictionary inputs are processed for object creation. It forms part of the instantiation logic found in the `with_json` class method, which requires a dictionary describing a FHIR resource.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal method to instantiate a FHIRAbstractBase class from a JSON dictionary.\n\n:param jsondict: A dictionary containing data for initializing an instance of the class.\n:raises TypeError: If the provided `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If instantiation fails during the update process using the provided dictionary.\n:returns: An instance of the class created from the values present in `jsondict`.\n\nThis method is intended for internal use within the class hierarchy, ensuring that only valid dictionary inputs are processed for object creation. It forms part of the instantiation logic found in the `with_json` class method, which requires a dictionary describing a FHIR resource.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates a FHIR element from a JSON object and associates it with an owner resource. This method forwards the JSON object to the `with_json()` class method for instantiation and subsequently sets the `_owner` attribute, which points to the parent resource containing the current element. This relationship is crucial for resolving contained resources within the FHIR model.\n\n:param dict jsonobj: A decoded JSON dictionary or a list of dictionaries used to create the element(s).\n:param FHIRElement owner: The parent resource that owns the current element, aiding in resource resolution.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If instantiation of the element fails due to validation errors encountered during the process.\n:returns: An instance or a list of instances populated from the provided JSON data, with their `_owner` attribute set.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates a FHIR element from a JSON object and associates it with an owner resource. This method forwards the JSON object to the `with_json()` class method for instantiation and subsequently sets the `_owner` attribute, which points to the parent resource containing the current element. This relationship is crucial for resolving contained resources within the FHIR model.\n\n:param dict jsonobj: A decoded JSON dictionary or a list of dictionaries used to create the element(s).\n:param FHIRElement owner: The parent resource that owns the current element, aiding in resource resolution.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If instantiation of the element fails due to validation errors encountered during the process.\n:returns: An instance or a list of instances populated from the provided JSON data, with their `_owner` attribute set.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following information: the attribute name in the class, the corresponding JSON key name, the expected data type, whether the property is a list, a potential constraint indicating which type it's a list of, and whether the property is mandatory (not optional).\n\nThis method is expected to be overridden in subclasses to specify the actual properties for that specific FHIR element. The method returns an empty list by default, indicating that no properties are defined at the abstract base level. It is crucial for serialization and deserialization processes within the FHIR model, enabling proper conversion between the Python representation and the JSON format used in FHIR interoperability.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following information: the attribute name in the class, the corresponding JSON key name, the expected data type, whether the property is a list, a potential constraint indicating which type it's a list of, and whether the property is mandatory (not optional).\n\nThis method is expected to be overridden in subclasses to specify the actual properties for that specific FHIR element. The method returns an empty list by default, indicating that no properties are defined at the abstract base level. It is crucial for serialization and deserialization processes within the FHIR model, enabling proper conversion between the Python representation and the JSON format used in FHIR interoperability.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Update the instance of the current FHIR element with data from a JSON dictionary.\n\nThis method processes the provided `jsondict`, validates the data against the expected structure defined in `elementProperties()`, and assigns the values to the corresponding instance attributes. It raises a `FHIRValidationError` if validation fails due to type mismatches, missing non-optional properties, or unexpected keys in the `jsondict`.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance. It must be of type `dict`.\n\nReturns:\n- None: The instance is updated in place. If an error occurs, a `FHIRValidationError` is raised containing a list of the issues encountered during processing.\n\nConstants:\n- valid (set): A set that keeps track of the valid keys expected in the JSON data, initially containing 'resourceType'. This is extended with properties defined in `elementProperties()`.\n- found (set): Tracks which properties were successfully found and validated in the incoming JSON data.\n- nonoptionals (set): Records the properties that are marked as non-optional to check for their presence after parsing.\n\nThe function interacts with `elementProperties()` to obtain the expected structure of the instance and calls `self._matches_type()` to validate data types against expected types.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Update the instance of the current FHIR element with data from a JSON dictionary.\n\nThis method processes the provided `jsondict`, validates the data against the expected structure defined in `elementProperties()`, and assigns the values to the corresponding instance attributes. It raises a `FHIRValidationError` if validation fails due to type mismatches, missing non-optional properties, or unexpected keys in the `jsondict`.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance. It must be of type `dict`.\n\nReturns:\n- None: The instance is updated in place. If an error occurs, a `FHIRValidationError` is raised containing a list of the issues encountered during processing.\n\nConstants:\n- valid (set): A set that keeps track of the valid keys expected in the JSON data, initially containing 'resourceType'. This is extended with properties defined in `elementProperties()`.\n- found (set): Tracks which properties were successfully found and validated in the incoming JSON data.\n- nonoptionals (set): Records the properties that are marked as non-optional to check for their presence after parsing.\n\nThe function interacts with `elementProperties()` to obtain the expected structure of the instance and calls `self._matches_type()` to validate data types against expected types.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance to a JSON-compatible dictionary by utilizing the\n    property's metadata defined in `elementProperties()`. The method ensures\n    that all required properties are not None (and that lists are not empty)\n    and validates that the types of non-None properties match their expected\n    types. \n\n    Raises:\n        FHIRValidationError: If any properties are of incorrect type, if they \n        are required but missing, or for additional validation errors during \n        serialization.\n\n    Returns:\n        dict: A validated dictionary representation of the instance, suitable \n        for JSON serialization.\n\n    Important attributes:\n        - `nonoptionals`: A set to track properties marked as not optional \n          (from `elementProperties()`). Used to ensure that required properties \n          are present in the final output.\n        - `found`: A set that accumulates the properties that were successfully \n          added to the JSON representation to check for missing required fields.\n\n    The method relies on the `elementProperties()` method to provide the\n    necessary metadata about each attribute, including its name, JSON \n    serialization name, type, and whether it is a required property.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance to a JSON-compatible dictionary by utilizing the\nproperty's metadata defined in `elementProperties()`. The method ensures\nthat all required properties are not None (and that lists are not empty)\nand validates that the types of non-None properties match their expected\ntypes. \n\nRaises:\n    FHIRValidationError: If any properties are of incorrect type, if they \n    are required but missing, or for additional validation errors during \n    serialization.\n\nReturns:\n    dict: A validated dictionary representation of the instance, suitable \n    for JSON serialization.\n\nImportant attributes:\n    - `nonoptionals`: A set to track properties marked as not optional \n      (from `elementProperties()`). Used to ensure that required properties \n      are present in the final output.\n    - `found`: A set that accumulates the properties that were successfully \n      added to the JSON representation to check for missing required fields.\n\nThe method relies on the `elementProperties()` method to provide the\nnecessary metadata about each attribute, including its name, JSON \nserialization name, type, and whether it is a required property.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if the provided value matches the specified type.\n\nThis method is used to validate whether the given value is of the expected type or not, accommodating specific type handling for numeric types and string compatibility in Python 2.\n\n:param value: The value to validate against the specified type.\n:param typ: The expected type of the value.\n\n:return: True if the value matches the type, False otherwise. Returns True if value is None, as it is considered valid.\n\nNotes:\n- The function accommodates type distinctions for integers and floats, ensuring that numbers are recognized regardless of their specific type.\n- It also includes compatibility handling for strings between Python 2 and 3 using the 'sys' module to check the Python version.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if the provided value matches the specified type.\n\nThis method is used to validate whether the given value is of the expected type or not, accommodating specific type handling for numeric types and string compatibility in Python 2.\n\n:param value: The value to validate against the specified type.\n:param typ: The expected type of the value.\n\n:return: True if the value matches the type, False otherwise. Returns True if value is None, as it is considered valid.\n\nNotes:\n- The function accommodates type distinctions for integers and floats, ensuring that numbers are recognized regardless of their specific type.\n- It also includes compatibility handling for strings between Python 2 and 3 using the 'sys' module to check the Python version.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/medicinalproductindication.py": {
      "MedicinalProductIndication.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductIndication instance.\n\nThis constructor initializes the properties relevant to the indication of a medicinal product, which includes comorbidity, disease status, symptoms, intended effects, duration, relationships to other therapies, and the populations affected. If provided, a JSON dictionary can populate these attributes. The `strict` parameter determines whether to enforce strict validation rules during initialization, raising a FHIRValidationError if invalid data is encountered.\n\nParameters:\n- jsondict (dict): A JSON dictionary for initializing the properties of the indication.\n- strict (bool): If True (default), raises a TypeError on validation errors.\n\nAttributes set during initialization include:\n- comorbidity: List of CodeableConcept instances representing concurrent conditions related to the indication.\n- diseaseStatus: CodeableConcept instance indicating the status of the disease or symptom.\n- diseaseSymptomProcedure: CodeableConcept instance for the disease, symptom, or procedure underlying the indication.\n- duration: Quantity instance representing timing or duration information related to the indication.\n- intendedEffect: CodeableConcept instance for the intended aim of the treatment.\n- otherTherapy: List of MedicinalProductIndicationOtherTherapy instances detailing relationships to other therapies.\n- population: List of Population instances indicating the applicable population group.\n- subject: List of FHIRReference instances specifying the medication for which this indication is relevant.\n- undesirableEffect: List of FHIRReference instances describing any undesirable effects related to the medicinal product.\n\nThis class inherits from `domainresource.DomainResource`, which may provide additional functionality or attributes relevant to FHIR resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.comorbidity = None\n        ' Comorbidity (concurrent condition) or co-infection as part of the\\n        indication.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.diseaseStatus = None\n        ' The status of the disease or symptom for which the indication\\n        applies.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.diseaseSymptomProcedure = None\n        ' The disease, symptom or procedure that is the indication for\\n        treatment.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.duration = None\n        ' Timing or duration information as part of the indication.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.intendedEffect = None\n        ' The intended effect, aim or strategy to be achieved by the\\n        indication.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.otherTherapy = None\n        ' Information about the use of the medicinal product in relation to\\n        other therapies described as part of the indication.\\n        List of `MedicinalProductIndicationOtherTherapy` items (represented as `dict` in JSON). '\n        self.population = None\n        ' The population group to which this applies.\\n        List of `Population` items (represented as `dict` in JSON). '\n        self.subject = None\n        ' The medication for which this is an indication.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.undesirableEffect = None\n        ' Describe the undesirable effects of the medicinal product.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(MedicinalProductIndication, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductIndication instance.\n\nThis constructor initializes the properties relevant to the indication of a medicinal product, which includes comorbidity, disease status, symptoms, intended effects, duration, relationships to other therapies, and the populations affected. If provided, a JSON dictionary can populate these attributes. The `strict` parameter determines whether to enforce strict validation rules during initialization, raising a FHIRValidationError if invalid data is encountered.\n\nParameters:\n- jsondict (dict): A JSON dictionary for initializing the properties of the indication.\n- strict (bool): If True (default), raises a TypeError on validation errors.\n\nAttributes set during initialization include:\n- comorbidity: List of CodeableConcept instances representing concurrent conditions related to the indication.\n- diseaseStatus: CodeableConcept instance indicating the status of the disease or symptom.\n- diseaseSymptomProcedure: CodeableConcept instance for the disease, symptom, or procedure underlying the indication.\n- duration: Quantity instance representing timing or duration information related to the indication.\n- intendedEffect: CodeableConcept instance for the intended aim of the treatment.\n- otherTherapy: List of MedicinalProductIndicationOtherTherapy instances detailing relationships to other therapies.\n- population: List of Population instances indicating the applicable population group.\n- subject: List of FHIRReference instances specifying the medication for which this indication is relevant.\n- undesirableEffect: List of FHIRReference instances describing any undesirable effects related to the medicinal product.\n\nThis class inherits from `domainresource.DomainResource`, which may provide additional functionality or attributes relevant to FHIR resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductIndication(domainresource.DomainResource):"
      },
      "MedicinalProductIndication.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of properties for the MedicinalProductIndication class, including their names, types, and whether they are required. This method overrides the `elementProperties` method from its superclass `DomainResource` to include specific attributes related to medicinal product indications, such as comorbidity, disease status, disease symptom/procedure, duration, intended effect, other therapies, population, subject, and undesirable effects. Each property is represented as a tuple consisting of the property name, JSON key, expected data type, cardinality, and additional attributes. The method uses types defined in the `codeableconcept`, `quantity`, `population`, and `fhirreference` modules, which provide structure to data within the FHIR framework.\n\nReturns:\n- A list of tuples that describe each element's properties in the MedicinalProductIndication class.\"\"\"\n        js = super(MedicinalProductIndication, self).elementProperties()\n        js.extend([('comorbidity', 'comorbidity', codeableconcept.CodeableConcept, True, None, False), ('diseaseStatus', 'diseaseStatus', codeableconcept.CodeableConcept, False, None, False), ('diseaseSymptomProcedure', 'diseaseSymptomProcedure', codeableconcept.CodeableConcept, False, None, False), ('duration', 'duration', quantity.Quantity, False, None, False), ('intendedEffect', 'intendedEffect', codeableconcept.CodeableConcept, False, None, False), ('otherTherapy', 'otherTherapy', MedicinalProductIndicationOtherTherapy, True, None, False), ('population', 'population', population.Population, True, None, False), ('subject', 'subject', fhirreference.FHIRReference, True, None, False), ('undesirableEffect', 'undesirableEffect', fhirreference.FHIRReference, True, None, False)])\n        return js",
        "docstring": "Returns a list of properties for the MedicinalProductIndication class, including their names, types, and whether they are required. This method overrides the `elementProperties` method from its superclass `DomainResource` to include specific attributes related to medicinal product indications, such as comorbidity, disease status, disease symptom/procedure, duration, intended effect, other therapies, population, subject, and undesirable effects. Each property is represented as a tuple consisting of the property name, JSON key, expected data type, cardinality, and additional attributes. The method uses types defined in the `codeableconcept`, `quantity`, `population`, and `fhirreference` modules, which provide structure to data within the FHIR framework.\n\nReturns:\n- A list of tuples that describe each element's properties in the MedicinalProductIndication class.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class MedicinalProductIndication(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Resource instance.\n\nThis constructor sets up the basic properties of the Resource, which is the base type for all FHIR resources. It initializes the properties `id`, `implicitRules`, `language`, and `meta`, which are fundamental to identifying and describing the resource. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it should contain valid values for the resource fields as defined by the FHIR standard.\n- strict (bool, default=True): If set to True, invalid variables will trigger a FHIRValidationError, ensuring that the initialization adheres to strict rules. If False, such errors will be suppressed.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which this resource was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata about the resource, which is defined as a separate class and represented as a dictionary in JSON.\n\nThis method also calls the parent constructor of `FHIRAbstractResource` to incorporate additional functionality required for all FHIR resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Resource instance.\n\nThis constructor sets up the basic properties of the Resource, which is the base type for all FHIR resources. It initializes the properties `id`, `implicitRules`, `language`, and `meta`, which are fundamental to identifying and describing the resource. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it should contain valid values for the resource fields as defined by the FHIR standard.\n- strict (bool, default=True): If set to True, invalid variables will trigger a FHIRValidationError, ensuring that the initialization adheres to strict rules. If False, such errors will be suppressed.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which this resource was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata about the resource, which is defined as a separate class and represented as a dictionary in JSON.\n\nThis method also calls the parent constructor of `FHIRAbstractResource` to incorporate additional functionality required for all FHIR resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of properties for the Resource instance, including their names, types, and constraints. This method calls its superclass's `elementProperties` method to retrieve base properties and extends the list with additional properties specific to the Resource class. \n\nThe properties returned include:\n- `id`: Logical identifier of the resource (type: `str`).\n- `implicitRules`: Set of rules under which the resource content was created (type: `str`).\n- `language`: Language of the resource content (type: `str`).\n- `meta`: Metadata about the resource (type: `Meta`, must be represented as `dict` in JSON, imported from the `meta` module).\n\nThe method does not take any parameters and returns a list of tuples, where each tuple contains the property name, the JSON key, data type, whether it's required, any additional constraints, and whether it is part of a list. This is crucial for serializing and deserializing FHIR resources.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Returns a list of properties for the Resource instance, including their names, types, and constraints. This method calls its superclass's `elementProperties` method to retrieve base properties and extends the list with additional properties specific to the Resource class. \n\nThe properties returned include:\n- `id`: Logical identifier of the resource (type: `str`).\n- `implicitRules`: Set of rules under which the resource content was created (type: `str`).\n- `language`: Language of the resource content (type: `str`).\n- `meta`: Metadata about the resource (type: `Meta`, must be represented as `dict` in JSON, imported from the `meta` module).\n\nThe method does not take any parameters and returns a list of tuples, where each tuple contains the property name, the JSON key, data type, whether it's required, any additional constraints, and whether it is part of a list. This is crucial for serializing and deserializing FHIR resources.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor sets the initial values for the attributes `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initializing these attributes from a JSON dictionary, while the `strict` parameter determines whether to raise a `FHIRValidationError` for invalid properties (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for the initialization of the resource's properties.\n- strict (bool, optional): If True (default), raises TypeError for invalid properties; if False, validation errors will be ignored.\n\nAttributes:\n- contained: List of contained resources, represented as `Resource` items (dict in JSON).\n- extension: List of additional content defined by implementations, represented as `Extension` items (dict in JSON).\n- modifierExtension: List of critical extensions that cannot be ignored, represented as `Extension` items (dict in JSON).\n- text: A text summary of the resource for human interpretation, represented as a `Narrative` (dict in JSON).\n\nThis method interacts with the superclass `Resource` to initialize common resource properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor sets the initial values for the attributes `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initializing these attributes from a JSON dictionary, while the `strict` parameter determines whether to raise a `FHIRValidationError` for invalid properties (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for the initialization of the resource's properties.\n- strict (bool, optional): If True (default), raises TypeError for invalid properties; if False, validation errors will be ignored.\n\nAttributes:\n- contained: List of contained resources, represented as `Resource` items (dict in JSON).\n- extension: List of additional content defined by implementations, represented as `Extension` items (dict in JSON).\n- modifierExtension: List of critical extensions that cannot be ignored, represented as `Extension` items (dict in JSON).\n- text: A text summary of the resource for human interpretation, represented as a `Narrative` (dict in JSON).\n\nThis method interacts with the superclass `Resource` to initialize common resource properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve element properties for the DomainResource.\n\nThis method overrides the inherited `elementProperties` method from the `resource.Resource` class to include specific properties relevant to the `DomainResource`. It constructs a list of tuples that define the resource's attributes, specifying their names, types, and whether they are mandatory or repeatable in the context of JSON representation. The properties included are:\n- `contained`: a list of inline resources (Type: `Resource`, Repeatable: True)\n- `extension`: a list of additional content defined by implementations (Type: `Extension`, Repeatable: True)\n- `modifierExtension`: a list of extensions that cannot be ignored (Type: `Extension`, Repeatable: True)\n- `text`: a human-readable text summary of the resource (Type: `Narrative`, Repeatable: False)\n\nReturn: A list of tuples representing the properties of the `DomainResource`.\n\nDependencies: This method interacts with the `resource.Resource` class to call `super()` and obtain base element properties and incorporates definitions from imported modules `extension` and `narrative`, which define the `Extension` and `Narrative` types respectively.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Retrieve element properties for the DomainResource.\n\nThis method overrides the inherited `elementProperties` method from the `resource.Resource` class to include specific properties relevant to the `DomainResource`. It constructs a list of tuples that define the resource's attributes, specifying their names, types, and whether they are mandatory or repeatable in the context of JSON representation. The properties included are:\n- `contained`: a list of inline resources (Type: `Resource`, Repeatable: True)\n- `extension`: a list of additional content defined by implementations (Type: `Extension`, Repeatable: True)\n- `modifierExtension`: a list of extensions that cannot be ignored (Type: `Extension`, Repeatable: True)\n- `text`: a human-readable text summary of the resource (Type: `Narrative`, Repeatable: False)\n\nReturn: A list of tuples representing the properties of the `DomainResource`.\n\nDependencies: This method interacts with the `resource.Resource` class to call `super()` and obtain base element properties and incorporates definitions from imported modules `extension` and `narrative`, which define the `Extension` and `Narrative` types respectively.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/medicinalproductindication_test.py:MedicinalProductIndicationTests:testMedicinalProductIndication1": {
      "tests/models/medicinalproductindication_test.py:MedicinalProductIndicationTests:instantiate_from": {
        "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductindication_test.py:MedicinalProductIndicationTests:implMedicinalProductIndication1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductindication_test.py:MedicinalProductIndicationTests:instantiate_from": {
      "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductindication.py:MedicinalProductIndication:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductindication_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 medicinalproductindication.py\n        \u2502   \u251c\u2500\u2500 MedicinalProductIndication.__init__\n        \u2502   \u2514\u2500\u2500 MedicinalProductIndication.elementProperties\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Medicinal Product Indication module facilitates the validation and handling of FHIR (Fast Healthcare Interoperability Resources) data related to medicinal product indications. It enables users to parse, instantiate, and assess FHIR-compliant MedicinalProductIndication resources, ensuring that key data such as comorbidities, intended effects, disease symptoms, and population details are accurately represented and validated against predefined standards. This module supports developers or systems in testing and verifying the correctness and compliance of medicinal product indication data, ensuring interoperability in healthcare IT systems while adhering to FHIR 4.0.1 specifications. It addresses the need for robust validation and lifecycle management of medicinal indication resources in clinical and regulatory workflows.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractResource class, which extends the FHIRAbstractBase to include server interaction capabilities. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing resource data, which must include a 'resourceType' key that matches the class's resource_type. If it does not match, an exception is raised.\n- strict (bool, optional): Indicates whether to enforce strict type checks while initializing. Default is True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If 'jsondict' is provided and the 'resourceType' does not match the class's resource_type, indicating that the data is incompatible.\n\nAttributes:\n- _server (FHIRServer or None): The server the instance was read from, initialized to None.\n\nInteractions:\nThis constructor calls the superclass's __init__ method from FHIRAbstractBase, ensuring proper initialization and handling of any additional parameters defined there.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource to a JSON dictionary representation.\n\nThis method overrides the `as_json` method of the superclass to include an additional key, 'resourceType', which is set to the value of the `resource_type` class attribute. This ensures that the JSON representation conforms to FHIR standards by explicitly indicating the type of resource being represented.\n\nReturns:\n    dict: A JSON dictionary representing the FHIR resource instance, including the 'resourceType' key.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json` method to get the base JSON structure.\n    - `self.resource_type`: A class attribute that defines the type of the FHIR resource, ensuring proper identification in the JSON output.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class. The constructor takes an optional JSON dictionary to populate the instance's attributes and a `strict` flag to control error handling behavior during initialization. If `strict` is set to True, any validation errors encountered during the update from the provided JSON will raise a `FHIRValidationError`. If set to False, warnings for validation errors will be logged instead.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the instance's attributes.\n- strict (bool, optional): If True (default), raises `FHIRValidationError` on validation errors; otherwise, logs warnings.\n\nAttributes:\n- _resolved (dict): A dictionary holding resolved resources, initially set to None.\n- _owner (FHIRAbstractBase or None): Points to the parent resource, allowing for hierarchical resource relationships, initially set to None.\n\nInteracts with `update_with_json` method to handle initialization from the provided JSON and perform validation. The `logger` is used to log warnings when strict initialization is not enforced.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal method to instantiate a FHIRAbstractBase class from a JSON dictionary.\n\n:param jsondict: A dictionary containing data for initializing an instance of the class.\n:raises TypeError: If the provided `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If instantiation fails during the update process using the provided dictionary.\n:returns: An instance of the class created from the values present in `jsondict`.\n\nThis method is intended for internal use within the class hierarchy, ensuring that only valid dictionary inputs are processed for object creation. It forms part of the instantiation logic found in the `with_json` class method, which requires a dictionary describing a FHIR resource.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the provided value matches the specified type.\n\nThis method is used to validate whether the given value is of the expected type or not, accommodating specific type handling for numeric types and string compatibility in Python 2.\n\n:param value: The value to validate against the specified type.\n:param typ: The expected type of the value.\n\n:return: True if the value matches the type, False otherwise. Returns True if value is None, as it is considered valid.\n\nNotes:\n- The function accommodates type distinctions for integers and floats, ensuring that numbers are recognized regardless of their specific type.\n- It also includes compatibility handling for strings between Python 2 and 3 using the 'sys' module to check the Python version.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates a FHIR element from a JSON object and associates it with an owner resource. This method forwards the JSON object to the `with_json()` class method for instantiation and subsequently sets the `_owner` attribute, which points to the parent resource containing the current element. This relationship is crucial for resolving contained resources within the FHIR model.\n\n:param dict jsonobj: A decoded JSON dictionary or a list of dictionaries used to create the element(s).\n:param FHIRElement owner: The parent resource that owns the current element, aiding in resource resolution.\n:raises TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: If instantiation of the element fails due to validation errors encountered during the process.\n:returns: An instance or a list of instances populated from the provided JSON data, with their `_owner` attribute set.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following information: the attribute name in the class, the corresponding JSON key name, the expected data type, whether the property is a list, a potential constraint indicating which type it's a list of, and whether the property is mandatory (not optional).\n\nThis method is expected to be overridden in subclasses to specify the actual properties for that specific FHIR element. The method returns an empty list by default, indicating that no properties are defined at the abstract base level. It is crucial for serialization and deserialization processes within the FHIR model, enabling proper conversion between the Python representation and the JSON format used in FHIR interoperability.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or an array of JSON dictionaries. If the input is a dictionary containing a \"resourceType\", it utilizes the `FHIRElementFactory` to create the appropriate class instance based on the specified resource type. The method raises a TypeError for inputs that are neither dictionaries nor lists of dictionaries, ensuring the correct data type is processed.\n\nParameters:\n- jsonobj: A dict or a list of dicts that contains the JSON data used to instantiate the class or its instances.\n\nReturns:\n- An instance of the class if a single dictionary is provided, or a list of instances if a list of dictionaries is given, both constructed from the JSON data.\n\nRaises:\n- TypeError: When the input is not of the expected dict or list of dict types.\n- FHIRValidationError: If instantiation fails due to validation issues with the provided JSON data.\n\nThis method interacts with the internal method `_with_json_dict`, which handles the actual instantiation of a single dictionary. Each instance created may also rely on the `elementProperties` method for determining valid attributes during initialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance to a JSON-compatible dictionary by utilizing the\nproperty's metadata defined in `elementProperties()`. The method ensures\nthat all required properties are not None (and that lists are not empty)\nand validates that the types of non-None properties match their expected\ntypes. \n\nRaises:\n    FHIRValidationError: If any properties are of incorrect type, if they \n    are required but missing, or for additional validation errors during \n    serialization.\n\nReturns:\n    dict: A validated dictionary representation of the instance, suitable \n    for JSON serialization.\n\nImportant attributes:\n    - `nonoptionals`: A set to track properties marked as not optional \n      (from `elementProperties()`). Used to ensure that required properties \n      are present in the final output.\n    - `found`: A set that accumulates the properties that were successfully \n      added to the JSON representation to check for missing required fields.\n\nThe method relies on the `elementProperties()` method to provide the\nnecessary metadata about each attribute, including its name, JSON \nserialization name, type, and whether it is a required property.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdate the instance of the current FHIR element with data from a JSON dictionary.\n\nThis method processes the provided `jsondict`, validates the data against the expected structure defined in `elementProperties()`, and assigns the values to the corresponding instance attributes. It raises a `FHIRValidationError` if validation fails due to type mismatches, missing non-optional properties, or unexpected keys in the `jsondict`.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance. It must be of type `dict`.\n\nReturns:\n- None: The instance is updated in place. If an error occurs, a `FHIRValidationError` is raised containing a list of the issues encountered during processing.\n\nConstants:\n- valid (set): A set that keeps track of the valid keys expected in the JSON data, initially containing 'resourceType'. This is extended with properties defined in `elementProperties()`.\n- found (set): Tracks which properties were successfully found and validated in the incoming JSON data.\n- nonoptionals (set): Records the properties that are marked as non-optional to check for their presence after parsing.\n\nThe function interacts with `elementProperties()` to obtain the expected structure of the instance and calls `self._matches_type()` to validate data types against expected types.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/medicinalproductindication.py\n\n- CLASS METHOD: MedicinalProductIndication.elementProperties\n  - CLASS SIGNATURE: class MedicinalProductIndication(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of properties for the MedicinalProductIndication class, including their names, types, and whether they are required. This method overrides the `elementProperties` method from its superclass `DomainResource` to include specific attributes related to medicinal product indications, such as comorbidity, disease status, disease symptom/procedure, duration, intended effect, other therapies, population, subject, and undesirable effects. Each property is represented as a tuple consisting of the property name, JSON key, expected data type, cardinality, and additional attributes. The method uses types defined in the `codeableconcept`, `quantity`, `population`, and `fhirreference` modules, which provide structure to data within the FHIR framework.\n\nReturns:\n- A list of tuples that describe each element's properties in the MedicinalProductIndication class.\n\"\"\"\n```\n\n- CLASS METHOD: MedicinalProductIndication.__init__\n  - CLASS SIGNATURE: class MedicinalProductIndication(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductIndication instance.\n\nThis constructor initializes the properties relevant to the indication of a medicinal product, which includes comorbidity, disease status, symptoms, intended effects, duration, relationships to other therapies, and the populations affected. If provided, a JSON dictionary can populate these attributes. The `strict` parameter determines whether to enforce strict validation rules during initialization, raising a FHIRValidationError if invalid data is encountered.\n\nParameters:\n- jsondict (dict): A JSON dictionary for initializing the properties of the indication.\n- strict (bool): If True (default), raises a TypeError on validation errors.\n\nAttributes set during initialization include:\n- comorbidity: List of CodeableConcept instances representing concurrent conditions related to the indication.\n- diseaseStatus: CodeableConcept instance indicating the status of the disease or symptom.\n- diseaseSymptomProcedure: CodeableConcept instance for the disease, symptom, or procedure underlying the indication.\n- duration: Quantity instance representing timing or duration information related to the indication.\n- intendedEffect: CodeableConcept instance for the intended aim of the treatment.\n- otherTherapy: List of MedicinalProductIndicationOtherTherapy instances detailing relationships to other therapies.\n- population: List of Population instances indicating the applicable population group.\n- subject: List of FHIRReference instances specifying the medication for which this indication is relevant.\n- undesirableEffect: List of FHIRReference instances describing any undesirable effects related to the medicinal product.\n\nThis class inherits from `domainresource.DomainResource`, which may provide additional functionality or attributes relevant to FHIR resources.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of properties for the Resource instance, including their names, types, and constraints. This method calls its superclass's `elementProperties` method to retrieve base properties and extends the list with additional properties specific to the Resource class. \n\nThe properties returned include:\n- `id`: Logical identifier of the resource (type: `str`).\n- `implicitRules`: Set of rules under which the resource content was created (type: `str`).\n- `language`: Language of the resource content (type: `str`).\n- `meta`: Metadata about the resource (type: `Meta`, must be represented as `dict` in JSON, imported from the `meta` module).\n\nThe method does not take any parameters and returns a list of tuples, where each tuple contains the property name, the JSON key, data type, whether it's required, any additional constraints, and whether it is part of a list. This is crucial for serializing and deserializing FHIR resources.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Resource instance.\n\nThis constructor sets up the basic properties of the Resource, which is the base type for all FHIR resources. It initializes the properties `id`, `implicitRules`, `language`, and `meta`, which are fundamental to identifying and describing the resource. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource properties. If provided, it should contain valid values for the resource fields as defined by the FHIR standard.\n- strict (bool, default=True): If set to True, invalid variables will trigger a FHIRValidationError, ensuring that the initialization adheres to strict rules. If False, such errors will be suppressed.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which this resource was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata about the resource, which is defined as a separate class and represented as a dictionary in JSON.\n\nThis method also calls the parent constructor of `FHIRAbstractResource` to incorporate additional functionality required for all FHIR resources.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve element properties for the DomainResource.\n\nThis method overrides the inherited `elementProperties` method from the `resource.Resource` class to include specific properties relevant to the `DomainResource`. It constructs a list of tuples that define the resource's attributes, specifying their names, types, and whether they are mandatory or repeatable in the context of JSON representation. The properties included are:\n- `contained`: a list of inline resources (Type: `Resource`, Repeatable: True)\n- `extension`: a list of additional content defined by implementations (Type: `Extension`, Repeatable: True)\n- `modifierExtension`: a list of extensions that cannot be ignored (Type: `Extension`, Repeatable: True)\n- `text`: a human-readable text summary of the resource (Type: `Narrative`, Repeatable: False)\n\nReturn: A list of tuples representing the properties of the `DomainResource`.\n\nDependencies: This method interacts with the `resource.Resource` class to call `super()` and obtain base element properties and incorporates definitions from imported modules `extension` and `narrative`, which define the `Extension` and `Narrative` types respectively.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor sets the initial values for the attributes `contained`, `extension`, `modifierExtension`, and `text`. The `jsondict` parameter allows for initializing these attributes from a JSON dictionary, while the `strict` parameter determines whether to raise a `FHIRValidationError` for invalid properties (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for the initialization of the resource's properties.\n- strict (bool, optional): If True (default), raises TypeError for invalid properties; if False, validation errors will be ignored.\n\nAttributes:\n- contained: List of contained resources, represented as `Resource` items (dict in JSON).\n- extension: List of additional content defined by implementations, represented as `Extension` items (dict in JSON).\n- modifierExtension: List of critical extensions that cannot be ignored, represented as `Extension` items (dict in JSON).\n- text: A text summary of the resource for human interpretation, represented as a `Narrative` (dict in JSON).\n\nThis method interacts with the superclass `Resource` to initialize common resource properties.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/medicinalproductindication.py": "from . import domainresource\n\nclass MedicinalProductIndication(domainresource.DomainResource):\n    \"\"\" MedicinalProductIndication.\n    \n    Indication for the Medicinal Product.\n    \"\"\"\n    resource_type = 'MedicinalProductIndication'\nfrom . import backboneelement\n\nclass MedicinalProductIndicationOtherTherapy(backboneelement.BackboneElement):\n    \"\"\" Information about the use of the medicinal product in relation to other\n    therapies described as part of the indication.\n    \"\"\"\n    resource_type = 'MedicinalProductIndicationOtherTherapy'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.medicationCodeableConcept = None\n        ' Reference to a specific medication (active substance, medicinal\\n        product or class of products) as part of an indication or\\n        contraindication.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.medicationReference = None\n        ' Reference to a specific medication (active substance, medicinal\\n        product or class of products) as part of an indication or\\n        contraindication.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.therapyRelationshipType = None\n        ' The type of relationship between the medicinal product indication\\n        or contraindication and another therapy.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductIndicationOtherTherapy, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductIndicationOtherTherapy, self).elementProperties()\n        js.extend([('medicationCodeableConcept', 'medicationCodeableConcept', codeableconcept.CodeableConcept, False, 'medication', True), ('medicationReference', 'medicationReference', fhirreference.FHIRReference, False, 'medication', True), ('therapyRelationshipType', 'therapyRelationshipType', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import population\nfrom . import quantity",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative"
  }
}