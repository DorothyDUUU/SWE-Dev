{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-requestgroup_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/requestgroup_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import requestgroup\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass RequestGroupTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        return requestgroup.RequestGroup(js)\n    \n    def testRequestGroup1(self):\n        inst = self.instantiate_from(\"requestgroup-kdn5-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a RequestGroup instance\")\n        self.implRequestGroup1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        inst2 = requestgroup.RequestGroup(js)\n        self.implRequestGroup1(inst2)\n    \n    def implRequestGroup1(self, inst):\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger, 8)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent, \"Gemcitabine 1250 mg/m\u00b2 IV over 30 minutes on days 1 and 8\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id, \"action-2\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship, \"concurrent-with-start\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent, \"CARBOplatin AUC 5 IV over 30 minutes on Day 1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].id, \"cycle-definition-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent, \"21-day cycle for 6 cycles\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count, 6)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.duration, 21)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit, \"d\")\n        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior, \"sentence-group\")\n        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.action[0].action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2017-03-06T17:31:00Z\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2017-03-06T17:31:00Z\")\n        self.assertEqual(inst.contained[0].id, \"1111\")\n        self.assertEqual(inst.contained[1].id, \"2222\")\n        self.assertEqual(inst.id, \"kdn5-example\")\n        self.assertEqual(inst.identifier[0].value, \"requestgroup-kdn5\")\n        self.assertEqual(inst.instantiatesCanonical[0], \"PlanDefinition/KDN5\")\n        self.assertEqual(inst.intent, \"plan\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Administer gemcitabine and carboplatin.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testRequestGroup2(self):\n        inst = self.instantiate_from(\"requestgroup-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a RequestGroup instance\")\n        self.implRequestGroup2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        inst2 = requestgroup.RequestGroup(js)\n        self.implRequestGroup2(inst2)\n    \n    def implRequestGroup2(self, inst):\n        self.assertEqual(inst.action[0].action[0].description, \"Administer medication 1\")\n        self.assertEqual(inst.action[0].action[0].id, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[0].type.coding[0].code, \"create\")\n        self.assertEqual(inst.action[0].action[1].description, \"Administer medication 2\")\n        self.assertEqual(inst.action[0].action[1].id, \"medication-action-2\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit, \"h\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.value, 1)\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship, \"after-end\")\n        self.assertEqual(inst.action[0].action[1].type.coding[0].code, \"create\")\n        self.assertEqual(inst.action[0].cardinalityBehavior, \"single\")\n        self.assertEqual(inst.action[0].description, \"Administer medications at the appropriate time\")\n        self.assertEqual(inst.action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].precheckBehavior, \"yes\")\n        self.assertEqual(inst.action[0].prefix, \"1\")\n        self.assertEqual(inst.action[0].requiredBehavior, \"must\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.action[0].textEquivalent, \"Administer medication 1, followed an hour later by medication 2\")\n        self.assertEqual(inst.action[0].timingDateTime.datetime, FHIRDateTime(\"2017-03-06T19:00:00Z\").datetime)\n        self.assertEqual(inst.action[0].timingDateTime.as_json(), \"2017-03-06T19:00:00Z\")\n        self.assertEqual(inst.action[0].title, \"Administer Medications\")\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2017-03-06T17:31:00Z\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2017-03-06T17:31:00Z\")\n        self.assertEqual(inst.contained[0].id, \"medicationrequest-1\")\n        self.assertEqual(inst.contained[1].id, \"medicationrequest-2\")\n        self.assertEqual(inst.groupIdentifier.system, \"http://example.org/treatment-group\")\n        self.assertEqual(inst.groupIdentifier.value, \"00001\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].value, \"requestgroup-1\")\n        self.assertEqual(inst.intent, \"plan\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"Additional notes about the request group\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.reasonCode[0].text, \"Treatment\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Example RequestGroup illustrating related actions to administer medications in sequence with time delay.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/requestgroup.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/RequestGroup).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass RequestGroup(domainresource.DomainResource):\n    \"\"\" A group of related requests.\n    \n    A group of related requests that can be used to capture intended activities\n    that have inter-dependencies such as \"give this medication after that one\".\n    \"\"\"\n    \n    resource_type = \"RequestGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Proposed actions, if any.\n        List of `RequestGroupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Device or practitioner that authored the request group.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.authoredOn = None\n        \"\"\" When the request group was authored.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Fulfills plan, proposal, or order.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" What's being requested/ordered.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.groupIdentifier = None\n        \"\"\" Composite request this is part of.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Instantiates FHIR protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Instantiates external protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.intent = None\n        \"\"\" proposal | plan | directive | order | original-order | reflex-order\n        | filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Additional notes about the response.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why the request group is needed.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why the request group is needed.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.replaces = None\n        \"\"\" Request(s) replaced by this request.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | on-hold | revoked | completed | entered-in-error |\n        unknown.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Who the request group is about.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(RequestGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroup, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", RequestGroupAction, True, None, False),\n            (\"author\", \"author\", fhirreference.FHIRReference, False, None, False),\n            (\"authoredOn\", \"authoredOn\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"groupIdentifier\", \"groupIdentifier\", identifier.Identifier, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, True, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, True, None, False),\n            (\"intent\", \"intent\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"replaces\", \"replaces\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass RequestGroupAction(backboneelement.BackboneElement):\n    \"\"\" Proposed actions, if any.\n    \n    The actions, if any, produced by the evaluation of the artifact.\n    \"\"\"\n    \n    resource_type = \"RequestGroupAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Sub action.\n        List of `RequestGroupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cardinalityBehavior = None\n        \"\"\" single | multiple.\n        Type `str`. \"\"\"\n        \n        self.code = None\n        \"\"\" Code representing the meaning of the action or sub-actions.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.condition = None\n        \"\"\" Whether or not the action is applicable.\n        List of `RequestGroupActionCondition` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Short description of the action.\n        Type `str`. \"\"\"\n        \n        self.documentation = None\n        \"\"\" Supporting documentation for the intended performer of the action.\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.groupingBehavior = None\n        \"\"\" visual-group | logical-group | sentence-group.\n        Type `str`. \"\"\"\n        \n        self.participant = None\n        \"\"\" Who should perform the action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.precheckBehavior = None\n        \"\"\" yes | no.\n        Type `str`. \"\"\"\n        \n        self.prefix = None\n        \"\"\" User-visible prefix for the action (e.g. 1. or A.).\n        Type `str`. \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.relatedAction = None\n        \"\"\" Relationship to another action.\n        List of `RequestGroupActionRelatedAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requiredBehavior = None\n        \"\"\" must | could | must-unless-documented.\n        Type `str`. \"\"\"\n        \n        self.resource = None\n        \"\"\" The target of the action.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.selectionBehavior = None\n        \"\"\" any | all | all-or-none | exactly-one | at-most-one | one-or-more.\n        Type `str`. \"\"\"\n        \n        self.textEquivalent = None\n        \"\"\" Static text equivalent of the action, used if the dynamic aspects\n        cannot be interpreted by the receiving system.\n        Type `str`. \"\"\"\n        \n        self.timingAge = None\n        \"\"\" When the action should take place.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingDateTime = None\n        \"\"\" When the action should take place.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timingDuration = None\n        \"\"\" When the action should take place.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" When the action should take place.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingRange = None\n        \"\"\" When the action should take place.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingTiming = None\n        \"\"\" When the action should take place.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" User-visible title.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" create | update | remove | fire-event.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(RequestGroupAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupAction, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", RequestGroupAction, True, None, False),\n            (\"cardinalityBehavior\", \"cardinalityBehavior\", str, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"condition\", \"condition\", RequestGroupActionCondition, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"documentation\", \"documentation\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"groupingBehavior\", \"groupingBehavior\", str, False, None, False),\n            (\"participant\", \"participant\", fhirreference.FHIRReference, True, None, False),\n            (\"precheckBehavior\", \"precheckBehavior\", str, False, None, False),\n            (\"prefix\", \"prefix\", str, False, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"relatedAction\", \"relatedAction\", RequestGroupActionRelatedAction, True, None, False),\n            (\"requiredBehavior\", \"requiredBehavior\", str, False, None, False),\n            (\"resource\", \"resource\", fhirreference.FHIRReference, False, None, False),\n            (\"selectionBehavior\", \"selectionBehavior\", str, False, None, False),\n            (\"textEquivalent\", \"textEquivalent\", str, False, None, False),\n            (\"timingAge\", \"timingAge\", age.Age, False, \"timing\", False),\n            (\"timingDateTime\", \"timingDateTime\", fhirdatetime.FHIRDateTime, False, \"timing\", False),\n            (\"timingDuration\", \"timingDuration\", duration.Duration, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"timingRange\", \"timingRange\", range.Range, False, \"timing\", False),\n            (\"timingTiming\", \"timingTiming\", timing.Timing, False, \"timing\", False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass RequestGroupActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria, or start/stop\n    conditions for the action.\n    \"\"\"\n    \n    resource_type = \"RequestGroupActionCondition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.expression = None\n        \"\"\" Boolean-valued expression.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.kind = None\n        \"\"\" applicability | start | stop.\n        Type `str`. \"\"\"\n        \n        super(RequestGroupActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupActionCondition, self).elementProperties()\n        js.extend([\n            (\"expression\", \"expression\", expression.Expression, False, None, False),\n            (\"kind\", \"kind\", str, False, None, True),\n        ])\n        return js\n\n\nclass RequestGroupActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    \n    resource_type = \"RequestGroupActionRelatedAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actionId = None\n        \"\"\" What action this is related to.\n        Type `str`. \"\"\"\n        \n        self.offsetDuration = None\n        \"\"\" Time offset for the relationship.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.offsetRange = None\n        \"\"\" Time offset for the relationship.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" before-start | before | before-end | concurrent-with-start |\n        concurrent | concurrent-with-end | after-start | after | after-end.\n        Type `str`. \"\"\"\n        \n        super(RequestGroupActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupActionRelatedAction, self).elementProperties()\n        js.extend([\n            (\"actionId\", \"actionId\", str, False, None, True),\n            (\"offsetDuration\", \"offsetDuration\", duration.Duration, False, \"offset\", False),\n            (\"offsetRange\", \"offsetRange\", range.Range, False, \"offset\", False),\n            (\"relationship\", \"relationship\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import expression\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/requestgroup.py": {
      "RequestGroup.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a RequestGroup instance, representing a group of related requests in a healthcare context.\n\nThis constructor initializes the essential attributes of the RequestGroup, including details about proposed actions, authorship, timing, related identifiers, and status. It accepts an optional JSON dictionary for initializing attributes and a strict mode to enforce validation of the provided data.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the instance's attributes. Each key corresponds to a property outlined in the RequestGroup model, such as `action`, `author`, `authoredOn`, etc.\n- strict (bool, default=True): If set to True, raises a FHIRValidationError upon encountering invalid property values; otherwise, it allows non-compliant values without throwing an error.\n\nAttributes:\n- action: List of proposed actions associated with the request group (RequestGroupAction items).\n- author: The device or practitioner who authored the request group (FHIRReference).\n- authoredOn: The date and time when the request group was authored (FHIRDateTime).\n- basedOn: References the plans, proposals, or orders fulfilled by this group (list of FHIRReference).\n- code: Indicates what is being requested or ordered (CodeableConcept).\n- encounter: Context in which the request group was created (FHIRReference).\n- groupIdentifier: Identifier that indicates the composite request this is part of (Identifier).\n- identifier: List of business identifiers for the request group (Identifier).\n- instantiatesCanonical: References a FHIR protocol or definition that this group instantiates (list of strings).\n- instantiatesUri: References an external protocol or definition that this group instantiates (list of strings).\n- intent: The intent of the request (str), which can be one of several values (e.g., proposal, plan, order).\n- note: Additional notes about the request group (list of Annotation).\n- priority: Indicates the urgency of the request (str).\n- reasonCode: List of reasons why the request group is needed (list of CodeableConcept).\n- reasonReference: List of references for the reasons the request group is needed (list of FHIRReference).\n- replaces: List of previous requests replaced by this request (list of FHIRReference).\n- status: The status of the request group (str), which can be in various states (e.g., draft, active, completed).\n- subject: The subject of the request group (FHIRReference).\n\nDependencies:\nThis class relies on other data types and classes defined within the FHIR standard, such as CodeableConcept, FHIRReference, and FHIRDateTime, as well as the `domainresource.DomainResource` class for its foundational structure.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.action = None\n        ' Proposed actions, if any.\\n        List of `RequestGroupAction` items (represented as `dict` in JSON). '\n        self.author = None\n        ' Device or practitioner that authored the request group.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.authoredOn = None\n        ' When the request group was authored.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.basedOn = None\n        ' Fulfills plan, proposal, or order.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.code = None\n        \" What's being requested/ordered.\\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\n        self.encounter = None\n        ' Created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.groupIdentifier = None\n        ' Composite request this is part of.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Instantiates FHIR protocol or definition.\\n        List of `str` items. '\n        self.instantiatesUri = None\n        ' Instantiates external protocol or definition.\\n        List of `str` items. '\n        self.intent = None\n        ' proposal | plan | directive | order | original-order | reflex-order\\n        | filler-order | instance-order | option.\\n        Type `str`. '\n        self.note = None\n        ' Additional notes about the response.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reasonCode = None\n        ' Why the request group is needed.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why the request group is needed.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.replaces = None\n        ' Request(s) replaced by this request.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | on-hold | revoked | completed | entered-in-error |\\n        unknown.\\n        Type `str`. '\n        self.subject = None\n        ' Who the request group is about.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(RequestGroup, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a RequestGroup instance, representing a group of related requests in a healthcare context.\n\nThis constructor initializes the essential attributes of the RequestGroup, including details about proposed actions, authorship, timing, related identifiers, and status. It accepts an optional JSON dictionary for initializing attributes and a strict mode to enforce validation of the provided data.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the instance's attributes. Each key corresponds to a property outlined in the RequestGroup model, such as `action`, `author`, `authoredOn`, etc.\n- strict (bool, default=True): If set to True, raises a FHIRValidationError upon encountering invalid property values; otherwise, it allows non-compliant values without throwing an error.\n\nAttributes:\n- action: List of proposed actions associated with the request group (RequestGroupAction items).\n- author: The device or practitioner who authored the request group (FHIRReference).\n- authoredOn: The date and time when the request group was authored (FHIRDateTime).\n- basedOn: References the plans, proposals, or orders fulfilled by this group (list of FHIRReference).\n- code: Indicates what is being requested or ordered (CodeableConcept).\n- encounter: Context in which the request group was created (FHIRReference).\n- groupIdentifier: Identifier that indicates the composite request this is part of (Identifier).\n- identifier: List of business identifiers for the request group (Identifier).\n- instantiatesCanonical: References a FHIR protocol or definition that this group instantiates (list of strings).\n- instantiatesUri: References an external protocol or definition that this group instantiates (list of strings).\n- intent: The intent of the request (str), which can be one of several values (e.g., proposal, plan, order).\n- note: Additional notes about the request group (list of Annotation).\n- priority: Indicates the urgency of the request (str).\n- reasonCode: List of reasons why the request group is needed (list of CodeableConcept).\n- reasonReference: List of references for the reasons the request group is needed (list of FHIRReference).\n- replaces: List of previous requests replaced by this request (list of FHIRReference).\n- status: The status of the request group (str), which can be in various states (e.g., draft, active, completed).\n- subject: The subject of the request group (FHIRReference).\n\nDependencies:\nThis class relies on other data types and classes defined within the FHIR standard, such as CodeableConcept, FHIRReference, and FHIRDateTime, as well as the `domainresource.DomainResource` class for its foundational structure.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class RequestGroup(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance.\n\nThis constructor accepts an optional FHIR-compliant date string (`jsonval`) and converts it into a Python date object. The input string is validated against a regular expression defined by the class constant `_REGEX` to ensure it matches the expected FHIR date format. If `jsonval` is not provided or is `None`, the instance variable `date` remains `None`. If `jsonval` is invalid, a TypeError or ValueError is raised.\n\nParameters:\n- jsonval (Union[str, None]): A FHIR date string to initialize the instance. This must be a valid string matching the FHIR date format or `None`.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the converted date representation based on the input string.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- _REGEX: A regex pattern compiled using `re.compile()` that validates the format of FHIR date strings.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance.\n\nThis constructor accepts an optional FHIR-compliant date string (`jsonval`) and converts it into a Python date object. The input string is validated against a regular expression defined by the class constant `_REGEX` to ensure it matches the expected FHIR date format. If `jsonval` is not provided or is `None`, the instance variable `date` remains `None`. If `jsonval` is invalid, a TypeError or ValueError is raised.\n\nParameters:\n- jsonval (Union[str, None]): A FHIR date string to initialize the instance. This must be a valid string matching the FHIR date format or `None`.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the converted date representation based on the input string.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- _REGEX: A regex pattern compiled using `re.compile()` that validates the format of FHIR date strings.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets an attribute on the FHIRDate instance, specifically handling the synchronization of the `date` property and the internal `_FIELD` attribute. \n\nParameters:\n- `prop` (str): The name of the attribute to set.\n- `value` (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either `date` or the value of `_FIELD` (which is a constant set to \"date\"), the method resets `origval` to `None` and ensures that both `date` and the internal `_FIELD` attribute are kept in sync with the new value. For all other attributes, it simply sets them without any additional logic.\n\nThis method leverages the `object.__setattr__` method to bypass the usual attribute access behavior, allowing for the necessary internal state management while maintaining the flexibility of a dynamic attribute assignment.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets an attribute on the FHIRDate instance, specifically handling the synchronization of the `date` property and the internal `_FIELD` attribute. \n\nParameters:\n- `prop` (str): The name of the attribute to set.\n- `value` (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either `date` or the value of `_FIELD` (which is a constant set to \"date\"), the method resets `origval` to `None` and ensures that both `date` and the internal `_FIELD` attribute are kept in sync with the new value. For all other attributes, it simply sets them without any additional logic.\n\nThis method leverages the `object.__setattr__` method to bypass the usual attribute access behavior, allowing for the necessary internal state management while maintaining the flexibility of a dynamic attribute assignment.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string that was used to initialize the FHIRDate instance, or a standardized ISO 8601 string representation of the date if no original value is present. The method checks the `origval` attribute, which stores the initial string provided during instantiation. If `origval` is not None, it returns that value; otherwise, it returns the result of the `isostring` property, which normalizes the date into an ISO 8601 format. Important attributes used include `origval`, initialized in the constructor, and `isostring`, which converts the date to a standardized format if the original string is absent.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string that was used to initialize the FHIRDate instance, or a standardized ISO 8601 string representation of the date if no original value is present. The method checks the `origval` attribute, which stores the initial string provided during instantiation. If `origval` is not None, it returns that value; otherwise, it returns the result of the `isostring` property, which normalizes the date into an ISO 8601 format. Important attributes used include `origval`, initialized in the constructor, and `isostring`, which converts the date to a standardized format if the original string is absent.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIRAbstractBase instance to a JSON dictionary by inspecting the registered properties defined in `elementProperties()`. The method ensures that required properties are populated and that their types are correct before returning the resulting dictionary.\n\nRaises:\n    FHIRValidationError: If any properties have an incorrect type or if any required properties are missing values.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representation of the instance.\n\nIn the process, it utilizes:\n- `elementProperties()`: Provides a list of property metadata (name, JSON name, type, if it is a list, etc.) necessary for serialization.\n- `_matches_type()`: Checks if the properties conform to expected types.\n- The `found` set: Tracks the properties that have been successfully processed to identify any missing required properties.\n- The `nonoptionals` set: Holds names of properties that are mandatory to ensure that they are included in the output.\n\nThe method builds the JSON dictionary in the form of {json_name: value} where `json_name` is the key used in the serialization and `value` is the property value derived from the instance attributes.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIRAbstractBase instance to a JSON dictionary by inspecting the registered properties defined in `elementProperties()`. The method ensures that required properties are populated and that their types are correct before returning the resulting dictionary.\n\nRaises:\n    FHIRValidationError: If any properties have an incorrect type or if any required properties are missing values.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representation of the instance.\n\nIn the process, it utilizes:\n- `elementProperties()`: Provides a list of property metadata (name, JSON name, type, if it is a list, etc.) necessary for serialization.\n- `_matches_type()`: Checks if the properties conform to expected types.\n- The `found` set: Tracks the properties that have been successfully processed to identify any missing required properties.\n- The `nonoptionals` set: Holds names of properties that are mandatory to ensure that they are included in the output.\n\nThe method builds the JSON dictionary in the form of {json_name: value} where `json_name` is the key used in the serialization and `value` is the property value derived from the instance attributes.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime object.\n\nThis constructor takes an optional JSON string representation of a datetime, which is passed to the superclass FHIRDate for processing. It initializes the `datetime` attribute to None, which will later hold a Python `datetime.datetime` object representing the FHIR datetime. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a datetime. Defaults to None.\n\nThis method depends on the `FHIRDate` class, specifically its `__init__` method, to handle the JSON initialization. The `datetime` attribute is defined within this method and will be populated in later processing.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime object.\n\nThis constructor takes an optional JSON string representation of a datetime, which is passed to the superclass FHIRDate for processing. It initializes the `datetime` attribute to None, which will later hold a Python `datetime.datetime` object representing the FHIR datetime. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a datetime. Defaults to None.\n\nThis method depends on the `FHIRDate` class, specifically its `__init__` method, to handle the JSON initialization. The `datetime` attribute is defined within this method and will be populated in later processing.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON representation.\n\nThis method first calls the superclass's `as_json` method to obtain the base JSON structure and then adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined as 'FHIRAbstractResource', is used to populate this key and is critical for ensuring that the JSON representation complies with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the resource type.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the base JSON conversion method.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON representation.\n\nThis method first calls the superclass's `as_json` method to obtain the base JSON structure and then adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined as 'FHIRAbstractResource', is used to populate this key and is critical for ensuring that the JSON representation complies with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the resource type.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the base JSON conversion method.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should match the expected structure for DomainResource.\n- strict (bool, optional): If True (default), invalid attributes will raise a TypeError during validation. Set to False to allow for flexibility in attribute assignments.\n\nAttributes initialized:\n- contained (list): A list of contained Resource items, represented as dictionaries in JSON.\n- extension (list): A list of additional content defined by implementations, represented as Extension items in JSON.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as Extension items in JSON.\n- text (narrative.Narrative): A text summary of the resource for human interpretation, represented as a Narrative object in JSON.\n\nThis constructor calls the superclass's __init__ method to handle resource initialization, passing along the jsondict and strict parameters.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should match the expected structure for DomainResource.\n- strict (bool, optional): If True (default), invalid attributes will raise a TypeError during validation. Set to False to allow for flexibility in attribute assignments.\n\nAttributes initialized:\n- contained (list): A list of contained Resource items, represented as dictionaries in JSON.\n- extension (list): A list of additional content defined by implementations, represented as Extension items in JSON.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as Extension items in JSON.\n- text (narrative.Narrative): A text summary of the resource for human interpretation, represented as a Narrative object in JSON.\n\nThis constructor calls the superclass's __init__ method to handle resource initialization, passing along the jsondict and strict parameters.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/requestgroup.py:RequestGroup:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/requestgroup.py": {
        "RequestGroup.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(RequestGroup, self).elementProperties()\n        js.extend([('action', 'action', RequestGroupAction, True, None, False), ('author', 'author', fhirreference.FHIRReference, False, None, False), ('authoredOn', 'authoredOn', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('groupIdentifier', 'groupIdentifier', identifier.Identifier, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('intent', 'intent', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('replaces', 'replaces', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class RequestGroup(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/requestgroup_test.py:RequestGroupTests:testRequestGroup1": {
      "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
        "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/requestgroup_test.py:RequestGroupTests:implRequestGroup1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/requestgroup_test.py:RequestGroupTests:testRequestGroup2": {
      "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
        "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/requestgroup_test.py:RequestGroupTests:implRequestGroup2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-requestgroup_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 requestgroup.py\n            \u2514\u2500\u2500 RequestGroup.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module focuses on validating and testing FHIR (Fast Healthcare Interoperability Resources) `RequestGroup` resources, a core component of the FHIR standard used to manage structured workflows and care plans in healthcare systems. It provides functionality to instantiate, inspect, and verify attributes of `RequestGroup` instances, ensuring compliance with the FHIR 4.0.1 specification. By supporting detailed validation of actions, extensions, timing, and other attributes in complex care plans, the module helps developers and users ensure that `RequestGroup` resources are properly constructed and adhere to the expected interoperability standards, thereby aiding in the development of robust healthcare applications.\n\n## FILE 1: fhirclient/models/requestgroup.py\n\n- CLASS METHOD: RequestGroup.__init__\n  - CLASS SIGNATURE: class RequestGroup(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a RequestGroup instance, representing a group of related requests in a healthcare context.\n\nThis constructor initializes the essential attributes of the RequestGroup, including details about proposed actions, authorship, timing, related identifiers, and status. It accepts an optional JSON dictionary for initializing attributes and a strict mode to enforce validation of the provided data.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the instance's attributes. Each key corresponds to a property outlined in the RequestGroup model, such as `action`, `author`, `authoredOn`, etc.\n- strict (bool, default=True): If set to True, raises a FHIRValidationError upon encountering invalid property values; otherwise, it allows non-compliant values without throwing an error.\n\nAttributes:\n- action: List of proposed actions associated with the request group (RequestGroupAction items).\n- author: The device or practitioner who authored the request group (FHIRReference).\n- authoredOn: The date and time when the request group was authored (FHIRDateTime).\n- basedOn: References the plans, proposals, or orders fulfilled by this group (list of FHIRReference).\n- code: Indicates what is being requested or ordered (CodeableConcept).\n- encounter: Context in which the request group was created (FHIRReference).\n- groupIdentifier: Identifier that indicates the composite request this is part of (Identifier).\n- identifier: List of business identifiers for the request group (Identifier).\n- instantiatesCanonical: References a FHIR protocol or definition that this group instantiates (list of strings).\n- instantiatesUri: References an external protocol or definition that this group instantiates (list of strings).\n- intent: The intent of the request (str), which can be one of several values (e.g., proposal, plan, order).\n- note: Additional notes about the request group (list of Annotation).\n- priority: Indicates the urgency of the request (str).\n- reasonCode: List of reasons why the request group is needed (list of CodeableConcept).\n- reasonReference: List of references for the reasons the request group is needed (list of FHIRReference).\n- replaces: List of previous requests replaced by this request (list of FHIRReference).\n- status: The status of the request group (str), which can be in various states (e.g., draft, active, completed).\n- subject: The subject of the request group (FHIRReference).\n\nDependencies:\nThis class relies on other data types and classes defined within the FHIR standard, such as CodeableConcept, FHIRReference, and FHIRDateTime, as well as the `domainresource.DomainResource` class for its foundational structure.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance.\n\nThis constructor accepts an optional FHIR-compliant date string (`jsonval`) and converts it into a Python date object. The input string is validated against a regular expression defined by the class constant `_REGEX` to ensure it matches the expected FHIR date format. If `jsonval` is not provided or is `None`, the instance variable `date` remains `None`. If `jsonval` is invalid, a TypeError or ValueError is raised.\n\nParameters:\n- jsonval (Union[str, None]): A FHIR date string to initialize the instance. This must be a valid string matching the FHIR date format or `None`.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the converted date representation based on the input string.\n- origval (Union[str, None]): Stores the original input string for reference.\n\nConstants:\n- _REGEX: A regex pattern compiled using `re.compile()` that validates the format of FHIR date strings.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string that was used to initialize the FHIRDate instance, or a standardized ISO 8601 string representation of the date if no original value is present. The method checks the `origval` attribute, which stores the initial string provided during instantiation. If `origval` is not None, it returns that value; otherwise, it returns the result of the `isostring` property, which normalizes the date into an ISO 8601 format. Important attributes used include `origval`, initialized in the constructor, and `isostring`, which converts the date to a standardized format if the original string is absent.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets an attribute on the FHIRDate instance, specifically handling the synchronization of the `date` property and the internal `_FIELD` attribute. \n\nParameters:\n- `prop` (str): The name of the attribute to set.\n- `value` (Any): The value to assign to the specified attribute.\n\nIf the attribute being set is either `date` or the value of `_FIELD` (which is a constant set to \"date\"), the method resets `origval` to `None` and ensures that both `date` and the internal `_FIELD` attribute are kept in sync with the new value. For all other attributes, it simply sets them without any additional logic.\n\nThis method leverages the `object.__setattr__` method to bypass the usual attribute access behavior, allowing for the necessary internal state management while maintaining the flexibility of a dynamic attribute assignment.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIRAbstractBase instance to a JSON dictionary by inspecting the registered properties defined in `elementProperties()`. The method ensures that required properties are populated and that their types are correct before returning the resulting dictionary.\n\nRaises:\n    FHIRValidationError: If any properties have an incorrect type or if any required properties are missing values.\n\nReturns:\n    dict: A validated JSON-compatible dictionary representation of the instance.\n\nIn the process, it utilizes:\n- `elementProperties()`: Provides a list of property metadata (name, JSON name, type, if it is a list, etc.) necessary for serialization.\n- `_matches_type()`: Checks if the properties conform to expected types.\n- The `found` set: Tracks the properties that have been successfully processed to identify any missing required properties.\n- The `nonoptionals` set: Holds names of properties that are mandatory to ensure that they are included in the output.\n\nThe method builds the JSON dictionary in the form of {json_name: value} where `json_name` is the key used in the serialization and `value` is the property value derived from the instance attributes.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime object.\n\nThis constructor takes an optional JSON string representation of a datetime, which is passed to the superclass FHIRDate for processing. It initializes the `datetime` attribute to None, which will later hold a Python `datetime.datetime` object representing the FHIR datetime. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a datetime. Defaults to None.\n\nThis method depends on the `FHIRDate` class, specifically its `__init__` method, to handle the JSON initialization. The `datetime` attribute is defined within this method and will be populated in later processing.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON representation.\n\nThis method first calls the superclass's `as_json` method to obtain the base JSON structure and then adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` constant, defined as 'FHIRAbstractResource', is used to populate this key and is critical for ensuring that the JSON representation complies with FHIR standards.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the resource type.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase` which provides the base JSON conversion method.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a DomainResource instance, which represents a FHIR resource that includes narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should match the expected structure for DomainResource.\n- strict (bool, optional): If True (default), invalid attributes will raise a TypeError during validation. Set to False to allow for flexibility in attribute assignments.\n\nAttributes initialized:\n- contained (list): A list of contained Resource items, represented as dictionaries in JSON.\n- extension (list): A list of additional content defined by implementations, represented as Extension items in JSON.\n- modifierExtension (list): A list of extensions that cannot be ignored, also represented as Extension items in JSON.\n- text (narrative.Narrative): A text summary of the resource for human interpretation, represented as a Narrative object in JSON.\n\nThis constructor calls the superclass's __init__ method to handle resource initialization, passing along the jsondict and strict parameters.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/requestgroup.py": "from . import domainresource\n\nclass RequestGroup(domainresource.DomainResource):\n    \"\"\" A group of related requests.\n    \n    A group of related requests that can be used to capture intended activities\n    that have inter-dependencies such as \"give this medication after that one\".\n    \"\"\"\n    resource_type = 'RequestGroup'\n\n    def elementProperties(self):\n        js = super(RequestGroup, self).elementProperties()\n        js.extend([('action', 'action', RequestGroupAction, True, None, False), ('author', 'author', fhirreference.FHIRReference, False, None, False), ('authoredOn', 'authoredOn', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('groupIdentifier', 'groupIdentifier', identifier.Identifier, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('intent', 'intent', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('replaces', 'replaces', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass RequestGroupAction(backboneelement.BackboneElement):\n    \"\"\" Proposed actions, if any.\n    \n    The actions, if any, produced by the evaluation of the artifact.\n    \"\"\"\n    resource_type = 'RequestGroupAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' Sub action.\\n        List of `RequestGroupAction` items (represented as `dict` in JSON). '\n        self.cardinalityBehavior = None\n        ' single | multiple.\\n        Type `str`. '\n        self.code = None\n        ' Code representing the meaning of the action or sub-actions.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.condition = None\n        ' Whether or not the action is applicable.\\n        List of `RequestGroupActionCondition` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Short description of the action.\\n        Type `str`. '\n        self.documentation = None\n        ' Supporting documentation for the intended performer of the action.\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.groupingBehavior = None\n        ' visual-group | logical-group | sentence-group.\\n        Type `str`. '\n        self.participant = None\n        ' Who should perform the action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.precheckBehavior = None\n        ' yes | no.\\n        Type `str`. '\n        self.prefix = None\n        ' User-visible prefix for the action (e.g. 1. or A.).\\n        Type `str`. '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.relatedAction = None\n        ' Relationship to another action.\\n        List of `RequestGroupActionRelatedAction` items (represented as `dict` in JSON). '\n        self.requiredBehavior = None\n        ' must | could | must-unless-documented.\\n        Type `str`. '\n        self.resource = None\n        ' The target of the action.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.selectionBehavior = None\n        ' any | all | all-or-none | exactly-one | at-most-one | one-or-more.\\n        Type `str`. '\n        self.textEquivalent = None\n        ' Static text equivalent of the action, used if the dynamic aspects\\n        cannot be interpreted by the receiving system.\\n        Type `str`. '\n        self.timingAge = None\n        ' When the action should take place.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.timingDateTime = None\n        ' When the action should take place.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timingDuration = None\n        ' When the action should take place.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.timingPeriod = None\n        ' When the action should take place.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.timingRange = None\n        ' When the action should take place.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.timingTiming = None\n        ' When the action should take place.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.title = None\n        ' User-visible title.\\n        Type `str`. '\n        self.type = None\n        ' create | update | remove | fire-event.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(RequestGroupAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupAction, self).elementProperties()\n        js.extend([('action', 'action', RequestGroupAction, True, None, False), ('cardinalityBehavior', 'cardinalityBehavior', str, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('condition', 'condition', RequestGroupActionCondition, True, None, False), ('description', 'description', str, False, None, False), ('documentation', 'documentation', relatedartifact.RelatedArtifact, True, None, False), ('groupingBehavior', 'groupingBehavior', str, False, None, False), ('participant', 'participant', fhirreference.FHIRReference, True, None, False), ('precheckBehavior', 'precheckBehavior', str, False, None, False), ('prefix', 'prefix', str, False, None, False), ('priority', 'priority', str, False, None, False), ('relatedAction', 'relatedAction', RequestGroupActionRelatedAction, True, None, False), ('requiredBehavior', 'requiredBehavior', str, False, None, False), ('resource', 'resource', fhirreference.FHIRReference, False, None, False), ('selectionBehavior', 'selectionBehavior', str, False, None, False), ('textEquivalent', 'textEquivalent', str, False, None, False), ('timingAge', 'timingAge', age.Age, False, 'timing', False), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingDuration', 'timingDuration', duration.Duration, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingRange', 'timingRange', range.Range, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False), ('title', 'title', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass RequestGroupActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria, or start/stop\n    conditions for the action.\n    \"\"\"\n    resource_type = 'RequestGroupActionCondition'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.expression = None\n        ' Boolean-valued expression.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.kind = None\n        ' applicability | start | stop.\\n        Type `str`. '\n        super(RequestGroupActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupActionCondition, self).elementProperties()\n        js.extend([('expression', 'expression', expression.Expression, False, None, False), ('kind', 'kind', str, False, None, True)])\n        return js\n\nclass RequestGroupActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    resource_type = 'RequestGroupActionRelatedAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actionId = None\n        ' What action this is related to.\\n        Type `str`. '\n        self.offsetDuration = None\n        ' Time offset for the relationship.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.offsetRange = None\n        ' Time offset for the relationship.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.relationship = None\n        ' before-start | before | before-end | concurrent-with-start |\\n        concurrent | concurrent-with-end | after-start | after | after-end.\\n        Type `str`. '\n        super(RequestGroupActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupActionRelatedAction, self).elementProperties()\n        js.extend([('actionId', 'actionId', str, False, None, True), ('offsetDuration', 'offsetDuration', duration.Duration, False, 'offset', False), ('offsetRange', 'offsetRange', range.Range, False, 'offset', False), ('relationship', 'relationship', str, False, None, True)])\n        return js\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import expression\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}