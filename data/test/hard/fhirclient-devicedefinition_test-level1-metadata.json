{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-devicedefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/devicedefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import devicedefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass DeviceDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"DeviceDefinition\", js[\"resourceType\"])\n        return devicedefinition.DeviceDefinition(js)\n    \n    def testDeviceDefinition1(self):\n        inst = self.instantiate_from(\"devicedefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a DeviceDefinition instance\")\n        self.implDeviceDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"DeviceDefinition\", js[\"resourceType\"])\n        inst2 = devicedefinition.DeviceDefinition(js)\n        self.implDeviceDefinition1(inst2)\n    \n    def implDeviceDefinition1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].value, \"0\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>identifier</b>: 0</p></div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/devicedefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DeviceDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass DeviceDefinition(domainresource.DomainResource):\n    \"\"\" An instance of a medical-related component of a medical device.\n    \n    The characteristics, operational status and capabilities of a medical-\n    related component of a medical device.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.capability = None\n        \"\"\" Device capabilities.\n        List of `DeviceDefinitionCapability` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Details for human/organization for support.\n        List of `ContactPoint` items (represented as `dict` in JSON). \"\"\"\n        \n        self.deviceName = None\n        \"\"\" A name given to the device to identify it.\n        List of `DeviceDefinitionDeviceName` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Instance identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.languageCode = None\n        \"\"\" Language code for the human-readable text strings produced by the\n        device (all supported).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturerReference = None\n        \"\"\" Name of device manufacturer.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturerString = None\n        \"\"\" Name of device manufacturer.\n        Type `str`. \"\"\"\n        \n        self.material = None\n        \"\"\" A substance used to create the material(s) of which the device is\n        made.\n        List of `DeviceDefinitionMaterial` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modelNumber = None\n        \"\"\" The model number for the device.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Device notes and comments.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.onlineInformation = None\n        \"\"\" Access to on-line information.\n        Type `str`. \"\"\"\n        \n        self.owner = None\n        \"\"\" Organization responsible for device.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.parentDevice = None\n        \"\"\" The parent device it can be part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.physicalCharacteristics = None\n        \"\"\" Dimensions, color etc..\n        Type `ProdCharacteristic` (represented as `dict` in JSON). \"\"\"\n        \n        self.property = None\n        \"\"\" The actual configuration settings of a device as it actually\n        operates, e.g., regulation status, time properties.\n        List of `DeviceDefinitionProperty` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" The quantity of the device present in the packaging (e.g. the\n        number of devices present in a pack, or the number of devices in\n        the same package of the medicinal product).\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.safety = None\n        \"\"\" Safety characteristics of the device.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.shelfLifeStorage = None\n        \"\"\" Shelf Life and storage information.\n        List of `ProductShelfLife` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specialization = None\n        \"\"\" The capabilities supported on a  device, the standards to which the\n        device conforms for a particular purpose, and used for the\n        communication.\n        List of `DeviceDefinitionSpecialization` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" What kind of device or device system this is.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.udiDeviceIdentifier = None\n        \"\"\" Unique Device Identifier (UDI) Barcode string.\n        List of `DeviceDefinitionUdiDeviceIdentifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Network address to contact device.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" Available versions.\n        List of `str` items. \"\"\"\n        \n        super(DeviceDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinition, self).elementProperties()\n        js.extend([\n            (\"capability\", \"capability\", DeviceDefinitionCapability, True, None, False),\n            (\"contact\", \"contact\", contactpoint.ContactPoint, True, None, False),\n            (\"deviceName\", \"deviceName\", DeviceDefinitionDeviceName, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"languageCode\", \"languageCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"manufacturerReference\", \"manufacturerReference\", fhirreference.FHIRReference, False, \"manufacturer\", False),\n            (\"manufacturerString\", \"manufacturerString\", str, False, \"manufacturer\", False),\n            (\"material\", \"material\", DeviceDefinitionMaterial, True, None, False),\n            (\"modelNumber\", \"modelNumber\", str, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"onlineInformation\", \"onlineInformation\", str, False, None, False),\n            (\"owner\", \"owner\", fhirreference.FHIRReference, False, None, False),\n            (\"parentDevice\", \"parentDevice\", fhirreference.FHIRReference, False, None, False),\n            (\"physicalCharacteristics\", \"physicalCharacteristics\", prodcharacteristic.ProdCharacteristic, False, None, False),\n            (\"property\", \"property\", DeviceDefinitionProperty, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"safety\", \"safety\", codeableconcept.CodeableConcept, True, None, False),\n            (\"shelfLifeStorage\", \"shelfLifeStorage\", productshelflife.ProductShelfLife, True, None, False),\n            (\"specialization\", \"specialization\", DeviceDefinitionSpecialization, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"udiDeviceIdentifier\", \"udiDeviceIdentifier\", DeviceDefinitionUdiDeviceIdentifier, True, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"version\", \"version\", str, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass DeviceDefinitionCapability(backboneelement.BackboneElement):\n    \"\"\" Device capabilities.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionCapability\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of capability.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of capability.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceDefinitionCapability, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionCapability, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass DeviceDefinitionDeviceName(backboneelement.BackboneElement):\n    \"\"\" A name given to the device to identify it.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionDeviceName\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.name = None\n        \"\"\" The name of the device.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" udi-label-name | user-friendly-name | patient-reported-name |\n        manufacturer-name | model-name | other.\n        Type `str`. \"\"\"\n        \n        super(DeviceDefinitionDeviceName, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionDeviceName, self).elementProperties()\n        js.extend([\n            (\"name\", \"name\", str, False, None, True),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nclass DeviceDefinitionMaterial(backboneelement.BackboneElement):\n    \"\"\" A substance used to create the material(s) of which the device is made.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionMaterial\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allergenicIndicator = None\n        \"\"\" Whether the substance is a known or suspected allergen.\n        Type `bool`. \"\"\"\n        \n        self.alternate = None\n        \"\"\" Indicates an alternative material of the device.\n        Type `bool`. \"\"\"\n        \n        self.substance = None\n        \"\"\" The substance.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceDefinitionMaterial, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionMaterial, self).elementProperties()\n        js.extend([\n            (\"allergenicIndicator\", \"allergenicIndicator\", bool, False, None, False),\n            (\"alternate\", \"alternate\", bool, False, None, False),\n            (\"substance\", \"substance\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass DeviceDefinitionProperty(backboneelement.BackboneElement):\n    \"\"\" The actual configuration settings of a device as it actually operates,\n    e.g., regulation status, time properties.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionProperty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.type = None\n        \"\"\" Code that specifies the property DeviceDefinitionPropetyCode\n        (Extensible).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueCode = None\n        \"\"\" Property value as a code, e.g., NTP4 (synced to NTP).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Property value as a quantity.\n        List of `Quantity` items (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceDefinitionProperty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionProperty, self).elementProperties()\n        js.extend([\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"valueCode\", \"valueCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, True, None, False),\n        ])\n        return js\n\n\nclass DeviceDefinitionSpecialization(backboneelement.BackboneElement):\n    \"\"\" The capabilities supported on a  device, the standards to which the device\n    conforms for a particular purpose, and used for the communication.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionSpecialization\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.systemType = None\n        \"\"\" The standard that is used to operate and communicate.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" The version of the standard that is used to operate and communicate.\n        Type `str`. \"\"\"\n        \n        super(DeviceDefinitionSpecialization, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionSpecialization, self).elementProperties()\n        js.extend([\n            (\"systemType\", \"systemType\", str, False, None, True),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nclass DeviceDefinitionUdiDeviceIdentifier(backboneelement.BackboneElement):\n    \"\"\" Unique Device Identifier (UDI) Barcode string.\n    \n    Unique device identifier (UDI) assigned to device label or package.  Note\n    that the Device may include multiple udiCarriers as it either may include\n    just the udiCarrier for the jurisdiction it is sold, or for multiple\n    jurisdictions it could have been sold.\n    \"\"\"\n    \n    resource_type = \"DeviceDefinitionUdiDeviceIdentifier\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.deviceIdentifier = None\n        \"\"\" The identifier that is to be associated with every Device that\n        references this DeviceDefintiion for the issuer and jurisdication\n        porvided in the DeviceDefinition.udiDeviceIdentifier.\n        Type `str`. \"\"\"\n        \n        self.issuer = None\n        \"\"\" The organization that assigns the identifier algorithm.\n        Type `str`. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" The jurisdiction to which the deviceIdentifier applies.\n        Type `str`. \"\"\"\n        \n        super(DeviceDefinitionUdiDeviceIdentifier, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceDefinitionUdiDeviceIdentifier, self).elementProperties()\n        js.extend([\n            (\"deviceIdentifier\", \"deviceIdentifier\", str, False, None, True),\n            (\"issuer\", \"issuer\", str, False, None, True),\n            (\"jurisdiction\", \"jurisdiction\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import identifier\nfrom . import prodcharacteristic\nfrom . import productshelflife\nfrom . import quantity\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the parent class's as_json method to include the `resourceType`\nfield in the JSON representation, setting it to the class's `resource_type` attribute,\nwhich is defined as 'FHIRAbstractResource'. This ensures that when the resource is\nserialized to JSON, it conforms to the FHIR standard by explicitly specifying its\nresource type.\n\n:return: A dictionary representation of the FHIRAbstractResource instance,\nincluding the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the parent class's as_json method to include the `resourceType`\nfield in the JSON representation, setting it to the class's `resource_type` attribute,\nwhich is defined as 'FHIRAbstractResource'. This ensures that when the resource is\nserialized to JSON, it conforms to the FHIR standard by explicitly specifying its\nresource type.\n\n:return: A dictionary representation of the FHIRAbstractResource instance,\nincluding the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/devicedefinition.py": {
      "DeviceDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an instance of the DeviceDefinition class, which represents a medical-related component of a medical device, containing its characteristics, operational status, and capabilities.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the DeviceDefinition instance. If provided, it should contain keys corresponding to the defined attributes of the class.\n- strict (bool, optional): If set to True (default), invalid variables in the jsondict will raise a TypeError. If False, such variables will be ignored.\n\nAttributes initialized:\n- capability: Device capabilities as a list of DeviceDefinitionCapability items.\n- contact: Support contact details as a list of ContactPoint items.\n- deviceName: Identifying names of the device as a list of DeviceDefinitionDeviceName items.\n- identifier: Instance identifiers as a list of Identifier items.\n- languageCode: Language codes for human-readable text.\n- manufacturerReference: Reference to the device manufacturer, as a FHIRReference.\n- manufacturerString: Manufacturer name as a string.\n- material: Materials used in the device construction as a list of DeviceDefinitionMaterial items.\n- modelNumber: Model number of the device as a string.\n- note: Comments and notes on the device as a list of Annotation items.\n- onlineInformation: URL for online resources related to the device.\n- owner: Organization responsible for the device, represented as a FHIRReference.\n- parentDevice: Reference to a parent device, if applicable.\n- physicalCharacteristics: Physical attributes described using ProdCharacteristic.\n- property: Configuration settings of the device as a list of DeviceDefinitionProperty items.\n- quantity: Number of devices in a package.\n- safety: Safety characteristics as a list of CodeableConcept items.\n- shelfLifeStorage: Shelf life and storage details as a list of ProductShelfLife items.\n- specialization: Supported capabilities and standards for communication as a list of DeviceDefinitionSpecialization items.\n- type: Type of device represented as a CodeableConcept.\n- udiDeviceIdentifier: List of unique device identifiers (UDI).\n- url: Network address for the device.\n- version: Available versions of the device as a list of strings.\n\nThe initialization in this method also calls the superclass constructor from domainresource.DomainResource, passing the jsondict and strict parameters for further validation and setup.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.capability = None\n        ' Device capabilities.\\n        List of `DeviceDefinitionCapability` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Details for human/organization for support.\\n        List of `ContactPoint` items (represented as `dict` in JSON). '\n        self.deviceName = None\n        ' A name given to the device to identify it.\\n        List of `DeviceDefinitionDeviceName` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Instance identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.languageCode = None\n        ' Language code for the human-readable text strings produced by the\\n        device (all supported).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.manufacturerReference = None\n        ' Name of device manufacturer.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.manufacturerString = None\n        ' Name of device manufacturer.\\n        Type `str`. '\n        self.material = None\n        ' A substance used to create the material(s) of which the device is\\n        made.\\n        List of `DeviceDefinitionMaterial` items (represented as `dict` in JSON). '\n        self.modelNumber = None\n        ' The model number for the device.\\n        Type `str`. '\n        self.note = None\n        ' Device notes and comments.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.onlineInformation = None\n        ' Access to on-line information.\\n        Type `str`. '\n        self.owner = None\n        ' Organization responsible for device.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.parentDevice = None\n        ' The parent device it can be part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.physicalCharacteristics = None\n        ' Dimensions, color etc..\\n        Type `ProdCharacteristic` (represented as `dict` in JSON). '\n        self.property = None\n        ' The actual configuration settings of a device as it actually\\n        operates, e.g., regulation status, time properties.\\n        List of `DeviceDefinitionProperty` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' The quantity of the device present in the packaging (e.g. the\\n        number of devices present in a pack, or the number of devices in\\n        the same package of the medicinal product).\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.safety = None\n        ' Safety characteristics of the device.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.shelfLifeStorage = None\n        ' Shelf Life and storage information.\\n        List of `ProductShelfLife` items (represented as `dict` in JSON). '\n        self.specialization = None\n        ' The capabilities supported on a  device, the standards to which the\\n        device conforms for a particular purpose, and used for the\\n        communication.\\n        List of `DeviceDefinitionSpecialization` items (represented as `dict` in JSON). '\n        self.type = None\n        ' What kind of device or device system this is.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.udiDeviceIdentifier = None\n        ' Unique Device Identifier (UDI) Barcode string.\\n        List of `DeviceDefinitionUdiDeviceIdentifier` items (represented as `dict` in JSON). '\n        self.url = None\n        ' Network address to contact device.\\n        Type `str`. '\n        self.version = None\n        ' Available versions.\\n        List of `str` items. '\n        super(DeviceDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an instance of the DeviceDefinition class, which represents a medical-related component of a medical device, containing its characteristics, operational status, and capabilities.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the DeviceDefinition instance. If provided, it should contain keys corresponding to the defined attributes of the class.\n- strict (bool, optional): If set to True (default), invalid variables in the jsondict will raise a TypeError. If False, such variables will be ignored.\n\nAttributes initialized:\n- capability: Device capabilities as a list of DeviceDefinitionCapability items.\n- contact: Support contact details as a list of ContactPoint items.\n- deviceName: Identifying names of the device as a list of DeviceDefinitionDeviceName items.\n- identifier: Instance identifiers as a list of Identifier items.\n- languageCode: Language codes for human-readable text.\n- manufacturerReference: Reference to the device manufacturer, as a FHIRReference.\n- manufacturerString: Manufacturer name as a string.\n- material: Materials used in the device construction as a list of DeviceDefinitionMaterial items.\n- modelNumber: Model number of the device as a string.\n- note: Comments and notes on the device as a list of Annotation items.\n- onlineInformation: URL for online resources related to the device.\n- owner: Organization responsible for the device, represented as a FHIRReference.\n- parentDevice: Reference to a parent device, if applicable.\n- physicalCharacteristics: Physical attributes described using ProdCharacteristic.\n- property: Configuration settings of the device as a list of DeviceDefinitionProperty items.\n- quantity: Number of devices in a package.\n- safety: Safety characteristics as a list of CodeableConcept items.\n- shelfLifeStorage: Shelf life and storage details as a list of ProductShelfLife items.\n- specialization: Supported capabilities and standards for communication as a list of DeviceDefinitionSpecialization items.\n- type: Type of device represented as a CodeableConcept.\n- udiDeviceIdentifier: List of unique device identifiers (UDI).\n- url: Network address for the device.\n- version: Available versions of the device as a list of strings.\n\nThe initialization in this method also calls the superclass constructor from domainresource.DomainResource, passing the jsondict and strict parameters for further validation and setup.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DeviceDefinition(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/devicedefinition.py:DeviceDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/devicedefinition_test.py:DeviceDefinitionTests:testDeviceDefinition1": {
      "tests/models/devicedefinition_test.py:DeviceDefinitionTests:instantiate_from": {
        "fhirclient/models/devicedefinition.py:DeviceDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/devicedefinition.py:DeviceDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/devicedefinition_test.py:DeviceDefinitionTests:implDeviceDefinition1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/devicedefinition.py:DeviceDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/devicedefinition.py:DeviceDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/devicedefinition.py:DeviceDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/devicedefinition_test.py:DeviceDefinitionTests:instantiate_from": {
      "fhirclient/models/devicedefinition.py:DeviceDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/devicedefinition.py:DeviceDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-devicedefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 devicedefinition.py\n        \u2502   \u2514\u2500\u2500 DeviceDefinition.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and handle FHIR-compliant `DeviceDefinition` resources, ensuring proper instantiation and data integrity as part of the SMART Health IT ecosystem. It primarily enables parsing, testing, and verification of `DeviceDefinition` JSON objects, facilitating conformity with FHIR standards by checking the structure, content, and metadata fields of these resources. By ensuring resources adhere to the required format and include key attributes such as identifiers, metadata tags, and textual content, the module simplifies the process of developing and maintaining interoperable healthcare applications. This addresses the need for reliable and consistent handling of device definitions within health IT systems, reducing the risk of errors and ensuring seamless integration across FHIR-compatible solutions.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the parent class's as_json method to include the `resourceType`\nfield in the JSON representation, setting it to the class's `resource_type` attribute,\nwhich is defined as 'FHIRAbstractResource'. This ensures that when the resource is\nserialized to JSON, it conforms to the FHIR standard by explicitly specifying its\nresource type.\n\n:return: A dictionary representation of the FHIRAbstractResource instance,\nincluding the `resourceType`.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/devicedefinition.py\n\n- CLASS METHOD: DeviceDefinition.__init__\n  - CLASS SIGNATURE: class DeviceDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an instance of the DeviceDefinition class, which represents a medical-related component of a medical device, containing its characteristics, operational status, and capabilities.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the properties of the DeviceDefinition instance. If provided, it should contain keys corresponding to the defined attributes of the class.\n- strict (bool, optional): If set to True (default), invalid variables in the jsondict will raise a TypeError. If False, such variables will be ignored.\n\nAttributes initialized:\n- capability: Device capabilities as a list of DeviceDefinitionCapability items.\n- contact: Support contact details as a list of ContactPoint items.\n- deviceName: Identifying names of the device as a list of DeviceDefinitionDeviceName items.\n- identifier: Instance identifiers as a list of Identifier items.\n- languageCode: Language codes for human-readable text.\n- manufacturerReference: Reference to the device manufacturer, as a FHIRReference.\n- manufacturerString: Manufacturer name as a string.\n- material: Materials used in the device construction as a list of DeviceDefinitionMaterial items.\n- modelNumber: Model number of the device as a string.\n- note: Comments and notes on the device as a list of Annotation items.\n- onlineInformation: URL for online resources related to the device.\n- owner: Organization responsible for the device, represented as a FHIRReference.\n- parentDevice: Reference to a parent device, if applicable.\n- physicalCharacteristics: Physical attributes described using ProdCharacteristic.\n- property: Configuration settings of the device as a list of DeviceDefinitionProperty items.\n- quantity: Number of devices in a package.\n- safety: Safety characteristics as a list of CodeableConcept items.\n- shelfLifeStorage: Shelf life and storage details as a list of ProductShelfLife items.\n- specialization: Supported capabilities and standards for communication as a list of DeviceDefinitionSpecialization items.\n- type: Type of device represented as a CodeableConcept.\n- udiDeviceIdentifier: List of unique device identifiers (UDI).\n- url: Network address for the device.\n- version: Available versions of the device as a list of strings.\n\nThe initialization in this method also calls the superclass constructor from domainresource.DomainResource, passing the jsondict and strict parameters for further validation and setup.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/devicedefinition.py": "from . import domainresource\n\nclass DeviceDefinition(domainresource.DomainResource):\n    \"\"\" An instance of a medical-related component of a medical device.\n    \n    The characteristics, operational status and capabilities of a medical-\n    related component of a medical device.\n    \"\"\"\n    resource_type = 'DeviceDefinition'\n\n    def elementProperties(self):\n        js = super(DeviceDefinition, self).elementProperties()\n        js.extend([('capability', 'capability', DeviceDefinitionCapability, True, None, False), ('contact', 'contact', contactpoint.ContactPoint, True, None, False), ('deviceName', 'deviceName', DeviceDefinitionDeviceName, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('languageCode', 'languageCode', codeableconcept.CodeableConcept, True, None, False), ('manufacturerReference', 'manufacturerReference', fhirreference.FHIRReference, False, 'manufacturer', False), ('manufacturerString', 'manufacturerString', str, False, 'manufacturer', False), ('material', 'material', DeviceDefinitionMaterial, True, None, False), ('modelNumber', 'modelNumber', str, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('onlineInformation', 'onlineInformation', str, False, None, False), ('owner', 'owner', fhirreference.FHIRReference, False, None, False), ('parentDevice', 'parentDevice', fhirreference.FHIRReference, False, None, False), ('physicalCharacteristics', 'physicalCharacteristics', prodcharacteristic.ProdCharacteristic, False, None, False), ('property', 'property', DeviceDefinitionProperty, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('safety', 'safety', codeableconcept.CodeableConcept, True, None, False), ('shelfLifeStorage', 'shelfLifeStorage', productshelflife.ProductShelfLife, True, None, False), ('specialization', 'specialization', DeviceDefinitionSpecialization, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('udiDeviceIdentifier', 'udiDeviceIdentifier', DeviceDefinitionUdiDeviceIdentifier, True, None, False), ('url', 'url', str, False, None, False), ('version', 'version', str, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass DeviceDefinitionCapability(backboneelement.BackboneElement):\n    \"\"\" Device capabilities.\n    \"\"\"\n    resource_type = 'DeviceDefinitionCapability'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of capability.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of capability.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(DeviceDefinitionCapability, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionCapability, self).elementProperties()\n        js.extend([('description', 'description', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass DeviceDefinitionDeviceName(backboneelement.BackboneElement):\n    \"\"\" A name given to the device to identify it.\n    \"\"\"\n    resource_type = 'DeviceDefinitionDeviceName'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.name = None\n        ' The name of the device.\\n        Type `str`. '\n        self.type = None\n        ' udi-label-name | user-friendly-name | patient-reported-name |\\n        manufacturer-name | model-name | other.\\n        Type `str`. '\n        super(DeviceDefinitionDeviceName, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionDeviceName, self).elementProperties()\n        js.extend([('name', 'name', str, False, None, True), ('type', 'type', str, False, None, True)])\n        return js\n\nclass DeviceDefinitionMaterial(backboneelement.BackboneElement):\n    \"\"\" A substance used to create the material(s) of which the device is made.\n    \"\"\"\n    resource_type = 'DeviceDefinitionMaterial'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.allergenicIndicator = None\n        ' Whether the substance is a known or suspected allergen.\\n        Type `bool`. '\n        self.alternate = None\n        ' Indicates an alternative material of the device.\\n        Type `bool`. '\n        self.substance = None\n        ' The substance.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(DeviceDefinitionMaterial, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionMaterial, self).elementProperties()\n        js.extend([('allergenicIndicator', 'allergenicIndicator', bool, False, None, False), ('alternate', 'alternate', bool, False, None, False), ('substance', 'substance', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass DeviceDefinitionProperty(backboneelement.BackboneElement):\n    \"\"\" The actual configuration settings of a device as it actually operates,\n    e.g., regulation status, time properties.\n    \"\"\"\n    resource_type = 'DeviceDefinitionProperty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.type = None\n        ' Code that specifies the property DeviceDefinitionPropetyCode\\n        (Extensible).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueCode = None\n        ' Property value as a code, e.g., NTP4 (synced to NTP).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.valueQuantity = None\n        ' Property value as a quantity.\\n        List of `Quantity` items (represented as `dict` in JSON). '\n        super(DeviceDefinitionProperty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionProperty, self).elementProperties()\n        js.extend([('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('valueCode', 'valueCode', codeableconcept.CodeableConcept, True, None, False), ('valueQuantity', 'valueQuantity', quantity.Quantity, True, None, False)])\n        return js\n\nclass DeviceDefinitionSpecialization(backboneelement.BackboneElement):\n    \"\"\" The capabilities supported on a  device, the standards to which the device\n    conforms for a particular purpose, and used for the communication.\n    \"\"\"\n    resource_type = 'DeviceDefinitionSpecialization'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.systemType = None\n        ' The standard that is used to operate and communicate.\\n        Type `str`. '\n        self.version = None\n        ' The version of the standard that is used to operate and communicate.\\n        Type `str`. '\n        super(DeviceDefinitionSpecialization, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionSpecialization, self).elementProperties()\n        js.extend([('systemType', 'systemType', str, False, None, True), ('version', 'version', str, False, None, False)])\n        return js\n\nclass DeviceDefinitionUdiDeviceIdentifier(backboneelement.BackboneElement):\n    \"\"\" Unique Device Identifier (UDI) Barcode string.\n    \n    Unique device identifier (UDI) assigned to device label or package.  Note\n    that the Device may include multiple udiCarriers as it either may include\n    just the udiCarrier for the jurisdiction it is sold, or for multiple\n    jurisdictions it could have been sold.\n    \"\"\"\n    resource_type = 'DeviceDefinitionUdiDeviceIdentifier'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.deviceIdentifier = None\n        ' The identifier that is to be associated with every Device that\\n        references this DeviceDefintiion for the issuer and jurisdication\\n        porvided in the DeviceDefinition.udiDeviceIdentifier.\\n        Type `str`. '\n        self.issuer = None\n        ' The organization that assigns the identifier algorithm.\\n        Type `str`. '\n        self.jurisdiction = None\n        ' The jurisdiction to which the deviceIdentifier applies.\\n        Type `str`. '\n        super(DeviceDefinitionUdiDeviceIdentifier, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(DeviceDefinitionUdiDeviceIdentifier, self).elementProperties()\n        js.extend([('deviceIdentifier', 'deviceIdentifier', str, False, None, True), ('issuer', 'issuer', str, False, None, True), ('jurisdiction', 'jurisdiction', str, False, None, True)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactpoint\nfrom . import fhirreference\nfrom . import identifier\nfrom . import prodcharacteristic\nfrom . import productshelflife\nfrom . import quantity"
  }
}