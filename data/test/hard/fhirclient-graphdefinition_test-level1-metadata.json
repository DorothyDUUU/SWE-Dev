{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-graphdefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/graphdefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import graphdefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass GraphDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"GraphDefinition\", js[\"resourceType\"])\n        return graphdefinition.GraphDefinition(js)\n    \n    def testGraphDefinition1(self):\n        inst = self.instantiate_from(\"graphdefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a GraphDefinition instance\")\n        self.implGraphDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"GraphDefinition\", js[\"resourceType\"])\n        inst2 = graphdefinition.GraphDefinition(js)\n        self.implGraphDefinition1(inst2)\n    \n    def implGraphDefinition1(self, inst):\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-08-04\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-08-04\")\n        self.assertEqual(inst.description, \"Specify to include list references when generating a document using the $document operation\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.link[0].description, \"Link to List\")\n        self.assertEqual(inst.link[0].path, \"Composition.section.entry\")\n        self.assertEqual(inst.link[0].target[0].compartment[0].code, \"Patient\")\n        self.assertEqual(inst.link[0].target[0].compartment[0].rule, \"identical\")\n        self.assertEqual(inst.link[0].target[0].compartment[0].use, \"requirement\")\n        self.assertEqual(inst.link[0].target[0].link[0].description, \"Include any list entries\")\n        self.assertEqual(inst.link[0].target[0].link[0].path, \"List.entry.item\")\n        self.assertEqual(inst.link[0].target[0].link[0].target[0].compartment[0].code, \"Patient\")\n        self.assertEqual(inst.link[0].target[0].link[0].target[0].compartment[0].rule, \"identical\")\n        self.assertEqual(inst.link[0].target[0].link[0].target[0].compartment[0].use, \"requirement\")\n        self.assertEqual(inst.link[0].target[0].link[0].target[0].type, \"Resource\")\n        self.assertEqual(inst.link[0].target[0].type, \"List\")\n        self.assertEqual(inst.name, \"Document Generation Template\")\n        self.assertEqual(inst.publisher, \"FHIR Project\")\n        self.assertEqual(inst.start, \"Composition\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://h7.org/fhir/GraphDefinition/example\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/graphdefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/GraphDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass GraphDefinition(domainresource.DomainResource):\n    \"\"\" Definition of a graph of resources.\n    \n    A formal computable definition of a graph of resources - that is, a\n    coherent set of resources that form a graph by following references. The\n    Graph Definition resource defines a set and makes rules about the set.\n    \"\"\"\n    \n    resource_type = \"GraphDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the graph definition.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for graph definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.link = None\n        \"\"\" Links this graph makes rules about.\n        List of `GraphDefinitionLink` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this graph definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.profile = None\n        \"\"\" Profile on base resource.\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this graph definition is defined.\n        Type `str`. \"\"\"\n        \n        self.start = None\n        \"\"\" Type of resource at which the graph starts.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this graph definition, represented as a\n        URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the graph definition.\n        Type `str`. \"\"\"\n        \n        super(GraphDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GraphDefinition, self).elementProperties()\n        js.extend([\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"link\", \"link\", GraphDefinitionLink, True, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"profile\", \"profile\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"start\", \"start\", str, False, None, True),\n            (\"status\", \"status\", str, False, None, True),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass GraphDefinitionLink(backboneelement.BackboneElement):\n    \"\"\" Links this graph makes rules about.\n    \"\"\"\n    \n    resource_type = \"GraphDefinitionLink\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Why this link is specified.\n        Type `str`. \"\"\"\n        \n        self.max = None\n        \"\"\" Maximum occurrences for this link.\n        Type `str`. \"\"\"\n        \n        self.min = None\n        \"\"\" Minimum occurrences for this link.\n        Type `int`. \"\"\"\n        \n        self.path = None\n        \"\"\" Path in the resource that contains the link.\n        Type `str`. \"\"\"\n        \n        self.sliceName = None\n        \"\"\" Which slice (if profiled).\n        Type `str`. \"\"\"\n        \n        self.target = None\n        \"\"\" Potential target for the link.\n        List of `GraphDefinitionLinkTarget` items (represented as `dict` in JSON). \"\"\"\n        \n        super(GraphDefinitionLink, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GraphDefinitionLink, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"max\", \"max\", str, False, None, False),\n            (\"min\", \"min\", int, False, None, False),\n            (\"path\", \"path\", str, False, None, False),\n            (\"sliceName\", \"sliceName\", str, False, None, False),\n            (\"target\", \"target\", GraphDefinitionLinkTarget, True, None, False),\n        ])\n        return js\n\n\nclass GraphDefinitionLinkTarget(backboneelement.BackboneElement):\n    \"\"\" Potential target for the link.\n    \"\"\"\n    \n    resource_type = \"GraphDefinitionLinkTarget\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.compartment = None\n        \"\"\" Compartment Consistency Rules.\n        List of `GraphDefinitionLinkTargetCompartment` items (represented as `dict` in JSON). \"\"\"\n        \n        self.link = None\n        \"\"\" Additional links from target resource.\n        List of `GraphDefinitionLink` items (represented as `dict` in JSON). \"\"\"\n        \n        self.params = None\n        \"\"\" Criteria for reverse lookup.\n        Type `str`. \"\"\"\n        \n        self.profile = None\n        \"\"\" Profile for the target resource.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of resource this link refers to.\n        Type `str`. \"\"\"\n        \n        super(GraphDefinitionLinkTarget, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GraphDefinitionLinkTarget, self).elementProperties()\n        js.extend([\n            (\"compartment\", \"compartment\", GraphDefinitionLinkTargetCompartment, True, None, False),\n            (\"link\", \"link\", GraphDefinitionLink, True, None, False),\n            (\"params\", \"params\", str, False, None, False),\n            (\"profile\", \"profile\", str, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nclass GraphDefinitionLinkTargetCompartment(backboneelement.BackboneElement):\n    \"\"\" Compartment Consistency Rules.\n    \"\"\"\n    \n    resource_type = \"GraphDefinitionLinkTargetCompartment\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Patient | Encounter | RelatedPerson | Practitioner | Device.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Documentation for FHIRPath expression.\n        Type `str`. \"\"\"\n        \n        self.expression = None\n        \"\"\" Custom rule, as a FHIRPath expression.\n        Type `str`. \"\"\"\n        \n        self.rule = None\n        \"\"\" identical | matching | different | custom.\n        Type `str`. \"\"\"\n        \n        self.use = None\n        \"\"\" condition | requirement.\n        Type `str`. \"\"\"\n        \n        super(GraphDefinitionLinkTargetCompartment, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GraphDefinitionLinkTargetCompartment, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"expression\", \"expression\", str, False, None, False),\n            (\"rule\", \"rule\", str, False, None, True),\n            (\"use\", \"use\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date.\n\nThe method checks the `origval` attribute, which holds the original input JSON string. If `origval` is not `None`, it is returned directly. If `origval` is `None`, the method calls the `isostring` property to obtain the standardized ISO 8601 format of the date. The `isostring` may result in converting partial dates (e.g., \"2024\" to \"2024-01-01\") and normalizing formats.\n\nNo constants are used within this method.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date.\n\nThe method checks the `origval` attribute, which holds the original input JSON string. If `origval` is not `None`, it is returned directly. If `origval` is `None`, the method calls the `isostring` property to obtain the standardized ISO 8601 format of the date. The `isostring` may result in converting partial dates (e.g., \"2024\" to \"2024-01-01\") and normalizing formats.\n\nNo constants are used within this method.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/graphdefinition.py": {
      "GraphDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a GraphDefinition instance, which defines a graph of resources following FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing properties to be set from existing JSON data.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables; if False, allows for leniency in initialization.\n\nAttributes:\n- contact (List[ContactDetail]): Contact details for the publisher.\n- date (FHIRDateTime): Date when the graph definition was last changed.\n- description (str): A natural language description of the graph definition.\n- experimental (bool): Indicates if the graph is for testing purposes.\n- jurisdiction (List[CodeableConcept]): Intended jurisdiction for the graph definition.\n- link (List[GraphDefinitionLink]): Links defining the relationships in the graph.\n- name (str): A computer-friendly name for the graph definition.\n- profile (str): Profile information on the base resource.\n- publisher (str): The name of the publisher (organization or individual).\n- purpose (str): The purpose of defining this graph.\n- start (str): The type of resource from which the graph starts.\n- status (str): The current status of the graph definition (draft, active, retired, unknown).\n- url (str): A canonical identifier for the graph definition, globally unique.\n- useContext (List[UsageContext]): The context that the content is intended to support.\n- version (str): The business version of the graph definition.\n\nThis class inherits from domainresource.DomainResource, utilizing the properties and methods defined therein to leverage FHIR specifications effectively.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the graph definition.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.jurisdiction = None\n        ' Intended jurisdiction for graph definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.link = None\n        ' Links this graph makes rules about.\\n        List of `GraphDefinitionLink` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this graph definition (computer friendly).\\n        Type `str`. '\n        self.profile = None\n        ' Profile on base resource.\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this graph definition is defined.\\n        Type `str`. '\n        self.start = None\n        ' Type of resource at which the graph starts.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this graph definition, represented as a\\n        URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the graph definition.\\n        Type `str`. '\n        super(GraphDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a GraphDefinition instance, which defines a graph of resources following FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing properties to be set from existing JSON data.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables; if False, allows for leniency in initialization.\n\nAttributes:\n- contact (List[ContactDetail]): Contact details for the publisher.\n- date (FHIRDateTime): Date when the graph definition was last changed.\n- description (str): A natural language description of the graph definition.\n- experimental (bool): Indicates if the graph is for testing purposes.\n- jurisdiction (List[CodeableConcept]): Intended jurisdiction for the graph definition.\n- link (List[GraphDefinitionLink]): Links defining the relationships in the graph.\n- name (str): A computer-friendly name for the graph definition.\n- profile (str): Profile information on the base resource.\n- publisher (str): The name of the publisher (organization or individual).\n- purpose (str): The purpose of defining this graph.\n- start (str): The type of resource from which the graph starts.\n- status (str): The current status of the graph definition (draft, active, retired, unknown).\n- url (str): A canonical identifier for the graph definition, globally unique.\n- useContext (List[UsageContext]): The context that the content is intended to support.\n- version (str): The business version of the graph definition.\n\nThis class inherits from domainresource.DomainResource, utilizing the properties and methods defined therein to leverage FHIR specifications effectively.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class GraphDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in JSON format. This value is passed to the parent class (FHIRDate) initializer for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initially set to None, this attribute will hold the Python datetime representation of the parsed FHIR datetime once processed by the parent class.\n\nThis constructor depends on the FHIRDate class for handling the JSON string, allowing seamless conversion and compatibility with FHIR datetime representations.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in JSON format. This value is passed to the parent class (FHIRDate) initializer for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initially set to None, this attribute will hold the Python datetime representation of the parsed FHIR datetime once processed by the parent class.\n\nThis constructor depends on the FHIRDate class for handling the JSON string, allowing seamless conversion and compatibility with FHIR datetime representations.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns the JSON representation of the FHIRAbstractResource instance, including a 'resourceType' field.\n\nThis method first calls the `as_json` method of its superclass to obtain a base JSON dictionary, then appends the `resource_type` class attribute to this dictionary to indicate the type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary containing the JSON representation of the resource, including the 'resourceType'.\n\nDependencies:\n    - The method relies on the superclass implementation of `as_json`, defined in `fhirabstractbase.FHIRAbstractBase`, to generate its base JSON structure.\n    - The `resource_type` attribute indicates the specific type of FHIR resource and is set to 'FHIRAbstractResource' for this class.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns the JSON representation of the FHIRAbstractResource instance, including a 'resourceType' field.\n\nThis method first calls the `as_json` method of its superclass to obtain a base JSON dictionary, then appends the `resource_type` class attribute to this dictionary to indicate the type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary containing the JSON representation of the resource, including the 'resourceType'.\n\nDependencies:\n    - The method relies on the superclass implementation of `as_json`, defined in `fhirabstractbase.FHIRAbstractBase`, to generate its base JSON structure.\n    - The `resource_type` attribute indicates the specific type of FHIR resource and is set to 'FHIRAbstractResource' for this class.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/graphdefinition.py:GraphDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/graphdefinition_test.py:GraphDefinitionTests:testGraphDefinition1": {
      "tests/models/graphdefinition_test.py:GraphDefinitionTests:instantiate_from": {
        "fhirclient/models/graphdefinition.py:GraphDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/graphdefinition.py:GraphDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/graphdefinition_test.py:GraphDefinitionTests:implGraphDefinition1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/graphdefinition.py:GraphDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/graphdefinition.py:GraphDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/graphdefinition.py:GraphDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/graphdefinition_test.py:GraphDefinitionTests:instantiate_from": {
      "fhirclient/models/graphdefinition.py:GraphDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/graphdefinition.py:GraphDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-graphdefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 graphdefinition.py\n            \u2514\u2500\u2500 GraphDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and instantiation of FHIR (Fast Healthcare Interoperability Resources) `GraphDefinition` resources, a critical component in defining relationships and traversals between linked FHIR resources within a healthcare data system. Its primary functionality includes loading `GraphDefinition` instances from JSON files, verifying their structural integrity, and validating key attributes such as relationships, compartments, and metadata. This ensures that resource graph structures conform to FHIR specifications, supporting use cases such as document generation and dependency management in healthcare workflows. By enabling seamless validation and resource interaction, the module simplifies the process for developers building interoperable healthcare applications, ensuring consistency with FHIR standards.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns the ISO 8601 string representation of the date.\n\nThe method checks the `origval` attribute, which holds the original input JSON string. If `origval` is not `None`, it is returned directly. If `origval` is `None`, the method calls the `isostring` property to obtain the standardized ISO 8601 format of the date. The `isostring` may result in converting partial dates (e.g., \"2024\" to \"2024-01-01\") and normalizing formats.\n\nNo constants are used within this method.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/graphdefinition.py\n\n- CLASS METHOD: GraphDefinition.__init__\n  - CLASS SIGNATURE: class GraphDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a GraphDefinition instance, which defines a graph of resources following FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing properties to be set from existing JSON data.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid variables; if False, allows for leniency in initialization.\n\nAttributes:\n- contact (List[ContactDetail]): Contact details for the publisher.\n- date (FHIRDateTime): Date when the graph definition was last changed.\n- description (str): A natural language description of the graph definition.\n- experimental (bool): Indicates if the graph is for testing purposes.\n- jurisdiction (List[CodeableConcept]): Intended jurisdiction for the graph definition.\n- link (List[GraphDefinitionLink]): Links defining the relationships in the graph.\n- name (str): A computer-friendly name for the graph definition.\n- profile (str): Profile information on the base resource.\n- publisher (str): The name of the publisher (organization or individual).\n- purpose (str): The purpose of defining this graph.\n- start (str): The type of resource from which the graph starts.\n- status (str): The current status of the graph definition (draft, active, retired, unknown).\n- url (str): A canonical identifier for the graph definition, globally unique.\n- useContext (List[UsageContext]): The context that the content is intended to support.\n- version (str): The business version of the graph definition.\n\nThis class inherits from domainresource.DomainResource, utilizing the properties and methods defined therein to leverage FHIR specifications effectively.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in JSON format. This value is passed to the parent class (FHIRDate) initializer for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initially set to None, this attribute will hold the Python datetime representation of the parsed FHIR datetime once processed by the parent class.\n\nThis constructor depends on the FHIRDate class for handling the JSON string, allowing seamless conversion and compatibility with FHIR datetime representations.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the JSON representation of the FHIRAbstractResource instance, including a 'resourceType' field.\n\nThis method first calls the `as_json` method of its superclass to obtain a base JSON dictionary, then appends the `resource_type` class attribute to this dictionary to indicate the type of FHIR resource being represented.\n\nReturns:\n    dict: A dictionary containing the JSON representation of the resource, including the 'resourceType'.\n\nDependencies:\n    - The method relies on the superclass implementation of `as_json`, defined in `fhirabstractbase.FHIRAbstractBase`, to generate its base JSON structure.\n    - The `resource_type` attribute indicates the specific type of FHIR resource and is set to 'FHIRAbstractResource' for this class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/graphdefinition.py": "from . import domainresource\n\nclass GraphDefinition(domainresource.DomainResource):\n    \"\"\" Definition of a graph of resources.\n    \n    A formal computable definition of a graph of resources - that is, a\n    coherent set of resources that form a graph by following references. The\n    Graph Definition resource defines a set and makes rules about the set.\n    \"\"\"\n    resource_type = 'GraphDefinition'\n\n    def elementProperties(self):\n        js = super(GraphDefinition, self).elementProperties()\n        js.extend([('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('link', 'link', GraphDefinitionLink, True, None, False), ('name', 'name', str, False, None, True), ('profile', 'profile', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('start', 'start', str, False, None, True), ('status', 'status', str, False, None, True), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass GraphDefinitionLink(backboneelement.BackboneElement):\n    \"\"\" Links this graph makes rules about.\n    \"\"\"\n    resource_type = 'GraphDefinitionLink'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Why this link is specified.\\n        Type `str`. '\n        self.max = None\n        ' Maximum occurrences for this link.\\n        Type `str`. '\n        self.min = None\n        ' Minimum occurrences for this link.\\n        Type `int`. '\n        self.path = None\n        ' Path in the resource that contains the link.\\n        Type `str`. '\n        self.sliceName = None\n        ' Which slice (if profiled).\\n        Type `str`. '\n        self.target = None\n        ' Potential target for the link.\\n        List of `GraphDefinitionLinkTarget` items (represented as `dict` in JSON). '\n        super(GraphDefinitionLink, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GraphDefinitionLink, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('max', 'max', str, False, None, False), ('min', 'min', int, False, None, False), ('path', 'path', str, False, None, False), ('sliceName', 'sliceName', str, False, None, False), ('target', 'target', GraphDefinitionLinkTarget, True, None, False)])\n        return js\n\nclass GraphDefinitionLinkTarget(backboneelement.BackboneElement):\n    \"\"\" Potential target for the link.\n    \"\"\"\n    resource_type = 'GraphDefinitionLinkTarget'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.compartment = None\n        ' Compartment Consistency Rules.\\n        List of `GraphDefinitionLinkTargetCompartment` items (represented as `dict` in JSON). '\n        self.link = None\n        ' Additional links from target resource.\\n        List of `GraphDefinitionLink` items (represented as `dict` in JSON). '\n        self.params = None\n        ' Criteria for reverse lookup.\\n        Type `str`. '\n        self.profile = None\n        ' Profile for the target resource.\\n        Type `str`. '\n        self.type = None\n        ' Type of resource this link refers to.\\n        Type `str`. '\n        super(GraphDefinitionLinkTarget, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GraphDefinitionLinkTarget, self).elementProperties()\n        js.extend([('compartment', 'compartment', GraphDefinitionLinkTargetCompartment, True, None, False), ('link', 'link', GraphDefinitionLink, True, None, False), ('params', 'params', str, False, None, False), ('profile', 'profile', str, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\n\nclass GraphDefinitionLinkTargetCompartment(backboneelement.BackboneElement):\n    \"\"\" Compartment Consistency Rules.\n    \"\"\"\n    resource_type = 'GraphDefinitionLinkTargetCompartment'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Patient | Encounter | RelatedPerson | Practitioner | Device.\\n        Type `str`. '\n        self.description = None\n        ' Documentation for FHIRPath expression.\\n        Type `str`. '\n        self.expression = None\n        ' Custom rule, as a FHIRPath expression.\\n        Type `str`. '\n        self.rule = None\n        ' identical | matching | different | custom.\\n        Type `str`. '\n        self.use = None\n        ' condition | requirement.\\n        Type `str`. '\n        super(GraphDefinitionLinkTargetCompartment, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GraphDefinitionLinkTargetCompartment, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('description', 'description', str, False, None, False), ('expression', 'expression', str, False, None, False), ('rule', 'rule', str, False, None, True), ('use', 'use', str, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}