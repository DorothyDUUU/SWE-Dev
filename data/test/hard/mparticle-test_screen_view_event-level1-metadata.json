{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_screen_view_event",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "modified_testcases/test_screen_view_event.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.screen_view_event import ScreenViewEvent\n\n\nclass TestScreenViewEvent(unittest.TestCase):\n    \"\"\" ScreenViewEvent unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testScreenViewEventAttributeValues(self):\n        with self.assertRaises(ValueError):\n            event = mparticle.models.screen_view_event.ScreenViewEvent(\n                custom_attributes={'example attribute key': ['something']}\n            )\n\n        event = mparticle.models.screen_view_event.ScreenViewEvent()\n        with self.assertRaises(ValueError):\n            event.custom_attributes = {'example attribute key': ['something']}\n\n    def TestScreenViewEventCustomFlags(self):\n        custom_flags = {\n            \"foo\": 'bar',\n            'answer': 42,\n            'arrays': [\n                'foo', 'bar', 'baz'\n            ]\n        }\n\n        event = mparticle.models.screen_view_event.ScreenViewEvent(\n            custom_flags=custom_flags)\n\n        event_dict = event.to_dict()\n\n        self.assertEqual(\"bar\", event_dict[\"custom_flags\"][\"foo\"])\n        self.assertEqual(42, event_dict[\"custom_flags\"][\"answer\"])\n        self.assertEqual(\n            ['foo', 'bar', 'baz'],\n            event_dict[\"custom_flags\"][\"arrays\"])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/screen_view_event.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\nimport mparticle\n\n\nclass ScreenViewEvent(object):\n\n    def __init__(self, timestamp_unixtime_ms=None, event_id=None,\n                 source_message_id=None, session_id=None,\n                 session_uuid=None, custom_attributes=None,\n                 location=None, device_current_state=None,\n                 screen_name=None, activity_type=None,\n                 custom_flags=None):\n        \"\"\"\n        ScreenViewEvent - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n            'screen_name': 'str',\n            'activity_type': 'str',\n            'custom_flags': 'dict(str, str)',\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n            'screen_name': 'screen_name',\n            'activity_type': 'activity_type',\n            'custom_flags': 'custom_flags',\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self.custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._screen_name = screen_name\n        self._activity_type = activity_type\n        self._custom_flags = custom_flags\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this ScreenViewEvent.\n\n\n        :return: The timestamp_unixtime_ms of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this ScreenViewEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this ScreenViewEvent.\n\n\n        :return: The event_id of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this ScreenViewEvent.\n\n\n        :param event_id: The event_id of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this ScreenViewEvent.\n\n\n        :return: The source_message_id of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this ScreenViewEvent.\n\n\n        :param source_message_id: The source_message_id of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this ScreenViewEvent.\n\n\n        :return: The session_id of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this ScreenViewEvent.\n\n\n        :param session_id: The session_id of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this ScreenViewEvent.\n\n\n        :return: The session_uuid of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this ScreenViewEvent.\n\n\n        :param session_uuid: The session_uuid of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this ScreenViewEvent.\n\n\n        :return: The custom_attributes of this ScreenViewEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this ScreenViewEvent.\n\n\n        :param custom_attributes: The custom_attributes of this ScreenViewEvent.\n        :type: dict(str, str)\n        \"\"\"\n        if not mparticle.ApiClient.validate_attribute_bag_values(custom_attributes):\n            raise ValueError(\n                \"Invalid custom_attributes passed to ScreenViewEvent: \" + str(custom_attributes))\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this ScreenViewEvent.\n\n\n        :return: The location of this ScreenViewEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this ScreenViewEvent.\n\n\n        :param location: The location of this ScreenViewEvent.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this ScreenViewEvent.\n\n\n        :return: The device_current_state of this ScreenViewEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this ScreenViewEvent.\n\n\n        :param device_current_state: The device_current_state of this ScreenViewEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    @property\n    def screen_name(self):\n        \"\"\"\n        Gets the screen_name of this ScreenViewEvent.\n\n\n        :return: The screen_name of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._screen_name\n\n    @screen_name.setter\n    def screen_name(self, screen_name):\n        \"\"\"\n        Sets the screen_name of this ScreenViewEvent.\n\n\n        :param screen_name: The screen_name of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n\n        self._screen_name = screen_name\n\n    @property\n    def activity_type(self):\n        \"\"\"\n        Gets the activity_type of this ScreenViewEvent.\n\n\n        :return: The activity_type of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._activity_type\n\n    @activity_type.setter\n    def activity_type(self, activity_type):\n        \"\"\"\n        Sets the activity_type of this ScreenViewEvent.\n\n\n        :param activity_type: The activity_type of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n\n        self._activity_type = activity_type\n\n    @property\n    def custom_flags(self):\n        \"\"\"\n        Gets the custom_flags of this ScreenViewEvent.\n\n\n        :return: The custom_flags of this ScreenViewEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_flags\n\n    @custom_flags.setter\n    def custom_flags(self, custom_flags):\n        \"\"\"\n        Sets the custom_flags of this ScreenViewEvent.\n\n\n        :param custom_flags: The custom_flags of this ScreenViewEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_flags = custom_flags\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/screen_view_event.py": {
      "ScreenViewEvent.__init__": {
        "code": "    def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, screen_name=None, activity_type=None, custom_flags=None):\n        \"\"\"Initializes a new instance of the ScreenViewEvent class, which represents an event \n    triggered by viewing a screen in the application. This class structures the event data \n    according to the specifications defined in the Swagger API documentation.\n\n    Parameters:\n    - timestamp_unixtime_ms (int, optional): The timestamp of the event in milliseconds \n      since epoch.\n    - event_id (int, optional): A unique identifier for the event.\n    - source_message_id (str, optional): An identifier for the source message related to the event.\n    - session_id (int, optional): Identifier for the current session.\n    - session_uuid (str, optional): Universally unique identifier for the session.\n    - custom_attributes (dict(str, str), optional): A dictionary containing custom attributes \n      associated with the event.\n    - location (GeoLocation, optional): An instance of GeoLocation representing the geographical \n      location context of the event.\n    - device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState \n      to specify the current state of the device.\n    - screen_name (str, optional): The name of the screen that is being viewed.\n    - activity_type (str, optional): A description of the activity occurring when the screen \n      is viewed.\n    - custom_flags (dict(str, str), optional): A dictionary of custom flags related to the event.\n\n    The class utilizes the mparticle module, specifically the ApiClient for validating \n    custom attributes. The swagger_types and attribute_map dictionaries describe the data \n    types and mappings for the event attributes, facilitating serialization and validation \n    when interacting with external APIs.\"\"\"\n        '\\n        ScreenViewEvent - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState', 'screen_name': 'str', 'activity_type': 'str', 'custom_flags': 'dict(str, str)'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state', 'screen_name': 'screen_name', 'activity_type': 'activity_type', 'custom_flags': 'custom_flags'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self.custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._screen_name = screen_name\n        self._activity_type = activity_type\n        self._custom_flags = custom_flags",
        "docstring": "Initializes a new instance of the ScreenViewEvent class, which represents an event \ntriggered by viewing a screen in the application. This class structures the event data \naccording to the specifications defined in the Swagger API documentation.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in milliseconds \n  since epoch.\n- event_id (int, optional): A unique identifier for the event.\n- source_message_id (str, optional): An identifier for the source message related to the event.\n- session_id (int, optional): Identifier for the current session.\n- session_uuid (str, optional): Universally unique identifier for the session.\n- custom_attributes (dict(str, str), optional): A dictionary containing custom attributes \n  associated with the event.\n- location (GeoLocation, optional): An instance of GeoLocation representing the geographical \n  location context of the event.\n- device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState \n  to specify the current state of the device.\n- screen_name (str, optional): The name of the screen that is being viewed.\n- activity_type (str, optional): A description of the activity occurring when the screen \n  is viewed.\n- custom_flags (dict(str, str), optional): A dictionary of custom flags related to the event.\n\nThe class utilizes the mparticle module, specifically the ApiClient for validating \ncustom attributes. The swagger_types and attribute_map dictionaries describe the data \ntypes and mappings for the event attributes, facilitating serialization and validation \nwhen interacting with external APIs.",
        "signature": "def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, screen_name=None, activity_type=None, custom_flags=None):",
        "type": "Method",
        "class_signature": "class ScreenViewEvent(object):"
      },
      "ScreenViewEvent.custom_attributes": {
        "code": "    def custom_attributes(self, custom_attributes):\n        \"\"\"Sets the custom attributes of the ScreenViewEvent. This method ensures that the provided custom attributes adhere to the validation rules defined in the `mparticle.ApiClient`. The `custom_attributes` parameter is expected to be a dictionary where keys and values are strings. If the provided dictionary does not pass validation, a `ValueError` will be raised with a message detailing the invalid input.\n\nParameters:\n- custom_attributes (dict[str, str]): A dictionary of custom attributes to associate with the event.\n\nReturns:\n- None\n\nRaises:\n- ValueError: If the custom_attributes do not meet the validation criteria.\n\nDependencies:\nThis method interacts with the `mparticle.ApiClient.validate_attribute_bag_values` method to ensure the validity of the provided custom_attributes. It modifies the instance variable `_custom_attributes`.\"\"\"\n        '\\n        Sets the custom_attributes of this ScreenViewEvent.\\n\\n\\n        :param custom_attributes: The custom_attributes of this ScreenViewEvent.\\n        :type: dict(str, str)\\n        '\n        if not mparticle.ApiClient.validate_attribute_bag_values(custom_attributes):\n            raise ValueError('Invalid custom_attributes passed to ScreenViewEvent: ' + str(custom_attributes))\n        self._custom_attributes = custom_attributes",
        "docstring": "Sets the custom attributes of the ScreenViewEvent. This method ensures that the provided custom attributes adhere to the validation rules defined in the `mparticle.ApiClient`. The `custom_attributes` parameter is expected to be a dictionary where keys and values are strings. If the provided dictionary does not pass validation, a `ValueError` will be raised with a message detailing the invalid input.\n\nParameters:\n- custom_attributes (dict[str, str]): A dictionary of custom attributes to associate with the event.\n\nReturns:\n- None\n\nRaises:\n- ValueError: If the custom_attributes do not meet the validation criteria.\n\nDependencies:\nThis method interacts with the `mparticle.ApiClient.validate_attribute_bag_values` method to ensure the validity of the provided custom_attributes. It modifies the instance variable `_custom_attributes`.",
        "signature": "def custom_attributes(self, custom_attributes):",
        "type": "Method",
        "class_signature": "class ScreenViewEvent(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/screen_view_event.py:ScreenViewEvent:__init__": {},
    "mparticle/models/screen_view_event.py:ScreenViewEvent:custom_attributes": {
      "mparticle/api_client.py": {
        "ApiClient.validate_attribute_bag_values": {
          "code": "    def validate_attribute_bag_values(custom_attributes):\n        return not (custom_attributes is not None and not all(value is None or isinstance(value, (float, bool) + integer_types + string_types) for value in custom_attributes.values()))",
          "docstring": "",
          "signature": "def validate_attribute_bag_values(custom_attributes):",
          "type": "Method",
          "class_signature": "class ApiClient(object):"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mparticle-test_screen_view_event\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 screen_view_event.py\n            \u251c\u2500\u2500 ScreenViewEvent.__init__\n            \u2514\u2500\u2500 ScreenViewEvent.custom_attributes\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module interacts with the mParticle Event API, focusing on the creation, validation, and management of \"ScreenViewEvent\" objects. Its primary purpose is to provide functionality for defining and customizing screen view events, including features such as assigning attributes and configuring custom flags. This module ensures events are structured correctly by enforcing validation rules and enabling seamless integration with mParticle's event data pipelines. By offering tools to manage event attributes and flags programmatically, it simplifies the process for developers to track screen view interactions, enhancing the accuracy and efficiency of analytics and event-driven use cases.\n\n## FILE 1: mparticle/models/screen_view_event.py\n\n- CLASS METHOD: ScreenViewEvent.custom_attributes\n  - CLASS SIGNATURE: class ScreenViewEvent(object):\n  - SIGNATURE: def custom_attributes(self, custom_attributes):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the custom attributes of the ScreenViewEvent. This method ensures that the provided custom attributes adhere to the validation rules defined in the `mparticle.ApiClient`. The `custom_attributes` parameter is expected to be a dictionary where keys and values are strings. If the provided dictionary does not pass validation, a `ValueError` will be raised with a message detailing the invalid input.\n\nParameters:\n- custom_attributes (dict[str, str]): A dictionary of custom attributes to associate with the event.\n\nReturns:\n- None\n\nRaises:\n- ValueError: If the custom_attributes do not meet the validation criteria.\n\nDependencies:\nThis method interacts with the `mparticle.ApiClient.validate_attribute_bag_values` method to ensure the validity of the provided custom_attributes. It modifies the instance variable `_custom_attributes`.\n\"\"\"\n```\n\n- CLASS METHOD: ScreenViewEvent.__init__\n  - CLASS SIGNATURE: class ScreenViewEvent(object):\n  - SIGNATURE: def __init__(self, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, screen_name=None, activity_type=None, custom_flags=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the ScreenViewEvent class, which represents an event \ntriggered by viewing a screen in the application. This class structures the event data \naccording to the specifications defined in the Swagger API documentation.\n\nParameters:\n- timestamp_unixtime_ms (int, optional): The timestamp of the event in milliseconds \n  since epoch.\n- event_id (int, optional): A unique identifier for the event.\n- source_message_id (str, optional): An identifier for the source message related to the event.\n- session_id (int, optional): Identifier for the current session.\n- session_uuid (str, optional): Universally unique identifier for the session.\n- custom_attributes (dict(str, str), optional): A dictionary containing custom attributes \n  associated with the event.\n- location (GeoLocation, optional): An instance of GeoLocation representing the geographical \n  location context of the event.\n- device_current_state (DeviceCurrentState, optional): An instance of DeviceCurrentState \n  to specify the current state of the device.\n- screen_name (str, optional): The name of the screen that is being viewed.\n- activity_type (str, optional): A description of the activity occurring when the screen \n  is viewed.\n- custom_flags (dict(str, str), optional): A dictionary of custom flags related to the event.\n\nThe class utilizes the mparticle module, specifically the ApiClient for validating \ncustom attributes. The swagger_types and attribute_map dictionaries describe the data \ntypes and mappings for the event attributes, facilitating serialization and validation \nwhen interacting with external APIs.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/screen_view_event.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\nimport mparticle\n\nclass ScreenViewEvent(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this ScreenViewEvent.\n\n\n        :return: The timestamp_unixtime_ms of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this ScreenViewEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this ScreenViewEvent.\n\n\n        :return: The event_id of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this ScreenViewEvent.\n\n\n        :param event_id: The event_id of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this ScreenViewEvent.\n\n\n        :return: The source_message_id of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this ScreenViewEvent.\n\n\n        :param source_message_id: The source_message_id of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this ScreenViewEvent.\n\n\n        :return: The session_id of this ScreenViewEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this ScreenViewEvent.\n\n\n        :param session_id: The session_id of this ScreenViewEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this ScreenViewEvent.\n\n\n        :return: The session_uuid of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this ScreenViewEvent.\n\n\n        :param session_uuid: The session_uuid of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this ScreenViewEvent.\n\n\n        :return: The location of this ScreenViewEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this ScreenViewEvent.\n\n\n        :param location: The location of this ScreenViewEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this ScreenViewEvent.\n\n\n        :return: The device_current_state of this ScreenViewEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this ScreenViewEvent.\n\n\n        :param device_current_state: The device_current_state of this ScreenViewEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    @property\n    def screen_name(self):\n        \"\"\"\n        Gets the screen_name of this ScreenViewEvent.\n\n\n        :return: The screen_name of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._screen_name\n\n    @screen_name.setter\n    def screen_name(self, screen_name):\n        \"\"\"\n        Sets the screen_name of this ScreenViewEvent.\n\n\n        :param screen_name: The screen_name of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n        self._screen_name = screen_name\n\n    @property\n    def activity_type(self):\n        \"\"\"\n        Gets the activity_type of this ScreenViewEvent.\n\n\n        :return: The activity_type of this ScreenViewEvent.\n        :rtype: str\n        \"\"\"\n        return self._activity_type\n\n    @activity_type.setter\n    def activity_type(self, activity_type):\n        \"\"\"\n        Sets the activity_type of this ScreenViewEvent.\n\n\n        :param activity_type: The activity_type of this ScreenViewEvent.\n        :type: str\n        \"\"\"\n        self._activity_type = activity_type\n\n    @property\n    def custom_flags(self):\n        \"\"\"\n        Gets the custom_flags of this ScreenViewEvent.\n\n\n        :return: The custom_flags of this ScreenViewEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_flags\n\n    @custom_flags.setter\n    def custom_flags(self, custom_flags):\n        \"\"\"\n        Sets the custom_flags of this ScreenViewEvent.\n\n\n        :param custom_flags: The custom_flags of this ScreenViewEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_flags = custom_flags\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "modified_testcases/test_screen_view_event.py:TestScreenViewEvent:testScreenViewEventAttributeValues": {
      "mparticle/models/screen_view_event.py:ScreenViewEvent:__init__": {
        "mparticle/models/screen_view_event.py:ScreenViewEvent:custom_attributes": {
          "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
        }
      },
      "mparticle/models/screen_view_event.py:ScreenViewEvent:custom_attributes": {
        "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
      }
    }
  }
}