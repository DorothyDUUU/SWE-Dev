{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-contract_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/contract_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import contract\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ContractTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Contract\", js[\"resourceType\"])\n        return contract.Contract(js)\n    \n    def testContract1(self):\n        inst = self.instantiate_from(\"pcd-example-notThis.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract1(inst2)\n    \n    def implContract1(self, inst):\n        self.assertEqual(inst.friendly[0].contentAttachment.title, \"The terms of the consent in friendly consumer speak.\")\n        self.assertEqual(inst.id, \"pcd-example-notThis\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2015-11-18\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2015-11-18\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"The terms of the consent in lawyer speak.\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"Opt-In\")\n        self.assertEqual(inst.subType[0].coding[0].display, \"Default Authorization with exceptions.\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://www.infoway-inforoute.ca.org/Consent-subtype-codes\")\n        self.assertEqual(inst.term[0].applies.start.datetime, FHIRDateTime(\"2015-11-18\").datetime)\n        self.assertEqual(inst.term[0].applies.start.as_json(), \"2015-11-18\")\n        self.assertEqual(inst.term[0].identifier.system, \"http://example.org/fhir/term-items\")\n        self.assertEqual(inst.term[0].identifier.value, \"3347689\")\n        self.assertEqual(inst.term[0].issued.datetime, FHIRDateTime(\"2015-11-01\").datetime)\n        self.assertEqual(inst.term[0].issued.as_json(), \"2015-11-01\")\n        self.assertEqual(inst.term[0].offer.text, \"Withhold this order and any results or related objects from any provider.\")\n        self.assertEqual(inst.term[0].type.coding[0].code, \"withhold-identified-object-and-related\")\n        self.assertEqual(inst.term[0].type.coding[0].display, \"Withhold the identified object and any other resources that are related to this object.\")\n        self.assertEqual(inst.term[0].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"57016-8\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n    \n    def testContract2(self):\n        inst = self.instantiate_from(\"pcd-example-notLabs.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract2(inst2)\n    \n    def implContract2(self, inst):\n        self.assertEqual(inst.friendly[0].contentAttachment.title, \"The terms of the consent in friendly consumer speak.\")\n        self.assertEqual(inst.id, \"pcd-example-notLabs\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2014-08-17\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2014-08-17\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"The terms of the consent in lawyer speak.\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"Opt-In\")\n        self.assertEqual(inst.subType[0].coding[0].display, \"Default Authorization with exceptions.\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://www.infoway-inforoute.ca.org/Consent-subtype-codes\")\n        self.assertEqual(inst.term[0].group[0].offer.text, \"Withhold orders from any provider.\")\n        self.assertEqual(inst.term[0].group[0].subType.coding[0].code, \"ServiceRequest\")\n        self.assertEqual(inst.term[0].group[0].subType.coding[0].system, \"http://hl7.org/fhir/resource-types\")\n        self.assertEqual(inst.term[0].group[0].type.coding[0].code, \"withhold-object-type\")\n        self.assertEqual(inst.term[0].group[0].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.term[0].group[1].offer.text, \"Withhold order results from any provider.\")\n        self.assertEqual(inst.term[0].group[1].subType.coding[0].code, \"DiagnosticReport\")\n        self.assertEqual(inst.term[0].group[1].subType.coding[0].system, \"http://hl7.org/fhir/resource-types\")\n        self.assertEqual(inst.term[0].group[1].type.coding[0].code, \"withhold-object-type\")\n        self.assertEqual(inst.term[0].group[1].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.term[0].offer.text, \"sample\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"57016-8\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n    \n    def testContract3(self):\n        inst = self.instantiate_from(\"pcd-example-notOrg.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract3(inst2)\n    \n    def implContract3(self, inst):\n        self.assertEqual(inst.friendly[0].contentAttachment.title, \"The terms of the consent in friendly consumer speak.\")\n        self.assertEqual(inst.id, \"pcd-example-notOrg\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2015-11-18\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2015-11-18\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"The terms of the consent in lawyer speak.\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"Opt-In\")\n        self.assertEqual(inst.subType[0].coding[0].display, \"Default Authorization with exceptions.\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://www.infoway-inforoute.ca.org/Consent-subtype-codes\")\n        self.assertEqual(inst.term[0].offer.text, \"Withhold this order and any results or related objects from any provider.\")\n        self.assertEqual(inst.term[0].type.coding[0].code, \"withhold-from\")\n        self.assertEqual(inst.term[0].type.coding[0].display, \"Withhold all data from specified actor entity.\")\n        self.assertEqual(inst.term[0].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"57016-8\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n    \n    def testContract4(self):\n        inst = self.instantiate_from(\"pcd-example-notAuthor.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract4(inst2)\n    \n    def implContract4(self, inst):\n        self.assertEqual(inst.friendly[0].contentAttachment.title, \"The terms of the consent in friendly consumer speak.\")\n        self.assertEqual(inst.id, \"pcd-example-notAuthor\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2015-11-18\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2015-11-18\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"The terms of the consent in lawyer speak.\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"Opt-In\")\n        self.assertEqual(inst.subType[0].coding[0].display, \"Default Authorization with exceptions.\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://www.infoway-inforoute.ca.org/Consent-subtype-codes\")\n        self.assertEqual(inst.term[0].offer.text, \"Withhold all data authored by Good Health provider.\")\n        self.assertEqual(inst.term[0].type.coding[0].code, \"withhold-authored-by\")\n        self.assertEqual(inst.term[0].type.coding[0].display, \"Withhold all data authored by specified actor entity.\")\n        self.assertEqual(inst.term[0].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"57016-8\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n    \n    def testContract5(self):\n        inst = self.instantiate_from(\"contract-example-42cfr-part2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract5(inst2)\n    \n    def implContract5(self, inst):\n        self.assertEqual(inst.applies.start.datetime, FHIRDateTime(\"2013-11-01T21:18:27-04:00\").datetime)\n        self.assertEqual(inst.applies.start.as_json(), \"2013-11-01T21:18:27-04:00\")\n        self.assertEqual(inst.contentDerivative.coding[0].code, \"registration\")\n        self.assertEqual(inst.contentDerivative.coding[0].system, \"http://terminology.hl7.org/CodeSystem/contract-content-derivative\")\n        self.assertEqual(inst.id, \"C-2121\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2013-11-01T21:18:27-04:00\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2013-11-01T21:18:27-04:00\")\n        self.assertEqual(inst.legal[0].contentAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.legal[0].contentAttachment.language, \"en-US\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"MDHHS-5515 Consent To Share Your Health Information\")\n        self.assertEqual(inst.legal[0].contentAttachment.url, \"http://org.mihin.ecms/ConsentDirective-2121\")\n        self.assertEqual(inst.meta.lastUpdated.datetime, FHIRInstant(\"2016-07-19T18:18:42.108-04:00\").datetime)\n        self.assertEqual(inst.meta.lastUpdated.as_json(), \"2016-07-19T18:18:42.108-04:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.meta.versionId, \"1\")\n        self.assertEqual(inst.signer[0].signature[0].type[0].code, \"1.2.840.10065.1.12.1.1\")\n        self.assertEqual(inst.signer[0].signature[0].type[0].system, \"urn:iso-astm:E1762-95:2013\")\n        self.assertEqual(inst.signer[0].signature[0].when.datetime, FHIRInstant(\"2017-02-08T10:57:34+01:00\").datetime)\n        self.assertEqual(inst.signer[0].signature[0].when.as_json(), \"2017-02-08T10:57:34+01:00\")\n        self.assertEqual(inst.signer[0].type.code, \"SELF\")\n        self.assertEqual(inst.signer[0].type.system, \"http://mdhhs.org/fhir/consent-signer-type\")\n        self.assertEqual(inst.status, \"executed\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"hcd\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/consentcategorycodes\")\n        self.assertEqual(inst.term[0].action[0].intent.coding[0].code, \"HPRGRP\")\n        self.assertEqual(inst.term[0].action[0].intent.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.term[0].action[0].status.text, \"Sample\")\n        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].code, \"IR\")\n        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].display, \"Recipient\")\n        self.assertEqual(inst.term[0].action[0].subject[0].role.coding[0].system, \"http://mdhhs.org/fhir/consent-actor-type\")\n        self.assertEqual(inst.term[0].action[0].subject[0].role.text, \"Recipient of restricted health information\")\n        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].code, \"IS\")\n        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].display, \"Sender\")\n        self.assertEqual(inst.term[0].action[0].subject[1].role.coding[0].system, \"http://mdhhs.org/fhir/consent-actor-type\")\n        self.assertEqual(inst.term[0].action[0].subject[1].role.text, \"Sender of restricted health information\")\n        self.assertEqual(inst.term[0].action[0].type.coding[0].code, \"action-a\")\n        self.assertEqual(inst.term[0].action[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/contractaction\")\n        self.assertEqual(inst.term[0].asset[0].period[0].end.datetime, FHIRDateTime(\"2019-11-01T21:18:27-04:00\").datetime)\n        self.assertEqual(inst.term[0].asset[0].period[0].end.as_json(), \"2019-11-01T21:18:27-04:00\")\n        self.assertEqual(inst.term[0].asset[0].period[0].start.datetime, FHIRDateTime(\"2013-11-01T21:18:27-04:00\").datetime)\n        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), \"2013-11-01T21:18:27-04:00\")\n        self.assertEqual(inst.term[0].offer.decision.coding[0].code, \"OPTIN\")\n        self.assertEqual(inst.term[0].offer.decision.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n        self.assertEqual(inst.term[0].offer.text, \"Can't refuse\")\n        self.assertEqual(inst.term[0].offer.type.coding[0].code, \"statutory\")\n        self.assertEqual(inst.term[0].offer.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/contracttermtypecodes\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"OPTIN\")\n        self.assertEqual(inst.type.coding[0].system, \"http://mdhhs.org/fhir/consentdirective-type\")\n        self.assertEqual(inst.type.text, \"Opt-in consent directive\")\n    \n    def testContract6(self):\n        inst = self.instantiate_from(\"contract-example-ins-policy.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract6(inst2)\n    \n    def implContract6(self, inst):\n        self.assertEqual(inst.applies.start.datetime, FHIRDateTime(\"2017-01-01\").datetime)\n        self.assertEqual(inst.applies.start.as_json(), \"2017-01-01\")\n        self.assertEqual(inst.id, \"INS-101\")\n        self.assertEqual(inst.identifier[0].system, \"http://xyz-insurance.com/forms\")\n        self.assertEqual(inst.identifier[0].value, \"YCSCWLN(01-2017)\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.term[0].asset[0].period[0].start.datetime, FHIRDateTime(\"2017-06-01\").datetime)\n        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), \"2017-06-01\")\n        self.assertEqual(inst.term[0].asset[0].subtype[0].text, \"sample\")\n        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code, \"RicardianContract\")\n        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.datetime, FHIRDateTime(\"1995\").datetime)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.as_json(), \"1995\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text, \"Ford Bobcat\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].factor, 1.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system, \"http://somewhere.motor-vehicle.com/vin\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value, \"XXSVT34-7665t952236\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency, \"CAD\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.value, 200.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].points, 1.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].quantity.value, 1)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency, \"CAD\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.value, 200.0)\n        self.assertEqual(inst.term[0].group[0].offer.text, \"Eligible Providers\")\n        self.assertEqual(inst.term[0].group[1].offer.text, \"Responsibility for Payment\")\n        self.assertEqual(inst.term[0].group[2].group[0].group[0].offer.text, \"Emergency Room Copay\")\n        self.assertEqual(inst.term[0].group[2].group[0].group[1].offer.text, \"Professional Visit Copay\")\n        self.assertEqual(inst.term[0].group[2].group[0].offer.text, \"Copays\")\n        self.assertEqual(inst.term[0].group[2].group[1].offer.text, \"Calendar Year Deductible\")\n        self.assertEqual(inst.term[0].group[2].group[2].offer.text, \"Out-Of-Pocket Maximum\")\n        self.assertEqual(inst.term[0].group[2].group[3].group[0].offer.text, \"Ambulance Services\")\n        self.assertEqual(inst.term[0].group[2].group[3].group[1].offer.text, \"Dental Services\")\n        self.assertEqual(inst.term[0].group[2].group[3].group[2].offer.text, \"Diagnostic Services\")\n        self.assertEqual(inst.term[0].group[2].group[3].group[3].offer.text, \"Emergency Room Services\")\n        self.assertEqual(inst.term[0].group[2].group[3].group[4].offer.text, \"Hospital Inpatient Care\")\n        self.assertEqual(inst.term[0].group[2].group[3].offer.text, \"Medical Services\")\n        self.assertEqual(inst.term[0].group[2].offer.text, \"List of Benefits\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"healthinsurance\")\n        self.assertEqual(inst.type.coding[0].display, \"Health Insurance\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/contract-type\")\n    \n    def testContract7(self):\n        inst = self.instantiate_from(\"contract-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract7(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract7(inst2)\n    \n    def implContract7(self, inst):\n        self.assertEqual(inst.id, \"C-123\")\n        self.assertEqual(inst.identifier[0].system, \"http://happyvalley.com/contract\")\n        self.assertEqual(inst.identifier[0].value, \"12347\")\n        self.assertEqual(inst.legallyBindingAttachment.contentType, \"application/pdf\")\n        self.assertEqual(inst.legallyBindingAttachment.url, \"http://www.aws3.com/storage/doc.pdf\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.rule[0].contentAttachment.contentType, \"application/txt\")\n        self.assertEqual(inst.rule[0].contentAttachment.url, \"http://www.rfc-editor.org/bcp/bcp13.txt\")\n        self.assertEqual(inst.term[0].asset[0].period[0].start.datetime, FHIRDateTime(\"2017-06-01\").datetime)\n        self.assertEqual(inst.term[0].asset[0].period[0].start.as_json(), \"2017-06-01\")\n        self.assertEqual(inst.term[0].asset[0].subtype[0].text, \"sample\")\n        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].code, \"RicardianContract\")\n        self.assertEqual(inst.term[0].asset[0].type[0].coding[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.datetime, FHIRDateTime(\"1995\").datetime)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].effectiveTime.as_json(), \"1995\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].entityCodeableConcept.text, \"Ford Bobcat\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].factor, 1.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.system, \"http://somewhere.motor-vehicle.com/vin\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].identifier.value, \"XXSVT34-7665t952236\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.currency, \"CAD\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].net.value, 200.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].points, 1.0)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].quantity.value, 1)\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.currency, \"CAD\")\n        self.assertEqual(inst.term[0].asset[0].valuedItem[0].unitPrice.value, 200.0)\n        self.assertEqual(inst.term[0].offer.text, \"Can't refuse\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the contract</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testContract8(self):\n        inst = self.instantiate_from(\"pcd-example-notThem.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Contract instance\")\n        self.implContract8(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Contract\", js[\"resourceType\"])\n        inst2 = contract.Contract(js)\n        self.implContract8(inst2)\n    \n    def implContract8(self, inst):\n        self.assertEqual(inst.friendly[0].contentAttachment.title, \"The terms of the consent in friendly consumer speak.\")\n        self.assertEqual(inst.id, \"pcd-example-notThem\")\n        self.assertEqual(inst.issued.datetime, FHIRDateTime(\"2015-11-18\").datetime)\n        self.assertEqual(inst.issued.as_json(), \"2015-11-18\")\n        self.assertEqual(inst.legal[0].contentAttachment.title, \"The terms of the consent in lawyer speak.\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.signer[0].signature[0].type[0].code, \"1.2.840.10065.1.12.1.1\")\n        self.assertEqual(inst.signer[0].signature[0].type[0].system, \"urn:iso-astm:E1762-95:2013\")\n        self.assertEqual(inst.signer[0].signature[0].when.datetime, FHIRInstant(\"2013-06-08T10:57:34-07:00\").datetime)\n        self.assertEqual(inst.signer[0].signature[0].when.as_json(), \"2013-06-08T10:57:34-07:00\")\n        self.assertEqual(inst.signer[0].type.code, \"COVPTY\")\n        self.assertEqual(inst.signer[0].type.system, \"http://terminology.hl7.org/CodeSystem/contractsignertypecodes\")\n        self.assertEqual(inst.subType[0].coding[0].code, \"Opt-In\")\n        self.assertEqual(inst.subType[0].coding[0].display, \"Default Authorization with exceptions.\")\n        self.assertEqual(inst.subType[0].coding[0].system, \"http://www.infoway-inforoute.ca.org/Consent-subtype-codes\")\n        self.assertEqual(inst.term[0].offer.text, \"Withhold this order and any results or related objects from specified nurse provider.\")\n        self.assertEqual(inst.term[0].type.coding[0].code, \"withhold-from\")\n        self.assertEqual(inst.term[0].type.coding[0].display, \"Withhold all data from specified actor entity.\")\n        self.assertEqual(inst.term[0].type.coding[0].system, \"http://example.org/fhir/consent-term-type-codes\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"57016-8\")\n        self.assertEqual(inst.type.coding[0].system, \"http://loinc.org\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for instant\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/contract.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Contract).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Contract(domainresource.DomainResource):\n    \"\"\" Legal Agreement.\n    \n    Legally enforceable, formally recorded unilateral or bilateral directive\n    i.e., a policy or agreement.\n    \"\"\"\n    \n    resource_type = \"Contract\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.alias = None\n        \"\"\" Acronym or short name.\n        List of `str` items. \"\"\"\n        \n        self.applies = None\n        \"\"\" Effective time.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Source of Contract.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.authority = None\n        \"\"\" Authority under which this Contract has standing.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contentDefinition = None\n        \"\"\" Contract precursor content.\n        Type `ContractContentDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentDerivative = None\n        \"\"\" Content derived from the basal information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.domain = None\n        \"\"\" A sphere of control governed by an authoritative jurisdiction,\n        organization, or person.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.expirationType = None\n        \"\"\" Contract cessation cause.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.friendly = None\n        \"\"\" Contract Friendly Language.\n        List of `ContractFriendly` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Contract number.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Source Contract Definition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" External Contract Definition.\n        Type `str`. \"\"\"\n        \n        self.issued = None\n        \"\"\" When this Contract was issued.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.legal = None\n        \"\"\" Contract Legal Language.\n        List of `ContractLegal` items (represented as `dict` in JSON). \"\"\"\n        \n        self.legalState = None\n        \"\"\" Negotiation status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.legallyBindingAttachment = None\n        \"\"\" Binding Contract.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.legallyBindingReference = None\n        \"\"\" Binding Contract.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Computer friendly designation.\n        Type `str`. \"\"\"\n        \n        self.relevantHistory = None\n        \"\"\" Key event in Contract History.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.rule = None\n        \"\"\" Computable Contract Language.\n        List of `ContractRule` items (represented as `dict` in JSON). \"\"\"\n        \n        self.scope = None\n        \"\"\" Range of Legal Concerns.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.signer = None\n        \"\"\" Contract Signatory.\n        List of `ContractSigner` items (represented as `dict` in JSON). \"\"\"\n        \n        self.site = None\n        \"\"\" Specific Location.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" amended | appended | cancelled | disputed | entered-in-error |\n        executable | executed | negotiable | offered | policy | rejected |\n        renewed | revoked | resolved | terminated.\n        Type `str`. \"\"\"\n        \n        self.subType = None\n        \"\"\" Subtype within the context of type.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" Contract Target Entity.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate Friendly name.\n        Type `str`. \"\"\"\n        \n        self.supportingInfo = None\n        \"\"\" Extra Information.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.term = None\n        \"\"\" Contract Term List.\n        List of `ContractTerm` items (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Human Friendly name.\n        Type `str`. \"\"\"\n        \n        self.topicCodeableConcept = None\n        \"\"\" Focus of contract interest.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.topicReference = None\n        \"\"\" Focus of contract interest.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Legal instrument category.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Basal definition.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" Business edition.\n        Type `str`. \"\"\"\n        \n        super(Contract, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Contract, self).elementProperties()\n        js.extend([\n            (\"alias\", \"alias\", str, True, None, False),\n            (\"applies\", \"applies\", period.Period, False, None, False),\n            (\"author\", \"author\", fhirreference.FHIRReference, False, None, False),\n            (\"authority\", \"authority\", fhirreference.FHIRReference, True, None, False),\n            (\"contentDefinition\", \"contentDefinition\", ContractContentDefinition, False, None, False),\n            (\"contentDerivative\", \"contentDerivative\", codeableconcept.CodeableConcept, False, None, False),\n            (\"domain\", \"domain\", fhirreference.FHIRReference, True, None, False),\n            (\"expirationType\", \"expirationType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"friendly\", \"friendly\", ContractFriendly, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", fhirreference.FHIRReference, False, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, False, None, False),\n            (\"issued\", \"issued\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"legal\", \"legal\", ContractLegal, True, None, False),\n            (\"legalState\", \"legalState\", codeableconcept.CodeableConcept, False, None, False),\n            (\"legallyBindingAttachment\", \"legallyBindingAttachment\", attachment.Attachment, False, \"legallyBinding\", False),\n            (\"legallyBindingReference\", \"legallyBindingReference\", fhirreference.FHIRReference, False, \"legallyBinding\", False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"relevantHistory\", \"relevantHistory\", fhirreference.FHIRReference, True, None, False),\n            (\"rule\", \"rule\", ContractRule, True, None, False),\n            (\"scope\", \"scope\", codeableconcept.CodeableConcept, False, None, False),\n            (\"signer\", \"signer\", ContractSigner, True, None, False),\n            (\"site\", \"site\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"subType\", \"subType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, True, None, False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"supportingInfo\", \"supportingInfo\", fhirreference.FHIRReference, True, None, False),\n            (\"term\", \"term\", ContractTerm, True, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topicCodeableConcept\", \"topicCodeableConcept\", codeableconcept.CodeableConcept, False, \"topic\", False),\n            (\"topicReference\", \"topicReference\", fhirreference.FHIRReference, False, \"topic\", False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ContractContentDefinition(backboneelement.BackboneElement):\n    \"\"\" Contract precursor content.\n    \n    Precusory content developed with a focus and intent of supporting the\n    formation a Contract instance, which may be associated with and\n    transformable into a Contract.\n    \"\"\"\n    \n    resource_type = \"ContractContentDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.copyright = None\n        \"\"\" Publication Ownership.\n        Type `str`. \"\"\"\n        \n        self.publicationDate = None\n        \"\"\" When published.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.publicationStatus = None\n        \"\"\" amended | appended | cancelled | disputed | entered-in-error |\n        executable | executed | negotiable | offered | policy | rejected |\n        renewed | revoked | resolved | terminated.\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Publisher Entity.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subType = None\n        \"\"\" Detailed Content Type Definition.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Content structure and use.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractContentDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractContentDefinition, self).elementProperties()\n        js.extend([\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"publicationDate\", \"publicationDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"publicationStatus\", \"publicationStatus\", str, False, None, True),\n            (\"publisher\", \"publisher\", fhirreference.FHIRReference, False, None, False),\n            (\"subType\", \"subType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass ContractFriendly(backboneelement.BackboneElement):\n    \"\"\" Contract Friendly Language.\n    \n    The \"patient friendly language\" versionof the Contract in whole or in\n    parts. \"Patient friendly language\" means the representation of the Contract\n    and Contract Provisions in a manner that is readily accessible and\n    understandable by a layperson in accordance with best practices for\n    communication styles that ensure that those agreeing to or signing the\n    Contract understand the roles, actions, obligations, responsibilities, and\n    implication of the agreement.\n    \"\"\"\n    \n    resource_type = \"ContractFriendly\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contentAttachment = None\n        \"\"\" Easily comprehended representation of this Contract.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentReference = None\n        \"\"\" Easily comprehended representation of this Contract.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractFriendly, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractFriendly, self).elementProperties()\n        js.extend([\n            (\"contentAttachment\", \"contentAttachment\", attachment.Attachment, False, \"content\", True),\n            (\"contentReference\", \"contentReference\", fhirreference.FHIRReference, False, \"content\", True),\n        ])\n        return js\n\n\nclass ContractLegal(backboneelement.BackboneElement):\n    \"\"\" Contract Legal Language.\n    \n    List of Legal expressions or representations of this Contract.\n    \"\"\"\n    \n    resource_type = \"ContractLegal\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contentAttachment = None\n        \"\"\" Contract Legal Text.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentReference = None\n        \"\"\" Contract Legal Text.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractLegal, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractLegal, self).elementProperties()\n        js.extend([\n            (\"contentAttachment\", \"contentAttachment\", attachment.Attachment, False, \"content\", True),\n            (\"contentReference\", \"contentReference\", fhirreference.FHIRReference, False, \"content\", True),\n        ])\n        return js\n\n\nclass ContractRule(backboneelement.BackboneElement):\n    \"\"\" Computable Contract Language.\n    \n    List of Computable Policy Rule Language Representations of this Contract.\n    \"\"\"\n    \n    resource_type = \"ContractRule\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contentAttachment = None\n        \"\"\" Computable Contract Rules.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.contentReference = None\n        \"\"\" Computable Contract Rules.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractRule, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractRule, self).elementProperties()\n        js.extend([\n            (\"contentAttachment\", \"contentAttachment\", attachment.Attachment, False, \"content\", True),\n            (\"contentReference\", \"contentReference\", fhirreference.FHIRReference, False, \"content\", True),\n        ])\n        return js\n\n\nclass ContractSigner(backboneelement.BackboneElement):\n    \"\"\" Contract Signatory.\n    \n    Parties with legal standing in the Contract, including the principal\n    parties, the grantor(s) and grantee(s), which are any person or\n    organization bound by the contract, and any ancillary parties, which\n    facilitate the execution of the contract such as a notary or witness.\n    \"\"\"\n    \n    resource_type = \"ContractSigner\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.party = None\n        \"\"\" Contract Signatory Party.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.signature = None\n        \"\"\" Contract Documentation Signature.\n        List of `Signature` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Contract Signatory Role.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractSigner, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractSigner, self).elementProperties()\n        js.extend([\n            (\"party\", \"party\", fhirreference.FHIRReference, False, None, True),\n            (\"signature\", \"signature\", signature.Signature, True, None, True),\n            (\"type\", \"type\", coding.Coding, False, None, True),\n        ])\n        return js\n\n\nclass ContractTerm(backboneelement.BackboneElement):\n    \"\"\" Contract Term List.\n    \n    One or more Contract Provisions, which may be related and conveyed as a\n    group, and may contain nested groups.\n    \"\"\"\n    \n    resource_type = \"ContractTerm\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Entity being ascribed responsibility.\n        List of `ContractTermAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.applies = None\n        \"\"\" Contract Term Effective Time.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.asset = None\n        \"\"\" Contract Term Asset List.\n        List of `ContractTermAsset` items (represented as `dict` in JSON). \"\"\"\n        \n        self.group = None\n        \"\"\" Nested Contract Term Group.\n        List of `ContractTerm` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Contract Term Number.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.issued = None\n        \"\"\" Contract Term Issue Date Time.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.offer = None\n        \"\"\" Context of the Contract term.\n        Type `ContractTermOffer` (represented as `dict` in JSON). \"\"\"\n        \n        self.securityLabel = None\n        \"\"\" Protection for the Term.\n        List of `ContractTermSecurityLabel` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subType = None\n        \"\"\" Contract Term Type specific classification.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Term Statement.\n        Type `str`. \"\"\"\n        \n        self.topicCodeableConcept = None\n        \"\"\" Term Concern.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.topicReference = None\n        \"\"\" Term Concern.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Contract Term Type or Form.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTerm, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTerm, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", ContractTermAction, True, None, False),\n            (\"applies\", \"applies\", period.Period, False, None, False),\n            (\"asset\", \"asset\", ContractTermAsset, True, None, False),\n            (\"group\", \"group\", ContractTerm, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"issued\", \"issued\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"offer\", \"offer\", ContractTermOffer, False, None, True),\n            (\"securityLabel\", \"securityLabel\", ContractTermSecurityLabel, True, None, False),\n            (\"subType\", \"subType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"text\", \"text\", str, False, None, False),\n            (\"topicCodeableConcept\", \"topicCodeableConcept\", codeableconcept.CodeableConcept, False, \"topic\", False),\n            (\"topicReference\", \"topicReference\", fhirreference.FHIRReference, False, \"topic\", False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ContractTermAction(backboneelement.BackboneElement):\n    \"\"\" Entity being ascribed responsibility.\n    \n    An actor taking a role in an activity for which it can be assigned some\n    degree of responsibility for the activity taking place.\n    \"\"\"\n    \n    resource_type = \"ContractTermAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.context = None\n        \"\"\" Episode associated with action.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.contextLinkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.doNotPerform = None\n        \"\"\" True if the term prohibits the  action.\n        Type `bool`. \"\"\"\n        \n        self.intent = None\n        \"\"\" Purpose for the Contract Term Action.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.note = None\n        \"\"\" Comments about the action.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceDateTime = None\n        \"\"\" When action happens.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.occurrencePeriod = None\n        \"\"\" When action happens.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.occurrenceTiming = None\n        \"\"\" When action happens.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.performer = None\n        \"\"\" Actor that wil execute (or not) the action.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.performerLinkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.performerRole = None\n        \"\"\" Competency of the performer.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.performerType = None\n        \"\"\" Kind of service performer.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Why action is to be performed.\n        List of `str` items. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why is action (not) needed?.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonLinkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why is action (not) needed?.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requester = None\n        \"\"\" Who asked for action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requesterLinkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.securityLabelNumber = None\n        \"\"\" Action restriction numbers.\n        List of `int` items. \"\"\"\n        \n        self.status = None\n        \"\"\" State of the action.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" Entity of the action.\n        List of `ContractTermActionSubject` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type or form of the action.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermAction, self).elementProperties()\n        js.extend([\n            (\"context\", \"context\", fhirreference.FHIRReference, False, None, False),\n            (\"contextLinkId\", \"contextLinkId\", str, True, None, False),\n            (\"doNotPerform\", \"doNotPerform\", bool, False, None, False),\n            (\"intent\", \"intent\", codeableconcept.CodeableConcept, False, None, True),\n            (\"linkId\", \"linkId\", str, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"occurrenceDateTime\", \"occurrenceDateTime\", fhirdatetime.FHIRDateTime, False, \"occurrence\", False),\n            (\"occurrencePeriod\", \"occurrencePeriod\", period.Period, False, \"occurrence\", False),\n            (\"occurrenceTiming\", \"occurrenceTiming\", timing.Timing, False, \"occurrence\", False),\n            (\"performer\", \"performer\", fhirreference.FHIRReference, False, None, False),\n            (\"performerLinkId\", \"performerLinkId\", str, True, None, False),\n            (\"performerRole\", \"performerRole\", codeableconcept.CodeableConcept, False, None, False),\n            (\"performerType\", \"performerType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reason\", \"reason\", str, True, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonLinkId\", \"reasonLinkId\", str, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"requester\", \"requester\", fhirreference.FHIRReference, True, None, False),\n            (\"requesterLinkId\", \"requesterLinkId\", str, True, None, False),\n            (\"securityLabelNumber\", \"securityLabelNumber\", int, True, None, False),\n            (\"status\", \"status\", codeableconcept.CodeableConcept, False, None, True),\n            (\"subject\", \"subject\", ContractTermActionSubject, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass ContractTermActionSubject(backboneelement.BackboneElement):\n    \"\"\" Entity of the action.\n    \"\"\"\n    \n    resource_type = \"ContractTermActionSubject\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.reference = None\n        \"\"\" Entity of the action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.role = None\n        \"\"\" Role type of the agent.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermActionSubject, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermActionSubject, self).elementProperties()\n        js.extend([\n            (\"reference\", \"reference\", fhirreference.FHIRReference, True, None, True),\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ContractTermAsset(backboneelement.BackboneElement):\n    \"\"\" Contract Term Asset List.\n    \"\"\"\n    \n    resource_type = \"ContractTermAsset\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.answer = None\n        \"\"\" Response to assets.\n        List of `ContractTermOfferAnswer` items (represented as `dict` in JSON). \"\"\"\n        \n        self.condition = None\n        \"\"\" Quality desctiption of asset.\n        Type `str`. \"\"\"\n        \n        self.context = None\n        \"\"\" Circumstance of the asset.\n        List of `ContractTermAssetContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Pointer to asset text.\n        List of `str` items. \"\"\"\n        \n        self.period = None\n        \"\"\" Time period of the asset.\n        List of `Period` items (represented as `dict` in JSON). \"\"\"\n        \n        self.periodType = None\n        \"\"\" Asset availability types.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" Kinship of the asset.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.scope = None\n        \"\"\" Range of asset.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.securityLabelNumber = None\n        \"\"\" Asset restriction numbers.\n        List of `int` items. \"\"\"\n        \n        self.subtype = None\n        \"\"\" Asset sub-category.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Asset clause or question text.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Asset category.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.typeReference = None\n        \"\"\" Associated entities.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.usePeriod = None\n        \"\"\" Time period.\n        List of `Period` items (represented as `dict` in JSON). \"\"\"\n        \n        self.valuedItem = None\n        \"\"\" Contract Valued Item List.\n        List of `ContractTermAssetValuedItem` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermAsset, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermAsset, self).elementProperties()\n        js.extend([\n            (\"answer\", \"answer\", ContractTermOfferAnswer, True, None, False),\n            (\"condition\", \"condition\", str, False, None, False),\n            (\"context\", \"context\", ContractTermAssetContext, True, None, False),\n            (\"linkId\", \"linkId\", str, True, None, False),\n            (\"period\", \"period\", period.Period, True, None, False),\n            (\"periodType\", \"periodType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"relationship\", \"relationship\", coding.Coding, False, None, False),\n            (\"scope\", \"scope\", codeableconcept.CodeableConcept, False, None, False),\n            (\"securityLabelNumber\", \"securityLabelNumber\", int, True, None, False),\n            (\"subtype\", \"subtype\", codeableconcept.CodeableConcept, True, None, False),\n            (\"text\", \"text\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n            (\"typeReference\", \"typeReference\", fhirreference.FHIRReference, True, None, False),\n            (\"usePeriod\", \"usePeriod\", period.Period, True, None, False),\n            (\"valuedItem\", \"valuedItem\", ContractTermAssetValuedItem, True, None, False),\n        ])\n        return js\n\n\nclass ContractTermAssetContext(backboneelement.BackboneElement):\n    \"\"\" Circumstance of the asset.\n    \"\"\"\n    \n    resource_type = \"ContractTermAssetContext\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Codeable asset context.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reference = None\n        \"\"\" Creator,custodian or owner.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Context description.\n        Type `str`. \"\"\"\n        \n        super(ContractTermAssetContext, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermAssetContext, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reference\", \"reference\", fhirreference.FHIRReference, False, None, False),\n            (\"text\", \"text\", str, False, None, False),\n        ])\n        return js\n\n\nclass ContractTermAssetValuedItem(backboneelement.BackboneElement):\n    \"\"\" Contract Valued Item List.\n    \"\"\"\n    \n    resource_type = \"ContractTermAssetValuedItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.effectiveTime = None\n        \"\"\" Contract Valued Item Effective Tiem.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.entityCodeableConcept = None\n        \"\"\" Contract Valued Item Type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.entityReference = None\n        \"\"\" Contract Valued Item Type.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Contract Valued Item Price Scaling Factor.\n        Type `float`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Contract Valued Item Number.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Pointer to specific item.\n        List of `str` items. \"\"\"\n        \n        self.net = None\n        \"\"\" Total Contract Valued Item Value.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.payment = None\n        \"\"\" Terms of valuation.\n        Type `str`. \"\"\"\n        \n        self.paymentDate = None\n        \"\"\" When payment is due.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.points = None\n        \"\"\" Contract Valued Item Difficulty Scaling Factor.\n        Type `float`. \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of Contract Valued Items.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.recipient = None\n        \"\"\" Who will receive payment.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.responsible = None\n        \"\"\" Who will make payment.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.securityLabelNumber = None\n        \"\"\" Security Labels that define affected terms.\n        List of `int` items. \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Contract Valued Item fee, charge, or cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermAssetValuedItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermAssetValuedItem, self).elementProperties()\n        js.extend([\n            (\"effectiveTime\", \"effectiveTime\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"entityCodeableConcept\", \"entityCodeableConcept\", codeableconcept.CodeableConcept, False, \"entity\", False),\n            (\"entityReference\", \"entityReference\", fhirreference.FHIRReference, False, \"entity\", False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"linkId\", \"linkId\", str, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"payment\", \"payment\", str, False, None, False),\n            (\"paymentDate\", \"paymentDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"points\", \"points\", float, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"recipient\", \"recipient\", fhirreference.FHIRReference, False, None, False),\n            (\"responsible\", \"responsible\", fhirreference.FHIRReference, False, None, False),\n            (\"securityLabelNumber\", \"securityLabelNumber\", int, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ContractTermOffer(backboneelement.BackboneElement):\n    \"\"\" Context of the Contract term.\n    \n    The matter of concern in the context of this provision of the agrement.\n    \"\"\"\n    \n    resource_type = \"ContractTermOffer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.answer = None\n        \"\"\" Response to offer text.\n        List of `ContractTermOfferAnswer` items (represented as `dict` in JSON). \"\"\"\n        \n        self.decision = None\n        \"\"\" Accepting party choice.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.decisionMode = None\n        \"\"\" How decision is conveyed.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Offer business ID.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Pointer to text.\n        List of `str` items. \"\"\"\n        \n        self.party = None\n        \"\"\" Offer Recipient.\n        List of `ContractTermOfferParty` items (represented as `dict` in JSON). \"\"\"\n        \n        self.securityLabelNumber = None\n        \"\"\" Offer restriction numbers.\n        List of `int` items. \"\"\"\n        \n        self.text = None\n        \"\"\" Human readable offer text.\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" Negotiable offer asset.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Contract Offer Type or Form.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermOffer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermOffer, self).elementProperties()\n        js.extend([\n            (\"answer\", \"answer\", ContractTermOfferAnswer, True, None, False),\n            (\"decision\", \"decision\", codeableconcept.CodeableConcept, False, None, False),\n            (\"decisionMode\", \"decisionMode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"linkId\", \"linkId\", str, True, None, False),\n            (\"party\", \"party\", ContractTermOfferParty, True, None, False),\n            (\"securityLabelNumber\", \"securityLabelNumber\", int, True, None, False),\n            (\"text\", \"text\", str, False, None, False),\n            (\"topic\", \"topic\", fhirreference.FHIRReference, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass ContractTermOfferAnswer(backboneelement.BackboneElement):\n    \"\"\" Response to offer text.\n    \"\"\"\n    \n    resource_type = \"ContractTermOfferAnswer\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" The actual answer response.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" The actual answer response.\n        Type `bool`. \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" The actual answer response.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" The actual answer response.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" The actual answer response.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" The actual answer response.\n        Type `float`. \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" The actual answer response.\n        Type `int`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" The actual answer response.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" The actual answer response.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" The actual answer response.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" The actual answer response.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueUri = None\n        \"\"\" The actual answer response.\n        Type `str`. \"\"\"\n        \n        super(ContractTermOfferAnswer, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermOfferAnswer, self).elementProperties()\n        js.extend([\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", True),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", True),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", True),\n            (\"valueUri\", \"valueUri\", str, False, \"value\", True),\n        ])\n        return js\n\n\nclass ContractTermOfferParty(backboneelement.BackboneElement):\n    \"\"\" Offer Recipient.\n    \"\"\"\n    \n    resource_type = \"ContractTermOfferParty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.reference = None\n        \"\"\" Referenced entity.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.role = None\n        \"\"\" Participant engagement type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ContractTermOfferParty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermOfferParty, self).elementProperties()\n        js.extend([\n            (\"reference\", \"reference\", fhirreference.FHIRReference, True, None, True),\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass ContractTermSecurityLabel(backboneelement.BackboneElement):\n    \"\"\" Protection for the Term.\n    \n    Security labels that protect the handling of information about the term and\n    its elements, which may be specifically identified..\n    \"\"\"\n    \n    resource_type = \"ContractTermSecurityLabel\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.category = None\n        \"\"\" Applicable Policy.\n        List of `Coding` items (represented as `dict` in JSON). \"\"\"\n        \n        self.classification = None\n        \"\"\" Confidentiality Protection.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.control = None\n        \"\"\" Handling Instructions.\n        List of `Coding` items (represented as `dict` in JSON). \"\"\"\n        \n        self.number = None\n        \"\"\" Link to Security Labels.\n        List of `int` items. \"\"\"\n        \n        super(ContractTermSecurityLabel, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ContractTermSecurityLabel, self).elementProperties()\n        js.extend([\n            (\"category\", \"category\", coding.Coding, True, None, False),\n            (\"classification\", \"classification\", coding.Coding, False, None, True),\n            (\"control\", \"control\", coding.Coding, True, None, False),\n            (\"number\", \"number\", int, True, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\nfrom . import signature\nfrom . import timing\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a JSON value (stored in the attribute `origval`), that value is returned. If no such original value exists, the method will return the standardized ISO 8601 representation of the date (accessible via the `isostring` property). \n\nThis method interacts with the `origval` attribute, which is set during initialization, and the `isostring` property, which converts the `date` attribute into an ISO format string. There are no additional constants defined or used within this method.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a JSON value (stored in the attribute `origval`), that value is returned. If no such original value exists, the method will return the standardized ISO 8601 representation of the date (accessible via the `isostring` property). \n\nThis method interacts with the `origval` attribute, which is set during initialization, and the `isostring` property, which converts the `date` attribute into an ISO format string. There are no additional constants defined or used within this method.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirinstant.py": {
      "FHIRInstant.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a new instance of the FHIRInstant class, which is a convenience wrapper for handling FHIR instant datetimes.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR instant datetime in ISO 8601 format. Default is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the parsed datetime corresponding to the provided jsonval. Initialized to None.\n\nThis constructor calls the parent class (FHIRDate) initializer, which is responsible for parsing the jsonval and setting up necessary attributes from the FHIRDate class. Notably, the FHIRDate class handles the interpretation of the FHIR instant format, while this class maintains compatibility with existing code that utilizes FHIRDate.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes a new instance of the FHIRInstant class, which is a convenience wrapper for handling FHIR instant datetimes.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR instant datetime in ISO 8601 format. Default is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the parsed datetime corresponding to the provided jsonval. Initialized to None.\n\nThis constructor calls the parent class (FHIRDate) initializer, which is responsible for parsing the jsonval and setting up necessary attributes from the FHIRDate class. Notably, the FHIRDate class handles the interpretation of the FHIR instant format, while this class maintains compatibility with existing code that utilizes FHIRDate.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRInstant(FHIRDate):"
      }
    },
    "fhirclient/models/contract.py": {
      "Contract.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a Contract instance, representing a legally enforceable agreement with various properties, as defined by the FHIR (Fast Healthcare Interoperability Resources) specification.\n\n    Parameters:\n    - jsondict (dict, optional): A JSON dictionary to initialize the properties of the Contract. If provided, should conform to the expected structure outlined by FHIR.\n    - strict (bool, optional): If True (default), any invalid properties will raise a TypeError during initialization.\n\n    Attributes:\n    - alias: Short name or acronym for the Contract.\n    - applies: Effective time represented as a Period.\n    - author: Source of the Contract, referenced as a FHIRReference.\n    - authority: Governing authority under which the Contract is established, as a list of FHIRReference items.\n    - contentDefinition: Precursor content related to the Contract.\n    - contentDerivative: Content derived from foundational information, represented as a CodeableConcept.\n    - domain: Sphere of control, as a list of FHIRReference items.\n    - expirationType: Reason for Contract cessation, as a CodeableConcept.\n    - friendly: Client-friendly language version of the Contract.\n    - identifier: Unique identifier for the Contract as a list of Identifier items.\n    - instantiatesCanonical: References a source Contract Definition.\n    - instantiatesUri: External reference to a Contract Definition as a string.\n    - issued: Issuance date of the Contract.\n    - legal: Legal language used in the Contract.\n    - legalState: Negotiation status as a CodeableConcept.\n    - legallyBindingAttachment: Document that binds the Contract.\n    - legallyBindingReference: Reference to the binding Contract.\n    - name: Computer-friendly designation.\n    - relevantHistory: Key events in the Contract's history as a list of FHIRReference items.\n    - rule: Computable language rules for the Contract.\n    - scope: Area of legal concern as a CodeableConcept.\n    - signer: Signatories to the Contract.\n    - site: Specific location related to the Contract.\n    - status: Current status of the Contract as a string.\n    - subType: Subtype classification as a list of CodeableConcept items.\n    - subject: Target entities involved in the Contract as a list of FHIRReference items.\n    - subtitle: Subordinate friendly name for the Contract.\n    - supportingInfo: Additional information supporting the Contract.\n    - term: List of terms defined in the Contract.\n    - title: Human-friendly title of the Contract.\n    - topicCodeableConcept: Topic of interest related to the Contract.\n    - topicReference: Reference to the topic of interest.\n    - type: Legal instrument classification as a CodeableConcept.\n    - url: Basal definition reference as a string.\n    - version: Version of the Business edition.\n\n    This method leverages the parent class's (__init__) initializer to ensure core properties are set properly, facilitating adherence to FHIR standards for contract representation and usage.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.alias = None\n        ' Acronym or short name.\\n        List of `str` items. '\n        self.applies = None\n        ' Effective time.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.author = None\n        ' Source of Contract.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.authority = None\n        ' Authority under which this Contract has standing.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.contentDefinition = None\n        ' Contract precursor content.\\n        Type `ContractContentDefinition` (represented as `dict` in JSON). '\n        self.contentDerivative = None\n        ' Content derived from the basal information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.domain = None\n        ' A sphere of control governed by an authoritative jurisdiction,\\n        organization, or person.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.expirationType = None\n        ' Contract cessation cause.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.friendly = None\n        ' Contract Friendly Language.\\n        List of `ContractFriendly` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Contract number.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Source Contract Definition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.instantiatesUri = None\n        ' External Contract Definition.\\n        Type `str`. '\n        self.issued = None\n        ' When this Contract was issued.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.legal = None\n        ' Contract Legal Language.\\n        List of `ContractLegal` items (represented as `dict` in JSON). '\n        self.legalState = None\n        ' Negotiation status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.legallyBindingAttachment = None\n        ' Binding Contract.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.legallyBindingReference = None\n        ' Binding Contract.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.name = None\n        ' Computer friendly designation.\\n        Type `str`. '\n        self.relevantHistory = None\n        ' Key event in Contract History.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.rule = None\n        ' Computable Contract Language.\\n        List of `ContractRule` items (represented as `dict` in JSON). '\n        self.scope = None\n        ' Range of Legal Concerns.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.signer = None\n        ' Contract Signatory.\\n        List of `ContractSigner` items (represented as `dict` in JSON). '\n        self.site = None\n        ' Specific Location.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' amended | appended | cancelled | disputed | entered-in-error |\\n        executable | executed | negotiable | offered | policy | rejected |\\n        renewed | revoked | resolved | terminated.\\n        Type `str`. '\n        self.subType = None\n        ' Subtype within the context of type.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.subject = None\n        ' Contract Target Entity.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate Friendly name.\\n        Type `str`. '\n        self.supportingInfo = None\n        ' Extra Information.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.term = None\n        ' Contract Term List.\\n        List of `ContractTerm` items (represented as `dict` in JSON). '\n        self.title = None\n        ' Human Friendly name.\\n        Type `str`. '\n        self.topicCodeableConcept = None\n        ' Focus of contract interest.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.topicReference = None\n        ' Focus of contract interest.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' Legal instrument category.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.url = None\n        ' Basal definition.\\n        Type `str`. '\n        self.version = None\n        ' Business edition.\\n        Type `str`. '\n        super(Contract, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a Contract instance, representing a legally enforceable agreement with various properties, as defined by the FHIR (Fast Healthcare Interoperability Resources) specification.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the properties of the Contract. If provided, should conform to the expected structure outlined by FHIR.\n- strict (bool, optional): If True (default), any invalid properties will raise a TypeError during initialization.\n\nAttributes:\n- alias: Short name or acronym for the Contract.\n- applies: Effective time represented as a Period.\n- author: Source of the Contract, referenced as a FHIRReference.\n- authority: Governing authority under which the Contract is established, as a list of FHIRReference items.\n- contentDefinition: Precursor content related to the Contract.\n- contentDerivative: Content derived from foundational information, represented as a CodeableConcept.\n- domain: Sphere of control, as a list of FHIRReference items.\n- expirationType: Reason for Contract cessation, as a CodeableConcept.\n- friendly: Client-friendly language version of the Contract.\n- identifier: Unique identifier for the Contract as a list of Identifier items.\n- instantiatesCanonical: References a source Contract Definition.\n- instantiatesUri: External reference to a Contract Definition as a string.\n- issued: Issuance date of the Contract.\n- legal: Legal language used in the Contract.\n- legalState: Negotiation status as a CodeableConcept.\n- legallyBindingAttachment: Document that binds the Contract.\n- legallyBindingReference: Reference to the binding Contract.\n- name: Computer-friendly designation.\n- relevantHistory: Key events in the Contract's history as a list of FHIRReference items.\n- rule: Computable language rules for the Contract.\n- scope: Area of legal concern as a CodeableConcept.\n- signer: Signatories to the Contract.\n- site: Specific location related to the Contract.\n- status: Current status of the Contract as a string.\n- subType: Subtype classification as a list of CodeableConcept items.\n- subject: Target entities involved in the Contract as a list of FHIRReference items.\n- subtitle: Subordinate friendly name for the Contract.\n- supportingInfo: Additional information supporting the Contract.\n- term: List of terms defined in the Contract.\n- title: Human-friendly title of the Contract.\n- topicCodeableConcept: Topic of interest related to the Contract.\n- topicReference: Reference to the topic of interest.\n- type: Legal instrument classification as a CodeableConcept.\n- url: Basal definition reference as a string.\n- version: Version of the Business edition.\n\nThis method leverages the parent class's (__init__) initializer to ensure core properties are set properly, facilitating adherence to FHIR standards for contract representation and usage.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Contract(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. This value is passed to the superclass (FHIRDate) during initialization for further processing.\n\nReturns:\n- None: This is a constructor method that initializes the instance without returning a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that will hold the converted FHIR datetime value. Initially set to None.\n\nThis constructor utilizes the superclass's initializer to handle the provided jsonval while setting up the instance's datetime attribute.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. This value is passed to the superclass (FHIRDate) during initialization for further processing.\n\nReturns:\n- None: This is a constructor method that initializes the instance without returning a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that will hold the converted FHIR datetime value. Initially set to None.\n\nThis constructor utilizes the superclass's initializer to handle the provided jsonval while setting up the instance's datetime attribute.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the as_json method from the superclass, adding the resourceType attribute to the JSON representation. The resourceType is defined as a class attribute, indicating the specific type of FHIR resource represented by this instance.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, including the resourceType.\n\nDependencies:\n    - Calls the superclass's as_json method to obtain the base JSON structure.\n    - Interacts with the class attribute resource_type to ensure that the output contains the correct resource type.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the as_json method from the superclass, adding the resourceType attribute to the JSON representation. The resourceType is defined as a class attribute, indicating the specific type of FHIR resource represented by this instance.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, including the resourceType.\n\nDependencies:\n    - Calls the superclass's as_json method to obtain the base JSON structure.\n    - Interacts with the class attribute resource_type to ensure that the output contains the correct resource type.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/contract.py:Contract:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/contract_test.py:ContractTests:testContract1": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:instantiate_from": {
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract2": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract3": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract4": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract5": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract6": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract6": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract7": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract7": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/contract_test.py:ContractTests:testContract8": {
      "tests/models/contract_test.py:ContractTests:instantiate_from": {
        "fhirclient/models/contract.py:Contract:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/contract.py:Contract:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/contract_test.py:ContractTests:implContract8": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirinstant.py:FHIRInstant:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirinstant.py:FHIRInstant:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/contract.py:Contract:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/contract.py:Contract:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/contract.py:Contract:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-contract_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 contract.py\n        \u2502   \u2514\u2500\u2500 Contract.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 fhirinstant.py\n            \u2514\u2500\u2500 FHIRInstant.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for validating, parsing, and testing FHIR Contract resources based on the FHIR 4.0.1 standard. It enables detailed verification of various aspects of Contract data, including metadata, terms, issuance details, subtypes, and associated legal and consumer-friendly descriptions. It ensures compliance with FHIR's structure and semantics by supporting serialization and deserialization of Contract resources and validating critical attributes such as dates, identifiers, codes, and terms. This module addresses the need for ensuring data integrity and interoperability in healthcare applications using FHIR Contract resources, facilitating developers' ability to create, validate, and manage contract-related data in complex systems.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate. If the instance was initialized with a JSON value (stored in the attribute `origval`), that value is returned. If no such original value exists, the method will return the standardized ISO 8601 representation of the date (accessible via the `isostring` property). \n\nThis method interacts with the `origval` attribute, which is set during initialization, and the `isostring` property, which converts the `date` attribute into an ISO format string. There are no additional constants defined or used within this method.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirinstant.py\n\n- CLASS METHOD: FHIRInstant.__init__\n  - CLASS SIGNATURE: class FHIRInstant(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the FHIRInstant class, which is a convenience wrapper for handling FHIR instant datetimes.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representation of a FHIR instant datetime in ISO 8601 format. Default is None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores the parsed datetime corresponding to the provided jsonval. Initialized to None.\n\nThis constructor calls the parent class (FHIRDate) initializer, which is responsible for parsing the jsonval and setting up necessary attributes from the FHIRDate class. Notably, the FHIRDate class handles the interpretation of the FHIR instant format, while this class maintains compatibility with existing code that utilizes FHIRDate.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/contract.py\n\n- CLASS METHOD: Contract.__init__\n  - CLASS SIGNATURE: class Contract(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a Contract instance, representing a legally enforceable agreement with various properties, as defined by the FHIR (Fast Healthcare Interoperability Resources) specification.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the properties of the Contract. If provided, should conform to the expected structure outlined by FHIR.\n- strict (bool, optional): If True (default), any invalid properties will raise a TypeError during initialization.\n\nAttributes:\n- alias: Short name or acronym for the Contract.\n- applies: Effective time represented as a Period.\n- author: Source of the Contract, referenced as a FHIRReference.\n- authority: Governing authority under which the Contract is established, as a list of FHIRReference items.\n- contentDefinition: Precursor content related to the Contract.\n- contentDerivative: Content derived from foundational information, represented as a CodeableConcept.\n- domain: Sphere of control, as a list of FHIRReference items.\n- expirationType: Reason for Contract cessation, as a CodeableConcept.\n- friendly: Client-friendly language version of the Contract.\n- identifier: Unique identifier for the Contract as a list of Identifier items.\n- instantiatesCanonical: References a source Contract Definition.\n- instantiatesUri: External reference to a Contract Definition as a string.\n- issued: Issuance date of the Contract.\n- legal: Legal language used in the Contract.\n- legalState: Negotiation status as a CodeableConcept.\n- legallyBindingAttachment: Document that binds the Contract.\n- legallyBindingReference: Reference to the binding Contract.\n- name: Computer-friendly designation.\n- relevantHistory: Key events in the Contract's history as a list of FHIRReference items.\n- rule: Computable language rules for the Contract.\n- scope: Area of legal concern as a CodeableConcept.\n- signer: Signatories to the Contract.\n- site: Specific location related to the Contract.\n- status: Current status of the Contract as a string.\n- subType: Subtype classification as a list of CodeableConcept items.\n- subject: Target entities involved in the Contract as a list of FHIRReference items.\n- subtitle: Subordinate friendly name for the Contract.\n- supportingInfo: Additional information supporting the Contract.\n- term: List of terms defined in the Contract.\n- title: Human-friendly title of the Contract.\n- topicCodeableConcept: Topic of interest related to the Contract.\n- topicReference: Reference to the topic of interest.\n- type: Legal instrument classification as a CodeableConcept.\n- url: Basal definition reference as a string.\n- version: Version of the Business edition.\n\nThis method leverages the parent class's (__init__) initializer to ensure core properties are set properly, facilitating adherence to FHIR standards for contract representation and usage.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime or None. This value is passed to the superclass (FHIRDate) during initialization for further processing.\n\nReturns:\n- None: This is a constructor method that initializes the instance without returning a value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that will hold the converted FHIR datetime value. Initially set to None.\n\nThis constructor utilizes the superclass's initializer to handle the provided jsonval while setting up the instance's datetime attribute.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the as_json method from the superclass, adding the resourceType attribute to the JSON representation. The resourceType is defined as a class attribute, indicating the specific type of FHIR resource represented by this instance.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, including the resourceType.\n\nDependencies:\n    - Calls the superclass's as_json method to obtain the base JSON structure.\n    - Interacts with the class attribute resource_type to ensure that the output contains the correct resource type.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirinstant.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRInstant(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR instants in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#instant\n\n    Converting to a Python representation does require some compromises:\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (aware only)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/contract.py": "from . import domainresource\n\nclass Contract(domainresource.DomainResource):\n    \"\"\" Legal Agreement.\n    \n    Legally enforceable, formally recorded unilateral or bilateral directive\n    i.e., a policy or agreement.\n    \"\"\"\n    resource_type = 'Contract'\n\n    def elementProperties(self):\n        js = super(Contract, self).elementProperties()\n        js.extend([('alias', 'alias', str, True, None, False), ('applies', 'applies', period.Period, False, None, False), ('author', 'author', fhirreference.FHIRReference, False, None, False), ('authority', 'authority', fhirreference.FHIRReference, True, None, False), ('contentDefinition', 'contentDefinition', ContractContentDefinition, False, None, False), ('contentDerivative', 'contentDerivative', codeableconcept.CodeableConcept, False, None, False), ('domain', 'domain', fhirreference.FHIRReference, True, None, False), ('expirationType', 'expirationType', codeableconcept.CodeableConcept, False, None, False), ('friendly', 'friendly', ContractFriendly, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', fhirreference.FHIRReference, False, None, False), ('instantiatesUri', 'instantiatesUri', str, False, None, False), ('issued', 'issued', fhirdatetime.FHIRDateTime, False, None, False), ('legal', 'legal', ContractLegal, True, None, False), ('legalState', 'legalState', codeableconcept.CodeableConcept, False, None, False), ('legallyBindingAttachment', 'legallyBindingAttachment', attachment.Attachment, False, 'legallyBinding', False), ('legallyBindingReference', 'legallyBindingReference', fhirreference.FHIRReference, False, 'legallyBinding', False), ('name', 'name', str, False, None, False), ('relevantHistory', 'relevantHistory', fhirreference.FHIRReference, True, None, False), ('rule', 'rule', ContractRule, True, None, False), ('scope', 'scope', codeableconcept.CodeableConcept, False, None, False), ('signer', 'signer', ContractSigner, True, None, False), ('site', 'site', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, False), ('subType', 'subType', codeableconcept.CodeableConcept, True, None, False), ('subject', 'subject', fhirreference.FHIRReference, True, None, False), ('subtitle', 'subtitle', str, False, None, False), ('supportingInfo', 'supportingInfo', fhirreference.FHIRReference, True, None, False), ('term', 'term', ContractTerm, True, None, False), ('title', 'title', str, False, None, False), ('topicCodeableConcept', 'topicCodeableConcept', codeableconcept.CodeableConcept, False, 'topic', False), ('topicReference', 'topicReference', fhirreference.FHIRReference, False, 'topic', False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('url', 'url', str, False, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ContractContentDefinition(backboneelement.BackboneElement):\n    \"\"\" Contract precursor content.\n    \n    Precusory content developed with a focus and intent of supporting the\n    formation a Contract instance, which may be associated with and\n    transformable into a Contract.\n    \"\"\"\n    resource_type = 'ContractContentDefinition'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.copyright = None\n        ' Publication Ownership.\\n        Type `str`. '\n        self.publicationDate = None\n        ' When published.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.publicationStatus = None\n        ' amended | appended | cancelled | disputed | entered-in-error |\\n        executable | executed | negotiable | offered | policy | rejected |\\n        renewed | revoked | resolved | terminated.\\n        Type `str`. '\n        self.publisher = None\n        ' Publisher Entity.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subType = None\n        ' Detailed Content Type Definition.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.type = None\n        ' Content structure and use.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractContentDefinition, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractContentDefinition, self).elementProperties()\n        js.extend([('copyright', 'copyright', str, False, None, False), ('publicationDate', 'publicationDate', fhirdatetime.FHIRDateTime, False, None, False), ('publicationStatus', 'publicationStatus', str, False, None, True), ('publisher', 'publisher', fhirreference.FHIRReference, False, None, False), ('subType', 'subType', codeableconcept.CodeableConcept, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass ContractFriendly(backboneelement.BackboneElement):\n    \"\"\" Contract Friendly Language.\n    \n    The \"patient friendly language\" versionof the Contract in whole or in\n    parts. \"Patient friendly language\" means the representation of the Contract\n    and Contract Provisions in a manner that is readily accessible and\n    understandable by a layperson in accordance with best practices for\n    communication styles that ensure that those agreeing to or signing the\n    Contract understand the roles, actions, obligations, responsibilities, and\n    implication of the agreement.\n    \"\"\"\n    resource_type = 'ContractFriendly'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.contentAttachment = None\n        ' Easily comprehended representation of this Contract.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.contentReference = None\n        ' Easily comprehended representation of this Contract.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ContractFriendly, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractFriendly, self).elementProperties()\n        js.extend([('contentAttachment', 'contentAttachment', attachment.Attachment, False, 'content', True), ('contentReference', 'contentReference', fhirreference.FHIRReference, False, 'content', True)])\n        return js\n\nclass ContractLegal(backboneelement.BackboneElement):\n    \"\"\" Contract Legal Language.\n    \n    List of Legal expressions or representations of this Contract.\n    \"\"\"\n    resource_type = 'ContractLegal'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.contentAttachment = None\n        ' Contract Legal Text.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.contentReference = None\n        ' Contract Legal Text.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ContractLegal, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractLegal, self).elementProperties()\n        js.extend([('contentAttachment', 'contentAttachment', attachment.Attachment, False, 'content', True), ('contentReference', 'contentReference', fhirreference.FHIRReference, False, 'content', True)])\n        return js\n\nclass ContractRule(backboneelement.BackboneElement):\n    \"\"\" Computable Contract Language.\n    \n    List of Computable Policy Rule Language Representations of this Contract.\n    \"\"\"\n    resource_type = 'ContractRule'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.contentAttachment = None\n        ' Computable Contract Rules.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.contentReference = None\n        ' Computable Contract Rules.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ContractRule, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractRule, self).elementProperties()\n        js.extend([('contentAttachment', 'contentAttachment', attachment.Attachment, False, 'content', True), ('contentReference', 'contentReference', fhirreference.FHIRReference, False, 'content', True)])\n        return js\n\nclass ContractSigner(backboneelement.BackboneElement):\n    \"\"\" Contract Signatory.\n    \n    Parties with legal standing in the Contract, including the principal\n    parties, the grantor(s) and grantee(s), which are any person or\n    organization bound by the contract, and any ancillary parties, which\n    facilitate the execution of the contract such as a notary or witness.\n    \"\"\"\n    resource_type = 'ContractSigner'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.party = None\n        ' Contract Signatory Party.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.signature = None\n        ' Contract Documentation Signature.\\n        List of `Signature` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Contract Signatory Role.\\n        Type `Coding` (represented as `dict` in JSON). '\n        super(ContractSigner, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractSigner, self).elementProperties()\n        js.extend([('party', 'party', fhirreference.FHIRReference, False, None, True), ('signature', 'signature', signature.Signature, True, None, True), ('type', 'type', coding.Coding, False, None, True)])\n        return js\n\nclass ContractTerm(backboneelement.BackboneElement):\n    \"\"\" Contract Term List.\n    \n    One or more Contract Provisions, which may be related and conveyed as a\n    group, and may contain nested groups.\n    \"\"\"\n    resource_type = 'ContractTerm'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' Entity being ascribed responsibility.\\n        List of `ContractTermAction` items (represented as `dict` in JSON). '\n        self.applies = None\n        ' Contract Term Effective Time.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.asset = None\n        ' Contract Term Asset List.\\n        List of `ContractTermAsset` items (represented as `dict` in JSON). '\n        self.group = None\n        ' Nested Contract Term Group.\\n        List of `ContractTerm` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Contract Term Number.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.issued = None\n        ' Contract Term Issue Date Time.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.offer = None\n        ' Context of the Contract term.\\n        Type `ContractTermOffer` (represented as `dict` in JSON). '\n        self.securityLabel = None\n        ' Protection for the Term.\\n        List of `ContractTermSecurityLabel` items (represented as `dict` in JSON). '\n        self.subType = None\n        ' Contract Term Type specific classification.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.text = None\n        ' Term Statement.\\n        Type `str`. '\n        self.topicCodeableConcept = None\n        ' Term Concern.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.topicReference = None\n        ' Term Concern.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' Contract Term Type or Form.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractTerm, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTerm, self).elementProperties()\n        js.extend([('action', 'action', ContractTermAction, True, None, False), ('applies', 'applies', period.Period, False, None, False), ('asset', 'asset', ContractTermAsset, True, None, False), ('group', 'group', ContractTerm, True, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('issued', 'issued', fhirdatetime.FHIRDateTime, False, None, False), ('offer', 'offer', ContractTermOffer, False, None, True), ('securityLabel', 'securityLabel', ContractTermSecurityLabel, True, None, False), ('subType', 'subType', codeableconcept.CodeableConcept, False, None, False), ('text', 'text', str, False, None, False), ('topicCodeableConcept', 'topicCodeableConcept', codeableconcept.CodeableConcept, False, 'topic', False), ('topicReference', 'topicReference', fhirreference.FHIRReference, False, 'topic', False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ContractTermAction(backboneelement.BackboneElement):\n    \"\"\" Entity being ascribed responsibility.\n    \n    An actor taking a role in an activity for which it can be assigned some\n    degree of responsibility for the activity taking place.\n    \"\"\"\n    resource_type = 'ContractTermAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.context = None\n        ' Episode associated with action.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.contextLinkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.doNotPerform = None\n        ' True if the term prohibits the  action.\\n        Type `bool`. '\n        self.intent = None\n        ' Purpose for the Contract Term Action.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.note = None\n        ' Comments about the action.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.occurrenceDateTime = None\n        ' When action happens.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.occurrencePeriod = None\n        ' When action happens.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.occurrenceTiming = None\n        ' When action happens.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.performer = None\n        ' Actor that wil execute (or not) the action.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.performerLinkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.performerRole = None\n        ' Competency of the performer.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.performerType = None\n        ' Kind of service performer.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reason = None\n        ' Why action is to be performed.\\n        List of `str` items. '\n        self.reasonCode = None\n        ' Why is action (not) needed?.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonLinkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.reasonReference = None\n        ' Why is action (not) needed?.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.requester = None\n        ' Who asked for action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.requesterLinkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.securityLabelNumber = None\n        ' Action restriction numbers.\\n        List of `int` items. '\n        self.status = None\n        ' State of the action.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subject = None\n        ' Entity of the action.\\n        List of `ContractTermActionSubject` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type or form of the action.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractTermAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermAction, self).elementProperties()\n        js.extend([('context', 'context', fhirreference.FHIRReference, False, None, False), ('contextLinkId', 'contextLinkId', str, True, None, False), ('doNotPerform', 'doNotPerform', bool, False, None, False), ('intent', 'intent', codeableconcept.CodeableConcept, False, None, True), ('linkId', 'linkId', str, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('occurrenceDateTime', 'occurrenceDateTime', fhirdatetime.FHIRDateTime, False, 'occurrence', False), ('occurrencePeriod', 'occurrencePeriod', period.Period, False, 'occurrence', False), ('occurrenceTiming', 'occurrenceTiming', timing.Timing, False, 'occurrence', False), ('performer', 'performer', fhirreference.FHIRReference, False, None, False), ('performerLinkId', 'performerLinkId', str, True, None, False), ('performerRole', 'performerRole', codeableconcept.CodeableConcept, False, None, False), ('performerType', 'performerType', codeableconcept.CodeableConcept, True, None, False), ('reason', 'reason', str, True, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonLinkId', 'reasonLinkId', str, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('requester', 'requester', fhirreference.FHIRReference, True, None, False), ('requesterLinkId', 'requesterLinkId', str, True, None, False), ('securityLabelNumber', 'securityLabelNumber', int, True, None, False), ('status', 'status', codeableconcept.CodeableConcept, False, None, True), ('subject', 'subject', ContractTermActionSubject, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass ContractTermActionSubject(backboneelement.BackboneElement):\n    \"\"\" Entity of the action.\n    \"\"\"\n    resource_type = 'ContractTermActionSubject'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.reference = None\n        ' Entity of the action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.role = None\n        ' Role type of the agent.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractTermActionSubject, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermActionSubject, self).elementProperties()\n        js.extend([('reference', 'reference', fhirreference.FHIRReference, True, None, True), ('role', 'role', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ContractTermAsset(backboneelement.BackboneElement):\n    \"\"\" Contract Term Asset List.\n    \"\"\"\n    resource_type = 'ContractTermAsset'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.answer = None\n        ' Response to assets.\\n        List of `ContractTermOfferAnswer` items (represented as `dict` in JSON). '\n        self.condition = None\n        ' Quality desctiption of asset.\\n        Type `str`. '\n        self.context = None\n        ' Circumstance of the asset.\\n        List of `ContractTermAssetContext` items (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Pointer to asset text.\\n        List of `str` items. '\n        self.period = None\n        ' Time period of the asset.\\n        List of `Period` items (represented as `dict` in JSON). '\n        self.periodType = None\n        ' Asset availability types.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.relationship = None\n        ' Kinship of the asset.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.scope = None\n        ' Range of asset.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.securityLabelNumber = None\n        ' Asset restriction numbers.\\n        List of `int` items. '\n        self.subtype = None\n        ' Asset sub-category.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Asset clause or question text.\\n        Type `str`. '\n        self.type = None\n        ' Asset category.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.typeReference = None\n        ' Associated entities.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.usePeriod = None\n        ' Time period.\\n        List of `Period` items (represented as `dict` in JSON). '\n        self.valuedItem = None\n        ' Contract Valued Item List.\\n        List of `ContractTermAssetValuedItem` items (represented as `dict` in JSON). '\n        super(ContractTermAsset, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermAsset, self).elementProperties()\n        js.extend([('answer', 'answer', ContractTermOfferAnswer, True, None, False), ('condition', 'condition', str, False, None, False), ('context', 'context', ContractTermAssetContext, True, None, False), ('linkId', 'linkId', str, True, None, False), ('period', 'period', period.Period, True, None, False), ('periodType', 'periodType', codeableconcept.CodeableConcept, True, None, False), ('relationship', 'relationship', coding.Coding, False, None, False), ('scope', 'scope', codeableconcept.CodeableConcept, False, None, False), ('securityLabelNumber', 'securityLabelNumber', int, True, None, False), ('subtype', 'subtype', codeableconcept.CodeableConcept, True, None, False), ('text', 'text', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False), ('typeReference', 'typeReference', fhirreference.FHIRReference, True, None, False), ('usePeriod', 'usePeriod', period.Period, True, None, False), ('valuedItem', 'valuedItem', ContractTermAssetValuedItem, True, None, False)])\n        return js\n\nclass ContractTermAssetContext(backboneelement.BackboneElement):\n    \"\"\" Circumstance of the asset.\n    \"\"\"\n    resource_type = 'ContractTermAssetContext'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Codeable asset context.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reference = None\n        ' Creator,custodian or owner.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.text = None\n        ' Context description.\\n        Type `str`. '\n        super(ContractTermAssetContext, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermAssetContext, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('reference', 'reference', fhirreference.FHIRReference, False, None, False), ('text', 'text', str, False, None, False)])\n        return js\n\nclass ContractTermAssetValuedItem(backboneelement.BackboneElement):\n    \"\"\" Contract Valued Item List.\n    \"\"\"\n    resource_type = 'ContractTermAssetValuedItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.effectiveTime = None\n        ' Contract Valued Item Effective Tiem.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.entityCodeableConcept = None\n        ' Contract Valued Item Type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.entityReference = None\n        ' Contract Valued Item Type.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.factor = None\n        ' Contract Valued Item Price Scaling Factor.\\n        Type `float`. '\n        self.identifier = None\n        ' Contract Valued Item Number.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Pointer to specific item.\\n        List of `str` items. '\n        self.net = None\n        ' Total Contract Valued Item Value.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.payment = None\n        ' Terms of valuation.\\n        Type `str`. '\n        self.paymentDate = None\n        ' When payment is due.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.points = None\n        ' Contract Valued Item Difficulty Scaling Factor.\\n        Type `float`. '\n        self.quantity = None\n        ' Count of Contract Valued Items.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.recipient = None\n        ' Who will receive payment.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.responsible = None\n        ' Who will make payment.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.securityLabelNumber = None\n        ' Security Labels that define affected terms.\\n        List of `int` items. '\n        self.unitPrice = None\n        ' Contract Valued Item fee, charge, or cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ContractTermAssetValuedItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermAssetValuedItem, self).elementProperties()\n        js.extend([('effectiveTime', 'effectiveTime', fhirdatetime.FHIRDateTime, False, None, False), ('entityCodeableConcept', 'entityCodeableConcept', codeableconcept.CodeableConcept, False, 'entity', False), ('entityReference', 'entityReference', fhirreference.FHIRReference, False, 'entity', False), ('factor', 'factor', float, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('linkId', 'linkId', str, True, None, False), ('net', 'net', money.Money, False, None, False), ('payment', 'payment', str, False, None, False), ('paymentDate', 'paymentDate', fhirdatetime.FHIRDateTime, False, None, False), ('points', 'points', float, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('recipient', 'recipient', fhirreference.FHIRReference, False, None, False), ('responsible', 'responsible', fhirreference.FHIRReference, False, None, False), ('securityLabelNumber', 'securityLabelNumber', int, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ContractTermOffer(backboneelement.BackboneElement):\n    \"\"\" Context of the Contract term.\n    \n    The matter of concern in the context of this provision of the agrement.\n    \"\"\"\n    resource_type = 'ContractTermOffer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.answer = None\n        ' Response to offer text.\\n        List of `ContractTermOfferAnswer` items (represented as `dict` in JSON). '\n        self.decision = None\n        ' Accepting party choice.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.decisionMode = None\n        ' How decision is conveyed.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Offer business ID.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Pointer to text.\\n        List of `str` items. '\n        self.party = None\n        ' Offer Recipient.\\n        List of `ContractTermOfferParty` items (represented as `dict` in JSON). '\n        self.securityLabelNumber = None\n        ' Offer restriction numbers.\\n        List of `int` items. '\n        self.text = None\n        ' Human readable offer text.\\n        Type `str`. '\n        self.topic = None\n        ' Negotiable offer asset.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' Contract Offer Type or Form.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractTermOffer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermOffer, self).elementProperties()\n        js.extend([('answer', 'answer', ContractTermOfferAnswer, True, None, False), ('decision', 'decision', codeableconcept.CodeableConcept, False, None, False), ('decisionMode', 'decisionMode', codeableconcept.CodeableConcept, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('linkId', 'linkId', str, True, None, False), ('party', 'party', ContractTermOfferParty, True, None, False), ('securityLabelNumber', 'securityLabelNumber', int, True, None, False), ('text', 'text', str, False, None, False), ('topic', 'topic', fhirreference.FHIRReference, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass ContractTermOfferAnswer(backboneelement.BackboneElement):\n    \"\"\" Response to offer text.\n    \"\"\"\n    resource_type = 'ContractTermOfferAnswer'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.valueAttachment = None\n        ' The actual answer response.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' The actual answer response.\\n        Type `bool`. '\n        self.valueCoding = None\n        ' The actual answer response.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' The actual answer response.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueDateTime = None\n        ' The actual answer response.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' The actual answer response.\\n        Type `float`. '\n        self.valueInteger = None\n        ' The actual answer response.\\n        Type `int`. '\n        self.valueQuantity = None\n        ' The actual answer response.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' The actual answer response.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' The actual answer response.\\n        Type `str`. '\n        self.valueTime = None\n        ' The actual answer response.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.valueUri = None\n        ' The actual answer response.\\n        Type `str`. '\n        super(ContractTermOfferAnswer, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermOfferAnswer, self).elementProperties()\n        js.extend([('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', True), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', True), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', True), ('valueUri', 'valueUri', str, False, 'value', True)])\n        return js\n\nclass ContractTermOfferParty(backboneelement.BackboneElement):\n    \"\"\" Offer Recipient.\n    \"\"\"\n    resource_type = 'ContractTermOfferParty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.reference = None\n        ' Referenced entity.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.role = None\n        ' Participant engagement type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ContractTermOfferParty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermOfferParty, self).elementProperties()\n        js.extend([('reference', 'reference', fhirreference.FHIRReference, True, None, True), ('role', 'role', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass ContractTermSecurityLabel(backboneelement.BackboneElement):\n    \"\"\" Protection for the Term.\n    \n    Security labels that protect the handling of information about the term and\n    its elements, which may be specifically identified..\n    \"\"\"\n    resource_type = 'ContractTermSecurityLabel'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.category = None\n        ' Applicable Policy.\\n        List of `Coding` items (represented as `dict` in JSON). '\n        self.classification = None\n        ' Confidentiality Protection.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.control = None\n        ' Handling Instructions.\\n        List of `Coding` items (represented as `dict` in JSON). '\n        self.number = None\n        ' Link to Security Labels.\\n        List of `int` items. '\n        super(ContractTermSecurityLabel, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ContractTermSecurityLabel, self).elementProperties()\n        js.extend([('category', 'category', coding.Coding, True, None, False), ('classification', 'classification', coding.Coding, False, None, True), ('control', 'control', coding.Coding, True, None, False), ('number', 'number', int, True, None, False)])\n        return js\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\nfrom . import signature\nfrom . import timing",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}