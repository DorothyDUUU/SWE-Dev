{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-messagedefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/messagedefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import messagedefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MessageDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MessageDefinition\", js[\"resourceType\"])\n        return messagedefinition.MessageDefinition(js)\n    \n    def testMessageDefinition1(self):\n        inst = self.instantiate_from(\"messagedefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MessageDefinition instance\")\n        self.implMessageDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MessageDefinition\", js[\"resourceType\"])\n        inst2 = messagedefinition.MessageDefinition(js)\n        self.implMessageDefinition1(inst2)\n    \n    def implMessageDefinition1(self, inst):\n        self.assertEqual(inst.category, \"notification\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2016-11-09\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2016-11-09\")\n        self.assertEqual(inst.eventCoding.code, \"admin-notify\")\n        self.assertEqual(inst.eventCoding.system, \"http://example.org/fhir/message-events\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.name, \"EXAMPLE\")\n        self.assertEqual(inst.publisher, \"Health Level Seven, Int'l\")\n        self.assertEqual(inst.purpose, \"Defines a base example for other MessageDefinition instances.\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Message definition base example</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Message definition base example\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/MessageDefinition/example\")\n\n",
  "GT_file_code": {
    "fhirclient/models/messagedefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MessageDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MessageDefinition(domainresource.DomainResource):\n    \"\"\" A resource that defines a type of message that can be exchanged between\n    systems.\n    \n    Defines the characteristics of a message that can be shared between\n    systems, including the type of event that initiates the message, the\n    content to be transmitted and what response(s), if any, are permitted.\n    \"\"\"\n    \n    resource_type = \"MessageDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allowedResponse = None\n        \"\"\" Responses to this message.\n        List of `MessageDefinitionAllowedResponse` items (represented as `dict` in JSON). \"\"\"\n        \n        self.base = None\n        \"\"\" Definition this one is based on.\n        Type `str`. \"\"\"\n        \n        self.category = None\n        \"\"\" consequence | currency | notification.\n        Type `str`. \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the message definition.\n        Type `str`. \"\"\"\n        \n        self.eventCoding = None\n        \"\"\" Event code  or link to the EventDefinition.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.eventUri = None\n        \"\"\" Event code  or link to the EventDefinition.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.focus = None\n        \"\"\" Resource(s) that are the subject of the event.\n        List of `MessageDefinitionFocus` items (represented as `dict` in JSON). \"\"\"\n        \n        self.graph = None\n        \"\"\" Canonical reference to a GraphDefinition.\n        List of `str` items. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Primary key for the message definition on a given server.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for message definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this message definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.parent = None\n        \"\"\" Protocol/workflow this is part of.\n        List of `str` items. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this message definition is defined.\n        Type `str`. \"\"\"\n        \n        self.replaces = None\n        \"\"\" Takes the place of.\n        List of `str` items. \"\"\"\n        \n        self.responseRequired = None\n        \"\"\" always | on-error | never | on-success.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this message definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Business Identifier for a given MessageDefinition.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the message definition.\n        Type `str`. \"\"\"\n        \n        super(MessageDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageDefinition, self).elementProperties()\n        js.extend([\n            (\"allowedResponse\", \"allowedResponse\", MessageDefinitionAllowedResponse, True, None, False),\n            (\"base\", \"base\", str, False, None, False),\n            (\"category\", \"category\", str, False, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"eventCoding\", \"eventCoding\", coding.Coding, False, \"event\", True),\n            (\"eventUri\", \"eventUri\", str, False, \"event\", True),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"focus\", \"focus\", MessageDefinitionFocus, True, None, False),\n            (\"graph\", \"graph\", str, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"parent\", \"parent\", str, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"replaces\", \"replaces\", str, True, None, False),\n            (\"responseRequired\", \"responseRequired\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MessageDefinitionAllowedResponse(backboneelement.BackboneElement):\n    \"\"\" Responses to this message.\n    \n    Indicates what types of messages may be sent as an application-level\n    response to this message.\n    \"\"\"\n    \n    resource_type = \"MessageDefinitionAllowedResponse\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.message = None\n        \"\"\" Reference to allowed message definition response.\n        Type `str`. \"\"\"\n        \n        self.situation = None\n        \"\"\" When should this response be used.\n        Type `str`. \"\"\"\n        \n        super(MessageDefinitionAllowedResponse, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageDefinitionAllowedResponse, self).elementProperties()\n        js.extend([\n            (\"message\", \"message\", str, False, None, True),\n            (\"situation\", \"situation\", str, False, None, False),\n        ])\n        return js\n\n\nclass MessageDefinitionFocus(backboneelement.BackboneElement):\n    \"\"\" Resource(s) that are the subject of the event.\n    \n    Identifies the resource (or resources) that are being addressed by the\n    event.  For example, the Encounter for an admit message or two Account\n    records for a merge.\n    \"\"\"\n    \n    resource_type = \"MessageDefinitionFocus\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Type of resource.\n        Type `str`. \"\"\"\n        \n        self.max = None\n        \"\"\" Maximum number of focuses of this type.\n        Type `str`. \"\"\"\n        \n        self.min = None\n        \"\"\" Minimum number of focuses of this type.\n        Type `int`. \"\"\"\n        \n        self.profile = None\n        \"\"\" Profile that must be adhered to by focus.\n        Type `str`. \"\"\"\n        \n        super(MessageDefinitionFocus, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MessageDefinitionFocus, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", str, False, None, True),\n            (\"max\", \"max\", str, False, None, False),\n            (\"min\", \"min\", int, False, None, True),\n            (\"profile\", \"profile\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import identifier\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n"
  },
  "GT_src_dict": {
    "fhirclient/models/messagedefinition.py": {
      "MessageDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MessageDefinition instance which defines the properties and characteristics of a message that can be exchanged between systems.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the instance properties. It can contain key-value pairs that correspond to the attributes of the MessageDefinition.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError, ensuring the integrity of the data; if False, allows for leniency in handling invalid variables.\n\nAttributes:\n- allowedResponse: A list of responses to this message, populated with instances of MessageDefinitionAllowedResponse.\n- base: A string representing the definition this message is based on.\n- category: A string indicating message categories (e.g., consequence, currency, notification).\n- contact: A list of ContactDetail instances providing contact information for the publisher.\n- copyright: A string noting the copyright and publishing restrictions.\n- date: A FHIRDateTime object indicating the last modification date.\n- description: A string describing the message definition in natural language.\n- eventCoding: A Coding object or linked definition representing the event associated with the message.\n- eventUri: A string linking to the event definition.\n- experimental: A boolean flag indicating if the message definition is for testing purposes.\n- focus: A list of MessageDefinitionFocus instances representing the resources addressed in the event.\n- graph: A list of strings specifying canonical references to GraphDefinitions.\n- identifier: A list of Identifier instances serving as primary keys for the message definition.\n- jurisdiction: A list of CodeableConcept instances indicating intended jurisdictions, if applicable.\n- name: A string for the computer-friendly name of the message definition.\n- parent: A list of strings specifying associated protocols or workflows.\n- publisher: A string denoting the name of the publisher (individual or organization).\n- purpose: A string explaining the rationale behind the message definition.\n- replaces: A list of strings indicating previous versions or definitions this one supersedes.\n- responseRequired: A string specifying the response requirement type (always, on-error, never, on-success).\n- status: A string indicating the lifecycle status of the message definition (draft, active, retired, unknown).\n- title: A string for the human-friendly name of the message definition.\n- url: A string serving as a business identifier for the message definition.\n- useContext: A list of UsageContext instances outlining the contexts the content supports.\n- version: A string indicating the business version of the message definition.\n\nThe constructor also calls the superclass constructor of DomainResource to initialize inherited properties and ensure proper setup.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.allowedResponse = None\n        ' Responses to this message.\\n        List of `MessageDefinitionAllowedResponse` items (represented as `dict` in JSON). '\n        self.base = None\n        ' Definition this one is based on.\\n        Type `str`. '\n        self.category = None\n        ' consequence | currency | notification.\\n        Type `str`. '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the message definition.\\n        Type `str`. '\n        self.eventCoding = None\n        ' Event code  or link to the EventDefinition.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.eventUri = None\n        ' Event code  or link to the EventDefinition.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.focus = None\n        ' Resource(s) that are the subject of the event.\\n        List of `MessageDefinitionFocus` items (represented as `dict` in JSON). '\n        self.graph = None\n        ' Canonical reference to a GraphDefinition.\\n        List of `str` items. '\n        self.identifier = None\n        ' Primary key for the message definition on a given server.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for message definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this message definition (computer friendly).\\n        Type `str`. '\n        self.parent = None\n        ' Protocol/workflow this is part of.\\n        List of `str` items. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this message definition is defined.\\n        Type `str`. '\n        self.replaces = None\n        ' Takes the place of.\\n        List of `str` items. '\n        self.responseRequired = None\n        ' always | on-error | never | on-success.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.title = None\n        ' Name for this message definition (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Business Identifier for a given MessageDefinition.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the message definition.\\n        Type `str`. '\n        super(MessageDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MessageDefinition instance which defines the properties and characteristics of a message that can be exchanged between systems.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the instance properties. It can contain key-value pairs that correspond to the attributes of the MessageDefinition.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError, ensuring the integrity of the data; if False, allows for leniency in handling invalid variables.\n\nAttributes:\n- allowedResponse: A list of responses to this message, populated with instances of MessageDefinitionAllowedResponse.\n- base: A string representing the definition this message is based on.\n- category: A string indicating message categories (e.g., consequence, currency, notification).\n- contact: A list of ContactDetail instances providing contact information for the publisher.\n- copyright: A string noting the copyright and publishing restrictions.\n- date: A FHIRDateTime object indicating the last modification date.\n- description: A string describing the message definition in natural language.\n- eventCoding: A Coding object or linked definition representing the event associated with the message.\n- eventUri: A string linking to the event definition.\n- experimental: A boolean flag indicating if the message definition is for testing purposes.\n- focus: A list of MessageDefinitionFocus instances representing the resources addressed in the event.\n- graph: A list of strings specifying canonical references to GraphDefinitions.\n- identifier: A list of Identifier instances serving as primary keys for the message definition.\n- jurisdiction: A list of CodeableConcept instances indicating intended jurisdictions, if applicable.\n- name: A string for the computer-friendly name of the message definition.\n- parent: A list of strings specifying associated protocols or workflows.\n- publisher: A string denoting the name of the publisher (individual or organization).\n- purpose: A string explaining the rationale behind the message definition.\n- replaces: A list of strings indicating previous versions or definitions this one supersedes.\n- responseRequired: A string specifying the response requirement type (always, on-error, never, on-success).\n- status: A string indicating the lifecycle status of the message definition (draft, active, retired, unknown).\n- title: A string for the human-friendly name of the message definition.\n- url: A string serving as a business identifier for the message definition.\n- useContext: A list of UsageContext instances outlining the contexts the content supports.\n- version: A string indicating the business version of the message definition.\n\nThe constructor also calls the superclass constructor of DomainResource to initialize inherited properties and ensure proper setup.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MessageDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance to represent FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. If None, initializes with no value.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None. It will hold the converted datetime value from the provided JSON string if valid.\n\nThis constructor calls the parent class's __init__ method (from FHIRDate) to ensure backward compatibility and proper initialization, allowing for instances of FHIRDateTime to function as FHIRDate objects as needed.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance to represent FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. If None, initializes with no value.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None. It will hold the converted datetime value from the provided JSON string if valid.\n\nThis constructor calls the parent class's __init__ method (from FHIRDate) to ensure backward compatibility and proper initialization, allowing for instances of FHIRDateTime to function as FHIRDate objects as needed.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns a JSON representation of the FHIRAbstractResource instance, including the resourceType attribute.\n\nThe method first calls the superclass's as_json method to retrieve the base JSON structure, and then it adds the 'resourceType' key with the value of the class's resource_type attribute, which is defined as 'FHIRAbstractResource'. This ensures that all FHIR resources created from this abstract class conform to the expected structure required by FHIR specifications.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, which includes the resourceType.\n\nDependencies:\n    - The method depends on the superclass method from FHIRAbstractBase, which is responsible for generating the initial JSON dictionary.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns a JSON representation of the FHIRAbstractResource instance, including the resourceType attribute.\n\nThe method first calls the superclass's as_json method to retrieve the base JSON structure, and then it adds the 'resourceType' key with the value of the class's resource_type attribute, which is defined as 'FHIRAbstractResource'. This ensures that all FHIR resources created from this abstract class conform to the expected structure required by FHIR specifications.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, which includes the resourceType.\n\nDependencies:\n    - The method depends on the superclass method from FHIRAbstractBase, which is responsible for generating the initial JSON dictionary.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to initialize the FHIRDate instance. If the instance was created with a JSON value (`origval`), this method will return that value. If no original value is present, it will return a standardized ISO 8601 string representation of the date stored in the `date` attribute. The `isostring` property is derived from the `date` attribute and is used to ensure a consistent format, particularly for partial dates that may have been expanded to full dates during initialization. This method interacts with the `origval` attribute, which is set during instance creation, and the `isostring` property, ensuring that the output reflects either the precise original input or a calculated representation, thereby maintaining the integrity of the date information.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to initialize the FHIRDate instance. If the instance was created with a JSON value (`origval`), this method will return that value. If no original value is present, it will return a standardized ISO 8601 string representation of the date stored in the `date` attribute. The `isostring` property is derived from the `date` attribute and is used to ensure a consistent format, particularly for partial dates that may have been expanded to full dates during initialization. This method interacts with the `origval` attribute, which is set during instance creation, and the `isostring` property, ensuring that the output reflects either the precise original input or a calculated representation, thereby maintaining the integrity of the date information.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/messagedefinition.py:MessageDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/messagedefinition_test.py:MessageDefinitionTests:testMessageDefinition1": {
      "tests/models/messagedefinition_test.py:MessageDefinitionTests:instantiate_from": {
        "fhirclient/models/messagedefinition.py:MessageDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/messagedefinition.py:MessageDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/messagedefinition_test.py:MessageDefinitionTests:implMessageDefinition1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/messagedefinition.py:MessageDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/messagedefinition.py:MessageDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/messagedefinition.py:MessageDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/messagedefinition_test.py:MessageDefinitionTests:instantiate_from": {
      "fhirclient/models/messagedefinition.py:MessageDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/messagedefinition.py:MessageDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-messagedefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 messagedefinition.py\n            \u2514\u2500\u2500 MessageDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe MessageDefinition module is designed to validate and test the functionality of FHIR (Fast Healthcare Interoperability Resources) MessageDefinition resources, ensuring their conformance to the FHIR standard. It provides capabilities to instantiate, parse, and verify the integrity of MessageDefinition instances by checking critical attributes such as event coding, metadata, publisher, and purpose. By enabling developers to validate the correctness and structure of these definitions, the module ensures that interoperable healthcare communication protocols are accurately defined and implemented. This aids developers by streamlining the verification process for FHIR-based workflows, supporting reliable data exchange in healthcare applications.\n\n## FILE 1: fhirclient/models/messagedefinition.py\n\n- CLASS METHOD: MessageDefinition.__init__\n  - CLASS SIGNATURE: class MessageDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MessageDefinition instance which defines the properties and characteristics of a message that can be exchanged between systems.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the instance properties. It can contain key-value pairs that correspond to the attributes of the MessageDefinition.\n- strict (bool, optional): If set to True (default), invalid variables raise a TypeError, ensuring the integrity of the data; if False, allows for leniency in handling invalid variables.\n\nAttributes:\n- allowedResponse: A list of responses to this message, populated with instances of MessageDefinitionAllowedResponse.\n- base: A string representing the definition this message is based on.\n- category: A string indicating message categories (e.g., consequence, currency, notification).\n- contact: A list of ContactDetail instances providing contact information for the publisher.\n- copyright: A string noting the copyright and publishing restrictions.\n- date: A FHIRDateTime object indicating the last modification date.\n- description: A string describing the message definition in natural language.\n- eventCoding: A Coding object or linked definition representing the event associated with the message.\n- eventUri: A string linking to the event definition.\n- experimental: A boolean flag indicating if the message definition is for testing purposes.\n- focus: A list of MessageDefinitionFocus instances representing the resources addressed in the event.\n- graph: A list of strings specifying canonical references to GraphDefinitions.\n- identifier: A list of Identifier instances serving as primary keys for the message definition.\n- jurisdiction: A list of CodeableConcept instances indicating intended jurisdictions, if applicable.\n- name: A string for the computer-friendly name of the message definition.\n- parent: A list of strings specifying associated protocols or workflows.\n- publisher: A string denoting the name of the publisher (individual or organization).\n- purpose: A string explaining the rationale behind the message definition.\n- replaces: A list of strings indicating previous versions or definitions this one supersedes.\n- responseRequired: A string specifying the response requirement type (always, on-error, never, on-success).\n- status: A string indicating the lifecycle status of the message definition (draft, active, retired, unknown).\n- title: A string for the human-friendly name of the message definition.\n- url: A string serving as a business identifier for the message definition.\n- useContext: A list of UsageContext instances outlining the contexts the content supports.\n- version: A string indicating the business version of the message definition.\n\nThe constructor also calls the superclass constructor of DomainResource to initialize inherited properties and ensure proper setup.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance to represent FHIR datetime values.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. If None, initializes with no value.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A Python datetime object initialized to None. It will hold the converted datetime value from the provided JSON string if valid.\n\nThis constructor calls the parent class's __init__ method (from FHIRDate) to ensure backward compatibility and proper initialization, allowing for instances of FHIRDateTime to function as FHIRDate objects as needed.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a JSON representation of the FHIRAbstractResource instance, including the resourceType attribute.\n\nThe method first calls the superclass's as_json method to retrieve the base JSON structure, and then it adds the 'resourceType' key with the value of the class's resource_type attribute, which is defined as 'FHIRAbstractResource'. This ensures that all FHIR resources created from this abstract class conform to the expected structure required by FHIR specifications.\n\nReturns:\n    dict: A JSON-compatible dictionary representing the resource, which includes the resourceType.\n\nDependencies:\n    - The method depends on the superclass method from FHIRAbstractBase, which is responsible for generating the initial JSON dictionary.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to initialize the FHIRDate instance. If the instance was created with a JSON value (`origval`), this method will return that value. If no original value is present, it will return a standardized ISO 8601 string representation of the date stored in the `date` attribute. The `isostring` property is derived from the `date` attribute and is used to ensure a consistent format, particularly for partial dates that may have been expanded to full dates during initialization. This method interacts with the `origval` attribute, which is set during instance creation, and the `isostring` property, ensuring that the output reflects either the precise original input or a calculated representation, thereby maintaining the integrity of the date information.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/messagedefinition.py": "from . import domainresource\n\nclass MessageDefinition(domainresource.DomainResource):\n    \"\"\" A resource that defines a type of message that can be exchanged between\n    systems.\n    \n    Defines the characteristics of a message that can be shared between\n    systems, including the type of event that initiates the message, the\n    content to be transmitted and what response(s), if any, are permitted.\n    \"\"\"\n    resource_type = 'MessageDefinition'\n\n    def elementProperties(self):\n        js = super(MessageDefinition, self).elementProperties()\n        js.extend([('allowedResponse', 'allowedResponse', MessageDefinitionAllowedResponse, True, None, False), ('base', 'base', str, False, None, False), ('category', 'category', str, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, True), ('description', 'description', str, False, None, False), ('eventCoding', 'eventCoding', coding.Coding, False, 'event', True), ('eventUri', 'eventUri', str, False, 'event', True), ('experimental', 'experimental', bool, False, None, False), ('focus', 'focus', MessageDefinitionFocus, True, None, False), ('graph', 'graph', str, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('name', 'name', str, False, None, False), ('parent', 'parent', str, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('replaces', 'replaces', str, True, None, False), ('responseRequired', 'responseRequired', str, False, None, False), ('status', 'status', str, False, None, True), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MessageDefinitionAllowedResponse(backboneelement.BackboneElement):\n    \"\"\" Responses to this message.\n    \n    Indicates what types of messages may be sent as an application-level\n    response to this message.\n    \"\"\"\n    resource_type = 'MessageDefinitionAllowedResponse'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.message = None\n        ' Reference to allowed message definition response.\\n        Type `str`. '\n        self.situation = None\n        ' When should this response be used.\\n        Type `str`. '\n        super(MessageDefinitionAllowedResponse, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MessageDefinitionAllowedResponse, self).elementProperties()\n        js.extend([('message', 'message', str, False, None, True), ('situation', 'situation', str, False, None, False)])\n        return js\n\nclass MessageDefinitionFocus(backboneelement.BackboneElement):\n    \"\"\" Resource(s) that are the subject of the event.\n    \n    Identifies the resource (or resources) that are being addressed by the\n    event.  For example, the Encounter for an admit message or two Account\n    records for a merge.\n    \"\"\"\n    resource_type = 'MessageDefinitionFocus'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Type of resource.\\n        Type `str`. '\n        self.max = None\n        ' Maximum number of focuses of this type.\\n        Type `str`. '\n        self.min = None\n        ' Minimum number of focuses of this type.\\n        Type `int`. '\n        self.profile = None\n        ' Profile that must be adhered to by focus.\\n        Type `str`. '\n        super(MessageDefinitionFocus, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MessageDefinitionFocus, self).elementProperties()\n        js.extend([('code', 'code', str, False, None, True), ('max', 'max', str, False, None, False), ('min', 'min', int, False, None, True), ('profile', 'profile', str, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import identifier\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)"
  }
}