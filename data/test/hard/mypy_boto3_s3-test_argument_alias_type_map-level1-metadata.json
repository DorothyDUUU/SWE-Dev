{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_argument_alias_type_map",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/type_maps/test_argument_alias_type_map.py",
  "test_code": "from mypy_boto3_builder.service_name import ServiceNameCatalog\nfrom mypy_boto3_builder.type_maps.argument_alias_map import get_argument_alias\n\n\nclass TestArgumentAliasTypeMap:\n    def test_get_argument_alias(self) -> None:\n        assert (\n            get_argument_alias(ServiceNameCatalog.cloudsearchdomain, \"Search\", \"return\")\n            == \"returnFields\"\n        )\n        assert (\n            get_argument_alias(ServiceNameCatalog.cloudsearchdomain, \"NoSearch\", \"return\")\n            == \"return\"\n        )\n        assert (\n            get_argument_alias(ServiceNameCatalog.cloudsearchdomain, \"Search\", \"other\") == \"other\"\n        )\n\n        assert get_argument_alias(ServiceNameCatalog.ec2, \"MyOperation\", \"Filter\") == \"Filters\"\n        assert get_argument_alias(ServiceNameCatalog.ec2, \"MyOperation\", \"Other\") == \"Other\"\n\n        assert get_argument_alias(ServiceNameCatalog.s3, \"PutBucketCors\", \"ContentMD5\") is None\n        assert (\n            get_argument_alias(ServiceNameCatalog.s3, \"PutBucketCors\", \"ContentSHA256\")\n            == \"ContentSHA256\"\n        )\n",
  "GT_file_code": {
    "mypy_boto3_builder/type_maps/argument_alias_map.py": "\"\"\"\nAlias map fixes added by botocore for documentation build.\n\n# https://github.com/boto/botocore/blob/develop/botocore/handlers.py#L773\n# https://github.com/boto/botocore/blob/develop/botocore/handlers.py#L1055\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom collections.abc import Mapping\nfrom typing import Final\n\nfrom mypy_boto3_builder.constants import ALL, DELETE\nfrom mypy_boto3_builder.service_name import ServiceName, ServiceNameCatalog\nfrom mypy_boto3_builder.utils.lookup_dict import LookupDict\n\n# Mapping to rename for botocore method arguments.\n# ServiceName -> Operation name -> Argument name -> alias name\n# DELETE means that argument has to be deleted.\nARGUMENT_ALIASES: Final[Mapping[ServiceName, Mapping[str, Mapping[str, str]]]] = {\n    ServiceNameCatalog.cloudsearchdomain: {\"Search\": {\"return\": \"returnFields\"}},\n    ServiceNameCatalog.logs: {\"CreateExportTask\": {\"from\": \"fromTime\"}},\n    ServiceNameCatalog.ec2: {ALL: {\"Filter\": \"Filters\"}},\n    ServiceNameCatalog.s3: {\n        \"PutBucketAcl\": {\"ContentMD5\": DELETE},\n        \"PutBucketCors\": {\"ContentMD5\": DELETE},\n        \"PutBucketLifecycle\": {\"ContentMD5\": DELETE},\n        \"PutBucketLogging\": {\"ContentMD5\": DELETE},\n        \"PutBucketNotification\": {\"ContentMD5\": DELETE},\n        \"PutBucketPolicy\": {\"ContentMD5\": DELETE},\n        \"PutBucketReplication\": {\"ContentMD5\": DELETE},\n        \"PutBucketRequestPayment\": {\"ContentMD5\": DELETE},\n        \"PutBucketTagging\": {\"ContentMD5\": DELETE},\n        \"PutBucketVersioning\": {\"ContentMD5\": DELETE},\n        \"PutBucketWebsite\": {\"ContentMD5\": DELETE},\n        \"PutObjectAcl\": {\"ContentMD5\": DELETE},\n    },\n}\n\n_LOOKUP: LookupDict[str] = LookupDict(\n    {ServiceNameCatalog.to_str(k): v for k, v in ARGUMENT_ALIASES.items()},\n)\n\n\ndef get_argument_alias(\n    service_name: ServiceName,\n    operation_name: str,\n    argument_name: str,\n) -> str | None:\n    \"\"\"\n    Get argument alias for operation.\n\n    Args:\n        service_name -- Service name\n        operation_name -- Resource operation name\n        argument_name -- Argument name\n\n    Returns:\n        Argument alias name or None if argument has to be deleted.\n    \"\"\"\n    lookup_argument_name = _LOOKUP.get(service_name.name, operation_name, argument_name)\n    if lookup_argument_name == DELETE:\n        return None\n\n    return lookup_argument_name or argument_name\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/type_maps/argument_alias_map.py": {
      "get_argument_alias": {
        "code": "def get_argument_alias(service_name: ServiceName, operation_name: str, argument_name: str) -> str | None:\n    \"\"\"Retrieve the alias name for a specified argument in a given service operation. This function looks up argument aliases using a predefined mapping, which is defined as the global constant `ARGUMENT_ALIASES`. If the alias for the argument is marked for deletion (using the constant `DELETE`), the function returns None. Otherwise, it returns the mapped alias if it exists; if not, it falls back to the original argument name.\n\nArgs:\n    service_name (ServiceName): The name of the AWS service (from `ServiceNameCatalog`).\n    operation_name (str): The name of the operation within the specified service.\n    argument_name (str): The name of the argument for which the alias is being retrieved.\n\nReturns:\n    str | None: The alias name of the argument if found, None if the argument should be deleted, or the original argument name if no alias exists.\"\"\"\n    '\\n    Get argument alias for operation.\\n\\n    Args:\\n        service_name -- Service name\\n        operation_name -- Resource operation name\\n        argument_name -- Argument name\\n\\n    Returns:\\n        Argument alias name or None if argument has to be deleted.\\n    '\n    lookup_argument_name = _LOOKUP.get(service_name.name, operation_name, argument_name)\n    if lookup_argument_name == DELETE:\n        return None\n    return lookup_argument_name or argument_name",
        "docstring": "Retrieve the alias name for a specified argument in a given service operation. This function looks up argument aliases using a predefined mapping, which is defined as the global constant `ARGUMENT_ALIASES`. If the alias for the argument is marked for deletion (using the constant `DELETE`), the function returns None. Otherwise, it returns the mapped alias if it exists; if not, it falls back to the original argument name.\n\nArgs:\n    service_name (ServiceName): The name of the AWS service (from `ServiceNameCatalog`).\n    operation_name (str): The name of the operation within the specified service.\n    argument_name (str): The name of the argument for which the alias is being retrieved.\n\nReturns:\n    str | None: The alias name of the argument if found, None if the argument should be deleted, or the original argument name if no alias exists.",
        "signature": "def get_argument_alias(service_name: ServiceName, operation_name: str, argument_name: str) -> str | None:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "mypy_boto3_builder/type_maps/argument_alias_map.py:get_argument_alias": {
      "mypy_boto3_builder/utils/lookup_dict.py": {
        "LookupDict.get": {
          "code": "    def get(self, *keys: str) -> _V | None:\n        \"\"\"\n        Get value by multiple keys.\n        \"\"\"\n        lookup = self._lookup\n        for lookup_keys in self._iterate_lookup_keys(keys):\n            result = lookup.get(lookup_keys)\n            if result is not None:\n                return result\n        return None",
          "docstring": "Get value by multiple keys.",
          "signature": "def get(self, *keys: str) -> _V | None:",
          "type": "Method",
          "class_signature": "class LookupDict(Generic[_V]):"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_argument_alias_type_map\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 type_maps/\n        \u2514\u2500\u2500 argument_alias_map.py\n            \u2514\u2500\u2500 get_argument_alias\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to support the accurate mapping of SDK operation argument names to their expected aliases or standardized forms for various AWS services, ensuring consistency and compatibility with different service-specific naming conventions. It provides functionality to retrieve the correct argument alias for a given AWS service, operation, and parameter name. By resolving discrepancies between user-provided parameter names and the expected naming requirements of AWS operations, the module helps developers build more robust and error-tolerant integrations with AWS services. This simplifies the development process and reduces the likelihood of issues related to incorrect parameter usage in dynamically generated SDKs or type-safe programming environments.\n\n## FILE 1: mypy_boto3_builder/type_maps/argument_alias_map.py\n\n- FUNCTION NAME: get_argument_alias\n  - SIGNATURE: def get_argument_alias(service_name: ServiceName, operation_name: str, argument_name: str) -> str | None:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the alias name for a specified argument in a given service operation. This function looks up argument aliases using a predefined mapping, which is defined as the global constant `ARGUMENT_ALIASES`. If the alias for the argument is marked for deletion (using the constant `DELETE`), the function returns None. Otherwise, it returns the mapped alias if it exists; if not, it falls back to the original argument name.\n\nArgs:\n    service_name (ServiceName): The name of the AWS service (from `ServiceNameCatalog`).\n    operation_name (str): The name of the operation within the specified service.\n    argument_name (str): The name of the argument for which the alias is being retrieved.\n\nReturns:\n    str | None: The alias name of the argument if found, None if the argument should be deleted, or the original argument name if no alias exists.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/type_maps/argument_alias_map.py": "\"\"\"\nAlias map fixes added by botocore for documentation build.\n\n# https://github.com/boto/botocore/blob/develop/botocore/handlers.py#L773\n# https://github.com/boto/botocore/blob/develop/botocore/handlers.py#L1055\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom collections.abc import Mapping\nfrom typing import Final\nfrom mypy_boto3_builder.constants import ALL, DELETE\nfrom mypy_boto3_builder.service_name import ServiceName, ServiceNameCatalog\nfrom mypy_boto3_builder.utils.lookup_dict import LookupDict\nARGUMENT_ALIASES: Final[Mapping[ServiceName, Mapping[str, Mapping[str, str]]]] = {ServiceNameCatalog.cloudsearchdomain: {'Search': {'return': 'returnFields'}}, ServiceNameCatalog.logs: {'CreateExportTask': {'from': 'fromTime'}}, ServiceNameCatalog.ec2: {ALL: {'Filter': 'Filters'}}, ServiceNameCatalog.s3: {'PutBucketAcl': {'ContentMD5': DELETE}, 'PutBucketCors': {'ContentMD5': DELETE}, 'PutBucketLifecycle': {'ContentMD5': DELETE}, 'PutBucketLogging': {'ContentMD5': DELETE}, 'PutBucketNotification': {'ContentMD5': DELETE}, 'PutBucketPolicy': {'ContentMD5': DELETE}, 'PutBucketReplication': {'ContentMD5': DELETE}, 'PutBucketRequestPayment': {'ContentMD5': DELETE}, 'PutBucketTagging': {'ContentMD5': DELETE}, 'PutBucketVersioning': {'ContentMD5': DELETE}, 'PutBucketWebsite': {'ContentMD5': DELETE}, 'PutObjectAcl': {'ContentMD5': DELETE}}}\n_LOOKUP: LookupDict[str] = LookupDict({ServiceNameCatalog.to_str(k): v for k, v in ARGUMENT_ALIASES.items()})"
  },
  "call_tree": {
    "tests/type_maps/test_argument_alias_type_map.py:TestArgumentAliasTypeMap:test_get_argument_alias": {
      "mypy_boto3_builder/type_maps/argument_alias_map.py:get_argument_alias": {
        "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get": {
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_lookup": {
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_lookup": {},
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_products": {
              "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_join_product": {}
            }
          },
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_iterate_lookup_keys": {}
        }
      }
    }
  }
}