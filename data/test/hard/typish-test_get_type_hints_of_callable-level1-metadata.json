{
  "dir_path": "/app/typish",
  "package_name": "typish",
  "sample_name": "typish-test_get_type_hints_of_callable",
  "src_dir": "test_resources/",
  "test_dir": "tests/",
  "test_file": "tests/functions/test_get_type_hints_of_callable.py",
  "test_code": "from typing import Callable\nfrom unittest import TestCase\n\nfrom typish import get_type_hints_of_callable, get_args_and_return_type\n\n\nclass TestGetTypeHintsOfCallable(TestCase):\n    def test_get_type_hints_of_callable(self):\n\n        def func(x: int, y: int) -> str:\n            return '{}{}'.format(x, y)\n\n        hints = get_type_hints_of_callable(func)\n\n        self.assertEqual(int, hints['x'])\n        self.assertEqual(int, hints['y'])\n        self.assertEqual(str, hints['return'])\n\n    def test_get_type_hints_of_empty_callable(self):\n\n        def func():\n            return 42\n\n        hints = get_type_hints_of_callable(func)\n\n        self.assertEqual({}, hints)\n\n    def test_get_args_and_return_type(self):\n        args, return_type = get_args_and_return_type(Callable[[int, int], str])\n\n        self.assertTupleEqual((int, int), args)\n        self.assertEqual(str, return_type)\n\n    def test_get_args_and_return_type_with_explicit_result(self):\n        class CallableMock:\n            __args__ = (int, int)\n            __result__ = str\n\n        args, return_type = get_args_and_return_type(CallableMock)\n\n        self.assertTupleEqual((int, int), args)\n        self.assertEqual(str, return_type)\n\n    def test_get_type_hints_of_callable_with_raising_callable(self):\n        # Python3.5: get_type_hints raises on classes without explicit constructor\n        class CallableMetaMock(type):\n            def __getattribute__(self, item):\n                raise AttributeError('')\n\n        class CallableMock(metaclass=CallableMetaMock):\n            ...\n\n        self.assertEqual({}, get_type_hints_of_callable(CallableMock))\n",
  "GT_file_code": {
    "typish/functions/_get_type_hints_of_callable.py": "import typing\n\n\ndef get_type_hints_of_callable(\n        func: typing.Callable) -> typing.Dict[str, type]:\n    \"\"\"\n    Return the type hints of the parameters of the given callable.\n    :param func: the callable of which the type hints are to be returned.\n    :return: a dict with parameter names and their types.\n    \"\"\"\n    # Python3.5: get_type_hints raises on classes without explicit constructor\n    try:\n        result = typing.get_type_hints(func)\n    except AttributeError:\n        result = {}\n    return result\n\n\ndef get_args_and_return_type(hint: typing.Type[typing.Callable]) \\\n        -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n    \"\"\"\n    Get the argument types and the return type of a callable type hint\n    (e.g. ``Callable[[int], str]``).\n\n    Example:\n    ```\n    arg_types, return_type = get_args_and_return_type(Callable[[int], str])\n    # args_types is (int, )\n    # return_type is str\n    ```\n\n    Example for when ``hint`` has no generics:\n    ```\n    arg_types, return_type = get_args_and_return_type(Callable)\n    # args_types is None\n    # return_type is None\n    ```\n    :param hint: the callable type hint.\n    :return: a tuple of the argument types (as a tuple) and the return type.\n    \"\"\"\n    if hint in (callable, typing.Callable):\n        arg_types = None\n        return_type = None\n    elif hasattr(hint, '__result__'):\n        arg_types = hint.__args__\n        return_type = hint.__result__\n    else:\n        arg_types = hint.__args__[0:-1]\n        return_type = hint.__args__[-1]\n    return arg_types, return_type\n"
  },
  "GT_src_dict": {
    "typish/functions/_get_type_hints_of_callable.py": {
      "get_type_hints_of_callable": {
        "code": "def get_type_hints_of_callable(func: typing.Callable) -> typing.Dict[str, type]:\n    \"\"\"Return the type hints of the parameters for a given callable function.\n\nThis function accepts a callable (like a function or a method) and retrieves its type hints, which indicate the expected types of its parameters. It utilizes the `typing.get_type_hints` function to extract this information, handling cases where the callable might not have explicit type hints or might raise an `AttributeError`. \n\nParameters:\n- func (typing.Callable): The callable for which to retrieve type hints.\n\nReturns:\n- typing.Dict[str, type]: A dictionary mapping parameter names to their respective types. If the callable has no type hints or an error occurs, an empty dictionary is returned.\"\"\"\n    '\\n    Return the type hints of the parameters of the given callable.\\n    :param func: the callable of which the type hints are to be returned.\\n    :return: a dict with parameter names and their types.\\n    '\n    try:\n        result = typing.get_type_hints(func)\n    except AttributeError:\n        result = {}\n    return result",
        "docstring": "Return the type hints of the parameters for a given callable function.\n\nThis function accepts a callable (like a function or a method) and retrieves its type hints, which indicate the expected types of its parameters. It utilizes the `typing.get_type_hints` function to extract this information, handling cases where the callable might not have explicit type hints or might raise an `AttributeError`. \n\nParameters:\n- func (typing.Callable): The callable for which to retrieve type hints.\n\nReturns:\n- typing.Dict[str, type]: A dictionary mapping parameter names to their respective types. If the callable has no type hints or an error occurs, an empty dictionary is returned.",
        "signature": "def get_type_hints_of_callable(func: typing.Callable) -> typing.Dict[str, type]:",
        "type": "Function",
        "class_signature": null
      },
      "get_args_and_return_type": {
        "code": "def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n    \"\"\"Get the argument types and return type from a callable type hint.\n\nThis function analyzes a callable type hint (e.g. `Callable[[int], str]`) to extract its parameter types and return type. It returns a tuple containing the argument types as a tuple and the return type. If the hint has no generics, it returns None for both parts.\n\nParameters:\n- hint (typing.Type[typing.Callable]): The callable type hint to analyze.\n\nReturns:\n- typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n  - A tuple where the first element is a tuple of argument types (or None if no arguments) and the second element is the return type (or None for no return type).\n\nDependencies:\n- Utilizes `typing.Callable` to recognize callable hints. If `hint` is a generic `Callable`, the function recognizes it appropriately by checking its characteristics.\"\"\"\n    '\\n    Get the argument types and the return type of a callable type hint\\n    (e.g. ``Callable[[int], str]``).\\n\\n    Example:\\n    ```\\n    arg_types, return_type = get_args_and_return_type(Callable[[int], str])\\n    # args_types is (int, )\\n    # return_type is str\\n    ```\\n\\n    Example for when ``hint`` has no generics:\\n    ```\\n    arg_types, return_type = get_args_and_return_type(Callable)\\n    # args_types is None\\n    # return_type is None\\n    ```\\n    :param hint: the callable type hint.\\n    :return: a tuple of the argument types (as a tuple) and the return type.\\n    '\n    if hint in (callable, typing.Callable):\n        arg_types = None\n        return_type = None\n    elif hasattr(hint, '__result__'):\n        arg_types = hint.__args__\n        return_type = hint.__result__\n    else:\n        arg_types = hint.__args__[0:-1]\n        return_type = hint.__args__[-1]\n    return (arg_types, return_type)",
        "docstring": "Get the argument types and return type from a callable type hint.\n\nThis function analyzes a callable type hint (e.g. `Callable[[int], str]`) to extract its parameter types and return type. It returns a tuple containing the argument types as a tuple and the return type. If the hint has no generics, it returns None for both parts.\n\nParameters:\n- hint (typing.Type[typing.Callable]): The callable type hint to analyze.\n\nReturns:\n- typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n  - A tuple where the first element is a tuple of argument types (or None if no arguments) and the second element is the return type (or None for no return type).\n\nDependencies:\n- Utilizes `typing.Callable` to recognize callable hints. If `hint` is a generic `Callable`, the function recognizes it appropriately by checking its characteristics.",
        "signature": "def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "typish/functions/_get_type_hints_of_callable.py:get_type_hints_of_callable": {}
  },
  "PRD": "# PROJECT NAME: typish-test_get_type_hints_of_callable\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 typish/\n    \u2514\u2500\u2500 functions/\n        \u2514\u2500\u2500 _get_type_hints_of_callable.py\n            \u251c\u2500\u2500 get_args_and_return_type\n            \u2514\u2500\u2500 get_type_hints_of_callable\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module offers utilities for analyzing and extracting type information from Python callables, enabling developers to work with precise type annotations and better understand function signatures. It provides functionality to retrieve the type hints of a callable's arguments and return value, as well as to extract argument types and return types from generic callable definitions. By programmatically exposing this type introspection, the module helps validate type correctness, support dynamic typing use cases, and improve the reliability of codebases that rely on accurate type specifications. This addresses the challenges developers face when working with dynamically typed functions or complex callable structures by ensuring clear and consistent type handling.\n\n## FILE 1: typish/functions/_get_type_hints_of_callable.py\n\n- FUNCTION NAME: get_args_and_return_type\n  - SIGNATURE: def get_args_and_return_type(hint: typing.Type[typing.Callable]) -> typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the argument types and return type from a callable type hint.\n\nThis function analyzes a callable type hint (e.g. `Callable[[int], str]`) to extract its parameter types and return type. It returns a tuple containing the argument types as a tuple and the return type. If the hint has no generics, it returns None for both parts.\n\nParameters:\n- hint (typing.Type[typing.Callable]): The callable type hint to analyze.\n\nReturns:\n- typing.Tuple[typing.Optional[typing.Tuple[type]], typing.Optional[type]]:\n  - A tuple where the first element is a tuple of argument types (or None if no arguments) and the second element is the return type (or None for no return type).\n\nDependencies:\n- Utilizes `typing.Callable` to recognize callable hints. If `hint` is a generic `Callable`, the function recognizes it appropriately by checking its characteristics.\n\"\"\"\n```\n\n- FUNCTION NAME: get_type_hints_of_callable\n  - SIGNATURE: def get_type_hints_of_callable(func: typing.Callable) -> typing.Dict[str, type]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturn the type hints of the parameters for a given callable function.\n\nThis function accepts a callable (like a function or a method) and retrieves its type hints, which indicate the expected types of its parameters. It utilizes the `typing.get_type_hints` function to extract this information, handling cases where the callable might not have explicit type hints or might raise an `AttributeError`. \n\nParameters:\n- func (typing.Callable): The callable for which to retrieve type hints.\n\nReturns:\n- typing.Dict[str, type]: A dictionary mapping parameter names to their respective types. If the callable has no type hints or an error occurs, an empty dictionary is returned.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:__getattribute__\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "typish/functions/_get_type_hints_of_callable.py": "import typing"
  },
  "call_tree": {
    "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:test_get_args_and_return_type": {
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    },
    "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:test_get_args_and_return_type_with_explicit_result": {
      "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:CallableMock": {},
      "typish/functions/_get_type_hints_of_callable.py:get_args_and_return_type": {}
    },
    "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:test_get_type_hints_of_callable": {
      "typish/functions/_get_type_hints_of_callable.py:get_type_hints_of_callable": {}
    },
    "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:test_get_type_hints_of_callable_with_raising_callable": {
      "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:CallableMetaMock": {},
      "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:CallableMock": {},
      "typish/functions/_get_type_hints_of_callable.py:get_type_hints_of_callable": {
        "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:__getattribute__": {}
      }
    },
    "tests/functions/test_get_type_hints_of_callable.py:TestGetTypeHintsOfCallable:test_get_type_hints_of_empty_callable": {
      "typish/functions/_get_type_hints_of_callable.py:get_type_hints_of_callable": {}
    }
  }
}