{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductpackaged_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductpackaged_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductpackaged\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductPackagedTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductPackaged\", js[\"resourceType\"])\n        return medicinalproductpackaged.MedicinalProductPackaged(js)\n    \n    def testMedicinalProductPackaged1(self):\n        inst = self.instantiate_from(\"medicinalproductpackaged-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductPackaged instance\")\n        self.implMedicinalProductPackaged1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductPackaged\", js[\"resourceType\"])\n        inst2 = medicinalproductpackaged.MedicinalProductPackaged(js)\n        self.implMedicinalProductPackaged1(inst2)\n    \n    def implMedicinalProductPackaged1(self, inst):\n        self.assertEqual(inst.batchIdentifier[0].outerPackaging.period.end.datetime, FHIRDateTime(\"2016-06-06\").datetime)\n        self.assertEqual(inst.batchIdentifier[0].outerPackaging.period.end.as_json(), \"2016-06-06\")\n        self.assertEqual(inst.batchIdentifier[0].outerPackaging.system, \"http://ema.europa.eu/example/baid1\")\n        self.assertEqual(inst.batchIdentifier[0].outerPackaging.value, \"AAF5699\")\n        self.assertEqual(inst.description, \"ALU-PVC/PVDC BLISTERS. CARTONS OF 10 FILM-COATED TABLETS. \")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://ema.europa.eu/example/pcid\")\n        self.assertEqual(inst.identifier[0].value, \"{PCID}\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.packageItem[0].material[0].coding[0].code, \"PVC\")\n        self.assertEqual(inst.packageItem[0].material[0].coding[0].system, \"http://ema.europa.eu/example/packageItemContainerMaterial\")\n        self.assertEqual(inst.packageItem[0].material[1].coding[0].code, \"PVDC\")\n        self.assertEqual(inst.packageItem[0].material[1].coding[0].system, \"http://ema.europa.eu/example/packageItemContainerMaterial\")\n        self.assertEqual(inst.packageItem[0].material[2].coding[0].code, \"alu\")\n        self.assertEqual(inst.packageItem[0].material[2].coding[0].system, \"http://ema.europa.eu/example/packageItemContainerMaterial\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].material[0].coding[0].code, \"Paperboard\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].material[0].coding[0].system, \"http://ema.europa.eu/example/packageItemContainerMaterial\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].physicalCharacteristics.height.unit, \"mm\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].physicalCharacteristics.height.value, 125)\n        self.assertEqual(inst.packageItem[0].packageItem[0].physicalCharacteristics.width.unit, \"mm\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].physicalCharacteristics.width.value, 45)\n        self.assertEqual(inst.packageItem[0].packageItem[0].quantity.unit, \"1\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].quantity.value, 1)\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].period.unit, \"a\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].period.value, 3)\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].specialPrecautionsForStorage[0].coding[0].code, \"Thismedicinalproductdoesnotrequireanyspecialstoragecondition.\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].specialPrecautionsForStorage[0].coding[0].system, \"http://ema.europa.eu/example/specialprecautionsforstorage\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].type.coding[0].code, \"ShelfLifeofPackagedMedicinalProduct\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].shelfLifeStorage[0].type.coding[0].system, \"http://ema.europa.eu/example/shelfLifeTypePlaceHolder\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].type.coding[0].code, \"Blister\")\n        self.assertEqual(inst.packageItem[0].packageItem[0].type.coding[0].system, \"http://ema.europa.eu/example/packageitemcontainertype\")\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.depth.unit, \"mm\")\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.depth.value, 23.5)\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.height.unit, \"mm\")\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.height.value, 50)\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.width.unit, \"mm\")\n        self.assertEqual(inst.packageItem[0].physicalCharacteristics.width.value, 136)\n        self.assertEqual(inst.packageItem[0].quantity.unit, \"1\")\n        self.assertEqual(inst.packageItem[0].quantity.value, 1)\n        self.assertEqual(inst.packageItem[0].type.coding[0].code, \"Carton\")\n        self.assertEqual(inst.packageItem[0].type.coding[0].system, \"http://ema.europa.eu/example/packageitemcontainertype\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/medicinalproductpackaged.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductPackaged(domainresource.DomainResource):\n    \"\"\" A medicinal product in a container or package.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPackaged\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.batchIdentifier = None\n        \"\"\" Batch numbering.\n        List of `MedicinalProductPackagedBatchIdentifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Textual description.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.legalStatusOfSupply = None\n        \"\"\" The legal status of supply of the medicinal product as classified\n        by the regulator.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" Manufacturer of this Package Item.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.marketingAuthorization = None\n        \"\"\" Manufacturer of this Package Item.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.marketingStatus = None\n        \"\"\" Marketing information.\n        List of `MarketingStatus` items (represented as `dict` in JSON). \"\"\"\n        \n        self.packageItem = None\n        \"\"\" A packaging item, as a contained for medicine, possibly with other\n        packaging items within.\n        List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" The product with this is a pack for.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPackaged, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPackaged, self).elementProperties()\n        js.extend([\n            (\"batchIdentifier\", \"batchIdentifier\", MedicinalProductPackagedBatchIdentifier, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"legalStatusOfSupply\", \"legalStatusOfSupply\", codeableconcept.CodeableConcept, False, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, True, None, False),\n            (\"marketingAuthorization\", \"marketingAuthorization\", fhirreference.FHIRReference, False, None, False),\n            (\"marketingStatus\", \"marketingStatus\", marketingstatus.MarketingStatus, True, None, False),\n            (\"packageItem\", \"packageItem\", MedicinalProductPackagedPackageItem, True, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductPackagedBatchIdentifier(backboneelement.BackboneElement):\n    \"\"\" Batch numbering.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPackagedBatchIdentifier\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.immediatePackaging = None\n        \"\"\" A number appearing on the immediate packaging (and not the outer\n        packaging).\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.outerPackaging = None\n        \"\"\" A number appearing on the outer packaging of a specific batch.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPackagedBatchIdentifier, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPackagedBatchIdentifier, self).elementProperties()\n        js.extend([\n            (\"immediatePackaging\", \"immediatePackaging\", identifier.Identifier, False, None, False),\n            (\"outerPackaging\", \"outerPackaging\", identifier.Identifier, False, None, True),\n        ])\n        return js\n\n\nclass MedicinalProductPackagedPackageItem(backboneelement.BackboneElement):\n    \"\"\" A packaging item, as a contained for medicine, possibly with other\n    packaging items within.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPackagedPackageItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.alternateMaterial = None\n        \"\"\" A possible alternate material for the packaging.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.device = None\n        \"\"\" A device accompanying a medicinal product.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Including possibly Data Carrier Identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturedItem = None\n        \"\"\" The manufactured item as contained in the packaged medicinal\n        product.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" Manufacturer of this Package Item.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.material = None\n        \"\"\" Material type of the package item.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.otherCharacteristics = None\n        \"\"\" Other codeable characteristics.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.packageItem = None\n        \"\"\" Allows containers within containers.\n        List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.physicalCharacteristics = None\n        \"\"\" Dimensions, color etc..\n        Type `ProdCharacteristic` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" The quantity of this package in the medicinal product, at the\n        current level of packaging. The outermost is always 1.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.shelfLifeStorage = None\n        \"\"\" Shelf Life and storage information.\n        List of `ProductShelfLife` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The physical type of the container of the medicine.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPackagedPackageItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPackagedPackageItem, self).elementProperties()\n        js.extend([\n            (\"alternateMaterial\", \"alternateMaterial\", codeableconcept.CodeableConcept, True, None, False),\n            (\"device\", \"device\", fhirreference.FHIRReference, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"manufacturedItem\", \"manufacturedItem\", fhirreference.FHIRReference, True, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, True, None, False),\n            (\"material\", \"material\", codeableconcept.CodeableConcept, True, None, False),\n            (\"otherCharacteristics\", \"otherCharacteristics\", codeableconcept.CodeableConcept, True, None, False),\n            (\"packageItem\", \"packageItem\", MedicinalProductPackagedPackageItem, True, None, False),\n            (\"physicalCharacteristics\", \"physicalCharacteristics\", prodcharacteristic.ProdCharacteristic, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, True),\n            (\"shelfLifeStorage\", \"shelfLifeStorage\", productshelflife.ProductShelfLife, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import marketingstatus\nfrom . import prodcharacteristic\nfrom . import productshelflife\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to initialize the FHIRDate instance. If the original JSON string (`origval`) is not None, it is returned directly. Otherwise, the method returns the standardized ISO 8601 string representation of the internal date object using the `isostring` property. This method allows consumers to retrieve the original data that was parsed to create the FHIRDate instance, ensuring compatibility with FHIR standards. There are no input parameters, and the return value is either a string representing the original JSON or None if no value was provided at initialization.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to initialize the FHIRDate instance. If the original JSON string (`origval`) is not None, it is returned directly. Otherwise, the method returns the standardized ISO 8601 string representation of the internal date object using the `isostring` property. This method allows consumers to retrieve the original data that was parsed to create the FHIRDate instance, ensuring compatibility with FHIR standards. There are no input parameters, and the return value is either a string representing the original JSON or None if no value was provided at initialization.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/medicinalproductpackaged.py": {
      "MedicinalProductPackaged.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductPackaged instance representing a medicinal product in a container or package.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's attributes. Each key corresponds to a property of the MedicinalProductPackaged class.\n- strict (bool, optional): If set to True (the default), raises a FHIRValidationError if invalid properties are found; otherwise, allows for leniency in initializing the object.\n\nAttributes:\n- batchIdentifier (list of MedicinalProductPackagedBatchIdentifier): Holds information about batch numbering.\n- description (str): A textual description of the medicinal product.\n- identifier (list of Identifier): Unique identifiers for the medicinal product.\n- legalStatusOfSupply (CodeableConcept): The legal classification of the product's supply.\n- manufacturer (list of FHIRReference): References to the manufacturer(s) of the package item.\n- marketingAuthorization (FHIRReference): References related to the marketing authorization of the product.\n- marketingStatus (list of MarketingStatus): Details regarding the marketing status of the product.\n- packageItem (list of MedicinalProductPackagedPackageItem): Contains items of the packaging, which may include further nested packaging items.\n- subject (list of FHIRReference): References to the product for which this package is intended.\n\nThis constructor works in conjunction with the superclass constructor to ensure all valid properties are initialized properly.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.batchIdentifier = None\n        ' Batch numbering.\\n        List of `MedicinalProductPackagedBatchIdentifier` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Textual description.\\n        Type `str`. '\n        self.identifier = None\n        ' Unique identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.legalStatusOfSupply = None\n        ' The legal status of supply of the medicinal product as classified\\n        by the regulator.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.manufacturer = None\n        ' Manufacturer of this Package Item.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.marketingAuthorization = None\n        ' Manufacturer of this Package Item.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.marketingStatus = None\n        ' Marketing information.\\n        List of `MarketingStatus` items (represented as `dict` in JSON). '\n        self.packageItem = None\n        ' A packaging item, as a contained for medicine, possibly with other\\n        packaging items within.\\n        List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON). '\n        self.subject = None\n        ' The product with this is a pack for.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(MedicinalProductPackaged, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductPackaged instance representing a medicinal product in a container or package.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's attributes. Each key corresponds to a property of the MedicinalProductPackaged class.\n- strict (bool, optional): If set to True (the default), raises a FHIRValidationError if invalid properties are found; otherwise, allows for leniency in initializing the object.\n\nAttributes:\n- batchIdentifier (list of MedicinalProductPackagedBatchIdentifier): Holds information about batch numbering.\n- description (str): A textual description of the medicinal product.\n- identifier (list of Identifier): Unique identifiers for the medicinal product.\n- legalStatusOfSupply (CodeableConcept): The legal classification of the product's supply.\n- manufacturer (list of FHIRReference): References to the manufacturer(s) of the package item.\n- marketingAuthorization (FHIRReference): References related to the marketing authorization of the product.\n- marketingStatus (list of MarketingStatus): Details regarding the marketing status of the product.\n- packageItem (list of MedicinalProductPackagedPackageItem): Contains items of the packaging, which may include further nested packaging items.\n- subject (list of FHIRReference): References to the product for which this package is intended.\n\nThis constructor works in conjunction with the superclass constructor to ensure all valid properties are initialized properly.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductPackaged(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new FHIRDateTime instance.\n\nThis constructor accepts a JSON value that can be a string representation of a FHIR datetime. It sets up the instance with a `datetime` attribute initialized to None, which will later be populated when the FHIR date string is parsed. The constructor also calls the superclass (FHIRDate) initializer to handle any JSON value processing defined there. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a datetime in FHIR format. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime object or None if the input is not provided or valid.\n\nInteractions:\n- Inherits from FHIRDate, which provides base functionality for parsing the JSON representation passed to the initializer.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new FHIRDateTime instance.\n\nThis constructor accepts a JSON value that can be a string representation of a FHIR datetime. It sets up the instance with a `datetime` attribute initialized to None, which will later be populated when the FHIR date string is parsed. The constructor also calls the superclass (FHIRDate) initializer to handle any JSON value processing defined there. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a datetime in FHIR format. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime object or None if the input is not provided or valid.\n\nInteractions:\n- Inherits from FHIRDate, which provides base functionality for parsing the JSON representation passed to the initializer.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource into a JSON representation.\n\nThis method calls the parent class's implementation of as_json to obtain the base JSON representation, then adds the 'resourceType' key with the value of the resource_type attribute, which is defined as 'FHIRAbstractResource' for this class. The resulting JSON object will reflect the structure of the FHIR resource described by this instance, with the added distinction of its resource type.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.\n\nDependencies:\n- Calls the superclass method from FHIRAbstractBase, which should also implement an as_json method. The behavior and structure of that method will impact the final output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource into a JSON representation.\n\nThis method calls the parent class's implementation of as_json to obtain the base JSON representation, then adds the 'resourceType' key with the value of the resource_type attribute, which is defined as 'FHIRAbstractResource' for this class. The resulting JSON object will reflect the structure of the FHIR resource described by this instance, with the added distinction of its resource type.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.\n\nDependencies:\n- Calls the superclass method from FHIRAbstractBase, which should also implement an as_json method. The behavior and structure of that method will impact the final output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/medicinalproductpackaged_test.py:MedicinalProductPackagedTests:testMedicinalProductPackaged1": {
      "tests/models/medicinalproductpackaged_test.py:MedicinalProductPackagedTests:instantiate_from": {
        "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductpackaged_test.py:MedicinalProductPackagedTests:implMedicinalProductPackaged1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductpackaged_test.py:MedicinalProductPackagedTests:instantiate_from": {
      "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductpackaged.py:MedicinalProductPackaged:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductpackaged_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 medicinalproductpackaged.py\n            \u2514\u2500\u2500 MedicinalProductPackaged.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe MedicinalProductPackaged module is designed to validate and handle FHIR-based data representations of packaged medicinal products, enabling the accurate modeling and exchange of detailed packaging information in compliance with the FHIR standard (v4.0.1). Its core functionality includes parsing, instantiating, and verifying the structure of FHIR \"MedicinalProductPackaged\" resources, with support for embedded details such as batch identifiers, packaging materials, physical characteristics, shelf life, and special storage conditions. By providing a reliable mechanism to ensure conformity to FHIR specifications, the module simplifies data integration for developers and supports interoperability in healthcare systems, eliminating the need for manual validation and reducing potential errors when managing packaged medicinal product data.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to initialize the FHIRDate instance. If the original JSON string (`origval`) is not None, it is returned directly. Otherwise, the method returns the standardized ISO 8601 string representation of the internal date object using the `isostring` property. This method allows consumers to retrieve the original data that was parsed to create the FHIRDate instance, ensuring compatibility with FHIR standards. There are no input parameters, and the return value is either a string representing the original JSON or None if no value was provided at initialization.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/medicinalproductpackaged.py\n\n- CLASS METHOD: MedicinalProductPackaged.__init__\n  - CLASS SIGNATURE: class MedicinalProductPackaged(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductPackaged instance representing a medicinal product in a container or package.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's attributes. Each key corresponds to a property of the MedicinalProductPackaged class.\n- strict (bool, optional): If set to True (the default), raises a FHIRValidationError if invalid properties are found; otherwise, allows for leniency in initializing the object.\n\nAttributes:\n- batchIdentifier (list of MedicinalProductPackagedBatchIdentifier): Holds information about batch numbering.\n- description (str): A textual description of the medicinal product.\n- identifier (list of Identifier): Unique identifiers for the medicinal product.\n- legalStatusOfSupply (CodeableConcept): The legal classification of the product's supply.\n- manufacturer (list of FHIRReference): References to the manufacturer(s) of the package item.\n- marketingAuthorization (FHIRReference): References related to the marketing authorization of the product.\n- marketingStatus (list of MarketingStatus): Details regarding the marketing status of the product.\n- packageItem (list of MedicinalProductPackagedPackageItem): Contains items of the packaging, which may include further nested packaging items.\n- subject (list of FHIRReference): References to the product for which this package is intended.\n\nThis constructor works in conjunction with the superclass constructor to ensure all valid properties are initialized properly.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new FHIRDateTime instance.\n\nThis constructor accepts a JSON value that can be a string representation of a FHIR datetime. It sets up the instance with a `datetime` attribute initialized to None, which will later be populated when the FHIR date string is parsed. The constructor also calls the superclass (FHIRDate) initializer to handle any JSON value processing defined there. \n\nParameters:\n- jsonval (Union[str, None]): A JSON string representing a datetime in FHIR format. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime object or None if the input is not provided or valid.\n\nInteractions:\n- Inherits from FHIRDate, which provides base functionality for parsing the JSON representation passed to the initializer.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource into a JSON representation.\n\nThis method calls the parent class's implementation of as_json to obtain the base JSON representation, then adds the 'resourceType' key with the value of the resource_type attribute, which is defined as 'FHIRAbstractResource' for this class. The resulting JSON object will reflect the structure of the FHIR resource described by this instance, with the added distinction of its resource type.\n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' field.\n\nDependencies:\n- Calls the superclass method from FHIRAbstractBase, which should also implement an as_json method. The behavior and structure of that method will impact the final output.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/medicinalproductpackaged.py": "from . import domainresource\n\nclass MedicinalProductPackaged(domainresource.DomainResource):\n    \"\"\" A medicinal product in a container or package.\n    \"\"\"\n    resource_type = 'MedicinalProductPackaged'\n\n    def elementProperties(self):\n        js = super(MedicinalProductPackaged, self).elementProperties()\n        js.extend([('batchIdentifier', 'batchIdentifier', MedicinalProductPackagedBatchIdentifier, True, None, False), ('description', 'description', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('legalStatusOfSupply', 'legalStatusOfSupply', codeableconcept.CodeableConcept, False, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, True, None, False), ('marketingAuthorization', 'marketingAuthorization', fhirreference.FHIRReference, False, None, False), ('marketingStatus', 'marketingStatus', marketingstatus.MarketingStatus, True, None, False), ('packageItem', 'packageItem', MedicinalProductPackagedPackageItem, True, None, True), ('subject', 'subject', fhirreference.FHIRReference, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MedicinalProductPackagedBatchIdentifier(backboneelement.BackboneElement):\n    \"\"\" Batch numbering.\n    \"\"\"\n    resource_type = 'MedicinalProductPackagedBatchIdentifier'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.immediatePackaging = None\n        ' A number appearing on the immediate packaging (and not the outer\\n        packaging).\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.outerPackaging = None\n        ' A number appearing on the outer packaging of a specific batch.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        super(MedicinalProductPackagedBatchIdentifier, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPackagedBatchIdentifier, self).elementProperties()\n        js.extend([('immediatePackaging', 'immediatePackaging', identifier.Identifier, False, None, False), ('outerPackaging', 'outerPackaging', identifier.Identifier, False, None, True)])\n        return js\n\nclass MedicinalProductPackagedPackageItem(backboneelement.BackboneElement):\n    \"\"\" A packaging item, as a contained for medicine, possibly with other\n    packaging items within.\n    \"\"\"\n    resource_type = 'MedicinalProductPackagedPackageItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.alternateMaterial = None\n        ' A possible alternate material for the packaging.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.device = None\n        ' A device accompanying a medicinal product.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Including possibly Data Carrier Identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.manufacturedItem = None\n        ' The manufactured item as contained in the packaged medicinal\\n        product.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.manufacturer = None\n        ' Manufacturer of this Package Item.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.material = None\n        ' Material type of the package item.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.otherCharacteristics = None\n        ' Other codeable characteristics.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.packageItem = None\n        ' Allows containers within containers.\\n        List of `MedicinalProductPackagedPackageItem` items (represented as `dict` in JSON). '\n        self.physicalCharacteristics = None\n        ' Dimensions, color etc..\\n        Type `ProdCharacteristic` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' The quantity of this package in the medicinal product, at the\\n        current level of packaging. The outermost is always 1.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.shelfLifeStorage = None\n        ' Shelf Life and storage information.\\n        List of `ProductShelfLife` items (represented as `dict` in JSON). '\n        self.type = None\n        ' The physical type of the container of the medicine.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductPackagedPackageItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPackagedPackageItem, self).elementProperties()\n        js.extend([('alternateMaterial', 'alternateMaterial', codeableconcept.CodeableConcept, True, None, False), ('device', 'device', fhirreference.FHIRReference, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('manufacturedItem', 'manufacturedItem', fhirreference.FHIRReference, True, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, True, None, False), ('material', 'material', codeableconcept.CodeableConcept, True, None, False), ('otherCharacteristics', 'otherCharacteristics', codeableconcept.CodeableConcept, True, None, False), ('packageItem', 'packageItem', MedicinalProductPackagedPackageItem, True, None, False), ('physicalCharacteristics', 'physicalCharacteristics', prodcharacteristic.ProdCharacteristic, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, True), ('shelfLifeStorage', 'shelfLifeStorage', productshelflife.ProductShelfLife, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import marketingstatus\nfrom . import prodcharacteristic\nfrom . import productshelflife\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}