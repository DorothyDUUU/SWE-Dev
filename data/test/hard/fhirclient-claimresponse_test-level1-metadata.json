{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-claimresponse_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/claimresponse_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import claimresponse\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ClaimResponseTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        return claimresponse.ClaimResponse(js)\n    \n    def testClaimResponse1(self):\n        inst = self.instantiate_from(\"claimresponse-example-unsolicited-preauth.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClaimResponse instance\")\n        self.implClaimResponse1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        inst2 = claimresponse.ClaimResponse(js)\n        self.implClaimResponse1(inst2)\n    \n    def implClaimResponse1(self, inst):\n        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[0].amount.value, 250.0)\n        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[1].amount.value, 10.0)\n        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code, \"copay\")\n        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.addItem[0].adjudication[2].value, 100.0)\n        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[3].amount.value, 240.0)\n        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.addItem[0].itemSequence[0], 1)\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code, \"x\")\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display, \"None\")\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system, \"http://example.org/fhir/modifiers\")\n        self.assertEqual(inst.addItem[0].net.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].net.value, 250.0)\n        self.assertEqual(inst.addItem[0].noteNumber[0], 101)\n        self.assertEqual(inst.addItem[0].productOrService.coding[0].code, \"1101\")\n        self.assertEqual(inst.addItem[0].productOrService.coding[0].system, \"http://example.org/fhir/oralservicecodes\")\n        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].adjudication[0].amount.value, 800.0)\n        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.addItem[1].adjudication[1].value, 100.0)\n        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].adjudication[2].amount.value, 800.0)\n        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.addItem[1].itemSequence[0], 1)\n        self.assertEqual(inst.addItem[1].net.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].net.value, 800.0)\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].code, \"2101\")\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].display, \"Radiograph, series (12)\")\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].system, \"http://example.org/fhir/oralservicecodes\")\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"The enclosed services are authorized for your provision within 30 days of this notice.\")\n        self.assertEqual(inst.id, \"UR3503\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.SocialBenefitsInc.com/fhir/ClaimResponse\")\n        self.assertEqual(inst.identifier[0].value, \"UR3503\")\n        self.assertTrue(inst.insurance[0].focal)\n        self.assertEqual(inst.insurance[0].sequence, 1)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"complete\")\n        self.assertEqual(inst.payeeType.coding[0].code, \"provider\")\n        self.assertEqual(inst.payeeType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payeetype\")\n        self.assertEqual(inst.preAuthRef, \"18SS12345\")\n        self.assertEqual(inst.processNote[0].language.coding[0].code, \"en-CA\")\n        self.assertEqual(inst.processNote[0].language.coding[0].system, \"urn:ietf:bcp:47\")\n        self.assertEqual(inst.processNote[0].number, 101)\n        self.assertEqual(inst.processNote[0].text, \"Please submit a Pre-Authorization request if a more extensive examination or urgent services are required.\")\n        self.assertEqual(inst.processNote[0].type, \"print\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A sample unsolicited pre-authorization response which authorizes basic dental services to be performed for a patient.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 1050.0)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 1040.0)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"preauthorization\")\n    \n    def testClaimResponse2(self):\n        inst = self.instantiate_from(\"claimresponse-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClaimResponse instance\")\n        self.implClaimResponse2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        inst2 = claimresponse.ClaimResponse(js)\n        self.implClaimResponse2(inst2)\n    \n    def implClaimResponse2(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Claim settled as per contract.\")\n        self.assertEqual(inst.id, \"R3500\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.BenefitsInc.com/fhir/remittance\")\n        self.assertEqual(inst.identifier[0].value, \"R3500\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.value, 135.57)\n        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.value, 10.0)\n        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code, \"copay\")\n        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].adjudication[2].value, 80.0)\n        self.assertEqual(inst.item[0].adjudication[3].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[3].amount.value, 90.47)\n        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].code, \"ar002\")\n        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].display, \"Plan Limit Reached\")\n        self.assertEqual(inst.item[0].adjudication[3].reason.coding[0].system, \"http://terminology.hl7.org/CodeSystem/adjudication-reason\")\n        self.assertEqual(inst.item[0].itemSequence, 1)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"complete\")\n        self.assertEqual(inst.payeeType.coding[0].code, \"provider\")\n        self.assertEqual(inst.payeeType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payeetype\")\n        self.assertEqual(inst.payment.amount.currency, \"USD\")\n        self.assertEqual(inst.payment.amount.value, 100.47)\n        self.assertEqual(inst.payment.date.date, FHIRDate(\"2014-08-31\").date)\n        self.assertEqual(inst.payment.date.as_json(), \"2014-08-31\")\n        self.assertEqual(inst.payment.identifier.system, \"http://www.BenefitsInc.com/fhir/paymentidentifier\")\n        self.assertEqual(inst.payment.identifier.value, \"201408-2-1569478\")\n        self.assertEqual(inst.payment.type.coding[0].code, \"complete\")\n        self.assertEqual(inst.payment.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-paymenttype\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.subType.coding[0].code, \"emergency\")\n        self.assertEqual(inst.subType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-claimsubtype\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the ClaimResponse</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 135.57)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 90.47)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n    \n    def testClaimResponse3(self):\n        inst = self.instantiate_from(\"claimresponse-example-additem.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClaimResponse instance\")\n        self.implClaimResponse3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        inst2 = claimresponse.ClaimResponse(js)\n        self.implClaimResponse3(inst2)\n    \n    def implClaimResponse3(self, inst):\n        self.assertEqual(inst.addItem[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[0].amount.value, 100.0)\n        self.assertEqual(inst.addItem[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.addItem[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[1].amount.value, 10.0)\n        self.assertEqual(inst.addItem[0].adjudication[1].category.coding[0].code, \"copay\")\n        self.assertEqual(inst.addItem[0].adjudication[2].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.addItem[0].adjudication[2].value, 80.0)\n        self.assertEqual(inst.addItem[0].adjudication[3].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].adjudication[3].amount.value, 72.0)\n        self.assertEqual(inst.addItem[0].adjudication[3].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].code, \"ar002\")\n        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].display, \"Plan Limit Reached\")\n        self.assertEqual(inst.addItem[0].adjudication[3].reason.coding[0].system, \"http://terminology.hl7.org/CodeSystem/adjudication-reason\")\n        self.assertEqual(inst.addItem[0].itemSequence[0], 1)\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].code, \"x\")\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].display, \"None\")\n        self.assertEqual(inst.addItem[0].modifier[0].coding[0].system, \"http://example.org/fhir/modifiers\")\n        self.assertEqual(inst.addItem[0].net.currency, \"USD\")\n        self.assertEqual(inst.addItem[0].net.value, 135.57)\n        self.assertEqual(inst.addItem[0].noteNumber[0], 101)\n        self.assertEqual(inst.addItem[0].productOrService.coding[0].code, \"1101\")\n        self.assertEqual(inst.addItem[0].productOrService.coding[0].system, \"http://example.org/fhir/oralservicecodes\")\n        self.assertEqual(inst.addItem[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].adjudication[0].amount.value, 35.57)\n        self.assertEqual(inst.addItem[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.addItem[1].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.addItem[1].adjudication[1].value, 80.0)\n        self.assertEqual(inst.addItem[1].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].adjudication[2].amount.value, 28.47)\n        self.assertEqual(inst.addItem[1].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.addItem[1].itemSequence[0], 1)\n        self.assertEqual(inst.addItem[1].net.currency, \"USD\")\n        self.assertEqual(inst.addItem[1].net.value, 35.57)\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].code, \"2141\")\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].display, \"Radiograph, bytewing\")\n        self.assertEqual(inst.addItem[1].productOrService.coding[0].system, \"http://example.org/fhir/oralservicecodes\")\n        self.assertEqual(inst.addItem[2].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[2].adjudication[0].amount.value, 350.0)\n        self.assertEqual(inst.addItem[2].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.addItem[2].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.addItem[2].adjudication[1].value, 80.0)\n        self.assertEqual(inst.addItem[2].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.addItem[2].adjudication[2].amount.value, 270.0)\n        self.assertEqual(inst.addItem[2].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.addItem[2].detailSequence[0], 2)\n        self.assertEqual(inst.addItem[2].itemSequence[0], 3)\n        self.assertEqual(inst.addItem[2].modifier[0].coding[0].code, \"x\")\n        self.assertEqual(inst.addItem[2].modifier[0].coding[0].display, \"None\")\n        self.assertEqual(inst.addItem[2].modifier[0].coding[0].system, \"http://example.org/fhir/modifiers\")\n        self.assertEqual(inst.addItem[2].net.currency, \"USD\")\n        self.assertEqual(inst.addItem[2].net.value, 350.0)\n        self.assertEqual(inst.addItem[2].noteNumber[0], 101)\n        self.assertEqual(inst.addItem[2].productOrService.coding[0].code, \"expense\")\n        self.assertEqual(inst.addItem[2].productOrService.coding[0].system, \"http://example.org/fhir/oralservicecodes\")\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Claim settled as per contract.\")\n        self.assertEqual(inst.id, \"R3503\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.BenefitsInc.com/fhir/remittance\")\n        self.assertEqual(inst.identifier[0].value, \"R3503\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.value, 0.0)\n        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.value, 0.0)\n        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].itemSequence, 1)\n        self.assertEqual(inst.item[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].adjudication[0].amount.value, 105.0)\n        self.assertEqual(inst.item[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[1].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[1].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[1].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[1].adjudication[2].amount.value, 84.0)\n        self.assertEqual(inst.item[1].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[1].itemSequence, 2)\n        self.assertEqual(inst.item[2].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].adjudication[0].amount.value, 750.0)\n        self.assertEqual(inst.item[2].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[2].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[2].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[2].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].adjudication[2].amount.value, 600.0)\n        self.assertEqual(inst.item[2].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[2].detail[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].detail[0].adjudication[0].amount.value, 750.0)\n        self.assertEqual(inst.item[2].detail[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[2].detail[0].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[2].detail[0].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[2].detail[0].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].detail[0].adjudication[2].amount.value, 600.0)\n        self.assertEqual(inst.item[2].detail[0].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[2].detail[0].detailSequence, 1)\n        self.assertEqual(inst.item[2].detail[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].detail[1].adjudication[0].amount.value, 0.0)\n        self.assertEqual(inst.item[2].detail[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[2].detail[1].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.item[2].detail[1].adjudication[1].amount.value, 0.0)\n        self.assertEqual(inst.item[2].detail[1].adjudication[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[2].detail[1].detailSequence, 2)\n        self.assertEqual(inst.item[2].itemSequence, 3)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"complete\")\n        self.assertEqual(inst.payeeType.coding[0].code, \"provider\")\n        self.assertEqual(inst.payeeType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payeetype\")\n        self.assertEqual(inst.payment.amount.currency, \"USD\")\n        self.assertEqual(inst.payment.amount.value, 100.47)\n        self.assertEqual(inst.payment.date.date, FHIRDate(\"2014-08-31\").date)\n        self.assertEqual(inst.payment.date.as_json(), \"2014-08-31\")\n        self.assertEqual(inst.payment.identifier.system, \"http://www.BenefitsInc.com/fhir/paymentidentifier\")\n        self.assertEqual(inst.payment.identifier.value, \"201408-2-15507\")\n        self.assertEqual(inst.payment.type.coding[0].code, \"complete\")\n        self.assertEqual(inst.payment.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-paymenttype\")\n        self.assertEqual(inst.processNote[0].language.coding[0].code, \"en-CA\")\n        self.assertEqual(inst.processNote[0].language.coding[0].system, \"urn:ietf:bcp:47\")\n        self.assertEqual(inst.processNote[0].number, 101)\n        self.assertEqual(inst.processNote[0].text, \"Package codes are not permitted. Codes replaced by Insurer.\")\n        self.assertEqual(inst.processNote[0].type, \"print\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the ClaimResponse to Claim Oral Average with additional items</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 1340.57)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 1054.47)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n    \n    def testClaimResponse4(self):\n        inst = self.instantiate_from(\"claimresponse-example-2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClaimResponse instance\")\n        self.implClaimResponse4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        inst2 = claimresponse.ClaimResponse(js)\n        self.implClaimResponse4(inst2)\n    \n    def implClaimResponse4(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Claim could not be processed\")\n        self.assertEqual(inst.error[0].code.coding[0].code, \"a002\")\n        self.assertEqual(inst.error[0].code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/adjudication-error\")\n        self.assertEqual(inst.error[0].detailSequence, 2)\n        self.assertEqual(inst.error[0].itemSequence, 3)\n        self.assertEqual(inst.formCode.coding[0].code, \"2\")\n        self.assertEqual(inst.formCode.coding[0].system, \"http://terminology.hl7.org/CodeSystem/forms-codes\")\n        self.assertEqual(inst.id, \"R3501\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.BenefitsInc.com/fhir/remittance\")\n        self.assertEqual(inst.identifier[0].value, \"R3501\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"error\")\n        self.assertEqual(inst.processNote[0].language.coding[0].code, \"en-CA\")\n        self.assertEqual(inst.processNote[0].language.coding[0].system, \"urn:ietf:bcp:47\")\n        self.assertEqual(inst.processNote[0].number, 1)\n        self.assertEqual(inst.processNote[0].text, \"Invalid claim\")\n        self.assertEqual(inst.processNote[0].type, \"display\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the ClaimResponse that demonstrates returning errors</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"oral\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n    \n    def testClaimResponse5(self):\n        inst = self.instantiate_from(\"claimresponse-example-vision-3tier.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ClaimResponse instance\")\n        self.implClaimResponse5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ClaimResponse\", js[\"resourceType\"])\n        inst2 = claimresponse.ClaimResponse(js)\n        self.implClaimResponse5(inst2)\n    \n    def implClaimResponse5(self, inst):\n        self.assertEqual(inst.created.datetime, FHIRDateTime(\"2014-08-16\").datetime)\n        self.assertEqual(inst.created.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.disposition, \"Claim settled as per contract.\")\n        self.assertEqual(inst.id, \"R3502\")\n        self.assertEqual(inst.identifier[0].system, \"http://thebenefitcompany.com/claimresponse\")\n        self.assertEqual(inst.identifier[0].value, \"CR6532875367\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[0].amount.value, 235.4)\n        self.assertEqual(inst.item[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[1].amount.value, 20.0)\n        self.assertEqual(inst.item[0].adjudication[1].category.coding[0].code, \"copay\")\n        self.assertEqual(inst.item[0].adjudication[2].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].adjudication[2].value, 80.0)\n        self.assertEqual(inst.item[0].adjudication[3].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].adjudication[3].amount.value, 172.32)\n        self.assertEqual(inst.item[0].adjudication[3].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[0].amount.value, 100.0)\n        self.assertEqual(inst.item[0].detail[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[1].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[1].amount.value, 20.0)\n        self.assertEqual(inst.item[0].detail[0].adjudication[1].category.coding[0].code, \"copay\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[2].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[2].value, 80.0)\n        self.assertEqual(inst.item[0].detail[0].adjudication[3].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[0].adjudication[3].amount.value, 80.0)\n        self.assertEqual(inst.item[0].detail[0].adjudication[3].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[0].detailSequence, 1)\n        self.assertEqual(inst.item[0].detail[0].noteNumber[0], 1)\n        self.assertEqual(inst.item[0].detail[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].adjudication[0].amount.value, 110.0)\n        self.assertEqual(inst.item[0].detail[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[1].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[1].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[0].detail[1].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].adjudication[2].amount.value, 88.0)\n        self.assertEqual(inst.item[0].detail[1].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[1].detailSequence, 2)\n        self.assertEqual(inst.item[0].detail[1].noteNumber[0], 1)\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].amount.value, 60.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].amount.value, 48.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].noteNumber[0], 1)\n        self.assertEqual(inst.item[0].detail[1].subDetail[0].subDetailSequence, 1)\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].amount.value, 30.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].amount.value, 24.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[1].subDetailSequence, 2)\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].amount.value, 10.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].amount.value, 8.0)\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].noteNumber[0], 1)\n        self.assertEqual(inst.item[0].detail[1].subDetail[2].subDetailSequence, 3)\n        self.assertEqual(inst.item[0].detail[2].adjudication[0].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[2].adjudication[0].amount.value, 200.0)\n        self.assertEqual(inst.item[0].detail[2].adjudication[0].category.coding[0].code, \"eligible\")\n        self.assertEqual(inst.item[0].detail[2].adjudication[1].category.coding[0].code, \"eligpercent\")\n        self.assertEqual(inst.item[0].detail[2].adjudication[1].value, 80.0)\n        self.assertEqual(inst.item[0].detail[2].adjudication[2].amount.currency, \"USD\")\n        self.assertEqual(inst.item[0].detail[2].adjudication[2].amount.value, 14.0)\n        self.assertEqual(inst.item[0].detail[2].adjudication[2].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.item[0].detail[2].detailSequence, 3)\n        self.assertEqual(inst.item[0].detail[2].noteNumber[0], 1)\n        self.assertEqual(inst.item[0].itemSequence, 1)\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.outcome, \"complete\")\n        self.assertEqual(inst.payeeType.coding[0].code, \"provider\")\n        self.assertEqual(inst.payeeType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payeetype\")\n        self.assertEqual(inst.payment.adjustment.currency, \"USD\")\n        self.assertEqual(inst.payment.adjustment.value, 75.0)\n        self.assertEqual(inst.payment.adjustmentReason.coding[0].code, \"a002\")\n        self.assertEqual(inst.payment.adjustmentReason.coding[0].display, \"Prior Overpayment\")\n        self.assertEqual(inst.payment.adjustmentReason.coding[0].system, \"http://terminology.hl7.org/CodeSystem/payment-adjustment-reason\")\n        self.assertEqual(inst.payment.amount.currency, \"USD\")\n        self.assertEqual(inst.payment.amount.value, 107.0)\n        self.assertEqual(inst.payment.date.date, FHIRDate(\"2014-08-16\").date)\n        self.assertEqual(inst.payment.date.as_json(), \"2014-08-16\")\n        self.assertEqual(inst.payment.identifier.system, \"http://thebenefitcompany.com/paymentidentifier\")\n        self.assertEqual(inst.payment.identifier.value, \"201416-123456\")\n        self.assertEqual(inst.payment.type.coding[0].code, \"complete\")\n        self.assertEqual(inst.payment.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-paymenttype\")\n        self.assertEqual(inst.processNote[0].language.coding[0].code, \"en-CA\")\n        self.assertEqual(inst.processNote[0].language.coding[0].system, \"urn:ietf:bcp:47\")\n        self.assertEqual(inst.processNote[0].number, 1)\n        self.assertEqual(inst.processNote[0].text, \"After hours surcharge declined\")\n        self.assertEqual(inst.processNote[0].type, \"display\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the ClaimResponse</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.total[0].amount.currency, \"USD\")\n        self.assertEqual(inst.total[0].amount.value, 235.4)\n        self.assertEqual(inst.total[0].category.coding[0].code, \"submitted\")\n        self.assertEqual(inst.total[1].amount.currency, \"USD\")\n        self.assertEqual(inst.total[1].amount.value, 182.0)\n        self.assertEqual(inst.total[1].category.coding[0].code, \"benefit\")\n        self.assertEqual(inst.type.coding[0].code, \"vision\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/claim-type\")\n        self.assertEqual(inst.use, \"claim\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/claimresponse.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ClaimResponse).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ClaimResponse(domainresource.DomainResource):\n    \"\"\" Response to a claim predetermination or preauthorization.\n    \n    This resource provides the adjudication details from the processing of a\n    Claim resource.\n    \"\"\"\n    \n    resource_type = \"ClaimResponse\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.addItem = None\n        \"\"\" Insurer added line items.\n        List of `ClaimResponseAddItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Header-level adjudication.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.communicationRequest = None\n        \"\"\" Request for additional information.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.created = None\n        \"\"\" Response creation date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.disposition = None\n        \"\"\" Disposition Message.\n        Type `str`. \"\"\"\n        \n        self.error = None\n        \"\"\" Processing errors.\n        List of `ClaimResponseError` items (represented as `dict` in JSON). \"\"\"\n        \n        self.form = None\n        \"\"\" Printed reference or actual form.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.formCode = None\n        \"\"\" Printed form identifier.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.fundsReserve = None\n        \"\"\" Funds reserved status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for a claim response.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurance = None\n        \"\"\" Patient insurance information.\n        List of `ClaimResponseInsurance` items (represented as `dict` in JSON). \"\"\"\n        \n        self.insurer = None\n        \"\"\" Party responsible for reimbursement.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Adjudication for claim line items.\n        List of `ClaimResponseItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.outcome = None\n        \"\"\" queued | complete | error | partial.\n        Type `str`. \"\"\"\n        \n        self.patient = None\n        \"\"\" The recipient of the products and services.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.payeeType = None\n        \"\"\" Party to be paid any benefits payable.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.payment = None\n        \"\"\" Payment Details.\n        Type `ClaimResponsePayment` (represented as `dict` in JSON). \"\"\"\n        \n        self.preAuthPeriod = None\n        \"\"\" Preauthorization reference effective period.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.preAuthRef = None\n        \"\"\" Preauthorization reference.\n        Type `str`. \"\"\"\n        \n        self.processNote = None\n        \"\"\" Note concerning adjudication.\n        List of `ClaimResponseProcessNote` items (represented as `dict` in JSON). \"\"\"\n        \n        self.request = None\n        \"\"\" Id of resource triggering adjudication.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.requestor = None\n        \"\"\" Party responsible for the claim.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | cancelled | draft | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.subType = None\n        \"\"\" More granular claim type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.total = None\n        \"\"\" Adjudication totals.\n        List of `ClaimResponseTotal` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" More granular claim type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.use = None\n        \"\"\" claim | preauthorization | predetermination.\n        Type `str`. \"\"\"\n        \n        super(ClaimResponse, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponse, self).elementProperties()\n        js.extend([\n            (\"addItem\", \"addItem\", ClaimResponseAddItem, True, None, False),\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, False),\n            (\"communicationRequest\", \"communicationRequest\", fhirreference.FHIRReference, True, None, False),\n            (\"created\", \"created\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"disposition\", \"disposition\", str, False, None, False),\n            (\"error\", \"error\", ClaimResponseError, True, None, False),\n            (\"form\", \"form\", attachment.Attachment, False, None, False),\n            (\"formCode\", \"formCode\", codeableconcept.CodeableConcept, False, None, False),\n            (\"fundsReserve\", \"fundsReserve\", codeableconcept.CodeableConcept, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"insurance\", \"insurance\", ClaimResponseInsurance, True, None, False),\n            (\"insurer\", \"insurer\", fhirreference.FHIRReference, False, None, True),\n            (\"item\", \"item\", ClaimResponseItem, True, None, False),\n            (\"outcome\", \"outcome\", str, False, None, True),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"payeeType\", \"payeeType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"payment\", \"payment\", ClaimResponsePayment, False, None, False),\n            (\"preAuthPeriod\", \"preAuthPeriod\", period.Period, False, None, False),\n            (\"preAuthRef\", \"preAuthRef\", str, False, None, False),\n            (\"processNote\", \"processNote\", ClaimResponseProcessNote, True, None, False),\n            (\"request\", \"request\", fhirreference.FHIRReference, False, None, False),\n            (\"requestor\", \"requestor\", fhirreference.FHIRReference, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subType\", \"subType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"total\", \"total\", ClaimResponseTotal, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"use\", \"use\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ClaimResponseAddItem(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The first-tier service adjudications for payor added product or service\n    lines.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseAddItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items adjudication.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" Anatomical location.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Insurer added line details.\n        List of `ClaimResponseAddItemDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.detailSequence = None\n        \"\"\" Detail sequence number.\n        List of `int` items. \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.itemSequence = None\n        \"\"\" Item sequence number.\n        List of `int` items. \"\"\"\n        \n        self.locationAddress = None\n        \"\"\" Place of service or where product was supplied.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationCodeableConcept = None\n        \"\"\" Place of service or where product was supplied.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.locationReference = None\n        \"\"\" Place of service or where product was supplied.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.programCode = None\n        \"\"\" Program the product or service is provided under.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.provider = None\n        \"\"\" Authorized providers.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.servicedDate = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.servicedPeriod = None\n        \"\"\" Date or dates of service or product delivery.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.subSite = None\n        \"\"\" Anatomical sub-location.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subdetailSequence = None\n        \"\"\" Subdetail sequence number.\n        List of `int` items. \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponseAddItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseAddItem, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, True),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, False, None, False),\n            (\"detail\", \"detail\", ClaimResponseAddItemDetail, True, None, False),\n            (\"detailSequence\", \"detailSequence\", int, True, None, False),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"itemSequence\", \"itemSequence\", int, True, None, False),\n            (\"locationAddress\", \"locationAddress\", address.Address, False, \"location\", False),\n            (\"locationCodeableConcept\", \"locationCodeableConcept\", codeableconcept.CodeableConcept, False, \"location\", False),\n            (\"locationReference\", \"locationReference\", fhirreference.FHIRReference, False, \"location\", False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"programCode\", \"programCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"provider\", \"provider\", fhirreference.FHIRReference, True, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"servicedDate\", \"servicedDate\", fhirdate.FHIRDate, False, \"serviced\", False),\n            (\"servicedPeriod\", \"servicedPeriod\", period.Period, False, \"serviced\", False),\n            (\"subSite\", \"subSite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"subdetailSequence\", \"subdetailSequence\", int, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseAddItemDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line details.\n    \n    The second-tier service adjudications for payor added services.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseAddItemDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items detail adjudication.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.subDetail = None\n        \"\"\" Insurer added line items.\n        List of `ClaimResponseAddItemDetailSubDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponseAddItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseAddItemDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, True),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"subDetail\", \"subDetail\", ClaimResponseAddItemDetailSubDetail, True, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseAddItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The third-tier service adjudications for payor added services.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseAddItemDetailSubDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Added items detail adjudication.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.factor = None\n        \"\"\" Price scaling factor.\n        Type `float`. \"\"\"\n        \n        self.modifier = None\n        \"\"\" Service/Product billing modifiers.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.net = None\n        \"\"\" Total item cost.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.productOrService = None\n        \"\"\" Billing, service, product, or drug code.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" Count of products or services.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.unitPrice = None\n        \"\"\" Fee, charge or cost per item.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponseAddItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseAddItemDetailSubDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, True),\n            (\"factor\", \"factor\", float, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"net\", \"net\", money.Money, False, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"productOrService\", \"productOrService\", codeableconcept.CodeableConcept, False, None, True),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"unitPrice\", \"unitPrice\", money.Money, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseError(backboneelement.BackboneElement):\n    \"\"\" Processing errors.\n    \n    Errors encountered during the processing of the adjudication.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseError\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Error code detailing processing issues.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailSequence = None\n        \"\"\" Detail sequence number.\n        Type `int`. \"\"\"\n        \n        self.itemSequence = None\n        \"\"\" Item sequence number.\n        Type `int`. \"\"\"\n        \n        self.subDetailSequence = None\n        \"\"\" Subdetail sequence number.\n        Type `int`. \"\"\"\n        \n        super(ClaimResponseError, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseError, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"detailSequence\", \"detailSequence\", int, False, None, False),\n            (\"itemSequence\", \"itemSequence\", int, False, None, False),\n            (\"subDetailSequence\", \"subDetailSequence\", int, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services specified on the claim.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseInsurance\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.businessArrangement = None\n        \"\"\" Additional provider contract number.\n        Type `str`. \"\"\"\n        \n        self.claimResponse = None\n        \"\"\" Adjudication results.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.coverage = None\n        \"\"\" Insurance information.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.focal = None\n        \"\"\" Coverage to be used for adjudication.\n        Type `bool`. \"\"\"\n        \n        self.sequence = None\n        \"\"\" Insurance instance identifier.\n        Type `int`. \"\"\"\n        \n        super(ClaimResponseInsurance, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseInsurance, self).elementProperties()\n        js.extend([\n            (\"businessArrangement\", \"businessArrangement\", str, False, None, False),\n            (\"claimResponse\", \"claimResponse\", fhirreference.FHIRReference, False, None, False),\n            (\"coverage\", \"coverage\", fhirreference.FHIRReference, False, None, True),\n            (\"focal\", \"focal\", bool, False, None, True),\n            (\"sequence\", \"sequence\", int, False, None, True),\n        ])\n        return js\n\n\nclass ClaimResponseItem(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim line items.\n    \n    A claim line. Either a simple (a product or service) or a 'group' of\n    details which can also be a simple items or groups of sub-details.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Adjudication details.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Adjudication for claim details.\n        List of `ClaimResponseItemDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.itemSequence = None\n        \"\"\" Claim item instance identifier.\n        Type `int`. \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        super(ClaimResponseItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseItem, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, True),\n            (\"detail\", \"detail\", ClaimResponseItemDetail, True, None, False),\n            (\"itemSequence\", \"itemSequence\", int, False, None, True),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseItemAdjudication(backboneelement.BackboneElement):\n    \"\"\" Adjudication details.\n    \n    If this item is a group then the values here are a summary of the\n    adjudication of the detail items. If this item is a simple product or\n    service then this is the result of the adjudication of this item.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseItemAdjudication\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Monetary amount.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Type of adjudication information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.reason = None\n        \"\"\" Explanation of adjudication outcome.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Non-monetary value.\n        Type `float`. \"\"\"\n        \n        super(ClaimResponseItemAdjudication, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseItemAdjudication, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", money.Money, False, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n            (\"reason\", \"reason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"value\", \"value\", float, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseItemDetail(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim details.\n    \n    A claim detail. Either a simple (a product or service) or a 'group' of sub-\n    details which are simple items.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseItemDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Detail level adjudication details.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.detailSequence = None\n        \"\"\" Claim detail instance identifier.\n        Type `int`. \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.subDetail = None\n        \"\"\" Adjudication for claim sub-details.\n        List of `ClaimResponseItemDetailSubDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponseItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseItemDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, True),\n            (\"detailSequence\", \"detailSequence\", int, False, None, True),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"subDetail\", \"subDetail\", ClaimResponseItemDetailSubDetail, True, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim sub-details.\n    \n    A sub-detail adjudication of a simple product or service.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseItemDetailSubDetail\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjudication = None\n        \"\"\" Subdetail level adjudication details.\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). \"\"\"\n        \n        self.noteNumber = None\n        \"\"\" Applicable note numbers.\n        List of `int` items. \"\"\"\n        \n        self.subDetailSequence = None\n        \"\"\" Claim sub-detail instance identifier.\n        Type `int`. \"\"\"\n        \n        super(ClaimResponseItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseItemDetailSubDetail, self).elementProperties()\n        js.extend([\n            (\"adjudication\", \"adjudication\", ClaimResponseItemAdjudication, True, None, False),\n            (\"noteNumber\", \"noteNumber\", int, True, None, False),\n            (\"subDetailSequence\", \"subDetailSequence\", int, False, None, True),\n        ])\n        return js\n\n\nclass ClaimResponsePayment(backboneelement.BackboneElement):\n    \"\"\" Payment Details.\n    \n    Payment details for the adjudication of the claim.\n    \"\"\"\n    \n    resource_type = \"ClaimResponsePayment\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.adjustment = None\n        \"\"\" Payment adjustment for non-claim issues.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.adjustmentReason = None\n        \"\"\" Explanation for the adjustment.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.amount = None\n        \"\"\" Payable amount after adjustment.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Expected date of payment.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier for the payment.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Partial or complete payment.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponsePayment, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponsePayment, self).elementProperties()\n        js.extend([\n            (\"adjustment\", \"adjustment\", money.Money, False, None, False),\n            (\"adjustmentReason\", \"adjustmentReason\", codeableconcept.CodeableConcept, False, None, False),\n            (\"amount\", \"amount\", money.Money, False, None, True),\n            (\"date\", \"date\", fhirdate.FHIRDate, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass ClaimResponseProcessNote(backboneelement.BackboneElement):\n    \"\"\" Note concerning adjudication.\n    \n    A note that describes or explains adjudication results in a human readable\n    form.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseProcessNote\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the text.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.number = None\n        \"\"\" Note instance identifier.\n        Type `int`. \"\"\"\n        \n        self.text = None\n        \"\"\" Note explanatory text.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" display | print | printoper.\n        Type `str`. \"\"\"\n        \n        super(ClaimResponseProcessNote, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseProcessNote, self).elementProperties()\n        js.extend([\n            (\"language\", \"language\", codeableconcept.CodeableConcept, False, None, False),\n            (\"number\", \"number\", int, False, None, False),\n            (\"text\", \"text\", str, False, None, True),\n            (\"type\", \"type\", str, False, None, False),\n        ])\n        return js\n\n\nclass ClaimResponseTotal(backboneelement.BackboneElement):\n    \"\"\" Adjudication totals.\n    \n    Categorized monetary totals for the adjudication.\n    \"\"\"\n    \n    resource_type = \"ClaimResponseTotal\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Financial total for the category.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" Type of adjudication information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ClaimResponseTotal, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ClaimResponseTotal, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", money.Money, False, None, True),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance, parsing and validating a FHIR-compliant date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. If None, the instance initializes with no date.\n\nRaises:\n- TypeError: If jsonval is provided but is not a string.\n- ValueError: If the provided jsonval does not match the expected date format as defined by the regular expression _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation derived from jsonval.\n- origval (Union[str, None]): Keeps the original input string for reference.\n\nConstants:\n- _REGEX: A compiled regular expression that defines the valid formats for FHIR dates, ensuring that only correctly structured date strings are accepted.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance, parsing and validating a FHIR-compliant date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. If None, the instance initializes with no date.\n\nRaises:\n- TypeError: If jsonval is provided but is not a string.\n- ValueError: If the provided jsonval does not match the expected date format as defined by the regular expression _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation derived from jsonval.\n- origval (Union[str, None]): Keeps the original input string for reference.\n\nConstants:\n- _REGEX: A compiled regular expression that defines the valid formats for FHIR dates, ensuring that only correctly structured date strings are accepted.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance, if available. If the original JSON string (`origval`) is not set, it falls back to the standardized ISO 8601 representation of the date (`isostring`). The `isostring` may not fully match the input JSON if it included partial dates. This method interacts with the `origval` attribute, which stores the input JSON value, and the `isostring` property that formats the internal `date` representation.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance, if available. If the original JSON string (`origval`) is not set, it falls back to the standardized ISO 8601 representation of the date (`isostring`). The `isostring` may not fully match the input JSON if it included partial dates. This method interacts with the `origval` attribute, which stores the input JSON value, and the `isostring` property that formats the internal `date` representation.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/claimresponse.py": {
      "ClaimResponse.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a ClaimResponse resource representing a response to a claim predetermination or preauthorization. This constructor sets up various properties to capture the details of the claim adjudication including items added by the insurer, adjudication results, payment details, and other relevant information.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the resource's properties. If provided, the attributes of the ClaimResponse instance will be populated with corresponding values from this dictionary.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a FHIRValidationError. If set to False, such properties will be ignored.\n\nAttributes:\n- addItem: Insurer added line items as a list of ClaimResponseAddItem instances.\n- adjudication: Header-level adjudication details as a list of ClaimResponseItemAdjudication instances.\n- communicationRequest: Requests for additional information as a list of FHIRReference items.\n- created: Date when the response was created, as a FHIRDateTime.\n- disposition: Message detailing the outcome of the claim.\n- error: Processing errors encountered during adjudication as a list of ClaimResponseError instances.\n- form: Attachment containing printed reference or form details.\n- fundsReserve: Status of funds reserved represented as a CodeableConcept.\n- identifier: Business identifiers for this claim response as a list of Identifier items.\n- insurance: Patient insurance information as a list of ClaimResponseInsurance instances.\n- insurer: Reference to the party responsible for reimbursement.\n- item: Adjudicated claim line items as a list of ClaimResponseItem instances.\n- outcome: Status of the claim, indicating whether it is queued, complete, error, or partial.\n- patient: Reference to the recipient of the products and services.\n- payeeType: CodeableConcept for the party to receive payables.\n- payment: Details regarding payment for the claim as a ClaimResponsePayment instance.\n- preAuthPeriod: Reference period for preauthorization.\n- preAuthRef: Identifier for preauthorization.\n- processNote: Notes regarding adjudication as a list of ClaimResponseProcessNote instances.\n- request: Reference to the resource triggering adjudication.\n- requestor: Reference to the party responsible for the claim.\n- status: Current status of the claim response (e.g., active, cancelled, draft).\n- total: Monetary totals for the adjudication as a list of ClaimResponseTotal instances.\n- type: More granular claim type as a CodeableConcept.\n- use: Type of claim indicating whether it is a claim, preauthorization, or predetermination.\n\nThe constructor calls the superclass (DomainResource) constructor to ensure proper initialization of any inherited attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.addItem = None\n        ' Insurer added line items.\\n        List of `ClaimResponseAddItem` items (represented as `dict` in JSON). '\n        self.adjudication = None\n        ' Header-level adjudication.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.communicationRequest = None\n        ' Request for additional information.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.created = None\n        ' Response creation date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.disposition = None\n        ' Disposition Message.\\n        Type `str`. '\n        self.error = None\n        ' Processing errors.\\n        List of `ClaimResponseError` items (represented as `dict` in JSON). '\n        self.form = None\n        ' Printed reference or actual form.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.formCode = None\n        ' Printed form identifier.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.fundsReserve = None\n        ' Funds reserved status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for a claim response.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.insurance = None\n        ' Patient insurance information.\\n        List of `ClaimResponseInsurance` items (represented as `dict` in JSON). '\n        self.insurer = None\n        ' Party responsible for reimbursement.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.item = None\n        ' Adjudication for claim line items.\\n        List of `ClaimResponseItem` items (represented as `dict` in JSON). '\n        self.outcome = None\n        ' queued | complete | error | partial.\\n        Type `str`. '\n        self.patient = None\n        ' The recipient of the products and services.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.payeeType = None\n        ' Party to be paid any benefits payable.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.payment = None\n        ' Payment Details.\\n        Type `ClaimResponsePayment` (represented as `dict` in JSON). '\n        self.preAuthPeriod = None\n        ' Preauthorization reference effective period.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.preAuthRef = None\n        ' Preauthorization reference.\\n        Type `str`. '\n        self.processNote = None\n        ' Note concerning adjudication.\\n        List of `ClaimResponseProcessNote` items (represented as `dict` in JSON). '\n        self.request = None\n        ' Id of resource triggering adjudication.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.requestor = None\n        ' Party responsible for the claim.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | cancelled | draft | entered-in-error.\\n        Type `str`. '\n        self.subType = None\n        ' More granular claim type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.total = None\n        ' Adjudication totals.\\n        List of `ClaimResponseTotal` items (represented as `dict` in JSON). '\n        self.type = None\n        ' More granular claim type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.use = None\n        ' claim | preauthorization | predetermination.\\n        Type `str`. '\n        super(ClaimResponse, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a ClaimResponse resource representing a response to a claim predetermination or preauthorization. This constructor sets up various properties to capture the details of the claim adjudication including items added by the insurer, adjudication results, payment details, and other relevant information.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the resource's properties. If provided, the attributes of the ClaimResponse instance will be populated with corresponding values from this dictionary.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a FHIRValidationError. If set to False, such properties will be ignored.\n\nAttributes:\n- addItem: Insurer added line items as a list of ClaimResponseAddItem instances.\n- adjudication: Header-level adjudication details as a list of ClaimResponseItemAdjudication instances.\n- communicationRequest: Requests for additional information as a list of FHIRReference items.\n- created: Date when the response was created, as a FHIRDateTime.\n- disposition: Message detailing the outcome of the claim.\n- error: Processing errors encountered during adjudication as a list of ClaimResponseError instances.\n- form: Attachment containing printed reference or form details.\n- fundsReserve: Status of funds reserved represented as a CodeableConcept.\n- identifier: Business identifiers for this claim response as a list of Identifier items.\n- insurance: Patient insurance information as a list of ClaimResponseInsurance instances.\n- insurer: Reference to the party responsible for reimbursement.\n- item: Adjudicated claim line items as a list of ClaimResponseItem instances.\n- outcome: Status of the claim, indicating whether it is queued, complete, error, or partial.\n- patient: Reference to the recipient of the products and services.\n- payeeType: CodeableConcept for the party to receive payables.\n- payment: Details regarding payment for the claim as a ClaimResponsePayment instance.\n- preAuthPeriod: Reference period for preauthorization.\n- preAuthRef: Identifier for preauthorization.\n- processNote: Notes regarding adjudication as a list of ClaimResponseProcessNote instances.\n- request: Reference to the resource triggering adjudication.\n- requestor: Reference to the party responsible for the claim.\n- status: Current status of the claim response (e.g., active, cancelled, draft).\n- total: Monetary totals for the adjudication as a list of ClaimResponseTotal instances.\n- type: More granular claim type as a CodeableConcept.\n- use: Type of claim indicating whether it is a claim, preauthorization, or predetermination.\n\nThe constructor calls the superclass (DomainResource) constructor to ensure proper initialization of any inherited attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ClaimResponse(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime. It initializes a `datetime` attribute to store a corresponding Python datetime object while ensuring backward compatibility with the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representing the FHIR datetime. Defaults to None.\n\nReturns:\nNone. Initializes an instance of FHIRDateTime.\n\nDependencies:\n- Inherits from the FHIRDate class, which is responsible for the JSON parsing through its constructor. The `_from_string` static method is defined to specifically handle parsing string inputs into datetime objects.\n- Utilizes Python's `datetime` module for handling datetime representations.\n\nAttributes:\n- `datetime`: A Union type attribute (either a `datetime.datetime` object or None) that holds the equivalent Python representation of the provided JSON FHIR datetime.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime. It initializes a `datetime` attribute to store a corresponding Python datetime object while ensuring backward compatibility with the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representing the FHIR datetime. Defaults to None.\n\nReturns:\nNone. Initializes an instance of FHIRDateTime.\n\nDependencies:\n- Inherits from the FHIRDate class, which is responsible for the JSON parsing through its constructor. The `_from_string` static method is defined to specifically handle parsing string inputs into datetime objects.\n- Utilizes Python's `datetime` module for handling datetime representations.\n\nAttributes:\n- `datetime`: A Union type attribute (either a `datetime.datetime` object or None) that holds the equivalent Python representation of the provided JSON FHIR datetime.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the as_json method from the superclass FHIRAbstractBase.\nIt constructs a JSON dictionary that includes all attributes of the instance and adds the 'resourceType' key with the value set to the instance's resource_type. This ensures that the JSON representation is compliant with FHIR's expected format for resources.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance in JSON format, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from FHIRAbstractBase's as_json method to gather instance attributes.\n    - Uses the resource_type attribute, defined at the class level, to set the 'resourceType' in the JSON output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the as_json method from the superclass FHIRAbstractBase.\nIt constructs a JSON dictionary that includes all attributes of the instance and adds the 'resourceType' key with the value set to the instance's resource_type. This ensures that the JSON representation is compliant with FHIR's expected format for resources.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance in JSON format, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from FHIRAbstractBase's as_json method to gather instance attributes.\n    - Uses the resource_type attribute, defined at the class level, to set the 'resourceType' in the JSON output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/claimresponse_test.py:ClaimResponseTests:testClaimResponse1": {
      "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
        "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/claimresponse_test.py:ClaimResponseTests:implClaimResponse1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/claimresponse_test.py:ClaimResponseTests:testClaimResponse2": {
      "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
        "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/claimresponse_test.py:ClaimResponseTests:implClaimResponse2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/claimresponse_test.py:ClaimResponseTests:testClaimResponse3": {
      "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
        "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/claimresponse_test.py:ClaimResponseTests:implClaimResponse3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/claimresponse_test.py:ClaimResponseTests:testClaimResponse4": {
      "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
        "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/claimresponse_test.py:ClaimResponseTests:implClaimResponse4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/claimresponse_test.py:ClaimResponseTests:testClaimResponse5": {
      "tests/models/claimresponse_test.py:ClaimResponseTests:instantiate_from": {
        "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/claimresponse_test.py:ClaimResponseTests:implClaimResponse5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/claimresponse.py:ClaimResponse:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/claimresponse.py:ClaimResponse:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-claimresponse_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 claimresponse.py\n        \u2502   \u2514\u2500\u2500 ClaimResponse.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and verification of FHIR (Fast Healthcare Interoperability Resources) `ClaimResponse` resources, as defined by the FHIR 4.0.1 specification. It provides functionality for instantiating, parsing, and validating `ClaimResponse` objects, ensuring compliance with the FHIR standard and enabling the examination of claim adjudication and processing outcomes. By supporting capabilities such as resource structure validation, inspection of adjudication results, and detailed field-level assertions, the module allows developers and healthcare applications to ensure the correctness and integrity of electronic claims exchange in contexts like insurance reimbursements and prior authorizations. This solves the challenge of standardizing and verifying claims processing across diverse healthcare systems, reducing errors, and promoting interoperability.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance, parsing and validating a FHIR-compliant date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR date in ISO 8601 format. If None, the instance initializes with no date.\n\nRaises:\n- TypeError: If jsonval is provided but is not a string.\n- ValueError: If the provided jsonval does not match the expected date format as defined by the regular expression _REGEX.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation derived from jsonval.\n- origval (Union[str, None]): Keeps the original input string for reference.\n\nConstants:\n- _REGEX: A compiled regular expression that defines the valid formats for FHIR dates, ensuring that only correctly structured date strings are accepted.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance, if available. If the original JSON string (`origval`) is not set, it falls back to the standardized ISO 8601 representation of the date (`isostring`). The `isostring` may not fully match the input JSON if it included partial dates. This method interacts with the `origval` attribute, which stores the input JSON value, and the `isostring` property that formats the internal `date` representation.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/claimresponse.py\n\n- CLASS METHOD: ClaimResponse.__init__\n  - CLASS SIGNATURE: class ClaimResponse(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a ClaimResponse resource representing a response to a claim predetermination or preauthorization. This constructor sets up various properties to capture the details of the claim adjudication including items added by the insurer, adjudication results, payment details, and other relevant information.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization of the resource's properties. If provided, the attributes of the ClaimResponse instance will be populated with corresponding values from this dictionary.\n- strict (bool, optional): If set to True (default), any invalid properties in the jsondict will raise a FHIRValidationError. If set to False, such properties will be ignored.\n\nAttributes:\n- addItem: Insurer added line items as a list of ClaimResponseAddItem instances.\n- adjudication: Header-level adjudication details as a list of ClaimResponseItemAdjudication instances.\n- communicationRequest: Requests for additional information as a list of FHIRReference items.\n- created: Date when the response was created, as a FHIRDateTime.\n- disposition: Message detailing the outcome of the claim.\n- error: Processing errors encountered during adjudication as a list of ClaimResponseError instances.\n- form: Attachment containing printed reference or form details.\n- fundsReserve: Status of funds reserved represented as a CodeableConcept.\n- identifier: Business identifiers for this claim response as a list of Identifier items.\n- insurance: Patient insurance information as a list of ClaimResponseInsurance instances.\n- insurer: Reference to the party responsible for reimbursement.\n- item: Adjudicated claim line items as a list of ClaimResponseItem instances.\n- outcome: Status of the claim, indicating whether it is queued, complete, error, or partial.\n- patient: Reference to the recipient of the products and services.\n- payeeType: CodeableConcept for the party to receive payables.\n- payment: Details regarding payment for the claim as a ClaimResponsePayment instance.\n- preAuthPeriod: Reference period for preauthorization.\n- preAuthRef: Identifier for preauthorization.\n- processNote: Notes regarding adjudication as a list of ClaimResponseProcessNote instances.\n- request: Reference to the resource triggering adjudication.\n- requestor: Reference to the party responsible for the claim.\n- status: Current status of the claim response (e.g., active, cancelled, draft).\n- total: Monetary totals for the adjudication as a list of ClaimResponseTotal instances.\n- type: More granular claim type as a CodeableConcept.\n- use: Type of claim indicating whether it is a claim, preauthorization, or predetermination.\n\nThe constructor calls the superclass (DomainResource) constructor to ensure proper initialization of any inherited attributes.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime. It initializes a `datetime` attribute to store a corresponding Python datetime object while ensuring backward compatibility with the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representing the FHIR datetime. Defaults to None.\n\nReturns:\nNone. Initializes an instance of FHIRDateTime.\n\nDependencies:\n- Inherits from the FHIRDate class, which is responsible for the JSON parsing through its constructor. The `_from_string` static method is defined to specifically handle parsing string inputs into datetime objects.\n- Utilizes Python's `datetime` module for handling datetime representations.\n\nAttributes:\n- `datetime`: A Union type attribute (either a `datetime.datetime` object or None) that holds the equivalent Python representation of the provided JSON FHIR datetime.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON representation.\n\nThis method overrides the as_json method from the superclass FHIRAbstractBase.\nIt constructs a JSON dictionary that includes all attributes of the instance and adds the 'resourceType' key with the value set to the instance's resource_type. This ensures that the JSON representation is compliant with FHIR's expected format for resources.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance in JSON format, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from FHIRAbstractBase's as_json method to gather instance attributes.\n    - Uses the resource_type attribute, defined at the class level, to set the 'resourceType' in the JSON output.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/claimresponse.py": "from . import domainresource\n\nclass ClaimResponse(domainresource.DomainResource):\n    \"\"\" Response to a claim predetermination or preauthorization.\n    \n    This resource provides the adjudication details from the processing of a\n    Claim resource.\n    \"\"\"\n    resource_type = 'ClaimResponse'\n\n    def elementProperties(self):\n        js = super(ClaimResponse, self).elementProperties()\n        js.extend([('addItem', 'addItem', ClaimResponseAddItem, True, None, False), ('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, False), ('communicationRequest', 'communicationRequest', fhirreference.FHIRReference, True, None, False), ('created', 'created', fhirdatetime.FHIRDateTime, False, None, True), ('disposition', 'disposition', str, False, None, False), ('error', 'error', ClaimResponseError, True, None, False), ('form', 'form', attachment.Attachment, False, None, False), ('formCode', 'formCode', codeableconcept.CodeableConcept, False, None, False), ('fundsReserve', 'fundsReserve', codeableconcept.CodeableConcept, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('insurance', 'insurance', ClaimResponseInsurance, True, None, False), ('insurer', 'insurer', fhirreference.FHIRReference, False, None, True), ('item', 'item', ClaimResponseItem, True, None, False), ('outcome', 'outcome', str, False, None, True), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('payeeType', 'payeeType', codeableconcept.CodeableConcept, False, None, False), ('payment', 'payment', ClaimResponsePayment, False, None, False), ('preAuthPeriod', 'preAuthPeriod', period.Period, False, None, False), ('preAuthRef', 'preAuthRef', str, False, None, False), ('processNote', 'processNote', ClaimResponseProcessNote, True, None, False), ('request', 'request', fhirreference.FHIRReference, False, None, False), ('requestor', 'requestor', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subType', 'subType', codeableconcept.CodeableConcept, False, None, False), ('total', 'total', ClaimResponseTotal, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('use', 'use', str, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass ClaimResponseAddItem(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The first-tier service adjudications for payor added product or service\n    lines.\n    \"\"\"\n    resource_type = 'ClaimResponseAddItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items adjudication.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' Anatomical location.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detail = None\n        ' Insurer added line details.\\n        List of `ClaimResponseAddItemDetail` items (represented as `dict` in JSON). '\n        self.detailSequence = None\n        ' Detail sequence number.\\n        List of `int` items. '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.itemSequence = None\n        ' Item sequence number.\\n        List of `int` items. '\n        self.locationAddress = None\n        ' Place of service or where product was supplied.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.locationCodeableConcept = None\n        ' Place of service or where product was supplied.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.locationReference = None\n        ' Place of service or where product was supplied.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.programCode = None\n        ' Program the product or service is provided under.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.provider = None\n        ' Authorized providers.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.servicedDate = None\n        ' Date or dates of service or product delivery.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.servicedPeriod = None\n        ' Date or dates of service or product delivery.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.subSite = None\n        ' Anatomical sub-location.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.subdetailSequence = None\n        ' Subdetail sequence number.\\n        List of `int` items. '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ClaimResponseAddItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseAddItem, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, True), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, False, None, False), ('detail', 'detail', ClaimResponseAddItemDetail, True, None, False), ('detailSequence', 'detailSequence', int, True, None, False), ('factor', 'factor', float, False, None, False), ('itemSequence', 'itemSequence', int, True, None, False), ('locationAddress', 'locationAddress', address.Address, False, 'location', False), ('locationCodeableConcept', 'locationCodeableConcept', codeableconcept.CodeableConcept, False, 'location', False), ('locationReference', 'locationReference', fhirreference.FHIRReference, False, 'location', False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('programCode', 'programCode', codeableconcept.CodeableConcept, True, None, False), ('provider', 'provider', fhirreference.FHIRReference, True, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('servicedDate', 'servicedDate', fhirdate.FHIRDate, False, 'serviced', False), ('servicedPeriod', 'servicedPeriod', period.Period, False, 'serviced', False), ('subSite', 'subSite', codeableconcept.CodeableConcept, True, None, False), ('subdetailSequence', 'subdetailSequence', int, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ClaimResponseAddItemDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line details.\n    \n    The second-tier service adjudications for payor added services.\n    \"\"\"\n    resource_type = 'ClaimResponseAddItemDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items detail adjudication.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.subDetail = None\n        ' Insurer added line items.\\n        List of `ClaimResponseAddItemDetailSubDetail` items (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ClaimResponseAddItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseAddItemDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, True), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('subDetail', 'subDetail', ClaimResponseAddItemDetailSubDetail, True, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ClaimResponseAddItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Insurer added line items.\n    \n    The third-tier service adjudications for payor added services.\n    \"\"\"\n    resource_type = 'ClaimResponseAddItemDetailSubDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Added items detail adjudication.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.factor = None\n        ' Price scaling factor.\\n        Type `float`. '\n        self.modifier = None\n        ' Service/Product billing modifiers.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.net = None\n        ' Total item cost.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.productOrService = None\n        ' Billing, service, product, or drug code.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' Count of products or services.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.unitPrice = None\n        ' Fee, charge or cost per item.\\n        Type `Money` (represented as `dict` in JSON). '\n        super(ClaimResponseAddItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseAddItemDetailSubDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, True), ('factor', 'factor', float, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, True, None, False), ('net', 'net', money.Money, False, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('productOrService', 'productOrService', codeableconcept.CodeableConcept, False, None, True), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('unitPrice', 'unitPrice', money.Money, False, None, False)])\n        return js\n\nclass ClaimResponseError(backboneelement.BackboneElement):\n    \"\"\" Processing errors.\n    \n    Errors encountered during the processing of the adjudication.\n    \"\"\"\n    resource_type = 'ClaimResponseError'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Error code detailing processing issues.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detailSequence = None\n        ' Detail sequence number.\\n        Type `int`. '\n        self.itemSequence = None\n        ' Item sequence number.\\n        Type `int`. '\n        self.subDetailSequence = None\n        ' Subdetail sequence number.\\n        Type `int`. '\n        super(ClaimResponseError, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseError, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('detailSequence', 'detailSequence', int, False, None, False), ('itemSequence', 'itemSequence', int, False, None, False), ('subDetailSequence', 'subDetailSequence', int, False, None, False)])\n        return js\n\nclass ClaimResponseInsurance(backboneelement.BackboneElement):\n    \"\"\" Patient insurance information.\n    \n    Financial instruments for reimbursement for the health care products and\n    services specified on the claim.\n    \"\"\"\n    resource_type = 'ClaimResponseInsurance'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.businessArrangement = None\n        ' Additional provider contract number.\\n        Type `str`. '\n        self.claimResponse = None\n        ' Adjudication results.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.coverage = None\n        ' Insurance information.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.focal = None\n        ' Coverage to be used for adjudication.\\n        Type `bool`. '\n        self.sequence = None\n        ' Insurance instance identifier.\\n        Type `int`. '\n        super(ClaimResponseInsurance, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseInsurance, self).elementProperties()\n        js.extend([('businessArrangement', 'businessArrangement', str, False, None, False), ('claimResponse', 'claimResponse', fhirreference.FHIRReference, False, None, False), ('coverage', 'coverage', fhirreference.FHIRReference, False, None, True), ('focal', 'focal', bool, False, None, True), ('sequence', 'sequence', int, False, None, True)])\n        return js\n\nclass ClaimResponseItem(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim line items.\n    \n    A claim line. Either a simple (a product or service) or a 'group' of\n    details which can also be a simple items or groups of sub-details.\n    \"\"\"\n    resource_type = 'ClaimResponseItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Adjudication details.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.detail = None\n        ' Adjudication for claim details.\\n        List of `ClaimResponseItemDetail` items (represented as `dict` in JSON). '\n        self.itemSequence = None\n        ' Claim item instance identifier.\\n        Type `int`. '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        super(ClaimResponseItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseItem, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, True), ('detail', 'detail', ClaimResponseItemDetail, True, None, False), ('itemSequence', 'itemSequence', int, False, None, True), ('noteNumber', 'noteNumber', int, True, None, False)])\n        return js\n\nclass ClaimResponseItemAdjudication(backboneelement.BackboneElement):\n    \"\"\" Adjudication details.\n    \n    If this item is a group then the values here are a summary of the\n    adjudication of the detail items. If this item is a simple product or\n    service then this is the result of the adjudication of this item.\n    \"\"\"\n    resource_type = 'ClaimResponseItemAdjudication'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Monetary amount.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.category = None\n        ' Type of adjudication information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.reason = None\n        ' Explanation of adjudication outcome.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' Non-monetary value.\\n        Type `float`. '\n        super(ClaimResponseItemAdjudication, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseItemAdjudication, self).elementProperties()\n        js.extend([('amount', 'amount', money.Money, False, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, True), ('reason', 'reason', codeableconcept.CodeableConcept, False, None, False), ('value', 'value', float, False, None, False)])\n        return js\n\nclass ClaimResponseItemDetail(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim details.\n    \n    A claim detail. Either a simple (a product or service) or a 'group' of sub-\n    details which are simple items.\n    \"\"\"\n    resource_type = 'ClaimResponseItemDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Detail level adjudication details.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.detailSequence = None\n        ' Claim detail instance identifier.\\n        Type `int`. '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.subDetail = None\n        ' Adjudication for claim sub-details.\\n        List of `ClaimResponseItemDetailSubDetail` items (represented as `dict` in JSON). '\n        super(ClaimResponseItemDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseItemDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, True), ('detailSequence', 'detailSequence', int, False, None, True), ('noteNumber', 'noteNumber', int, True, None, False), ('subDetail', 'subDetail', ClaimResponseItemDetailSubDetail, True, None, False)])\n        return js\n\nclass ClaimResponseItemDetailSubDetail(backboneelement.BackboneElement):\n    \"\"\" Adjudication for claim sub-details.\n    \n    A sub-detail adjudication of a simple product or service.\n    \"\"\"\n    resource_type = 'ClaimResponseItemDetailSubDetail'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjudication = None\n        ' Subdetail level adjudication details.\\n        List of `ClaimResponseItemAdjudication` items (represented as `dict` in JSON). '\n        self.noteNumber = None\n        ' Applicable note numbers.\\n        List of `int` items. '\n        self.subDetailSequence = None\n        ' Claim sub-detail instance identifier.\\n        Type `int`. '\n        super(ClaimResponseItemDetailSubDetail, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseItemDetailSubDetail, self).elementProperties()\n        js.extend([('adjudication', 'adjudication', ClaimResponseItemAdjudication, True, None, False), ('noteNumber', 'noteNumber', int, True, None, False), ('subDetailSequence', 'subDetailSequence', int, False, None, True)])\n        return js\n\nclass ClaimResponsePayment(backboneelement.BackboneElement):\n    \"\"\" Payment Details.\n    \n    Payment details for the adjudication of the claim.\n    \"\"\"\n    resource_type = 'ClaimResponsePayment'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.adjustment = None\n        ' Payment adjustment for non-claim issues.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.adjustmentReason = None\n        ' Explanation for the adjustment.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.amount = None\n        ' Payable amount after adjustment.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.date = None\n        ' Expected date of payment.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.identifier = None\n        ' Business identifier for the payment.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.type = None\n        ' Partial or complete payment.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ClaimResponsePayment, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponsePayment, self).elementProperties()\n        js.extend([('adjustment', 'adjustment', money.Money, False, None, False), ('adjustmentReason', 'adjustmentReason', codeableconcept.CodeableConcept, False, None, False), ('amount', 'amount', money.Money, False, None, True), ('date', 'date', fhirdate.FHIRDate, False, None, False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass ClaimResponseProcessNote(backboneelement.BackboneElement):\n    \"\"\" Note concerning adjudication.\n    \n    A note that describes or explains adjudication results in a human readable\n    form.\n    \"\"\"\n    resource_type = 'ClaimResponseProcessNote'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.language = None\n        ' Language of the text.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.number = None\n        ' Note instance identifier.\\n        Type `int`. '\n        self.text = None\n        ' Note explanatory text.\\n        Type `str`. '\n        self.type = None\n        ' display | print | printoper.\\n        Type `str`. '\n        super(ClaimResponseProcessNote, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseProcessNote, self).elementProperties()\n        js.extend([('language', 'language', codeableconcept.CodeableConcept, False, None, False), ('number', 'number', int, False, None, False), ('text', 'text', str, False, None, True), ('type', 'type', str, False, None, False)])\n        return js\n\nclass ClaimResponseTotal(backboneelement.BackboneElement):\n    \"\"\" Adjudication totals.\n    \n    Categorized monetary totals for the adjudication.\n    \"\"\"\n    resource_type = 'ClaimResponseTotal'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Financial total for the category.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.category = None\n        ' Type of adjudication information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ClaimResponseTotal, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ClaimResponseTotal, self).elementProperties()\n        js.extend([('amount', 'amount', money.Money, False, None, True), ('category', 'category', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import address\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}