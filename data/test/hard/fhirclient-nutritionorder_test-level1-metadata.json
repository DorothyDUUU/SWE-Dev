{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-nutritionorder_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/nutritionorder_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import nutritionorder\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass NutritionOrderTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        return nutritionorder.NutritionOrder(js)\n    \n    def testNutritionOrder1(self):\n        inst = self.instantiate_from(\"nutritionorder-example-texture-modified.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder1(inst2)\n    \n    def implNutritionOrder1(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.id, \"texturemodified\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency, 3)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit, \"d\")\n        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].code, \"28647000\")\n        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].display, \"Meat\")\n        self.assertEqual(inst.oralDiet.texture[0].foodType.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.texture[0].foodType.text, \"Regular, Chopped Meat\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code, \"228049004\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display, \"Chopped food\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.text, \"Regular, Chopped Meat\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"435801000124108\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Texture modified diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1010\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"Texture modified diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"Texture modified diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder2(self):\n        inst = self.instantiate_from(\"nutritionorder-example-diabeticsupplement.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder2(inst2)\n    \n    def implNutritionOrder2(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"kosher\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"diabeticsupplement\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.supplement[0].productName, \"Glucerna\")\n        self.assertEqual(inst.supplement[0].quantity.unit, \"8 oz bottle\")\n        self.assertEqual(inst.supplement[0].quantity.value, 1)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10T15:00:00Z\").datetime)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10T15:00:00Z\")\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.frequency, 1)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.period, 24)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.periodUnit, \"h\")\n        self.assertEqual(inst.supplement[0].schedule[1].repeat.duration, 1)\n        self.assertEqual(inst.supplement[0].schedule[1].repeat.durationUnit, \"h\")\n        self.assertEqual(inst.supplement[0].schedule[1].repeat.when[0], \"HS\")\n        self.assertEqual(inst.supplement[0].type.coding[0].code, \"443051000124104\")\n        self.assertEqual(inst.supplement[0].type.coding[0].display, \"Adult diabetes specialty formula\")\n        self.assertEqual(inst.supplement[0].type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.supplement[0].type.coding[1].code, \"1010\")\n        self.assertEqual(inst.supplement[0].type.coding[1].display, \"Adult diabetic formula\")\n        self.assertEqual(inst.supplement[0].type.coding[1].system, \"http://goodhealthhospital.org/supplement-type-codes\")\n        self.assertEqual(inst.supplement[0].type.text, \"Adult diabetic formula\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder3(self):\n        inst = self.instantiate_from(\"nutritionorder-example-proteinsupplement.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder3(inst2)\n    \n    def implNutritionOrder3(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.id, \"proteinsupplement\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.supplement[0].instruction, \"Beneprotein 1 scoop TID with meal.starting on  2015-02-10\")\n        self.assertEqual(inst.supplement[0].productName, \"Beneprotein\")\n        self.assertEqual(inst.supplement[0].quantity.code, \"{scoop}\")\n        self.assertEqual(inst.supplement[0].quantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.supplement[0].quantity.unit, \"scoop\")\n        self.assertEqual(inst.supplement[0].quantity.value, 1)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.supplement[0].schedule[0].repeat.when[0], \"C\")\n        self.assertEqual(inst.supplement[0].type.coding[0].code, \"442991000124104\")\n        self.assertEqual(inst.supplement[0].type.coding[0].display, \"Adult high protein formula\")\n        self.assertEqual(inst.supplement[0].type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.supplement[0].type.coding[1].code, \"1000\")\n        self.assertEqual(inst.supplement[0].type.coding[1].display, \"High Protein Powder\")\n        self.assertEqual(inst.supplement[0].type.coding[1].system, \"http://goodhealthhospital.org/supplement-type-codes\")\n        self.assertEqual(inst.supplement[0].type.text, \"High Protein Powder\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder4(self):\n        inst = self.instantiate_from(\"nutritionorder-example-cardiacdiet.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder4(inst2)\n    \n    def implNutritionOrder4(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"dairy-free\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"cardiacdiet\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.instruction, \"Starting on 2/10 breakfast, maximum 400 ml fluids per meal\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.code, \"g\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit, \"grams\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 2)\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code, \"39972003\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display, \"Sodium\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.code, \"mL\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.unit, \"milliliter\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.value, 1500)\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].code, \"33463005\")\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].display, \"Fluid\")\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"386619000\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Low sodium diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1040\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"Low Sodium Diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"Low sodium diet\")\n        self.assertEqual(inst.oralDiet.type[1].coding[0].code, \"226208002\")\n        self.assertEqual(inst.oralDiet.type[1].coding[0].display, \"Fluid restricted diet\")\n        self.assertEqual(inst.oralDiet.type[1].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[1].coding[1].code, \"1040\")\n        self.assertEqual(inst.oralDiet.type[1].coding[1].display, \"Fluid restricted diet\")\n        self.assertEqual(inst.oralDiet.type[1].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[1].text, \"Fluid restricted diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder5(self):\n        inst = self.instantiate_from(\"nutritionorder-example-pureeddiet.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder5(inst2)\n    \n    def implNutritionOrder5(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"dairy-free\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"pureeddiet\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code, \"439021000124105\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display, \"Dietary liquid consistency - nectar thick liquid\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text, \"Nectar thick liquids\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency, 3)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit, \"d\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code, \"228055009\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display, \"Liquidized food\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.text, \"Pureed\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"226211001\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Pureed diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1010\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"Pureed diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"Pureed diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder6(self):\n        inst = self.instantiate_from(\"nutritionorder-example-diabeticdiet.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder6(inst2)\n    \n    def implNutritionOrder6(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"dairy-free\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"diabeticdiet\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.code, \"g\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit, \"grams\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 75)\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code, \"2331003\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display, \"Carbohydrate\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency, 3)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit, \"d\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"160670007\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Diabetic diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1030\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"DD - Diabetic diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"DD - Diabetic diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder7(self):\n        inst = self.instantiate_from(\"nutritionorder-example-renaldiet.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder7(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder7(inst2)\n    \n    def implNutritionOrder7(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"dairy-free\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"renaldiet\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.code, \"g\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.unit, \"grams\")\n        self.assertEqual(inst.oralDiet.nutrient[0].amount.value, 2)\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].code, \"39972003\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].display, \"Sodium\")\n        self.assertEqual(inst.oralDiet.nutrient[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.code, \"mg\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.unit, \"milligrams\")\n        self.assertEqual(inst.oralDiet.nutrient[1].amount.value, 1000)\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].code, \"30820000\")\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].display, \"Phosphorus\")\n        self.assertEqual(inst.oralDiet.nutrient[1].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.nutrient[2].amount.code, \"g\")\n        self.assertEqual(inst.oralDiet.nutrient[2].amount.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.oralDiet.nutrient[2].amount.unit, \"grams\")\n        self.assertEqual(inst.oralDiet.nutrient[2].amount.value, 2)\n        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].code, \"88480006\")\n        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].display, \"Potassium\")\n        self.assertEqual(inst.oralDiet.nutrient[2].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency, 3)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit, \"d\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"33489005\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Renal diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1050\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"Renal\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"Renal Diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder8(self):\n        inst = self.instantiate_from(\"nutritionorder-example-enteralbolus.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder8(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder8(inst2)\n    \n    def implNutritionOrder8(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.enteralFormula.additiveProductName, \"Acme Lipid Additive\")\n        self.assertEqual(inst.enteralFormula.additiveType.coding[0].code, \"lipid\")\n        self.assertEqual(inst.enteralFormula.additiveType.coding[0].display, \"Lipid\")\n        self.assertEqual(inst.enteralFormula.additiveType.coding[0].system, \"http://terminology.hl7.org/CodeSystem/entformula-additive\")\n        self.assertEqual(inst.enteralFormula.administrationInstruction, \"240 mls every 4hrs \")\n        self.assertEqual(inst.enteralFormula.administration[0].quantity.code, \"mL\")\n        self.assertEqual(inst.enteralFormula.administration[0].quantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.administration[0].quantity.unit, \"milliliters\")\n        self.assertEqual(inst.enteralFormula.administration[0].quantity.value, 240)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2014-09-17T16:00:00Z\").datetime)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.as_json(), \"2014-09-17T16:00:00Z\")\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.frequency, 1)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.period, 4)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.periodUnit, \"h\")\n        self.assertEqual(inst.enteralFormula.baseFormulaProductName, \"Acme High Protein Formula\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].code, \"442991000124104\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].display, \"Adult high protein formula\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.code, \"cal/mL\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.unit, \"calories per milliliter\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.value, 1.5)\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.code, \"mL/d\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.unit, \"milliliter/day\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.value, 1440)\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].code, \"GT\")\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].display, \"Instillation, gastrostomy tube\")\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].code, \"227493005\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].display, \"Cashew Nut\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.excludeFoodModifier[0].coding[0].version, \"20140730\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].code, \"dairy-free\")\n        self.assertEqual(inst.foodPreferenceModifier[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/diet\")\n        self.assertEqual(inst.id, \"enteralbolus\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.acme.org/nutritionorders\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder9(self):\n        inst = self.instantiate_from(\"nutritionorder-example-enteralcontinuous.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder9(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder9(inst2)\n    \n    def implNutritionOrder9(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.enteralFormula.administrationInstruction, \"Hold feedings from 7 pm to 7 am. Add MCT oil to increase calories from 1.0 cal/mL to 1.5 cal/mL\")\n        self.assertEqual(inst.enteralFormula.administration[0].rateQuantity.code, \"mL/h\")\n        self.assertEqual(inst.enteralFormula.administration[0].rateQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.administration[0].rateQuantity.unit, \"ml/hr\")\n        self.assertEqual(inst.enteralFormula.administration[0].rateQuantity.value, 60)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2014-09-17T07:00:00Z\").datetime)\n        self.assertEqual(inst.enteralFormula.administration[0].schedule.repeat.boundsPeriod.start.as_json(), \"2014-09-17T07:00:00Z\")\n        self.assertEqual(inst.enteralFormula.administration[1].rateQuantity.code, \"mL/h\")\n        self.assertEqual(inst.enteralFormula.administration[1].rateQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.administration[1].rateQuantity.unit, \"ml/hr\")\n        self.assertEqual(inst.enteralFormula.administration[1].rateQuantity.value, 80)\n        self.assertEqual(inst.enteralFormula.administration[1].schedule.repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2014-09-17T11:00:00Z\").datetime)\n        self.assertEqual(inst.enteralFormula.administration[1].schedule.repeat.boundsPeriod.start.as_json(), \"2014-09-17T11:00:00Z\")\n        self.assertEqual(inst.enteralFormula.administration[2].rateQuantity.code, \"mL/h\")\n        self.assertEqual(inst.enteralFormula.administration[2].rateQuantity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.administration[2].rateQuantity.unit, \"ml/hr\")\n        self.assertEqual(inst.enteralFormula.administration[2].rateQuantity.value, 100)\n        self.assertEqual(inst.enteralFormula.administration[2].schedule.repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2014-09-17T15:00:00Z\").datetime)\n        self.assertEqual(inst.enteralFormula.administration[2].schedule.repeat.boundsPeriod.start.as_json(), \"2014-09-17T15:00:00Z\")\n        self.assertEqual(inst.enteralFormula.baseFormulaProductName, \" Acme Diabetes Formula\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].code, \"6547210000124112\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].display, \"Diabetic specialty enteral formula\")\n        self.assertEqual(inst.enteralFormula.baseFormulaType.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.code, \"cal/mL\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.unit, \"calories per milliliter\")\n        self.assertEqual(inst.enteralFormula.caloricDensity.value, 1)\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.code, \"mL/d\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.system, \"http://unitsofmeasure.org\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.unit, \"milliliter/day\")\n        self.assertEqual(inst.enteralFormula.maxVolumeToDeliver.value, 880)\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].code, \"NGT\")\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].display, \"Instillation, nasogastric tube\")\n        self.assertEqual(inst.enteralFormula.routeofAdministration.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-RouteOfAdministration\")\n        self.assertEqual(inst.id, \"enteralcontinuous\")\n        self.assertEqual(inst.identifier[0].system, \"http://www.acme.org/nutritionorders\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testNutritionOrder10(self):\n        inst = self.instantiate_from(\"nutritionorder-example-pureeddiet-simple.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a NutritionOrder instance\")\n        self.implNutritionOrder10(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"NutritionOrder\", js[\"resourceType\"])\n        inst2 = nutritionorder.NutritionOrder(js)\n        self.implNutritionOrder10(inst2)\n    \n    def implNutritionOrder10(self, inst):\n        self.assertEqual(inst.dateTime.datetime, FHIRDateTime(\"2014-09-17\").datetime)\n        self.assertEqual(inst.dateTime.as_json(), \"2014-09-17\")\n        self.assertEqual(inst.id, \"pureeddiet-simple\")\n        self.assertEqual(inst.identifier[0].system, \"http://goodhealthhospital.org/nutrition-requests\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].code, \"439021000124105\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].display, \"Dietary liquid consistency - nectar thick liquid\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.fluidConsistencyType[0].text, \"Nectar thick liquids\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.datetime, FHIRDateTime(\"2015-02-10\").datetime)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.boundsPeriod.start.as_json(), \"2015-02-10\")\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.frequency, 3)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.period, 1)\n        self.assertEqual(inst.oralDiet.schedule[0].repeat.periodUnit, \"d\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].code, \"228055009\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].display, \"Liquidized food\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.texture[0].modifier.text, \"Pureed\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].code, \"226211001\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].display, \"Pureed diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].code, \"1010\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].display, \"Pureed diet\")\n        self.assertEqual(inst.oralDiet.type[0].coding[1].system, \"http://goodhealthhospital.org/diet-type-codes\")\n        self.assertEqual(inst.oralDiet.type[0].text, \"Pureed diet\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.supplement[0].instruction, \"Ensure Pudding at breakfast, lunch, supper\")\n        self.assertEqual(inst.supplement[0].productName, \"Ensure Pudding 4 oz container\")\n        self.assertEqual(inst.supplement[0].type.coding[0].code, \"442971000124100\")\n        self.assertEqual(inst.supplement[0].type.coding[0].display, \"Adult high energy formula\")\n        self.assertEqual(inst.supplement[0].type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.supplement[0].type.coding[1].code, \"1040\")\n        self.assertEqual(inst.supplement[0].type.coding[1].display, \"Adult high energy pudding\")\n        self.assertEqual(inst.supplement[0].type.coding[1].system, \"http://goodhealthhospital.org/supplement-type-codes\")\n        self.assertEqual(inst.supplement[0].type.text, \"Adult high energy pudding\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/nutritionorder.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/NutritionOrder).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass NutritionOrder(domainresource.DomainResource):\n    \"\"\" Diet, formula or nutritional supplement request.\n    \n    A request to supply a diet, formula feeding (enteral) or oral nutritional\n    supplement to a patient/resident.\n    \"\"\"\n    \n    resource_type = \"NutritionOrder\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allergyIntolerance = None\n        \"\"\" List of the patient's food and nutrition-related allergies and\n        intolerances.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dateTime = None\n        \"\"\" Date and time the nutrition order was requested.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" The encounter associated with this nutrition order.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.enteralFormula = None\n        \"\"\" Enteral formula components.\n        Type `NutritionOrderEnteralFormula` (represented as `dict` in JSON). \"\"\"\n        \n        self.excludeFoodModifier = None\n        \"\"\" Order-specific modifier about the type of food that should not be\n        given.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.foodPreferenceModifier = None\n        \"\"\" Order-specific modifier about the type of food that should be given.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Identifiers assigned to this order.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiates = None\n        \"\"\" Instantiates protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Instantiates FHIR protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Instantiates external protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.intent = None\n        \"\"\" proposal | plan | directive | order | original-order | reflex-order\n        | filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Comments.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.oralDiet = None\n        \"\"\" Oral diet components.\n        Type `NutritionOrderOralDiet` (represented as `dict` in JSON). \"\"\"\n        \n        self.orderer = None\n        \"\"\" Who ordered the diet, formula or nutritional supplement.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.patient = None\n        \"\"\" The person who requires the diet, formula or nutritional supplement.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | on-hold | revoked | completed | entered-in-error |\n        unknown.\n        Type `str`. \"\"\"\n        \n        self.supplement = None\n        \"\"\" Supplement components.\n        List of `NutritionOrderSupplement` items (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrder, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrder, self).elementProperties()\n        js.extend([\n            (\"allergyIntolerance\", \"allergyIntolerance\", fhirreference.FHIRReference, True, None, False),\n            (\"dateTime\", \"dateTime\", fhirdatetime.FHIRDateTime, False, None, True),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"enteralFormula\", \"enteralFormula\", NutritionOrderEnteralFormula, False, None, False),\n            (\"excludeFoodModifier\", \"excludeFoodModifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"foodPreferenceModifier\", \"foodPreferenceModifier\", codeableconcept.CodeableConcept, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instantiates\", \"instantiates\", str, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, True, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, True, None, False),\n            (\"intent\", \"intent\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"oralDiet\", \"oralDiet\", NutritionOrderOralDiet, False, None, False),\n            (\"orderer\", \"orderer\", fhirreference.FHIRReference, False, None, False),\n            (\"patient\", \"patient\", fhirreference.FHIRReference, False, None, True),\n            (\"status\", \"status\", str, False, None, True),\n            (\"supplement\", \"supplement\", NutritionOrderSupplement, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass NutritionOrderEnteralFormula(backboneelement.BackboneElement):\n    \"\"\" Enteral formula components.\n    \n    Feeding provided through the gastrointestinal tract via a tube, catheter,\n    or stoma that delivers nutrition distal to the oral cavity.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderEnteralFormula\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additiveProductName = None\n        \"\"\" Product or brand name of the modular additive.\n        Type `str`. \"\"\"\n        \n        self.additiveType = None\n        \"\"\" Type of modular component to add to the feeding.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.administration = None\n        \"\"\" Formula feeding instruction as structured data.\n        List of `NutritionOrderEnteralFormulaAdministration` items (represented as `dict` in JSON). \"\"\"\n        \n        self.administrationInstruction = None\n        \"\"\" Formula feeding instructions expressed as text.\n        Type `str`. \"\"\"\n        \n        self.baseFormulaProductName = None\n        \"\"\" Product or brand name of the enteral or infant formula.\n        Type `str`. \"\"\"\n        \n        self.baseFormulaType = None\n        \"\"\" Type of enteral or infant formula.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.caloricDensity = None\n        \"\"\" Amount of energy per specified volume that is required.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.maxVolumeToDeliver = None\n        \"\"\" Upper limit on formula volume per unit of time.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.routeofAdministration = None\n        \"\"\" How the formula should enter the patient's gastrointestinal tract.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderEnteralFormula, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderEnteralFormula, self).elementProperties()\n        js.extend([\n            (\"additiveProductName\", \"additiveProductName\", str, False, None, False),\n            (\"additiveType\", \"additiveType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"administration\", \"administration\", NutritionOrderEnteralFormulaAdministration, True, None, False),\n            (\"administrationInstruction\", \"administrationInstruction\", str, False, None, False),\n            (\"baseFormulaProductName\", \"baseFormulaProductName\", str, False, None, False),\n            (\"baseFormulaType\", \"baseFormulaType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"caloricDensity\", \"caloricDensity\", quantity.Quantity, False, None, False),\n            (\"maxVolumeToDeliver\", \"maxVolumeToDeliver\", quantity.Quantity, False, None, False),\n            (\"routeofAdministration\", \"routeofAdministration\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass NutritionOrderEnteralFormulaAdministration(backboneelement.BackboneElement):\n    \"\"\" Formula feeding instruction as structured data.\n    \n    Formula administration instructions as structured data.  This repeating\n    structure allows for changing the administration rate or volume over time\n    for both bolus and continuous feeding.  An example of this would be an\n    instruction to increase the rate of continuous feeding every 2 hours.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderEnteralFormulaAdministration\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.quantity = None\n        \"\"\" The volume of formula to provide.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.rateQuantity = None\n        \"\"\" Speed with which the formula is provided per period of time.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.rateRatio = None\n        \"\"\" Speed with which the formula is provided per period of time.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.schedule = None\n        \"\"\" Scheduled frequency of enteral feeding.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderEnteralFormulaAdministration, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderEnteralFormulaAdministration, self).elementProperties()\n        js.extend([\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"rateQuantity\", \"rateQuantity\", quantity.Quantity, False, \"rate\", False),\n            (\"rateRatio\", \"rateRatio\", ratio.Ratio, False, \"rate\", False),\n            (\"schedule\", \"schedule\", timing.Timing, False, None, False),\n        ])\n        return js\n\n\nclass NutritionOrderOralDiet(backboneelement.BackboneElement):\n    \"\"\" Oral diet components.\n    \n    Diet given orally in contrast to enteral (tube) feeding.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderOralDiet\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.fluidConsistencyType = None\n        \"\"\" The required consistency of fluids and liquids provided to the\n        patient.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instruction = None\n        \"\"\" Instructions or additional information about the oral diet.\n        Type `str`. \"\"\"\n        \n        self.nutrient = None\n        \"\"\" Required  nutrient modifications.\n        List of `NutritionOrderOralDietNutrient` items (represented as `dict` in JSON). \"\"\"\n        \n        self.schedule = None\n        \"\"\" Scheduled frequency of diet.\n        List of `Timing` items (represented as `dict` in JSON). \"\"\"\n        \n        self.texture = None\n        \"\"\" Required  texture modifications.\n        List of `NutritionOrderOralDietTexture` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of oral diet or diet restrictions that describe what can be\n        consumed orally.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderOralDiet, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderOralDiet, self).elementProperties()\n        js.extend([\n            (\"fluidConsistencyType\", \"fluidConsistencyType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"instruction\", \"instruction\", str, False, None, False),\n            (\"nutrient\", \"nutrient\", NutritionOrderOralDietNutrient, True, None, False),\n            (\"schedule\", \"schedule\", timing.Timing, True, None, False),\n            (\"texture\", \"texture\", NutritionOrderOralDietTexture, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nclass NutritionOrderOralDietNutrient(backboneelement.BackboneElement):\n    \"\"\" Required  nutrient modifications.\n    \n    Class that defines the quantity and type of nutrient modifications (for\n    example carbohydrate, fiber or sodium) required for the oral diet.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderOralDietNutrient\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.amount = None\n        \"\"\" Quantity of the specified nutrient.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Type of nutrient that is being modified.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderOralDietNutrient, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderOralDietNutrient, self).elementProperties()\n        js.extend([\n            (\"amount\", \"amount\", quantity.Quantity, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass NutritionOrderOralDietTexture(backboneelement.BackboneElement):\n    \"\"\" Required  texture modifications.\n    \n    Class that describes any texture modifications required for the patient to\n    safely consume various types of solid foods.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderOralDietTexture\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.foodType = None\n        \"\"\" Concepts that are used to identify an entity that is ingested for\n        nutritional purposes.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" Code to indicate how to alter the texture of the foods, e.g. pureed.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderOralDietTexture, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderOralDietTexture, self).elementProperties()\n        js.extend([\n            (\"foodType\", \"foodType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"modifier\", \"modifier\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass NutritionOrderSupplement(backboneelement.BackboneElement):\n    \"\"\" Supplement components.\n    \n    Oral nutritional products given in order to add further nutritional value\n    to the patient's diet.\n    \"\"\"\n    \n    resource_type = \"NutritionOrderSupplement\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.instruction = None\n        \"\"\" Instructions or additional information about the oral supplement.\n        Type `str`. \"\"\"\n        \n        self.productName = None\n        \"\"\" Product or brand name of the nutritional supplement.\n        Type `str`. \"\"\"\n        \n        self.quantity = None\n        \"\"\" Amount of the nutritional supplement.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.schedule = None\n        \"\"\" Scheduled frequency of supplement.\n        List of `Timing` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of supplement product requested.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(NutritionOrderSupplement, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(NutritionOrderSupplement, self).elementProperties()\n        js.extend([\n            (\"instruction\", \"instruction\", str, False, None, False),\n            (\"productName\", \"productName\", str, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"schedule\", \"schedule\", timing.Timing, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import ratio\nfrom . import timing\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns a standardized ISO 8601 string representation of the date. The method checks the attribute `origval`, which stores the original JSON value passed during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method uses the `isostring` property to format the date into an ISO 8601 string. This method provides a convenient way to access the original format or a normalized representation of the date for serialization or external use.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns a standardized ISO 8601 string representation of the date. The method checks the attribute `origval`, which stores the original JSON value passed during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method uses the `isostring` property to format the date into an ISO 8601 string. This method provides a convenient way to access the original format or a normalized representation of the date for serialization or external use.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/nutritionorder.py": {
      "NutritionOrder.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a NutritionOrder resource, representing a request for dietary, formula feeding, or nutritional supplements for a patient or resident.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the NutritionOrder's properties.\n- strict (bool, optional): If True (default), validation errors will raise a TypeError; if False, errors will be ignored.\n\nAttributes:\n- allergyIntolerance (List[FHIRReference]): List of the patient's food and nutrition-related allergies (optional).\n- dateTime (FHIRDateTime): Date and time the nutrition order was requested.\n- encounter (FHIRReference): The associated healthcare encounter for the nutrition order (optional).\n- enteralFormula (NutritionOrderEnteralFormula): Components related to enteral feeding (optional).\n- excludeFoodModifier (List[CodeableConcept]): Order-specific modifiers for types of food to exclude (optional).\n- foodPreferenceModifier (List[CodeableConcept]): Order-specific modifiers for types of food to prefer (optional).\n- identifier (List[Identifier]): Identifiers assigned to this order (optional).\n- instantiates (List[str]): References to protocols or definitions that this order instantiates (optional).\n- instantiatesCanonical (List[str]): Canonical FHIR references for instantiated protocols (optional).\n- instantiatesUri (List[str]): External URIs for instantiated protocols (optional).\n- intent (str): The intent of the nutrition order (e.g., proposal, order).\n- note (List[Annotation]): Additional comments regarding the nutrition order (optional).\n- oralDiet (NutritionOrderOralDiet): Components related to oral diet (optional).\n- orderer (FHIRReference): The healthcare provider who ordered the nutrition (optional).\n- patient (FHIRReference): The patient who will receive the diet (mandatory).\n- status (str): The current status of the nutrition order (e.g., active, completed).\n- supplement (List[NutritionOrderSupplement]): Components for any nutritional supplements (optional).\n\nThis class inherits from `domainresource.DomainResource`, and the initialization will ensure that all provided properties are correctly linked to their types as specified in the FHIR standard.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.allergyIntolerance = None\n        \" List of the patient's food and nutrition-related allergies and\\n        intolerances.\\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\n        self.dateTime = None\n        ' Date and time the nutrition order was requested.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.encounter = None\n        ' The encounter associated with this nutrition order.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.enteralFormula = None\n        ' Enteral formula components.\\n        Type `NutritionOrderEnteralFormula` (represented as `dict` in JSON). '\n        self.excludeFoodModifier = None\n        ' Order-specific modifier about the type of food that should not be\\n        given.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.foodPreferenceModifier = None\n        ' Order-specific modifier about the type of food that should be given.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Identifiers assigned to this order.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instantiates = None\n        ' Instantiates protocol or definition.\\n        List of `str` items. '\n        self.instantiatesCanonical = None\n        ' Instantiates FHIR protocol or definition.\\n        List of `str` items. '\n        self.instantiatesUri = None\n        ' Instantiates external protocol or definition.\\n        List of `str` items. '\n        self.intent = None\n        ' proposal | plan | directive | order | original-order | reflex-order\\n        | filler-order | instance-order | option.\\n        Type `str`. '\n        self.note = None\n        ' Comments.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.oralDiet = None\n        ' Oral diet components.\\n        Type `NutritionOrderOralDiet` (represented as `dict` in JSON). '\n        self.orderer = None\n        ' Who ordered the diet, formula or nutritional supplement.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.patient = None\n        ' The person who requires the diet, formula or nutritional supplement.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | on-hold | revoked | completed | entered-in-error |\\n        unknown.\\n        Type `str`. '\n        self.supplement = None\n        ' Supplement components.\\n        List of `NutritionOrderSupplement` items (represented as `dict` in JSON). '\n        super(NutritionOrder, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a NutritionOrder resource, representing a request for dietary, formula feeding, or nutritional supplements for a patient or resident.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the NutritionOrder's properties.\n- strict (bool, optional): If True (default), validation errors will raise a TypeError; if False, errors will be ignored.\n\nAttributes:\n- allergyIntolerance (List[FHIRReference]): List of the patient's food and nutrition-related allergies (optional).\n- dateTime (FHIRDateTime): Date and time the nutrition order was requested.\n- encounter (FHIRReference): The associated healthcare encounter for the nutrition order (optional).\n- enteralFormula (NutritionOrderEnteralFormula): Components related to enteral feeding (optional).\n- excludeFoodModifier (List[CodeableConcept]): Order-specific modifiers for types of food to exclude (optional).\n- foodPreferenceModifier (List[CodeableConcept]): Order-specific modifiers for types of food to prefer (optional).\n- identifier (List[Identifier]): Identifiers assigned to this order (optional).\n- instantiates (List[str]): References to protocols or definitions that this order instantiates (optional).\n- instantiatesCanonical (List[str]): Canonical FHIR references for instantiated protocols (optional).\n- instantiatesUri (List[str]): External URIs for instantiated protocols (optional).\n- intent (str): The intent of the nutrition order (e.g., proposal, order).\n- note (List[Annotation]): Additional comments regarding the nutrition order (optional).\n- oralDiet (NutritionOrderOralDiet): Components related to oral diet (optional).\n- orderer (FHIRReference): The healthcare provider who ordered the nutrition (optional).\n- patient (FHIRReference): The patient who will receive the diet (mandatory).\n- status (str): The current status of the nutrition order (e.g., active, completed).\n- supplement (List[NutritionOrderSupplement]): Components for any nutritional supplements (optional).\n\nThis class inherits from `domainresource.DomainResource`, and the initialization will ensure that all provided properties are correctly linked to their types as specified in the FHIR standard.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class NutritionOrder(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value, which is expected to be a string representation of a FHIR datetime,\nand initializes the FHIRDateTime object. It sets the `datetime` attribute to None initially. The\nconstructor also calls the superclass constructor (FHIRDate) to handle any relevant initialization of \nfields defined in the superclass.\n\nParameters:\n- jsonval (Union[str, None]): The JSON string representing the FHIR datetime. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A placeholder for the Python datetime object that will \n  represent the parsed FHIR datetime, initialized to None.\n\nThis constructor interacts with the FHIRDate class to initialize itself, leveraging its parsing \nmechanism through the superclass initialization.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value, which is expected to be a string representation of a FHIR datetime,\nand initializes the FHIRDateTime object. It sets the `datetime` attribute to None initially. The\nconstructor also calls the superclass constructor (FHIRDate) to handle any relevant initialization of \nfields defined in the superclass.\n\nParameters:\n- jsonval (Union[str, None]): The JSON string representing the FHIR datetime. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A placeholder for the Python datetime object that will \n  represent the parsed FHIR datetime, initialized to None.\n\nThis constructor interacts with the FHIRDate class to initialize itself, leveraging its parsing \nmechanism through the superclass initialization.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method calls the `as_json` method of the superclass (FHIRAbstractBase) to obtain the base JSON representation, then adds the 'resourceType' key, setting its value to the resource type of the current instance, which is defined by the class attribute `resource_type`. This output is used to represent the resource in FHIR-compliant JSON format.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()`, requiring the superclass to implement its own `as_json` method.\n    - Utilizes the `resource_type` class attribute to indicate the type of FHIR resource being represented.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method calls the `as_json` method of the superclass (FHIRAbstractBase) to obtain the base JSON representation, then adds the 'resourceType' key, setting its value to the resource type of the current instance, which is defined by the class attribute `resource_type`. This output is used to represent the resource in FHIR-compliant JSON format.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()`, requiring the superclass to implement its own `as_json` method.\n    - Utilizes the `resource_type` class attribute to indicate the type of FHIR resource being represented.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder1": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder10": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder10": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder2": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder3": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder4": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder5": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder6": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder6": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder7": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder7": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder8": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder8": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/nutritionorder_test.py:NutritionOrderTests:testNutritionOrder9": {
      "tests/models/nutritionorder_test.py:NutritionOrderTests:instantiate_from": {
        "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/nutritionorder_test.py:NutritionOrderTests:implNutritionOrder9": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/nutritionorder.py:NutritionOrder:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/nutritionorder.py:NutritionOrder:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-nutritionorder_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 nutritionorder.py\n            \u2514\u2500\u2500 NutritionOrder.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe NutritionOrder module is responsible for managing and validating FHIR-compliant NutritionOrder resources, which represent dietary and nutritional instructions for patients. It provides functionality to parse, validate, and serialize NutritionOrder data, ensuring adherence to the FHIR 4.0.1 standard. This module supports a wide range of dietary requirements, including oral diet plans, texture modifications, fluid consistency guidelines, nutritional supplements, and enteral feeding instructions, with full support for scheduling, preferences, exclusions, and metadata tagging. By leveraging this module, developers and healthcare systems can efficiently handle complex nutrition-related data, enhancing interoperability and ensuring dietary prescriptions are accurately captured and maintained within healthcare applications.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance, if available; otherwise, it returns a standardized ISO 8601 string representation of the date. The method checks the attribute `origval`, which stores the original JSON value passed during initialization. If `origval` is not `None`, it is returned directly; otherwise, the method uses the `isostring` property to format the date into an ISO 8601 string. This method provides a convenient way to access the original format or a normalized representation of the date for serialization or external use.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/nutritionorder.py\n\n- CLASS METHOD: NutritionOrder.__init__\n  - CLASS SIGNATURE: class NutritionOrder(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a NutritionOrder resource, representing a request for dietary, formula feeding, or nutritional supplements for a patient or resident.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the NutritionOrder's properties.\n- strict (bool, optional): If True (default), validation errors will raise a TypeError; if False, errors will be ignored.\n\nAttributes:\n- allergyIntolerance (List[FHIRReference]): List of the patient's food and nutrition-related allergies (optional).\n- dateTime (FHIRDateTime): Date and time the nutrition order was requested.\n- encounter (FHIRReference): The associated healthcare encounter for the nutrition order (optional).\n- enteralFormula (NutritionOrderEnteralFormula): Components related to enteral feeding (optional).\n- excludeFoodModifier (List[CodeableConcept]): Order-specific modifiers for types of food to exclude (optional).\n- foodPreferenceModifier (List[CodeableConcept]): Order-specific modifiers for types of food to prefer (optional).\n- identifier (List[Identifier]): Identifiers assigned to this order (optional).\n- instantiates (List[str]): References to protocols or definitions that this order instantiates (optional).\n- instantiatesCanonical (List[str]): Canonical FHIR references for instantiated protocols (optional).\n- instantiatesUri (List[str]): External URIs for instantiated protocols (optional).\n- intent (str): The intent of the nutrition order (e.g., proposal, order).\n- note (List[Annotation]): Additional comments regarding the nutrition order (optional).\n- oralDiet (NutritionOrderOralDiet): Components related to oral diet (optional).\n- orderer (FHIRReference): The healthcare provider who ordered the nutrition (optional).\n- patient (FHIRReference): The patient who will receive the diet (mandatory).\n- status (str): The current status of the nutrition order (e.g., active, completed).\n- supplement (List[NutritionOrderSupplement]): Components for any nutritional supplements (optional).\n\nThis class inherits from `domainresource.DomainResource`, and the initialization will ensure that all provided properties are correctly linked to their types as specified in the FHIR standard.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value, which is expected to be a string representation of a FHIR datetime,\nand initializes the FHIRDateTime object. It sets the `datetime` attribute to None initially. The\nconstructor also calls the superclass constructor (FHIRDate) to handle any relevant initialization of \nfields defined in the superclass.\n\nParameters:\n- jsonval (Union[str, None]): The JSON string representing the FHIR datetime. Defaults to None.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A placeholder for the Python datetime object that will \n  represent the parsed FHIR datetime, initialized to None.\n\nThis constructor interacts with the FHIRDate class to initialize itself, leveraging its parsing \nmechanism through the superclass initialization.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method calls the `as_json` method of the superclass (FHIRAbstractBase) to obtain the base JSON representation, then adds the 'resourceType' key, setting its value to the resource type of the current instance, which is defined by the class attribute `resource_type`. This output is used to represent the resource in FHIR-compliant JSON format.\n\nReturns:\n    dict: A dictionary representation of the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()`, requiring the superclass to implement its own `as_json` method.\n    - Utilizes the `resource_type` class attribute to indicate the type of FHIR resource being represented.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/nutritionorder.py": "from . import domainresource\n\nclass NutritionOrder(domainresource.DomainResource):\n    \"\"\" Diet, formula or nutritional supplement request.\n    \n    A request to supply a diet, formula feeding (enteral) or oral nutritional\n    supplement to a patient/resident.\n    \"\"\"\n    resource_type = 'NutritionOrder'\n\n    def elementProperties(self):\n        js = super(NutritionOrder, self).elementProperties()\n        js.extend([('allergyIntolerance', 'allergyIntolerance', fhirreference.FHIRReference, True, None, False), ('dateTime', 'dateTime', fhirdatetime.FHIRDateTime, False, None, True), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('enteralFormula', 'enteralFormula', NutritionOrderEnteralFormula, False, None, False), ('excludeFoodModifier', 'excludeFoodModifier', codeableconcept.CodeableConcept, True, None, False), ('foodPreferenceModifier', 'foodPreferenceModifier', codeableconcept.CodeableConcept, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiates', 'instantiates', str, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('intent', 'intent', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('oralDiet', 'oralDiet', NutritionOrderOralDiet, False, None, False), ('orderer', 'orderer', fhirreference.FHIRReference, False, None, False), ('patient', 'patient', fhirreference.FHIRReference, False, None, True), ('status', 'status', str, False, None, True), ('supplement', 'supplement', NutritionOrderSupplement, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass NutritionOrderEnteralFormula(backboneelement.BackboneElement):\n    \"\"\" Enteral formula components.\n    \n    Feeding provided through the gastrointestinal tract via a tube, catheter,\n    or stoma that delivers nutrition distal to the oral cavity.\n    \"\"\"\n    resource_type = 'NutritionOrderEnteralFormula'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.additiveProductName = None\n        ' Product or brand name of the modular additive.\\n        Type `str`. '\n        self.additiveType = None\n        ' Type of modular component to add to the feeding.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.administration = None\n        ' Formula feeding instruction as structured data.\\n        List of `NutritionOrderEnteralFormulaAdministration` items (represented as `dict` in JSON). '\n        self.administrationInstruction = None\n        ' Formula feeding instructions expressed as text.\\n        Type `str`. '\n        self.baseFormulaProductName = None\n        ' Product or brand name of the enteral or infant formula.\\n        Type `str`. '\n        self.baseFormulaType = None\n        ' Type of enteral or infant formula.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.caloricDensity = None\n        ' Amount of energy per specified volume that is required.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.maxVolumeToDeliver = None\n        ' Upper limit on formula volume per unit of time.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.routeofAdministration = None\n        \" How the formula should enter the patient's gastrointestinal tract.\\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\n        super(NutritionOrderEnteralFormula, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderEnteralFormula, self).elementProperties()\n        js.extend([('additiveProductName', 'additiveProductName', str, False, None, False), ('additiveType', 'additiveType', codeableconcept.CodeableConcept, False, None, False), ('administration', 'administration', NutritionOrderEnteralFormulaAdministration, True, None, False), ('administrationInstruction', 'administrationInstruction', str, False, None, False), ('baseFormulaProductName', 'baseFormulaProductName', str, False, None, False), ('baseFormulaType', 'baseFormulaType', codeableconcept.CodeableConcept, False, None, False), ('caloricDensity', 'caloricDensity', quantity.Quantity, False, None, False), ('maxVolumeToDeliver', 'maxVolumeToDeliver', quantity.Quantity, False, None, False), ('routeofAdministration', 'routeofAdministration', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass NutritionOrderEnteralFormulaAdministration(backboneelement.BackboneElement):\n    \"\"\" Formula feeding instruction as structured data.\n    \n    Formula administration instructions as structured data.  This repeating\n    structure allows for changing the administration rate or volume over time\n    for both bolus and continuous feeding.  An example of this would be an\n    instruction to increase the rate of continuous feeding every 2 hours.\n    \"\"\"\n    resource_type = 'NutritionOrderEnteralFormulaAdministration'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.quantity = None\n        ' The volume of formula to provide.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.rateQuantity = None\n        ' Speed with which the formula is provided per period of time.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.rateRatio = None\n        ' Speed with which the formula is provided per period of time.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.schedule = None\n        ' Scheduled frequency of enteral feeding.\\n        Type `Timing` (represented as `dict` in JSON). '\n        super(NutritionOrderEnteralFormulaAdministration, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderEnteralFormulaAdministration, self).elementProperties()\n        js.extend([('quantity', 'quantity', quantity.Quantity, False, None, False), ('rateQuantity', 'rateQuantity', quantity.Quantity, False, 'rate', False), ('rateRatio', 'rateRatio', ratio.Ratio, False, 'rate', False), ('schedule', 'schedule', timing.Timing, False, None, False)])\n        return js\n\nclass NutritionOrderOralDiet(backboneelement.BackboneElement):\n    \"\"\" Oral diet components.\n    \n    Diet given orally in contrast to enteral (tube) feeding.\n    \"\"\"\n    resource_type = 'NutritionOrderOralDiet'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.fluidConsistencyType = None\n        ' The required consistency of fluids and liquids provided to the\\n        patient.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.instruction = None\n        ' Instructions or additional information about the oral diet.\\n        Type `str`. '\n        self.nutrient = None\n        ' Required  nutrient modifications.\\n        List of `NutritionOrderOralDietNutrient` items (represented as `dict` in JSON). '\n        self.schedule = None\n        ' Scheduled frequency of diet.\\n        List of `Timing` items (represented as `dict` in JSON). '\n        self.texture = None\n        ' Required  texture modifications.\\n        List of `NutritionOrderOralDietTexture` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of oral diet or diet restrictions that describe what can be\\n        consumed orally.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(NutritionOrderOralDiet, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderOralDiet, self).elementProperties()\n        js.extend([('fluidConsistencyType', 'fluidConsistencyType', codeableconcept.CodeableConcept, True, None, False), ('instruction', 'instruction', str, False, None, False), ('nutrient', 'nutrient', NutritionOrderOralDietNutrient, True, None, False), ('schedule', 'schedule', timing.Timing, True, None, False), ('texture', 'texture', NutritionOrderOralDietTexture, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False)])\n        return js\n\nclass NutritionOrderOralDietNutrient(backboneelement.BackboneElement):\n    \"\"\" Required  nutrient modifications.\n    \n    Class that defines the quantity and type of nutrient modifications (for\n    example carbohydrate, fiber or sodium) required for the oral diet.\n    \"\"\"\n    resource_type = 'NutritionOrderOralDietNutrient'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.amount = None\n        ' Quantity of the specified nutrient.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Type of nutrient that is being modified.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(NutritionOrderOralDietNutrient, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderOralDietNutrient, self).elementProperties()\n        js.extend([('amount', 'amount', quantity.Quantity, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass NutritionOrderOralDietTexture(backboneelement.BackboneElement):\n    \"\"\" Required  texture modifications.\n    \n    Class that describes any texture modifications required for the patient to\n    safely consume various types of solid foods.\n    \"\"\"\n    resource_type = 'NutritionOrderOralDietTexture'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.foodType = None\n        ' Concepts that are used to identify an entity that is ingested for\\n        nutritional purposes.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.modifier = None\n        ' Code to indicate how to alter the texture of the foods, e.g. pureed.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(NutritionOrderOralDietTexture, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderOralDietTexture, self).elementProperties()\n        js.extend([('foodType', 'foodType', codeableconcept.CodeableConcept, False, None, False), ('modifier', 'modifier', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass NutritionOrderSupplement(backboneelement.BackboneElement):\n    \"\"\" Supplement components.\n    \n    Oral nutritional products given in order to add further nutritional value\n    to the patient's diet.\n    \"\"\"\n    resource_type = 'NutritionOrderSupplement'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.instruction = None\n        ' Instructions or additional information about the oral supplement.\\n        Type `str`. '\n        self.productName = None\n        ' Product or brand name of the nutritional supplement.\\n        Type `str`. '\n        self.quantity = None\n        ' Amount of the nutritional supplement.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.schedule = None\n        ' Scheduled frequency of supplement.\\n        List of `Timing` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of supplement product requested.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(NutritionOrderSupplement, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(NutritionOrderSupplement, self).elementProperties()\n        js.extend([('instruction', 'instruction', str, False, None, False), ('productName', 'productName', str, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('schedule', 'schedule', timing.Timing, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import ratio\nfrom . import timing",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}