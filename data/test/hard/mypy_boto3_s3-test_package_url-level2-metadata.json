{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_package_url",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/structures/test_package_url.py",
  "test_code": "from mypy_boto3_builder.package_data import Boto3StubsPackageData\nfrom mypy_boto3_builder.structures.package_url import PackageURL\n\n\nclass TestPackageURL:\n    package_url: PackageURL\n\n    def setup_method(self) -> None:\n        self.package_url = PackageURL(\"name\", Boto3StubsPackageData)\n\n    def test_init(self) -> None:\n        assert self.package_url.pypi_name == \"name\"\n        assert self.package_url.data == Boto3StubsPackageData\n\n        assert self.package_url.pypi_badge == \"https://img.shields.io/pypi/v/name.svg?color=blue\"\n        assert (\n            self.package_url.pyversions_badge\n            == \"https://img.shields.io/pypi/pyversions/name.svg?color=blue\"\n        )\n        assert (\n            self.package_url.rtd_badge\n            == \"https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue\"\n        )\n        assert self.package_url.pepy_badge == \"https://static.pepy.tech/badge/name\"\n        assert (\n            self.package_url.montly_downloads_badge\n            == \"https://img.shields.io/pypi/dm/name?color=blue\"\n        )\n        assert self.package_url.pypi == \"https://pypi.org/project/name/\"\n        assert self.package_url.library_pypi == \"https://pypi.org/project/boto3/\"\n        assert self.package_url.stubs_pypi == \"https://pypi.org/project/boto3-stubs/\"\n        assert self.package_url.stubs_lite_pypi == \"https://pypi.org/project/boto3-stubs-lite/\"\n        assert self.package_url.stubs_full_pypi == \"https://pypi.org/project/boto3-stubs-full/\"\n        assert self.package_url.pepy == \"https://pepy.tech/project/name\"\n        assert self.package_url.pypistats == \"https://pypistats.org/packages/name\"\n        assert self.package_url.docs == \"https://youtype.github.io/boto3_stubs_docs/\"\n",
  "GT_file_code": {
    "mypy_boto3_builder/structures/package_url.py": "\"\"\"\nPackage links structure.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom mypy_boto3_builder.package_data import BasePackageData\nfrom mypy_boto3_builder.utils.strings import get_pypi_link\n\n\nclass PackageURL:\n    \"\"\"\n    Package links structure.\n    \"\"\"\n\n    def __init__(self, pypi_name: str, data: type[BasePackageData]) -> None:\n        self.pypi_name = pypi_name\n        self.data = data\n\n    @property\n    def pypi_badge(self) -> str:\n        \"\"\"\n        Package name badge from shields.io.\n        \"\"\"\n        return f\"https://img.shields.io/pypi/v/{self.pypi_name}.svg?color=blue\"\n\n    @property\n    def pyversions_badge(self) -> str:\n        \"\"\"\n        Package Python version badge from shields.io.\n        \"\"\"\n        return f\"https://img.shields.io/pypi/pyversions/{self.pypi_name}.svg?color=blue\"\n\n    @property\n    def rtd_badge(self) -> str:\n        \"\"\"\n        ReadTheDocs badge from shields.io.\n        \"\"\"\n        return \"https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue\"\n\n    @property\n    def pepy_badge(self) -> str:\n        \"\"\"\n        PePy total downloads badge.\n        \"\"\"\n        return f\"https://static.pepy.tech/badge/{self.pypi_name}\"\n\n    @property\n    def montly_downloads_badge(self) -> str:\n        \"\"\"\n        PyPi monthly downloads badge.\n        \"\"\"\n        return f\"https://img.shields.io/pypi/dm/{self.pypi_name}?color=blue\"\n\n    @property\n    def pypi(self) -> str:\n        \"\"\"\n        Get link to PyPI.\n        \"\"\"\n        return get_pypi_link(self.pypi_name)\n\n    @property\n    def library_pypi(self) -> str:\n        \"\"\"\n        Get link to PyPI underlying library.\n        \"\"\"\n        return get_pypi_link(self.data.LIBRARY_NAME)\n\n    @property\n    def stubs_pypi(self) -> str:\n        \"\"\"\n        Get link to PyPI lite version of stubs.\n        \"\"\"\n        return get_pypi_link(self.data.PYPI_STUBS_NAME)\n\n    @property\n    def stubs_lite_pypi(self) -> str:\n        \"\"\"\n        Get link to PyPI lite version of stubs.\n        \"\"\"\n        return get_pypi_link(self.data.PYPI_LITE_NAME)\n\n    @property\n    def stubs_full_pypi(self) -> str:\n        \"\"\"\n        Get link to PyPI full version of stubs.\n        \"\"\"\n        return get_pypi_link(self.data.PYPI_FULL_NAME)\n\n    @property\n    def pepy(self) -> str:\n        \"\"\"\n        PePy project link.\n        \"\"\"\n        return f\"https://pepy.tech/project/{self.pypi_name}\"\n\n    @property\n    def pypistats(self) -> str:\n        \"\"\"\n        PePy project link.\n        \"\"\"\n        return f\"https://pypistats.org/packages/{self.pypi_name}\"\n\n    @property\n    def docs(self) -> str:\n        \"\"\"\n        Documentation link.\n        \"\"\"\n        return self.data.LOCAL_DOC_LINK\n",
    "mypy_boto3_builder/utils/strings.py": "\"\"\"\nMultiple string utils collection.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nimport builtins\nimport datetime\nimport keyword\nimport re\nimport typing\nfrom types import MappingProxyType\nfrom typing import Final\nfrom unittest.mock import MagicMock\n\nfrom botocore import xform_name as botocore_xform_name\nfrom botocore.utils import get_service_module_name\n\nfrom mypy_boto3_builder.constants import DOCSTRING_LINE_LENGTH, DOCSTRING_MAX_LENGTH\nfrom mypy_boto3_builder.exceptions import BuildInternalError, TypeAnnotationError\n\nRESERVED_NAMES: Final = {\n    *dir(typing),\n    *dir(builtins),\n    *keyword.kwlist,\n}\nAWS_LINK_RE: Final = re.compile(r\"`([^`]+\\S)\\s*<https://(\\S+)>`\\_*\")\nREPLACE_DOCSTRING_CHARS: Final = MappingProxyType({\"\u2019\": \"'\", \"\u2013\": \"-\"})\n\n\ndef get_class_prefix(func_name: str) -> str:\n    \"\"\"\n    Get a valid Python class prefix from `func_name`.\n\n    Arguments:\n        func_name -- Any string.\n\n    Returns:\n        String with a class prefix.\n    \"\"\"\n    parts = [capitalize(i) for i in func_name.split(\"_\") if i]\n    return \"\".join(parts)\n\n\ndef get_anchor_link(text: str) -> str:\n    \"\"\"\n    Convert header to markdown anchor link.\n    \"\"\"\n    return text.strip().replace(\" \", \"-\").replace(\".\", \"\").lower()\n\n\ndef is_reserved(word: str) -> bool:\n    \"\"\"\n    Check whether variable name conflicts with Python reserved names.\n    \"\"\"\n    return word in RESERVED_NAMES\n\n\ndef get_short_docstring(doc: str) -> str:\n    \"\"\"\n    Create a short docstring from boto3 documentation.\n\n    Trims docstring to 300 chars.\n    Removes double and triple backticks.\n    Stops on `**Request syntax**` and `::`.\n    Ensures that backticks are closed.\n    Replaces `Text <link>` with [Text](link).\n    Wraps docstring to 80 chars.\n    \"\"\"\n    doc = str(doc)\n    if len(doc) > DOCSTRING_MAX_LENGTH:\n        doc = f\"{doc[:DOCSTRING_MAX_LENGTH - 3]}...\"\n    result: list[str] = []\n    if not doc:\n        return \"\"\n    for raw_line in doc.splitlines():\n        line = raw_line.strip().removesuffix(\"::\")\n        if not line:\n            continue\n        if line.startswith(\":\") or line.lower().startswith(\"**request syntax**\"):\n            break\n        if \". \" in line:\n            result.append(line.split(\". \")[0])\n            break\n        result.append(line)\n        if line.endswith(\".\"):\n            break\n\n    result_str = \" \".join(result).replace(\"```\", \"`\").replace(\"``\", \"`\").replace(\"\\n\", \" \").strip()\n    return clean_artifacts(result_str)\n\n\ndef clean_artifacts(line: str) -> str:\n    \"\"\"\n    Remove common artifacts in botocre docs.\n    \"\"\"\n    if line.count(\"`\") % 2:\n        line = f\"{line}`\"\n    if line and not line.endswith(\".\"):\n        line = f\"{line}.\"\n\n    for ch, replacement in REPLACE_DOCSTRING_CHARS.items():\n        if ch in line:\n            line = line.replace(ch, replacement)\n\n    if \"<https:\" in line:\n        line = AWS_LINK_RE.sub(r\"[\\g<1>](https://\\g<2>)\", line)\n        # FIXME: temporary fix for pca-connector-ad service\n        line = line.replace(\"https\\\\:\", \"https:\")\n        # FIXME: temporary fix for neptunedata service\n        line = line.replace(\"neptune-db\\\\:\", \"neptune-db:\")\n\n    return line\n\n\ndef textwrap(text: str, width: int = DOCSTRING_LINE_LENGTH) -> str:\n    \"\"\"\n    Wrap text to `width` chars.\n    \"\"\"\n    result: list[str] = []\n    for raw_line in text.splitlines():\n        if len(raw_line) <= width:\n            result.append(raw_line)\n            continue\n\n        line = raw_line\n        while line:\n            if len(line) < width:\n                result.append(line)\n                break\n            space_index = line.rfind(\" \", 0, width)\n            if space_index < 0:\n                space_index = line.find(\" \", width)\n\n            if space_index < 0:\n                result.append(line)\n                break\n\n            sub_line = line[:space_index].rstrip()\n            next_index = space_index + 1\n            line = line[next_index:].lstrip()\n            result.append(sub_line)\n\n    return \"\\n\".join(result)\n\n\ndef get_botocore_class_name(metadata: dict[str, str]) -> str:\n    \"\"\"\n    Get Botocore class name from Service metadata.\n    \"\"\"\n    service_model = MagicMock()\n    service_model.service_name = metadata.get(\"serviceId\", \"\")\n    service_model.metadata = metadata\n    name = get_service_module_name(service_model)\n    return capitalize(name)\n\n\ndef get_type_def_name(*parts: str) -> str:\n    \"\"\"\n    Get a valid Python TypeDef class name from `parts`.\n\n    Examples:\n        ```python\n        get_type_def_name(\"MyClass\", \"my_method\")  # MyClassMyMethodTypeDef\n        ```\n    \"\"\"\n    if not parts:\n        raise TypeAnnotationError(\"At least one part is required\")\n\n    parts_camelcased = [get_class_prefix(i) for i in parts]\n    name = \"\".join(parts_camelcased)\n    return f\"{name}TypeDef\"\n\n\ndef capitalize(s: str) -> str:\n    \"\"\"\n    Capitalize first letter of a string.\n    \"\"\"\n    return f\"{s[:1].upper()}{s[1:]}\"\n\n\ndef xform_name(name: str, sep: str = \"_\") -> str:\n    \"\"\"\n    Convert name to snake_case.\n\n    Arguments:\n        name -- Any string.\n        sep -- Separator.\n    \"\"\"\n    if not sep:\n        raise BuildInternalError(\"Separator is required\")\n    return botocore_xform_name(name, sep)\n\n\ndef get_pypi_link(package_name: str) -> str:\n    \"\"\"\n    Get link to PyPI.\n    \"\"\"\n    if not package_name:\n        raise BuildInternalError(\"package_name is required\")\n    return f\"https://pypi.org/project/{package_name}/\"\n\n\ndef get_copyright() -> str:\n    \"\"\"\n    Get copyright notice.\n    \"\"\"\n    now = datetime.datetime.now(datetime.timezone.utc)\n    return f\"Copyright {now.year} Vlad Emelianov\"\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/structures/package_url.py": {
      "PackageURL.__init__": {
        "code": "    def __init__(self, pypi_name: str, data: type[BasePackageData]) -> None:\n        \"\"\"Initialize a PackageURL instance with the PyPI name and associated package data.\n\nParameters:\n- pypi_name (str): The name of the package on the Python Package Index (PyPI).\n- data (type[BasePackageData]): A class type that inherits from BasePackageData, providing necessary metadata for the package.\n\nThis constructor sets the instance attributes `pypi_name` and `data`, which are utilized by various methods and properties in the PackageURL class to generate links related to the package, such as PyPI badge URLs and links to documentation. The `data` parameter must include relevant constants like LIBRARY_NAME and PYPI_STUBS_NAME, which are essential for constructing the appropriate package links.\"\"\"\n        self.pypi_name = pypi_name\n        self.data = data",
        "docstring": "Initialize a PackageURL instance with the PyPI name and associated package data.\n\nParameters:\n- pypi_name (str): The name of the package on the Python Package Index (PyPI).\n- data (type[BasePackageData]): A class type that inherits from BasePackageData, providing necessary metadata for the package.\n\nThis constructor sets the instance attributes `pypi_name` and `data`, which are utilized by various methods and properties in the PackageURL class to generate links related to the package, such as PyPI badge URLs and links to documentation. The `data` parameter must include relevant constants like LIBRARY_NAME and PYPI_STUBS_NAME, which are essential for constructing the appropriate package links.",
        "signature": "def __init__(self, pypi_name: str, data: type[BasePackageData]) -> None:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pypi_badge": {
        "code": "    def pypi_badge(self) -> str:\n        \"\"\"Returns the badge URL for the package version from PyPI, generated using the shields.io service. The URL includes the package name, which is derived from the instance attribute `self.pypi_name`. This method does not take any parameters and returns a string representing the URL to the badge. The badge visually indicates the current version of the package on PyPI, allowing for easy display in documentation or repositories.\"\"\"\n        '\\n        Package name badge from shields.io.\\n        '\n        return f'https://img.shields.io/pypi/v/{self.pypi_name}.svg?color=blue'",
        "docstring": "Returns the badge URL for the package version from PyPI, generated using the shields.io service. The URL includes the package name, which is derived from the instance attribute `self.pypi_name`. This method does not take any parameters and returns a string representing the URL to the badge. The badge visually indicates the current version of the package on PyPI, allowing for easy display in documentation or repositories.",
        "signature": "def pypi_badge(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pyversions_badge": {
        "code": "    def pyversions_badge(self) -> str:\n        \"\"\"Retrieve the Python version badge URL for the package from shields.io.\n\nThis method constructs a URL that points to a badge displaying the supported Python versions of the package identified by `self.pypi_name`. The badge is retrieved from the shields.io service, which provides dynamic badges for various metrics related to software packages.\n\nReturns:\n    str: A URL string pointing to the hosted badge image.\n\nAttributes:\n    self.pypi_name (str): The name of the package for which the badge URL is generated, passed during the initialization of the PackageURL instance.\"\"\"\n        '\\n        Package Python version badge from shields.io.\\n        '\n        return f'https://img.shields.io/pypi/pyversions/{self.pypi_name}.svg?color=blue'",
        "docstring": "Retrieve the Python version badge URL for the package from shields.io.\n\nThis method constructs a URL that points to a badge displaying the supported Python versions of the package identified by `self.pypi_name`. The badge is retrieved from the shields.io service, which provides dynamic badges for various metrics related to software packages.\n\nReturns:\n    str: A URL string pointing to the hosted badge image.\n\nAttributes:\n    self.pypi_name (str): The name of the package for which the badge URL is generated, passed during the initialization of the PackageURL instance.",
        "signature": "def pyversions_badge(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.rtd_badge": {
        "code": "    def rtd_badge(self) -> str:\n        \"\"\"Returns the URL of the ReadTheDocs badge for the package, utilizing shields.io to provide a visual representation of documentation status. This property does not take any parameters and returns a string containing the URL to the badge image. The badge serves to indicate the documentation availability for the package, specifically for the package associated with `boto3-stubs`. No external constants are used in this method.\"\"\"\n        '\\n        ReadTheDocs badge from shields.io.\\n        '\n        return 'https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue'",
        "docstring": "Returns the URL of the ReadTheDocs badge for the package, utilizing shields.io to provide a visual representation of documentation status. This property does not take any parameters and returns a string containing the URL to the badge image. The badge serves to indicate the documentation availability for the package, specifically for the package associated with `boto3-stubs`. No external constants are used in this method.",
        "signature": "def rtd_badge(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pepy_badge": {
        "code": "    def pepy_badge(self) -> str:\n        \"\"\"Returns the total downloads badge for the package on PePy. \n\nThis property generates a URL linking to a badge displaying the total number of downloads for the package specified by `self.pypi_name`. The `self.pypi_name` is expected to be a string representing the name of the package in the Python Package Index (PyPI), which is initialized when creating an instance of the `PackageURL` class. The badge is retrieved from the static PePy service, providing a visual representation of the package's popularity.\"\"\"\n        '\\n        PePy total downloads badge.\\n        '\n        return f'https://static.pepy.tech/badge/{self.pypi_name}'",
        "docstring": "Returns the total downloads badge for the package on PePy. \n\nThis property generates a URL linking to a badge displaying the total number of downloads for the package specified by `self.pypi_name`. The `self.pypi_name` is expected to be a string representing the name of the package in the Python Package Index (PyPI), which is initialized when creating an instance of the `PackageURL` class. The badge is retrieved from the static PePy service, providing a visual representation of the package's popularity.",
        "signature": "def pepy_badge(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.montly_downloads_badge": {
        "code": "    def montly_downloads_badge(self) -> str:\n        \"\"\"Returns the monthly downloads badge URL for a specified PyPI package.\n\nThis property constructs a URL for a badge that shows the number of monthly downloads for the package identified by `self.pypi_name`. The URL is sourced from the Shields.io service, which is commonly used for displaying various project statistics.\n\nReturns:\n    str: A formatted URL string pointing to the monthly downloads badge on Shields.io, where the badge is visually rendered in blue.\n\nAttributes:\n    pypi_name (str): The name of the package on PyPI, which must be initialized in the PackageURL class constructor.\"\"\"\n        '\\n        PyPi monthly downloads badge.\\n        '\n        return f'https://img.shields.io/pypi/dm/{self.pypi_name}?color=blue'",
        "docstring": "Returns the monthly downloads badge URL for a specified PyPI package.\n\nThis property constructs a URL for a badge that shows the number of monthly downloads for the package identified by `self.pypi_name`. The URL is sourced from the Shields.io service, which is commonly used for displaying various project statistics.\n\nReturns:\n    str: A formatted URL string pointing to the monthly downloads badge on Shields.io, where the badge is visually rendered in blue.\n\nAttributes:\n    pypi_name (str): The name of the package on PyPI, which must be initialized in the PackageURL class constructor.",
        "signature": "def montly_downloads_badge(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pypi": {
        "code": "    def pypi(self) -> str:\n        \"\"\"Get the PyPI (Python Package Index) link for the package.\n\nThis method constructs a URL pointing to the PyPI page of the package represented by the current instance, using the package name stored in the 'pypi_name' attribute. The method relies on the 'get_pypi_link' function from the 'mypy_boto3_builder.utils.strings' module to format the link properly.\n\nReturns:\n    str: A URL string directing to the package's PyPI page.\"\"\"\n        '\\n        Get link to PyPI.\\n        '\n        return get_pypi_link(self.pypi_name)",
        "docstring": "Get the PyPI (Python Package Index) link for the package.\n\nThis method constructs a URL pointing to the PyPI page of the package represented by the current instance, using the package name stored in the 'pypi_name' attribute. The method relies on the 'get_pypi_link' function from the 'mypy_boto3_builder.utils.strings' module to format the link properly.\n\nReturns:\n    str: A URL string directing to the package's PyPI page.",
        "signature": "def pypi(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.library_pypi": {
        "code": "    def library_pypi(self) -> str:\n        \"\"\"Get the link to the PyPI page of the underlying library associated with the package.\n\nThis property uses the `get_pypi_link` function to construct the URL based on the `LIBRARY_NAME` attribute of the `data` class, which is expected to be a type of `BasePackageData`. The `LIBRARY_NAME` should be defined within the `data` class, providing necessary identification for the library relevant to the package.\n\nReturns:\n    str: The constructed URL pointing to the PyPI page of the underlying library.\"\"\"\n        '\\n        Get link to PyPI underlying library.\\n        '\n        return get_pypi_link(self.data.LIBRARY_NAME)",
        "docstring": "Get the link to the PyPI page of the underlying library associated with the package.\n\nThis property uses the `get_pypi_link` function to construct the URL based on the `LIBRARY_NAME` attribute of the `data` class, which is expected to be a type of `BasePackageData`. The `LIBRARY_NAME` should be defined within the `data` class, providing necessary identification for the library relevant to the package.\n\nReturns:\n    str: The constructed URL pointing to the PyPI page of the underlying library.",
        "signature": "def library_pypi(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.stubs_pypi": {
        "code": "    def stubs_pypi(self) -> str:\n        \"\"\"Retrieve the link to the PyPI page for the lite version of the stubs package.\n\nThis property accesses the `PYPI_STUBS_NAME` constant from the `data` attribute of the `PackageURL` instance, which is expected to be a subclass of `BasePackageData`. The `get_pypi_link` utility function is used to construct and return the full URL link to the corresponding PyPI page.\n\nReturns:\n    str: The URL to the PyPI page for the lite version of the stubs package.\"\"\"\n        '\\n        Get link to PyPI lite version of stubs.\\n        '\n        return get_pypi_link(self.data.PYPI_STUBS_NAME)",
        "docstring": "Retrieve the link to the PyPI page for the lite version of the stubs package.\n\nThis property accesses the `PYPI_STUBS_NAME` constant from the `data` attribute of the `PackageURL` instance, which is expected to be a subclass of `BasePackageData`. The `get_pypi_link` utility function is used to construct and return the full URL link to the corresponding PyPI page.\n\nReturns:\n    str: The URL to the PyPI page for the lite version of the stubs package.",
        "signature": "def stubs_pypi(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.stubs_lite_pypi": {
        "code": "    def stubs_lite_pypi(self) -> str:\n        \"\"\"Get link to the PyPI lite version of stubs.\n\n    This property generates a URL that directs users to the lightweight version of the stubs associated with the package. It uses the `get_pypi_link` function from the `mypy_boto3_builder.utils.strings` module to construct the link based on the `PYPI_LITE_NAME` attribute of the `data` instance, which is a subclass of `BasePackageData`. \n\n    Returns:\n        str: The URL to the PyPI page for the lite version of the stubs.\n    \n    Dependencies:\n        - `get_pypi_link`: A utility function to create PyPI links.\n        - `self.data.PYPI_LITE_NAME`: An attribute that holds the name used for the lite version stubs, derived from the `data` object passed during the instantiation of the `PackageURL` class.\"\"\"\n        '\\n        Get link to PyPI lite version of stubs.\\n        '\n        return get_pypi_link(self.data.PYPI_LITE_NAME)",
        "docstring": "Get link to the PyPI lite version of stubs.\n\nThis property generates a URL that directs users to the lightweight version of the stubs associated with the package. It uses the `get_pypi_link` function from the `mypy_boto3_builder.utils.strings` module to construct the link based on the `PYPI_LITE_NAME` attribute of the `data` instance, which is a subclass of `BasePackageData`. \n\nReturns:\n    str: The URL to the PyPI page for the lite version of the stubs.\n\nDependencies:\n    - `get_pypi_link`: A utility function to create PyPI links.\n    - `self.data.PYPI_LITE_NAME`: An attribute that holds the name used for the lite version stubs, derived from the `data` object passed during the instantiation of the `PackageURL` class.",
        "signature": "def stubs_lite_pypi(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.stubs_full_pypi": {
        "code": "    def stubs_full_pypi(self) -> str:\n        \"\"\"Get the PyPI link for the full version of the package stubs.\n\nThis property constructs a URL to the full package stubs hosted on PyPI using the `get_pypi_link` utility function, which takes the full name of the package stubs as defined by `self.data.PYPI_FULL_NAME`. \n\nReturns:\n    str: A URL linking to the full version of the package stubs on PyPI.\n\nDependencies:\n- `self.data`: An instance of `BasePackageData` that provides constants defining the package and its stubs names.\n- `get_pypi_link`: A utility function to format and return the PyPI link based on the package name.\"\"\"\n        '\\n        Get link to PyPI full version of stubs.\\n        '\n        return get_pypi_link(self.data.PYPI_FULL_NAME)",
        "docstring": "Get the PyPI link for the full version of the package stubs.\n\nThis property constructs a URL to the full package stubs hosted on PyPI using the `get_pypi_link` utility function, which takes the full name of the package stubs as defined by `self.data.PYPI_FULL_NAME`. \n\nReturns:\n    str: A URL linking to the full version of the package stubs on PyPI.\n\nDependencies:\n- `self.data`: An instance of `BasePackageData` that provides constants defining the package and its stubs names.\n- `get_pypi_link`: A utility function to format and return the PyPI link based on the package name.",
        "signature": "def stubs_full_pypi(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pepy": {
        "code": "    def pepy(self) -> str:\n        \"\"\"Returns the PePy project link for the package.\n\nThe `pepy` property constructs a URL that links to the PePy website for tracking downloads of the package identified by `self.pypi_name`. This property is directly dependent on the `pypi_name` attribute, which is set during the initialization of the `PackageURL` class.\n\nReturns:\n    str: A formatted URL string pointing to the PePy project page for the package.\"\"\"\n        '\\n        PePy project link.\\n        '\n        return f'https://pepy.tech/project/{self.pypi_name}'",
        "docstring": "Returns the PePy project link for the package.\n\nThe `pepy` property constructs a URL that links to the PePy website for tracking downloads of the package identified by `self.pypi_name`. This property is directly dependent on the `pypi_name` attribute, which is set during the initialization of the `PackageURL` class.\n\nReturns:\n    str: A formatted URL string pointing to the PePy project page for the package.",
        "signature": "def pepy(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.pypistats": {
        "code": "    def pypistats(self) -> str:\n        \"\"\"Get a link to the PyPi statistics page for the package.\n\nThis property constructs the URL that directs to the PyPi statistics for the package identified by `pypi_name`, which is an attribute of the `PackageURL` class. The `pypi_name` is expected to be a string that contains the name of the package as registered on PyPI. The returned string is a URL formatted as `https://pypistats.org/packages/{self.pypi_name}`, where `{self.pypi_name}` is replaced by the actual package name.\n\nNo input parameters are required. The output is a string representing the complete URL to the PyPi stats page for the package.\"\"\"\n        '\\n        PePy project link.\\n        '\n        return f'https://pypistats.org/packages/{self.pypi_name}'",
        "docstring": "Get a link to the PyPi statistics page for the package.\n\nThis property constructs the URL that directs to the PyPi statistics for the package identified by `pypi_name`, which is an attribute of the `PackageURL` class. The `pypi_name` is expected to be a string that contains the name of the package as registered on PyPI. The returned string is a URL formatted as `https://pypistats.org/packages/{self.pypi_name}`, where `{self.pypi_name}` is replaced by the actual package name.\n\nNo input parameters are required. The output is a string representing the complete URL to the PyPi stats page for the package.",
        "signature": "def pypistats(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      },
      "PackageURL.docs": {
        "code": "    def docs(self) -> str:\n        \"\"\"Returns the documentation link for the package. This method accesses the LOCAL_DOC_LINK attribute defined in the data attribute, which is of type BasePackageData. The LOCAL_DOC_LINK should provide a valid URL pointing to the package's documentation. The method does not take any parameters and returns a string containing the documentation link.\"\"\"\n        '\\n        Documentation link.\\n        '\n        return self.data.LOCAL_DOC_LINK",
        "docstring": "Returns the documentation link for the package. This method accesses the LOCAL_DOC_LINK attribute defined in the data attribute, which is of type BasePackageData. The LOCAL_DOC_LINK should provide a valid URL pointing to the package's documentation. The method does not take any parameters and returns a string containing the documentation link.",
        "signature": "def docs(self) -> str:",
        "type": "Method",
        "class_signature": "class PackageURL:"
      }
    },
    "mypy_boto3_builder/utils/strings.py": {
      "get_pypi_link": {
        "code": "def get_pypi_link(package_name: str) -> str:\n    \"\"\"Get the URL link to a Python package's page on the Python Package Index (PyPI).\n\nArgs:\n    package_name (str): The name of the package for which to retrieve the PyPI link. This parameter is required and must not be an empty string.\n\nReturns:\n    str: A formatted URL string pointing to the specified package's PyPI page.\n\nRaises:\n    BuildInternalError: If `package_name` is an empty string, indicating that the package name must be provided to generate a valid link.\n\nThis function does not depend on any external constants or variables but raises a specific custom exception, `BuildInternalError`, which is defined in `mypy_boto3_builder.exceptions`. The exception is raised to handle cases where the input is invalid.\"\"\"\n    '\\n    Get link to PyPI.\\n    '\n    if not package_name:\n        raise BuildInternalError('package_name is required')\n    return f'https://pypi.org/project/{package_name}/'",
        "docstring": "Get the URL link to a Python package's page on the Python Package Index (PyPI).\n\nArgs:\n    package_name (str): The name of the package for which to retrieve the PyPI link. This parameter is required and must not be an empty string.\n\nReturns:\n    str: A formatted URL string pointing to the specified package's PyPI page.\n\nRaises:\n    BuildInternalError: If `package_name` is an empty string, indicating that the package name must be provided to generate a valid link.\n\nThis function does not depend on any external constants or variables but raises a specific custom exception, `BuildInternalError`, which is defined in `mypy_boto3_builder.exceptions`. The exception is raised to handle cases where the input is invalid.",
        "signature": "def get_pypi_link(package_name: str) -> str:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "mypy_boto3_builder/structures/package_url.py:PackageURL:pypi": {},
    "mypy_boto3_builder/utils/strings.py:get_pypi_link": {},
    "mypy_boto3_builder/structures/package_url.py:PackageURL:library_pypi": {},
    "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_pypi": {},
    "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_lite_pypi": {},
    "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_full_pypi": {}
  },
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_package_url\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u251c\u2500\u2500 structures/\n    \u2502   \u2514\u2500\u2500 package_url.py\n    \u2502       \u251c\u2500\u2500 PackageURL.__init__\n    \u2502       \u251c\u2500\u2500 PackageURL.docs\n    \u2502       \u251c\u2500\u2500 PackageURL.library_pypi\n    \u2502       \u251c\u2500\u2500 PackageURL.montly_downloads_badge\n    \u2502       \u251c\u2500\u2500 PackageURL.pepy\n    \u2502       \u251c\u2500\u2500 PackageURL.pepy_badge\n    \u2502       \u251c\u2500\u2500 PackageURL.pypi\n    \u2502       \u251c\u2500\u2500 PackageURL.pypi_badge\n    \u2502       \u251c\u2500\u2500 PackageURL.pypistats\n    \u2502       \u251c\u2500\u2500 PackageURL.pyversions_badge\n    \u2502       \u251c\u2500\u2500 PackageURL.rtd_badge\n    \u2502       \u251c\u2500\u2500 PackageURL.stubs_full_pypi\n    \u2502       \u251c\u2500\u2500 PackageURL.stubs_lite_pypi\n    \u2502       \u2514\u2500\u2500 PackageURL.stubs_pypi\n    \u2514\u2500\u2500 utils/\n        \u2514\u2500\u2500 strings.py\n            \u2514\u2500\u2500 get_pypi_link\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the generation and management of structured metadata URLs and badges for Python packages, particularly those related to boto3 stubs. Its primary functionality allows users and developers to retrieve consistent links for various package resources, including PyPI pages, documentation, download statistics, and supported Python versions, as well as dynamically generated visual package badges. By automating the creation and organization of these resource links, the module solves the problem of manually curating and maintaining accurate metadata around Python packages, improving efficiency and reducing errors for developers working with boto3 stubs or similar projects.\n\n## FILE 1: mypy_boto3_builder/structures/package_url.py\n\n- CLASS METHOD: PackageURL.rtd_badge\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def rtd_badge(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the URL of the ReadTheDocs badge for the package, utilizing shields.io to provide a visual representation of documentation status. This property does not take any parameters and returns a string containing the URL to the badge image. The badge serves to indicate the documentation availability for the package, specifically for the package associated with `boto3-stubs`. No external constants are used in this method.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.__init__\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def __init__(self, pypi_name: str, data: type[BasePackageData]) -> None:\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a PackageURL instance with the PyPI name and associated package data.\n\nParameters:\n- pypi_name (str): The name of the package on the Python Package Index (PyPI).\n- data (type[BasePackageData]): A class type that inherits from BasePackageData, providing necessary metadata for the package.\n\nThis constructor sets the instance attributes `pypi_name` and `data`, which are utilized by various methods and properties in the PackageURL class to generate links related to the package, such as PyPI badge URLs and links to documentation. The `data` parameter must include relevant constants like LIBRARY_NAME and PYPI_STUBS_NAME, which are essential for constructing the appropriate package links.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.library_pypi\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def library_pypi(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the link to the PyPI page of the underlying library associated with the package.\n\nThis property uses the `get_pypi_link` function to construct the URL based on the `LIBRARY_NAME` attribute of the `data` class, which is expected to be a type of `BasePackageData`. The `LIBRARY_NAME` should be defined within the `data` class, providing necessary identification for the library relevant to the package.\n\nReturns:\n    str: The constructed URL pointing to the PyPI page of the underlying library.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.stubs_lite_pypi\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def stubs_lite_pypi(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet link to the PyPI lite version of stubs.\n\nThis property generates a URL that directs users to the lightweight version of the stubs associated with the package. It uses the `get_pypi_link` function from the `mypy_boto3_builder.utils.strings` module to construct the link based on the `PYPI_LITE_NAME` attribute of the `data` instance, which is a subclass of `BasePackageData`. \n\nReturns:\n    str: The URL to the PyPI page for the lite version of the stubs.\n\nDependencies:\n    - `get_pypi_link`: A utility function to create PyPI links.\n    - `self.data.PYPI_LITE_NAME`: An attribute that holds the name used for the lite version stubs, derived from the `data` object passed during the instantiation of the `PackageURL` class.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pypistats\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pypistats(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet a link to the PyPi statistics page for the package.\n\nThis property constructs the URL that directs to the PyPi statistics for the package identified by `pypi_name`, which is an attribute of the `PackageURL` class. The `pypi_name` is expected to be a string that contains the name of the package as registered on PyPI. The returned string is a URL formatted as `https://pypistats.org/packages/{self.pypi_name}`, where `{self.pypi_name}` is replaced by the actual package name.\n\nNo input parameters are required. The output is a string representing the complete URL to the PyPi stats page for the package.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.docs\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def docs(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the documentation link for the package. This method accesses the LOCAL_DOC_LINK attribute defined in the data attribute, which is of type BasePackageData. The LOCAL_DOC_LINK should provide a valid URL pointing to the package's documentation. The method does not take any parameters and returns a string containing the documentation link.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pypi_badge\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pypi_badge(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the badge URL for the package version from PyPI, generated using the shields.io service. The URL includes the package name, which is derived from the instance attribute `self.pypi_name`. This method does not take any parameters and returns a string representing the URL to the badge. The badge visually indicates the current version of the package on PyPI, allowing for easy display in documentation or repositories.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.stubs_full_pypi\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def stubs_full_pypi(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the PyPI link for the full version of the package stubs.\n\nThis property constructs a URL to the full package stubs hosted on PyPI using the `get_pypi_link` utility function, which takes the full name of the package stubs as defined by `self.data.PYPI_FULL_NAME`. \n\nReturns:\n    str: A URL linking to the full version of the package stubs on PyPI.\n\nDependencies:\n- `self.data`: An instance of `BasePackageData` that provides constants defining the package and its stubs names.\n- `get_pypi_link`: A utility function to format and return the PyPI link based on the package name.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pyversions_badge\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pyversions_badge(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the Python version badge URL for the package from shields.io.\n\nThis method constructs a URL that points to a badge displaying the supported Python versions of the package identified by `self.pypi_name`. The badge is retrieved from the shields.io service, which provides dynamic badges for various metrics related to software packages.\n\nReturns:\n    str: A URL string pointing to the hosted badge image.\n\nAttributes:\n    self.pypi_name (str): The name of the package for which the badge URL is generated, passed during the initialization of the PackageURL instance.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.montly_downloads_badge\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def montly_downloads_badge(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the monthly downloads badge URL for a specified PyPI package.\n\nThis property constructs a URL for a badge that shows the number of monthly downloads for the package identified by `self.pypi_name`. The URL is sourced from the Shields.io service, which is commonly used for displaying various project statistics.\n\nReturns:\n    str: A formatted URL string pointing to the monthly downloads badge on Shields.io, where the badge is visually rendered in blue.\n\nAttributes:\n    pypi_name (str): The name of the package on PyPI, which must be initialized in the PackageURL class constructor.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pypi\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pypi(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the PyPI (Python Package Index) link for the package.\n\nThis method constructs a URL pointing to the PyPI page of the package represented by the current instance, using the package name stored in the 'pypi_name' attribute. The method relies on the 'get_pypi_link' function from the 'mypy_boto3_builder.utils.strings' module to format the link properly.\n\nReturns:\n    str: A URL string directing to the package's PyPI page.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.stubs_pypi\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def stubs_pypi(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the link to the PyPI page for the lite version of the stubs package.\n\nThis property accesses the `PYPI_STUBS_NAME` constant from the `data` attribute of the `PackageURL` instance, which is expected to be a subclass of `BasePackageData`. The `get_pypi_link` utility function is used to construct and return the full URL link to the corresponding PyPI page.\n\nReturns:\n    str: The URL to the PyPI page for the lite version of the stubs package.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pepy_badge\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pepy_badge(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the total downloads badge for the package on PePy. \n\nThis property generates a URL linking to a badge displaying the total number of downloads for the package specified by `self.pypi_name`. The `self.pypi_name` is expected to be a string representing the name of the package in the Python Package Index (PyPI), which is initialized when creating an instance of the `PackageURL` class. The badge is retrieved from the static PePy service, providing a visual representation of the package's popularity.\n\"\"\"\n```\n\n- CLASS METHOD: PackageURL.pepy\n  - CLASS SIGNATURE: class PackageURL:\n  - SIGNATURE: def pepy(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the PePy project link for the package.\n\nThe `pepy` property constructs a URL that links to the PePy website for tracking downloads of the package identified by `self.pypi_name`. This property is directly dependent on the `pypi_name` attribute, which is set during the initialization of the `PackageURL` class.\n\nReturns:\n    str: A formatted URL string pointing to the PePy project page for the package.\n\"\"\"\n```\n\n## FILE 2: mypy_boto3_builder/utils/strings.py\n\n- FUNCTION NAME: get_pypi_link\n  - SIGNATURE: def get_pypi_link(package_name: str) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the URL link to a Python package's page on the Python Package Index (PyPI).\n\nArgs:\n    package_name (str): The name of the package for which to retrieve the PyPI link. This parameter is required and must not be an empty string.\n\nReturns:\n    str: A formatted URL string pointing to the specified package's PyPI page.\n\nRaises:\n    BuildInternalError: If `package_name` is an empty string, indicating that the package name must be provided to generate a valid link.\n\nThis function does not depend on any external constants or variables but raises a specific custom exception, `BuildInternalError`, which is defined in `mypy_boto3_builder.exceptions`. The exception is raised to handle cases where the input is invalid.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - mypy_boto3_builder/structures/package_url.py:PackageURL:library_pypi\n    - mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_lite_pypi\n    - mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_full_pypi\n    - mypy_boto3_builder/structures/package_url.py:PackageURL:pypi\n    - mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_pypi\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/structures/package_url.py": "\"\"\"\nPackage links structure.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom mypy_boto3_builder.package_data import BasePackageData\nfrom mypy_boto3_builder.utils.strings import get_pypi_link\n\nclass PackageURL:\n    \"\"\"\n    Package links structure.\n    \"\"\"",
    "mypy_boto3_builder/utils/strings.py": "\"\"\"\nMultiple string utils collection.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nimport builtins\nimport datetime\nimport keyword\nimport re\nimport typing\nfrom types import MappingProxyType\nfrom typing import Final\nfrom unittest.mock import MagicMock\nfrom botocore import xform_name as botocore_xform_name\nfrom botocore.utils import get_service_module_name\nfrom mypy_boto3_builder.constants import DOCSTRING_LINE_LENGTH, DOCSTRING_MAX_LENGTH\nfrom mypy_boto3_builder.exceptions import BuildInternalError, TypeAnnotationError\nRESERVED_NAMES: Final = {*dir(typing), *dir(builtins), *keyword.kwlist}\nAWS_LINK_RE: Final = re.compile('`([^`]+\\\\S)\\\\s*<https://(\\\\S+)>`\\\\_*')\nREPLACE_DOCSTRING_CHARS: Final = MappingProxyType({'\u2019': \"'\", '\u2013': '-'})\n\ndef get_class_prefix(func_name: str) -> str:\n    \"\"\"\n    Get a valid Python class prefix from `func_name`.\n\n    Arguments:\n        func_name -- Any string.\n\n    Returns:\n        String with a class prefix.\n    \"\"\"\n    parts = [capitalize(i) for i in func_name.split('_') if i]\n    return ''.join(parts)\n\ndef get_anchor_link(text: str) -> str:\n    \"\"\"\n    Convert header to markdown anchor link.\n    \"\"\"\n    return text.strip().replace(' ', '-').replace('.', '').lower()\n\ndef is_reserved(word: str) -> bool:\n    \"\"\"\n    Check whether variable name conflicts with Python reserved names.\n    \"\"\"\n    return word in RESERVED_NAMES\n\ndef get_short_docstring(doc: str) -> str:\n    \"\"\"\n    Create a short docstring from boto3 documentation.\n\n    Trims docstring to 300 chars.\n    Removes double and triple backticks.\n    Stops on `**Request syntax**` and `::`.\n    Ensures that backticks are closed.\n    Replaces `Text <link>` with [Text](link).\n    Wraps docstring to 80 chars.\n    \"\"\"\n    doc = str(doc)\n    if len(doc) > DOCSTRING_MAX_LENGTH:\n        doc = f'{doc[:DOCSTRING_MAX_LENGTH - 3]}...'\n    result: list[str] = []\n    if not doc:\n        return ''\n    for raw_line in doc.splitlines():\n        line = raw_line.strip().removesuffix('::')\n        if not line:\n            continue\n        if line.startswith(':') or line.lower().startswith('**request syntax**'):\n            break\n        if '. ' in line:\n            result.append(line.split('. ')[0])\n            break\n        result.append(line)\n        if line.endswith('.'):\n            break\n    result_str = ' '.join(result).replace('```', '`').replace('``', '`').replace('\\n', ' ').strip()\n    return clean_artifacts(result_str)\n\ndef clean_artifacts(line: str) -> str:\n    \"\"\"\n    Remove common artifacts in botocre docs.\n    \"\"\"\n    if line.count('`') % 2:\n        line = f'{line}`'\n    if line and (not line.endswith('.')):\n        line = f'{line}.'\n    for ch, replacement in REPLACE_DOCSTRING_CHARS.items():\n        if ch in line:\n            line = line.replace(ch, replacement)\n    if '<https:' in line:\n        line = AWS_LINK_RE.sub('[\\\\g<1>](https://\\\\g<2>)', line)\n        line = line.replace('https\\\\:', 'https:')\n        line = line.replace('neptune-db\\\\:', 'neptune-db:')\n    return line\n\ndef textwrap(text: str, width: int=DOCSTRING_LINE_LENGTH) -> str:\n    \"\"\"\n    Wrap text to `width` chars.\n    \"\"\"\n    result: list[str] = []\n    for raw_line in text.splitlines():\n        if len(raw_line) <= width:\n            result.append(raw_line)\n            continue\n        line = raw_line\n        while line:\n            if len(line) < width:\n                result.append(line)\n                break\n            space_index = line.rfind(' ', 0, width)\n            if space_index < 0:\n                space_index = line.find(' ', width)\n            if space_index < 0:\n                result.append(line)\n                break\n            sub_line = line[:space_index].rstrip()\n            next_index = space_index + 1\n            line = line[next_index:].lstrip()\n            result.append(sub_line)\n    return '\\n'.join(result)\n\ndef get_botocore_class_name(metadata: dict[str, str]) -> str:\n    \"\"\"\n    Get Botocore class name from Service metadata.\n    \"\"\"\n    service_model = MagicMock()\n    service_model.service_name = metadata.get('serviceId', '')\n    service_model.metadata = metadata\n    name = get_service_module_name(service_model)\n    return capitalize(name)\n\ndef get_type_def_name(*parts: str) -> str:\n    \"\"\"\n    Get a valid Python TypeDef class name from `parts`.\n\n    Examples:\n        ```python\n        get_type_def_name(\"MyClass\", \"my_method\")  # MyClassMyMethodTypeDef\n        ```\n    \"\"\"\n    if not parts:\n        raise TypeAnnotationError('At least one part is required')\n    parts_camelcased = [get_class_prefix(i) for i in parts]\n    name = ''.join(parts_camelcased)\n    return f'{name}TypeDef'\n\ndef capitalize(s: str) -> str:\n    \"\"\"\n    Capitalize first letter of a string.\n    \"\"\"\n    return f'{s[:1].upper()}{s[1:]}'\n\ndef xform_name(name: str, sep: str='_') -> str:\n    \"\"\"\n    Convert name to snake_case.\n\n    Arguments:\n        name -- Any string.\n        sep -- Separator.\n    \"\"\"\n    if not sep:\n        raise BuildInternalError('Separator is required')\n    return botocore_xform_name(name, sep)\n\ndef get_copyright() -> str:\n    \"\"\"\n    Get copyright notice.\n    \"\"\"\n    now = datetime.datetime.now(datetime.timezone.utc)\n    return f'Copyright {now.year} Vlad Emelianov'"
  },
  "call_tree": {
    "tests/structures/test_package_url.py:TestPackageURL:setup_method": {
      "mypy_boto3_builder/structures/package_url.py:PackageURL:__init__": {}
    },
    "tests/structures/test_package_url.py:TestPackageURL:test_init": {
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pypi_badge": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pyversions_badge": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:rtd_badge": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pepy_badge": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:montly_downloads_badge": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pypi": {
        "mypy_boto3_builder/utils/strings.py:get_pypi_link": {}
      },
      "mypy_boto3_builder/structures/package_url.py:PackageURL:library_pypi": {
        "mypy_boto3_builder/utils/strings.py:get_pypi_link": {}
      },
      "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_pypi": {
        "mypy_boto3_builder/utils/strings.py:get_pypi_link": {}
      },
      "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_lite_pypi": {
        "mypy_boto3_builder/utils/strings.py:get_pypi_link": {}
      },
      "mypy_boto3_builder/structures/package_url.py:PackageURL:stubs_full_pypi": {
        "mypy_boto3_builder/utils/strings.py:get_pypi_link": {}
      },
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pepy": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:pypistats": {},
      "mypy_boto3_builder/structures/package_url.py:PackageURL:docs": {}
    }
  }
}