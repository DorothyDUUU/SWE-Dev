{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-structuremap_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/structuremap_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import structuremap\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass StructureMapTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"StructureMap\", js[\"resourceType\"])\n        return structuremap.StructureMap(js)\n    \n    def testStructureMap1(self):\n        inst = self.instantiate_from(\"structuremap-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a StructureMap instance\")\n        self.implStructureMap1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"StructureMap\", js[\"resourceType\"])\n        inst2 = structuremap.StructureMap(js)\n        self.implStructureMap1(inst2)\n    \n    def implStructureMap1(self, inst):\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-03-09\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-03-09\")\n        self.assertEqual(inst.description, \"Example Structure Map\")\n        self.assertEqual(inst.group[0].documentation, \"test -> testValue\")\n        self.assertEqual(inst.group[0].input[0].mode, \"source\")\n        self.assertEqual(inst.group[0].input[0].name, \"test\")\n        self.assertEqual(inst.group[0].name, \"Examples\")\n        self.assertEqual(inst.group[0].rule[0].name, \"rule1\")\n        self.assertEqual(inst.group[0].rule[0].source[0].context, \"Source\")\n        self.assertEqual(inst.group[0].rule[0].source[0].element, \"test\")\n        self.assertEqual(inst.group[0].rule[0].source[0].type, \"SourceClassA\")\n        self.assertEqual(inst.group[0].rule[0].source[0].variable, \"t\")\n        self.assertEqual(inst.group[0].rule[0].target[0].context, \"Destination\")\n        self.assertEqual(inst.group[0].rule[0].target[0].contextType, \"variable\")\n        self.assertEqual(inst.group[0].rule[0].target[0].element, \"testValue\")\n        self.assertEqual(inst.group[0].rule[0].target[0].transform, \"copy\")\n        self.assertEqual(inst.group[0].typeMode, \"none\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"urn:ietf:rfc:3986\")\n        self.assertEqual(inst.identifier[0].value, \"urn:oid:37843577-95fb-4adb-84c0-8837188a7bf3\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"009\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"Oceania\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"http://unstats.un.org/unsd/methods/m49/m49.htm\")\n        self.assertEqual(inst.name, \"ExampleMap\")\n        self.assertEqual(inst.publisher, \"HL7 FHIR Standard\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Example Map\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/StructureMap/example\")\n        self.assertEqual(inst.version, \"0.1\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/structuremap.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/StructureMap).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass StructureMap(domainresource.DomainResource):\n    \"\"\" A Map of relationships between 2 structures that can be used to transform\n    data.\n    \"\"\"\n    \n    resource_type = \"StructureMap\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the structure map.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.group = None\n        \"\"\" Named sections for reader convenience.\n        List of `StructureMapGroup` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the structure map.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.import_fhir = None\n        \"\"\" Other maps used by this map (canonical URLs).\n        List of `str` items. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for structure map (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this structure map (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this structure map is defined.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.structure = None\n        \"\"\" Structure Definition used by this map.\n        List of `StructureMapStructure` items (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this structure map (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this structure map, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the structure map.\n        Type `str`. \"\"\"\n        \n        super(StructureMap, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMap, self).elementProperties()\n        js.extend([\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"group\", \"group\", StructureMapGroup, True, None, True),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"import_fhir\", \"import\", str, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"structure\", \"structure\", StructureMapStructure, True, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, True),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass StructureMapGroup(backboneelement.BackboneElement):\n    \"\"\" Named sections for reader convenience.\n    \n    Organizes the mapping into manageable chunks for human review/ease of\n    maintenance.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.documentation = None\n        \"\"\" Additional description/explanation for group.\n        Type `str`. \"\"\"\n        \n        self.extends = None\n        \"\"\" Another group that this group adds rules to.\n        Type `str`. \"\"\"\n        \n        self.input = None\n        \"\"\" Named instance provided when invoking the map.\n        List of `StructureMapGroupInput` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Human-readable label.\n        Type `str`. \"\"\"\n        \n        self.rule = None\n        \"\"\" Transform Rule from source to target.\n        List of `StructureMapGroupRule` items (represented as `dict` in JSON). \"\"\"\n        \n        self.typeMode = None\n        \"\"\" none | types | type-and-types.\n        Type `str`. \"\"\"\n        \n        super(StructureMapGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroup, self).elementProperties()\n        js.extend([\n            (\"documentation\", \"documentation\", str, False, None, False),\n            (\"extends\", \"extends\", str, False, None, False),\n            (\"input\", \"input\", StructureMapGroupInput, True, None, True),\n            (\"name\", \"name\", str, False, None, True),\n            (\"rule\", \"rule\", StructureMapGroupRule, True, None, True),\n            (\"typeMode\", \"typeMode\", str, False, None, True),\n        ])\n        return js\n\n\nclass StructureMapGroupInput(backboneelement.BackboneElement):\n    \"\"\" Named instance provided when invoking the map.\n    \n    A name assigned to an instance of data. The instance must be provided when\n    the mapping is invoked.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupInput\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.documentation = None\n        \"\"\" Documentation for this instance of data.\n        Type `str`. \"\"\"\n        \n        self.mode = None\n        \"\"\" source | target.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this instance of data.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type for this instance of data.\n        Type `str`. \"\"\"\n        \n        super(StructureMapGroupInput, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupInput, self).elementProperties()\n        js.extend([\n            (\"documentation\", \"documentation\", str, False, None, False),\n            (\"mode\", \"mode\", str, False, None, True),\n            (\"name\", \"name\", str, False, None, True),\n            (\"type\", \"type\", str, False, None, False),\n        ])\n        return js\n\n\nclass StructureMapGroupRule(backboneelement.BackboneElement):\n    \"\"\" Transform Rule from source to target.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupRule\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.dependent = None\n        \"\"\" Which other rules to apply in the context of this rule.\n        List of `StructureMapGroupRuleDependent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.documentation = None\n        \"\"\" Documentation for this instance of data.\n        Type `str`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name of the rule for internal references.\n        Type `str`. \"\"\"\n        \n        self.rule = None\n        \"\"\" Rules contained in this rule.\n        List of `StructureMapGroupRule` items (represented as `dict` in JSON). \"\"\"\n        \n        self.source = None\n        \"\"\" Source inputs to the mapping.\n        List of `StructureMapGroupRuleSource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" Content to create because of this mapping rule.\n        List of `StructureMapGroupRuleTarget` items (represented as `dict` in JSON). \"\"\"\n        \n        super(StructureMapGroupRule, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupRule, self).elementProperties()\n        js.extend([\n            (\"dependent\", \"dependent\", StructureMapGroupRuleDependent, True, None, False),\n            (\"documentation\", \"documentation\", str, False, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"rule\", \"rule\", StructureMapGroupRule, True, None, False),\n            (\"source\", \"source\", StructureMapGroupRuleSource, True, None, True),\n            (\"target\", \"target\", StructureMapGroupRuleTarget, True, None, False),\n        ])\n        return js\n\n\nclass StructureMapGroupRuleDependent(backboneelement.BackboneElement):\n    \"\"\" Which other rules to apply in the context of this rule.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupRuleDependent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.name = None\n        \"\"\" Name of a rule or group to apply.\n        Type `str`. \"\"\"\n        \n        self.variable = None\n        \"\"\" Variable to pass to the rule or group.\n        List of `str` items. \"\"\"\n        \n        super(StructureMapGroupRuleDependent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupRuleDependent, self).elementProperties()\n        js.extend([\n            (\"name\", \"name\", str, False, None, True),\n            (\"variable\", \"variable\", str, True, None, True),\n        ])\n        return js\n\n\nclass StructureMapGroupRuleSource(backboneelement.BackboneElement):\n    \"\"\" Source inputs to the mapping.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupRuleSource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.check = None\n        \"\"\" FHIRPath expression  - must be true or the mapping engine throws an\n        error instead of completing.\n        Type `str`. \"\"\"\n        \n        self.condition = None\n        \"\"\" FHIRPath expression  - must be true or the rule does not apply.\n        Type `str`. \"\"\"\n        \n        self.context = None\n        \"\"\" Type or variable this rule applies to.\n        Type `str`. \"\"\"\n        \n        self.defaultValueAddress = None\n        \"\"\" Default value if no value exists.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueAge = None\n        \"\"\" Default value if no value exists.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueAnnotation = None\n        \"\"\" Default value if no value exists.\n        Type `Annotation` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueAttachment = None\n        \"\"\" Default value if no value exists.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueBase64Binary = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueBoolean = None\n        \"\"\" Default value if no value exists.\n        Type `bool`. \"\"\"\n        \n        self.defaultValueCanonical = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueCode = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueCodeableConcept = None\n        \"\"\" Default value if no value exists.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueCoding = None\n        \"\"\" Default value if no value exists.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueContactDetail = None\n        \"\"\" Default value if no value exists.\n        Type `ContactDetail` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueContactPoint = None\n        \"\"\" Default value if no value exists.\n        Type `ContactPoint` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueContributor = None\n        \"\"\" Default value if no value exists.\n        Type `Contributor` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueCount = None\n        \"\"\" Default value if no value exists.\n        Type `Count` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueDataRequirement = None\n        \"\"\" Default value if no value exists.\n        Type `DataRequirement` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueDate = None\n        \"\"\" Default value if no value exists.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.defaultValueDateTime = None\n        \"\"\" Default value if no value exists.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.defaultValueDecimal = None\n        \"\"\" Default value if no value exists.\n        Type `float`. \"\"\"\n        \n        self.defaultValueDistance = None\n        \"\"\" Default value if no value exists.\n        Type `Distance` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueDosage = None\n        \"\"\" Default value if no value exists.\n        Type `Dosage` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueDuration = None\n        \"\"\" Default value if no value exists.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueExpression = None\n        \"\"\" Default value if no value exists.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueHumanName = None\n        \"\"\" Default value if no value exists.\n        Type `HumanName` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueId = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueIdentifier = None\n        \"\"\" Default value if no value exists.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueInstant = None\n        \"\"\" Default value if no value exists.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.defaultValueInteger = None\n        \"\"\" Default value if no value exists.\n        Type `int`. \"\"\"\n        \n        self.defaultValueMarkdown = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueMeta = None\n        \"\"\" Default value if no value exists.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueMoney = None\n        \"\"\" Default value if no value exists.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueOid = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueParameterDefinition = None\n        \"\"\" Default value if no value exists.\n        Type `ParameterDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValuePeriod = None\n        \"\"\" Default value if no value exists.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValuePositiveInt = None\n        \"\"\" Default value if no value exists.\n        Type `int`. \"\"\"\n        \n        self.defaultValueQuantity = None\n        \"\"\" Default value if no value exists.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueRange = None\n        \"\"\" Default value if no value exists.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueRatio = None\n        \"\"\" Default value if no value exists.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueReference = None\n        \"\"\" Default value if no value exists.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueRelatedArtifact = None\n        \"\"\" Default value if no value exists.\n        Type `RelatedArtifact` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueSampledData = None\n        \"\"\" Default value if no value exists.\n        Type `SampledData` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueSignature = None\n        \"\"\" Default value if no value exists.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueString = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueTime = None\n        \"\"\" Default value if no value exists.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.defaultValueTiming = None\n        \"\"\" Default value if no value exists.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueTriggerDefinition = None\n        \"\"\" Default value if no value exists.\n        Type `TriggerDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueUnsignedInt = None\n        \"\"\" Default value if no value exists.\n        Type `int`. \"\"\"\n        \n        self.defaultValueUri = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueUrl = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.defaultValueUsageContext = None\n        \"\"\" Default value if no value exists.\n        Type `UsageContext` (represented as `dict` in JSON). \"\"\"\n        \n        self.defaultValueUuid = None\n        \"\"\" Default value if no value exists.\n        Type `str`. \"\"\"\n        \n        self.element = None\n        \"\"\" Optional field for this source.\n        Type `str`. \"\"\"\n        \n        self.listMode = None\n        \"\"\" first | not_first | last | not_last | only_one.\n        Type `str`. \"\"\"\n        \n        self.logMessage = None\n        \"\"\" Message to put in log if source exists (FHIRPath).\n        Type `str`. \"\"\"\n        \n        self.max = None\n        \"\"\" Specified maximum cardinality (number or *).\n        Type `str`. \"\"\"\n        \n        self.min = None\n        \"\"\" Specified minimum cardinality.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" Rule only applies if source has this type.\n        Type `str`. \"\"\"\n        \n        self.variable = None\n        \"\"\" Named context for field, if a field is specified.\n        Type `str`. \"\"\"\n        \n        super(StructureMapGroupRuleSource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupRuleSource, self).elementProperties()\n        js.extend([\n            (\"check\", \"check\", str, False, None, False),\n            (\"condition\", \"condition\", str, False, None, False),\n            (\"context\", \"context\", str, False, None, True),\n            (\"defaultValueAddress\", \"defaultValueAddress\", address.Address, False, \"defaultValue\", False),\n            (\"defaultValueAge\", \"defaultValueAge\", age.Age, False, \"defaultValue\", False),\n            (\"defaultValueAnnotation\", \"defaultValueAnnotation\", annotation.Annotation, False, \"defaultValue\", False),\n            (\"defaultValueAttachment\", \"defaultValueAttachment\", attachment.Attachment, False, \"defaultValue\", False),\n            (\"defaultValueBase64Binary\", \"defaultValueBase64Binary\", str, False, \"defaultValue\", False),\n            (\"defaultValueBoolean\", \"defaultValueBoolean\", bool, False, \"defaultValue\", False),\n            (\"defaultValueCanonical\", \"defaultValueCanonical\", str, False, \"defaultValue\", False),\n            (\"defaultValueCode\", \"defaultValueCode\", str, False, \"defaultValue\", False),\n            (\"defaultValueCodeableConcept\", \"defaultValueCodeableConcept\", codeableconcept.CodeableConcept, False, \"defaultValue\", False),\n            (\"defaultValueCoding\", \"defaultValueCoding\", coding.Coding, False, \"defaultValue\", False),\n            (\"defaultValueContactDetail\", \"defaultValueContactDetail\", contactdetail.ContactDetail, False, \"defaultValue\", False),\n            (\"defaultValueContactPoint\", \"defaultValueContactPoint\", contactpoint.ContactPoint, False, \"defaultValue\", False),\n            (\"defaultValueContributor\", \"defaultValueContributor\", contributor.Contributor, False, \"defaultValue\", False),\n            (\"defaultValueCount\", \"defaultValueCount\", count.Count, False, \"defaultValue\", False),\n            (\"defaultValueDataRequirement\", \"defaultValueDataRequirement\", datarequirement.DataRequirement, False, \"defaultValue\", False),\n            (\"defaultValueDate\", \"defaultValueDate\", fhirdate.FHIRDate, False, \"defaultValue\", False),\n            (\"defaultValueDateTime\", \"defaultValueDateTime\", fhirdatetime.FHIRDateTime, False, \"defaultValue\", False),\n            (\"defaultValueDecimal\", \"defaultValueDecimal\", float, False, \"defaultValue\", False),\n            (\"defaultValueDistance\", \"defaultValueDistance\", distance.Distance, False, \"defaultValue\", False),\n            (\"defaultValueDosage\", \"defaultValueDosage\", dosage.Dosage, False, \"defaultValue\", False),\n            (\"defaultValueDuration\", \"defaultValueDuration\", duration.Duration, False, \"defaultValue\", False),\n            (\"defaultValueExpression\", \"defaultValueExpression\", expression.Expression, False, \"defaultValue\", False),\n            (\"defaultValueHumanName\", \"defaultValueHumanName\", humanname.HumanName, False, \"defaultValue\", False),\n            (\"defaultValueId\", \"defaultValueId\", str, False, \"defaultValue\", False),\n            (\"defaultValueIdentifier\", \"defaultValueIdentifier\", identifier.Identifier, False, \"defaultValue\", False),\n            (\"defaultValueInstant\", \"defaultValueInstant\", fhirinstant.FHIRInstant, False, \"defaultValue\", False),\n            (\"defaultValueInteger\", \"defaultValueInteger\", int, False, \"defaultValue\", False),\n            (\"defaultValueMarkdown\", \"defaultValueMarkdown\", str, False, \"defaultValue\", False),\n            (\"defaultValueMeta\", \"defaultValueMeta\", meta.Meta, False, \"defaultValue\", False),\n            (\"defaultValueMoney\", \"defaultValueMoney\", money.Money, False, \"defaultValue\", False),\n            (\"defaultValueOid\", \"defaultValueOid\", str, False, \"defaultValue\", False),\n            (\"defaultValueParameterDefinition\", \"defaultValueParameterDefinition\", parameterdefinition.ParameterDefinition, False, \"defaultValue\", False),\n            (\"defaultValuePeriod\", \"defaultValuePeriod\", period.Period, False, \"defaultValue\", False),\n            (\"defaultValuePositiveInt\", \"defaultValuePositiveInt\", int, False, \"defaultValue\", False),\n            (\"defaultValueQuantity\", \"defaultValueQuantity\", quantity.Quantity, False, \"defaultValue\", False),\n            (\"defaultValueRange\", \"defaultValueRange\", range.Range, False, \"defaultValue\", False),\n            (\"defaultValueRatio\", \"defaultValueRatio\", ratio.Ratio, False, \"defaultValue\", False),\n            (\"defaultValueReference\", \"defaultValueReference\", fhirreference.FHIRReference, False, \"defaultValue\", False),\n            (\"defaultValueRelatedArtifact\", \"defaultValueRelatedArtifact\", relatedartifact.RelatedArtifact, False, \"defaultValue\", False),\n            (\"defaultValueSampledData\", \"defaultValueSampledData\", sampleddata.SampledData, False, \"defaultValue\", False),\n            (\"defaultValueSignature\", \"defaultValueSignature\", signature.Signature, False, \"defaultValue\", False),\n            (\"defaultValueString\", \"defaultValueString\", str, False, \"defaultValue\", False),\n            (\"defaultValueTime\", \"defaultValueTime\", fhirtime.FHIRTime, False, \"defaultValue\", False),\n            (\"defaultValueTiming\", \"defaultValueTiming\", timing.Timing, False, \"defaultValue\", False),\n            (\"defaultValueTriggerDefinition\", \"defaultValueTriggerDefinition\", triggerdefinition.TriggerDefinition, False, \"defaultValue\", False),\n            (\"defaultValueUnsignedInt\", \"defaultValueUnsignedInt\", int, False, \"defaultValue\", False),\n            (\"defaultValueUri\", \"defaultValueUri\", str, False, \"defaultValue\", False),\n            (\"defaultValueUrl\", \"defaultValueUrl\", str, False, \"defaultValue\", False),\n            (\"defaultValueUsageContext\", \"defaultValueUsageContext\", usagecontext.UsageContext, False, \"defaultValue\", False),\n            (\"defaultValueUuid\", \"defaultValueUuid\", str, False, \"defaultValue\", False),\n            (\"element\", \"element\", str, False, None, False),\n            (\"listMode\", \"listMode\", str, False, None, False),\n            (\"logMessage\", \"logMessage\", str, False, None, False),\n            (\"max\", \"max\", str, False, None, False),\n            (\"min\", \"min\", int, False, None, False),\n            (\"type\", \"type\", str, False, None, False),\n            (\"variable\", \"variable\", str, False, None, False),\n        ])\n        return js\n\n\nclass StructureMapGroupRuleTarget(backboneelement.BackboneElement):\n    \"\"\" Content to create because of this mapping rule.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupRuleTarget\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.context = None\n        \"\"\" Type or variable this rule applies to.\n        Type `str`. \"\"\"\n        \n        self.contextType = None\n        \"\"\" type | variable.\n        Type `str`. \"\"\"\n        \n        self.element = None\n        \"\"\" Field to create in the context.\n        Type `str`. \"\"\"\n        \n        self.listMode = None\n        \"\"\" first | share | last | collate.\n        List of `str` items. \"\"\"\n        \n        self.listRuleId = None\n        \"\"\" Internal rule reference for shared list items.\n        Type `str`. \"\"\"\n        \n        self.parameter = None\n        \"\"\" Parameters to the transform.\n        List of `StructureMapGroupRuleTargetParameter` items (represented as `dict` in JSON). \"\"\"\n        \n        self.transform = None\n        \"\"\" create | copy +.\n        Type `str`. \"\"\"\n        \n        self.variable = None\n        \"\"\" Named context for field, if desired, and a field is specified.\n        Type `str`. \"\"\"\n        \n        super(StructureMapGroupRuleTarget, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupRuleTarget, self).elementProperties()\n        js.extend([\n            (\"context\", \"context\", str, False, None, False),\n            (\"contextType\", \"contextType\", str, False, None, False),\n            (\"element\", \"element\", str, False, None, False),\n            (\"listMode\", \"listMode\", str, True, None, False),\n            (\"listRuleId\", \"listRuleId\", str, False, None, False),\n            (\"parameter\", \"parameter\", StructureMapGroupRuleTargetParameter, True, None, False),\n            (\"transform\", \"transform\", str, False, None, False),\n            (\"variable\", \"variable\", str, False, None, False),\n        ])\n        return js\n\n\nclass StructureMapGroupRuleTargetParameter(backboneelement.BackboneElement):\n    \"\"\" Parameters to the transform.\n    \"\"\"\n    \n    resource_type = \"StructureMapGroupRuleTargetParameter\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Parameter value - variable or literal.\n        Type `bool`. \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Parameter value - variable or literal.\n        Type `float`. \"\"\"\n        \n        self.valueId = None\n        \"\"\" Parameter value - variable or literal.\n        Type `str`. \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Parameter value - variable or literal.\n        Type `int`. \"\"\"\n        \n        self.valueString = None\n        \"\"\" Parameter value - variable or literal.\n        Type `str`. \"\"\"\n        \n        super(StructureMapGroupRuleTargetParameter, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapGroupRuleTargetParameter, self).elementProperties()\n        js.extend([\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueId\", \"valueId\", str, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n        ])\n        return js\n\n\nclass StructureMapStructure(backboneelement.BackboneElement):\n    \"\"\" Structure Definition used by this map.\n    \n    A structure definition used by this map. The structure definition may\n    describe instances that are converted, or the instances that are produced.\n    \"\"\"\n    \n    resource_type = \"StructureMapStructure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.alias = None\n        \"\"\" Name for type in this map.\n        Type `str`. \"\"\"\n        \n        self.documentation = None\n        \"\"\" Documentation on use of structure.\n        Type `str`. \"\"\"\n        \n        self.mode = None\n        \"\"\" source | queried | target | produced.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical reference to structure definition.\n        Type `str`. \"\"\"\n        \n        super(StructureMapStructure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(StructureMapStructure, self).elementProperties()\n        js.extend([\n            (\"alias\", \"alias\", str, False, None, False),\n            (\"documentation\", \"documentation\", str, False, None, False),\n            (\"mode\", \"mode\", str, False, None, True),\n            (\"url\", \"url\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import age\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import contactpoint\nfrom . import contributor\nfrom . import count\nfrom . import datarequirement\nfrom . import distance\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import humanname\nfrom . import identifier\nfrom . import meta\nfrom . import money\nfrom . import parameterdefinition\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import ratio\nfrom . import relatedartifact\nfrom . import sampleddata\nfrom . import signature\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of the FHIRDate class. If the instance was initialized with a valid JSON string, this method will return that original input; otherwise, it will return the standardized ISO 8601 representation of the date (via the isostring property). The value of `self.origval`, which stores the original JSON input, is checked to determine the return value. If `self.origval` is None, the method defaults to returning `self.isostring`, which provides a normalized date format suitable for FHIR standards.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of the FHIRDate class. If the instance was initialized with a valid JSON string, this method will return that original input; otherwise, it will return the standardized ISO 8601 representation of the date (via the isostring property). The value of `self.origval`, which stores the original JSON input, is checked to determine the return value. If `self.origval` is None, the method defaults to returning `self.isostring`, which provides a normalized date format suitable for FHIR standards.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/structuremap.py": {
      "StructureMap.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a StructureMap instance representing a map of relationships between two structures for data transformation.\n\nThis constructor initializes properties that define the structure map, including metadata such as `contact`, `copyright`, `date`, `description`, `experimental`, `group`, `identifier`, `import_fhir`, `jurisdiction`, `name`, `publisher`, `purpose`, `status`, `structure`, `title`, `url`, `useContext`, and `version`. Each of these attributes has specific types and requirements as per the FHIR standards, accommodating for structured data, documentation, and metadata relevant to data transformations.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing information to initialize the properties. If not provided, all properties are initialized to None.\n- strict (bool, optional): If True (default), attempts to initialize with invalid properties raise a TypeError. If False, allows some flexibility in property validation.\n\nAttributes:\n- contact: Contact details for the publisher.\n- copyright: Publishing restrictions related to use.\n- date: Last changed date using `FHIRDateTime`.\n- description: Natural language description of the map.\n- experimental: Indicates if the map is for testing purposes.\n- group: Sections of the map organized in `StructureMapGroup` items for easier management.\n- identifier: Additional identifiers for the map.\n- import_fhir: Canonical URLs of other maps this one relies on.\n- jurisdiction: Intended usage jurisdiction represented as `CodeableConcept`.\n- name: Computer-friendly name for the map.\n- publisher: Name of the individual or organization publishing the map.\n- purpose: Purpose or rationale for defining the map.\n- status: Current status (draft, active, retired, unknown).\n- structure: Definitions used by the map as `StructureMapStructure`.\n- title: Human-friendly name for the map.\n- url: Unique URI identifier for the map.\n- useContext: Contexts supported by the map represented as `UsageContext`.\n- version: Business version of the map.\n\nInteractions: The constructor calls the superclass `DomainResource`'s `__init__` method to ensure that inherited attributes are appropriately initialized.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the structure map.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.group = None\n        ' Named sections for reader convenience.\\n        List of `StructureMapGroup` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the structure map.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.import_fhir = None\n        ' Other maps used by this map (canonical URLs).\\n        List of `str` items. '\n        self.jurisdiction = None\n        ' Intended jurisdiction for structure map (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this structure map (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this structure map is defined.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.structure = None\n        ' Structure Definition used by this map.\\n        List of `StructureMapStructure` items (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this structure map (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this structure map, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the structure map.\\n        Type `str`. '\n        super(StructureMap, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a StructureMap instance representing a map of relationships between two structures for data transformation.\n\nThis constructor initializes properties that define the structure map, including metadata such as `contact`, `copyright`, `date`, `description`, `experimental`, `group`, `identifier`, `import_fhir`, `jurisdiction`, `name`, `publisher`, `purpose`, `status`, `structure`, `title`, `url`, `useContext`, and `version`. Each of these attributes has specific types and requirements as per the FHIR standards, accommodating for structured data, documentation, and metadata relevant to data transformations.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing information to initialize the properties. If not provided, all properties are initialized to None.\n- strict (bool, optional): If True (default), attempts to initialize with invalid properties raise a TypeError. If False, allows some flexibility in property validation.\n\nAttributes:\n- contact: Contact details for the publisher.\n- copyright: Publishing restrictions related to use.\n- date: Last changed date using `FHIRDateTime`.\n- description: Natural language description of the map.\n- experimental: Indicates if the map is for testing purposes.\n- group: Sections of the map organized in `StructureMapGroup` items for easier management.\n- identifier: Additional identifiers for the map.\n- import_fhir: Canonical URLs of other maps this one relies on.\n- jurisdiction: Intended usage jurisdiction represented as `CodeableConcept`.\n- name: Computer-friendly name for the map.\n- publisher: Name of the individual or organization publishing the map.\n- purpose: Purpose or rationale for defining the map.\n- status: Current status (draft, active, retired, unknown).\n- structure: Definitions used by the map as `StructureMapStructure`.\n- title: Human-friendly name for the map.\n- url: Unique URI identifier for the map.\n- useContext: Contexts supported by the map represented as `UsageContext`.\n- version: Business version of the map.\n\nInteractions: The constructor calls the superclass `DomainResource`'s `__init__` method to ensure that inherited attributes are appropriately initialized.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class StructureMap(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. This value is passed to the superclass (FHIRDate) for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores a Python datetime object that represents the parsed FHIR datetime. Initialized to None upon instantiation.\n\nThis constructor utilizes the superclass initializer to handle the input and may involve parsing logic that defines how to convert the FHIR datetime format. It ensures that the datetime attribute is defined in the context of FHIR's datetime requirements.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. This value is passed to the superclass (FHIRDate) for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores a Python datetime object that represents the parsed FHIR datetime. Initialized to None upon instantiation.\n\nThis constructor utilizes the superclass initializer to handle the input and may involve parsing logic that defines how to convert the FHIR datetime format. It ensures that the datetime attribute is defined in the context of FHIR's datetime requirements.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the instance of FHIRAbstractResource to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute specific to the FHIR resource being represented. It ensures that the resulting JSON includes a key that identifies the type of resource, which is essential for FHIR services that expect this information when processing resources.\n\nReturns:\n    dict: A JSON-compatible dictionary containing the instance's data including the `resourceType`, which is set to the class attribute `resource_type`.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to gather other instance data before appending the `resourceType`.\n    - The `resource_type` attribute is defined in the class and serves as a key identifier for the resource type in the FHIR specification.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the instance of FHIRAbstractResource to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute specific to the FHIR resource being represented. It ensures that the resulting JSON includes a key that identifies the type of resource, which is essential for FHIR services that expect this information when processing resources.\n\nReturns:\n    dict: A JSON-compatible dictionary containing the instance's data including the `resourceType`, which is set to the class attribute `resource_type`.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to gather other instance data before appending the `resourceType`.\n    - The `resource_type` attribute is defined in the class and serves as a key identifier for the resource type in the FHIR specification.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/structuremap.py:StructureMap:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/structuremap_test.py:StructureMapTests:testStructureMap1": {
      "tests/models/structuremap_test.py:StructureMapTests:instantiate_from": {
        "fhirclient/models/structuremap.py:StructureMap:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/structuremap.py:StructureMap:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/structuremap_test.py:StructureMapTests:implStructureMap1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/structuremap.py:StructureMap:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/structuremap.py:StructureMap:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/structuremap.py:StructureMap:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/structuremap_test.py:StructureMapTests:instantiate_from": {
      "fhirclient/models/structuremap.py:StructureMap:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/structuremap.py:StructureMap:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-structuremap_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 structuremap.py\n            \u2514\u2500\u2500 StructureMap.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation, instantiation, and testing of FHIR StructureMap resources following the HL7 FHIR 4.0.1 standard. It enables parsing, verification, and mapping of FHIR data transformation definitions by interacting with StructureMap instances, which define rules for transforming source data into a target structure. The module supports functionality such as validating resource attributes, serializing and deserializing FHIR resources to and from JSON, and verifying data consistency against FHIR specifications. By providing a framework for testing and validating StructureMap definitions, the module ensures accurate and reliable transformation logic, addressing the needs of developers and integrators working on healthcare data interoperability solutions.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of the FHIRDate class. If the instance was initialized with a valid JSON string, this method will return that original input; otherwise, it will return the standardized ISO 8601 representation of the date (via the isostring property). The value of `self.origval`, which stores the original JSON input, is checked to determine the return value. If `self.origval` is None, the method defaults to returning `self.isostring`, which provides a normalized date format suitable for FHIR standards.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/structuremap.py\n\n- CLASS METHOD: StructureMap.__init__\n  - CLASS SIGNATURE: class StructureMap(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a StructureMap instance representing a map of relationships between two structures for data transformation.\n\nThis constructor initializes properties that define the structure map, including metadata such as `contact`, `copyright`, `date`, `description`, `experimental`, `group`, `identifier`, `import_fhir`, `jurisdiction`, `name`, `publisher`, `purpose`, `status`, `structure`, `title`, `url`, `useContext`, and `version`. Each of these attributes has specific types and requirements as per the FHIR standards, accommodating for structured data, documentation, and metadata relevant to data transformations.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing information to initialize the properties. If not provided, all properties are initialized to None.\n- strict (bool, optional): If True (default), attempts to initialize with invalid properties raise a TypeError. If False, allows some flexibility in property validation.\n\nAttributes:\n- contact: Contact details for the publisher.\n- copyright: Publishing restrictions related to use.\n- date: Last changed date using `FHIRDateTime`.\n- description: Natural language description of the map.\n- experimental: Indicates if the map is for testing purposes.\n- group: Sections of the map organized in `StructureMapGroup` items for easier management.\n- identifier: Additional identifiers for the map.\n- import_fhir: Canonical URLs of other maps this one relies on.\n- jurisdiction: Intended usage jurisdiction represented as `CodeableConcept`.\n- name: Computer-friendly name for the map.\n- publisher: Name of the individual or organization publishing the map.\n- purpose: Purpose or rationale for defining the map.\n- status: Current status (draft, active, retired, unknown).\n- structure: Definitions used by the map as `StructureMapStructure`.\n- title: Human-friendly name for the map.\n- url: Unique URI identifier for the map.\n- useContext: Contexts supported by the map represented as `UsageContext`.\n- version: Business version of the map.\n\nInteractions: The constructor calls the superclass `DomainResource`'s `__init__` method to ensure that inherited attributes are appropriately initialized.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance for working with FHIR datetime strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. This value is passed to the superclass (FHIRDate) for initialization.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Stores a Python datetime object that represents the parsed FHIR datetime. Initialized to None upon instantiation.\n\nThis constructor utilizes the superclass initializer to handle the input and may involve parsing logic that defines how to convert the FHIR datetime format. It ensures that the datetime attribute is defined in the context of FHIR's datetime requirements.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the instance of FHIRAbstractResource to a JSON dictionary format.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` attribute specific to the FHIR resource being represented. It ensures that the resulting JSON includes a key that identifies the type of resource, which is essential for FHIR services that expect this information when processing resources.\n\nReturns:\n    dict: A JSON-compatible dictionary containing the instance's data including the `resourceType`, which is set to the class attribute `resource_type`.\n\nDependencies:\n    - The method relies on the superclass's `as_json` method to gather other instance data before appending the `resourceType`.\n    - The `resource_type` attribute is defined in the class and serves as a key identifier for the resource type in the FHIR specification.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/structuremap.py": "from . import domainresource\n\nclass StructureMap(domainresource.DomainResource):\n    \"\"\" A Map of relationships between 2 structures that can be used to transform\n    data.\n    \"\"\"\n    resource_type = 'StructureMap'\n\n    def elementProperties(self):\n        js = super(StructureMap, self).elementProperties()\n        js.extend([('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('group', 'group', StructureMapGroup, True, None, True), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('import_fhir', 'import', str, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('name', 'name', str, False, None, True), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('structure', 'structure', StructureMapStructure, True, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, True), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass StructureMapGroup(backboneelement.BackboneElement):\n    \"\"\" Named sections for reader convenience.\n    \n    Organizes the mapping into manageable chunks for human review/ease of\n    maintenance.\n    \"\"\"\n    resource_type = 'StructureMapGroup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.documentation = None\n        ' Additional description/explanation for group.\\n        Type `str`. '\n        self.extends = None\n        ' Another group that this group adds rules to.\\n        Type `str`. '\n        self.input = None\n        ' Named instance provided when invoking the map.\\n        List of `StructureMapGroupInput` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Human-readable label.\\n        Type `str`. '\n        self.rule = None\n        ' Transform Rule from source to target.\\n        List of `StructureMapGroupRule` items (represented as `dict` in JSON). '\n        self.typeMode = None\n        ' none | types | type-and-types.\\n        Type `str`. '\n        super(StructureMapGroup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroup, self).elementProperties()\n        js.extend([('documentation', 'documentation', str, False, None, False), ('extends', 'extends', str, False, None, False), ('input', 'input', StructureMapGroupInput, True, None, True), ('name', 'name', str, False, None, True), ('rule', 'rule', StructureMapGroupRule, True, None, True), ('typeMode', 'typeMode', str, False, None, True)])\n        return js\n\nclass StructureMapGroupInput(backboneelement.BackboneElement):\n    \"\"\" Named instance provided when invoking the map.\n    \n    A name assigned to an instance of data. The instance must be provided when\n    the mapping is invoked.\n    \"\"\"\n    resource_type = 'StructureMapGroupInput'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.documentation = None\n        ' Documentation for this instance of data.\\n        Type `str`. '\n        self.mode = None\n        ' source | target.\\n        Type `str`. '\n        self.name = None\n        ' Name for this instance of data.\\n        Type `str`. '\n        self.type = None\n        ' Type for this instance of data.\\n        Type `str`. '\n        super(StructureMapGroupInput, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupInput, self).elementProperties()\n        js.extend([('documentation', 'documentation', str, False, None, False), ('mode', 'mode', str, False, None, True), ('name', 'name', str, False, None, True), ('type', 'type', str, False, None, False)])\n        return js\n\nclass StructureMapGroupRule(backboneelement.BackboneElement):\n    \"\"\" Transform Rule from source to target.\n    \"\"\"\n    resource_type = 'StructureMapGroupRule'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.dependent = None\n        ' Which other rules to apply in the context of this rule.\\n        List of `StructureMapGroupRuleDependent` items (represented as `dict` in JSON). '\n        self.documentation = None\n        ' Documentation for this instance of data.\\n        Type `str`. '\n        self.name = None\n        ' Name of the rule for internal references.\\n        Type `str`. '\n        self.rule = None\n        ' Rules contained in this rule.\\n        List of `StructureMapGroupRule` items (represented as `dict` in JSON). '\n        self.source = None\n        ' Source inputs to the mapping.\\n        List of `StructureMapGroupRuleSource` items (represented as `dict` in JSON). '\n        self.target = None\n        ' Content to create because of this mapping rule.\\n        List of `StructureMapGroupRuleTarget` items (represented as `dict` in JSON). '\n        super(StructureMapGroupRule, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupRule, self).elementProperties()\n        js.extend([('dependent', 'dependent', StructureMapGroupRuleDependent, True, None, False), ('documentation', 'documentation', str, False, None, False), ('name', 'name', str, False, None, True), ('rule', 'rule', StructureMapGroupRule, True, None, False), ('source', 'source', StructureMapGroupRuleSource, True, None, True), ('target', 'target', StructureMapGroupRuleTarget, True, None, False)])\n        return js\n\nclass StructureMapGroupRuleDependent(backboneelement.BackboneElement):\n    \"\"\" Which other rules to apply in the context of this rule.\n    \"\"\"\n    resource_type = 'StructureMapGroupRuleDependent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.name = None\n        ' Name of a rule or group to apply.\\n        Type `str`. '\n        self.variable = None\n        ' Variable to pass to the rule or group.\\n        List of `str` items. '\n        super(StructureMapGroupRuleDependent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupRuleDependent, self).elementProperties()\n        js.extend([('name', 'name', str, False, None, True), ('variable', 'variable', str, True, None, True)])\n        return js\n\nclass StructureMapGroupRuleSource(backboneelement.BackboneElement):\n    \"\"\" Source inputs to the mapping.\n    \"\"\"\n    resource_type = 'StructureMapGroupRuleSource'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.check = None\n        ' FHIRPath expression  - must be true or the mapping engine throws an\\n        error instead of completing.\\n        Type `str`. '\n        self.condition = None\n        ' FHIRPath expression  - must be true or the rule does not apply.\\n        Type `str`. '\n        self.context = None\n        ' Type or variable this rule applies to.\\n        Type `str`. '\n        self.defaultValueAddress = None\n        ' Default value if no value exists.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.defaultValueAge = None\n        ' Default value if no value exists.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.defaultValueAnnotation = None\n        ' Default value if no value exists.\\n        Type `Annotation` (represented as `dict` in JSON). '\n        self.defaultValueAttachment = None\n        ' Default value if no value exists.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.defaultValueBase64Binary = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueBoolean = None\n        ' Default value if no value exists.\\n        Type `bool`. '\n        self.defaultValueCanonical = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueCode = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueCodeableConcept = None\n        ' Default value if no value exists.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.defaultValueCoding = None\n        ' Default value if no value exists.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.defaultValueContactDetail = None\n        ' Default value if no value exists.\\n        Type `ContactDetail` (represented as `dict` in JSON). '\n        self.defaultValueContactPoint = None\n        ' Default value if no value exists.\\n        Type `ContactPoint` (represented as `dict` in JSON). '\n        self.defaultValueContributor = None\n        ' Default value if no value exists.\\n        Type `Contributor` (represented as `dict` in JSON). '\n        self.defaultValueCount = None\n        ' Default value if no value exists.\\n        Type `Count` (represented as `dict` in JSON). '\n        self.defaultValueDataRequirement = None\n        ' Default value if no value exists.\\n        Type `DataRequirement` (represented as `dict` in JSON). '\n        self.defaultValueDate = None\n        ' Default value if no value exists.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.defaultValueDateTime = None\n        ' Default value if no value exists.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.defaultValueDecimal = None\n        ' Default value if no value exists.\\n        Type `float`. '\n        self.defaultValueDistance = None\n        ' Default value if no value exists.\\n        Type `Distance` (represented as `dict` in JSON). '\n        self.defaultValueDosage = None\n        ' Default value if no value exists.\\n        Type `Dosage` (represented as `dict` in JSON). '\n        self.defaultValueDuration = None\n        ' Default value if no value exists.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.defaultValueExpression = None\n        ' Default value if no value exists.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.defaultValueHumanName = None\n        ' Default value if no value exists.\\n        Type `HumanName` (represented as `dict` in JSON). '\n        self.defaultValueId = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueIdentifier = None\n        ' Default value if no value exists.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.defaultValueInstant = None\n        ' Default value if no value exists.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.defaultValueInteger = None\n        ' Default value if no value exists.\\n        Type `int`. '\n        self.defaultValueMarkdown = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueMeta = None\n        ' Default value if no value exists.\\n        Type `Meta` (represented as `dict` in JSON). '\n        self.defaultValueMoney = None\n        ' Default value if no value exists.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.defaultValueOid = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueParameterDefinition = None\n        ' Default value if no value exists.\\n        Type `ParameterDefinition` (represented as `dict` in JSON). '\n        self.defaultValuePeriod = None\n        ' Default value if no value exists.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.defaultValuePositiveInt = None\n        ' Default value if no value exists.\\n        Type `int`. '\n        self.defaultValueQuantity = None\n        ' Default value if no value exists.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.defaultValueRange = None\n        ' Default value if no value exists.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.defaultValueRatio = None\n        ' Default value if no value exists.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.defaultValueReference = None\n        ' Default value if no value exists.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.defaultValueRelatedArtifact = None\n        ' Default value if no value exists.\\n        Type `RelatedArtifact` (represented as `dict` in JSON). '\n        self.defaultValueSampledData = None\n        ' Default value if no value exists.\\n        Type `SampledData` (represented as `dict` in JSON). '\n        self.defaultValueSignature = None\n        ' Default value if no value exists.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.defaultValueString = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueTime = None\n        ' Default value if no value exists.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.defaultValueTiming = None\n        ' Default value if no value exists.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.defaultValueTriggerDefinition = None\n        ' Default value if no value exists.\\n        Type `TriggerDefinition` (represented as `dict` in JSON). '\n        self.defaultValueUnsignedInt = None\n        ' Default value if no value exists.\\n        Type `int`. '\n        self.defaultValueUri = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueUrl = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.defaultValueUsageContext = None\n        ' Default value if no value exists.\\n        Type `UsageContext` (represented as `dict` in JSON). '\n        self.defaultValueUuid = None\n        ' Default value if no value exists.\\n        Type `str`. '\n        self.element = None\n        ' Optional field for this source.\\n        Type `str`. '\n        self.listMode = None\n        ' first | not_first | last | not_last | only_one.\\n        Type `str`. '\n        self.logMessage = None\n        ' Message to put in log if source exists (FHIRPath).\\n        Type `str`. '\n        self.max = None\n        ' Specified maximum cardinality (number or *).\\n        Type `str`. '\n        self.min = None\n        ' Specified minimum cardinality.\\n        Type `int`. '\n        self.type = None\n        ' Rule only applies if source has this type.\\n        Type `str`. '\n        self.variable = None\n        ' Named context for field, if a field is specified.\\n        Type `str`. '\n        super(StructureMapGroupRuleSource, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupRuleSource, self).elementProperties()\n        js.extend([('check', 'check', str, False, None, False), ('condition', 'condition', str, False, None, False), ('context', 'context', str, False, None, True), ('defaultValueAddress', 'defaultValueAddress', address.Address, False, 'defaultValue', False), ('defaultValueAge', 'defaultValueAge', age.Age, False, 'defaultValue', False), ('defaultValueAnnotation', 'defaultValueAnnotation', annotation.Annotation, False, 'defaultValue', False), ('defaultValueAttachment', 'defaultValueAttachment', attachment.Attachment, False, 'defaultValue', False), ('defaultValueBase64Binary', 'defaultValueBase64Binary', str, False, 'defaultValue', False), ('defaultValueBoolean', 'defaultValueBoolean', bool, False, 'defaultValue', False), ('defaultValueCanonical', 'defaultValueCanonical', str, False, 'defaultValue', False), ('defaultValueCode', 'defaultValueCode', str, False, 'defaultValue', False), ('defaultValueCodeableConcept', 'defaultValueCodeableConcept', codeableconcept.CodeableConcept, False, 'defaultValue', False), ('defaultValueCoding', 'defaultValueCoding', coding.Coding, False, 'defaultValue', False), ('defaultValueContactDetail', 'defaultValueContactDetail', contactdetail.ContactDetail, False, 'defaultValue', False), ('defaultValueContactPoint', 'defaultValueContactPoint', contactpoint.ContactPoint, False, 'defaultValue', False), ('defaultValueContributor', 'defaultValueContributor', contributor.Contributor, False, 'defaultValue', False), ('defaultValueCount', 'defaultValueCount', count.Count, False, 'defaultValue', False), ('defaultValueDataRequirement', 'defaultValueDataRequirement', datarequirement.DataRequirement, False, 'defaultValue', False), ('defaultValueDate', 'defaultValueDate', fhirdate.FHIRDate, False, 'defaultValue', False), ('defaultValueDateTime', 'defaultValueDateTime', fhirdatetime.FHIRDateTime, False, 'defaultValue', False), ('defaultValueDecimal', 'defaultValueDecimal', float, False, 'defaultValue', False), ('defaultValueDistance', 'defaultValueDistance', distance.Distance, False, 'defaultValue', False), ('defaultValueDosage', 'defaultValueDosage', dosage.Dosage, False, 'defaultValue', False), ('defaultValueDuration', 'defaultValueDuration', duration.Duration, False, 'defaultValue', False), ('defaultValueExpression', 'defaultValueExpression', expression.Expression, False, 'defaultValue', False), ('defaultValueHumanName', 'defaultValueHumanName', humanname.HumanName, False, 'defaultValue', False), ('defaultValueId', 'defaultValueId', str, False, 'defaultValue', False), ('defaultValueIdentifier', 'defaultValueIdentifier', identifier.Identifier, False, 'defaultValue', False), ('defaultValueInstant', 'defaultValueInstant', fhirinstant.FHIRInstant, False, 'defaultValue', False), ('defaultValueInteger', 'defaultValueInteger', int, False, 'defaultValue', False), ('defaultValueMarkdown', 'defaultValueMarkdown', str, False, 'defaultValue', False), ('defaultValueMeta', 'defaultValueMeta', meta.Meta, False, 'defaultValue', False), ('defaultValueMoney', 'defaultValueMoney', money.Money, False, 'defaultValue', False), ('defaultValueOid', 'defaultValueOid', str, False, 'defaultValue', False), ('defaultValueParameterDefinition', 'defaultValueParameterDefinition', parameterdefinition.ParameterDefinition, False, 'defaultValue', False), ('defaultValuePeriod', 'defaultValuePeriod', period.Period, False, 'defaultValue', False), ('defaultValuePositiveInt', 'defaultValuePositiveInt', int, False, 'defaultValue', False), ('defaultValueQuantity', 'defaultValueQuantity', quantity.Quantity, False, 'defaultValue', False), ('defaultValueRange', 'defaultValueRange', range.Range, False, 'defaultValue', False), ('defaultValueRatio', 'defaultValueRatio', ratio.Ratio, False, 'defaultValue', False), ('defaultValueReference', 'defaultValueReference', fhirreference.FHIRReference, False, 'defaultValue', False), ('defaultValueRelatedArtifact', 'defaultValueRelatedArtifact', relatedartifact.RelatedArtifact, False, 'defaultValue', False), ('defaultValueSampledData', 'defaultValueSampledData', sampleddata.SampledData, False, 'defaultValue', False), ('defaultValueSignature', 'defaultValueSignature', signature.Signature, False, 'defaultValue', False), ('defaultValueString', 'defaultValueString', str, False, 'defaultValue', False), ('defaultValueTime', 'defaultValueTime', fhirtime.FHIRTime, False, 'defaultValue', False), ('defaultValueTiming', 'defaultValueTiming', timing.Timing, False, 'defaultValue', False), ('defaultValueTriggerDefinition', 'defaultValueTriggerDefinition', triggerdefinition.TriggerDefinition, False, 'defaultValue', False), ('defaultValueUnsignedInt', 'defaultValueUnsignedInt', int, False, 'defaultValue', False), ('defaultValueUri', 'defaultValueUri', str, False, 'defaultValue', False), ('defaultValueUrl', 'defaultValueUrl', str, False, 'defaultValue', False), ('defaultValueUsageContext', 'defaultValueUsageContext', usagecontext.UsageContext, False, 'defaultValue', False), ('defaultValueUuid', 'defaultValueUuid', str, False, 'defaultValue', False), ('element', 'element', str, False, None, False), ('listMode', 'listMode', str, False, None, False), ('logMessage', 'logMessage', str, False, None, False), ('max', 'max', str, False, None, False), ('min', 'min', int, False, None, False), ('type', 'type', str, False, None, False), ('variable', 'variable', str, False, None, False)])\n        return js\n\nclass StructureMapGroupRuleTarget(backboneelement.BackboneElement):\n    \"\"\" Content to create because of this mapping rule.\n    \"\"\"\n    resource_type = 'StructureMapGroupRuleTarget'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.context = None\n        ' Type or variable this rule applies to.\\n        Type `str`. '\n        self.contextType = None\n        ' type | variable.\\n        Type `str`. '\n        self.element = None\n        ' Field to create in the context.\\n        Type `str`. '\n        self.listMode = None\n        ' first | share | last | collate.\\n        List of `str` items. '\n        self.listRuleId = None\n        ' Internal rule reference for shared list items.\\n        Type `str`. '\n        self.parameter = None\n        ' Parameters to the transform.\\n        List of `StructureMapGroupRuleTargetParameter` items (represented as `dict` in JSON). '\n        self.transform = None\n        ' create | copy +.\\n        Type `str`. '\n        self.variable = None\n        ' Named context for field, if desired, and a field is specified.\\n        Type `str`. '\n        super(StructureMapGroupRuleTarget, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupRuleTarget, self).elementProperties()\n        js.extend([('context', 'context', str, False, None, False), ('contextType', 'contextType', str, False, None, False), ('element', 'element', str, False, None, False), ('listMode', 'listMode', str, True, None, False), ('listRuleId', 'listRuleId', str, False, None, False), ('parameter', 'parameter', StructureMapGroupRuleTargetParameter, True, None, False), ('transform', 'transform', str, False, None, False), ('variable', 'variable', str, False, None, False)])\n        return js\n\nclass StructureMapGroupRuleTargetParameter(backboneelement.BackboneElement):\n    \"\"\" Parameters to the transform.\n    \"\"\"\n    resource_type = 'StructureMapGroupRuleTargetParameter'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.valueBoolean = None\n        ' Parameter value - variable or literal.\\n        Type `bool`. '\n        self.valueDecimal = None\n        ' Parameter value - variable or literal.\\n        Type `float`. '\n        self.valueId = None\n        ' Parameter value - variable or literal.\\n        Type `str`. '\n        self.valueInteger = None\n        ' Parameter value - variable or literal.\\n        Type `int`. '\n        self.valueString = None\n        ' Parameter value - variable or literal.\\n        Type `str`. '\n        super(StructureMapGroupRuleTargetParameter, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapGroupRuleTargetParameter, self).elementProperties()\n        js.extend([('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueId', 'valueId', str, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True)])\n        return js\n\nclass StructureMapStructure(backboneelement.BackboneElement):\n    \"\"\" Structure Definition used by this map.\n    \n    A structure definition used by this map. The structure definition may\n    describe instances that are converted, or the instances that are produced.\n    \"\"\"\n    resource_type = 'StructureMapStructure'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.alias = None\n        ' Name for type in this map.\\n        Type `str`. '\n        self.documentation = None\n        ' Documentation on use of structure.\\n        Type `str`. '\n        self.mode = None\n        ' source | queried | target | produced.\\n        Type `str`. '\n        self.url = None\n        ' Canonical reference to structure definition.\\n        Type `str`. '\n        super(StructureMapStructure, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(StructureMapStructure, self).elementProperties()\n        js.extend([('alias', 'alias', str, False, None, False), ('documentation', 'documentation', str, False, None, False), ('mode', 'mode', str, False, None, True), ('url', 'url', str, False, None, True)])\n        return js\nfrom . import address\nfrom . import age\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import contactpoint\nfrom . import contributor\nfrom . import count\nfrom . import datarequirement\nfrom . import distance\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import humanname\nfrom . import identifier\nfrom . import meta\nfrom . import money\nfrom . import parameterdefinition\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import ratio\nfrom . import relatedartifact\nfrom . import sampleddata\nfrom . import signature\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}