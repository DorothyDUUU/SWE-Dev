{
  "dir_path": "/app/elasticsearch_curator",
  "package_name": "elasticsearch_curator",
  "sample_name": "elasticsearch_curator-test_action_replicas",
  "src_dir": "curator/",
  "test_dir": "tests/",
  "test_file": "tests/unit/test_action_replicas.py",
  "test_code": "\"\"\"test_action_replicas\"\"\"\n# pylint: disable=missing-function-docstring, missing-class-docstring, protected-access, attribute-defined-outside-init\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom curator.actions import Replicas\nfrom curator.exceptions import FailedExecution, MissingArgument\nfrom curator import IndexList\n# Get test variables and constants from a single source\nfrom . import testvars\n\nclass TestActionReplicas(TestCase):\n    VERSION = {'version': {'number': '8.0.0'} }\n    def builder(self):\n        self.client = Mock()\n        self.client.info.return_value = self.VERSION\n        self.client.cat.indices.return_value = testvars.state_one\n        self.client.indices.get_settings.return_value = testvars.settings_one\n        self.client.indices.stats.return_value = testvars.stats_one\n        self.client.indices.exists_alias.return_value = False\n        self.client.indices.put_settings.return_value = None\n        self.ilo = IndexList(self.client)\n    def test_init_raise_bad_client(self):\n        self.assertRaises(TypeError, Replicas, 'invalid', count=2)\n    def test_init_raise_no_count(self):\n        self.builder()\n        self.assertRaises(MissingArgument, Replicas, self.ilo)\n    def test_init(self):\n        self.builder()\n        rpo = Replicas(self.ilo, count=2)\n        self.assertEqual(self.ilo, rpo.index_list)\n        self.assertEqual(self.client, rpo.client)\n    def test_do_dry_run(self):\n        self.builder()\n        rpo = Replicas(self.ilo, count=0)\n        self.assertIsNone(rpo.do_dry_run())\n    def test_do_action(self):\n        self.builder()\n        rpo = Replicas(self.ilo, count=0)\n        self.assertIsNone(rpo.do_action())\n    def test_do_action_wait(self):\n        self.builder()\n        self.client.cluster.health.return_value = {'status':'green'}\n        rpo = Replicas(self.ilo, count=1, wait_for_completion=True)\n        self.assertIsNone(rpo.do_action())\n    def test_do_action_raises_exception(self):\n        self.builder()\n        self.client.indices.segments.return_value = testvars.shards\n        self.client.indices.put_settings.side_effect = testvars.fake_fail\n        rpo = Replicas(self.ilo, count=2)\n        self.assertRaises(FailedExecution, rpo.do_action)\n",
  "GT_file_code": {
    "curator/helpers/waiters.py": "\"\"\"The function that waits\n\n...and its helpers\n\"\"\"\nimport logging\nfrom time import localtime, sleep, strftime\nfrom datetime import datetime\nfrom curator.exceptions import (\n    ActionTimeout, ConfigurationError, CuratorException, FailedReindex, MissingArgument)\nfrom curator.helpers.utils import chunk_index_list\n\ndef health_check(client, **kwargs):\n    \"\"\"\n    This function calls `client.cluster.` :py:meth:`~.elasticsearch.client.ClusterClient.health`\n    and, based on the params provided, will return ``True`` or ``False`` depending on whether that\n    particular keyword appears in the output, and has the expected value.\n\n    If multiple keys are provided, all must match for a ``True`` response.\n\n    :param client: A client connection object\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug('KWARGS= \"%s\"', kwargs)\n    klist = list(kwargs.keys())\n    if not klist:\n        raise MissingArgument('Must provide at least one keyword argument')\n    hc_data = client.cluster.health()\n    response = True\n\n    for k in klist:\n        # First, verify that all kwargs are in the list\n        if not k in list(hc_data.keys()):\n            raise ConfigurationError('Key \"{0}\" not in cluster health output')\n        if not hc_data[k] == kwargs[k]:\n            msg = f'NO MATCH: Value for key \"{kwargs[k]}\", health check data: {hc_data[k]}'\n            logger.debug(msg)\n            response = False\n        else:\n            msg = f'MATCH: Value for key \"{kwargs[k]}\", health check data: {hc_data[k]}'\n            logger.debug(msg)\n    if response:\n        logger.info('Health Check for all provided keys passed.')\n    return response\n\ndef relocate_check(client, index):\n    \"\"\"\n    This function calls `client.cluster.` :py:meth:`~.elasticsearch.client.ClusterClient.state`\n    with a given index to check if all of the shards for that index are in the ``STARTED`` state.\n    It will return ``True`` if all primary and replica shards are in the ``STARTED`` state, and it\n    will return ``False`` if any shard is in a different state.\n\n    :param client: A client connection object\n    :param index: The index name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type index: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    shard_state_data = (\n        client.cluster.state(index=index)['routing_table']['indices'][index]['shards']\n    )\n    finished_state = (\n        all(\n            all(\n                shard['state'] == \"STARTED\" for shard in shards\n            )\n            for shards in shard_state_data.values()\n        )\n    )\n    if finished_state:\n        logger.info('Relocate Check for index: \"%s\" has passed.', index)\n    return finished_state\n\ndef restore_check(client, index_list):\n    \"\"\"\n    This function calls `client.indices.` :py:meth:`~.elasticsearch.client.IndicesClient.recovery`\n    with the list of indices to check for complete recovery.  It will return ``True`` if recovery\n    of those indices is complete, and ``False`` otherwise.  It is designed to fail fast: if a\n    single shard is encountered that is still recovering (not in ``DONE`` stage), it will\n    immediately return ``False``, rather than complete iterating over the rest of the response.\n\n    :param client: A client connection object\n    :param index_list: The list of indices to verify having been restored.\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type index_list: list\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    response = {}\n    for chunk in chunk_index_list(index_list):\n        try:\n            chunk_response = client.indices.recovery(index=chunk, human=True)\n        except Exception as err:\n            msg = f'Unable to obtain recovery information for specified indices. Error: {err}'\n            raise CuratorException(msg) from err\n        if chunk_response == {}:\n            logger.info('_recovery returned an empty response. Trying again.')\n            return False\n        response.update(chunk_response)\n    logger.info('Provided indices: %s', index_list)\n    logger.info('Found indices: %s', list(response.keys()))\n    # pylint: disable=consider-using-dict-items\n    for index in response:\n        for shard in range(0, len(response[index]['shards'])):\n            stage = response[index]['shards'][shard]['stage']\n            if stage != 'DONE':\n                logger.info('Index \"%s\" is still in stage \"%s\"', index, stage)\n                return False\n\n    # If we've gotten here, all of the indices have recovered\n    return True\n\ndef snapshot_check(client, snapshot=None, repository=None):\n    \"\"\"\n    This function calls `client.snapshot.` :py:meth:`~.elasticsearch.client.SnapshotClient.get` and\n    tests to see whether the snapshot is complete, and if so, with what status.  It will log errors\n    according to the result. If the snapshot is still ``IN_PROGRESS``, it will return ``False``.\n    ``SUCCESS`` will be an ``INFO`` level message, ``PARTIAL`` nets a ``WARNING`` message,\n    ``FAILED`` is an ``ERROR``, message, and all others will be a ``WARNING`` level message.\n\n    :param client: A client connection object\n    :param snapshot: The snapshot name\n    :param repository: The repository name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type snapshot: str\n    :type repository: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug('SNAPSHOT: %s', snapshot)\n    logger.debug('REPOSITORY: %s', repository)\n    try:\n        result = client.snapshot.get(repository=repository, snapshot=snapshot)\n        logger.debug('RESULT: %s', result)\n    except Exception as err:\n        raise CuratorException(\n            f'Unable to obtain information for snapshot \"{snapshot}\" in repository '\n            f'\"{repository}\". Error: {err}'\n        ) from err\n    state = result['snapshots'][0]['state']\n    logger.debug('Snapshot state = %s', state)\n    retval = True\n    if state == 'IN_PROGRESS':\n        logger.info('Snapshot %s still in progress.', snapshot)\n        retval = False\n    elif state == 'SUCCESS':\n        logger.info('Snapshot %s successfully completed.', snapshot)\n    elif state == 'PARTIAL':\n        logger.warning('Snapshot %s completed with state PARTIAL.', snapshot)\n    elif state == 'FAILED':\n        logger.error('Snapshot %s completed with state FAILED.', snapshot)\n    else:\n        logger.warning('Snapshot %s completed with state: %s', snapshot, state)\n    return retval\n\ndef task_check(client, task_id=None):\n    \"\"\"\n    This function calls `client.tasks.` :py:meth:`~.elasticsearch.client.TasksClient.get` with the\n    provided ``task_id``.  If the task data contains ``'completed': True``, then it will return\n    ``True``. If the task is not completed, it will log some information about the task and return\n    ``False``\n\n    :param client: A client connection object\n    :param task_id: The task id\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type task_id: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        task_data = client.tasks.get(task_id=task_id)\n    except Exception as err:\n        msg = f'Unable to obtain task information for task_id \"{task_id}\". Exception {err}'\n        raise CuratorException(msg) from err\n    task = task_data['task']\n    completed = task_data['completed']\n    if task['action'] == 'indices:data/write/reindex':\n        logger.debug('It\\'s a REINDEX TASK')\n        logger.debug('TASK_DATA: %s', task_data)\n        logger.debug('TASK_DATA keys: %s', list(task_data.keys()))\n        if 'response' in task_data:\n            response = task_data['response']\n            if response['failures']:\n                msg = f'Failures found in reindex response: {response[\"failures\"]}'\n                raise FailedReindex(msg)\n    running_time = 0.000000001 * task['running_time_in_nanos']\n    logger.debug('Running time: %s seconds', running_time)\n    descr = task['description']\n\n    if completed:\n        completion_time = (running_time * 1000) + task['start_time_in_millis']\n        time_string = strftime('%Y-%m-%dT%H:%M:%SZ', localtime(completion_time/1000))\n        logger.info('Task \"%s\" completed at %s.', descr, time_string)\n        retval = True\n    else:\n        # Log the task status here.\n        logger.debug('Full Task Data: %s', task_data)\n        msg = (\n            f'Task \"{descr}\" with task_id \"{task_id}\" has been running for {running_time} seconds'\n        )\n        logger.info(msg)\n        retval = False\n    return retval\n\n# pylint: disable=too-many-locals, too-many-arguments\ndef wait_for_it(\n        client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None,\n        wait_interval=9, max_wait=-1\n    ):\n    \"\"\"\n    This function becomes one place to do all ``wait_for_completion`` type behaviors\n\n    :param client: A client connection object\n    :param action: The action name that will identify how to wait\n    :param task_id: If the action provided a task_id, this is where it must be declared.\n    :param snapshot: The name of the snapshot.\n    :param repository: The Elasticsearch snapshot repository to use\n    :param wait_interval: Seconds to wait between completion checks.\n    :param max_wait: Maximum number of seconds to ``wait_for_completion``\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type action: str\n    :type task_id: str\n    :type snapshot: str\n    :type repository: str\n    :type wait_interval: int\n    :type max_wait: int\n    :rtype: None\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    action_map = {\n        'allocation':{'function': health_check, 'args': {'relocating_shards':0}},\n        'replicas':{'function': health_check, 'args': {'status':'green'}},\n        'cluster_routing':{'function': health_check, 'args': {'relocating_shards':0}},\n        'snapshot':{\n            'function':snapshot_check, 'args':{'snapshot':snapshot, 'repository':repository}},\n        'restore':{'function':restore_check, 'args':{'index_list':index_list}},\n        'reindex':{'function':task_check, 'args':{'task_id':task_id}},\n        'shrink':{'function': health_check, 'args': {'status':'green'}},\n        'relocate':{'function': relocate_check, 'args': {'index':index}},\n    }\n    wait_actions = list(action_map.keys())\n\n    if action not in wait_actions:\n        raise ConfigurationError(f'\"action\" must be one of {wait_actions}')\n    if action == 'reindex' and task_id is None:\n        raise MissingArgument(f'A task_id must accompany \"action\" {action}')\n    if action == 'snapshot' and ((snapshot is None) or (repository is None)):\n        raise MissingArgument(\n            f'A snapshot and repository must accompany \"action\" {action}. snapshot: '\n            f'{snapshot}, repository: {repository}'\n        )\n    if action == 'restore' and index_list is None:\n        raise MissingArgument(f'An index_list must accompany \"action\" {action}')\n    if action == 'reindex':\n        try:\n            _ = client.tasks.get(task_id=task_id)\n        except Exception as err:\n            # This exception should only exist in API usage. It should never\n            # occur in regular Curator usage.\n            raise CuratorException(f'Unable to find task_id {task_id}. Exception: {err}') from err\n\n    # Now with this mapped, we can perform the wait as indicated.\n    start_time = datetime.now()\n    result = False\n    while True:\n        elapsed = int((datetime.now() - start_time).total_seconds())\n        logger.debug('Elapsed time: %s seconds', elapsed)\n        response = action_map[action]['function'](client, **action_map[action]['args'])\n        logger.debug('Response: %s', response)\n        # Success\n        if response:\n            logger.debug(\n                'Action \"%s\" finished executing (may or may not have been successful)', action)\n            result = True\n            break\n        # Not success, and reached maximum wait (if defined)\n        if (max_wait != -1) and (elapsed >= max_wait):\n            msg = f'Unable to complete action \"{action}\" within max_wait ({max_wait}) seconds.'\n            logger.error(msg)\n            break\n        # Not success, so we wait.\n        msg = (\n            f'Action \"{action}\" not yet complete, {elapsed} total seconds elapsed. '\n            f'Waiting {wait_interval} seconds before checking again.'\n        )\n        logger.debug(msg)\n        sleep(wait_interval)\n\n    logger.debug('Result: %s', result)\n    if not result:\n        raise ActionTimeout(\n            f'Action \"{action}\" failed to complete in the max_wait period of {max_wait} seconds'\n        )\n",
    "curator/helpers/utils.py": "\"\"\"Helper utilities\n\nThe kind that don't fit in testers, getters, date_ops, or converters\n\"\"\"\nimport logging\nfrom es_client.helpers.utils import ensure_list\nfrom curator.exceptions import FailedExecution\n\ndef chunk_index_list(indices):\n    \"\"\"\n    This utility chunks very large index lists into 3KB chunks.\n    It measures the size as a csv string, then converts back into a list for the return value.\n\n    :param indices: The list of indices\n\n    :type indices: list\n\n    :returns: A list of lists (each a piece of the original ``indices``)\n    :rtype: list\n    \"\"\"\n    chunks = []\n    chunk = \"\"\n    for index in indices:\n        if len(chunk) < 3072:\n            if not chunk:\n                chunk = index\n            else:\n                chunk += \",\" + index\n        else:\n            chunks.append(chunk.split(','))\n            chunk = index\n    chunks.append(chunk.split(','))\n    return chunks\n\ndef report_failure(exception):\n    \"\"\"\n    Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\n    message.\n\n    :param exception: The upstream exception.\n\n    :type exception: :py:exc:Exception\n\n    :rtype: None\n    \"\"\"\n    raise FailedExecution(\n        f'Exception encountered.  Rerun with loglevel DEBUG and/or check Elasticsearch logs for'\n        f'more information. Exception: {exception}'\n    )\n\ndef show_dry_run(ilo, action, **kwargs):\n    \"\"\"\n    Log dry run output with the action which would have been executed.\n\n    :param ilo: An IndexList Object\n    :param action: The ``action`` to be performed.\n    :param kwargs: Any other args to show in the log output\n\n\n    :type ilo: :py:class:`~.curator.indexlist.IndexList`\n    :type action: str\n    :type kwargs: dict\n\n    :rtype: None\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.info('DRY-RUN MODE.  No changes will be made.')\n    msg = f'(CLOSED) indices may be shown that may not be acted on by action \"{action}\".'\n    logger.info(msg)\n    indices = sorted(ilo.indices)\n    for idx in indices:\n        # Dry runs need index state, so we collect it here if it's not present.\n        try:\n            index_closed = ilo.index_info[idx]['state'] == 'close'\n        except KeyError:\n            ilo.get_index_state()\n            index_closed = ilo.index_info[idx]['state'] == 'close'\n        var = ' (CLOSED)' if index_closed else ''\n        msg = f'DRY-RUN: {action}: {idx}{var} with arguments: {kwargs}'\n        logger.info(msg)\n\ndef to_csv(indices):\n    \"\"\"\n    :param indices: A list of indices to act on, or a single value, which could be\n        in the format of a csv string already.\n\n    :type indices: list\n\n    :returns: A csv string from a list of indices, or a single value if only one value is present\n    :rtype: str\n    \"\"\"\n    indices = ensure_list(indices) # in case of a single value passed\n    if indices:\n        return ','.join(sorted(indices))\n    return None\n",
    "curator/actions/replicas.py": "\"\"\"Index replica count action class\"\"\"\nimport logging\nfrom curator.exceptions import MissingArgument\nfrom curator.helpers.testers import verify_index_list\nfrom curator.helpers.utils import chunk_index_list, report_failure, show_dry_run, to_csv\nfrom curator.helpers.waiters import wait_for_it\n\nclass Replicas:\n    \"\"\"Replica Action Class\"\"\"\n    def __init__(self, ilo, count=None, wait_for_completion=False, wait_interval=9, max_wait=-1):\n        \"\"\"\n        :param ilo: An IndexList Object\n        :param count: The count of replicas per shard\n        :param wait_for_completion: Wait for completion before returning.\n        :param wait_interval: Seconds to wait between completion checks.\n        :param max_wait: Maximum number of seconds to ``wait_for_completion``\n\n        :type ilo: :py:class:`~.curator.indexlist.IndexList`\n        :type count: int\n        :type wait_for_completion: bool\n        :type wait_interval: int\n        :type max_wait: int\n        \"\"\"\n        verify_index_list(ilo)\n        # It's okay for count to be zero\n        if count == 0:\n            pass\n        elif not count:\n            raise MissingArgument('Missing value for \"count\"')\n\n        #: The :py:class:`~.curator.indexlist.IndexList` object passed from param ``ilo``\n        self.index_list = ilo\n        #: The :py:class:`~.elasticsearch.Elasticsearch` client object derived from\n        #: :py:attr:`index_list`\n        self.client = ilo.client\n        #: Object attribute that gets the value of param ``count``.\n        self.count = count\n        #: Object attribute that gets the value of param ``wait_for_completion``.\n        self.wfc = wait_for_completion\n        #: Object attribute that gets the value of param ``wait_interval``.\n        self.wait_interval = wait_interval\n        #: Object attribute that gets the value of param ``max_wait``.\n        self.max_wait = max_wait\n        self.loggit = logging.getLogger('curator.actions.replicas')\n\n    def do_dry_run(self):\n        \"\"\"Log what the output would be, but take no action.\"\"\"\n        show_dry_run(self.index_list, 'replicas', count=self.count)\n\n    def do_action(self):\n        \"\"\"\n        Update ``number_of_replicas`` with :py:attr:`count` and\n        :py:meth:`~.elasticsearch.client.IndicesClient.put_settings` to indices in\n        :py:attr:`index_list`\n        \"\"\"\n        self.loggit.debug(\n            'Cannot get update replica count of closed indices. Omitting any closed indices.')\n        self.index_list.filter_closed()\n        self.index_list.empty_list_check()\n        msg = (\n            f'Setting the replica count to {self.count} for {len(self.index_list.indices)} '\n            f'indices: {self.index_list.indices}'\n        )\n        self.loggit.info(msg)\n        try:\n            index_lists = chunk_index_list(self.index_list.indices)\n            for lst in index_lists:\n                self.client.indices.put_settings(\n                    index=to_csv(lst), settings={'number_of_replicas': self.count}\n                )\n                if self.wfc and self.count > 0:\n                    msg = (\n                        f'Waiting for shards to complete replication for indices: {to_csv(lst)}')\n                    self.loggit.debug(msg)\n                    wait_for_it(\n                        self.client, 'replicas',\n                        wait_interval=self.wait_interval, max_wait=self.max_wait\n                    )\n        # pylint: disable=broad-except\n        except Exception as err:\n            report_failure(err)\n",
    "curator/helpers/testers.py": "\"\"\"Utility functions that get things\"\"\"\n\nimport logging\nfrom voluptuous import Schema\nfrom elasticsearch8 import Elasticsearch\nfrom elasticsearch8.exceptions import NotFoundError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import prune_nones\nfrom curator.helpers.getters import get_repository, get_write_index\nfrom curator.exceptions import (\n    ConfigurationError,\n    MissingArgument,\n    RepositoryException,\n    SearchableSnapshotException,\n)\nfrom curator.defaults.settings import (\n    index_filtertypes,\n    snapshot_actions,\n    snapshot_filtertypes,\n)\nfrom curator.validators import actions, options\nfrom curator.validators.filter_functions import validfilters\nfrom curator.helpers.utils import report_failure\n\n\ndef has_lifecycle_name(idx_settings):\n    \"\"\"\n    :param idx_settings: The settings for an index being tested\n    :type idx_settings: dict\n\n    :returns: ``True`` if a lifecycle name exists in settings, else ``False``\n    :rtype: bool\n    \"\"\"\n    if 'lifecycle' in idx_settings:\n        if 'name' in idx_settings['lifecycle']:\n            return True\n    return False\n\n\ndef is_idx_partial(idx_settings):\n    \"\"\"\n    :param idx_settings: The settings for an index being tested\n    :type idx_settings: dict\n\n    :returns: ``True`` if store.snapshot.partial exists in settings, else ``False``\n    :rtype: bool\n    \"\"\"\n    if 'store' in idx_settings:\n        if 'snapshot' in idx_settings['store']:\n            if 'partial' in idx_settings['store']['snapshot']:\n                if idx_settings['store']['snapshot']['partial']:\n                    return True\n                # store.snapshot.partial exists but is False -- Not a frozen tier mount\n                return False\n            # store.snapshot exists, but partial isn't there --\n            # Possibly a cold tier mount\n            return False\n        raise SearchableSnapshotException('Index not a mounted searchable snapshot')\n    raise SearchableSnapshotException('Index not a mounted searchable snapshot')\n\n\ndef ilm_policy_check(client, alias):\n    \"\"\"Test if alias is associated with an ILM policy\n\n    Calls :py:meth:`~.elasticsearch.client.IndicesClient.get_settings`\n\n    :param client: A client connection object\n    :param alias: The alias name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type alias: str\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    # alias = action_obj.options['name']\n    write_index = get_write_index(client, alias)\n    try:\n        idx_settings = client.indices.get_settings(index=write_index)\n        if 'name' in idx_settings[write_index]['settings']['index']['lifecycle']:\n            # logger.info('Alias %s is associated with ILM policy.', alias)\n            # logger.info('Skipping action %s because allow_ilm_indices is false.', idx)\n            return True\n    except KeyError:\n        logger.debug('No ILM policies associated with %s', alias)\n    return False\n\n\ndef repository_exists(client, repository=None):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.SnapshotClient.get_repository`\n\n    :param client: A client connection object\n    :param repository: The Elasticsearch snapshot repository to use\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type repository: str\n\n    :returns: ``True`` if ``repository`` exists, else ``False``\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    if not repository:\n        raise MissingArgument('No value for \"repository\" provided')\n    try:\n        test_result = get_repository(client, repository)\n        if repository in test_result:\n            logger.debug(\"Repository %s exists.\", repository)\n            response = True\n        else:\n            logger.debug(\"Repository %s not found...\", repository)\n            response = False\n    # pylint: disable=broad-except\n    except Exception as err:\n        logger.debug('Unable to find repository \"%s\": Error: %s', repository, err)\n        response = False\n    return response\n\n\ndef rollable_alias(client, alias):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.IndicesClient.get_alias`\n\n    :param client: A client connection object\n    :param alias: An Elasticsearch alias\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type alias: str\n\n\n    :returns: ``True`` or ``False`` depending on whether ``alias`` is an alias that\n        points to an index that can be used by the ``_rollover`` API.\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        response = client.indices.get_alias(name=alias)\n    except NotFoundError:\n        logger.error('Alias \"%s\" not found.', alias)\n        return False\n    # Response should be like:\n    # {'there_should_be_only_one': {'aliases': {'value of \"alias\" here': {}}}}\n    # where 'there_should_be_only_one' is a single index name that ends in a number,\n    # and 'value of \"alias\" here' reflects the value of the passed parameter, except\n    # where the ``is_write_index`` setting makes it possible to have more than one\n    # index associated with a rollover index\n    for idx in response:\n        if 'is_write_index' in response[idx]['aliases'][alias]:\n            if response[idx]['aliases'][alias]['is_write_index']:\n                return True\n    # implied ``else``: If not ``is_write_index``, it has to fit the following criteria:\n    if len(response) > 1:\n        logger.error(\n            '\"alias\" must only reference one index, but points to %s', response\n        )\n        return False\n    index = list(response.keys())[0]\n    rollable = False\n    # In order for `rollable` to be True, the last 2 digits of the index\n    # must be digits, or a hyphen followed by a digit.\n    # NOTE: This is not a guarantee that the rest of the index name is\n    # necessarily correctly formatted.\n    if index[-2:][1].isdigit():\n        if index[-2:][0].isdigit():\n            rollable = True\n        elif index[-2:][0] == '-':\n            rollable = True\n    return rollable\n\n\ndef snapshot_running(client):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.SnapshotClient.get_repository`\n\n    Return ``True`` if a snapshot is in progress, and ``False`` if not\n\n    :param client: A client connection object\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :rtype: bool\n    \"\"\"\n    try:\n        status = client.snapshot.status()['snapshots']\n    # pylint: disable=broad-except\n    except Exception as exc:\n        report_failure(exc)\n    # We will only accept a positively identified False.  Anything else is\n    # suspect. That's why this statement, rather than just ``return status``\n    # pylint: disable=simplifiable-if-expression\n    return False if not status else True\n\n\ndef validate_actions(data):\n    \"\"\"\n    Validate the ``actions`` configuration dictionary, as imported from actions.yml,\n    for example.\n\n    :param data: The configuration dictionary\n\n    :type data: dict\n\n    :returns: The validated and sanitized configuration dictionary.\n    :rtype: dict\n    \"\"\"\n    # data is the ENTIRE schema...\n    clean_config = {}\n    # Let's break it down into smaller chunks...\n    # First, let's make sure it has \"actions\" as a key, with a subdictionary\n    root = SchemaCheck(data, actions.root(), 'Actions File', 'root').result()\n    # We've passed the first step.  Now let's iterate over the actions...\n    for action_id in root['actions']:\n        # Now, let's ensure that the basic action structure is correct, with\n        # the proper possibilities for 'action'\n        action_dict = root['actions'][action_id]\n        loc = f'Action ID \"{action_id}\"'\n        valid_structure = SchemaCheck(\n            action_dict, actions.structure(action_dict, loc), 'structure', loc\n        ).result()\n        # With the basic structure validated, now we extract the action name\n        current_action = valid_structure['action']\n        # And let's update the location with the action.\n        loc = f'Action ID \"{action_id}\", action \"{current_action}\"'\n        clean_options = SchemaCheck(\n            prune_nones(valid_structure['options']),\n            options.get_schema(current_action),\n            'options',\n            loc,\n        ).result()\n        clean_config[action_id] = {\n            'action': current_action,\n            'description': valid_structure['description'],\n            'options': clean_options,\n        }\n        if current_action == 'alias':\n            add_remove = {}\n            for k in ['add', 'remove']:\n                if k in valid_structure:\n                    current_filters = SchemaCheck(\n                        valid_structure[k]['filters'],\n                        Schema(validfilters(current_action, location=loc)),\n                        f'\"{k}\" filters',\n                        f'{loc}, \"filters\"',\n                    ).result()\n                    add_remove.update(\n                        {\n                            k: {\n                                'filters': SchemaCheck(\n                                    current_filters,\n                                    Schema(validfilters(current_action, location=loc)),\n                                    'filters',\n                                    f'{loc}, \"{k}\", \"filters\"',\n                                ).result()\n                            }\n                        }\n                    )\n            # Add/Remove here\n            clean_config[action_id].update(add_remove)\n        elif current_action in ['cluster_routing', 'create_index', 'rollover']:\n            # neither cluster_routing nor create_index should have filters\n            pass\n        else:  # Filters key only appears in non-alias actions\n            valid_filters = SchemaCheck(\n                valid_structure['filters'],\n                Schema(validfilters(current_action, location=loc)),\n                'filters',\n                f'{loc}, \"filters\"',\n            ).result()\n            clean_filters = validate_filters(current_action, valid_filters)\n            clean_config[action_id].update({'filters': clean_filters})\n        # This is a special case for remote reindex\n        if current_action == 'reindex':\n            # Check only if populated with something.\n            if 'remote_filters' in valid_structure['options']:\n                valid_filters = SchemaCheck(\n                    valid_structure['options']['remote_filters'],\n                    Schema(validfilters(current_action, location=loc)),\n                    'filters',\n                    f'{loc}, \"filters\"',\n                ).result()\n                clean_remote_filters = validate_filters(current_action, valid_filters)\n                clean_config[action_id]['options'].update(\n                    {'remote_filters': clean_remote_filters}\n                )\n\n    # if we've gotten this far without any Exceptions raised, it's valid!\n    return {'actions': clean_config}\n\n\ndef validate_filters(action, myfilters):\n    \"\"\"\n    Validate that myfilters are appropriate for the action type, e.g. no\n    index filters applied to a snapshot list.\n\n    :param action: An action name\n    :param myfilters: A list of filters to test.\n\n    :type action: str\n    :type myfilters: list\n\n    :returns: Validated list of filters\n    :rtype: list\n    \"\"\"\n    # Define which set of filtertypes to use for testing\n    if action in snapshot_actions():\n        filtertypes = snapshot_filtertypes()\n    else:\n        filtertypes = index_filtertypes()\n    for fil in myfilters:\n        if fil['filtertype'] not in filtertypes:\n            raise ConfigurationError(\n                f\"\\\"{fil['filtertype']}\\\" filtertype is not compatible with \"\n                f\"action \\\"{action}\\\"\"\n            )\n    # If we get to this point, we're still valid.  Return the original list\n    return myfilters\n\n\ndef verify_client_object(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :returns: ``True`` if ``test`` is a proper :py:class:`~.elasticsearch.Elasticsearch`\n        client object and raise a :py:exc:`TypeError` exception if it is not.\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    # Ignore mock type for testing\n    if str(type(test)) == \"<class 'unittest.mock.Mock'>\":\n        pass\n    elif not isinstance(test, Elasticsearch):\n        msg = f'Not a valid client object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)\n\n\ndef verify_index_list(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.curator.IndexList`\n\n    :returns: ``None`` if ``test`` is a proper :py:class:`~.curator.indexlist.IndexList`\n        object, else raise a :py:class:`TypeError` exception.\n    :rtype: None\n    \"\"\"\n    # It breaks if this import isn't local to this function:\n    # ImportError: cannot import name 'IndexList' from partially initialized module\n    # 'curator.indexlist' (most likely due to a circular import)\n    # pylint: disable=import-outside-toplevel\n    from curator.indexlist import IndexList\n\n    logger = logging.getLogger(__name__)\n    if not isinstance(test, IndexList):\n        msg = f'Not a valid IndexList object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)\n\n\ndef verify_repository(client, repository=None):\n    \"\"\"\n    Do :py:meth:`~.elasticsearch.snapshot.verify_repository` call. If it fails, raise a\n    :py:exc:`~.curator.exceptions.RepositoryException`.\n\n    :param client: A client connection object\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :param repository: A repository name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type repository: str\n\n    :rtype: None\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        nodes = client.snapshot.verify_repository(name=repository)['nodes']\n        logger.debug('All nodes can write to the repository')\n        logger.debug('Nodes with verified repository access: %s', nodes)\n    except Exception as err:\n        try:\n            if err.status_code == 404:\n                msg = (\n                    f'--- Repository \"{repository}\" not found. Error: '\n                    f'{err.meta.status}, {err.error}'\n                )\n            else:\n                msg = (\n                    f'--- Got a {err.meta.status} response from Elasticsearch.  '\n                    f'Error message: {err.error}'\n                )\n        except AttributeError:\n            msg = f'--- Error message: {err}'.format()\n        report = f'Failed to verify all nodes have repository access: {msg}'\n        raise RepositoryException(report) from err\n\n\ndef verify_snapshot_list(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.curator.SnapshotList`\n\n    :returns: ``None`` if ``test`` is a proper\n        :py:class:`~.curator.snapshotlist.SnapshotList` object, else raise a\n        :py:class:`TypeError` exception.\n    :rtype: None\n    \"\"\"\n    # It breaks if this import isn't local to this function:\n    # ImportError: cannot import name 'SnapshotList' from partially initialized module\n    # 'curator.snapshotlist' (most likely due to a circular import)\n    # pylint: disable=import-outside-toplevel\n    from curator.snapshotlist import SnapshotList\n\n    logger = logging.getLogger(__name__)\n    if not isinstance(test, SnapshotList):\n        msg = f'Not a valid SnapshotList object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)\n",
    "curator/indexlist.py": "\"\"\"Index List Class\"\"\"\n\nimport re\nimport itertools\nimport logging\nfrom elasticsearch8.exceptions import NotFoundError, TransportError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import ensure_list\nfrom curator.defaults import settings\nfrom curator.exceptions import (\n    ActionError,\n    ConfigurationError,\n    MissingArgument,\n    NoIndices,\n)\nfrom curator.helpers.date_ops import (\n    absolute_date_range,\n    date_range,\n    fix_epoch,\n    get_date_regex,\n    get_point_of_reference,\n    get_unit_count_from_name,\n    TimestringSearch,\n)\nfrom curator.helpers.getters import byte_size, get_indices\nfrom curator.helpers.testers import verify_client_object\nfrom curator.helpers.utils import chunk_index_list, report_failure, to_csv\nfrom curator.validators.filter_functions import filterstructure\n\n\nclass IndexList:\n    \"\"\"IndexList class\"\"\"\n\n    def __init__(self, client, search_pattern='_all'):\n        verify_client_object(client)\n        self.loggit = logging.getLogger('curator.indexlist')\n        #: An :py:class:`~.elasticsearch.Elasticsearch` client object passed from\n        #: param ``client``\n        self.client = client\n        #: Information extracted from indices, such as segment count, age, etc.\n        #: Populated at instance creation time by private helper methods.\n        #: **Type:** :py:class:`dict`\n        self.index_info = {}\n        #: The running list of indices which will be used by one of the\n        #: :py:mod:`~.curator.actions` classes. Populated at instance creation\n        #: time by private helper methods. **Type:** :py:class:`list`\n        self.indices = []\n        #: All indices in the cluster at instance creation time.\n        #: **Type:** :py:class:`list`\n        self.all_indices = []\n        self.__get_indices(search_pattern)\n        self.age_keyfield = None\n\n    def __actionable(self, idx):\n        self.loggit.debug('Index %s is actionable and remains in the list.', idx)\n\n    def __not_actionable(self, idx):\n        self.loggit.debug('Index %s is not actionable, removing from list.', idx)\n        self.indices.remove(idx)\n\n    def __excludify(self, condition, exclude, index, msg=None):\n        if condition is True:\n            if exclude:\n                text = \"Removed from actionable list\"\n                self.__not_actionable(index)\n            else:\n                text = \"Remains in actionable list\"\n                self.__actionable(index)\n        else:\n            if exclude:\n                text = \"Remains in actionable list\"\n                self.__actionable(index)\n            else:\n                text = \"Removed from actionable list\"\n                self.__not_actionable(index)\n        if msg:\n            self.loggit.debug('%s: %s', text, msg)\n\n    def __get_indices(self, pattern):\n        \"\"\"\n        Pull all indices into ``all_indices``, then populate ``indices`` and\n        ``index_info``\n        \"\"\"\n        self.loggit.debug('Getting indices matching search_pattern: \"%s\"', pattern)\n        self.all_indices = get_indices(self.client, search_pattern=pattern)\n        self.indices = self.all_indices[:]\n        # if self.indices:\n        #     for index in self.indices:\n        #         self.__build_index_info(index)\n\n    def __build_index_info(self, index):\n        \"\"\"\n        Ensure that ``index`` is a key in ``index_info``. If not, create a\n        sub-dictionary structure under that key.\n        \"\"\"\n        self.loggit.debug('Building preliminary index metadata for %s', index)\n        if index not in self.index_info:\n            self.index_info[index] = self.__zero_values()\n\n    def __map_method(self, ftype):\n        methods = {\n            'alias': self.filter_by_alias,\n            'age': self.filter_by_age,\n            'allocated': self.filter_allocated,\n            'closed': self.filter_closed,\n            'count': self.filter_by_count,\n            'empty': self.filter_empty,\n            'forcemerged': self.filter_forceMerged,\n            'ilm': self.filter_ilm,\n            'kibana': self.filter_kibana,\n            'none': self.filter_none,\n            'opened': self.filter_opened,\n            'period': self.filter_period,\n            'pattern': self.filter_by_regex,\n            'space': self.filter_by_space,\n            'shards': self.filter_by_shards,\n            'size': self.filter_by_size,\n        }\n        return methods[ftype]\n\n    def __remove_missing(self, err):\n        \"\"\"\n        Remove missing index found in ``err`` from self.indices and return that name\n        \"\"\"\n        missing = err.info['error']['index']\n        self.loggit.warning('Index was initiallly present, but now is not: %s', missing)\n        self.loggit.debug('Removing %s from active IndexList', missing)\n        self.indices.remove(missing)\n        return missing\n\n    def __zero_values(self):\n        \"\"\"The default values for index metadata\"\"\"\n        return {\n            'age': {'creation_date': 0, 'name': 0},\n            'docs': 0,\n            'number_of_replicas': 0,\n            'number_of_shards': 0,\n            'primary_size_in_bytes': 0,\n            'routing': {},\n            'segments': 0,\n            'size_in_bytes': 0,\n            'state': '',\n        }\n\n    def _get_indices_segments(self, data):\n        return self.client.indices.segments(index=to_csv(data))['indices'].copy()\n\n    def _get_indices_settings(self, data):\n        return self.client.indices.get_settings(index=to_csv(data))\n\n    def _get_indices_stats(self, data):\n        return self.client.indices.stats(index=to_csv(data), metric='store,docs')[\n            'indices'\n        ]\n\n    def _bulk_queries(self, data, exec_func):\n        slice_number = 10\n        query_result = {}\n        loop_number = (\n            round(len(data) / slice_number)\n            if round(len(data) / slice_number) > 0\n            else 1\n        )\n        self.loggit.debug(\"Bulk Queries - number requests created: %s\", loop_number)\n        for num in range(0, loop_number):\n            if num == (loop_number - 1):\n                data_sliced = data[num * slice_number :]\n            else:\n                data_sliced = data[num * slice_number : (num + 1) * slice_number]\n            query_result.update(exec_func(data_sliced))\n        return query_result\n\n    def mitigate_alias(self, index):\n        \"\"\"\n        Mitigate when an alias is detected instead of an index name\n\n        :param index: The index name that is showing up *instead* of what was expected\n\n        :type index: str\n\n        :returns: No return value:\n        :rtype: None\n        \"\"\"\n        self.loggit.debug('BEGIN mitigate_alias')\n        self.loggit.debug(\n            'Correcting an instance where an alias name points to index \"%s\"', index\n        )\n        data = self.client.indices.get(index=index)\n        aliases = list(data[index]['aliases'])\n        if aliases:\n            for alias in aliases:\n                if alias in self.indices:\n                    self.loggit.warning(\n                        'Removing alias \"%s\" from IndexList.indices', alias\n                    )\n                    self.indices.remove(alias)\n                if alias in list(self.index_info):\n                    self.loggit.warning(\n                        'Removing alias \"%s\" from IndexList.index_info', alias\n                    )\n                    del self.index_info[alias]\n        self.loggit.debug('Adding \"%s\" to IndexList.indices', index)\n        self.indices.append(index)\n        self.loggit.debug(\n            'Adding preliminary metadata for \"%s\" to IndexList.index_info', index\n        )\n        self.__build_index_info(index)\n        self.loggit.debug('END mitigate_alias')\n\n    def alias_index_check(self, data):\n        \"\"\"\n        Check each index in data to see if it's an alias.\n        \"\"\"\n        # self.loggit.debug('BEGIN alias_index_check')\n        working_list = data[:]\n        for entry in working_list:\n            if self.client.indices.exists_alias(name=entry):\n                index = list(self.client.indices.get_alias(name=entry).keys())[0]\n                self.loggit.warning(\n                    '\"%s\" is actually an alias for index \"%s\"', entry, index\n                )\n                self.mitigate_alias(index)\n                # The mitigate_alias step ensures that the class ivars are handled\n                # properly. The following ensure that we pass back a modified list\n                data.remove(entry)\n                data.append(index)\n        # self.loggit.debug('END alias_index_check')\n        return data\n\n    def indices_exist(self, data, exec_func):\n        \"\"\"Check if indices exist. If one doesn't, remove it. Loop until all exist\"\"\"\n        self.loggit.debug('BEGIN indices_exist')\n        checking = True\n        working_list = {}\n        verified_data = self.alias_index_check(data)\n        while checking:\n            try:\n                working_list.update(exec_func(verified_data))\n            except NotFoundError as err:\n                data.remove(self.__remove_missing(err))\n                continue\n            except TransportError as err:\n                if '413' in err.errors:\n                    msg = (\n                        'Huge Payload 413 Err - Trying to get information via '\n                        'multiple requests'\n                    )\n                    self.loggit.debug(msg)\n                    working_list.update(self._bulk_queries(verified_data, exec_func))\n            checking = False\n        # self.loggit.debug('END indices_exist')\n        return working_list\n\n    def data_getter(self, data, exec_func):\n        \"\"\"\n        Function that prevents unnecessary code repetition for different data\n        getter methods\n        \"\"\"\n        self.loggit.debug('BEGIN data_getter')\n        checking = True\n        while checking:\n            working_list = self.indices_exist(data, exec_func)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        sii = self.index_info[index]\n                    except KeyError:\n                        self.loggit.warning(\n                            'Index %s was not present at IndexList initialization, '\n                            ' and may be behind an alias',\n                            index,\n                        )\n                        self.mitigate_alias(index)\n                        sii = self.index_info[index]\n                        working_list = {}\n                        try:\n                            working_list.update(self._bulk_queries(data, exec_func))\n                        except NotFoundError as err:\n                            data.remove(self.__remove_missing(err))\n                            continue\n                    yield sii, working_list[index], index\n            checking = False\n        # self.loggit.debug('END data_getter')\n\n    def population_check(self, index, key):\n        \"\"\"Verify that key is in self.index_info[index], and that it is populated\"\"\"\n        retval = True\n        # self.loggit.debug('BEGIN population_check')\n        # self.loggit.debug('population_check: %s, %s', index, key)\n        if index not in self.index_info:\n            # This is just in case the index was somehow not populated\n            self.__build_index_info(index)\n        if key not in self.index_info[index]:\n            self.index_info[index][key] = self.__zero_values()[key]\n        if self.index_info[index][key] == self.__zero_values()[key]:\n            retval = False\n        # self.loggit.debug('END population_check')\n        return retval\n\n    def needs_data(self, indices, fields):\n        \"\"\"Check for data population in self.index_info\"\"\"\n        self.loggit.debug('Indices: %s, Fields: %s', indices, fields)\n        needful = []\n        working_list = self.indices_exist(indices, self._get_indices_settings)\n        for idx in working_list:\n            count = 0\n            for field in fields:\n                # If the return value is True for this field, it means it's populated\n                if self.population_check(idx, field):\n                    count += 1\n            if count == 0:\n                # All values are the default/zero\n                needful.append(idx)\n        if fields == ['state']:\n            self.loggit.debug('Always check open/close for all passed indices')\n            needful = list(working_list.keys())\n        self.loggit.debug('These indices need data in index_info: %s', needful)\n        return needful\n\n    def get_index_settings(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n            creation_date\n            number_of_replicas\n            number_of_shards\n            routing information (if present)\n        \"\"\"\n        self.loggit.debug('Getting index settings -- BEGIN')\n        self.empty_list_check()\n        fields = ['age', 'number_of_replicas', 'number_of_shards', 'routing']\n        for lst in chunk_index_list(self.indices):\n            # This portion here is to ensure that we're not polling for data\n            # unless we must\n            needful = self.needs_data(lst, fields)\n            if not needful:\n                # All indices are populated with some data, so we can skip\n                # data collection\n                continue\n            # Now we only need to run on the 'needful'\n            for sii, wli, _ in self.data_getter(needful, self._get_indices_settings):\n                sii['age']['creation_date'] = fix_epoch(\n                    wli['settings']['index']['creation_date']\n                )\n                sii['number_of_replicas'] = wli['settings']['index'][\n                    'number_of_replicas'\n                ]\n                sii['number_of_shards'] = wli['settings']['index']['number_of_shards']\n                if 'routing' in wli['settings']['index']:\n                    sii['routing'] = wli['settings']['index']['routing']\n        self.loggit.debug('Getting index settings -- END')\n\n    def get_index_state(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n\n            state (open or closed)\n\n        from the cat API\n        \"\"\"\n        self.loggit.debug('Getting index state -- BEGIN')\n        self.empty_list_check()\n        fields = ['state']\n        for lst in chunk_index_list(self.indices):\n            # This portion here is to ensure that we're not polling for data\n            # unless we must\n            needful = self.needs_data(lst, fields)\n            # Checking state is _always_ needful.\n            resp = self.client.cat.indices(\n                index=to_csv(needful), format='json', h='index,status'\n            )\n            for entry in resp:\n                try:\n                    self.index_info[entry['index']]['state'] = entry['status']\n                except KeyError:\n                    self.loggit.warning(\n                        'Index %s was not present at IndexList initialization, '\n                        'and may be behind an alias',\n                        entry['index'],\n                    )\n                    self.mitigate_alias(entry['index'])\n                    self.index_info[entry['index']]['state'] = entry['status']\n        # self.loggit.debug('Getting index state -- END')\n\n    def get_index_stats(self):\n        \"\"\"\n        Populate ``index_info`` with index ``size_in_bytes``,\n        ``primary_size_in_bytes`` and doc count information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index stats -- BEGIN')\n        self.empty_list_check()\n        fields = ['size_in_bytes', 'docs', 'primary_size_in_bytes']\n        # This ensures that the index state is populated\n        self.get_index_state()\n        # Don't populate working_list until after the get_index state as it\n        # can and will remove missing indices\n        working_list = self.working_list()\n        for index in self.working_list():\n            if self.index_info[index]['state'] == 'close':\n                working_list.remove(index)\n        if working_list:\n            index_lists = chunk_index_list(working_list)\n            for lst in index_lists:\n                # This portion here is to ensure that we're not polling for data\n                # unless we must\n                needful = self.needs_data(lst, fields)\n                if not needful:\n                    # All indices are populated with some data, so we can skip\n                    # data collection\n                    continue\n                # Now we only need to run on the 'needful'\n                for sii, wli, index in self.data_getter(\n                    needful, self._get_indices_stats\n                ):\n                    try:\n                        size = wli['total']['store']['size_in_bytes']\n                        docs = wli['total']['docs']['count']\n                        primary_size = wli['primaries']['store']['size_in_bytes']\n                        msg = (\n                            f'Index: {index}  Size: {byte_size(size)}  Docs: {docs} '\n                            f'PrimarySize: {byte_size(primary_size)}'\n                        )\n                        self.loggit.debug(msg)\n                        sii['size_in_bytes'] = size\n                        sii['docs'] = docs\n                        sii['primary_size_in_bytes'] = primary_size\n                    except KeyError:\n                        msg = f'Index stats missing for \"{index}\" -- might be closed'\n                        self.loggit.warning(msg)\n        # self.loggit.debug('Getting index stats -- END')\n\n    def get_segment_counts(self):\n        \"\"\"\n        Populate ``index_info`` with segment information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index segment counts')\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            for sii, wli, _ in self.data_getter(lst, self._get_indices_segments):\n                shards = wli['shards']\n                segmentcount = 0\n                for shardnum in shards:\n                    for shard in range(0, len(shards[shardnum])):\n                        segmentcount += shards[shardnum][shard]['num_search_segments']\n                sii['segments'] = segmentcount\n\n    def empty_list_check(self):\n        \"\"\"Raise :py:exc:`~.curator.exceptions.NoIndices` if ``indices`` is empty\"\"\"\n        self.loggit.debug('Checking for empty list')\n        if not self.indices:\n            raise NoIndices('index_list object is empty.')\n\n    def working_list(self):\n        \"\"\"\n        Return the current value of ``indices`` as copy-by-value to prevent list\n        stomping during iterations\n        \"\"\"\n        # Copy by value, rather than reference to prevent list stomping during\n        # iterations\n        self.loggit.debug('Generating working list of indices')\n        return self.indices[:]\n\n    def _get_name_based_ages(self, timestring):\n        \"\"\"\n        Add indices to ``index_info`` based on the age as indicated by the index\n        name pattern, if it matches ``timestring``\n\n        :param timestring: An :py:func:`time.strftime` pattern\n        \"\"\"\n        # Check for empty list before proceeding here to prevent non-iterable condition\n        self.loggit.debug('Getting ages of indices by \"name\"')\n        self.empty_list_check()\n        tstr = TimestringSearch(timestring)\n        for index in self.working_list():\n            epoch = tstr.get_epoch(index)\n            if isinstance(epoch, int):\n                self.index_info[index]['age']['name'] = epoch\n            else:\n                msg = (\n                    f'Timestring {timestring} was not found in index {index}. '\n                    f'Removing from actionable list'\n                )\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def _get_field_stats_dates(self, field='@timestamp'):\n        \"\"\"\n        Add indices to ``index_info`` based on the values the queries return, as\n        determined by the min and max aggregated values of ``field``\n\n        :param field: The field with the date value.  The field must be mapped in\n            elasticsearch as a date datatype. Default: ``@timestamp``\n        \"\"\"\n        self.loggit.debug('Cannot query closed indices. Omitting any closed indices.')\n        self.filter_closed()\n        self.loggit.debug(\n            'Cannot use field_stats with empty indices. Omitting any empty indices.'\n        )\n        self.filter_empty()\n        self.loggit.debug(\n            'Getting index date by querying indices for min & max value of %s field',\n            field,\n        )\n        self.empty_list_check()\n        index_lists = chunk_index_list(self.indices)\n        for lst in index_lists:\n            for index in lst:\n                aggs = {\n                    'min': {'min': {'field': field}},\n                    'max': {'max': {'field': field}},\n                }\n                response = self.client.search(index=index, size=0, aggs=aggs)\n                self.loggit.debug('RESPONSE: %s', response)\n                if response:\n                    try:\n                        res = response['aggregations']\n                        self.loggit.debug('res: %s', res)\n                        data = self.index_info[index]['age']\n                        data['min_value'] = fix_epoch(res['min']['value'])\n                        data['max_value'] = fix_epoch(res['max']['value'])\n                        self.loggit.debug('data: %s', data)\n                    except KeyError as exc:\n                        raise ActionError(\n                            f'Field \"{field}\" not found in index \"{index}\"'\n                        ) from exc\n\n    def _calculate_ages(\n        self, source=None, timestring=None, field=None, stats_result=None\n    ):\n        \"\"\"\n        This method initiates index age calculation based on the given parameters.\n        Exceptions are raised when they are improperly configured.\n\n        Set instance variable ``age_keyfield`` for use later, if needed.\n\n        :param source: Source of index age. Can be: ``name``, ``creation_date``,\n            or ``field_stats``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the min or max result value.\n        \"\"\"\n        self.age_keyfield = source\n        if source == 'name':\n            if not timestring:\n                raise MissingArgument(\n                    'source \"name\" requires the \"timestring\" keyword argument'\n                )\n            self._get_name_based_ages(timestring)\n        elif source == 'creation_date':\n            # Nothing to do here as this comes from `get_settings` in __init__\n            pass\n        elif source == 'field_stats':\n            if not field:\n                raise MissingArgument(\n                    'source \"field_stats\" requires the \"field\" keyword argument'\n                )\n            if stats_result not in ['min_value', 'max_value']:\n                raise ValueError(f'Invalid value for \"stats_result\": {stats_result}')\n            self.age_keyfield = stats_result\n            self._get_field_stats_dates(field=field)\n        else:\n            raise ValueError(\n                f'Invalid source: {source}. Must be one of \"name\", \"creation_date\", '\n                f'\"field_stats\".'\n            )\n\n    def _sort_by_age(self, index_list, reverse=True):\n        \"\"\"\n        Take a list of indices and sort them by date.\n\n        By default, the youngest are first with ``reverse=True``, but the oldest\n        can be first by setting ``reverse=False``\n        \"\"\"\n        # Do the age-based sorting here.\n        # Build an temporary dictionary with just index and age as the key and\n        # value, respectively\n        temp = {}\n        for index in index_list:\n            try:\n                if self.index_info[index]['age'][self.age_keyfield]:\n                    temp[index] = self.index_info[index]['age'][self.age_keyfield]\n                else:\n                    msg = (\n                        f'No date for \"{index}\" in IndexList metadata. '\n                        f'Possible timestring mismatch. Excluding index \"{index}\".'\n                    )\n                    self.__excludify(True, True, index, msg)\n            except KeyError:\n                msg = (\n                    f'{index} does not have key \"{self.age_keyfield}\" in IndexList '\n                    f'metadata'\n                )\n                self.__excludify(True, True, index, msg)\n        # Sort alphabetically prior to age sort to keep sorting consistent\n        temp_tuple = sorted(temp.items(), key=lambda k: k[0], reverse=reverse)\n        # If reverse is True, this will sort so the youngest indices are first.\n        # However, if you want oldest first, set reverse to False.\n        # Effectively, this should set us up to act on everything older than\n        # meets the other set criteria. It starts as a tuple, but then becomes a list.\n        sorted_tuple = sorted(temp_tuple, key=lambda k: k[1], reverse=reverse)\n        return [x[0] for x in sorted_tuple]\n\n    def filter_by_regex(self, kind=None, value=None, exclude=False):\n        \"\"\"\n        Match indices by regular expression (pattern).\n\n        :param kind: Can be one of: ``suffix``, ``prefix``, ``regex``, or\n            ``timestring``. This option defines what ``kind`` of filter you will\n            be building.\n        :param value: Depends on ``kind``. It is the :py:func:`time.strftime` string if\n            ``kind`` is ``timestring``. It's used to build the regular expression\n            for other kinds.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by regex')\n        if kind not in ['regex', 'prefix', 'suffix', 'timestring']:\n            raise ValueError(f'{kind}: Invalid value for kind')\n        # Stop here if None or empty value, but zero is okay\n        if value == 0:\n            pass\n        elif not value:\n            raise ValueError(\n                'Invalid None value for \"value\". Cannot be \"None\" type, empty, or False'\n            )\n        if kind == 'timestring':\n            regex = settings.regex_map()[kind].format(get_date_regex(value))\n        else:\n            regex = settings.regex_map()[kind].format(value)\n        self.empty_list_check()\n        pattern = re.compile(regex)\n        for index in self.working_list():\n            self.loggit.debug('Filter by regex: Index: %s', index)\n            match = pattern.search(index)\n            if match:\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_by_age(\n        self,\n        source='name',\n        direction=None,\n        timestring=None,\n        unit=None,\n        unit_count=None,\n        field=None,\n        stats_result='min_value',\n        epoch=None,\n        exclude=False,\n        unit_count_pattern=False,\n    ):\n        \"\"\"\n        Match indices by relative age calculations.\n\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``\n        :param direction: Time to filter, either ``older`` or ``younger``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``seconds``, ``minutes``, ``hours``, ``days``, ``weeks``,\n            ``months``, or ``years``.\n        :param unit_count: The count of ``unit``. ``unit_count`` * ``unit`` will\n            be calculated out to the relative number of seconds.\n        :param unit_count_pattern: A regular expression whose capture group identifies\n            the value for ``unit_count``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the minimum or maximum result value.\n        :param epoch: An epoch timestamp used in conjunction with ``unit`` and\n            ``unit_count`` to establish a point of reference for calculations.\n            If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude`` is `False`, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by age')\n        # Get timestamp point of reference, por\n        por = get_point_of_reference(unit, unit_count, epoch)\n        if not direction:\n            raise MissingArgument('Must provide a value for \"direction\"')\n        if direction not in ['older', 'younger']:\n            raise ValueError(f'Invalid value for \"direction\": {direction}')\n        # This filter requires index settings.\n        self.get_index_settings()\n        self._calculate_ages(\n            source=source, timestring=timestring, field=field, stats_result=stats_result\n        )\n        if unit_count_pattern:\n            try:\n                unit_count_matcher = re.compile(unit_count_pattern)\n            # pylint: disable=broad-except\n            except Exception as exc:\n                # We got an illegal regex, so won't be able to match anything\n                self.loggit.error(\n                    'Regular expression failure. Will not match unit count. Error: %s',\n                    exc,\n                )\n                unit_count_matcher = None\n        for index in self.working_list():\n            try:\n                remove_this_index = False\n                age = int(self.index_info[index]['age'][self.age_keyfield])\n                # if age == 0:\n                #     msg = (\n                #         f'Evaluating {index} resulted in an epoch timestamp of '\n                #         f'0, meaning there is no associated date. Removing from '\n                #         f'the actionable list.'\n                #     )\n                #     self.loggit.debug(msg)\n                #     self.indices.remove(index)\n                #     continue\n                msg = (\n                    f'Index \"{index}\" age ({age}), direction: \"{direction}\", point of '\n                    f'reference, ({por})'\n                )\n                # Because time adds to epoch, smaller numbers are actually older\n                # timestamps.\n                if unit_count_pattern:\n                    msg = (\n                        f'unit_count_pattern is set, trying to match pattern to '\n                        f'index \"{index}\"'\n                    )\n                    self.loggit.debug(msg)\n                    unit_count_from_index = get_unit_count_from_name(\n                        index, unit_count_matcher\n                    )\n                    if unit_count_from_index:\n                        self.loggit.debug(\n                            'Pattern matched, applying unit_count of  \"%s\"',\n                            unit_count_from_index,\n                        )\n                        adjustedpor = get_point_of_reference(\n                            unit, unit_count_from_index, epoch\n                        )\n                        msg = (\n                            f'Adjusting point of reference from {por} to {adjustedpor} '\n                            f'based on unit_count of {unit_count_from_index} from '\n                            f'index name'\n                        )\n                        self.loggit.debug(msg)\n                    elif unit_count == -1:\n                        # Unable to match pattern and unit_count is -1, meaning no\n                        # fallback, so this index is removed from the list\n                        msg = (\n                            f'Unable to match pattern and no fallback value set. '\n                            f'Removing index \"{index}\" from actionable list'\n                        )\n                        self.loggit.debug(msg)\n                        remove_this_index = True\n                        adjustedpor = por\n                        # necessary to avoid exception if the first index is excluded\n                    else:\n                        # Unable to match the pattern and unit_count is set, so\n                        # fall back to using unit_count for determining whether\n                        # to keep this index in the list\n                        self.loggit.debug(\n                            'Unable to match pattern using fallback value of \"%s\"',\n                            unit_count,\n                        )\n                        adjustedpor = por\n                else:\n                    adjustedpor = por\n                if direction == 'older':\n                    agetest = age < adjustedpor\n                else:\n                    agetest = age > adjustedpor\n                self.__excludify(agetest and not remove_this_index, exclude, index, msg)\n            except KeyError:\n                msg = (\n                    f'Index \"{index}\" does not meet provided criteria. '\n                    f'Removing from list.'\n                )\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def filter_by_space(\n        self,\n        disk_space=None,\n        reverse=True,\n        use_age=False,\n        source='creation_date',\n        timestring=None,\n        field=None,\n        stats_result='min_value',\n        exclude=False,\n        threshold_behavior='greater_than',\n    ):\n        \"\"\"\n        Remove indices from the actionable list based on space consumed, sorted\n        reverse-alphabetically by default.  If you set ``reverse`` to ``False``,\n        it will be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` --then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse`` to ``False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the\n        index creation date by default, but you can specify an ``source`` of\n        ``name``, ``max_value``, or ``min_value``. The ``name`` ``source`` requires\n        the timestring argument.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``disk_space``. When set to\n        ``less_than``, it includes if the index is smaller than ``disk_space``\n\n        :param disk_space: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param reverse: The filtering direction. (default: ``True``).  Ignored if\n            ``use_age`` is ``True``\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name`` is selected.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``\n            is selected.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats`` is selected. It determines whether to reference\n            the minimum or maximum value of `field` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by disk space')\n        # Ensure that disk_space is a float\n        if not disk_space:\n            raise MissingArgument('No value for \"disk_space\" provided')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(\n                f'Invalid value for \"threshold_behavior\": {threshold_behavior}'\n            )\n        # This filter requires both index stats and index settings\n        self.get_index_stats()\n        self.get_index_settings()\n        disk_space = float(disk_space)\n        disk_usage = 0.0\n        disk_limit = disk_space * 2**30\n        msg = (\n            'Cannot get disk usage info from closed indices. Omitting any '\n            'closed indices.'\n        )\n        self.loggit.debug(msg)\n        self.filter_closed()\n        if use_age:\n            self._calculate_ages(\n                source=source,\n                timestring=timestring,\n                field=field,\n                stats_result=stats_result,\n            )\n            # Using default value of reverse=True in self._sort_by_age()\n            self.loggit.debug('SORTING BY AGE')\n            sorted_indices = self._sort_by_age(self.working_list())\n        else:\n            # Default to sorting by index name\n            sorted_indices = sorted(self.working_list(), reverse=reverse)\n        for index in sorted_indices:\n            disk_usage += self.index_info[index]['size_in_bytes']\n            msg = (\n                f'{index}, summed disk usage is {byte_size(disk_usage)} and disk limit '\n                f'is {byte_size(disk_limit)}.'\n            )\n            if threshold_behavior == 'greater_than':\n                self.__excludify((disk_usage > disk_limit), exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify((disk_usage < disk_limit), exclude, index, msg)\n\n    def filter_kibana(self, exclude=True):\n        \"\"\"\n        Match any index named ``.kibana*`` in ``indices``. Older releases addressed\n        index names that no longer exist.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering kibana indices')\n        self.empty_list_check()\n        for index in self.working_list():\n            pattern = re.compile(r'^\\.kibana.*$')\n            if pattern.match(index):\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_forceMerged(self, max_num_segments=None, exclude=True):\n        \"\"\"\n        Match any index which has ``max_num_segments`` per shard or fewer in the\n        actionable list.\n\n        :param max_num_segments: Cutoff number of segments per shard.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering forceMerged indices')\n        if not max_num_segments:\n            raise MissingArgument('Missing value for \"max_num_segments\"')\n        self.loggit.debug(\n            'Cannot get segment count of closed indices. Omitting any closed indices.'\n        )\n        # This filter requires the index state (open/close), and index settings.\n        self.get_index_state()\n        self.get_index_settings()\n        self.filter_closed()\n        self.get_segment_counts()\n        for index in self.working_list():\n            # Do this to reduce long lines and make it more readable...\n            shards = int(self.index_info[index]['number_of_shards'])\n            replicas = int(self.index_info[index]['number_of_replicas'])\n            segments = int(self.index_info[index]['segments'])\n            msg = (\n                f'{index} has {shards} shard(s) + {replicas} replica(s) '\n                f'with a sum total of {segments} segments.'\n            )\n            expected_count = (shards + (shards * replicas)) * max_num_segments\n            self.__excludify((segments <= expected_count), exclude, index, msg)\n\n    def filter_closed(self, exclude=True):\n        \"\"\"\n        Filter out closed indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering closed indices')\n        # This filter requires index state (open/close)\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'close'\n            self.loggit.debug(\n                'Index %s state: %s', index, self.index_info[index]['state']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_empty(self, exclude=True):\n        \"\"\"\n        Filter indices with a document count of zero. Indices that are closed\n        are automatically excluded from consideration due to closed indices reporting\n        a document count of zero.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering empty indices')\n        # This index requires index state (open/close) and index stats\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['docs'] == 0\n            self.loggit.debug(\n                'Index %s doc count: %s', index, self.index_info[index]['docs']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_opened(self, exclude=True):\n        \"\"\"\n        Filter out opened indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering open indices')\n        # This filter requires index state (open/close)\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'open'\n            self.loggit.debug(\n                'Index %s state: %s', index, self.index_info[index]['state']\n            )\n            self.__excludify(condition, exclude, index)\n\n    def filter_allocated(\n        self, key=None, value=None, allocation_type='require', exclude=True\n    ):\n        \"\"\"\n        Match indices that have the routing allocation rule of ``key=value`` from\n        ``indices``\n\n        :param key: The allocation attribute to check for\n        :param value: The value to check for\n        :param allocation_type: Type of allocation to apply\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is `T`rue`\n        \"\"\"\n        self.loggit.debug('Filtering indices with shard routing allocation rules')\n        if not key:\n            raise MissingArgument('No value for \"key\" provided')\n        if not value:\n            raise MissingArgument('No value for \"value\" provided')\n        if allocation_type not in ['include', 'exclude', 'require']:\n            raise ValueError(f'Invalid \"allocation_type\": {allocation_type}')\n        # This filter requires index settings\n        self.get_index_settings()\n        self.get_index_state()\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        has_routing = (\n                            working_list[index]['settings']['index']['routing'][\n                                'allocation'\n                            ][allocation_type][key]\n                            == value\n                        )\n                    except KeyError:\n                        has_routing = False\n                    # if has_routing:\n                    msg = (\n                        f'{index}: Routing (mis)match: '\n                        f'index.routing.allocation.{allocation_type}.{key}={value}.'\n                    )\n                    self.__excludify(has_routing, exclude, index, msg)\n\n    def filter_none(self):\n        \"\"\"The legendary NULL filter\"\"\"\n        self.loggit.debug('\"None\" filter selected.  No filtering will be done.')\n\n    def filter_by_alias(self, aliases=None, exclude=False):\n        \"\"\"\n        Match indices which are associated with the alias or list of aliases\n        identified by ``aliases``. Indices must appear in all aliases in list\n        ``aliases`` or a 404 error will result, leading to no indices being matched.\n\n        :param aliases: A list of alias names.\n        :type aliases: list\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices matching aliases: \"%s\"', aliases)\n        if not aliases:\n            raise MissingArgument('No value for \"aliases\" provided')\n        aliases = ensure_list(aliases)\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            try:\n                # get_alias will either return {} or a NotFoundError.\n                has_alias = list(\n                    self.client.indices.get_alias(\n                        index=to_csv(lst), name=to_csv(aliases)\n                    ).keys()\n                )\n                self.loggit.debug('has_alias: %s', has_alias)\n            except NotFoundError:\n                # if we see the NotFoundError, we need to set working_list to {}\n                has_alias = []\n            for index in lst:\n                if index in has_alias:\n                    isness = 'is'\n                    condition = True\n                else:\n                    isness = 'is not'\n                    condition = False\n                msg = f'{index} {isness} associated with aliases: {aliases}'\n                self.__excludify(condition, exclude, index, msg)\n\n    def filter_by_count(\n        self,\n        count=None,\n        reverse=True,\n        use_age=False,\n        pattern=None,\n        source='creation_date',\n        timestring=None,\n        field=None,\n        stats_result='min_value',\n        exclude=True,\n    ):\n        \"\"\"\n        Remove indices from the actionable list beyond the number ``count``, sorted\n        reverse-alphabetically by default.  If you set ``reverse=False``, it will\n        be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` -- then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse=False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the index\n        creation date by default, but you can specify an ``source`` of ``name``,\n        ``max_value``, or ``min_value``. The ``name`` `source` requires the\n        timestring argument.\n\n        :param count: Filter indices beyond ``count``.\n        :param reverse: The filtering direction. (default: ``True``).\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param pattern: Select indices to count from a regular expression pattern.\n            This pattern must have one and only one capture group. This can allow\n            a single ``count`` filter instance to operate against any number of\n            matching patterns, and keep ``count`` of each index in that group.\n            For example, given a ``pattern`` of ``'^(.*)-\\\\d{6}$'``, it will match\n            both ``rollover-000001`` and ``index-999990``, but not\n            ``logstash-2017.10.12``. Following the same example, if my cluster\n            also had ``rollover-000002`` through ``rollover-000010`` and\n            ``index-888888`` through ``index-999999``, it will process both groups\n            of indices, and include or exclude the ``count`` of each.\n        :param source: Source of index age. Can be one of ``name``,\n            ``creation_date``, or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name``.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats``. It determines whether to reference the minimum\n            or maximum value of ``field`` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices by count')\n        if not count:\n            raise MissingArgument('No value for \"count\" provided')\n        # This filter requires index state (open/close) and index settings\n        self.get_index_state()\n        self.get_index_settings()\n        # Create a copy-by-value working list\n        working_list = self.working_list()\n        if pattern:\n            try:\n                regex = re.compile(pattern)\n                if regex.groups < 1:\n                    raise ConfigurationError(\n                        f'No regular expression group found in {pattern}'\n                    )\n                if regex.groups > 1:\n                    raise ConfigurationError(\n                        f'More than 1 regular expression group found in {pattern}'\n                    )\n                # Prune indices not matching the regular expression the object\n                # (And filtered_indices) We do not want to act on them by accident.\n                prune_these = list(\n                    filter(lambda x: regex.match(x) is None, working_list)\n                )\n                filtered_indices = working_list\n                for index in prune_these:\n                    msg = '{index} does not match regular expression {pattern}.'\n                    condition = True\n                    exclude = True\n                    self.__excludify(condition, exclude, index, msg)\n                    # also remove it from filtered_indices\n                    filtered_indices.remove(index)\n                # Presort these filtered_indices using the lambda\n                presorted = sorted(\n                    filtered_indices, key=lambda x: regex.match(x).group(1)\n                )\n            except Exception as exc:\n                raise ActionError(\n                    f'Unable to process pattern: \"{pattern}\". Error: {exc}'\n                ) from exc\n            # Initialize groups here\n            groups = []\n            # We have to pull keys k this way, but we don't need to keep them\n            # We only need g for groups\n            for _, g in itertools.groupby(\n                presorted, key=lambda x: regex.match(x).group(1)\n            ):\n                groups.append(list(g))\n        else:\n            # Since pattern will create a list of lists, and we iterate over that,\n            # we need to put our single list inside a list\n            groups = [working_list]\n        for group in groups:\n            if use_age:\n                if source != 'name':\n                    self.loggit.warning(\n                        'Cannot get age information from closed indices unless '\n                        'source=\"name\".  Omitting any closed indices.'\n                    )\n                    self.filter_closed()\n                self._calculate_ages(\n                    source=source,\n                    timestring=timestring,\n                    field=field,\n                    stats_result=stats_result,\n                )\n                # Using default value of reverse=True in self._sort_by_age()\n                sorted_indices = self._sort_by_age(group, reverse=reverse)\n            else:\n                # Default to sorting by index name\n                sorted_indices = sorted(group, reverse=reverse)\n            idx = 1\n            for index in sorted_indices:\n                msg = f'{index} is {idx} of specified count of {count}.'\n                condition = True if idx <= count else False\n                self.__excludify(condition, exclude, index, msg)\n                idx += 1\n\n    def filter_by_shards(\n        self, number_of_shards=None, shard_filter_behavior='greater_than', exclude=False\n    ):\n        \"\"\"\n        Match ``indices`` with a given shard count.\n\n        Selects all indices with a shard count ``greater_than`` ``number_of_shards``\n        by default. Use ``shard_filter_behavior`` to select indices with shard\n        count ``greater_than``, ``greater_than_or_equal``, ``less_than``,\n        ``less_than_or_equal``, or ``equal`` to ``number_of_shards``.\n\n        :param number_of_shards: shard threshold\n        :param shard_filter_behavior: Do you want to filter on ``greater_than``,\n            ``greater_than_or_equal``, ``less_than``, ``less_than_or_equal``,\n            or ``equal``?\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug(\"Filtering indices by number of shards\")\n        if not number_of_shards:\n            raise MissingArgument('No value for \"number_of_shards\" provided')\n        if shard_filter_behavior not in [\n            'greater_than',\n            'less_than',\n            'greater_than_or_equal',\n            'less_than_or_equal',\n            'equal',\n        ]:\n            raise ValueError(\n                f'Invalid value for \"shard_filter_behavior\": {shard_filter_behavior}'\n            )\n        if number_of_shards < 1 or (\n            shard_filter_behavior == 'less_than' and number_of_shards == 1\n        ):\n            raise ValueError(\n                f'Unacceptable value: {number_of_shards} -- \"number_of_shards\" cannot '\n                f'be less than 1. A valid index will have at least one shard.'\n            )\n        # This filter requires index_settings to count shards\n        self.get_index_settings()\n        self.empty_list_check()\n        for index in self.working_list():\n            self.loggit.debug('Filter by number of shards: Index: %s', index)\n            if shard_filter_behavior == 'greater_than':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) > number_of_shards\n                )\n            elif shard_filter_behavior == 'less_than':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) < number_of_shards\n                )\n            elif shard_filter_behavior == 'greater_than_or_equal':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) >= number_of_shards\n                )\n            elif shard_filter_behavior == 'less_than_or_equal':\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) <= number_of_shards\n                )\n            else:\n                condition = (\n                    int(self.index_info[index]['number_of_shards']) == number_of_shards\n                )\n            self.__excludify(condition, exclude, index)\n\n    def filter_period(\n        self,\n        period_type='relative',\n        source='name',\n        range_from=None,\n        range_to=None,\n        date_from=None,\n        date_to=None,\n        date_from_format=None,\n        date_to_format=None,\n        timestring=None,\n        unit=None,\n        field=None,\n        stats_result='min_value',\n        intersect=False,\n        week_starts_on='sunday',\n        epoch=None,\n        exclude=False,\n    ):\n        \"\"\"\n        Match ``indices`` with ages within a given period.\n\n        :param period_type: Can be either ``absolute`` or ``relative``.  Default\n            is ``relative``. ``date_from`` and ``date_to`` are required when using\n            ``period_type='absolute'``. ``range_from`` and ``range_to`` are required\n            with ``period_type='relative'``.\n        :param source: Source of index age. Can be ``name``, ``creation_date``,\n            or ``field_stats``\n        :param range_from: How many ``unit`` (s) in the past/future is the origin?\n        :param range_to: How many ``unit`` (s) in the past/future is the end point?\n        :param date_from: The simplified date for the start of the range\n        :param date_to: The simplified date for the end of the range.  If this\n            value is the same as ``date_from``, the full value of ``unit`` will be\n            extrapolated for the range.  For example, if ``unit=months``, and\n            ``date_from`` and ``date_to`` are both ``2017.01``, then the entire\n            month of January 2017 will be the absolute date range.\n        :param date_from_format: The :py:func:`time.strftime` string used to\n            parse ``date_from``\n        :param date_to_format: The :py:func:`time.strftime` string used to\n            parse ``date_to``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``hours``, ``days``, ``weeks``, ``months``, or ``years``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used in\n            conjunction with ``source='field_stats'`` to choose whether to reference\n            the min or max result value.\n        :param intersect: Only used when ``source='field_stats'``. If ``True``,\n            only indices where both ``min_value`` and ``max_value`` are within the\n            period will be selected. If ``False``, it will use whichever you specified.\n            Default is ``False`` to preserve expected behavior.\n        :param week_starts_on: Either ``sunday`` or ``monday``. Default is ``sunday``\n        :param epoch: An epoch timestamp used to establish a point of reference for\n            calculations. If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by period')\n        if period_type not in ['absolute', 'relative']:\n            raise ValueError(\n                f'Unacceptable value: {period_type} -- \"period_type\" must be either '\n                f'\"absolute\" or \"relative\".'\n            )\n        if period_type == 'relative':\n            func = date_range\n            args = [unit, range_from, range_to, epoch]\n            kwgs = {'week_starts_on': week_starts_on}\n            if (not isinstance(range_from, int)) or (not isinstance(range_to, int)):\n                raise ConfigurationError(\n                    '\"range_from\" and \"range_to\" must be integer values'\n                )\n        else:\n            func = absolute_date_range\n            args = [unit, date_from, date_to]\n            kwgs = {\n                'date_from_format': date_from_format,\n                'date_to_format': date_to_format,\n            }\n            for reqd in [date_from, date_to, date_from_format, date_to_format]:\n                if not reqd:\n                    raise ConfigurationError(\n                        'Must provide \"date_from\", \"date_to\", \"date_from_format\", and '\n                        '\"date_to_format\" with absolute period_type'\n                    )\n        # This filter requires index settings\n        self.get_index_settings()\n        try:\n            start, end = func(*args, **kwgs)\n        # pylint: disable=broad-except\n        except Exception as exc:\n            report_failure(exc)\n        self._calculate_ages(\n            source=source, timestring=timestring, field=field, stats_result=stats_result\n        )\n        for index in self.working_list():\n            try:\n                if source == 'field_stats' and intersect:\n                    min_age = int(self.index_info[index]['age']['min_value'])\n                    max_age = int(self.index_info[index]['age']['max_value'])\n                    msg = (\n                        f'Index \"{index}\", timestamp field \"{field}\", min_value '\n                        f'({min_age}), max_value ({max_age}), period start: '\n                        f'\"{start}\", period end, \"{end}\"'\n                    )\n                    # Because time adds to epoch, smaller numbers are actually older\n                    # timestamps.\n                    inrange = (min_age >= start) and (max_age <= end)\n                else:\n                    age = int(self.index_info[index]['age'][self.age_keyfield])\n                    msg = (\n                        f'Index \"{index}\" age ({age}), period start: \"{start}\", period '\n                        f'end, \"{end}\"'\n                    )\n                    # Because time adds to epoch, smaller numbers are actually older\n                    # timestamps.\n                    inrange = (age >= start) and (age <= end)\n                self.__excludify(inrange, exclude, index, msg)\n            except KeyError:\n                self.loggit.debug(\n                    'Index \"%s\" does not meet provided criteria. Removing from list.',\n                    index,\n                )\n                self.indices.remove(index)\n\n    def filter_ilm(self, exclude=True):\n        \"\"\"\n        Match indices that have the setting ``index.lifecycle.name``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            ``indices``. If ``exclude=False``, then only matching indices will be\n            kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices with index.lifecycle.name')\n        index_lists = chunk_index_list(self.indices)\n        if index_lists == [['']]:\n            self.loggit.debug('Empty working list. No ILM indices to filter.')\n            return\n        for lst in index_lists:\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        subvalue = working_list[index]['settings']['index']['lifecycle']\n                        has_ilm = 'name' in subvalue\n                        msg = f\"{index} has index.lifecycle.name {subvalue['name']}\"\n                    except KeyError:\n                        has_ilm = False\n                        msg = f'index.lifecycle.name is not set for index {index}'\n                    self.__excludify(has_ilm, exclude, index, msg)\n\n    def iterate_filters(self, filter_dict):\n        \"\"\"\n        Iterate over the filters defined in ``config`` and execute them.\n\n        :param filter_dict: The configuration dictionary\n\n        .. note:: ``filter_dict`` should be a dictionary with the following form:\n        .. code-block:: python\n\n                { 'filters' : [\n                        {\n                            'filtertype': 'the_filter_type',\n                            'key1' : 'value1',\n                            ...\n                            'keyN' : 'valueN'\n                        }\n                    ]\n                }\n\n        \"\"\"\n        self.loggit.debug('Iterating over a list of filters')\n        # Make sure we actually _have_ filters to act on\n        if 'filters' not in filter_dict or len(filter_dict['filters']) < 1:\n            self.loggit.info('No filters in config.  Returning unaltered object.')\n            return\n        self.loggit.debug('All filters: %s', filter_dict['filters'])\n        for fil in filter_dict['filters']:\n            self.loggit.debug('Top of the loop: %s', self.indices)\n            self.loggit.debug('Un-parsed filter args: %s', fil)\n            # Make sure we got at least this much in the configuration\n            chk = SchemaCheck(\n                fil, filterstructure(), 'filter', 'IndexList.iterate_filters'\n            ).result()\n            msg = f'Parsed filter args: {chk}'\n            self.loggit.debug(msg)\n            method = self.__map_method(fil['filtertype'])\n            del fil['filtertype']\n            # If it's a filtertype with arguments, update the defaults with the\n            # provided settings.\n            if fil:\n                self.loggit.debug('Filter args: %s', fil)\n                self.loggit.debug('Pre-instance: %s', self.indices)\n                method(**fil)\n                self.loggit.debug('Post-instance: %s', self.indices)\n            else:\n                # Otherwise, it's a settingless filter.\n                method()\n\n    def filter_by_size(\n        self,\n        size_threshold=None,\n        threshold_behavior='greater_than',\n        exclude=False,\n        size_behavior='primary',\n    ):\n        \"\"\"\n        Remove indices from the actionable list based on index size.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``size_threshold``. When set to\n        ``less_than``, it includes if the index is smaller than ``size_threshold``\n\n        :param size_threshold: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param size_behavior: Size that used to filter, either ``primary`` or\n            ``total``. Defaults to ``primary``\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by index size')\n        # Ensure that disk_space is a float\n        if not size_threshold:\n            raise MissingArgument('No value for \"size_threshold\" provided')\n        if size_behavior not in ['primary', 'total']:\n            raise ValueError(f'Invalid value for \"size_behavior\": {size_behavior}')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(\n                f'Invalid value for \"threshold_behavior\": {threshold_behavior}'\n            )\n        index_size_limit = float(size_threshold) * 2**30\n        msg = (\n            'Cannot get disk usage info from closed indices. '\n            'Omitting any closed indices.'\n        )\n        self.loggit.debug(msg)\n        # This filter requires index state (open/close) and index stats\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        # Create a copy-by-value working list\n        working_list = self.working_list()\n        for index in working_list:\n            if size_behavior == 'primary':\n                index_size = self.index_info[index]['primary_size_in_bytes']\n            else:\n                index_size = self.index_info[index]['size_in_bytes']\n            msg = (\n                f'{index}, index size is {byte_size(index_size)} and '\n                f'size limit is {byte_size(index_size_limit)}.'\n            )\n            if threshold_behavior == 'greater_than':\n                self.__excludify((index_size > index_size_limit), exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify((index_size < index_size_limit), exclude, index, msg)\n",
    "curator/exceptions.py": "\"\"\"Curator Exceptions\"\"\"\nclass CuratorException(Exception):\n    \"\"\"\n    Base class for all exceptions raised by Curator which are not Elasticsearch\n    exceptions.\n    \"\"\"\n\nclass ConfigurationError(CuratorException):\n    \"\"\"\n    Exception raised when a misconfiguration is detected\n    \"\"\"\n\nclass MissingArgument(CuratorException):\n    \"\"\"\n    Exception raised when a needed argument is not passed.\n    \"\"\"\n\nclass NoIndices(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty index_list\n    \"\"\"\n\nclass NoSnapshots(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty snapshot_list\n    \"\"\"\n\nclass ActionError(CuratorException):\n    \"\"\"\n    Exception raised when an action (against an index_list or snapshot_list) cannot be taken.\n    \"\"\"\n\nclass FailedExecution(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to execute for some reason.\n    \"\"\"\n\nclass SnapshotInProgress(ActionError):\n    \"\"\"\n    Exception raised when a snapshot is already in progress\n    \"\"\"\n\nclass ActionTimeout(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to complete in the allotted time\n    \"\"\"\n\nclass FailedSnapshot(CuratorException):\n    \"\"\"\n    Exception raised when a snapshot does not complete with state SUCCESS\n    \"\"\"\n\nclass FailedRestore(CuratorException):\n    \"\"\"\n    Exception raised when a Snapshot Restore does not restore all selected indices\n    \"\"\"\n\nclass FailedReindex(CuratorException):\n    \"\"\"\n    Exception raised when failures are found in the reindex task response\n    \"\"\"\n\nclass ClientException(CuratorException):\n    \"\"\"\n    Exception raised when the Elasticsearch client and/or connection is the source of the problem.\n    \"\"\"\n\nclass LoggingException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot either log or configure logging\n    \"\"\"\n\nclass RepositoryException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot verify a snapshot repository\n    \"\"\"\n\nclass SearchableSnapshotException(CuratorException):\n    \"\"\"\n    Exception raised when Curator finds something out of order with a Searchable Snapshot\n    \"\"\"\n"
  },
  "GT_src_dict": {
    "curator/helpers/waiters.py": {
      "wait_for_it": {
        "code": "def wait_for_it(client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None, wait_interval=9, max_wait=-1):\n    \"\"\"This function manages the waiting process for various Elasticsearch actions until completion. It repeatedly checks the status of a specified action (such as snapshot creation, restoration, or health checks) and allows for a configurable wait time between checks and a maximum wait time.\n\nParameters:\n- client: A client connection object for Elasticsearch interactions.\n- action: A string specifying the action to wait for. Must be one of 'allocation', 'replicas', 'cluster_routing', 'snapshot', 'restore', 'reindex', 'shrink', or 'relocate'.\n- task_id: Optional; the ID of the task for actions that require it, such as 'reindex'.\n- snapshot: Optional; the name of the snapshot used for 'snapshot' action.\n- repository: Optional; the name of the Elasticsearch snapshot repository used for 'snapshot' action.\n- wait_interval: An integer specifying the seconds to wait between status checks (default is 9).\n- max_wait: An integer specifying the maximum wait time in seconds for the action to complete (default is -1 for infinite).\n\nReturns:\n- None; raises ActionTimeout if the action does not complete within the max_wait period.\n\nDependencies: The function uses helper functions like health_check, snapshot_check, restore_check, task_check, and relocate_check to determine the status of the actions being waited on. Custom exceptions like ConfigurationError and ActionTimeout are used for error handling.\"\"\"\n    '\\n    This function becomes one place to do all ``wait_for_completion`` type behaviors\\n\\n    :param client: A client connection object\\n    :param action: The action name that will identify how to wait\\n    :param task_id: If the action provided a task_id, this is where it must be declared.\\n    :param snapshot: The name of the snapshot.\\n    :param repository: The Elasticsearch snapshot repository to use\\n    :param wait_interval: Seconds to wait between completion checks.\\n    :param max_wait: Maximum number of seconds to ``wait_for_completion``\\n\\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\\n    :type action: str\\n    :type task_id: str\\n    :type snapshot: str\\n    :type repository: str\\n    :type wait_interval: int\\n    :type max_wait: int\\n    :rtype: None\\n    '\n    logger = logging.getLogger(__name__)\n    action_map = {'allocation': {'function': health_check, 'args': {'relocating_shards': 0}}, 'replicas': {'function': health_check, 'args': {'status': 'green'}}, 'cluster_routing': {'function': health_check, 'args': {'relocating_shards': 0}}, 'snapshot': {'function': snapshot_check, 'args': {'snapshot': snapshot, 'repository': repository}}, 'restore': {'function': restore_check, 'args': {'index_list': index_list}}, 'reindex': {'function': task_check, 'args': {'task_id': task_id}}, 'shrink': {'function': health_check, 'args': {'status': 'green'}}, 'relocate': {'function': relocate_check, 'args': {'index': index}}}\n    wait_actions = list(action_map.keys())\n    if action not in wait_actions:\n        raise ConfigurationError(f'\"action\" must be one of {wait_actions}')\n    if action == 'reindex' and task_id is None:\n        raise MissingArgument(f'A task_id must accompany \"action\" {action}')\n    if action == 'snapshot' and (snapshot is None or repository is None):\n        raise MissingArgument(f'A snapshot and repository must accompany \"action\" {action}. snapshot: {snapshot}, repository: {repository}')\n    if action == 'restore' and index_list is None:\n        raise MissingArgument(f'An index_list must accompany \"action\" {action}')\n    if action == 'reindex':\n        try:\n            _ = client.tasks.get(task_id=task_id)\n        except Exception as err:\n            raise CuratorException(f'Unable to find task_id {task_id}. Exception: {err}') from err\n    start_time = datetime.now()\n    result = False\n    while True:\n        elapsed = int((datetime.now() - start_time).total_seconds())\n        logger.debug('Elapsed time: %s seconds', elapsed)\n        response = action_map[action]['function'](client, **action_map[action]['args'])\n        logger.debug('Response: %s', response)\n        if response:\n            logger.debug('Action \"%s\" finished executing (may or may not have been successful)', action)\n            result = True\n            break\n        if max_wait != -1 and elapsed >= max_wait:\n            msg = f'Unable to complete action \"{action}\" within max_wait ({max_wait}) seconds.'\n            logger.error(msg)\n            break\n        msg = f'Action \"{action}\" not yet complete, {elapsed} total seconds elapsed. Waiting {wait_interval} seconds before checking again.'\n        logger.debug(msg)\n        sleep(wait_interval)\n    logger.debug('Result: %s', result)\n    if not result:\n        raise ActionTimeout(f'Action \"{action}\" failed to complete in the max_wait period of {max_wait} seconds')",
        "docstring": "This function manages the waiting process for various Elasticsearch actions until completion. It repeatedly checks the status of a specified action (such as snapshot creation, restoration, or health checks) and allows for a configurable wait time between checks and a maximum wait time.\n\nParameters:\n- client: A client connection object for Elasticsearch interactions.\n- action: A string specifying the action to wait for. Must be one of 'allocation', 'replicas', 'cluster_routing', 'snapshot', 'restore', 'reindex', 'shrink', or 'relocate'.\n- task_id: Optional; the ID of the task for actions that require it, such as 'reindex'.\n- snapshot: Optional; the name of the snapshot used for 'snapshot' action.\n- repository: Optional; the name of the Elasticsearch snapshot repository used for 'snapshot' action.\n- wait_interval: An integer specifying the seconds to wait between status checks (default is 9).\n- max_wait: An integer specifying the maximum wait time in seconds for the action to complete (default is -1 for infinite).\n\nReturns:\n- None; raises ActionTimeout if the action does not complete within the max_wait period.\n\nDependencies: The function uses helper functions like health_check, snapshot_check, restore_check, task_check, and relocate_check to determine the status of the actions being waited on. Custom exceptions like ConfigurationError and ActionTimeout are used for error handling.",
        "signature": "def wait_for_it(client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None, wait_interval=9, max_wait=-1):",
        "type": "Function",
        "class_signature": null
      }
    },
    "curator/helpers/utils.py": {
      "chunk_index_list": {
        "code": "def chunk_index_list(indices):\n    \"\"\"Chunk a list of index names into smaller pieces to avoid exceeding a 3KB limit for CSV strings. The function takes a list of indices and breaks it down into multiple sublists, each representing a chunk that does not exceed 3072 characters in total when serialized as a CSV string.\n\n:param indices: A list of indices to be chunked.\n:type indices: list\n\n:returns: A list containing sublists of indices, where each sublist is a piece of the original indices, ensuring none exceeds the character limit.\n:rtype: list\n\nThis function is dependent on the CSV representation of the indices, as it concatenates index names with commas to form CSV strings and checks their length against a 3072 character limit.\"\"\"\n    '\\n    This utility chunks very large index lists into 3KB chunks.\\n    It measures the size as a csv string, then converts back into a list for the return value.\\n\\n    :param indices: The list of indices\\n\\n    :type indices: list\\n\\n    :returns: A list of lists (each a piece of the original ``indices``)\\n    :rtype: list\\n    '\n    chunks = []\n    chunk = ''\n    for index in indices:\n        if len(chunk) < 3072:\n            if not chunk:\n                chunk = index\n            else:\n                chunk += ',' + index\n        else:\n            chunks.append(chunk.split(','))\n            chunk = index\n    chunks.append(chunk.split(','))\n    return chunks",
        "docstring": "Chunk a list of index names into smaller pieces to avoid exceeding a 3KB limit for CSV strings. The function takes a list of indices and breaks it down into multiple sublists, each representing a chunk that does not exceed 3072 characters in total when serialized as a CSV string.\n\n:param indices: A list of indices to be chunked.\n:type indices: list\n\n:returns: A list containing sublists of indices, where each sublist is a piece of the original indices, ensuring none exceeds the character limit.\n:rtype: list\n\nThis function is dependent on the CSV representation of the indices, as it concatenates index names with commas to form CSV strings and checks their length against a 3072 character limit.",
        "signature": "def chunk_index_list(indices):",
        "type": "Function",
        "class_signature": null
      },
      "report_failure": {
        "code": "def report_failure(exception):\n    \"\"\"Raises a `FailedExecution` exception when an error occurs, providing an appropriate message for debugging purposes. \n\n:param exception: The original exception that triggered the failure.\n:type exception: :py:exc:Exception\n\n:raises: :py:exc:`curator.exceptions.FailedExecution` with a message indicating the nature of the failure and a suggestion to check logs for more details. \n\nThis function interacts with the `FailedExecution` exception class from the `curator.exceptions` module, which is designed to handle execution failures in a structured manner. The raised exception contains the original error message for easier troubleshooting.\"\"\"\n    '\\n    Raise a :py:exc:`~.curator.exceptions.FailedExecution` exception and include the original error\\n    message.\\n\\n    :param exception: The upstream exception.\\n\\n    :type exception: :py:exc:Exception\\n\\n    :rtype: None\\n    '\n    raise FailedExecution(f'Exception encountered.  Rerun with loglevel DEBUG and/or check Elasticsearch logs formore information. Exception: {exception}')",
        "docstring": "Raises a `FailedExecution` exception when an error occurs, providing an appropriate message for debugging purposes. \n\n:param exception: The original exception that triggered the failure.\n:type exception: :py:exc:Exception\n\n:raises: :py:exc:`curator.exceptions.FailedExecution` with a message indicating the nature of the failure and a suggestion to check logs for more details. \n\nThis function interacts with the `FailedExecution` exception class from the `curator.exceptions` module, which is designed to handle execution failures in a structured manner. The raised exception contains the original error message for easier troubleshooting.",
        "signature": "def report_failure(exception):",
        "type": "Function",
        "class_signature": null
      },
      "show_dry_run": {
        "code": "def show_dry_run(ilo, action, **kwargs):\n    \"\"\"Logs the actions that would be performed in a dry run mode without making any changes to the system. It outputs the state of each index in the provided IndexList object and provides information on the action to be taken.\n\n:param ilo: An instance of the IndexList class, containing indices to be acted upon.\n:type ilo: :py:class:`~.curator.indexlist.IndexList`\n:param action: A string representing the action that would be executed.\n:type action: str\n:param kwargs: Additional keyword arguments for logging details.\n:type kwargs: dict\n\n:returns: None\n\n:raises KeyError: If an index state is not present in the IndexList, the function attempts to fetch the current states.\n\nThe function uses `logging` to output messages to the log, indicating the dry run status and the state of each index (e.g., whether it is closed). The variable `index_closed` determines if the index's state is 'close', and this information is included in the log messages.\"\"\"\n    '\\n    Log dry run output with the action which would have been executed.\\n\\n    :param ilo: An IndexList Object\\n    :param action: The ``action`` to be performed.\\n    :param kwargs: Any other args to show in the log output\\n\\n\\n    :type ilo: :py:class:`~.curator.indexlist.IndexList`\\n    :type action: str\\n    :type kwargs: dict\\n\\n    :rtype: None\\n    '\n    logger = logging.getLogger(__name__)\n    logger.info('DRY-RUN MODE.  No changes will be made.')\n    msg = f'(CLOSED) indices may be shown that may not be acted on by action \"{action}\".'\n    logger.info(msg)\n    indices = sorted(ilo.indices)\n    for idx in indices:\n        try:\n            index_closed = ilo.index_info[idx]['state'] == 'close'\n        except KeyError:\n            ilo.get_index_state()\n            index_closed = ilo.index_info[idx]['state'] == 'close'\n        var = ' (CLOSED)' if index_closed else ''\n        msg = f'DRY-RUN: {action}: {idx}{var} with arguments: {kwargs}'\n        logger.info(msg)",
        "docstring": "Logs the actions that would be performed in a dry run mode without making any changes to the system. It outputs the state of each index in the provided IndexList object and provides information on the action to be taken.\n\n:param ilo: An instance of the IndexList class, containing indices to be acted upon.\n:type ilo: :py:class:`~.curator.indexlist.IndexList`\n:param action: A string representing the action that would be executed.\n:type action: str\n:param kwargs: Additional keyword arguments for logging details.\n:type kwargs: dict\n\n:returns: None\n\n:raises KeyError: If an index state is not present in the IndexList, the function attempts to fetch the current states.\n\nThe function uses `logging` to output messages to the log, indicating the dry run status and the state of each index (e.g., whether it is closed). The variable `index_closed` determines if the index's state is 'close', and this information is included in the log messages.",
        "signature": "def show_dry_run(ilo, action, **kwargs):",
        "type": "Function",
        "class_signature": null
      },
      "to_csv": {
        "code": "def to_csv(indices):\n    \"\"\"Converts a list of indices or a single value into a comma-separated values (CSV) string format.\n\n:param indices: A list of indices to act on or a single index value, which can be in CSV string format.\n:type indices: list\n\n:returns: A CSV string of sorted indices if multiple values are provided, or the single value as a string if only one value is present. Returns None if no indices are present.\n:rtype: str\n\nThis function utilizes the `ensure_list` utility from `es_client.helpers.utils` to ensure that the input is treated as a list, even if a single value is passed. If the input is valid, it joins the sorted indices into a CSV string for easy handling in further operations.\"\"\"\n    '\\n    :param indices: A list of indices to act on, or a single value, which could be\\n        in the format of a csv string already.\\n\\n    :type indices: list\\n\\n    :returns: A csv string from a list of indices, or a single value if only one value is present\\n    :rtype: str\\n    '\n    indices = ensure_list(indices)\n    if indices:\n        return ','.join(sorted(indices))\n    return None",
        "docstring": "Converts a list of indices or a single value into a comma-separated values (CSV) string format.\n\n:param indices: A list of indices to act on or a single index value, which can be in CSV string format.\n:type indices: list\n\n:returns: A CSV string of sorted indices if multiple values are provided, or the single value as a string if only one value is present. Returns None if no indices are present.\n:rtype: str\n\nThis function utilizes the `ensure_list` utility from `es_client.helpers.utils` to ensure that the input is treated as a list, even if a single value is passed. If the input is valid, it joins the sorted indices into a CSV string for easy handling in further operations.",
        "signature": "def to_csv(indices):",
        "type": "Function",
        "class_signature": null
      }
    },
    "curator/actions/replicas.py": {
      "Replicas.__init__": {
        "code": "    def __init__(self, ilo, count=None, wait_for_completion=False, wait_interval=9, max_wait=-1):\n        \"\"\"Initialize the Replicas action class, which manages updating the number of replicas for specified indices in an Elasticsearch cluster.\n\nParameters:\n- ilo (:py:class:`~.curator.indexlist.IndexList`): An object containing a list of indices to update.\n- count (int, optional): The desired number of replica shards per index. If not provided, an exception is raised unless zero.\n- wait_for_completion (bool, optional): If True, wait for the replica updates to complete before returning.\n- wait_interval (int, optional): The number of seconds to wait between completion checks when waiting for replication (default is 9 seconds).\n- max_wait (int, optional): The maximum time in seconds to wait for completion (default is -1, meaning indefinitely).\n\nRaises:\n- MissingArgument: If the count parameter is not specified and is not zero.\n\nAttributes:\n- index_list: Stores the IndexList object passed in and used for managing indices.\n- client: The Elasticsearch client derived from the IndexList object for interacting with the Elasticsearch API.\n- count: Holds the number of replicas specified during initialization.\n- wfc: Indicates whether to wait for completion after adjusting replicas.\n- wait_interval: Stores the interval between checks when waiting for completion.\n- max_wait: Defines the maximum time allowed for waiting for completion.\n- loggit: A logger instance for logging information and debug messages specific to replica actions.\n\nThis class interacts with defined helper functions such as `verify_index_list` to validate the input index list and `logging` for logging actions and information throughout the class methods.\"\"\"\n        '\\n        :param ilo: An IndexList Object\\n        :param count: The count of replicas per shard\\n        :param wait_for_completion: Wait for completion before returning.\\n        :param wait_interval: Seconds to wait between completion checks.\\n        :param max_wait: Maximum number of seconds to ``wait_for_completion``\\n\\n        :type ilo: :py:class:`~.curator.indexlist.IndexList`\\n        :type count: int\\n        :type wait_for_completion: bool\\n        :type wait_interval: int\\n        :type max_wait: int\\n        '\n        verify_index_list(ilo)\n        if count == 0:\n            pass\n        elif not count:\n            raise MissingArgument('Missing value for \"count\"')\n        self.index_list = ilo\n        self.client = ilo.client\n        self.count = count\n        self.wfc = wait_for_completion\n        self.wait_interval = wait_interval\n        self.max_wait = max_wait\n        self.loggit = logging.getLogger('curator.actions.replicas')",
        "docstring": "Initialize the Replicas action class, which manages updating the number of replicas for specified indices in an Elasticsearch cluster.\n\nParameters:\n- ilo (:py:class:`~.curator.indexlist.IndexList`): An object containing a list of indices to update.\n- count (int, optional): The desired number of replica shards per index. If not provided, an exception is raised unless zero.\n- wait_for_completion (bool, optional): If True, wait for the replica updates to complete before returning.\n- wait_interval (int, optional): The number of seconds to wait between completion checks when waiting for replication (default is 9 seconds).\n- max_wait (int, optional): The maximum time in seconds to wait for completion (default is -1, meaning indefinitely).\n\nRaises:\n- MissingArgument: If the count parameter is not specified and is not zero.\n\nAttributes:\n- index_list: Stores the IndexList object passed in and used for managing indices.\n- client: The Elasticsearch client derived from the IndexList object for interacting with the Elasticsearch API.\n- count: Holds the number of replicas specified during initialization.\n- wfc: Indicates whether to wait for completion after adjusting replicas.\n- wait_interval: Stores the interval between checks when waiting for completion.\n- max_wait: Defines the maximum time allowed for waiting for completion.\n- loggit: A logger instance for logging information and debug messages specific to replica actions.\n\nThis class interacts with defined helper functions such as `verify_index_list` to validate the input index list and `logging` for logging actions and information throughout the class methods.",
        "signature": "def __init__(self, ilo, count=None, wait_for_completion=False, wait_interval=9, max_wait=-1):",
        "type": "Method",
        "class_signature": "class Replicas:"
      },
      "Replicas.do_dry_run": {
        "code": "    def do_dry_run(self):\n        \"\"\"Logs what the output would be if the action were to be executed, but does not make any changes to the indices. This method utilizes the `show_dry_run` helper function to display the intended replica count adjustment for the indices contained within the `index_list` attribute of the `Replicas` class. The method relies on the `count` attribute to indicate how many replicas are intended to be set. No parameters are passed to this method, and it does not return any values.\"\"\"\n        'Log what the output would be, but take no action.'\n        show_dry_run(self.index_list, 'replicas', count=self.count)",
        "docstring": "Logs what the output would be if the action were to be executed, but does not make any changes to the indices. This method utilizes the `show_dry_run` helper function to display the intended replica count adjustment for the indices contained within the `index_list` attribute of the `Replicas` class. The method relies on the `count` attribute to indicate how many replicas are intended to be set. No parameters are passed to this method, and it does not return any values.",
        "signature": "def do_dry_run(self):",
        "type": "Method",
        "class_signature": "class Replicas:"
      },
      "Replicas.do_action": {
        "code": "    def do_action(self):\n        \"\"\"Update the number of replicas for the indices in the `index_list`.\n\nThis method interacts with the Elasticsearch client to set the `number_of_replicas` setting for each index specified in `index_list`. It omits any closed indices and checks for an empty index list before proceeding. If `wait_for_completion` is enabled and the replica count is greater than zero, it waits for the shard replication to complete. Logs are generated throughout for tracking the operation.\n\nParameters:\n- `self.count`: The desired number of replicas per shard.\n- `self.index_list`: An `IndexList` object containing the indices to update.\n- `self.wfc`: A boolean indicating whether to wait for the replication settings to take effect.\n- `self.wait_interval`: The interval in seconds for checking the replication status.\n- `self.max_wait`: The maximum time to wait for replication completion.\n\nReturns:\nNone.\n\nSide Effects:\n- Modifies the settings of the specified indices in Elasticsearch.\n- Logs information and debug messages regarding the operation and any failures encountered.\n\nDependencies:\n- Uses `chunk_index_list` to segment the index list into manageable parts for processing.\n- Uses `to_csv` to convert index lists to a format suitable for the Elasticsearch API.\n- Uses `wait_for_it` to handle the waiting mechanism if `wait_for_completion` is set.\n- Logs actions using the `loggit` logger defined in the constructor.\"\"\"\n        '\\n        Update ``number_of_replicas`` with :py:attr:`count` and\\n        :py:meth:`~.elasticsearch.client.IndicesClient.put_settings` to indices in\\n        :py:attr:`index_list`\\n        '\n        self.loggit.debug('Cannot get update replica count of closed indices. Omitting any closed indices.')\n        self.index_list.filter_closed()\n        self.index_list.empty_list_check()\n        msg = f'Setting the replica count to {self.count} for {len(self.index_list.indices)} indices: {self.index_list.indices}'\n        self.loggit.info(msg)\n        try:\n            index_lists = chunk_index_list(self.index_list.indices)\n            for lst in index_lists:\n                self.client.indices.put_settings(index=to_csv(lst), settings={'number_of_replicas': self.count})\n                if self.wfc and self.count > 0:\n                    msg = f'Waiting for shards to complete replication for indices: {to_csv(lst)}'\n                    self.loggit.debug(msg)\n                    wait_for_it(self.client, 'replicas', wait_interval=self.wait_interval, max_wait=self.max_wait)\n        except Exception as err:\n            report_failure(err)",
        "docstring": "Update the number of replicas for the indices in the `index_list`.\n\nThis method interacts with the Elasticsearch client to set the `number_of_replicas` setting for each index specified in `index_list`. It omits any closed indices and checks for an empty index list before proceeding. If `wait_for_completion` is enabled and the replica count is greater than zero, it waits for the shard replication to complete. Logs are generated throughout for tracking the operation.\n\nParameters:\n- `self.count`: The desired number of replicas per shard.\n- `self.index_list`: An `IndexList` object containing the indices to update.\n- `self.wfc`: A boolean indicating whether to wait for the replication settings to take effect.\n- `self.wait_interval`: The interval in seconds for checking the replication status.\n- `self.max_wait`: The maximum time to wait for replication completion.\n\nReturns:\nNone.\n\nSide Effects:\n- Modifies the settings of the specified indices in Elasticsearch.\n- Logs information and debug messages regarding the operation and any failures encountered.\n\nDependencies:\n- Uses `chunk_index_list` to segment the index list into manageable parts for processing.\n- Uses `to_csv` to convert index lists to a format suitable for the Elasticsearch API.\n- Uses `wait_for_it` to handle the waiting mechanism if `wait_for_completion` is set.\n- Logs actions using the `loggit` logger defined in the constructor.",
        "signature": "def do_action(self):",
        "type": "Method",
        "class_signature": "class Replicas:"
      }
    },
    "curator/helpers/testers.py": {
      "verify_client_object": {
        "code": "def verify_client_object(test):\n    \"\"\"Verify the validity of the given Elasticsearch client object.\n\n:param test: The variable or object to test as a valid Elasticsearch client.\n:type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n:returns: ``True`` if ``test`` is a valid Elasticsearch client object; raises a :py:exc:`TypeError` if it is not.\n:rtype: bool\n\nThis function uses the logging module to log errors and provide debug information. It ignores mock objects (from testing) by checking the type of `test`. If `test` is not an instance of the `Elasticsearch` class from the `elasticsearch8` module, it raises a `TypeError` with an error message indicating the invalid type passed.\"\"\"\n    '\\n    :param test: The variable or object to test\\n\\n    :type test: :py:class:`~.elasticsearch.Elasticsearch`\\n\\n    :returns: ``True`` if ``test`` is a proper :py:class:`~.elasticsearch.Elasticsearch`\\n        client object and raise a :py:exc:`TypeError` exception if it is not.\\n    :rtype: bool\\n    '\n    logger = logging.getLogger(__name__)\n    if str(type(test)) == \"<class 'unittest.mock.Mock'>\":\n        pass\n    elif not isinstance(test, Elasticsearch):\n        msg = f'Not a valid client object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)",
        "docstring": "Verify the validity of the given Elasticsearch client object.\n\n:param test: The variable or object to test as a valid Elasticsearch client.\n:type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n:returns: ``True`` if ``test`` is a valid Elasticsearch client object; raises a :py:exc:`TypeError` if it is not.\n:rtype: bool\n\nThis function uses the logging module to log errors and provide debug information. It ignores mock objects (from testing) by checking the type of `test`. If `test` is not an instance of the `Elasticsearch` class from the `elasticsearch8` module, it raises a `TypeError` with an error message indicating the invalid type passed.",
        "signature": "def verify_client_object(test):",
        "type": "Function",
        "class_signature": null
      },
      "verify_index_list": {
        "code": "def verify_index_list(test):\n    \"\"\"Verify that the given object is a valid `IndexList` instance from the `curator.indexlist` module.\n\n:param test: The variable or object to test.\n:type test: :py:class:`~.curator.IndexList`\n\n:raises TypeError: If `test` is not a valid `IndexList` object. An error message is logged detailing the type of the passed object.\n\nThis function imports the `IndexList` class from the `curator.indexlist` module locally to avoid circular import issues. It uses the `logging` module to log errors when the type check fails.\"\"\"\n    '\\n    :param test: The variable or object to test\\n\\n    :type test: :py:class:`~.curator.IndexList`\\n\\n    :returns: ``None`` if ``test`` is a proper :py:class:`~.curator.indexlist.IndexList`\\n        object, else raise a :py:class:`TypeError` exception.\\n    :rtype: None\\n    '\n    from curator.indexlist import IndexList\n    logger = logging.getLogger(__name__)\n    if not isinstance(test, IndexList):\n        msg = f'Not a valid IndexList object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)",
        "docstring": "Verify that the given object is a valid `IndexList` instance from the `curator.indexlist` module.\n\n:param test: The variable or object to test.\n:type test: :py:class:`~.curator.IndexList`\n\n:raises TypeError: If `test` is not a valid `IndexList` object. An error message is logged detailing the type of the passed object.\n\nThis function imports the `IndexList` class from the `curator.indexlist` module locally to avoid circular import issues. It uses the `logging` module to log errors when the type check fails.",
        "signature": "def verify_index_list(test):",
        "type": "Function",
        "class_signature": null
      }
    },
    "curator/indexlist.py": {
      "IndexList.__init__": {
        "code": "    def __init__(self, client, search_pattern='_all'):\n        \"\"\"Initializes an IndexList instance to manage and filter indices in an Elasticsearch cluster.\n\n    Parameters:\n    client (Elasticsearch): An instance of the Elasticsearch client used for interacting with the cluster.\n    search_pattern (str): A pattern used to filter indices at initialization. Defaults to '_all', which retrieves all indices.\n\n    Attributes:\n    loggit (Logger): A logger for recording debug and warning messages related to index operations.\n    index_info (dict): A dictionary that stores metadata about indices, populated by private methods during initialization.\n    indices (list): A list of indices that are considered for actions, populated based on the search pattern.\n    all_indices (list): A complete list of all indices available in the cluster at the time of instantiation.\n    age_keyfield (str): A placeholder for the key that holds the age information of indices.\n\n    Dependencies:\n    - The method invokes `verify_client_object(client)` to ensure that the provided client is valid.\n    - It relies on the `get_indices()` function from `curator.helpers.getters` to retrieve indices based on the search pattern.\"\"\"\n        verify_client_object(client)\n        self.loggit = logging.getLogger('curator.indexlist')\n        self.client = client\n        self.index_info = {}\n        self.indices = []\n        self.all_indices = []\n        self.__get_indices(search_pattern)\n        self.age_keyfield = None",
        "docstring": "Initializes an IndexList instance to manage and filter indices in an Elasticsearch cluster.\n\nParameters:\nclient (Elasticsearch): An instance of the Elasticsearch client used for interacting with the cluster.\nsearch_pattern (str): A pattern used to filter indices at initialization. Defaults to '_all', which retrieves all indices.\n\nAttributes:\nloggit (Logger): A logger for recording debug and warning messages related to index operations.\nindex_info (dict): A dictionary that stores metadata about indices, populated by private methods during initialization.\nindices (list): A list of indices that are considered for actions, populated based on the search pattern.\nall_indices (list): A complete list of all indices available in the cluster at the time of instantiation.\nage_keyfield (str): A placeholder for the key that holds the age information of indices.\n\nDependencies:\n- The method invokes `verify_client_object(client)` to ensure that the provided client is valid.\n- It relies on the `get_indices()` function from `curator.helpers.getters` to retrieve indices based on the search pattern.",
        "signature": "def __init__(self, client, search_pattern='_all'):",
        "type": "Method",
        "class_signature": "class IndexList:"
      },
      "IndexList.__get_indices": {
        "code": "    def __get_indices(self, pattern):\n        \"\"\"Pulls all indices from the Elasticsearch cluster that match a specified search pattern, storing the results in the `all_indices` attribute and populating the `indices` attribute of the `IndexList` class. \n\nParameters:\n- `pattern` (str): A search pattern used to filter the indices retrieved from the Elasticsearch client. Defaults to '_all', which retrieves all indices if no specific pattern is provided.\n\nThis method logs a debug message indicating the search pattern used. It relies on the `get_indices` function (imported from `curator.helpers.getters`), which interacts with the Elasticsearch client to fetch the indices. The indices obtained are copied into the `indices` attribute for further operations within the class, while `all_indices` serves as a comprehensive list of all indices obtained at the time of the method's execution.\"\"\"\n        '\\n        Pull all indices into ``all_indices``, then populate ``indices`` and\\n        ``index_info``\\n        '\n        self.loggit.debug('Getting indices matching search_pattern: \"%s\"', pattern)\n        self.all_indices = get_indices(self.client, search_pattern=pattern)\n        self.indices = self.all_indices[:]",
        "docstring": "Pulls all indices from the Elasticsearch cluster that match a specified search pattern, storing the results in the `all_indices` attribute and populating the `indices` attribute of the `IndexList` class. \n\nParameters:\n- `pattern` (str): A search pattern used to filter the indices retrieved from the Elasticsearch client. Defaults to '_all', which retrieves all indices if no specific pattern is provided.\n\nThis method logs a debug message indicating the search pattern used. It relies on the `get_indices` function (imported from `curator.helpers.getters`), which interacts with the Elasticsearch client to fetch the indices. The indices obtained are copied into the `indices` attribute for further operations within the class, while `all_indices` serves as a comprehensive list of all indices obtained at the time of the method's execution.",
        "signature": "def __get_indices(self, pattern):",
        "type": "Method",
        "class_signature": "class IndexList:"
      },
      "IndexList.empty_list_check": {
        "code": "    def empty_list_check(self):\n        \"\"\"Checks if the current `indices` list is empty and raises an exception if it is.\n\nThis method logs the action of checking for an empty list and raises a `NoIndices` exception if the `indices` attribute of the `IndexList` instance is empty. The `indices` list represents the collection of indices that the `IndexList` class operates on, and it is critical for the proper functioning of subsequent methods that rely on a non-empty list of indices.\n\nRaises:\n    NoIndices: If the `indices` list is empty, indicating that there are no indices to operate on.\"\"\"\n        'Raise :py:exc:`~.curator.exceptions.NoIndices` if ``indices`` is empty'\n        self.loggit.debug('Checking for empty list')\n        if not self.indices:\n            raise NoIndices('index_list object is empty.')",
        "docstring": "Checks if the current `indices` list is empty and raises an exception if it is.\n\nThis method logs the action of checking for an empty list and raises a `NoIndices` exception if the `indices` attribute of the `IndexList` instance is empty. The `indices` list represents the collection of indices that the `IndexList` class operates on, and it is critical for the proper functioning of subsequent methods that rely on a non-empty list of indices.\n\nRaises:\n    NoIndices: If the `indices` list is empty, indicating that there are no indices to operate on.",
        "signature": "def empty_list_check(self):",
        "type": "Method",
        "class_signature": "class IndexList:"
      },
      "IndexList.filter_closed": {
        "code": "    def filter_closed(self, exclude=True):\n        \"\"\"Filter out closed indices from the current list of indices.\n\nThis method evaluates the state of each index and removes those that are\nmarked as closed. The behavior of the filtering can be controlled by the\n`exclude` parameter.\n\nParameters:\n- exclude (bool): If True (default), matching closed indices will be removed\n  from the `indices` list. If False, only indices that are closed will be\n  retained in the `indices` list.\n\nThis method relies on the `get_index_state` method to populate the index\nstates, and on `empty_list_check` to ensure the `indices` list is not empty \nbefore proceeding. The index state and relevant information are stored in \nthe `index_info` attribute, which is a dictionary mapping index names to \ntheir metadata.\n\nSide Effects:\n- Modifies the `indices` attribute based on their closed status.\"\"\"\n        '\\n        Filter out closed indices from ``indices``\\n\\n        :param exclude: If ``exclude=True``, this filter will remove matching\\n            indices from ``indices``. If ``exclude=False``, then only matching\\n            indices will be kept in ``indices``. Default is ``True``\\n        '\n        self.loggit.debug('Filtering closed indices')\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'close'\n            self.loggit.debug('Index %s state: %s', index, self.index_info[index]['state'])\n            self.__excludify(condition, exclude, index)",
        "docstring": "Filter out closed indices from the current list of indices.\n\nThis method evaluates the state of each index and removes those that are\nmarked as closed. The behavior of the filtering can be controlled by the\n`exclude` parameter.\n\nParameters:\n- exclude (bool): If True (default), matching closed indices will be removed\n  from the `indices` list. If False, only indices that are closed will be\n  retained in the `indices` list.\n\nThis method relies on the `get_index_state` method to populate the index\nstates, and on `empty_list_check` to ensure the `indices` list is not empty \nbefore proceeding. The index state and relevant information are stored in \nthe `index_info` attribute, which is a dictionary mapping index names to \ntheir metadata.\n\nSide Effects:\n- Modifies the `indices` attribute based on their closed status.",
        "signature": "def filter_closed(self, exclude=True):",
        "type": "Method",
        "class_signature": "class IndexList:"
      }
    },
    "curator/exceptions.py": {}
  },
  "dependency_dict": {},
  "call_tree": {
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_do_action": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {
          "curator/indexlist.py:IndexList:IndexList": {}
        }
      },
      "curator/actions/replicas.py:Replicas:do_action": {
        "curator/indexlist.py:IndexList:filter_closed": {
          "curator/indexlist.py:IndexList:get_index_state": {
            "curator/indexlist.py:IndexList:empty_list_check": {},
            "curator/helpers/utils.py:chunk_index_list": {},
            "curator/indexlist.py:IndexList:needs_data": {
              "curator/indexlist.py:IndexList:indices_exist": {
                "curator/indexlist.py:IndexList:alias_index_check": {},
                "curator/indexlist.py:IndexList:_get_indices_settings": {
                  "curator/helpers/utils.py:to_csv": {}
                }
              },
              "curator/indexlist.py:IndexList:population_check": {
                "curator/indexlist.py:IndexList:__build_index_info": {
                  "curator/indexlist.py:IndexList:__zero_values": {}
                },
                "curator/indexlist.py:IndexList:__zero_values": {}
              }
            },
            "curator/helpers/utils.py:to_csv": {}
          },
          "curator/indexlist.py:IndexList:empty_list_check": {},
          "curator/indexlist.py:IndexList:working_list": {},
          "curator/indexlist.py:IndexList:__excludify": {
            "curator/indexlist.py:IndexList:__actionable": {}
          }
        },
        "curator/indexlist.py:IndexList:empty_list_check": {},
        "curator/helpers/utils.py:chunk_index_list": {},
        "curator/helpers/utils.py:to_csv": {}
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_do_action_raises_exception": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/replicas.py:Replicas:do_action": {
        "curator/indexlist.py:IndexList:filter_closed": {
          "curator/indexlist.py:IndexList:get_index_state": {
            "curator/indexlist.py:IndexList:empty_list_check": {},
            "curator/helpers/utils.py:chunk_index_list": {},
            "curator/indexlist.py:IndexList:needs_data": {
              "curator/indexlist.py:IndexList:indices_exist": {
                "curator/indexlist.py:IndexList:alias_index_check": {},
                "curator/indexlist.py:IndexList:_get_indices_settings": {
                  "curator/helpers/utils.py:to_csv": {}
                }
              },
              "curator/indexlist.py:IndexList:population_check": {
                "curator/indexlist.py:IndexList:__build_index_info": {
                  "curator/indexlist.py:IndexList:__zero_values": {}
                },
                "curator/indexlist.py:IndexList:__zero_values": {}
              }
            },
            "curator/helpers/utils.py:to_csv": {}
          },
          "curator/indexlist.py:IndexList:empty_list_check": {},
          "curator/indexlist.py:IndexList:working_list": {},
          "curator/indexlist.py:IndexList:__excludify": {
            "curator/indexlist.py:IndexList:__actionable": {}
          }
        },
        "curator/indexlist.py:IndexList:empty_list_check": {},
        "curator/helpers/utils.py:chunk_index_list": {},
        "curator/helpers/utils.py:to_csv": {},
        "curator/helpers/utils.py:report_failure": {}
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_do_action_wait": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/replicas.py:Replicas:do_action": {
        "curator/indexlist.py:IndexList:filter_closed": {
          "curator/indexlist.py:IndexList:get_index_state": {
            "curator/indexlist.py:IndexList:empty_list_check": {},
            "curator/helpers/utils.py:chunk_index_list": {},
            "curator/indexlist.py:IndexList:needs_data": {
              "curator/indexlist.py:IndexList:indices_exist": {
                "curator/indexlist.py:IndexList:alias_index_check": {},
                "curator/indexlist.py:IndexList:_get_indices_settings": {
                  "curator/helpers/utils.py:to_csv": {}
                }
              },
              "curator/indexlist.py:IndexList:population_check": {
                "curator/indexlist.py:IndexList:__build_index_info": {
                  "curator/indexlist.py:IndexList:__zero_values": {}
                },
                "curator/indexlist.py:IndexList:__zero_values": {}
              }
            },
            "curator/helpers/utils.py:to_csv": {}
          },
          "curator/indexlist.py:IndexList:empty_list_check": {},
          "curator/indexlist.py:IndexList:working_list": {},
          "curator/indexlist.py:IndexList:__excludify": {
            "curator/indexlist.py:IndexList:__actionable": {}
          }
        },
        "curator/indexlist.py:IndexList:empty_list_check": {},
        "curator/helpers/utils.py:chunk_index_list": {},
        "curator/helpers/utils.py:to_csv": {},
        "curator/helpers/waiters.py:wait_for_it": {
          "curator/helpers/waiters.py:health_check": {}
        }
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_do_dry_run": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      },
      "curator/actions/replicas.py:Replicas:do_dry_run": {
        "curator/helpers/utils.py:show_dry_run": {
          "curator/indexlist.py:IndexList:get_index_state": {
            "curator/indexlist.py:IndexList:empty_list_check": {},
            "curator/helpers/utils.py:chunk_index_list": {},
            "curator/indexlist.py:IndexList:needs_data": {
              "curator/indexlist.py:IndexList:indices_exist": {
                "curator/indexlist.py:IndexList:alias_index_check": {},
                "curator/indexlist.py:IndexList:_get_indices_settings": {
                  "curator/helpers/utils.py:to_csv": {}
                }
              },
              "curator/indexlist.py:IndexList:population_check": {
                "curator/indexlist.py:IndexList:__build_index_info": {
                  "curator/indexlist.py:IndexList:__zero_values": {}
                },
                "curator/indexlist.py:IndexList:__zero_values": {}
              }
            },
            "curator/helpers/utils.py:to_csv": {}
          }
        }
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_init": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_init_raise_bad_client": {
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "tests/unit/test_action_replicas.py:TestActionReplicas:test_init_raise_no_count": {
      "tests/unit/test_action_replicas.py:TestActionReplicas:builder": {
        "curator/indexlist.py:IndexList:__init__": {
          "curator/helpers/testers.py:verify_client_object": {},
          "curator/indexlist.py:IndexList:__get_indices": {
            "curator/helpers/getters.py:get_indices": {}
          }
        }
      },
      "curator/actions/replicas.py:Replicas:__init__": {
        "curator/helpers/testers.py:verify_index_list": {}
      }
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_replicas/elasticsearch_curator-test_action_replicas/tests/integration/test_cli.py:TestCLIMethods:test_action_is_none": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_replicas/elasticsearch_curator-test_action_replicas/tests/integration/test_cli.py:TestCLIMethods:test_no_action": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    },
    "/mnt/sfs_turbo/yaxindu/tmp/elasticsearch_curator-image-test_action_replicas/elasticsearch_curator-test_action_replicas/tests/integration/test_integrations.py:TestFilters:test_filter_by_alias_bad_aliases": {
      "curator/exceptions.py:ConfigurationError:ConfigurationError": {}
    }
  },
  "PRD": "# PROJECT NAME: elasticsearch_curator-test_action_replicas\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 curator/\n    \u251c\u2500\u2500 actions/\n    \u2502   \u2514\u2500\u2500 replicas.py\n    \u2502       \u251c\u2500\u2500 Replicas.__init__\n    \u2502       \u251c\u2500\u2500 Replicas.do_action\n    \u2502       \u2514\u2500\u2500 Replicas.do_dry_run\n    \u251c\u2500\u2500 exceptions.py\n    \u2502   \u2514\u2500\u2500 ConfigurationError.ConfigurationError\n    \u251c\u2500\u2500 helpers/\n    \u2502   \u251c\u2500\u2500 testers.py\n    \u2502   \u2502   \u251c\u2500\u2500 verify_client_object\n    \u2502   \u2502   \u2514\u2500\u2500 verify_index_list\n    \u2502   \u251c\u2500\u2500 utils.py\n    \u2502   \u2502   \u251c\u2500\u2500 chunk_index_list\n    \u2502   \u2502   \u251c\u2500\u2500 report_failure\n    \u2502   \u2502   \u251c\u2500\u2500 show_dry_run\n    \u2502   \u2502   \u2514\u2500\u2500 to_csv\n    \u2502   \u2514\u2500\u2500 waiters.py\n    \u2502       \u2514\u2500\u2500 wait_for_it\n    \u2514\u2500\u2500 indexlist.py\n        \u251c\u2500\u2500 IndexList.__get_indices\n        \u251c\u2500\u2500 IndexList.__init__\n        \u251c\u2500\u2500 IndexList.empty_list_check\n        \u2514\u2500\u2500 IndexList.filter_closed\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate, manage, and execute operations related to configuring the number of replica shards for Elasticsearch indices. It provides functionality to ensure proper initialization with required parameters, perform dry-run operations for validation, and update replica settings for specific indices with the ability to handle success, failure, or specific cluster health conditions. By abstracting and automating the process of adjusting replica counts, the module simplifies index management tasks, reduces the risk of misconfiguration, and ensures alignment with Elasticsearch's cluster health and performance standards. This enables users or developers to enhance index availability and scalability more efficiently within their Elasticsearch environments.\n\n## FILE 1: curator/helpers/waiters.py\n\n- FUNCTION NAME: wait_for_it\n  - SIGNATURE: def wait_for_it(client, action, task_id=None, snapshot=None, repository=None, index=None, index_list=None, wait_interval=9, max_wait=-1):\n  - DOCSTRING: \n```python\n\"\"\"\nThis function manages the waiting process for various Elasticsearch actions until completion. It repeatedly checks the status of a specified action (such as snapshot creation, restoration, or health checks) and allows for a configurable wait time between checks and a maximum wait time.\n\nParameters:\n- client: A client connection object for Elasticsearch interactions.\n- action: A string specifying the action to wait for. Must be one of 'allocation', 'replicas', 'cluster_routing', 'snapshot', 'restore', 'reindex', 'shrink', or 'relocate'.\n- task_id: Optional; the ID of the task for actions that require it, such as 'reindex'.\n- snapshot: Optional; the name of the snapshot used for 'snapshot' action.\n- repository: Optional; the name of the Elasticsearch snapshot repository used for 'snapshot' action.\n- wait_interval: An integer specifying the seconds to wait between status checks (default is 9).\n- max_wait: An integer specifying the maximum wait time in seconds for the action to complete (default is -1 for infinite).\n\nReturns:\n- None; raises ActionTimeout if the action does not complete within the max_wait period.\n\nDependencies: The function uses helper functions like health_check, snapshot_check, restore_check, task_check, and relocate_check to determine the status of the actions being waited on. Custom exceptions like ConfigurationError and ActionTimeout are used for error handling.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:do_action\n    - curator/helpers/waiters.py:health_check\n\n## FILE 2: curator/helpers/utils.py\n\n- FUNCTION NAME: chunk_index_list\n  - SIGNATURE: def chunk_index_list(indices):\n  - DOCSTRING: \n```python\n\"\"\"\nChunk a list of index names into smaller pieces to avoid exceeding a 3KB limit for CSV strings. The function takes a list of indices and breaks it down into multiple sublists, each representing a chunk that does not exceed 3072 characters in total when serialized as a CSV string.\n\n:param indices: A list of indices to be chunked.\n:type indices: list\n\n:returns: A list containing sublists of indices, where each sublist is a piece of the original indices, ensuring none exceeds the character limit.\n:rtype: list\n\nThis function is dependent on the CSV representation of the indices, as it concatenates index names with commas to form CSV strings and checks their length against a 3072 character limit.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:do_action\n\n- FUNCTION NAME: to_csv\n  - SIGNATURE: def to_csv(indices):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a list of indices or a single value into a comma-separated values (CSV) string format.\n\n:param indices: A list of indices to act on or a single index value, which can be in CSV string format.\n:type indices: list\n\n:returns: A CSV string of sorted indices if multiple values are provided, or the single value as a string if only one value is present. Returns None if no indices are present.\n:rtype: str\n\nThis function utilizes the `ensure_list` utility from `es_client.helpers.utils` to ensure that the input is treated as a list, even if a single value is passed. If the input is valid, it joins the sorted indices into a CSV string for easy handling in further operations.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:do_action\n\n- FUNCTION NAME: report_failure\n  - SIGNATURE: def report_failure(exception):\n  - DOCSTRING: \n```python\n\"\"\"\nRaises a `FailedExecution` exception when an error occurs, providing an appropriate message for debugging purposes. \n\n:param exception: The original exception that triggered the failure.\n:type exception: :py:exc:Exception\n\n:raises: :py:exc:`curator.exceptions.FailedExecution` with a message indicating the nature of the failure and a suggestion to check logs for more details. \n\nThis function interacts with the `FailedExecution` exception class from the `curator.exceptions` module, which is designed to handle execution failures in a structured manner. The raised exception contains the original error message for easier troubleshooting.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:do_action\n\n- FUNCTION NAME: show_dry_run\n  - SIGNATURE: def show_dry_run(ilo, action, **kwargs):\n  - DOCSTRING: \n```python\n\"\"\"\nLogs the actions that would be performed in a dry run mode without making any changes to the system. It outputs the state of each index in the provided IndexList object and provides information on the action to be taken.\n\n:param ilo: An instance of the IndexList class, containing indices to be acted upon.\n:type ilo: :py:class:`~.curator.indexlist.IndexList`\n:param action: A string representing the action that would be executed.\n:type action: str\n:param kwargs: Additional keyword arguments for logging details.\n:type kwargs: dict\n\n:returns: None\n\n:raises KeyError: If an index state is not present in the IndexList, the function attempts to fetch the current states.\n\nThe function uses `logging` to output messages to the log, indicating the dry run status and the state of each index (e.g., whether it is closed). The variable `index_closed` determines if the index's state is 'close', and this information is included in the log messages.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:do_dry_run\n    - curator/indexlist.py:IndexList:get_index_state\n\n## FILE 3: curator/actions/replicas.py\n\n- CLASS METHOD: Replicas.do_action\n  - CLASS SIGNATURE: class Replicas:\n  - SIGNATURE: def do_action(self):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdate the number of replicas for the indices in the `index_list`.\n\nThis method interacts with the Elasticsearch client to set the `number_of_replicas` setting for each index specified in `index_list`. It omits any closed indices and checks for an empty index list before proceeding. If `wait_for_completion` is enabled and the replica count is greater than zero, it waits for the shard replication to complete. Logs are generated throughout for tracking the operation.\n\nParameters:\n- `self.count`: The desired number of replicas per shard.\n- `self.index_list`: An `IndexList` object containing the indices to update.\n- `self.wfc`: A boolean indicating whether to wait for the replication settings to take effect.\n- `self.wait_interval`: The interval in seconds for checking the replication status.\n- `self.max_wait`: The maximum time to wait for replication completion.\n\nReturns:\nNone.\n\nSide Effects:\n- Modifies the settings of the specified indices in Elasticsearch.\n- Logs information and debug messages regarding the operation and any failures encountered.\n\nDependencies:\n- Uses `chunk_index_list` to segment the index list into manageable parts for processing.\n- Uses `to_csv` to convert index lists to a format suitable for the Elasticsearch API.\n- Uses `wait_for_it` to handle the waiting mechanism if `wait_for_completion` is set.\n- Logs actions using the `loggit` logger defined in the constructor.\n\"\"\"\n```\n\n- CLASS METHOD: Replicas.do_dry_run\n  - CLASS SIGNATURE: class Replicas:\n  - SIGNATURE: def do_dry_run(self):\n  - DOCSTRING: \n```python\n\"\"\"\nLogs what the output would be if the action were to be executed, but does not make any changes to the indices. This method utilizes the `show_dry_run` helper function to display the intended replica count adjustment for the indices contained within the `index_list` attribute of the `Replicas` class. The method relies on the `count` attribute to indicate how many replicas are intended to be set. No parameters are passed to this method, and it does not return any values.\n\"\"\"\n```\n\n- CLASS METHOD: Replicas.__init__\n  - CLASS SIGNATURE: class Replicas:\n  - SIGNATURE: def __init__(self, ilo, count=None, wait_for_completion=False, wait_interval=9, max_wait=-1):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize the Replicas action class, which manages updating the number of replicas for specified indices in an Elasticsearch cluster.\n\nParameters:\n- ilo (:py:class:`~.curator.indexlist.IndexList`): An object containing a list of indices to update.\n- count (int, optional): The desired number of replica shards per index. If not provided, an exception is raised unless zero.\n- wait_for_completion (bool, optional): If True, wait for the replica updates to complete before returning.\n- wait_interval (int, optional): The number of seconds to wait between completion checks when waiting for replication (default is 9 seconds).\n- max_wait (int, optional): The maximum time in seconds to wait for completion (default is -1, meaning indefinitely).\n\nRaises:\n- MissingArgument: If the count parameter is not specified and is not zero.\n\nAttributes:\n- index_list: Stores the IndexList object passed in and used for managing indices.\n- client: The Elasticsearch client derived from the IndexList object for interacting with the Elasticsearch API.\n- count: Holds the number of replicas specified during initialization.\n- wfc: Indicates whether to wait for completion after adjusting replicas.\n- wait_interval: Stores the interval between checks when waiting for completion.\n- max_wait: Defines the maximum time allowed for waiting for completion.\n- loggit: A logger instance for logging information and debug messages specific to replica actions.\n\nThis class interacts with defined helper functions such as `verify_index_list` to validate the input index list and `logging` for logging actions and information throughout the class methods.\n\"\"\"\n```\n\n## FILE 4: curator/helpers/testers.py\n\n- FUNCTION NAME: verify_client_object\n  - SIGNATURE: def verify_client_object(test):\n  - DOCSTRING: \n```python\n\"\"\"\nVerify the validity of the given Elasticsearch client object.\n\n:param test: The variable or object to test as a valid Elasticsearch client.\n:type test: :py:class:`~.elasticsearch.Elasticsearch`\n\n:returns: ``True`` if ``test`` is a valid Elasticsearch client object; raises a :py:exc:`TypeError` if it is not.\n:rtype: bool\n\nThis function uses the logging module to log errors and provide debug information. It ignores mock objects (from testing) by checking the type of `test`. If `test` is not an instance of the `Elasticsearch` class from the `elasticsearch8` module, it raises a `TypeError` with an error message indicating the invalid type passed.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/indexlist.py:IndexList:__init__\n\n- FUNCTION NAME: verify_index_list\n  - SIGNATURE: def verify_index_list(test):\n  - DOCSTRING: \n```python\n\"\"\"\nVerify that the given object is a valid `IndexList` instance from the `curator.indexlist` module.\n\n:param test: The variable or object to test.\n:type test: :py:class:`~.curator.IndexList`\n\n:raises TypeError: If `test` is not a valid `IndexList` object. An error message is logged detailing the type of the passed object.\n\nThis function imports the `IndexList` class from the `curator.indexlist` module locally to avoid circular import issues. It uses the `logging` module to log errors when the type check fails.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - curator/actions/replicas.py:Replicas:__init__\n    - curator/indexlist.py:IndexList:IndexList\n\n## FILE 5: curator/indexlist.py\n\n- CLASS METHOD: IndexList.filter_closed\n  - CLASS SIGNATURE: class IndexList:\n  - SIGNATURE: def filter_closed(self, exclude=True):\n  - DOCSTRING: \n```python\n\"\"\"\nFilter out closed indices from the current list of indices.\n\nThis method evaluates the state of each index and removes those that are\nmarked as closed. The behavior of the filtering can be controlled by the\n`exclude` parameter.\n\nParameters:\n- exclude (bool): If True (default), matching closed indices will be removed\n  from the `indices` list. If False, only indices that are closed will be\n  retained in the `indices` list.\n\nThis method relies on the `get_index_state` method to populate the index\nstates, and on `empty_list_check` to ensure the `indices` list is not empty \nbefore proceeding. The index state and relevant information are stored in \nthe `index_info` attribute, which is a dictionary mapping index names to \ntheir metadata.\n\nSide Effects:\n- Modifies the `indices` attribute based on their closed status.\n\"\"\"\n```\n\n- CLASS METHOD: IndexList.__get_indices\n  - CLASS SIGNATURE: class IndexList:\n  - SIGNATURE: def __get_indices(self, pattern):\n  - DOCSTRING: \n```python\n\"\"\"\nPulls all indices from the Elasticsearch cluster that match a specified search pattern, storing the results in the `all_indices` attribute and populating the `indices` attribute of the `IndexList` class. \n\nParameters:\n- `pattern` (str): A search pattern used to filter the indices retrieved from the Elasticsearch client. Defaults to '_all', which retrieves all indices if no specific pattern is provided.\n\nThis method logs a debug message indicating the search pattern used. It relies on the `get_indices` function (imported from `curator.helpers.getters`), which interacts with the Elasticsearch client to fetch the indices. The indices obtained are copied into the `indices` attribute for further operations within the class, while `all_indices` serves as a comprehensive list of all indices obtained at the time of the method's execution.\n\"\"\"\n```\n\n- CLASS METHOD: IndexList.__init__\n  - CLASS SIGNATURE: class IndexList:\n  - SIGNATURE: def __init__(self, client, search_pattern='_all'):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an IndexList instance to manage and filter indices in an Elasticsearch cluster.\n\nParameters:\nclient (Elasticsearch): An instance of the Elasticsearch client used for interacting with the cluster.\nsearch_pattern (str): A pattern used to filter indices at initialization. Defaults to '_all', which retrieves all indices.\n\nAttributes:\nloggit (Logger): A logger for recording debug and warning messages related to index operations.\nindex_info (dict): A dictionary that stores metadata about indices, populated by private methods during initialization.\nindices (list): A list of indices that are considered for actions, populated based on the search pattern.\nall_indices (list): A complete list of all indices available in the cluster at the time of instantiation.\nage_keyfield (str): A placeholder for the key that holds the age information of indices.\n\nDependencies:\n- The method invokes `verify_client_object(client)` to ensure that the provided client is valid.\n- It relies on the `get_indices()` function from `curator.helpers.getters` to retrieve indices based on the search pattern.\n\"\"\"\n```\n\n- CLASS METHOD: IndexList.empty_list_check\n  - CLASS SIGNATURE: class IndexList:\n  - SIGNATURE: def empty_list_check(self):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the current `indices` list is empty and raises an exception if it is.\n\nThis method logs the action of checking for an empty list and raises a `NoIndices` exception if the `indices` attribute of the `IndexList` instance is empty. The `indices` list represents the collection of indices that the `IndexList` class operates on, and it is critical for the proper functioning of subsequent methods that rely on a non-empty list of indices.\n\nRaises:\n    NoIndices: If the `indices` list is empty, indicating that there are no indices to operate on.\n\"\"\"\n```\n\n## FILE 6: curator/exceptions.py\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "curator/helpers/waiters.py": "\"\"\"The function that waits\n\n...and its helpers\n\"\"\"\nimport logging\nfrom time import localtime, sleep, strftime\nfrom datetime import datetime\nfrom curator.exceptions import ActionTimeout, ConfigurationError, CuratorException, FailedReindex, MissingArgument\nfrom curator.helpers.utils import chunk_index_list\n\ndef health_check(client, **kwargs):\n    \"\"\"\n    This function calls `client.cluster.` :py:meth:`~.elasticsearch.client.ClusterClient.health`\n    and, based on the params provided, will return ``True`` or ``False`` depending on whether that\n    particular keyword appears in the output, and has the expected value.\n\n    If multiple keys are provided, all must match for a ``True`` response.\n\n    :param client: A client connection object\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug('KWARGS= \"%s\"', kwargs)\n    klist = list(kwargs.keys())\n    if not klist:\n        raise MissingArgument('Must provide at least one keyword argument')\n    hc_data = client.cluster.health()\n    response = True\n    for k in klist:\n        if not k in list(hc_data.keys()):\n            raise ConfigurationError('Key \"{0}\" not in cluster health output')\n        if not hc_data[k] == kwargs[k]:\n            msg = f'NO MATCH: Value for key \"{kwargs[k]}\", health check data: {hc_data[k]}'\n            logger.debug(msg)\n            response = False\n        else:\n            msg = f'MATCH: Value for key \"{kwargs[k]}\", health check data: {hc_data[k]}'\n            logger.debug(msg)\n    if response:\n        logger.info('Health Check for all provided keys passed.')\n    return response\n\ndef relocate_check(client, index):\n    \"\"\"\n    This function calls `client.cluster.` :py:meth:`~.elasticsearch.client.ClusterClient.state`\n    with a given index to check if all of the shards for that index are in the ``STARTED`` state.\n    It will return ``True`` if all primary and replica shards are in the ``STARTED`` state, and it\n    will return ``False`` if any shard is in a different state.\n\n    :param client: A client connection object\n    :param index: The index name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type index: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    shard_state_data = client.cluster.state(index=index)['routing_table']['indices'][index]['shards']\n    finished_state = all((all((shard['state'] == 'STARTED' for shard in shards)) for shards in shard_state_data.values()))\n    if finished_state:\n        logger.info('Relocate Check for index: \"%s\" has passed.', index)\n    return finished_state\n\ndef restore_check(client, index_list):\n    \"\"\"\n    This function calls `client.indices.` :py:meth:`~.elasticsearch.client.IndicesClient.recovery`\n    with the list of indices to check for complete recovery.  It will return ``True`` if recovery\n    of those indices is complete, and ``False`` otherwise.  It is designed to fail fast: if a\n    single shard is encountered that is still recovering (not in ``DONE`` stage), it will\n    immediately return ``False``, rather than complete iterating over the rest of the response.\n\n    :param client: A client connection object\n    :param index_list: The list of indices to verify having been restored.\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type index_list: list\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    response = {}\n    for chunk in chunk_index_list(index_list):\n        try:\n            chunk_response = client.indices.recovery(index=chunk, human=True)\n        except Exception as err:\n            msg = f'Unable to obtain recovery information for specified indices. Error: {err}'\n            raise CuratorException(msg) from err\n        if chunk_response == {}:\n            logger.info('_recovery returned an empty response. Trying again.')\n            return False\n        response.update(chunk_response)\n    logger.info('Provided indices: %s', index_list)\n    logger.info('Found indices: %s', list(response.keys()))\n    for index in response:\n        for shard in range(0, len(response[index]['shards'])):\n            stage = response[index]['shards'][shard]['stage']\n            if stage != 'DONE':\n                logger.info('Index \"%s\" is still in stage \"%s\"', index, stage)\n                return False\n    return True\n\ndef snapshot_check(client, snapshot=None, repository=None):\n    \"\"\"\n    This function calls `client.snapshot.` :py:meth:`~.elasticsearch.client.SnapshotClient.get` and\n    tests to see whether the snapshot is complete, and if so, with what status.  It will log errors\n    according to the result. If the snapshot is still ``IN_PROGRESS``, it will return ``False``.\n    ``SUCCESS`` will be an ``INFO`` level message, ``PARTIAL`` nets a ``WARNING`` message,\n    ``FAILED`` is an ``ERROR``, message, and all others will be a ``WARNING`` level message.\n\n    :param client: A client connection object\n    :param snapshot: The snapshot name\n    :param repository: The repository name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type snapshot: str\n    :type repository: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug('SNAPSHOT: %s', snapshot)\n    logger.debug('REPOSITORY: %s', repository)\n    try:\n        result = client.snapshot.get(repository=repository, snapshot=snapshot)\n        logger.debug('RESULT: %s', result)\n    except Exception as err:\n        raise CuratorException(f'Unable to obtain information for snapshot \"{snapshot}\" in repository \"{repository}\". Error: {err}') from err\n    state = result['snapshots'][0]['state']\n    logger.debug('Snapshot state = %s', state)\n    retval = True\n    if state == 'IN_PROGRESS':\n        logger.info('Snapshot %s still in progress.', snapshot)\n        retval = False\n    elif state == 'SUCCESS':\n        logger.info('Snapshot %s successfully completed.', snapshot)\n    elif state == 'PARTIAL':\n        logger.warning('Snapshot %s completed with state PARTIAL.', snapshot)\n    elif state == 'FAILED':\n        logger.error('Snapshot %s completed with state FAILED.', snapshot)\n    else:\n        logger.warning('Snapshot %s completed with state: %s', snapshot, state)\n    return retval\n\ndef task_check(client, task_id=None):\n    \"\"\"\n    This function calls `client.tasks.` :py:meth:`~.elasticsearch.client.TasksClient.get` with the\n    provided ``task_id``.  If the task data contains ``'completed': True``, then it will return\n    ``True``. If the task is not completed, it will log some information about the task and return\n    ``False``\n\n    :param client: A client connection object\n    :param task_id: The task id\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type task_id: str\n\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        task_data = client.tasks.get(task_id=task_id)\n    except Exception as err:\n        msg = f'Unable to obtain task information for task_id \"{task_id}\". Exception {err}'\n        raise CuratorException(msg) from err\n    task = task_data['task']\n    completed = task_data['completed']\n    if task['action'] == 'indices:data/write/reindex':\n        logger.debug(\"It's a REINDEX TASK\")\n        logger.debug('TASK_DATA: %s', task_data)\n        logger.debug('TASK_DATA keys: %s', list(task_data.keys()))\n        if 'response' in task_data:\n            response = task_data['response']\n            if response['failures']:\n                msg = f'Failures found in reindex response: {response['failures']}'\n                raise FailedReindex(msg)\n    running_time = 1e-09 * task['running_time_in_nanos']\n    logger.debug('Running time: %s seconds', running_time)\n    descr = task['description']\n    if completed:\n        completion_time = running_time * 1000 + task['start_time_in_millis']\n        time_string = strftime('%Y-%m-%dT%H:%M:%SZ', localtime(completion_time / 1000))\n        logger.info('Task \"%s\" completed at %s.', descr, time_string)\n        retval = True\n    else:\n        logger.debug('Full Task Data: %s', task_data)\n        msg = f'Task \"{descr}\" with task_id \"{task_id}\" has been running for {running_time} seconds'\n        logger.info(msg)\n        retval = False\n    return retval",
    "curator/helpers/utils.py": "\"\"\"Helper utilities\n\nThe kind that don't fit in testers, getters, date_ops, or converters\n\"\"\"\nimport logging\nfrom es_client.helpers.utils import ensure_list\nfrom curator.exceptions import FailedExecution",
    "curator/actions/replicas.py": "\"\"\"Index replica count action class\"\"\"\nimport logging\nfrom curator.exceptions import MissingArgument\nfrom curator.helpers.testers import verify_index_list\nfrom curator.helpers.utils import chunk_index_list, report_failure, show_dry_run, to_csv\nfrom curator.helpers.waiters import wait_for_it\n\nclass Replicas:\n    \"\"\"Replica Action Class\"\"\"",
    "curator/helpers/testers.py": "\"\"\"Utility functions that get things\"\"\"\nimport logging\nfrom voluptuous import Schema\nfrom elasticsearch8 import Elasticsearch\nfrom elasticsearch8.exceptions import NotFoundError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import prune_nones\nfrom curator.helpers.getters import get_repository, get_write_index\nfrom curator.exceptions import ConfigurationError, MissingArgument, RepositoryException, SearchableSnapshotException\nfrom curator.defaults.settings import index_filtertypes, snapshot_actions, snapshot_filtertypes\nfrom curator.validators import actions, options\nfrom curator.validators.filter_functions import validfilters\nfrom curator.helpers.utils import report_failure\n\ndef has_lifecycle_name(idx_settings):\n    \"\"\"\n    :param idx_settings: The settings for an index being tested\n    :type idx_settings: dict\n\n    :returns: ``True`` if a lifecycle name exists in settings, else ``False``\n    :rtype: bool\n    \"\"\"\n    if 'lifecycle' in idx_settings:\n        if 'name' in idx_settings['lifecycle']:\n            return True\n    return False\n\ndef is_idx_partial(idx_settings):\n    \"\"\"\n    :param idx_settings: The settings for an index being tested\n    :type idx_settings: dict\n\n    :returns: ``True`` if store.snapshot.partial exists in settings, else ``False``\n    :rtype: bool\n    \"\"\"\n    if 'store' in idx_settings:\n        if 'snapshot' in idx_settings['store']:\n            if 'partial' in idx_settings['store']['snapshot']:\n                if idx_settings['store']['snapshot']['partial']:\n                    return True\n                return False\n            return False\n        raise SearchableSnapshotException('Index not a mounted searchable snapshot')\n    raise SearchableSnapshotException('Index not a mounted searchable snapshot')\n\ndef ilm_policy_check(client, alias):\n    \"\"\"Test if alias is associated with an ILM policy\n\n    Calls :py:meth:`~.elasticsearch.client.IndicesClient.get_settings`\n\n    :param client: A client connection object\n    :param alias: The alias name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type alias: str\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    write_index = get_write_index(client, alias)\n    try:\n        idx_settings = client.indices.get_settings(index=write_index)\n        if 'name' in idx_settings[write_index]['settings']['index']['lifecycle']:\n            return True\n    except KeyError:\n        logger.debug('No ILM policies associated with %s', alias)\n    return False\n\ndef repository_exists(client, repository=None):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.SnapshotClient.get_repository`\n\n    :param client: A client connection object\n    :param repository: The Elasticsearch snapshot repository to use\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type repository: str\n\n    :returns: ``True`` if ``repository`` exists, else ``False``\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    if not repository:\n        raise MissingArgument('No value for \"repository\" provided')\n    try:\n        test_result = get_repository(client, repository)\n        if repository in test_result:\n            logger.debug('Repository %s exists.', repository)\n            response = True\n        else:\n            logger.debug('Repository %s not found...', repository)\n            response = False\n    except Exception as err:\n        logger.debug('Unable to find repository \"%s\": Error: %s', repository, err)\n        response = False\n    return response\n\ndef rollable_alias(client, alias):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.IndicesClient.get_alias`\n\n    :param client: A client connection object\n    :param alias: An Elasticsearch alias\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type alias: str\n\n\n    :returns: ``True`` or ``False`` depending on whether ``alias`` is an alias that\n        points to an index that can be used by the ``_rollover`` API.\n    :rtype: bool\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        response = client.indices.get_alias(name=alias)\n    except NotFoundError:\n        logger.error('Alias \"%s\" not found.', alias)\n        return False\n    for idx in response:\n        if 'is_write_index' in response[idx]['aliases'][alias]:\n            if response[idx]['aliases'][alias]['is_write_index']:\n                return True\n    if len(response) > 1:\n        logger.error('\"alias\" must only reference one index, but points to %s', response)\n        return False\n    index = list(response.keys())[0]\n    rollable = False\n    if index[-2:][1].isdigit():\n        if index[-2:][0].isdigit():\n            rollable = True\n        elif index[-2:][0] == '-':\n            rollable = True\n    return rollable\n\ndef snapshot_running(client):\n    \"\"\"\n    Calls :py:meth:`~.elasticsearch.client.SnapshotClient.get_repository`\n\n    Return ``True`` if a snapshot is in progress, and ``False`` if not\n\n    :param client: A client connection object\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n\n    :rtype: bool\n    \"\"\"\n    try:\n        status = client.snapshot.status()['snapshots']\n    except Exception as exc:\n        report_failure(exc)\n    return False if not status else True\n\ndef validate_actions(data):\n    \"\"\"\n    Validate the ``actions`` configuration dictionary, as imported from actions.yml,\n    for example.\n\n    :param data: The configuration dictionary\n\n    :type data: dict\n\n    :returns: The validated and sanitized configuration dictionary.\n    :rtype: dict\n    \"\"\"\n    clean_config = {}\n    root = SchemaCheck(data, actions.root(), 'Actions File', 'root').result()\n    for action_id in root['actions']:\n        action_dict = root['actions'][action_id]\n        loc = f'Action ID \"{action_id}\"'\n        valid_structure = SchemaCheck(action_dict, actions.structure(action_dict, loc), 'structure', loc).result()\n        current_action = valid_structure['action']\n        loc = f'Action ID \"{action_id}\", action \"{current_action}\"'\n        clean_options = SchemaCheck(prune_nones(valid_structure['options']), options.get_schema(current_action), 'options', loc).result()\n        clean_config[action_id] = {'action': current_action, 'description': valid_structure['description'], 'options': clean_options}\n        if current_action == 'alias':\n            add_remove = {}\n            for k in ['add', 'remove']:\n                if k in valid_structure:\n                    current_filters = SchemaCheck(valid_structure[k]['filters'], Schema(validfilters(current_action, location=loc)), f'\"{k}\" filters', f'{loc}, \"filters\"').result()\n                    add_remove.update({k: {'filters': SchemaCheck(current_filters, Schema(validfilters(current_action, location=loc)), 'filters', f'{loc}, \"{k}\", \"filters\"').result()}})\n            clean_config[action_id].update(add_remove)\n        elif current_action in ['cluster_routing', 'create_index', 'rollover']:\n            pass\n        else:\n            valid_filters = SchemaCheck(valid_structure['filters'], Schema(validfilters(current_action, location=loc)), 'filters', f'{loc}, \"filters\"').result()\n            clean_filters = validate_filters(current_action, valid_filters)\n            clean_config[action_id].update({'filters': clean_filters})\n        if current_action == 'reindex':\n            if 'remote_filters' in valid_structure['options']:\n                valid_filters = SchemaCheck(valid_structure['options']['remote_filters'], Schema(validfilters(current_action, location=loc)), 'filters', f'{loc}, \"filters\"').result()\n                clean_remote_filters = validate_filters(current_action, valid_filters)\n                clean_config[action_id]['options'].update({'remote_filters': clean_remote_filters})\n    return {'actions': clean_config}\n\ndef validate_filters(action, myfilters):\n    \"\"\"\n    Validate that myfilters are appropriate for the action type, e.g. no\n    index filters applied to a snapshot list.\n\n    :param action: An action name\n    :param myfilters: A list of filters to test.\n\n    :type action: str\n    :type myfilters: list\n\n    :returns: Validated list of filters\n    :rtype: list\n    \"\"\"\n    if action in snapshot_actions():\n        filtertypes = snapshot_filtertypes()\n    else:\n        filtertypes = index_filtertypes()\n    for fil in myfilters:\n        if fil['filtertype'] not in filtertypes:\n            raise ConfigurationError(f'\"{fil['filtertype']}\" filtertype is not compatible with action \"{action}\"')\n    return myfilters\n\ndef verify_repository(client, repository=None):\n    \"\"\"\n    Do :py:meth:`~.elasticsearch.snapshot.verify_repository` call. If it fails, raise a\n    :py:exc:`~.curator.exceptions.RepositoryException`.\n\n    :param client: A client connection object\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :param repository: A repository name\n\n    :type client: :py:class:`~.elasticsearch.Elasticsearch`\n    :type repository: str\n\n    :rtype: None\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    try:\n        nodes = client.snapshot.verify_repository(name=repository)['nodes']\n        logger.debug('All nodes can write to the repository')\n        logger.debug('Nodes with verified repository access: %s', nodes)\n    except Exception as err:\n        try:\n            if err.status_code == 404:\n                msg = f'--- Repository \"{repository}\" not found. Error: {err.meta.status}, {err.error}'\n            else:\n                msg = f'--- Got a {err.meta.status} response from Elasticsearch.  Error message: {err.error}'\n        except AttributeError:\n            msg = f'--- Error message: {err}'.format()\n        report = f'Failed to verify all nodes have repository access: {msg}'\n        raise RepositoryException(report) from err\n\ndef verify_snapshot_list(test):\n    \"\"\"\n    :param test: The variable or object to test\n\n    :type test: :py:class:`~.curator.SnapshotList`\n\n    :returns: ``None`` if ``test`` is a proper\n        :py:class:`~.curator.snapshotlist.SnapshotList` object, else raise a\n        :py:class:`TypeError` exception.\n    :rtype: None\n    \"\"\"\n    from curator.snapshotlist import SnapshotList\n    logger = logging.getLogger(__name__)\n    if not isinstance(test, SnapshotList):\n        msg = f'Not a valid SnapshotList object. Type: {type(test)} was passed'\n        logger.error(msg)\n        raise TypeError(msg)",
    "curator/indexlist.py": "\"\"\"Index List Class\"\"\"\nimport re\nimport itertools\nimport logging\nfrom elasticsearch8.exceptions import NotFoundError, TransportError\nfrom es_client.helpers.schemacheck import SchemaCheck\nfrom es_client.helpers.utils import ensure_list\nfrom curator.defaults import settings\nfrom curator.exceptions import ActionError, ConfigurationError, MissingArgument, NoIndices\nfrom curator.helpers.date_ops import absolute_date_range, date_range, fix_epoch, get_date_regex, get_point_of_reference, get_unit_count_from_name, TimestringSearch\nfrom curator.helpers.getters import byte_size, get_indices\nfrom curator.helpers.testers import verify_client_object\nfrom curator.helpers.utils import chunk_index_list, report_failure, to_csv\nfrom curator.validators.filter_functions import filterstructure\n\nclass IndexList:\n    \"\"\"IndexList class\"\"\"\n\n    def __actionable(self, idx):\n        self.loggit.debug('Index %s is actionable and remains in the list.', idx)\n\n    def __not_actionable(self, idx):\n        self.loggit.debug('Index %s is not actionable, removing from list.', idx)\n        self.indices.remove(idx)\n\n    def __excludify(self, condition, exclude, index, msg=None):\n        if condition is True:\n            if exclude:\n                text = 'Removed from actionable list'\n                self.__not_actionable(index)\n            else:\n                text = 'Remains in actionable list'\n                self.__actionable(index)\n        elif exclude:\n            text = 'Remains in actionable list'\n            self.__actionable(index)\n        else:\n            text = 'Removed from actionable list'\n            self.__not_actionable(index)\n        if msg:\n            self.loggit.debug('%s: %s', text, msg)\n\n    def __build_index_info(self, index):\n        \"\"\"\n        Ensure that ``index`` is a key in ``index_info``. If not, create a\n        sub-dictionary structure under that key.\n        \"\"\"\n        self.loggit.debug('Building preliminary index metadata for %s', index)\n        if index not in self.index_info:\n            self.index_info[index] = self.__zero_values()\n\n    def __map_method(self, ftype):\n        methods = {'alias': self.filter_by_alias, 'age': self.filter_by_age, 'allocated': self.filter_allocated, 'closed': self.filter_closed, 'count': self.filter_by_count, 'empty': self.filter_empty, 'forcemerged': self.filter_forceMerged, 'ilm': self.filter_ilm, 'kibana': self.filter_kibana, 'none': self.filter_none, 'opened': self.filter_opened, 'period': self.filter_period, 'pattern': self.filter_by_regex, 'space': self.filter_by_space, 'shards': self.filter_by_shards, 'size': self.filter_by_size}\n        return methods[ftype]\n\n    def __remove_missing(self, err):\n        \"\"\"\n        Remove missing index found in ``err`` from self.indices and return that name\n        \"\"\"\n        missing = err.info['error']['index']\n        self.loggit.warning('Index was initiallly present, but now is not: %s', missing)\n        self.loggit.debug('Removing %s from active IndexList', missing)\n        self.indices.remove(missing)\n        return missing\n\n    def __zero_values(self):\n        \"\"\"The default values for index metadata\"\"\"\n        return {'age': {'creation_date': 0, 'name': 0}, 'docs': 0, 'number_of_replicas': 0, 'number_of_shards': 0, 'primary_size_in_bytes': 0, 'routing': {}, 'segments': 0, 'size_in_bytes': 0, 'state': ''}\n\n    def _get_indices_segments(self, data):\n        return self.client.indices.segments(index=to_csv(data))['indices'].copy()\n\n    def _get_indices_settings(self, data):\n        return self.client.indices.get_settings(index=to_csv(data))\n\n    def _get_indices_stats(self, data):\n        return self.client.indices.stats(index=to_csv(data), metric='store,docs')['indices']\n\n    def _bulk_queries(self, data, exec_func):\n        slice_number = 10\n        query_result = {}\n        loop_number = round(len(data) / slice_number) if round(len(data) / slice_number) > 0 else 1\n        self.loggit.debug('Bulk Queries - number requests created: %s', loop_number)\n        for num in range(0, loop_number):\n            if num == loop_number - 1:\n                data_sliced = data[num * slice_number:]\n            else:\n                data_sliced = data[num * slice_number:(num + 1) * slice_number]\n            query_result.update(exec_func(data_sliced))\n        return query_result\n\n    def mitigate_alias(self, index):\n        \"\"\"\n        Mitigate when an alias is detected instead of an index name\n\n        :param index: The index name that is showing up *instead* of what was expected\n\n        :type index: str\n\n        :returns: No return value:\n        :rtype: None\n        \"\"\"\n        self.loggit.debug('BEGIN mitigate_alias')\n        self.loggit.debug('Correcting an instance where an alias name points to index \"%s\"', index)\n        data = self.client.indices.get(index=index)\n        aliases = list(data[index]['aliases'])\n        if aliases:\n            for alias in aliases:\n                if alias in self.indices:\n                    self.loggit.warning('Removing alias \"%s\" from IndexList.indices', alias)\n                    self.indices.remove(alias)\n                if alias in list(self.index_info):\n                    self.loggit.warning('Removing alias \"%s\" from IndexList.index_info', alias)\n                    del self.index_info[alias]\n        self.loggit.debug('Adding \"%s\" to IndexList.indices', index)\n        self.indices.append(index)\n        self.loggit.debug('Adding preliminary metadata for \"%s\" to IndexList.index_info', index)\n        self.__build_index_info(index)\n        self.loggit.debug('END mitigate_alias')\n\n    def alias_index_check(self, data):\n        \"\"\"\n        Check each index in data to see if it's an alias.\n        \"\"\"\n        working_list = data[:]\n        for entry in working_list:\n            if self.client.indices.exists_alias(name=entry):\n                index = list(self.client.indices.get_alias(name=entry).keys())[0]\n                self.loggit.warning('\"%s\" is actually an alias for index \"%s\"', entry, index)\n                self.mitigate_alias(index)\n                data.remove(entry)\n                data.append(index)\n        return data\n\n    def indices_exist(self, data, exec_func):\n        \"\"\"Check if indices exist. If one doesn't, remove it. Loop until all exist\"\"\"\n        self.loggit.debug('BEGIN indices_exist')\n        checking = True\n        working_list = {}\n        verified_data = self.alias_index_check(data)\n        while checking:\n            try:\n                working_list.update(exec_func(verified_data))\n            except NotFoundError as err:\n                data.remove(self.__remove_missing(err))\n                continue\n            except TransportError as err:\n                if '413' in err.errors:\n                    msg = 'Huge Payload 413 Err - Trying to get information via multiple requests'\n                    self.loggit.debug(msg)\n                    working_list.update(self._bulk_queries(verified_data, exec_func))\n            checking = False\n        return working_list\n\n    def data_getter(self, data, exec_func):\n        \"\"\"\n        Function that prevents unnecessary code repetition for different data\n        getter methods\n        \"\"\"\n        self.loggit.debug('BEGIN data_getter')\n        checking = True\n        while checking:\n            working_list = self.indices_exist(data, exec_func)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        sii = self.index_info[index]\n                    except KeyError:\n                        self.loggit.warning('Index %s was not present at IndexList initialization,  and may be behind an alias', index)\n                        self.mitigate_alias(index)\n                        sii = self.index_info[index]\n                        working_list = {}\n                        try:\n                            working_list.update(self._bulk_queries(data, exec_func))\n                        except NotFoundError as err:\n                            data.remove(self.__remove_missing(err))\n                            continue\n                    yield (sii, working_list[index], index)\n            checking = False\n\n    def population_check(self, index, key):\n        \"\"\"Verify that key is in self.index_info[index], and that it is populated\"\"\"\n        retval = True\n        if index not in self.index_info:\n            self.__build_index_info(index)\n        if key not in self.index_info[index]:\n            self.index_info[index][key] = self.__zero_values()[key]\n        if self.index_info[index][key] == self.__zero_values()[key]:\n            retval = False\n        return retval\n\n    def needs_data(self, indices, fields):\n        \"\"\"Check for data population in self.index_info\"\"\"\n        self.loggit.debug('Indices: %s, Fields: %s', indices, fields)\n        needful = []\n        working_list = self.indices_exist(indices, self._get_indices_settings)\n        for idx in working_list:\n            count = 0\n            for field in fields:\n                if self.population_check(idx, field):\n                    count += 1\n            if count == 0:\n                needful.append(idx)\n        if fields == ['state']:\n            self.loggit.debug('Always check open/close for all passed indices')\n            needful = list(working_list.keys())\n        self.loggit.debug('These indices need data in index_info: %s', needful)\n        return needful\n\n    def get_index_settings(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n            creation_date\n            number_of_replicas\n            number_of_shards\n            routing information (if present)\n        \"\"\"\n        self.loggit.debug('Getting index settings -- BEGIN')\n        self.empty_list_check()\n        fields = ['age', 'number_of_replicas', 'number_of_shards', 'routing']\n        for lst in chunk_index_list(self.indices):\n            needful = self.needs_data(lst, fields)\n            if not needful:\n                continue\n            for sii, wli, _ in self.data_getter(needful, self._get_indices_settings):\n                sii['age']['creation_date'] = fix_epoch(wli['settings']['index']['creation_date'])\n                sii['number_of_replicas'] = wli['settings']['index']['number_of_replicas']\n                sii['number_of_shards'] = wli['settings']['index']['number_of_shards']\n                if 'routing' in wli['settings']['index']:\n                    sii['routing'] = wli['settings']['index']['routing']\n        self.loggit.debug('Getting index settings -- END')\n\n    def get_index_state(self):\n        \"\"\"\n        For each index in self.indices, populate ``index_info`` with:\n\n            state (open or closed)\n\n        from the cat API\n        \"\"\"\n        self.loggit.debug('Getting index state -- BEGIN')\n        self.empty_list_check()\n        fields = ['state']\n        for lst in chunk_index_list(self.indices):\n            needful = self.needs_data(lst, fields)\n            resp = self.client.cat.indices(index=to_csv(needful), format='json', h='index,status')\n            for entry in resp:\n                try:\n                    self.index_info[entry['index']]['state'] = entry['status']\n                except KeyError:\n                    self.loggit.warning('Index %s was not present at IndexList initialization, and may be behind an alias', entry['index'])\n                    self.mitigate_alias(entry['index'])\n                    self.index_info[entry['index']]['state'] = entry['status']\n\n    def get_index_stats(self):\n        \"\"\"\n        Populate ``index_info`` with index ``size_in_bytes``,\n        ``primary_size_in_bytes`` and doc count information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index stats -- BEGIN')\n        self.empty_list_check()\n        fields = ['size_in_bytes', 'docs', 'primary_size_in_bytes']\n        self.get_index_state()\n        working_list = self.working_list()\n        for index in self.working_list():\n            if self.index_info[index]['state'] == 'close':\n                working_list.remove(index)\n        if working_list:\n            index_lists = chunk_index_list(working_list)\n            for lst in index_lists:\n                needful = self.needs_data(lst, fields)\n                if not needful:\n                    continue\n                for sii, wli, index in self.data_getter(needful, self._get_indices_stats):\n                    try:\n                        size = wli['total']['store']['size_in_bytes']\n                        docs = wli['total']['docs']['count']\n                        primary_size = wli['primaries']['store']['size_in_bytes']\n                        msg = f'Index: {index}  Size: {byte_size(size)}  Docs: {docs} PrimarySize: {byte_size(primary_size)}'\n                        self.loggit.debug(msg)\n                        sii['size_in_bytes'] = size\n                        sii['docs'] = docs\n                        sii['primary_size_in_bytes'] = primary_size\n                    except KeyError:\n                        msg = f'Index stats missing for \"{index}\" -- might be closed'\n                        self.loggit.warning(msg)\n\n    def get_segment_counts(self):\n        \"\"\"\n        Populate ``index_info`` with segment information for each index.\n        \"\"\"\n        self.loggit.debug('Getting index segment counts')\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            for sii, wli, _ in self.data_getter(lst, self._get_indices_segments):\n                shards = wli['shards']\n                segmentcount = 0\n                for shardnum in shards:\n                    for shard in range(0, len(shards[shardnum])):\n                        segmentcount += shards[shardnum][shard]['num_search_segments']\n                sii['segments'] = segmentcount\n\n    def working_list(self):\n        \"\"\"\n        Return the current value of ``indices`` as copy-by-value to prevent list\n        stomping during iterations\n        \"\"\"\n        self.loggit.debug('Generating working list of indices')\n        return self.indices[:]\n\n    def _get_name_based_ages(self, timestring):\n        \"\"\"\n        Add indices to ``index_info`` based on the age as indicated by the index\n        name pattern, if it matches ``timestring``\n\n        :param timestring: An :py:func:`time.strftime` pattern\n        \"\"\"\n        self.loggit.debug('Getting ages of indices by \"name\"')\n        self.empty_list_check()\n        tstr = TimestringSearch(timestring)\n        for index in self.working_list():\n            epoch = tstr.get_epoch(index)\n            if isinstance(epoch, int):\n                self.index_info[index]['age']['name'] = epoch\n            else:\n                msg = f'Timestring {timestring} was not found in index {index}. Removing from actionable list'\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def _get_field_stats_dates(self, field='@timestamp'):\n        \"\"\"\n        Add indices to ``index_info`` based on the values the queries return, as\n        determined by the min and max aggregated values of ``field``\n\n        :param field: The field with the date value.  The field must be mapped in\n            elasticsearch as a date datatype. Default: ``@timestamp``\n        \"\"\"\n        self.loggit.debug('Cannot query closed indices. Omitting any closed indices.')\n        self.filter_closed()\n        self.loggit.debug('Cannot use field_stats with empty indices. Omitting any empty indices.')\n        self.filter_empty()\n        self.loggit.debug('Getting index date by querying indices for min & max value of %s field', field)\n        self.empty_list_check()\n        index_lists = chunk_index_list(self.indices)\n        for lst in index_lists:\n            for index in lst:\n                aggs = {'min': {'min': {'field': field}}, 'max': {'max': {'field': field}}}\n                response = self.client.search(index=index, size=0, aggs=aggs)\n                self.loggit.debug('RESPONSE: %s', response)\n                if response:\n                    try:\n                        res = response['aggregations']\n                        self.loggit.debug('res: %s', res)\n                        data = self.index_info[index]['age']\n                        data['min_value'] = fix_epoch(res['min']['value'])\n                        data['max_value'] = fix_epoch(res['max']['value'])\n                        self.loggit.debug('data: %s', data)\n                    except KeyError as exc:\n                        raise ActionError(f'Field \"{field}\" not found in index \"{index}\"') from exc\n\n    def _calculate_ages(self, source=None, timestring=None, field=None, stats_result=None):\n        \"\"\"\n        This method initiates index age calculation based on the given parameters.\n        Exceptions are raised when they are improperly configured.\n\n        Set instance variable ``age_keyfield`` for use later, if needed.\n\n        :param source: Source of index age. Can be: ``name``, ``creation_date``,\n            or ``field_stats``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the min or max result value.\n        \"\"\"\n        self.age_keyfield = source\n        if source == 'name':\n            if not timestring:\n                raise MissingArgument('source \"name\" requires the \"timestring\" keyword argument')\n            self._get_name_based_ages(timestring)\n        elif source == 'creation_date':\n            pass\n        elif source == 'field_stats':\n            if not field:\n                raise MissingArgument('source \"field_stats\" requires the \"field\" keyword argument')\n            if stats_result not in ['min_value', 'max_value']:\n                raise ValueError(f'Invalid value for \"stats_result\": {stats_result}')\n            self.age_keyfield = stats_result\n            self._get_field_stats_dates(field=field)\n        else:\n            raise ValueError(f'Invalid source: {source}. Must be one of \"name\", \"creation_date\", \"field_stats\".')\n\n    def _sort_by_age(self, index_list, reverse=True):\n        \"\"\"\n        Take a list of indices and sort them by date.\n\n        By default, the youngest are first with ``reverse=True``, but the oldest\n        can be first by setting ``reverse=False``\n        \"\"\"\n        temp = {}\n        for index in index_list:\n            try:\n                if self.index_info[index]['age'][self.age_keyfield]:\n                    temp[index] = self.index_info[index]['age'][self.age_keyfield]\n                else:\n                    msg = f'No date for \"{index}\" in IndexList metadata. Possible timestring mismatch. Excluding index \"{index}\".'\n                    self.__excludify(True, True, index, msg)\n            except KeyError:\n                msg = f'{index} does not have key \"{self.age_keyfield}\" in IndexList metadata'\n                self.__excludify(True, True, index, msg)\n        temp_tuple = sorted(temp.items(), key=lambda k: k[0], reverse=reverse)\n        sorted_tuple = sorted(temp_tuple, key=lambda k: k[1], reverse=reverse)\n        return [x[0] for x in sorted_tuple]\n\n    def filter_by_regex(self, kind=None, value=None, exclude=False):\n        \"\"\"\n        Match indices by regular expression (pattern).\n\n        :param kind: Can be one of: ``suffix``, ``prefix``, ``regex``, or\n            ``timestring``. This option defines what ``kind`` of filter you will\n            be building.\n        :param value: Depends on ``kind``. It is the :py:func:`time.strftime` string if\n            ``kind`` is ``timestring``. It's used to build the regular expression\n            for other kinds.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by regex')\n        if kind not in ['regex', 'prefix', 'suffix', 'timestring']:\n            raise ValueError(f'{kind}: Invalid value for kind')\n        if value == 0:\n            pass\n        elif not value:\n            raise ValueError('Invalid None value for \"value\". Cannot be \"None\" type, empty, or False')\n        if kind == 'timestring':\n            regex = settings.regex_map()[kind].format(get_date_regex(value))\n        else:\n            regex = settings.regex_map()[kind].format(value)\n        self.empty_list_check()\n        pattern = re.compile(regex)\n        for index in self.working_list():\n            self.loggit.debug('Filter by regex: Index: %s', index)\n            match = pattern.search(index)\n            if match:\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_by_age(self, source='name', direction=None, timestring=None, unit=None, unit_count=None, field=None, stats_result='min_value', epoch=None, exclude=False, unit_count_pattern=False):\n        \"\"\"\n        Match indices by relative age calculations.\n\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``\n        :param direction: Time to filter, either ``older`` or ``younger``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``seconds``, ``minutes``, ``hours``, ``days``, ``weeks``,\n            ``months``, or ``years``.\n        :param unit_count: The count of ``unit``. ``unit_count`` * ``unit`` will\n            be calculated out to the relative number of seconds.\n        :param unit_count_pattern: A regular expression whose capture group identifies\n            the value for ``unit_count``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used\n            in conjunction with ``source=field_stats`` to choose whether to reference\n            the minimum or maximum result value.\n        :param epoch: An epoch timestamp used in conjunction with ``unit`` and\n            ``unit_count`` to establish a point of reference for calculations.\n            If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude`` is `False`, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by age')\n        por = get_point_of_reference(unit, unit_count, epoch)\n        if not direction:\n            raise MissingArgument('Must provide a value for \"direction\"')\n        if direction not in ['older', 'younger']:\n            raise ValueError(f'Invalid value for \"direction\": {direction}')\n        self.get_index_settings()\n        self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n        if unit_count_pattern:\n            try:\n                unit_count_matcher = re.compile(unit_count_pattern)\n            except Exception as exc:\n                self.loggit.error('Regular expression failure. Will not match unit count. Error: %s', exc)\n                unit_count_matcher = None\n        for index in self.working_list():\n            try:\n                remove_this_index = False\n                age = int(self.index_info[index]['age'][self.age_keyfield])\n                msg = f'Index \"{index}\" age ({age}), direction: \"{direction}\", point of reference, ({por})'\n                if unit_count_pattern:\n                    msg = f'unit_count_pattern is set, trying to match pattern to index \"{index}\"'\n                    self.loggit.debug(msg)\n                    unit_count_from_index = get_unit_count_from_name(index, unit_count_matcher)\n                    if unit_count_from_index:\n                        self.loggit.debug('Pattern matched, applying unit_count of  \"%s\"', unit_count_from_index)\n                        adjustedpor = get_point_of_reference(unit, unit_count_from_index, epoch)\n                        msg = f'Adjusting point of reference from {por} to {adjustedpor} based on unit_count of {unit_count_from_index} from index name'\n                        self.loggit.debug(msg)\n                    elif unit_count == -1:\n                        msg = f'Unable to match pattern and no fallback value set. Removing index \"{index}\" from actionable list'\n                        self.loggit.debug(msg)\n                        remove_this_index = True\n                        adjustedpor = por\n                    else:\n                        self.loggit.debug('Unable to match pattern using fallback value of \"%s\"', unit_count)\n                        adjustedpor = por\n                else:\n                    adjustedpor = por\n                if direction == 'older':\n                    agetest = age < adjustedpor\n                else:\n                    agetest = age > adjustedpor\n                self.__excludify(agetest and (not remove_this_index), exclude, index, msg)\n            except KeyError:\n                msg = f'Index \"{index}\" does not meet provided criteria. Removing from list.'\n                self.loggit.debug(msg)\n                self.indices.remove(index)\n\n    def filter_by_space(self, disk_space=None, reverse=True, use_age=False, source='creation_date', timestring=None, field=None, stats_result='min_value', exclude=False, threshold_behavior='greater_than'):\n        \"\"\"\n        Remove indices from the actionable list based on space consumed, sorted\n        reverse-alphabetically by default.  If you set ``reverse`` to ``False``,\n        it will be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` --then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse`` to ``False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the\n        index creation date by default, but you can specify an ``source`` of\n        ``name``, ``max_value``, or ``min_value``. The ``name`` ``source`` requires\n        the timestring argument.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``disk_space``. When set to\n        ``less_than``, it includes if the index is smaller than ``disk_space``\n\n        :param disk_space: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param reverse: The filtering direction. (default: ``True``).  Ignored if\n            ``use_age`` is ``True``\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param source: Source of index age. Can be one of ``name``, ``creation_date``,\n            or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name`` is selected.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``\n            is selected.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats`` is selected. It determines whether to reference\n            the minimum or maximum value of `field` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by disk space')\n        if not disk_space:\n            raise MissingArgument('No value for \"disk_space\" provided')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(f'Invalid value for \"threshold_behavior\": {threshold_behavior}')\n        self.get_index_stats()\n        self.get_index_settings()\n        disk_space = float(disk_space)\n        disk_usage = 0.0\n        disk_limit = disk_space * 2 ** 30\n        msg = 'Cannot get disk usage info from closed indices. Omitting any closed indices.'\n        self.loggit.debug(msg)\n        self.filter_closed()\n        if use_age:\n            self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n            self.loggit.debug('SORTING BY AGE')\n            sorted_indices = self._sort_by_age(self.working_list())\n        else:\n            sorted_indices = sorted(self.working_list(), reverse=reverse)\n        for index in sorted_indices:\n            disk_usage += self.index_info[index]['size_in_bytes']\n            msg = f'{index}, summed disk usage is {byte_size(disk_usage)} and disk limit is {byte_size(disk_limit)}.'\n            if threshold_behavior == 'greater_than':\n                self.__excludify(disk_usage > disk_limit, exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify(disk_usage < disk_limit, exclude, index, msg)\n\n    def filter_kibana(self, exclude=True):\n        \"\"\"\n        Match any index named ``.kibana*`` in ``indices``. Older releases addressed\n        index names that no longer exist.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering kibana indices')\n        self.empty_list_check()\n        for index in self.working_list():\n            pattern = re.compile('^\\\\.kibana.*$')\n            if pattern.match(index):\n                self.__excludify(True, exclude, index)\n            else:\n                self.__excludify(False, exclude, index)\n\n    def filter_forceMerged(self, max_num_segments=None, exclude=True):\n        \"\"\"\n        Match any index which has ``max_num_segments`` per shard or fewer in the\n        actionable list.\n\n        :param max_num_segments: Cutoff number of segments per shard.\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            indices from ``indices``. If ``exclude=False``, then only matching\n            indices will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering forceMerged indices')\n        if not max_num_segments:\n            raise MissingArgument('Missing value for \"max_num_segments\"')\n        self.loggit.debug('Cannot get segment count of closed indices. Omitting any closed indices.')\n        self.get_index_state()\n        self.get_index_settings()\n        self.filter_closed()\n        self.get_segment_counts()\n        for index in self.working_list():\n            shards = int(self.index_info[index]['number_of_shards'])\n            replicas = int(self.index_info[index]['number_of_replicas'])\n            segments = int(self.index_info[index]['segments'])\n            msg = f'{index} has {shards} shard(s) + {replicas} replica(s) with a sum total of {segments} segments.'\n            expected_count = (shards + shards * replicas) * max_num_segments\n            self.__excludify(segments <= expected_count, exclude, index, msg)\n\n    def filter_empty(self, exclude=True):\n        \"\"\"\n        Filter indices with a document count of zero. Indices that are closed\n        are automatically excluded from consideration due to closed indices reporting\n        a document count of zero.\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering empty indices')\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['docs'] == 0\n            self.loggit.debug('Index %s doc count: %s', index, self.index_info[index]['docs'])\n            self.__excludify(condition, exclude, index)\n\n    def filter_opened(self, exclude=True):\n        \"\"\"\n        Filter out opened indices from ``indices``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering open indices')\n        self.get_index_state()\n        self.empty_list_check()\n        for index in self.working_list():\n            condition = self.index_info[index]['state'] == 'open'\n            self.loggit.debug('Index %s state: %s', index, self.index_info[index]['state'])\n            self.__excludify(condition, exclude, index)\n\n    def filter_allocated(self, key=None, value=None, allocation_type='require', exclude=True):\n        \"\"\"\n        Match indices that have the routing allocation rule of ``key=value`` from\n        ``indices``\n\n        :param key: The allocation attribute to check for\n        :param value: The value to check for\n        :param allocation_type: Type of allocation to apply\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is `T`rue`\n        \"\"\"\n        self.loggit.debug('Filtering indices with shard routing allocation rules')\n        if not key:\n            raise MissingArgument('No value for \"key\" provided')\n        if not value:\n            raise MissingArgument('No value for \"value\" provided')\n        if allocation_type not in ['include', 'exclude', 'require']:\n            raise ValueError(f'Invalid \"allocation_type\": {allocation_type}')\n        self.get_index_settings()\n        self.get_index_state()\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        has_routing = working_list[index]['settings']['index']['routing']['allocation'][allocation_type][key] == value\n                    except KeyError:\n                        has_routing = False\n                    msg = f'{index}: Routing (mis)match: index.routing.allocation.{allocation_type}.{key}={value}.'\n                    self.__excludify(has_routing, exclude, index, msg)\n\n    def filter_none(self):\n        \"\"\"The legendary NULL filter\"\"\"\n        self.loggit.debug('\"None\" filter selected.  No filtering will be done.')\n\n    def filter_by_alias(self, aliases=None, exclude=False):\n        \"\"\"\n        Match indices which are associated with the alias or list of aliases\n        identified by ``aliases``. Indices must appear in all aliases in list\n        ``aliases`` or a 404 error will result, leading to no indices being matched.\n\n        :param aliases: A list of alias names.\n        :type aliases: list\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices matching aliases: \"%s\"', aliases)\n        if not aliases:\n            raise MissingArgument('No value for \"aliases\" provided')\n        aliases = ensure_list(aliases)\n        self.empty_list_check()\n        for lst in chunk_index_list(self.indices):\n            try:\n                has_alias = list(self.client.indices.get_alias(index=to_csv(lst), name=to_csv(aliases)).keys())\n                self.loggit.debug('has_alias: %s', has_alias)\n            except NotFoundError:\n                has_alias = []\n            for index in lst:\n                if index in has_alias:\n                    isness = 'is'\n                    condition = True\n                else:\n                    isness = 'is not'\n                    condition = False\n                msg = f'{index} {isness} associated with aliases: {aliases}'\n                self.__excludify(condition, exclude, index, msg)\n\n    def filter_by_count(self, count=None, reverse=True, use_age=False, pattern=None, source='creation_date', timestring=None, field=None, stats_result='min_value', exclude=True):\n        \"\"\"\n        Remove indices from the actionable list beyond the number ``count``, sorted\n        reverse-alphabetically by default.  If you set ``reverse=False``, it will\n        be sorted alphabetically.\n\n        The default is usually what you will want. If only one kind of index is\n        provided--for example, indices matching ``logstash-%Y.%m.%d`` -- then\n        reverse alphabetical sorting will mean the oldest will remain in the list,\n        because lower numbers in the dates mean older indices.\n\n        By setting ``reverse=False``, then ``index3`` will be deleted before\n        ``index2``, which will be deleted before ``index1``\n\n        ``use_age`` allows ordering indices by age. Age is determined by the index\n        creation date by default, but you can specify an ``source`` of ``name``,\n        ``max_value``, or ``min_value``. The ``name`` `source` requires the\n        timestring argument.\n\n        :param count: Filter indices beyond ``count``.\n        :param reverse: The filtering direction. (default: ``True``).\n        :param use_age: Sort indices by age.  ``source`` is required in this case.\n        :param pattern: Select indices to count from a regular expression pattern.\n            This pattern must have one and only one capture group. This can allow\n            a single ``count`` filter instance to operate against any number of\n            matching patterns, and keep ``count`` of each index in that group.\n            For example, given a ``pattern`` of ``'^(.*)-\\\\d{6}$'``, it will match\n            both ``rollover-000001`` and ``index-999990``, but not\n            ``logstash-2017.10.12``. Following the same example, if my cluster\n            also had ``rollover-000002`` through ``rollover-000010`` and\n            ``index-888888`` through ``index-999999``, it will process both groups\n            of indices, and include or exclude the ``count`` of each.\n        :param source: Source of index age. Can be one of ``name``,\n            ``creation_date``, or ``field_stats``. Default: ``creation_date``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used if ``source=name``.\n        :param field: A timestamp field name.  Only used if ``source=field_stats``.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used if\n            ``source=field_stats``. It determines whether to reference the minimum\n            or maximum value of ``field`` in each index.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices by count')\n        if not count:\n            raise MissingArgument('No value for \"count\" provided')\n        self.get_index_state()\n        self.get_index_settings()\n        working_list = self.working_list()\n        if pattern:\n            try:\n                regex = re.compile(pattern)\n                if regex.groups < 1:\n                    raise ConfigurationError(f'No regular expression group found in {pattern}')\n                if regex.groups > 1:\n                    raise ConfigurationError(f'More than 1 regular expression group found in {pattern}')\n                prune_these = list(filter(lambda x: regex.match(x) is None, working_list))\n                filtered_indices = working_list\n                for index in prune_these:\n                    msg = '{index} does not match regular expression {pattern}.'\n                    condition = True\n                    exclude = True\n                    self.__excludify(condition, exclude, index, msg)\n                    filtered_indices.remove(index)\n                presorted = sorted(filtered_indices, key=lambda x: regex.match(x).group(1))\n            except Exception as exc:\n                raise ActionError(f'Unable to process pattern: \"{pattern}\". Error: {exc}') from exc\n            groups = []\n            for _, g in itertools.groupby(presorted, key=lambda x: regex.match(x).group(1)):\n                groups.append(list(g))\n        else:\n            groups = [working_list]\n        for group in groups:\n            if use_age:\n                if source != 'name':\n                    self.loggit.warning('Cannot get age information from closed indices unless source=\"name\".  Omitting any closed indices.')\n                    self.filter_closed()\n                self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n                sorted_indices = self._sort_by_age(group, reverse=reverse)\n            else:\n                sorted_indices = sorted(group, reverse=reverse)\n            idx = 1\n            for index in sorted_indices:\n                msg = f'{index} is {idx} of specified count of {count}.'\n                condition = True if idx <= count else False\n                self.__excludify(condition, exclude, index, msg)\n                idx += 1\n\n    def filter_by_shards(self, number_of_shards=None, shard_filter_behavior='greater_than', exclude=False):\n        \"\"\"\n        Match ``indices`` with a given shard count.\n\n        Selects all indices with a shard count ``greater_than`` ``number_of_shards``\n        by default. Use ``shard_filter_behavior`` to select indices with shard\n        count ``greater_than``, ``greater_than_or_equal``, ``less_than``,\n        ``less_than_or_equal``, or ``equal`` to ``number_of_shards``.\n\n        :param number_of_shards: shard threshold\n        :param shard_filter_behavior: Do you want to filter on ``greater_than``,\n            ``greater_than_or_equal``, ``less_than``, ``less_than_or_equal``,\n            or ``equal``?\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by number of shards')\n        if not number_of_shards:\n            raise MissingArgument('No value for \"number_of_shards\" provided')\n        if shard_filter_behavior not in ['greater_than', 'less_than', 'greater_than_or_equal', 'less_than_or_equal', 'equal']:\n            raise ValueError(f'Invalid value for \"shard_filter_behavior\": {shard_filter_behavior}')\n        if number_of_shards < 1 or (shard_filter_behavior == 'less_than' and number_of_shards == 1):\n            raise ValueError(f'Unacceptable value: {number_of_shards} -- \"number_of_shards\" cannot be less than 1. A valid index will have at least one shard.')\n        self.get_index_settings()\n        self.empty_list_check()\n        for index in self.working_list():\n            self.loggit.debug('Filter by number of shards: Index: %s', index)\n            if shard_filter_behavior == 'greater_than':\n                condition = int(self.index_info[index]['number_of_shards']) > number_of_shards\n            elif shard_filter_behavior == 'less_than':\n                condition = int(self.index_info[index]['number_of_shards']) < number_of_shards\n            elif shard_filter_behavior == 'greater_than_or_equal':\n                condition = int(self.index_info[index]['number_of_shards']) >= number_of_shards\n            elif shard_filter_behavior == 'less_than_or_equal':\n                condition = int(self.index_info[index]['number_of_shards']) <= number_of_shards\n            else:\n                condition = int(self.index_info[index]['number_of_shards']) == number_of_shards\n            self.__excludify(condition, exclude, index)\n\n    def filter_period(self, period_type='relative', source='name', range_from=None, range_to=None, date_from=None, date_to=None, date_from_format=None, date_to_format=None, timestring=None, unit=None, field=None, stats_result='min_value', intersect=False, week_starts_on='sunday', epoch=None, exclude=False):\n        \"\"\"\n        Match ``indices`` with ages within a given period.\n\n        :param period_type: Can be either ``absolute`` or ``relative``.  Default\n            is ``relative``. ``date_from`` and ``date_to`` are required when using\n            ``period_type='absolute'``. ``range_from`` and ``range_to`` are required\n            with ``period_type='relative'``.\n        :param source: Source of index age. Can be ``name``, ``creation_date``,\n            or ``field_stats``\n        :param range_from: How many ``unit`` (s) in the past/future is the origin?\n        :param range_to: How many ``unit`` (s) in the past/future is the end point?\n        :param date_from: The simplified date for the start of the range\n        :param date_to: The simplified date for the end of the range.  If this\n            value is the same as ``date_from``, the full value of ``unit`` will be\n            extrapolated for the range.  For example, if ``unit=months``, and\n            ``date_from`` and ``date_to`` are both ``2017.01``, then the entire\n            month of January 2017 will be the absolute date range.\n        :param date_from_format: The :py:func:`time.strftime` string used to\n            parse ``date_from``\n        :param date_to_format: The :py:func:`time.strftime` string used to\n            parse ``date_to``\n        :param timestring: An :py:func:`time.strftime` string to match the datestamp\n            in an index name. Only used for index filtering by ``name``.\n        :param unit: One of ``hours``, ``days``, ``weeks``, ``months``, or ``years``.\n        :param field: A timestamp field name.  Only used for ``field_stats`` based\n            calculations.\n        :param stats_result: Either ``min_value`` or ``max_value``.  Only used in\n            conjunction with ``source='field_stats'`` to choose whether to reference\n            the min or max result value.\n        :param intersect: Only used when ``source='field_stats'``. If ``True``,\n            only indices where both ``min_value`` and ``max_value`` are within the\n            period will be selected. If ``False``, it will use whichever you specified.\n            Default is ``False`` to preserve expected behavior.\n        :param week_starts_on: Either ``sunday`` or ``monday``. Default is ``sunday``\n        :param epoch: An epoch timestamp used to establish a point of reference for\n            calculations. If not provided, the current time will be used.\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by period')\n        if period_type not in ['absolute', 'relative']:\n            raise ValueError(f'Unacceptable value: {period_type} -- \"period_type\" must be either \"absolute\" or \"relative\".')\n        if period_type == 'relative':\n            func = date_range\n            args = [unit, range_from, range_to, epoch]\n            kwgs = {'week_starts_on': week_starts_on}\n            if not isinstance(range_from, int) or not isinstance(range_to, int):\n                raise ConfigurationError('\"range_from\" and \"range_to\" must be integer values')\n        else:\n            func = absolute_date_range\n            args = [unit, date_from, date_to]\n            kwgs = {'date_from_format': date_from_format, 'date_to_format': date_to_format}\n            for reqd in [date_from, date_to, date_from_format, date_to_format]:\n                if not reqd:\n                    raise ConfigurationError('Must provide \"date_from\", \"date_to\", \"date_from_format\", and \"date_to_format\" with absolute period_type')\n        self.get_index_settings()\n        try:\n            start, end = func(*args, **kwgs)\n        except Exception as exc:\n            report_failure(exc)\n        self._calculate_ages(source=source, timestring=timestring, field=field, stats_result=stats_result)\n        for index in self.working_list():\n            try:\n                if source == 'field_stats' and intersect:\n                    min_age = int(self.index_info[index]['age']['min_value'])\n                    max_age = int(self.index_info[index]['age']['max_value'])\n                    msg = f'Index \"{index}\", timestamp field \"{field}\", min_value ({min_age}), max_value ({max_age}), period start: \"{start}\", period end, \"{end}\"'\n                    inrange = min_age >= start and max_age <= end\n                else:\n                    age = int(self.index_info[index]['age'][self.age_keyfield])\n                    msg = f'Index \"{index}\" age ({age}), period start: \"{start}\", period end, \"{end}\"'\n                    inrange = age >= start and age <= end\n                self.__excludify(inrange, exclude, index, msg)\n            except KeyError:\n                self.loggit.debug('Index \"%s\" does not meet provided criteria. Removing from list.', index)\n                self.indices.remove(index)\n\n    def filter_ilm(self, exclude=True):\n        \"\"\"\n        Match indices that have the setting ``index.lifecycle.name``\n\n        :param exclude: If ``exclude=True``, this filter will remove matching\n            ``indices``. If ``exclude=False``, then only matching indices will be\n            kept in ``indices``. Default is ``True``\n        \"\"\"\n        self.loggit.debug('Filtering indices with index.lifecycle.name')\n        index_lists = chunk_index_list(self.indices)\n        if index_lists == [['']]:\n            self.loggit.debug('Empty working list. No ILM indices to filter.')\n            return\n        for lst in index_lists:\n            working_list = self._get_indices_settings(lst)\n            if working_list:\n                for index in list(working_list.keys()):\n                    try:\n                        subvalue = working_list[index]['settings']['index']['lifecycle']\n                        has_ilm = 'name' in subvalue\n                        msg = f'{index} has index.lifecycle.name {subvalue['name']}'\n                    except KeyError:\n                        has_ilm = False\n                        msg = f'index.lifecycle.name is not set for index {index}'\n                    self.__excludify(has_ilm, exclude, index, msg)\n\n    def iterate_filters(self, filter_dict):\n        \"\"\"\n        Iterate over the filters defined in ``config`` and execute them.\n\n        :param filter_dict: The configuration dictionary\n\n        .. note:: ``filter_dict`` should be a dictionary with the following form:\n        .. code-block:: python\n\n                { 'filters' : [\n                        {\n                            'filtertype': 'the_filter_type',\n                            'key1' : 'value1',\n                            ...\n                            'keyN' : 'valueN'\n                        }\n                    ]\n                }\n\n        \"\"\"\n        self.loggit.debug('Iterating over a list of filters')\n        if 'filters' not in filter_dict or len(filter_dict['filters']) < 1:\n            self.loggit.info('No filters in config.  Returning unaltered object.')\n            return\n        self.loggit.debug('All filters: %s', filter_dict['filters'])\n        for fil in filter_dict['filters']:\n            self.loggit.debug('Top of the loop: %s', self.indices)\n            self.loggit.debug('Un-parsed filter args: %s', fil)\n            chk = SchemaCheck(fil, filterstructure(), 'filter', 'IndexList.iterate_filters').result()\n            msg = f'Parsed filter args: {chk}'\n            self.loggit.debug(msg)\n            method = self.__map_method(fil['filtertype'])\n            del fil['filtertype']\n            if fil:\n                self.loggit.debug('Filter args: %s', fil)\n                self.loggit.debug('Pre-instance: %s', self.indices)\n                method(**fil)\n                self.loggit.debug('Post-instance: %s', self.indices)\n            else:\n                method()\n\n    def filter_by_size(self, size_threshold=None, threshold_behavior='greater_than', exclude=False, size_behavior='primary'):\n        \"\"\"\n        Remove indices from the actionable list based on index size.\n\n        ``threshold_behavior``, when set to ``greater_than`` (default), includes\n        if it the index tests to be larger than ``size_threshold``. When set to\n        ``less_than``, it includes if the index is smaller than ``size_threshold``\n\n        :param size_threshold: Filter indices over *n* gigabytes\n        :param threshold_behavior: Size to filter, either ``greater_than`` or\n            ``less_than``. Defaults to ``greater_than`` to preserve backwards\n            compatability.\n        :param size_behavior: Size that used to filter, either ``primary`` or\n            ``total``. Defaults to ``primary``\n        :param exclude: If ``exclude=True``, this filter will remove matching indices\n            from ``indices``. If ``exclude=False``, then only matching indices\n            will be kept in ``indices``. Default is ``False``\n        \"\"\"\n        self.loggit.debug('Filtering indices by index size')\n        if not size_threshold:\n            raise MissingArgument('No value for \"size_threshold\" provided')\n        if size_behavior not in ['primary', 'total']:\n            raise ValueError(f'Invalid value for \"size_behavior\": {size_behavior}')\n        if threshold_behavior not in ['greater_than', 'less_than']:\n            raise ValueError(f'Invalid value for \"threshold_behavior\": {threshold_behavior}')\n        index_size_limit = float(size_threshold) * 2 ** 30\n        msg = 'Cannot get disk usage info from closed indices. Omitting any closed indices.'\n        self.loggit.debug(msg)\n        self.get_index_state()\n        self.get_index_stats()\n        self.filter_closed()\n        working_list = self.working_list()\n        for index in working_list:\n            if size_behavior == 'primary':\n                index_size = self.index_info[index]['primary_size_in_bytes']\n            else:\n                index_size = self.index_info[index]['size_in_bytes']\n            msg = f'{index}, index size is {byte_size(index_size)} and size limit is {byte_size(index_size_limit)}.'\n            if threshold_behavior == 'greater_than':\n                self.__excludify(index_size > index_size_limit, exclude, index, msg)\n            elif threshold_behavior == 'less_than':\n                self.__excludify(index_size < index_size_limit, exclude, index, msg)",
    "curator/exceptions.py": "\"\"\"Curator Exceptions\"\"\"\n\nclass CuratorException(Exception):\n    \"\"\"\n    Base class for all exceptions raised by Curator which are not Elasticsearch\n    exceptions.\n    \"\"\"\n\nclass ConfigurationError(CuratorException):\n    \"\"\"\n    Exception raised when a misconfiguration is detected\n    \"\"\"\n\nclass MissingArgument(CuratorException):\n    \"\"\"\n    Exception raised when a needed argument is not passed.\n    \"\"\"\n\nclass NoIndices(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty index_list\n    \"\"\"\n\nclass NoSnapshots(CuratorException):\n    \"\"\"\n    Exception raised when an operation is attempted against an empty snapshot_list\n    \"\"\"\n\nclass ActionError(CuratorException):\n    \"\"\"\n    Exception raised when an action (against an index_list or snapshot_list) cannot be taken.\n    \"\"\"\n\nclass FailedExecution(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to execute for some reason.\n    \"\"\"\n\nclass SnapshotInProgress(ActionError):\n    \"\"\"\n    Exception raised when a snapshot is already in progress\n    \"\"\"\n\nclass ActionTimeout(CuratorException):\n    \"\"\"\n    Exception raised when an action fails to complete in the allotted time\n    \"\"\"\n\nclass FailedSnapshot(CuratorException):\n    \"\"\"\n    Exception raised when a snapshot does not complete with state SUCCESS\n    \"\"\"\n\nclass FailedRestore(CuratorException):\n    \"\"\"\n    Exception raised when a Snapshot Restore does not restore all selected indices\n    \"\"\"\n\nclass FailedReindex(CuratorException):\n    \"\"\"\n    Exception raised when failures are found in the reindex task response\n    \"\"\"\n\nclass ClientException(CuratorException):\n    \"\"\"\n    Exception raised when the Elasticsearch client and/or connection is the source of the problem.\n    \"\"\"\n\nclass LoggingException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot either log or configure logging\n    \"\"\"\n\nclass RepositoryException(CuratorException):\n    \"\"\"\n    Exception raised when Curator cannot verify a snapshot repository\n    \"\"\"\n\nclass SearchableSnapshotException(CuratorException):\n    \"\"\"\n    Exception raised when Curator finds something out of order with a Searchable Snapshot\n    \"\"\""
  }
}