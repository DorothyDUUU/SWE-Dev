{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-questionnaire_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/questionnaire_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import questionnaire\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass QuestionnaireTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        return questionnaire.Questionnaire(js)\n    \n    def testQuestionnaire1(self):\n        inst = self.instantiate_from(\"questionnaire-example-bluebook.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Questionnaire instance\")\n        self.implQuestionnaire1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        inst2 = questionnaire.Questionnaire(js)\n        self.implQuestionnaire1(inst2)\n    \n    def implQuestionnaire1(self, inst):\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2013-02-19\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2013-02-19\")\n        self.assertEqual(inst.id, \"bb\")\n        self.assertEqual(inst.item[0].item[0].item[0].linkId, \"nameOfChild\")\n        self.assertEqual(inst.item[0].item[0].item[0].text, \"Name of child\")\n        self.assertEqual(inst.item[0].item[0].item[0].type, \"string\")\n        self.assertEqual(inst.item[0].item[0].item[1].answerOption[0].valueCoding.code, \"F\")\n        self.assertEqual(inst.item[0].item[0].item[1].answerOption[1].valueCoding.code, \"M\")\n        self.assertEqual(inst.item[0].item[0].item[1].linkId, \"sex\")\n        self.assertEqual(inst.item[0].item[0].item[1].text, \"Sex\")\n        self.assertEqual(inst.item[0].item[0].item[1].type, \"choice\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"group\")\n        self.assertEqual(inst.item[0].item[0].type, \"group\")\n        self.assertEqual(inst.item[0].item[1].item[0].linkId, \"birthWeight\")\n        self.assertEqual(inst.item[0].item[1].item[0].text, \"Birth weight (kg)\")\n        self.assertEqual(inst.item[0].item[1].item[0].type, \"decimal\")\n        self.assertEqual(inst.item[0].item[1].item[1].linkId, \"birthLength\")\n        self.assertEqual(inst.item[0].item[1].item[1].text, \"Birth length (cm)\")\n        self.assertEqual(inst.item[0].item[1].item[1].type, \"decimal\")\n        self.assertEqual(inst.item[0].item[1].item[2].answerOption[0].valueCoding.code, \"INJECTION\")\n        self.assertEqual(inst.item[0].item[1].item[2].answerOption[1].valueCoding.code, \"INTRAVENOUS\")\n        self.assertEqual(inst.item[0].item[1].item[2].answerOption[2].valueCoding.code, \"ORAL\")\n        self.assertTrue(inst.item[0].item[1].item[2].item[0].enableWhen[0].answerBoolean)\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].operator, \"exists\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].enableWhen[0].question, \"vitaminKgiven\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].linkId, \"vitaminiKDose1\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].text, \"1st dose\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[0].type, \"dateTime\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].linkId, \"vitaminiKDose2\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].text, \"2nd dose\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].item[1].type, \"dateTime\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].linkId, \"vitaminKgivenDoses\")\n        self.assertEqual(inst.item[0].item[1].item[2].item[0].type, \"group\")\n        self.assertEqual(inst.item[0].item[1].item[2].linkId, \"vitaminKgiven\")\n        self.assertEqual(inst.item[0].item[1].item[2].text, \"Vitamin K given\")\n        self.assertEqual(inst.item[0].item[1].item[2].type, \"choice\")\n        self.assertEqual(inst.item[0].item[1].item[3].item[0].linkId, \"hepBgivenDate\")\n        self.assertEqual(inst.item[0].item[1].item[3].item[0].text, \"Date given\")\n        self.assertEqual(inst.item[0].item[1].item[3].item[0].type, \"date\")\n        self.assertEqual(inst.item[0].item[1].item[3].linkId, \"hepBgiven\")\n        self.assertEqual(inst.item[0].item[1].item[3].text, \"Hep B given y / n\")\n        self.assertEqual(inst.item[0].item[1].item[3].type, \"boolean\")\n        self.assertEqual(inst.item[0].item[1].item[4].linkId, \"abnormalitiesAtBirth\")\n        self.assertEqual(inst.item[0].item[1].item[4].text, \"Abnormalities noted at birth\")\n        self.assertEqual(inst.item[0].item[1].item[4].type, \"string\")\n        self.assertEqual(inst.item[0].item[1].linkId, \"neonatalInformation\")\n        self.assertEqual(inst.item[0].item[1].text, \"Neonatal Information\")\n        self.assertEqual(inst.item[0].item[1].type, \"group\")\n        self.assertEqual(inst.item[0].linkId, \"birthDetails\")\n        self.assertEqual(inst.item[0].text, \"Birth details - To be completed by health professional\")\n        self.assertEqual(inst.item[0].type, \"group\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"AU\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.publisher, \"New South Wales Department of Health\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.subjectType[0], \"Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"NSW Government My Personal Health Record\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/Questionnaire/bb\")\n    \n    def testQuestionnaire2(self):\n        inst = self.instantiate_from(\"questionnaire-example-f201-lifelines.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Questionnaire instance\")\n        self.implQuestionnaire2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        inst2 = questionnaire.Questionnaire(js)\n        self.implQuestionnaire2(inst2)\n    \n    def implQuestionnaire2(self, inst):\n        self.assertEqual(inst.code[0].code, \"VL 1-1, 18-65_1.2.2\")\n        self.assertEqual(inst.code[0].display, \"Lifelines Questionnaire 1 part 1\")\n        self.assertEqual(inst.code[0].system, \"http://example.org/system/code/lifelines/nl\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2010\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2010\")\n        self.assertEqual(inst.id, \"f201\")\n        self.assertEqual(inst.item[0].linkId, \"1\")\n        self.assertEqual(inst.item[0].text, \"Do you have allergies?\")\n        self.assertEqual(inst.item[0].type, \"boolean\")\n        self.assertEqual(inst.item[1].item[0].linkId, \"2.1\")\n        self.assertEqual(inst.item[1].item[0].text, \"What is your gender?\")\n        self.assertEqual(inst.item[1].item[0].type, \"string\")\n        self.assertEqual(inst.item[1].item[1].linkId, \"2.2\")\n        self.assertEqual(inst.item[1].item[1].text, \"What is your date of birth?\")\n        self.assertEqual(inst.item[1].item[1].type, \"date\")\n        self.assertEqual(inst.item[1].item[2].linkId, \"2.3\")\n        self.assertEqual(inst.item[1].item[2].text, \"What is your country of birth?\")\n        self.assertEqual(inst.item[1].item[2].type, \"string\")\n        self.assertEqual(inst.item[1].item[3].linkId, \"2.4\")\n        self.assertEqual(inst.item[1].item[3].text, \"What is your marital status?\")\n        self.assertEqual(inst.item[1].item[3].type, \"string\")\n        self.assertEqual(inst.item[1].linkId, \"2\")\n        self.assertEqual(inst.item[1].text, \"General questions\")\n        self.assertEqual(inst.item[1].type, \"group\")\n        self.assertEqual(inst.item[2].item[0].linkId, \"3.1\")\n        self.assertEqual(inst.item[2].item[0].text, \"Do you smoke?\")\n        self.assertEqual(inst.item[2].item[0].type, \"boolean\")\n        self.assertEqual(inst.item[2].item[1].linkId, \"3.2\")\n        self.assertEqual(inst.item[2].item[1].text, \"Do you drink alchohol?\")\n        self.assertEqual(inst.item[2].item[1].type, \"boolean\")\n        self.assertEqual(inst.item[2].linkId, \"3\")\n        self.assertEqual(inst.item[2].text, \"Intoxications\")\n        self.assertEqual(inst.item[2].type, \"group\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.subjectType[0], \"Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/Questionnaire/f201\")\n    \n    def testQuestionnaire3(self):\n        inst = self.instantiate_from(\"questionnaire-example-gcs.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Questionnaire instance\")\n        self.implQuestionnaire3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        inst2 = questionnaire.Questionnaire(js)\n        self.implQuestionnaire3(inst2)\n    \n    def implQuestionnaire3(self, inst):\n        self.assertEqual(inst.code[0].code, \"9269-2\")\n        self.assertEqual(inst.code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.contained[0].id, \"motor\")\n        self.assertEqual(inst.contained[1].id, \"verbal\")\n        self.assertEqual(inst.contained[2].id, \"eye\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-08-03\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-08-03\")\n        self.assertEqual(inst.id, \"gcs\")\n        self.assertEqual(inst.item[0].answerValueSet, \"#verbal\")\n        self.assertEqual(inst.item[0].code[0].code, \"9270-0\")\n        self.assertEqual(inst.item[0].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[0].type, \"choice\")\n        self.assertEqual(inst.item[1].answerValueSet, \"#motor\")\n        self.assertEqual(inst.item[1].code[0].code, \"9268-4\")\n        self.assertEqual(inst.item[1].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].linkId, \"1.2\")\n        self.assertEqual(inst.item[1].type, \"choice\")\n        self.assertEqual(inst.item[2].answerValueSet, \"#eye\")\n        self.assertEqual(inst.item[2].code[0].code, \"9267-6\")\n        self.assertEqual(inst.item[2].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].linkId, \"1.3\")\n        self.assertEqual(inst.item[2].type, \"choice\")\n        self.assertEqual(inst.publisher, \"FHIR Project team\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.subjectType[0], \"Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Glasgow Coma Score\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/Questionnaire/gcs\")\n    \n    def testQuestionnaire4(self):\n        inst = self.instantiate_from(\"questionnaire-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Questionnaire instance\")\n        self.implQuestionnaire4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        inst2 = questionnaire.Questionnaire(js)\n        self.implQuestionnaire4(inst2)\n    \n    def implQuestionnaire4(self, inst):\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2012-01\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2012-01\")\n        self.assertEqual(inst.id, \"3141\")\n        self.assertEqual(inst.item[0].code[0].code, \"COMORBIDITY\")\n        self.assertEqual(inst.item[0].code[0].system, \"http://example.org/system/code/sections\")\n        self.assertEqual(inst.item[0].item[0].answerValueSet, \"http://hl7.org/fhir/ValueSet/yesnodontknow\")\n        self.assertEqual(inst.item[0].item[0].code[0].code, \"COMORB\")\n        self.assertEqual(inst.item[0].item[0].code[0].system, \"http://example.org/system/code/questions\")\n        self.assertEqual(inst.item[0].item[0].item[0].code[0].code, \"CARDIAL\")\n        self.assertEqual(inst.item[0].item[0].item[0].code[0].system, \"http://example.org/system/code/sections\")\n        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.code, \"Y\")\n        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].answerCoding.system, \"http://terminology.hl7.org/CodeSystem/v2-0136\")\n        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].operator, \"=\")\n        self.assertEqual(inst.item[0].item[0].item[0].enableWhen[0].question, \"1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].answerValueSet, \"http://hl7.org/fhir/ValueSet/yesnodontknow\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].code, \"COMORBCAR\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].code[0].system, \"http://example.org/system/code/questions\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].answerValueSet, \"http://hl7.org/fhir/ValueSet/yesnodontknow\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].code, \"COMCAR00\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].display, \"Angina Pectoris\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[0].system, \"http://example.org/system/code/questions\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].code, \"194828000\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].display, \"Angina (disorder)\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].code[1].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].linkId, \"1.1.1.1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].prefix, \"1.1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[0].type, \"choice\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].answerValueSet, \"http://hl7.org/fhir/ValueSet/yesnodontknow\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].code, \"22298006\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].display, \"Myocardial infarction (disorder)\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].code[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].linkId, \"1.1.1.1.2\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].prefix, \"1.1.2\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].item[1].type, \"choice\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].linkId, \"1.1.1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].prefix, \"1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[0].type, \"choice\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].answerValueSet, \"http://hl7.org/fhir/ValueSet/yesnodontknow\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].code, \"COMORBVAS\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].code[0].system, \"http://example.org/system/code/questions\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].linkId, \"1.1.1.2\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].prefix, \"1.2\")\n        self.assertEqual(inst.item[0].item[0].item[0].item[1].type, \"choice\")\n        self.assertEqual(inst.item[0].item[0].item[0].linkId, \"1.1.1\")\n        self.assertEqual(inst.item[0].item[0].item[0].type, \"group\")\n        self.assertEqual(inst.item[0].item[0].linkId, \"1.1\")\n        self.assertEqual(inst.item[0].item[0].prefix, \"1\")\n        self.assertEqual(inst.item[0].item[0].type, \"choice\")\n        self.assertEqual(inst.item[0].linkId, \"1\")\n        self.assertEqual(inst.item[0].type, \"group\")\n        self.assertEqual(inst.item[1].code[0].code, \"HISTOPATHOLOGY\")\n        self.assertEqual(inst.item[1].code[0].system, \"http://example.org/system/code/sections\")\n        self.assertEqual(inst.item[1].item[0].code[0].code, \"ABDOMINAL\")\n        self.assertEqual(inst.item[1].item[0].code[0].system, \"http://example.org/system/code/sections\")\n        self.assertEqual(inst.item[1].item[0].item[0].code[0].code, \"STADPT\")\n        self.assertEqual(inst.item[1].item[0].item[0].code[0].display, \"pT category\")\n        self.assertEqual(inst.item[1].item[0].item[0].code[0].system, \"http://example.org/system/code/questions\")\n        self.assertEqual(inst.item[1].item[0].item[0].linkId, \"2.1.2\")\n        self.assertEqual(inst.item[1].item[0].item[0].type, \"choice\")\n        self.assertEqual(inst.item[1].item[0].linkId, \"2.1\")\n        self.assertEqual(inst.item[1].item[0].type, \"group\")\n        self.assertEqual(inst.item[1].linkId, \"2\")\n        self.assertEqual(inst.item[1].type, \"group\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.subjectType[0], \"Patient\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Cancer Quality Forum Questionnaire 2012\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/Questionnaire/3141\")\n    \n    def testQuestionnaire5(self):\n        inst = self.instantiate_from(\"questionnaire-cqf-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Questionnaire instance\")\n        self.implQuestionnaire5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Questionnaire\", js[\"resourceType\"])\n        inst2 = questionnaire.Questionnaire(js)\n        self.implQuestionnaire5(inst2)\n    \n    def implQuestionnaire5(self, inst):\n        self.assertEqual(inst.code[0].code, \"44249-1\")\n        self.assertEqual(inst.code[0].display, \"PHQ-9 quick depression assessment panel:-:Pt:^Patient:-:Report.PHQ-9\")\n        self.assertEqual(inst.code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/cqf-library\")\n        self.assertEqual(inst.extension[0].valueCanonical, \"Library/phq-9-logic\")\n        self.assertEqual(inst.id, \"phq-9-questionnaire\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"phq-9\")\n        self.assertEqual(inst.item[0].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[0].code[0].code, \"44250-9\")\n        self.assertEqual(inst.item[0].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[0].linkId, \"LittleInterest\")\n        self.assertTrue(inst.item[0].required)\n        self.assertEqual(inst.item[0].text, \"Little interest or pleasure in doing things\")\n        self.assertEqual(inst.item[0].type, \"choice\")\n        self.assertEqual(inst.item[1].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[1].code[0].code, \"44255-8\")\n        self.assertEqual(inst.item[1].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[1].linkId, \"FeelingDown\")\n        self.assertTrue(inst.item[1].required)\n        self.assertEqual(inst.item[1].text, \"Feeling down, depressed, or hopeless\")\n        self.assertEqual(inst.item[1].type, \"choice\")\n        self.assertEqual(inst.item[2].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[2].code[0].code, \"44259-0\")\n        self.assertEqual(inst.item[2].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[2].linkId, \"TroubleSleeping\")\n        self.assertTrue(inst.item[2].required)\n        self.assertEqual(inst.item[2].text, \"Trouble falling or staying asleep\")\n        self.assertEqual(inst.item[2].type, \"choice\")\n        self.assertEqual(inst.item[3].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[3].code[0].code, \"44254-1\")\n        self.assertEqual(inst.item[3].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[3].linkId, \"FeelingTired\")\n        self.assertTrue(inst.item[3].required)\n        self.assertEqual(inst.item[3].text, \"Feeling tired or having little energy\")\n        self.assertEqual(inst.item[3].type, \"choice\")\n        self.assertEqual(inst.item[4].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[4].code[0].code, \"44251-7\")\n        self.assertEqual(inst.item[4].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[4].linkId, \"BadAppetite\")\n        self.assertTrue(inst.item[4].required)\n        self.assertEqual(inst.item[4].text, \"Poor appetite or overeating\")\n        self.assertEqual(inst.item[4].type, \"choice\")\n        self.assertEqual(inst.item[5].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[5].code[0].code, \"44258-2\")\n        self.assertEqual(inst.item[5].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[5].linkId, \"FeelingBadAboutSelf\")\n        self.assertTrue(inst.item[5].required)\n        self.assertEqual(inst.item[5].text, \"Feeling bad about yourself - or that you are a failure or have let yourself or your family down\")\n        self.assertEqual(inst.item[5].type, \"choice\")\n        self.assertEqual(inst.item[6].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[6].code[0].code, \"44252-5\")\n        self.assertEqual(inst.item[6].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[6].linkId, \"TroubleConcentrating\")\n        self.assertTrue(inst.item[6].required)\n        self.assertEqual(inst.item[6].text, \"Trouble concentrating on things, such as reading the newspaper or watching television\")\n        self.assertEqual(inst.item[6].type, \"choice\")\n        self.assertEqual(inst.item[7].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[7].code[0].code, \"44253-3\")\n        self.assertEqual(inst.item[7].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[7].linkId, \"MovingSpeaking\")\n        self.assertTrue(inst.item[7].required)\n        self.assertEqual(inst.item[7].text, \"Moving or speaking so slowly that other people could have noticed. Or the opposite - being so fidgety or restless that you have been moving around a lot more than usual\")\n        self.assertEqual(inst.item[7].type, \"choice\")\n        self.assertEqual(inst.item[8].code[0].code, \"44261-6\")\n        self.assertEqual(inst.item[8].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[8].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/cqf-expression\")\n        self.assertEqual(inst.item[8].extension[0].valueExpression.expression, \"CalculateTotalScore\")\n        self.assertEqual(inst.item[8].extension[0].valueExpression.language, \"text/cql\")\n        self.assertEqual(inst.item[8].linkId, \"TotalScore\")\n        self.assertTrue(inst.item[8].required)\n        self.assertEqual(inst.item[8].text, \"Total score\")\n        self.assertEqual(inst.item[8].type, \"integer\")\n        self.assertEqual(inst.item[9].answerValueSet, \"http://loinc.org/vs/LL358-3\")\n        self.assertEqual(inst.item[9].code[0].code, \"44256-6\")\n        self.assertEqual(inst.item[9].code[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.item[9].linkId, \"Difficulty\")\n        self.assertTrue(inst.item[9].required)\n        self.assertEqual(inst.item[9].text, \"If you checked off any problems, how difficult have these problems made it for you to do your work, take care of things at home, or get along with other people\")\n        self.assertEqual(inst.item[9].type, \"choice\")\n        self.assertEqual(inst.meta.profile[0], \"http://hl7.org/fhir/StructureDefinition/cqf-questionnaire\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.subjectType[0], \"Patient\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">PHQ-9 Questionnaire with dynamic logic</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Patient Health Questionnaire (PHQ-9)\")\n        self.assertEqual(inst.version, \"1.0.0\")\n\n",
  "GT_file_code": {
    "fhirclient/models/questionnaire.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Questionnaire).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Questionnaire(domainresource.DomainResource):\n    \"\"\" A structured set of questions.\n    \n    A structured set of questions intended to guide the collection of answers\n    from end-users. Questionnaires provide detailed control over order,\n    presentation, phraseology and grouping to allow coherent, consistent data\n    collection.\n    \"\"\"\n    \n    resource_type = \"Questionnaire\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the questionnaire was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Concept that represents the overall questionnaire.\n        List of `Coding` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.derivedFrom = None\n        \"\"\" Instantiates protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the questionnaire.\n        Type `str`. \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the questionnaire is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the questionnaire.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Questions and sections within the Questionnaire.\n        List of `QuestionnaireItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for questionnaire (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the questionnaire was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this questionnaire (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this questionnaire is defined.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectType = None\n        \"\"\" Resource that can be subject of QuestionnaireResponse.\n        List of `str` items. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this questionnaire (human friendly).\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this questionnaire, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the questionnaire.\n        Type `str`. \"\"\"\n        \n        super(Questionnaire, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Questionnaire, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"code\", \"code\", coding.Coding, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"derivedFrom\", \"derivedFrom\", str, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"item\", \"item\", QuestionnaireItem, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectType\", \"subjectType\", str, True, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass QuestionnaireItem(backboneelement.BackboneElement):\n    \"\"\" Questions and sections within the Questionnaire.\n    \n    A particular question, question grouping or display text that is part of\n    the questionnaire.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireItem\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.answerOption = None\n        \"\"\" Permitted answer.\n        List of `QuestionnaireItemAnswerOption` items (represented as `dict` in JSON). \"\"\"\n        \n        self.answerValueSet = None\n        \"\"\" Valueset containing permitted answers.\n        Type `str`. \"\"\"\n        \n        self.code = None\n        \"\"\" Corresponding concept for this item in a terminology.\n        List of `Coding` items (represented as `dict` in JSON). \"\"\"\n        \n        self.definition = None\n        \"\"\" ElementDefinition - details for the item.\n        Type `str`. \"\"\"\n        \n        self.enableBehavior = None\n        \"\"\" all | any.\n        Type `str`. \"\"\"\n        \n        self.enableWhen = None\n        \"\"\" Only allow data when.\n        List of `QuestionnaireItemEnableWhen` items (represented as `dict` in JSON). \"\"\"\n        \n        self.initial = None\n        \"\"\" Initial value(s) when item is first rendered.\n        List of `QuestionnaireItemInitial` items (represented as `dict` in JSON). \"\"\"\n        \n        self.item = None\n        \"\"\" Nested questionnaire items.\n        List of `QuestionnaireItem` items (represented as `dict` in JSON). \"\"\"\n        \n        self.linkId = None\n        \"\"\" Unique id for item in questionnaire.\n        Type `str`. \"\"\"\n        \n        self.maxLength = None\n        \"\"\" No more than this many characters.\n        Type `int`. \"\"\"\n        \n        self.prefix = None\n        \"\"\" E.g. \"1(a)\", \"2.5.3\".\n        Type `str`. \"\"\"\n        \n        self.readOnly = None\n        \"\"\" Don't allow human editing.\n        Type `bool`. \"\"\"\n        \n        self.repeats = None\n        \"\"\" Whether the item may repeat.\n        Type `bool`. \"\"\"\n        \n        self.required = None\n        \"\"\" Whether the item must be included in data results.\n        Type `bool`. \"\"\"\n        \n        self.text = None\n        \"\"\" Primary text for the item.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" group | display | boolean | decimal | integer | date | dateTime +.\n        Type `str`. \"\"\"\n        \n        super(QuestionnaireItem, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireItem, self).elementProperties()\n        js.extend([\n            (\"answerOption\", \"answerOption\", QuestionnaireItemAnswerOption, True, None, False),\n            (\"answerValueSet\", \"answerValueSet\", str, False, None, False),\n            (\"code\", \"code\", coding.Coding, True, None, False),\n            (\"definition\", \"definition\", str, False, None, False),\n            (\"enableBehavior\", \"enableBehavior\", str, False, None, False),\n            (\"enableWhen\", \"enableWhen\", QuestionnaireItemEnableWhen, True, None, False),\n            (\"initial\", \"initial\", QuestionnaireItemInitial, True, None, False),\n            (\"item\", \"item\", QuestionnaireItem, True, None, False),\n            (\"linkId\", \"linkId\", str, False, None, True),\n            (\"maxLength\", \"maxLength\", int, False, None, False),\n            (\"prefix\", \"prefix\", str, False, None, False),\n            (\"readOnly\", \"readOnly\", bool, False, None, False),\n            (\"repeats\", \"repeats\", bool, False, None, False),\n            (\"required\", \"required\", bool, False, None, False),\n            (\"text\", \"text\", str, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nclass QuestionnaireItemAnswerOption(backboneelement.BackboneElement):\n    \"\"\" Permitted answer.\n    \n    One of the permitted answers for a \"choice\" or \"open-choice\" question.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireItemAnswerOption\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.initialSelected = None\n        \"\"\" Whether option is selected by default.\n        Type `bool`. \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Answer value.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" Answer value.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Answer value.\n        Type `int`. \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Answer value.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Answer value.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" Answer value.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        super(QuestionnaireItemAnswerOption, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireItemAnswerOption, self).elementProperties()\n        js.extend([\n            (\"initialSelected\", \"initialSelected\", bool, False, None, False),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", True),\n        ])\n        return js\n\n\nclass QuestionnaireItemEnableWhen(backboneelement.BackboneElement):\n    \"\"\" Only allow data when.\n    \n    A constraint indicating that this item should only be enabled\n    (displayed/allow answers to be captured) when the specified condition is\n    true.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireItemEnableWhen\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.answerBoolean = None\n        \"\"\" Value for question comparison based on operator.\n        Type `bool`. \"\"\"\n        \n        self.answerCoding = None\n        \"\"\" Value for question comparison based on operator.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.answerDate = None\n        \"\"\" Value for question comparison based on operator.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.answerDateTime = None\n        \"\"\" Value for question comparison based on operator.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.answerDecimal = None\n        \"\"\" Value for question comparison based on operator.\n        Type `float`. \"\"\"\n        \n        self.answerInteger = None\n        \"\"\" Value for question comparison based on operator.\n        Type `int`. \"\"\"\n        \n        self.answerQuantity = None\n        \"\"\" Value for question comparison based on operator.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.answerReference = None\n        \"\"\" Value for question comparison based on operator.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.answerString = None\n        \"\"\" Value for question comparison based on operator.\n        Type `str`. \"\"\"\n        \n        self.answerTime = None\n        \"\"\" Value for question comparison based on operator.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.operator = None\n        \"\"\" exists | = | != | > | < | >= | <=.\n        Type `str`. \"\"\"\n        \n        self.question = None\n        \"\"\" Question that determines whether item is enabled.\n        Type `str`. \"\"\"\n        \n        super(QuestionnaireItemEnableWhen, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireItemEnableWhen, self).elementProperties()\n        js.extend([\n            (\"answerBoolean\", \"answerBoolean\", bool, False, \"answer\", True),\n            (\"answerCoding\", \"answerCoding\", coding.Coding, False, \"answer\", True),\n            (\"answerDate\", \"answerDate\", fhirdate.FHIRDate, False, \"answer\", True),\n            (\"answerDateTime\", \"answerDateTime\", fhirdatetime.FHIRDateTime, False, \"answer\", True),\n            (\"answerDecimal\", \"answerDecimal\", float, False, \"answer\", True),\n            (\"answerInteger\", \"answerInteger\", int, False, \"answer\", True),\n            (\"answerQuantity\", \"answerQuantity\", quantity.Quantity, False, \"answer\", True),\n            (\"answerReference\", \"answerReference\", fhirreference.FHIRReference, False, \"answer\", True),\n            (\"answerString\", \"answerString\", str, False, \"answer\", True),\n            (\"answerTime\", \"answerTime\", fhirtime.FHIRTime, False, \"answer\", True),\n            (\"operator\", \"operator\", str, False, None, True),\n            (\"question\", \"question\", str, False, None, True),\n        ])\n        return js\n\n\nclass QuestionnaireItemInitial(backboneelement.BackboneElement):\n    \"\"\" Initial value(s) when item is first rendered.\n    \n    One or more values that should be pre-populated in the answer when\n    initially rendering the questionnaire for user input.\n    \"\"\"\n    \n    resource_type = \"QuestionnaireItemInitial\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" Actual value for initializing the question.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Actual value for initializing the question.\n        Type `bool`. \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Actual value for initializing the question.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" Actual value for initializing the question.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" Actual value for initializing the question.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Actual value for initializing the question.\n        Type `float`. \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Actual value for initializing the question.\n        Type `int`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Actual value for initializing the question.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Actual value for initializing the question.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Actual value for initializing the question.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" Actual value for initializing the question.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueUri = None\n        \"\"\" Actual value for initializing the question.\n        Type `str`. \"\"\"\n        \n        super(QuestionnaireItemInitial, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(QuestionnaireItemInitial, self).elementProperties()\n        js.extend([\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", True),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", True),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", True),\n            (\"valueUri\", \"valueUri\", str, False, \"value\", True),\n        ])\n        return js\n\n\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/questionnaire.py": {
      "Questionnaire.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Questionnaire object that represents a structured set of questions to guide data collection from end-users. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to populate the questionnaire's attributes during initialization.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables. If False, allows non-compliant data types.\n\nAttributes initialized:\n- approvalDate (FHIRDate): The approval date for the questionnaire by the publisher.\n- code (list of Coding): Represents the overall concept of the questionnaire.\n- contact (list of ContactDetail): Publisher's contact details.\n- copyright (str): Publishing or usage restrictions.\n- date (FHIRDateTime): The last modification date of the questionnaire.\n- derivedFrom (list of str): References to protocols or definitions from which this questionnaire is derived.\n- description (str): A narrative description of the questionnaire.\n- effectivePeriod (Period): The timeframe during which the questionnaire is valid.\n- experimental (bool): Indicator for whether the questionnaire is used for testing purposes.\n- identifier (list of Identifier): Additional identifiers for this questionnaire.\n- item (list of QuestionnaireItem): Questions and sections within the questionnaire.\n- jurisdiction (list of CodeableConcept): Applicable jurisdictions for the questionnaire.\n- lastReviewDate (FHIRDate): The most recent review date for the questionnaire.\n- name (str): A computer-friendly name for the questionnaire.\n- publisher (str): The name of the organization or individual responsible for publishing the questionnaire.\n- purpose (str): Reason for creating the questionnaire.\n- status (str): Current state which can be 'draft', 'active', 'retired', or 'unknown'.\n- subjectType (list of str): Possible resource types that can be the subject of a QuestionnaireResponse.\n- title (str): A user-friendly name for the questionnaire.\n- url (str): A globally unique canonical identifier for the questionnaire.\n- useContext (list of UsageContext): The context that the questionnaire content is intended to support.\n- version (str): The business version of the questionnaire.\n\nThe class is part of the FHIR (Fast Healthcare Interoperability Resources) standard, which provides guidelines for data representation in healthcare software applications.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the questionnaire was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.code = None\n        ' Concept that represents the overall questionnaire.\\n        List of `Coding` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.derivedFrom = None\n        ' Instantiates protocol or definition.\\n        List of `str` items. '\n        self.description = None\n        ' Natural language description of the questionnaire.\\n        Type `str`. '\n        self.effectivePeriod = None\n        ' When the questionnaire is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.identifier = None\n        ' Additional identifier for the questionnaire.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.item = None\n        ' Questions and sections within the Questionnaire.\\n        List of `QuestionnaireItem` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for questionnaire (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the questionnaire was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.name = None\n        ' Name for this questionnaire (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this questionnaire is defined.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectType = None\n        ' Resource that can be subject of QuestionnaireResponse.\\n        List of `str` items. '\n        self.title = None\n        ' Name for this questionnaire (human friendly).\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this questionnaire, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the questionnaire.\\n        Type `str`. '\n        super(Questionnaire, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Questionnaire object that represents a structured set of questions to guide data collection from end-users. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to populate the questionnaire's attributes during initialization.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables. If False, allows non-compliant data types.\n\nAttributes initialized:\n- approvalDate (FHIRDate): The approval date for the questionnaire by the publisher.\n- code (list of Coding): Represents the overall concept of the questionnaire.\n- contact (list of ContactDetail): Publisher's contact details.\n- copyright (str): Publishing or usage restrictions.\n- date (FHIRDateTime): The last modification date of the questionnaire.\n- derivedFrom (list of str): References to protocols or definitions from which this questionnaire is derived.\n- description (str): A narrative description of the questionnaire.\n- effectivePeriod (Period): The timeframe during which the questionnaire is valid.\n- experimental (bool): Indicator for whether the questionnaire is used for testing purposes.\n- identifier (list of Identifier): Additional identifiers for this questionnaire.\n- item (list of QuestionnaireItem): Questions and sections within the questionnaire.\n- jurisdiction (list of CodeableConcept): Applicable jurisdictions for the questionnaire.\n- lastReviewDate (FHIRDate): The most recent review date for the questionnaire.\n- name (str): A computer-friendly name for the questionnaire.\n- publisher (str): The name of the organization or individual responsible for publishing the questionnaire.\n- purpose (str): Reason for creating the questionnaire.\n- status (str): Current state which can be 'draft', 'active', 'retired', or 'unknown'.\n- subjectType (list of str): Possible resource types that can be the subject of a QuestionnaireResponse.\n- title (str): A user-friendly name for the questionnaire.\n- url (str): A globally unique canonical identifier for the questionnaire.\n- useContext (list of UsageContext): The context that the questionnaire content is intended to support.\n- version (str): The business version of the questionnaire.\n\nThe class is part of the FHIR (Fast Healthcare Interoperability Resources) standard, which provides guidelines for data representation in healthcare software applications.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Questionnaire(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance, facilitating the handling of FHIR-compliant date strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in FHIR format (ISO 8601). If provided, it must match the pattern defined by the class's regular expression `_REGEX`, which enforces valid date formats.\n\nAttributes:\n- self.date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python datetime object representing the parsed date. If `jsonval` is None or not a valid format, this will remain None.\n- self.origval (Union[str, None]): Stores the original `jsonval` passed during initialization for reference.\n\nRaises:\n- TypeError: If `jsonval` is not a string.\n- ValueError: If `jsonval` does not conform to the expected date format.\n\nThe constructor leverages the `_from_string` method to convert a valid FHIR date string into a `datetime.date` object and uses the `_REGEX` constant to validate the input format during initialization.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance, facilitating the handling of FHIR-compliant date strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in FHIR format (ISO 8601). If provided, it must match the pattern defined by the class's regular expression `_REGEX`, which enforces valid date formats.\n\nAttributes:\n- self.date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python datetime object representing the parsed date. If `jsonval` is None or not a valid format, this will remain None.\n- self.origval (Union[str, None]): Stores the original `jsonval` passed during initialization for reference.\n\nRaises:\n- TypeError: If `jsonval` is not a string.\n- ValueError: If `jsonval` does not conform to the expected date format.\n\nThe constructor leverages the `_from_string` method to convert a valid FHIR date string into a `datetime.date` object and uses the `_REGEX` constant to validate the input format during initialization.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Handles attribute assignment for the FHIRDate class, specifically synchronizing the internal `date` field with the provided property value. \n\nParameters:\n- `prop`: The name of the attribute being set. If it is either 'date' or the class constant `_FIELD`, the method clears the `origval` attribute and updates both the `date` and `_FIELD` attributes to reflect the new value. \n- `value`: The value to assign to the specified property. \n\nSide Effects:\n- Resets `origval` to None when the attributes `date` or `_FIELD` are modified, ensuring that the class maintains consistency between its fields.\n\nConstants:\n- `_FIELD`: A class-level constant defined as \"date\", which determines which specific field is synchronized with `date` during assignment.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Handles attribute assignment for the FHIRDate class, specifically synchronizing the internal `date` field with the provided property value. \n\nParameters:\n- `prop`: The name of the attribute being set. If it is either 'date' or the class constant `_FIELD`, the method clears the `origval` attribute and updates both the `date` and `_FIELD` attributes to reflect the new value. \n- `value`: The value to assign to the specified property. \n\nSide Effects:\n- Resets `origval` to None when the attributes `date` or `_FIELD` are modified, ensuring that the class maintains consistency between its fields.\n\nConstants:\n- `_FIELD`: A class-level constant defined as \"date\", which determines which specific field is synchronized with `date` during assignment.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create the FHIRDate instance. If the instance was initialized with a valid JSON value (stored in `origval`), this method will return that value. If no original JSON value is present, it will return the standardized ISO 8601 representation of the date, as provided by the `isostring` property. This interaction allows users to retrieve the exact input or a formatted version based on the date's state. No additional side effects occur with this method.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create the FHIRDate instance. If the instance was initialized with a valid JSON value (stored in `origval`), this method will return that value. If no original JSON value is present, it will return the standardized ISO 8601 representation of the date, as provided by the `isostring` property. This interaction allows users to retrieve the exact input or a formatted version based on the date's state. No additional side effects occur with this method.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. The method checks if the required properties are present and of the correct type, raising a `FHIRValidationError` if any validation issues occur, such as missing non-optional properties or type mismatches. It returns a validated dictionary that can be serialized to JSON.\n\nReturns:\n    dict: A dictionary representation of the FHIR element, ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, required properties are empty, or if there are any other validation errors.\n\nDependencies:\n    - `elementProperties()`: A method that retrieves the properties of the instance, along with their names, types, and flags indicating whether they are optional or part of a list.\n    - `_matches_type(value, typ)`: A method used to validate the type of property values.\n    - `FHIRValidationError`: A custom exception class used for reporting validation-related errors.\n\nConstants:\n    - `js`: A dictionary that compiles the serialized properties of the FHIR element.\n    - `errs`: A list to collect validation errors encountered during the serialization process.\n    - `found`: A set to track which required properties have been successfully found and serialized.\n    - `nonoptionals`: A set to store the names of non-optional properties that must be present in the serialized output.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. The method checks if the required properties are present and of the correct type, raising a `FHIRValidationError` if any validation issues occur, such as missing non-optional properties or type mismatches. It returns a validated dictionary that can be serialized to JSON.\n\nReturns:\n    dict: A dictionary representation of the FHIR element, ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, required properties are empty, or if there are any other validation errors.\n\nDependencies:\n    - `elementProperties()`: A method that retrieves the properties of the instance, along with their names, types, and flags indicating whether they are optional or part of a list.\n    - `_matches_type(value, typ)`: A method used to validate the type of property values.\n    - `FHIRValidationError`: A custom exception class used for reporting validation-related errors.\n\nConstants:\n    - `js`: A dictionary that compiles the serialized properties of the FHIR element.\n    - `errs`: A list to collect validation errors encountered during the serialization process.\n    - `found`: A set to track which required properties have been successfully found and serialized.\n    - `nonoptionals`: A set to store the names of non-optional properties that must be present in the serialized output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value (string representing a datetime) to create an instance of the FHIRDateTime class, which is specifically designed for handling FHIR datetime fields. The convenience of this class allows working with both Python's datetime objects and the original JSON strings. Upon initialization, the `datetime` attribute is set to `None` by default, and the superclass constructor is called to handle the JSON conversion.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a datetime in ISO 8601 format or None. This value is passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): The parsed datetime representation or None, initially set during initialization.\n\nDependencies:\n- The constructor utilizes the superclass FHIRDate to handle the input JSON value, ensuring compliance with FHIR specifications.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value (string representing a datetime) to create an instance of the FHIRDateTime class, which is specifically designed for handling FHIR datetime fields. The convenience of this class allows working with both Python's datetime objects and the original JSON strings. Upon initialization, the `datetime` attribute is set to `None` by default, and the superclass constructor is called to handle the JSON conversion.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a datetime in ISO 8601 format or None. This value is passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): The parsed datetime representation or None, initially set during initialization.\n\nDependencies:\n- The constructor utilizes the superclass FHIRDate to handle the input JSON value, ensuring compliance with FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-serializable dictionary representation.\n\nThis method calls the parent class's `as_json` method to retrieve a base JSON dictionary and adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` attribute is defined at the class level, ensuring that the JSON output includes the correct FHIR resource type for the instance.\n\nReturns:\n    dict: A JSON dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-serializable dictionary representation.\n\nThis method calls the parent class's `as_json` method to retrieve a base JSON dictionary and adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` attribute is defined at the class level, ensuring that the JSON output includes the correct FHIR resource type for the instance.\n\nReturns:\n    dict: A JSON dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize all valid properties of the DomainResource class.\n\nThis constructor sets up the attributes for a DomainResource object, allowing it to represent a resource with narrative content, extensions, and contained resources, as defined by the FHIR specification. It takes an optional JSON dictionary for initialization and a boolean flag to control strict validation of properties.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the DomainResource properties.\n- strict (bool, optional): If True (default), validation errors will raise a FHIRValidationError. If False, such errors will be ignored, allowing for more lenient initialization.\n\nAttributes:\n- contained: List of inline Resource items (represented as `dict` in JSON).\n- extension: List of additional content represented as Extension items (represented as `dict` in JSON).\n- modifierExtension: List of extensions that cannot be ignored, represented as Extension items (represented as `dict` in JSON).\n- text: Text summary of the resource for human interpretation, of type Narrative (represented as `dict` in JSON).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties from the base Resource class.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize all valid properties of the DomainResource class.\n\nThis constructor sets up the attributes for a DomainResource object, allowing it to represent a resource with narrative content, extensions, and contained resources, as defined by the FHIR specification. It takes an optional JSON dictionary for initialization and a boolean flag to control strict validation of properties.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the DomainResource properties.\n- strict (bool, optional): If True (default), validation errors will raise a FHIRValidationError. If False, such errors will be ignored, allowing for more lenient initialization.\n\nAttributes:\n- contained: List of inline Resource items (represented as `dict` in JSON).\n- extension: List of additional content represented as Extension items (represented as `dict` in JSON).\n- modifierExtension: List of extensions that cannot be ignored, represented as Extension items (represented as `dict` in JSON).\n- text: Text summary of the resource for human interpretation, of type Narrative (represented as `dict` in JSON).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties from the base Resource class.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/questionnaire.py:Questionnaire:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/questionnaire.py": {
        "Questionnaire.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(Questionnaire, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('code', 'code', coding.Coding, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('derivedFrom', 'derivedFrom', str, True, None, False), ('description', 'description', str, False, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('item', 'item', QuestionnaireItem, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('subjectType', 'subjectType', str, True, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class Questionnaire(domainresource.DomainResource):"
        }
      },
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/questionnaire_test.py:QuestionnaireTests:testQuestionnaire1": {
      "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
        "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/questionnaire_test.py:QuestionnaireTests:implQuestionnaire1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/questionnaire_test.py:QuestionnaireTests:testQuestionnaire2": {
      "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
        "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/questionnaire_test.py:QuestionnaireTests:implQuestionnaire2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/questionnaire_test.py:QuestionnaireTests:testQuestionnaire3": {
      "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
        "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/questionnaire_test.py:QuestionnaireTests:implQuestionnaire3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {},
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/questionnaire_test.py:QuestionnaireTests:testQuestionnaire4": {
      "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
        "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/questionnaire_test.py:QuestionnaireTests:implQuestionnaire4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/questionnaire_test.py:QuestionnaireTests:testQuestionnaire5": {
      "tests/models/questionnaire_test.py:QuestionnaireTests:instantiate_from": {
        "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/questionnaire_test.py:QuestionnaireTests:implQuestionnaire5": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/questionnaire.py:Questionnaire:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/questionnaire.py:Questionnaire:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-questionnaire_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 questionnaire.py\n            \u2514\u2500\u2500 Questionnaire.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test conformance for FHIR-based Questionnaire resources, a key component of the HL7 Fast Healthcare Interoperability Resources (FHIR) standard. Its primary purpose is to ensure that Questionnaire resources adhere to FHIR specifications by validating their structure, data types, and relationships between elements. The module facilitates testing of various real-world examples of Questionnaires, representing use cases such as patient medical history, clinical assessments, and health records. By automating the validation process, it assists developers in verifying the integrity and accuracy of FHIR Questionnaire implementations, streamlining the development, testing, and deployment of interoperable healthcare systems.\n\n## FILE 1: fhirclient/models/questionnaire.py\n\n- CLASS METHOD: Questionnaire.__init__\n  - CLASS SIGNATURE: class Questionnaire(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Questionnaire object that represents a structured set of questions to guide data collection from end-users. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used to populate the questionnaire's attributes during initialization.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables. If False, allows non-compliant data types.\n\nAttributes initialized:\n- approvalDate (FHIRDate): The approval date for the questionnaire by the publisher.\n- code (list of Coding): Represents the overall concept of the questionnaire.\n- contact (list of ContactDetail): Publisher's contact details.\n- copyright (str): Publishing or usage restrictions.\n- date (FHIRDateTime): The last modification date of the questionnaire.\n- derivedFrom (list of str): References to protocols or definitions from which this questionnaire is derived.\n- description (str): A narrative description of the questionnaire.\n- effectivePeriod (Period): The timeframe during which the questionnaire is valid.\n- experimental (bool): Indicator for whether the questionnaire is used for testing purposes.\n- identifier (list of Identifier): Additional identifiers for this questionnaire.\n- item (list of QuestionnaireItem): Questions and sections within the questionnaire.\n- jurisdiction (list of CodeableConcept): Applicable jurisdictions for the questionnaire.\n- lastReviewDate (FHIRDate): The most recent review date for the questionnaire.\n- name (str): A computer-friendly name for the questionnaire.\n- publisher (str): The name of the organization or individual responsible for publishing the questionnaire.\n- purpose (str): Reason for creating the questionnaire.\n- status (str): Current state which can be 'draft', 'active', 'retired', or 'unknown'.\n- subjectType (list of str): Possible resource types that can be the subject of a QuestionnaireResponse.\n- title (str): A user-friendly name for the questionnaire.\n- url (str): A globally unique canonical identifier for the questionnaire.\n- useContext (list of UsageContext): The context that the questionnaire content is intended to support.\n- version (str): The business version of the questionnaire.\n\nThe class is part of the FHIR (Fast Healthcare Interoperability Resources) standard, which provides guidelines for data representation in healthcare software applications.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance, facilitating the handling of FHIR-compliant date strings.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a date in FHIR format (ISO 8601). If provided, it must match the pattern defined by the class's regular expression `_REGEX`, which enforces valid date formats.\n\nAttributes:\n- self.date (Union[datetime.date, datetime.datetime, datetime.time, None]): A Python datetime object representing the parsed date. If `jsonval` is None or not a valid format, this will remain None.\n- self.origval (Union[str, None]): Stores the original `jsonval` passed during initialization for reference.\n\nRaises:\n- TypeError: If `jsonval` is not a string.\n- ValueError: If `jsonval` does not conform to the expected date format.\n\nThe constructor leverages the `_from_string` method to convert a valid FHIR date string into a `datetime.date` object and uses the `_REGEX` constant to validate the input format during initialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create the FHIRDate instance. If the instance was initialized with a valid JSON value (stored in `origval`), this method will return that value. If no original JSON value is present, it will return the standardized ISO 8601 representation of the date, as provided by the `isostring` property. This interaction allows users to retrieve the exact input or a formatted version based on the date's state. No additional side effects occur with this method.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nHandles attribute assignment for the FHIRDate class, specifically synchronizing the internal `date` field with the provided property value. \n\nParameters:\n- `prop`: The name of the attribute being set. If it is either 'date' or the class constant `_FIELD`, the method clears the `origval` attribute and updates both the `date` and `_FIELD` attributes to reflect the new value. \n- `value`: The value to assign to the specified property. \n\nSide Effects:\n- Resets `origval` to None when the attributes `date` or `_FIELD` are modified, ensuring that the class maintains consistency between its fields.\n\nConstants:\n- `_FIELD`: A class-level constant defined as \"date\", which determines which specific field is synchronized with `date` during assignment.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIR element to a JSON-compatible dictionary by inspecting the properties defined in `elementProperties()`. The method checks if the required properties are present and of the correct type, raising a `FHIRValidationError` if any validation issues occur, such as missing non-optional properties or type mismatches. It returns a validated dictionary that can be serialized to JSON.\n\nReturns:\n    dict: A dictionary representation of the FHIR element, ready for JSON serialization.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, required properties are empty, or if there are any other validation errors.\n\nDependencies:\n    - `elementProperties()`: A method that retrieves the properties of the instance, along with their names, types, and flags indicating whether they are optional or part of a list.\n    - `_matches_type(value, typ)`: A method used to validate the type of property values.\n    - `FHIRValidationError`: A custom exception class used for reporting validation-related errors.\n\nConstants:\n    - `js`: A dictionary that compiles the serialized properties of the FHIR element.\n    - `errs`: A list to collect validation errors encountered during the serialization process.\n    - `found`: A set to track which required properties have been successfully found and serialized.\n    - `nonoptionals`: A set to store the names of non-optional properties that must be present in the serialized output.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor takes a JSON value (string representing a datetime) to create an instance of the FHIRDateTime class, which is specifically designed for handling FHIR datetime fields. The convenience of this class allows working with both Python's datetime objects and the original JSON strings. Upon initialization, the `datetime` attribute is set to `None` by default, and the superclass constructor is called to handle the JSON conversion.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a datetime in ISO 8601 format or None. This value is passed to the superclass (FHIRDate) for parsing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): The parsed datetime representation or None, initially set during initialization.\n\nDependencies:\n- The constructor utilizes the superclass FHIRDate to handle the input JSON value, ensuring compliance with FHIR specifications.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-serializable dictionary representation.\n\nThis method calls the parent class's `as_json` method to retrieve a base JSON dictionary and adds the `resourceType` key, which indicates the type of the FHIR resource. The `resource_type` attribute is defined at the class level, ensuring that the JSON output includes the correct FHIR resource type for the instance.\n\nReturns:\n    dict: A JSON dictionary representation of the FHIRAbstractResource instance, including the `resourceType` key.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize all valid properties of the DomainResource class.\n\nThis constructor sets up the attributes for a DomainResource object, allowing it to represent a resource with narrative content, extensions, and contained resources, as defined by the FHIR specification. It takes an optional JSON dictionary for initialization and a boolean flag to control strict validation of properties.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the DomainResource properties.\n- strict (bool, optional): If True (default), validation errors will raise a FHIRValidationError. If False, such errors will be ignored, allowing for more lenient initialization.\n\nAttributes:\n- contained: List of inline Resource items (represented as `dict` in JSON).\n- extension: List of additional content represented as Extension items (represented as `dict` in JSON).\n- modifierExtension: List of extensions that cannot be ignored, represented as Extension items (represented as `dict` in JSON).\n- text: Text summary of the resource for human interpretation, of type Narrative (represented as `dict` in JSON).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties from the base Resource class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/questionnaire.py": "from . import domainresource\n\nclass Questionnaire(domainresource.DomainResource):\n    \"\"\" A structured set of questions.\n    \n    A structured set of questions intended to guide the collection of answers\n    from end-users. Questionnaires provide detailed control over order,\n    presentation, phraseology and grouping to allow coherent, consistent data\n    collection.\n    \"\"\"\n    resource_type = 'Questionnaire'\n\n    def elementProperties(self):\n        js = super(Questionnaire, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('code', 'code', coding.Coding, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('derivedFrom', 'derivedFrom', str, True, None, False), ('description', 'description', str, False, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('item', 'item', QuestionnaireItem, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('subjectType', 'subjectType', str, True, None, False), ('title', 'title', str, False, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass QuestionnaireItem(backboneelement.BackboneElement):\n    \"\"\" Questions and sections within the Questionnaire.\n    \n    A particular question, question grouping or display text that is part of\n    the questionnaire.\n    \"\"\"\n    resource_type = 'QuestionnaireItem'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.answerOption = None\n        ' Permitted answer.\\n        List of `QuestionnaireItemAnswerOption` items (represented as `dict` in JSON). '\n        self.answerValueSet = None\n        ' Valueset containing permitted answers.\\n        Type `str`. '\n        self.code = None\n        ' Corresponding concept for this item in a terminology.\\n        List of `Coding` items (represented as `dict` in JSON). '\n        self.definition = None\n        ' ElementDefinition - details for the item.\\n        Type `str`. '\n        self.enableBehavior = None\n        ' all | any.\\n        Type `str`. '\n        self.enableWhen = None\n        ' Only allow data when.\\n        List of `QuestionnaireItemEnableWhen` items (represented as `dict` in JSON). '\n        self.initial = None\n        ' Initial value(s) when item is first rendered.\\n        List of `QuestionnaireItemInitial` items (represented as `dict` in JSON). '\n        self.item = None\n        ' Nested questionnaire items.\\n        List of `QuestionnaireItem` items (represented as `dict` in JSON). '\n        self.linkId = None\n        ' Unique id for item in questionnaire.\\n        Type `str`. '\n        self.maxLength = None\n        ' No more than this many characters.\\n        Type `int`. '\n        self.prefix = None\n        ' E.g. \"1(a)\", \"2.5.3\".\\n        Type `str`. '\n        self.readOnly = None\n        \" Don't allow human editing.\\n        Type `bool`. \"\n        self.repeats = None\n        ' Whether the item may repeat.\\n        Type `bool`. '\n        self.required = None\n        ' Whether the item must be included in data results.\\n        Type `bool`. '\n        self.text = None\n        ' Primary text for the item.\\n        Type `str`. '\n        self.type = None\n        ' group | display | boolean | decimal | integer | date | dateTime +.\\n        Type `str`. '\n        super(QuestionnaireItem, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireItem, self).elementProperties()\n        js.extend([('answerOption', 'answerOption', QuestionnaireItemAnswerOption, True, None, False), ('answerValueSet', 'answerValueSet', str, False, None, False), ('code', 'code', coding.Coding, True, None, False), ('definition', 'definition', str, False, None, False), ('enableBehavior', 'enableBehavior', str, False, None, False), ('enableWhen', 'enableWhen', QuestionnaireItemEnableWhen, True, None, False), ('initial', 'initial', QuestionnaireItemInitial, True, None, False), ('item', 'item', QuestionnaireItem, True, None, False), ('linkId', 'linkId', str, False, None, True), ('maxLength', 'maxLength', int, False, None, False), ('prefix', 'prefix', str, False, None, False), ('readOnly', 'readOnly', bool, False, None, False), ('repeats', 'repeats', bool, False, None, False), ('required', 'required', bool, False, None, False), ('text', 'text', str, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\n\nclass QuestionnaireItemAnswerOption(backboneelement.BackboneElement):\n    \"\"\" Permitted answer.\n    \n    One of the permitted answers for a \"choice\" or \"open-choice\" question.\n    \"\"\"\n    resource_type = 'QuestionnaireItemAnswerOption'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.initialSelected = None\n        ' Whether option is selected by default.\\n        Type `bool`. '\n        self.valueCoding = None\n        ' Answer value.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' Answer value.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueInteger = None\n        ' Answer value.\\n        Type `int`. '\n        self.valueReference = None\n        ' Answer value.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Answer value.\\n        Type `str`. '\n        self.valueTime = None\n        ' Answer value.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        super(QuestionnaireItemAnswerOption, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireItemAnswerOption, self).elementProperties()\n        js.extend([('initialSelected', 'initialSelected', bool, False, None, False), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', True)])\n        return js\n\nclass QuestionnaireItemEnableWhen(backboneelement.BackboneElement):\n    \"\"\" Only allow data when.\n    \n    A constraint indicating that this item should only be enabled\n    (displayed/allow answers to be captured) when the specified condition is\n    true.\n    \"\"\"\n    resource_type = 'QuestionnaireItemEnableWhen'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.answerBoolean = None\n        ' Value for question comparison based on operator.\\n        Type `bool`. '\n        self.answerCoding = None\n        ' Value for question comparison based on operator.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.answerDate = None\n        ' Value for question comparison based on operator.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.answerDateTime = None\n        ' Value for question comparison based on operator.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.answerDecimal = None\n        ' Value for question comparison based on operator.\\n        Type `float`. '\n        self.answerInteger = None\n        ' Value for question comparison based on operator.\\n        Type `int`. '\n        self.answerQuantity = None\n        ' Value for question comparison based on operator.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.answerReference = None\n        ' Value for question comparison based on operator.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.answerString = None\n        ' Value for question comparison based on operator.\\n        Type `str`. '\n        self.answerTime = None\n        ' Value for question comparison based on operator.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.operator = None\n        ' exists | = | != | > | < | >= | <=.\\n        Type `str`. '\n        self.question = None\n        ' Question that determines whether item is enabled.\\n        Type `str`. '\n        super(QuestionnaireItemEnableWhen, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireItemEnableWhen, self).elementProperties()\n        js.extend([('answerBoolean', 'answerBoolean', bool, False, 'answer', True), ('answerCoding', 'answerCoding', coding.Coding, False, 'answer', True), ('answerDate', 'answerDate', fhirdate.FHIRDate, False, 'answer', True), ('answerDateTime', 'answerDateTime', fhirdatetime.FHIRDateTime, False, 'answer', True), ('answerDecimal', 'answerDecimal', float, False, 'answer', True), ('answerInteger', 'answerInteger', int, False, 'answer', True), ('answerQuantity', 'answerQuantity', quantity.Quantity, False, 'answer', True), ('answerReference', 'answerReference', fhirreference.FHIRReference, False, 'answer', True), ('answerString', 'answerString', str, False, 'answer', True), ('answerTime', 'answerTime', fhirtime.FHIRTime, False, 'answer', True), ('operator', 'operator', str, False, None, True), ('question', 'question', str, False, None, True)])\n        return js\n\nclass QuestionnaireItemInitial(backboneelement.BackboneElement):\n    \"\"\" Initial value(s) when item is first rendered.\n    \n    One or more values that should be pre-populated in the answer when\n    initially rendering the questionnaire for user input.\n    \"\"\"\n    resource_type = 'QuestionnaireItemInitial'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.valueAttachment = None\n        ' Actual value for initializing the question.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' Actual value for initializing the question.\\n        Type `bool`. '\n        self.valueCoding = None\n        ' Actual value for initializing the question.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' Actual value for initializing the question.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueDateTime = None\n        ' Actual value for initializing the question.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' Actual value for initializing the question.\\n        Type `float`. '\n        self.valueInteger = None\n        ' Actual value for initializing the question.\\n        Type `int`. '\n        self.valueQuantity = None\n        ' Actual value for initializing the question.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Actual value for initializing the question.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Actual value for initializing the question.\\n        Type `str`. '\n        self.valueTime = None\n        ' Actual value for initializing the question.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.valueUri = None\n        ' Actual value for initializing the question.\\n        Type `str`. '\n        super(QuestionnaireItemInitial, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(QuestionnaireItemInitial, self).elementProperties()\n        js.extend([('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', True), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', True), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', True), ('valueUri', 'valueUri', str, False, 'value', True)])\n        return js\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import usagecontext",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}