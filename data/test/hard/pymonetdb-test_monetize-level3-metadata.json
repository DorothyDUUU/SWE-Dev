{
  "dir_path": "/app/pymonetdb",
  "package_name": "pymonetdb",
  "sample_name": "pymonetdb-test_monetize",
  "src_dir": "pymonetdb/",
  "test_dir": "tests/",
  "test_file": "tests/test_monetize.py",
  "test_code": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0.  If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.\n\nimport datetime\nimport unittest\nimport uuid\nfrom pymonetdb.sql.monetize import convert\nfrom pymonetdb.exceptions import ProgrammingError\n\n\nclass TestMonetize(unittest.TestCase):\n    def test_str_subclass(self):\n        class StrSubClass(str):\n            pass\n        x = StrSubClass('test')\n        csub = convert(x)\n        cstr = convert('test')\n        self.assertEqual(csub, cstr)\n\n    def test_unknown_type(self):\n        class Unknown:\n            pass\n        x = Unknown()\n        self.assertRaises(ProgrammingError, convert, x)\n\n    def test_datetime(self):\n        x = datetime.datetime(2017, 12, 6, 12, 30)\n        self.assertEqual(convert(x), \"TIMESTAMP '2017-12-06 12:30:00'\")\n\n    def test_datetime_tz(self):\n        x = datetime.datetime(2017, 12, 6, 12, 30).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=3)))\n        self.assertEqual(convert(x), \"TIMESTAMPTZ '2017-12-06 12:30:00+03:00'\")\n\n    def test_date(self):\n        x = datetime.date(2017, 12, 6)\n        self.assertEqual(convert(x), \"DATE '2017-12-06'\")\n\n    def test_time(self):\n        x = datetime.time(12, 5)\n        self.assertEqual(convert(x), \"TIME '12:05:00'\")\n\n    def test_time_tz(self):\n        x = datetime.time(12, 5).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=3)))\n        self.assertEqual(convert(x), \"TIMETZ '12:05:00+03:00'\")\n\n    def test_timedelta(self):\n        x = datetime.timedelta(days=5, hours=2, minutes=10)\n        self.assertEqual(convert(x), \"INTERVAL '439800' SECOND\")\n\n    def test_uuids(self):\n        x = uuid.UUID('334e6185-dd64-33d8-a052-d93371d3d20d')\n        self.assertEqual(convert(x), \"'334e6185-dd64-33d8-a052-d93371d3d20d'\")\n",
  "GT_file_code": {
    "pymonetdb/sql/monetize.py": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0.  If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.\n\n\"\"\"\nfunctions for converting python objects to monetdb SQL format. If you want\nto add support for a specific type you should add a function as a value to\nthe mapping dict and the datatype as key.\n\"\"\"\n\nimport datetime\nimport decimal\nimport uuid\n\nfrom pymonetdb.exceptions import ProgrammingError\n\n\ndef monet_none(_):\n    \"\"\"\n    returns a NULL string\n    \"\"\"\n    return \"NULL\"\n\n\ndef monet_bool(data):\n    \"\"\"\n    returns \"true\" or \"false\"\n    \"\"\"\n    return [\"false\", \"true\"][bool(data)]\n\n\ndef monet_escape(data):\n    \"\"\"\n    returns an escaped string\n    \"\"\"\n    data = str(data).replace(\"\\\\\", \"\\\\\\\\\")\n    data = data.replace(\"\\'\", \"\\\\\\'\")\n    return \"'%s'\" % str(data)\n\n\ndef monet_bytes(data):\n    \"\"\"\n    converts bytes to string\n    \"\"\"\n    return \"BLOB '%s'\" % data.hex()\n\n\ndef _tzaware(time_or_datetime):\n    \"\"\"\n    returns True if the time or datetime is timezone aware, False otherwise.\n    \"\"\"\n    return time_or_datetime.utcoffset() is not None\n\n\ndef monet_datetime(data):\n    \"\"\"\n    returns a casted timestamp\n    \"\"\"\n    if _tzaware(data):\n        return \"TIMESTAMPTZ %s\" % monet_escape(data)\n    else:\n        return \"TIMESTAMP %s\" % monet_escape(data)\n\n\ndef monet_date(data):\n    \"\"\"\n    returns a casted date\n    \"\"\"\n    return \"DATE %s\" % monet_escape(data)\n\n\ndef monet_time(data):\n    \"\"\"\n    returns a casted time\n    \"\"\"\n    if _tzaware(data):\n        return \"TIMETZ %s\" % monet_escape(data)\n    else:\n        return \"TIME %s\" % monet_escape(data)\n\n\ndef monet_timedelta(data):\n    \"\"\"\n    returns timedelta casted to interval seconds\n    \"\"\"\n    return \"INTERVAL %s SECOND\" % monet_escape(int(data.total_seconds()))\n\n\ndef monet_unicode(data):\n    return monet_escape(data.encode('utf-8'))\n\n\nmapping = [\n\n    (str, monet_escape),\n    (bytes, monet_bytes),\n    (int, str),\n    (complex, str),\n    (float, str),\n    (uuid.UUID, monet_escape),\n    (decimal.Decimal, str),\n    (datetime.datetime, monet_datetime),\n    (datetime.time, monet_time),\n    (datetime.date, monet_date),\n    (datetime.timedelta, monet_timedelta),\n    (bool, monet_bool),\n    (type(None), monet_none),\n]\n\nmapping_dict = dict(mapping)\n\n\ndef convert(data):\n    \"\"\"\n    Return the appropriate convertion function based upon the python type.\n    \"\"\"\n    if type(data) in mapping_dict:\n        return mapping_dict[type(data)](data)\n    else:\n        for type_, func in mapping:\n            if issubclass(type(data), type_):\n                return func(data)\n    raise ProgrammingError(\"type %s not supported as value\" % type(data))\n"
  },
  "GT_src_dict": {
    "pymonetdb/sql/monetize.py": {
      "monet_escape": {
        "code": "def monet_escape(data):\n    \"\"\"Escapes a given string for safe insertion into a MonetDB SQL query.\n\nParameters:\n- data: The input data, which can be of any type that can be converted to a string. \n\nReturns:\n- A string formatted for SQL, with escaped single quotes and backslashes, making it safe for inclusion in SQL queries. The returned string is wrapped in single quotes.\n\nThis function interacts with the `convert` function, which utilizes `monet_escape` to handle string data types during the conversion process to MonetDB SQL format. It is also useful for avoiding SQL injection vulnerabilities by ensuring that special characters are properly escaped in the context of SQL statements.\"\"\"\n    '\\n    returns an escaped string\\n    '\n    data = str(data).replace('\\\\', '\\\\\\\\')\n    data = data.replace(\"'\", \"\\\\'\")\n    return \"'%s'\" % str(data)",
        "docstring": "Escapes a given string for safe insertion into a MonetDB SQL query.\n\nParameters:\n- data: The input data, which can be of any type that can be converted to a string. \n\nReturns:\n- A string formatted for SQL, with escaped single quotes and backslashes, making it safe for inclusion in SQL queries. The returned string is wrapped in single quotes.\n\nThis function interacts with the `convert` function, which utilizes `monet_escape` to handle string data types during the conversion process to MonetDB SQL format. It is also useful for avoiding SQL injection vulnerabilities by ensuring that special characters are properly escaped in the context of SQL statements.",
        "signature": "def monet_escape(data):",
        "type": "Function",
        "class_signature": null
      },
      "_tzaware": {
        "code": "def _tzaware(time_or_datetime):\n    \"\"\"Checks if a given time or datetime object is timezone aware.\n\nParameters:\n- time_or_datetime (datetime.time or datetime.datetime): The time or datetime object to check for timezone awareness.\n\nReturns:\n- bool: True if the object has a timezone offset (i.e., is timezone aware), otherwise False.\n\nThis function uses the `utcoffset()` method of the datetime objects to determine timezone awareness. It is utilized within the `monet_datetime` and `monet_time` functions to format datetime and time objects appropriately for SQL conversion based on their timezone status.\"\"\"\n    '\\n    returns True if the time or datetime is timezone aware, False otherwise.\\n    '\n    return time_or_datetime.utcoffset() is not None",
        "docstring": "Checks if a given time or datetime object is timezone aware.\n\nParameters:\n- time_or_datetime (datetime.time or datetime.datetime): The time or datetime object to check for timezone awareness.\n\nReturns:\n- bool: True if the object has a timezone offset (i.e., is timezone aware), otherwise False.\n\nThis function uses the `utcoffset()` method of the datetime objects to determine timezone awareness. It is utilized within the `monet_datetime` and `monet_time` functions to format datetime and time objects appropriately for SQL conversion based on their timezone status.",
        "signature": "def _tzaware(time_or_datetime):",
        "type": "Function",
        "class_signature": null
      },
      "monet_datetime": {
        "code": "def monet_datetime(data):\n    \"\"\"Converts a Python datetime or time object to a monetdb SQL compatible timestamp format.\n\nParameters:\n- data (datetime.datetime or datetime.time): The datetime object to be converted. It can be either timezone-aware or naive.\n\nReturns:\n- str: A string representation of the corresponding SQL timestamp. If the input datetime is timezone-aware, it returns a 'TIMESTAMPTZ' format; otherwise, it returns a 'TIMESTAMP' format. The datetime is escaped for SQL compatibility using the `monet_escape` function.\n\nDependencies:\n- Requires the `_tzaware` function to determine if the datetime is timezone-aware.\n- Uses the `monet_escape` function to safely format the datetime for SQL queries.\"\"\"\n    '\\n    returns a casted timestamp\\n    '\n    if _tzaware(data):\n        return 'TIMESTAMPTZ %s' % monet_escape(data)\n    else:\n        return 'TIMESTAMP %s' % monet_escape(data)",
        "docstring": "Converts a Python datetime or time object to a monetdb SQL compatible timestamp format.\n\nParameters:\n- data (datetime.datetime or datetime.time): The datetime object to be converted. It can be either timezone-aware or naive.\n\nReturns:\n- str: A string representation of the corresponding SQL timestamp. If the input datetime is timezone-aware, it returns a 'TIMESTAMPTZ' format; otherwise, it returns a 'TIMESTAMP' format. The datetime is escaped for SQL compatibility using the `monet_escape` function.\n\nDependencies:\n- Requires the `_tzaware` function to determine if the datetime is timezone-aware.\n- Uses the `monet_escape` function to safely format the datetime for SQL queries.",
        "signature": "def monet_datetime(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_date": {
        "code": "def monet_date(data):\n    \"\"\"Converts a Python `date` object to a MonetDB-compatible SQL date format. \n\nParameters:\n- data (datetime.date): A `date` object to be converted.\n\nReturns:\n- str: A string representing the date in the format \"DATE 'YYYY-MM-DD'\", where 'YYYY-MM-DD' is the string representation of the `data`.\n\nDependencies:\n- This function relies on the `monet_escape` function to properly format and escape the date string to ensure it is compatible with SQL syntax.\"\"\"\n    '\\n    returns a casted date\\n    '\n    return 'DATE %s' % monet_escape(data)",
        "docstring": "Converts a Python `date` object to a MonetDB-compatible SQL date format. \n\nParameters:\n- data (datetime.date): A `date` object to be converted.\n\nReturns:\n- str: A string representing the date in the format \"DATE 'YYYY-MM-DD'\", where 'YYYY-MM-DD' is the string representation of the `data`.\n\nDependencies:\n- This function relies on the `monet_escape` function to properly format and escape the date string to ensure it is compatible with SQL syntax.",
        "signature": "def monet_date(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_time": {
        "code": "def monet_time(data):\n    \"\"\"Converts a Python time object into a MonetDB-compatible SQL format. \n\nParameters:\n- data (datetime.time): A time object, which may or may not be timezone aware.\n\nReturns:\n- str: A string representing the time in MonetDB format as either \"TIMETZ\" for timezone-aware times or \"TIME\" for naive times, appropriately escaped using the `monet_escape` function.\n\nDependencies:\n- `_tzaware(data)`: A helper function that checks if the provided time object is timezone-aware.\n- `monet_escape(data)`: A function that escapes the input string to ensure it is safe for SQL insertion.\n\nIf the given `data` is timezone aware, it will format it as \"TIMETZ\", otherwise as \"TIME\".\"\"\"\n    '\\n    returns a casted time\\n    '\n    if _tzaware(data):\n        return 'TIMETZ %s' % monet_escape(data)\n    else:\n        return 'TIME %s' % monet_escape(data)",
        "docstring": "Converts a Python time object into a MonetDB-compatible SQL format. \n\nParameters:\n- data (datetime.time): A time object, which may or may not be timezone aware.\n\nReturns:\n- str: A string representing the time in MonetDB format as either \"TIMETZ\" for timezone-aware times or \"TIME\" for naive times, appropriately escaped using the `monet_escape` function.\n\nDependencies:\n- `_tzaware(data)`: A helper function that checks if the provided time object is timezone-aware.\n- `monet_escape(data)`: A function that escapes the input string to ensure it is safe for SQL insertion.\n\nIf the given `data` is timezone aware, it will format it as \"TIMETZ\", otherwise as \"TIME\".",
        "signature": "def monet_time(data):",
        "type": "Function",
        "class_signature": null
      },
      "monet_timedelta": {
        "code": "def monet_timedelta(data):\n    \"\"\"Converts a `datetime.timedelta` object into a SQL INTERVAL format represented in seconds.\n\nParameters:\n- `data` (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string formatted as \"INTERVAL X SECOND\", where X is the total number of seconds represented by the timedelta.\n\nDependencies:\n- Utilizes the `monet_escape` function to ensure the generated string is properly escaped, and relies on `int(data.total_seconds())` to obtain the total seconds from the timedelta object.\n\nRaises:\n- This function does not raise exceptions directly, but it assumes that the input is a valid `datetime.timedelta` object as per its design context.\"\"\"\n    '\\n    returns timedelta casted to interval seconds\\n    '\n    return 'INTERVAL %s SECOND' % monet_escape(int(data.total_seconds()))",
        "docstring": "Converts a `datetime.timedelta` object into a SQL INTERVAL format represented in seconds.\n\nParameters:\n- `data` (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string formatted as \"INTERVAL X SECOND\", where X is the total number of seconds represented by the timedelta.\n\nDependencies:\n- Utilizes the `monet_escape` function to ensure the generated string is properly escaped, and relies on `int(data.total_seconds())` to obtain the total seconds from the timedelta object.\n\nRaises:\n- This function does not raise exceptions directly, but it assumes that the input is a valid `datetime.timedelta` object as per its design context.",
        "signature": "def monet_timedelta(data):",
        "type": "Function",
        "class_signature": null
      },
      "convert": {
        "code": "def convert(data):\n    \"\"\"Converts a Python object to its corresponding MonetDB SQL format based on its type.\n\nParameters:\n- data: A Python object of any type.\n\nReturns:\n- A string representing the SQL format of the provided Python object. \n  The conversion is handled via a mapping of types to conversion functions defined in the `mapping_dict`.\n\nIf the type of `data` is not explicitly in `mapping_dict`, the function checks for subclasses of the types in `mapping`. If no suitable conversion is found, it raises a `ProgrammingError` indicating that the type is unsupported.\n\nDependencies:\n- Utilizes the `mapping_dict` that maps Python types to their respective conversion functions for SQL representation.\n- Raises `ProgrammingError` from the `pymonetdb.exceptions` module if the type of data cannot be converted.\"\"\"\n    '\\n    Return the appropriate convertion function based upon the python type.\\n    '\n    if type(data) in mapping_dict:\n        return mapping_dict[type(data)](data)\n    else:\n        for type_, func in mapping:\n            if issubclass(type(data), type_):\n                return func(data)\n    raise ProgrammingError('type %s not supported as value' % type(data))",
        "docstring": "Converts a Python object to its corresponding MonetDB SQL format based on its type.\n\nParameters:\n- data: A Python object of any type.\n\nReturns:\n- A string representing the SQL format of the provided Python object. \n  The conversion is handled via a mapping of types to conversion functions defined in the `mapping_dict`.\n\nIf the type of `data` is not explicitly in `mapping_dict`, the function checks for subclasses of the types in `mapping`. If no suitable conversion is found, it raises a `ProgrammingError` indicating that the type is unsupported.\n\nDependencies:\n- Utilizes the `mapping_dict` that maps Python types to their respective conversion functions for SQL representation.\n- Raises `ProgrammingError` from the `pymonetdb.exceptions` module if the type of data cannot be converted.",
        "signature": "def convert(data):",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "pymonetdb/sql/monetize.py:convert": {},
    "pymonetdb/sql/monetize.py:monet_date": {},
    "pymonetdb/sql/monetize.py:monet_datetime": {},
    "pymonetdb/sql/monetize.py:monet_escape": {},
    "pymonetdb/sql/monetize.py:monet_time": {},
    "pymonetdb/sql/monetize.py:monet_timedelta": {}
  },
  "PRD": "# PROJECT NAME: pymonetdb-test_monetize\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 pymonetdb/\n    \u2514\u2500\u2500 sql/\n        \u2514\u2500\u2500 monetize.py\n            \u251c\u2500\u2500 _tzaware\n            \u251c\u2500\u2500 convert\n            \u251c\u2500\u2500 monet_date\n            \u251c\u2500\u2500 monet_datetime\n            \u251c\u2500\u2500 monet_escape\n            \u251c\u2500\u2500 monet_time\n            \u2514\u2500\u2500 monet_timedelta\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality to translate Python data types into SQL-compatible representations for use with the MonetDB database. It ensures seamless conversion of various data types, including strings, dates, times, datetime objects (with or without timezone information), time intervals, and UUIDs, into their corresponding SQL literals. By managing these conversions, the module enables consistent and reliable data serialization, reducing errors and simplifying the process of integrating Python applications with MonetDB. This functionality streamlines database interactions for developers, ensuring that data is properly formatted and compliant with MonetDB's SQL dialect.\n\n## FILE 1: pymonetdb/sql/monetize.py\n\n- FUNCTION NAME: convert\n  - SIGNATURE: def convert(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python object to its corresponding MonetDB SQL format based on its type.\n\nParameters:\n- data: A Python object of any type.\n\nReturns:\n- A string representing the SQL format of the provided Python object. \n  The conversion is handled via a mapping of types to conversion functions defined in the `mapping_dict`.\n\nIf the type of `data` is not explicitly in `mapping_dict`, the function checks for subclasses of the types in `mapping`. If no suitable conversion is found, it raises a `ProgrammingError` indicating that the type is unsupported.\n\nDependencies:\n- Utilizes the `mapping_dict` that maps Python types to their respective conversion functions for SQL representation.\n- Raises `ProgrammingError` from the `pymonetdb.exceptions` module if the type of data cannot be converted.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_date\n    - pymonetdb/sql/monetize.py:monet_time\n    - pymonetdb/sql/monetize.py:monet_datetime\n    - pymonetdb/sql/monetize.py:monet_timedelta\n    - pymonetdb/sql/monetize.py:monet_escape\n\n- FUNCTION NAME: monet_date\n  - SIGNATURE: def monet_date(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python `date` object to a MonetDB-compatible SQL date format. \n\nParameters:\n- data (datetime.date): A `date` object to be converted.\n\nReturns:\n- str: A string representing the date in the format \"DATE 'YYYY-MM-DD'\", where 'YYYY-MM-DD' is the string representation of the `data`.\n\nDependencies:\n- This function relies on the `monet_escape` function to properly format and escape the date string to ensure it is compatible with SQL syntax.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n\n- FUNCTION NAME: _tzaware\n  - SIGNATURE: def _tzaware(time_or_datetime):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if a given time or datetime object is timezone aware.\n\nParameters:\n- time_or_datetime (datetime.time or datetime.datetime): The time or datetime object to check for timezone awareness.\n\nReturns:\n- bool: True if the object has a timezone offset (i.e., is timezone aware), otherwise False.\n\nThis function uses the `utcoffset()` method of the datetime objects to determine timezone awareness. It is utilized within the `monet_datetime` and `monet_time` functions to format datetime and time objects appropriately for SQL conversion based on their timezone status.\n\"\"\"\n```\n\n- FUNCTION NAME: monet_time\n  - SIGNATURE: def monet_time(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python time object into a MonetDB-compatible SQL format. \n\nParameters:\n- data (datetime.time): A time object, which may or may not be timezone aware.\n\nReturns:\n- str: A string representing the time in MonetDB format as either \"TIMETZ\" for timezone-aware times or \"TIME\" for naive times, appropriately escaped using the `monet_escape` function.\n\nDependencies:\n- `_tzaware(data)`: A helper function that checks if the provided time object is timezone-aware.\n- `monet_escape(data)`: A function that escapes the input string to ensure it is safe for SQL insertion.\n\nIf the given `data` is timezone aware, it will format it as \"TIMETZ\", otherwise as \"TIME\".\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n    - pymonetdb/sql/monetize.py:_tzaware\n\n- FUNCTION NAME: monet_datetime\n  - SIGNATURE: def monet_datetime(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a Python datetime or time object to a monetdb SQL compatible timestamp format.\n\nParameters:\n- data (datetime.datetime or datetime.time): The datetime object to be converted. It can be either timezone-aware or naive.\n\nReturns:\n- str: A string representation of the corresponding SQL timestamp. If the input datetime is timezone-aware, it returns a 'TIMESTAMPTZ' format; otherwise, it returns a 'TIMESTAMP' format. The datetime is escaped for SQL compatibility using the `monet_escape` function.\n\nDependencies:\n- Requires the `_tzaware` function to determine if the datetime is timezone-aware.\n- Uses the `monet_escape` function to safely format the datetime for SQL queries.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n    - pymonetdb/sql/monetize.py:_tzaware\n\n- FUNCTION NAME: monet_timedelta\n  - SIGNATURE: def monet_timedelta(data):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a `datetime.timedelta` object into a SQL INTERVAL format represented in seconds.\n\nParameters:\n- `data` (datetime.timedelta): The timedelta object to be converted.\n\nReturns:\n- str: A string formatted as \"INTERVAL X SECOND\", where X is the total number of seconds represented by the timedelta.\n\nDependencies:\n- Utilizes the `monet_escape` function to ensure the generated string is properly escaped, and relies on `int(data.total_seconds())` to obtain the total seconds from the timedelta object.\n\nRaises:\n- This function does not raise exceptions directly, but it assumes that the input is a valid `datetime.timedelta` object as per its design context.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:monet_escape\n    - pymonetdb/sql/monetize.py:convert\n\n- FUNCTION NAME: monet_escape\n  - SIGNATURE: def monet_escape(data):\n  - DOCSTRING: \n```python\n\"\"\"\nEscapes a given string for safe insertion into a MonetDB SQL query.\n\nParameters:\n- data: The input data, which can be of any type that can be converted to a string. \n\nReturns:\n- A string formatted for SQL, with escaped single quotes and backslashes, making it safe for inclusion in SQL queries. The returned string is wrapped in single quotes.\n\nThis function interacts with the `convert` function, which utilizes `monet_escape` to handle string data types during the conversion process to MonetDB SQL format. It is also useful for avoiding SQL injection vulnerabilities by ensuring that special characters are properly escaped in the context of SQL statements.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - pymonetdb/sql/monetize.py:convert\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "pymonetdb/sql/monetize.py": "\"\"\"\nfunctions for converting python objects to monetdb SQL format. If you want\nto add support for a specific type you should add a function as a value to\nthe mapping dict and the datatype as key.\n\"\"\"\nimport datetime\nimport decimal\nimport uuid\nfrom pymonetdb.exceptions import ProgrammingError\n\ndef monet_none(_):\n    \"\"\"\n    returns a NULL string\n    \"\"\"\n    return 'NULL'\n\ndef monet_bool(data):\n    \"\"\"\n    returns \"true\" or \"false\"\n    \"\"\"\n    return ['false', 'true'][bool(data)]\n\ndef monet_bytes(data):\n    \"\"\"\n    converts bytes to string\n    \"\"\"\n    return \"BLOB '%s'\" % data.hex()\n\ndef monet_unicode(data):\n    return monet_escape(data.encode('utf-8'))\nmapping = [(str, monet_escape), (bytes, monet_bytes), (int, str), (complex, str), (float, str), (uuid.UUID, monet_escape), (decimal.Decimal, str), (datetime.datetime, monet_datetime), (datetime.time, monet_time), (datetime.date, monet_date), (datetime.timedelta, monet_timedelta), (bool, monet_bool), (type(None), monet_none)]\nmapping_dict = dict(mapping)"
  },
  "call_tree": {
    "tests/test_monetize.py:TestMonetize:test_date": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_date": {
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_datetime": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_datetime": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_datetime_tz": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_datetime": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_str_subclass": {
      "tests/test_monetize.py:TestMonetize:StrSubClass": {},
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_escape": {}
      }
    },
    "tests/test_monetize.py:TestMonetize:test_time": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_time": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_time_tz": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_time": {
          "pymonetdb/sql/monetize.py:_tzaware": {},
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_timedelta": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_timedelta": {
          "pymonetdb/sql/monetize.py:monet_escape": {}
        }
      }
    },
    "tests/test_monetize.py:TestMonetize:test_unknown_type": {
      "tests/test_monetize.py:TestMonetize:Unknown": {},
      "pymonetdb/sql/monetize.py:convert": {}
    },
    "tests/test_monetize.py:TestMonetize:test_uuids": {
      "pymonetdb/sql/monetize.py:convert": {
        "pymonetdb/sql/monetize.py:monet_escape": {}
      }
    }
  }
}