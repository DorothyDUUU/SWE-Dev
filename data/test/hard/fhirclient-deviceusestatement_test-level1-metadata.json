{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-deviceusestatement_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/deviceusestatement_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import deviceusestatement\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass DeviceUseStatementTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"DeviceUseStatement\", js[\"resourceType\"])\n        return deviceusestatement.DeviceUseStatement(js)\n    \n    def testDeviceUseStatement1(self):\n        inst = self.instantiate_from(\"deviceusestatement-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a DeviceUseStatement instance\")\n        self.implDeviceUseStatement1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"DeviceUseStatement\", js[\"resourceType\"])\n        inst2 = deviceusestatement.DeviceUseStatement(js)\n        self.implDeviceUseStatement1(inst2)\n    \n    def implDeviceUseStatement1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http:goodhealth.org/identifiers\")\n        self.assertEqual(inst.identifier[0].value, \"51ebb7a9-4e3a-4360-9a05-0cc2d869086f\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/deviceusestatement.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DeviceUseStatement).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass DeviceUseStatement(domainresource.DomainResource):\n    \"\"\" Record of use of a device.\n    \n    A record of a device being used by a patient where the record is the result\n    of a report from the patient or another clinician.\n    \"\"\"\n    \n    resource_type = \"DeviceUseStatement\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Fulfills plan, proposal or order.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" Target body site.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.derivedFrom = None\n        \"\"\" Supporting information.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.device = None\n        \"\"\" Reference to device used.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External identifier for this record.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Addition details (comments, instructions).\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why device was used.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why was DeviceUseStatement performed?.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.recordedOn = None\n        \"\"\" When statement was recorded.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.source = None\n        \"\"\" Who made the statement.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | completed | entered-in-error +.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Patient using device.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingDateTime = None\n        \"\"\" How often  the device was used.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" How often  the device was used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingTiming = None\n        \"\"\" How often  the device was used.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        super(DeviceUseStatement, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DeviceUseStatement, self).elementProperties()\n        js.extend([\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, False, None, False),\n            (\"derivedFrom\", \"derivedFrom\", fhirreference.FHIRReference, True, None, False),\n            (\"device\", \"device\", fhirreference.FHIRReference, False, None, True),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"recordedOn\", \"recordedOn\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"source\", \"source\", fhirreference.FHIRReference, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"timingDateTime\", \"timingDateTime\", fhirdatetime.FHIRDateTime, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"timingTiming\", \"timingTiming\", timing.Timing, False, \"timing\", False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import timing\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/deviceusestatement.py": {
      "DeviceUseStatement.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DeviceUseStatement instance, representing a record of a device used by a patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance with properties corresponding to the FHIR standard, where each property is defined according to types such as `FHIRReference`, `CodeableConcept`, `Annotation`, `FHIRDateTime`, `Identifier`, `Period`, and `Timing`.\n- strict (bool, optional): If True (default), raises a 'FHIRValidationError' for invalid variables.\n\nAttributes:\n- basedOn: References plans, proposals, or orders related to the device use.\n- bodySite: Indicates the target body site for device application.\n- derivedFrom: Provides supporting information through references.\n- device: References the specific device used.\n- identifier: Contains external identifiers for this record.\n- note: Holds additional details, comments, or instructions.\n- reasonCode: Explains why the device was employed.\n- reasonReference: References the reason for creating the DeviceUseStatement.\n- recordedOn: Timestamp for when the statement was recorded.\n- source: Identifies who made the statement.\n- status: Indicates the current status of the statement (e.g., active, completed).\n- subject: References the patient using the device.\n- timingDateTime, timingPeriod, timingTiming: Indicate the usage frequency of the device.\n\nDependencies:\nThis constructor calls the superclass `DomainResource`'s `__init__` method to handle property initialization. The properties defined here follow the FHIR standard as established in the context of healthcare record management.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.basedOn = None\n        ' Fulfills plan, proposal or order.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' Target body site.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.derivedFrom = None\n        ' Supporting information.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.device = None\n        ' Reference to device used.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' External identifier for this record.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Addition details (comments, instructions).\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.reasonCode = None\n        ' Why device was used.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why was DeviceUseStatement performed?.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.recordedOn = None\n        ' When statement was recorded.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.source = None\n        ' Who made the statement.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | completed | entered-in-error +.\\n        Type `str`. '\n        self.subject = None\n        ' Patient using device.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.timingDateTime = None\n        ' How often  the device was used.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timingPeriod = None\n        ' How often  the device was used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.timingTiming = None\n        ' How often  the device was used.\\n        Type `Timing` (represented as `dict` in JSON). '\n        super(DeviceUseStatement, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DeviceUseStatement instance, representing a record of a device used by a patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance with properties corresponding to the FHIR standard, where each property is defined according to types such as `FHIRReference`, `CodeableConcept`, `Annotation`, `FHIRDateTime`, `Identifier`, `Period`, and `Timing`.\n- strict (bool, optional): If True (default), raises a 'FHIRValidationError' for invalid variables.\n\nAttributes:\n- basedOn: References plans, proposals, or orders related to the device use.\n- bodySite: Indicates the target body site for device application.\n- derivedFrom: Provides supporting information through references.\n- device: References the specific device used.\n- identifier: Contains external identifiers for this record.\n- note: Holds additional details, comments, or instructions.\n- reasonCode: Explains why the device was employed.\n- reasonReference: References the reason for creating the DeviceUseStatement.\n- recordedOn: Timestamp for when the statement was recorded.\n- source: Identifies who made the statement.\n- status: Indicates the current status of the statement (e.g., active, completed).\n- subject: References the patient using the device.\n- timingDateTime, timingPeriod, timingTiming: Indicate the usage frequency of the device.\n\nDependencies:\nThis constructor calls the superclass `DomainResource`'s `__init__` method to handle property initialization. The properties defined here follow the FHIR standard as established in the context of healthcare record management.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DeviceUseStatement(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` key, which identifies the type of FHIR resource being serialized. The resulting dictionary is suitable for use with FHIR servers.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` key, which identifies the type of FHIR resource being serialized. The resulting dictionary is suitable for use with FHIR servers.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/deviceusestatement.py:DeviceUseStatement:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/deviceusestatement_test.py:DeviceUseStatementTests:testDeviceUseStatement1": {
      "tests/models/deviceusestatement_test.py:DeviceUseStatementTests:instantiate_from": {
        "fhirclient/models/deviceusestatement.py:DeviceUseStatement:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/deviceusestatement.py:DeviceUseStatement:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/deviceusestatement_test.py:DeviceUseStatementTests:implDeviceUseStatement1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/deviceusestatement.py:DeviceUseStatement:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/deviceusestatement.py:DeviceUseStatement:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/deviceusestatement.py:DeviceUseStatement:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/deviceusestatement_test.py:DeviceUseStatementTests:instantiate_from": {
      "fhirclient/models/deviceusestatement.py:DeviceUseStatement:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/deviceusestatement.py:DeviceUseStatement:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-deviceusestatement_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 deviceusestatement.py\n        \u2502   \u2514\u2500\u2500 DeviceUseStatement.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe DeviceUseStatement Module is designed to validate and process FHIR-compliant DeviceUseStatement resources, which document a patient's use of medical devices as part of their healthcare journey. This module ensures the integrity and accuracy of DeviceUseStatement data by verifying its structure, mandatory fields, and conformance to the relevant FHIR (Fast Healthcare Interoperability Resources) standards. It supports functionality for instantiating, reading, and serializing DeviceUseStatement resources in JSON format, enabling interoperability and seamless integration into healthcare systems. By automating resource validation and providing structured access to critical device usage information, the module simplifies data handling for developers and enhances the consistency of clinical data exchange.\n\n## FILE 1: fhirclient/models/deviceusestatement.py\n\n- CLASS METHOD: DeviceUseStatement.__init__\n  - CLASS SIGNATURE: class DeviceUseStatement(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DeviceUseStatement instance, representing a record of a device used by a patient.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the instance with properties corresponding to the FHIR standard, where each property is defined according to types such as `FHIRReference`, `CodeableConcept`, `Annotation`, `FHIRDateTime`, `Identifier`, `Period`, and `Timing`.\n- strict (bool, optional): If True (default), raises a 'FHIRValidationError' for invalid variables.\n\nAttributes:\n- basedOn: References plans, proposals, or orders related to the device use.\n- bodySite: Indicates the target body site for device application.\n- derivedFrom: Provides supporting information through references.\n- device: References the specific device used.\n- identifier: Contains external identifiers for this record.\n- note: Holds additional details, comments, or instructions.\n- reasonCode: Explains why the device was employed.\n- reasonReference: References the reason for creating the DeviceUseStatement.\n- recordedOn: Timestamp for when the statement was recorded.\n- source: Identifies who made the statement.\n- status: Indicates the current status of the statement (e.g., active, completed).\n- subject: References the patient using the device.\n- timingDateTime, timingPeriod, timingTiming: Indicate the usage frequency of the device.\n\nDependencies:\nThis constructor calls the superclass `DomainResource`'s `__init__` method to handle property initialization. The properties defined here follow the FHIR standard as established in the context of healthcare record management.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the parent class's `as_json` method to include the `resourceType` key, which identifies the type of FHIR resource being serialized. The resulting dictionary is suitable for use with FHIR servers.\n\n:return: A dictionary representation of the FHIRAbstractResource instance, including the `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/deviceusestatement.py": "from . import domainresource\n\nclass DeviceUseStatement(domainresource.DomainResource):\n    \"\"\" Record of use of a device.\n    \n    A record of a device being used by a patient where the record is the result\n    of a report from the patient or another clinician.\n    \"\"\"\n    resource_type = 'DeviceUseStatement'\n\n    def elementProperties(self):\n        js = super(DeviceUseStatement, self).elementProperties()\n        js.extend([('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, False, None, False), ('derivedFrom', 'derivedFrom', fhirreference.FHIRReference, True, None, False), ('device', 'device', fhirreference.FHIRReference, False, None, True), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('recordedOn', 'recordedOn', fhirdatetime.FHIRDateTime, False, None, False), ('source', 'source', fhirreference.FHIRReference, False, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import timing",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}