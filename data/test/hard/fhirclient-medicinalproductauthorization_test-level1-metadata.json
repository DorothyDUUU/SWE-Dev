{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductauthorization_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductauthorization_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductauthorization\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductAuthorizationTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductAuthorization\", js[\"resourceType\"])\n        return medicinalproductauthorization.MedicinalProductAuthorization(js)\n    \n    def testMedicinalProductAuthorization1(self):\n        inst = self.instantiate_from(\"medicinalproductauthorization-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductAuthorization instance\")\n        self.implMedicinalProductAuthorization1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductAuthorization\", js[\"resourceType\"])\n        inst2 = medicinalproductauthorization.MedicinalProductAuthorization(js)\n        self.implMedicinalProductAuthorization1(inst2)\n    \n    def implMedicinalProductAuthorization1(self, inst):\n        self.assertEqual(inst.country[0].coding[0].code, \"EU\")\n        self.assertEqual(inst.country[0].coding[0].system, \"http://ema.europa.eu/example/country\")\n        self.assertEqual(inst.dataExclusivityPeriod.end.datetime, FHIRDateTime(\"2020-08-15\").datetime)\n        self.assertEqual(inst.dataExclusivityPeriod.end.as_json(), \"2020-08-15\")\n        self.assertEqual(inst.dataExclusivityPeriod.start.datetime, FHIRDateTime(\"2010-08-15\").datetime)\n        self.assertEqual(inst.dataExclusivityPeriod.start.as_json(), \"2010-08-15\")\n        self.assertEqual(inst.dateOfFirstAuthorization.datetime, FHIRDateTime(\"2010-08-15\").datetime)\n        self.assertEqual(inst.dateOfFirstAuthorization.as_json(), \"2010-08-15\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://ema.europa.eu/example/marketingAuthorisationNumber\")\n        self.assertEqual(inst.identifier[0].value, \"EU/1/11/999/001\")\n        self.assertEqual(inst.internationalBirthDate.datetime, FHIRDateTime(\"2010-08-15\").datetime)\n        self.assertEqual(inst.internationalBirthDate.as_json(), \"2010-08-15\")\n        self.assertEqual(inst.jurisdictionalAuthorization[0].country.coding[0].code, \"NO\")\n        self.assertEqual(inst.jurisdictionalAuthorization[0].country.coding[0].system, \"http://ema.europa.eu/example/countryCode\")\n        self.assertEqual(inst.jurisdictionalAuthorization[0].id, \"1\")\n        self.assertEqual(inst.jurisdictionalAuthorization[0].identifier[0].system, \"http://ema.europa.eu/example/marketingauthorisationnumber\")\n        self.assertEqual(inst.jurisdictionalAuthorization[0].identifier[0].value, \"123-456-789\")\n        self.assertEqual(inst.jurisdictionalAuthorization[1].country.coding[0].code, \"NO\")\n        self.assertEqual(inst.jurisdictionalAuthorization[1].country.coding[0].system, \"http://ema.europa.eu/example/countryCode\")\n        self.assertEqual(inst.jurisdictionalAuthorization[1].id, \"2\")\n        self.assertEqual(inst.jurisdictionalAuthorization[1].identifier[0].system, \"http://ema.europa.eu/example/marketingauthorisationnumber\")\n        self.assertEqual(inst.jurisdictionalAuthorization[1].identifier[0].value, \"123-456-123\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.procedure.application[0].dateDateTime.datetime, FHIRDateTime(\"2015-08-01\").datetime)\n        self.assertEqual(inst.procedure.application[0].dateDateTime.as_json(), \"2015-08-01\")\n        self.assertEqual(inst.procedure.application[0].identifier.system, \"http://ema.europa.eu/example/applicationidentifier-number\")\n        self.assertEqual(inst.procedure.application[0].identifier.value, \"IA38G\")\n        self.assertEqual(inst.procedure.application[0].type.coding[0].code, \"GroupTypeIAVariationNotification\")\n        self.assertEqual(inst.procedure.application[0].type.coding[0].system, \"http://ema.europa.eu/example/marketingAuthorisationApplicationType\")\n        self.assertEqual(inst.procedure.datePeriod.end.datetime, FHIRDateTime(\"2015-08-21\").datetime)\n        self.assertEqual(inst.procedure.datePeriod.end.as_json(), \"2015-08-21\")\n        self.assertEqual(inst.procedure.datePeriod.start.datetime, FHIRDateTime(\"2015-08-02\").datetime)\n        self.assertEqual(inst.procedure.datePeriod.start.as_json(), \"2015-08-02\")\n        self.assertEqual(inst.procedure.identifier.system, \"http://ema.europa.eu/example/procedureidentifier-number\")\n        self.assertEqual(inst.procedure.identifier.value, \"EMEA/H/C/009999/IA/0099/G\")\n        self.assertEqual(inst.procedure.type.coding[0].code, \"VariationTypeIA\")\n        self.assertEqual(inst.procedure.type.coding[0].system, \"http://ema.europa.eu/example/marketingAuthorisationProcedureType\")\n        self.assertEqual(inst.status.coding[0].code, \"active\")\n        self.assertEqual(inst.status.coding[0].system, \"http://ema.europa.eu/example/authorisationstatus\")\n        self.assertEqual(inst.statusDate.datetime, FHIRDateTime(\"2015-01-14\").datetime)\n        self.assertEqual(inst.statusDate.as_json(), \"2015-01-14\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.validityPeriod.end.datetime, FHIRDateTime(\"2020-05-20\").datetime)\n        self.assertEqual(inst.validityPeriod.end.as_json(), \"2020-05-20\")\n        self.assertEqual(inst.validityPeriod.start.datetime, FHIRDateTime(\"2015-08-16\").datetime)\n        self.assertEqual(inst.validityPeriod.start.as_json(), \"2015-08-16\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/medicinalproductauthorization.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductAuthorization(domainresource.DomainResource):\n    \"\"\" The regulatory authorization of a medicinal product.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductAuthorization\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.country = None\n        \"\"\" The country in which the marketing authorization has been granted.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dataExclusivityPeriod = None\n        \"\"\" A period of time after authorization before generic product\n        applicatiosn can be submitted.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.dateOfFirstAuthorization = None\n        \"\"\" The date when the first authorization was granted by a Medicines\n        Regulatory Agency.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.holder = None\n        \"\"\" Marketing Authorization Holder.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier for the marketing authorization, as assigned by\n        a regulator.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.internationalBirthDate = None\n        \"\"\" Date of first marketing authorization for a company's new medicinal\n        product in any country in the World.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Jurisdiction within a country.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdictionalAuthorization = None\n        \"\"\" Authorization in areas within a country.\n        List of `MedicinalProductAuthorizationJurisdictionalAuthorization` items (represented as `dict` in JSON). \"\"\"\n        \n        self.legalBasis = None\n        \"\"\" The legal framework against which this authorization is granted.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.procedure = None\n        \"\"\" The regulatory procedure for granting or amending a marketing\n        authorization.\n        Type `MedicinalProductAuthorizationProcedure` (represented as `dict` in JSON). \"\"\"\n        \n        self.regulator = None\n        \"\"\" Medicines Regulatory Agency.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.restoreDate = None\n        \"\"\" The date when a suspended the marketing or the marketing\n        authorization of the product is anticipated to be restored.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" The status of the marketing authorization.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.statusDate = None\n        \"\"\" The date at which the given status has become applicable.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" The medicinal product that is being authorized.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.validityPeriod = None\n        \"\"\" The beginning of the time period in which the marketing\n        authorization is in the specific status shall be specified A\n        complete date consisting of day, month and year shall be specified\n        using the ISO 8601 date format.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductAuthorization, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductAuthorization, self).elementProperties()\n        js.extend([\n            (\"country\", \"country\", codeableconcept.CodeableConcept, True, None, False),\n            (\"dataExclusivityPeriod\", \"dataExclusivityPeriod\", period.Period, False, None, False),\n            (\"dateOfFirstAuthorization\", \"dateOfFirstAuthorization\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"holder\", \"holder\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"internationalBirthDate\", \"internationalBirthDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"jurisdictionalAuthorization\", \"jurisdictionalAuthorization\", MedicinalProductAuthorizationJurisdictionalAuthorization, True, None, False),\n            (\"legalBasis\", \"legalBasis\", codeableconcept.CodeableConcept, False, None, False),\n            (\"procedure\", \"procedure\", MedicinalProductAuthorizationProcedure, False, None, False),\n            (\"regulator\", \"regulator\", fhirreference.FHIRReference, False, None, False),\n            (\"restoreDate\", \"restoreDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"status\", \"status\", codeableconcept.CodeableConcept, False, None, False),\n            (\"statusDate\", \"statusDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n            (\"validityPeriod\", \"validityPeriod\", period.Period, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductAuthorizationJurisdictionalAuthorization(backboneelement.BackboneElement):\n    \"\"\" Authorization in areas within a country.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductAuthorizationJurisdictionalAuthorization\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.country = None\n        \"\"\" Country of authorization.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" The assigned number for the marketing authorization.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Jurisdiction within a country.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.legalStatusOfSupply = None\n        \"\"\" The legal status of supply in a jurisdiction or region.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.validityPeriod = None\n        \"\"\" The start and expected end date of the authorization.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductAuthorizationJurisdictionalAuthorization, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductAuthorizationJurisdictionalAuthorization, self).elementProperties()\n        js.extend([\n            (\"country\", \"country\", codeableconcept.CodeableConcept, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"legalStatusOfSupply\", \"legalStatusOfSupply\", codeableconcept.CodeableConcept, False, None, False),\n            (\"validityPeriod\", \"validityPeriod\", period.Period, False, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductAuthorizationProcedure(backboneelement.BackboneElement):\n    \"\"\" The regulatory procedure for granting or amending a marketing authorization.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductAuthorizationProcedure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.application = None\n        \"\"\" Applcations submitted to obtain a marketing authorization.\n        List of `MedicinalProductAuthorizationProcedure` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dateDateTime = None\n        \"\"\" Date of procedure.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.datePeriod = None\n        \"\"\" Date of procedure.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Identifier for this procedure.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of procedure.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductAuthorizationProcedure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductAuthorizationProcedure, self).elementProperties()\n        js.extend([\n            (\"application\", \"application\", MedicinalProductAuthorizationProcedure, True, None, False),\n            (\"dateDateTime\", \"dateDateTime\", fhirdatetime.FHIRDateTime, False, \"date\", False),\n            (\"datePeriod\", \"datePeriod\", period.Period, False, \"date\", False),\n            (\"identifier\", \"identifier\", identifier.Identifier, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance, if available. If the original JSON value is not present, it will return a standardized ISO 8601 string representation of the date. The method interacts with the `origval` attribute, which holds the input JSON string provided during initialization, and the `isostring` property, which normalizes the date into a string format. The output value is useful for serializing the FHIR date back to its original form or in a standardized format for interoperability.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance, if available. If the original JSON value is not present, it will return a standardized ISO 8601 string representation of the date. The method interacts with the `origval` attribute, which holds the input JSON string provided during initialization, and the `isostring` property, which normalizes the date into a string format. The output value is useful for serializing the FHIR date back to its original form or in a standardized format for interoperability.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor takes an optional JSON value which can be a string representation of a datetime \nformatted according to FHIR specifications. If provided, it initializes the `datetime` attribute \nto `None` by default until the value is parsed. It also calls the constructor of the superclass, \nFHIRDate, to handle any initialization related to the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR-compliant datetime. Defaults to None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the datetime representation of the FHIR string \n  after parsing. Initially set to None.\n\nThe method interacts with the FHIRDate superclass to maintain compatibility with existing code, \nand it relies on the superclass' initialization logic for handling the provided JSON value.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor takes an optional JSON value which can be a string representation of a datetime \nformatted according to FHIR specifications. If provided, it initializes the `datetime` attribute \nto `None` by default until the value is parsed. It also calls the constructor of the superclass, \nFHIRDate, to handle any initialization related to the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR-compliant datetime. Defaults to None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the datetime representation of the FHIR string \n  after parsing. Initially set to None.\n\nThe method interacts with the FHIRDate superclass to maintain compatibility with existing code, \nand it relies on the superclass' initialization logic for handling the provided JSON value.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method overrides the superclass's implementation of as_json to add the\n'resourceType' key to the resulting JSON dictionary, which indicates the \ntype of FHIR resource being represented. The value of 'resourceType' \nis derived from the class attribute `resource_type`.\n\n:returns: A dictionary representing the instance in JSON format, including\n          the 'resourceType' field.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method overrides the superclass's implementation of as_json to add the\n'resourceType' key to the resulting JSON dictionary, which indicates the \ntype of FHIR resource being represented. The value of 'resourceType' \nis derived from the class attribute `resource_type`.\n\n:returns: A dictionary representing the instance in JSON format, including\n          the 'resourceType' field.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/medicinalproductauthorization.py": {
      "MedicinalProductAuthorization.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductAuthorization instance, representing the regulatory authorization of a medicinal product.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the authorization. If provided, it should contain keys corresponding to the attributes defined in the class.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, such errors will be suppressed.\n\nAttributes:\n- country: Represents the country granting the marketing authorization.\n- dataExclusivityPeriod: Denotes the period before generic product applications can be submitted.\n- dateOfFirstAuthorization: The date when the first authorization was granted.\n- holder: Refers to the Marketing Authorization Holder.\n- identifier: A list of business identifiers assigned by regulatory bodies.\n- internationalBirthDate: The date of the first marketing authorization in any country.\n- jurisdiction: Jurisdictions within the granting country.\n- jurisdictionalAuthorization: Details about authorizations in specific areas.\n- legalBasis: The legal framework for the authorization.\n- procedure: The regulatory procedure associated with the authorization.\n- regulator: Reference to the Medicines Regulatory Agency.\n- restoreDate: Anticipated date for restoration of suspended authorization.\n- status: The current status of the marketing authorization.\n- statusDate: Date when the current status became applicable.\n- subject: The medicinal product being authorized.\n- validityPeriod: Specifies the time period during which the authorization status is applicable.\n\nThis class inherits from domainresource.DomainResource, and its properties may interact with various types such as CodeableConcept, FHIRDateTime, FHIRReference, Identifier, and Period, defined in their respective modules: codeableconcept, fhirdatetime, fhirreference, identifier, and period.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.country = None\n        ' The country in which the marketing authorization has been granted.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.dataExclusivityPeriod = None\n        ' A period of time after authorization before generic product\\n        applicatiosn can be submitted.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.dateOfFirstAuthorization = None\n        ' The date when the first authorization was granted by a Medicines\\n        Regulatory Agency.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.holder = None\n        ' Marketing Authorization Holder.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier for the marketing authorization, as assigned by\\n        a regulator.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.internationalBirthDate = None\n        \" Date of first marketing authorization for a company's new medicinal\\n        product in any country in the World.\\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\n        self.jurisdiction = None\n        ' Jurisdiction within a country.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.jurisdictionalAuthorization = None\n        ' Authorization in areas within a country.\\n        List of `MedicinalProductAuthorizationJurisdictionalAuthorization` items (represented as `dict` in JSON). '\n        self.legalBasis = None\n        ' The legal framework against which this authorization is granted.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.procedure = None\n        ' The regulatory procedure for granting or amending a marketing\\n        authorization.\\n        Type `MedicinalProductAuthorizationProcedure` (represented as `dict` in JSON). '\n        self.regulator = None\n        ' Medicines Regulatory Agency.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.restoreDate = None\n        ' The date when a suspended the marketing or the marketing\\n        authorization of the product is anticipated to be restored.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.status = None\n        ' The status of the marketing authorization.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.statusDate = None\n        ' The date at which the given status has become applicable.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.subject = None\n        ' The medicinal product that is being authorized.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.validityPeriod = None\n        ' The beginning of the time period in which the marketing\\n        authorization is in the specific status shall be specified A\\n        complete date consisting of day, month and year shall be specified\\n        using the ISO 8601 date format.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(MedicinalProductAuthorization, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductAuthorization instance, representing the regulatory authorization of a medicinal product.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the authorization. If provided, it should contain keys corresponding to the attributes defined in the class.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, such errors will be suppressed.\n\nAttributes:\n- country: Represents the country granting the marketing authorization.\n- dataExclusivityPeriod: Denotes the period before generic product applications can be submitted.\n- dateOfFirstAuthorization: The date when the first authorization was granted.\n- holder: Refers to the Marketing Authorization Holder.\n- identifier: A list of business identifiers assigned by regulatory bodies.\n- internationalBirthDate: The date of the first marketing authorization in any country.\n- jurisdiction: Jurisdictions within the granting country.\n- jurisdictionalAuthorization: Details about authorizations in specific areas.\n- legalBasis: The legal framework for the authorization.\n- procedure: The regulatory procedure associated with the authorization.\n- regulator: Reference to the Medicines Regulatory Agency.\n- restoreDate: Anticipated date for restoration of suspended authorization.\n- status: The current status of the marketing authorization.\n- statusDate: Date when the current status became applicable.\n- subject: The medicinal product being authorized.\n- validityPeriod: Specifies the time period during which the authorization status is applicable.\n\nThis class inherits from domainresource.DomainResource, and its properties may interact with various types such as CodeableConcept, FHIRDateTime, FHIRReference, Identifier, and Period, defined in their respective modules: codeableconcept, fhirdatetime, fhirreference, identifier, and period.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductAuthorization(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/medicinalproductauthorization_test.py:MedicinalProductAuthorizationTests:testMedicinalProductAuthorization1": {
      "tests/models/medicinalproductauthorization_test.py:MedicinalProductAuthorizationTests:instantiate_from": {
        "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductauthorization_test.py:MedicinalProductAuthorizationTests:implMedicinalProductAuthorization1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductauthorization_test.py:MedicinalProductAuthorizationTests:instantiate_from": {
      "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductauthorization.py:MedicinalProductAuthorization:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductauthorization_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 medicinalproductauthorization.py\n            \u2514\u2500\u2500 MedicinalProductAuthorization.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Medicinal Product Authorization module facilitates the validation, instantiation, and testing of FHIR-compliant MedicinalProductAuthorization resources, as defined in the FHIR 4.0.1 standard. It enables the creation, inspection, and verification of structured data pertaining to the authorization of medicinal products, including details such as jurisdictional authorizations, validity periods, procedural data, and identifiers. By ensuring compliance with FHIR specifications and providing robust testing capabilities, the module simplifies the integration of medicinal product regulatory data into healthcare applications while ensuring data consistency and interoperability across systems. It addresses the need for reliable handling of complex regulatory information, streamlining development workflows for developers and improving data fidelity for end-users.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance, if available. If the original JSON value is not present, it will return a standardized ISO 8601 string representation of the date. The method interacts with the `origval` attribute, which holds the input JSON string provided during initialization, and the `isostring` property, which normalizes the date into a string format. The output value is useful for serializing the FHIR date back to its original form or in a standardized format for interoperability.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor takes an optional JSON value which can be a string representation of a datetime \nformatted according to FHIR specifications. If provided, it initializes the `datetime` attribute \nto `None` by default until the value is parsed. It also calls the constructor of the superclass, \nFHIRDate, to handle any initialization related to the FHIRDate class.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR-compliant datetime. Defaults to None.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Holds the datetime representation of the FHIR string \n  after parsing. Initially set to None.\n\nThe method interacts with the FHIRDate superclass to maintain compatibility with existing code, \nand it relies on the superclass' initialization logic for handling the provided JSON value.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method overrides the superclass's implementation of as_json to add the\n'resourceType' key to the resulting JSON dictionary, which indicates the \ntype of FHIR resource being represented. The value of 'resourceType' \nis derived from the class attribute `resource_type`.\n\n:returns: A dictionary representing the instance in JSON format, including\n          the 'resourceType' field.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/medicinalproductauthorization.py\n\n- CLASS METHOD: MedicinalProductAuthorization.__init__\n  - CLASS SIGNATURE: class MedicinalProductAuthorization(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductAuthorization instance, representing the regulatory authorization of a medicinal product.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing properties of the authorization. If provided, it should contain keys corresponding to the attributes defined in the class.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError during initialization. If False, such errors will be suppressed.\n\nAttributes:\n- country: Represents the country granting the marketing authorization.\n- dataExclusivityPeriod: Denotes the period before generic product applications can be submitted.\n- dateOfFirstAuthorization: The date when the first authorization was granted.\n- holder: Refers to the Marketing Authorization Holder.\n- identifier: A list of business identifiers assigned by regulatory bodies.\n- internationalBirthDate: The date of the first marketing authorization in any country.\n- jurisdiction: Jurisdictions within the granting country.\n- jurisdictionalAuthorization: Details about authorizations in specific areas.\n- legalBasis: The legal framework for the authorization.\n- procedure: The regulatory procedure associated with the authorization.\n- regulator: Reference to the Medicines Regulatory Agency.\n- restoreDate: Anticipated date for restoration of suspended authorization.\n- status: The current status of the marketing authorization.\n- statusDate: Date when the current status became applicable.\n- subject: The medicinal product being authorized.\n- validityPeriod: Specifies the time period during which the authorization status is applicable.\n\nThis class inherits from domainresource.DomainResource, and its properties may interact with various types such as CodeableConcept, FHIRDateTime, FHIRReference, Identifier, and Period, defined in their respective modules: codeableconcept, fhirdatetime, fhirreference, identifier, and period.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/medicinalproductauthorization.py": "from . import domainresource\n\nclass MedicinalProductAuthorization(domainresource.DomainResource):\n    \"\"\" The regulatory authorization of a medicinal product.\n    \"\"\"\n    resource_type = 'MedicinalProductAuthorization'\n\n    def elementProperties(self):\n        js = super(MedicinalProductAuthorization, self).elementProperties()\n        js.extend([('country', 'country', codeableconcept.CodeableConcept, True, None, False), ('dataExclusivityPeriod', 'dataExclusivityPeriod', period.Period, False, None, False), ('dateOfFirstAuthorization', 'dateOfFirstAuthorization', fhirdatetime.FHIRDateTime, False, None, False), ('holder', 'holder', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('internationalBirthDate', 'internationalBirthDate', fhirdatetime.FHIRDateTime, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('jurisdictionalAuthorization', 'jurisdictionalAuthorization', MedicinalProductAuthorizationJurisdictionalAuthorization, True, None, False), ('legalBasis', 'legalBasis', codeableconcept.CodeableConcept, False, None, False), ('procedure', 'procedure', MedicinalProductAuthorizationProcedure, False, None, False), ('regulator', 'regulator', fhirreference.FHIRReference, False, None, False), ('restoreDate', 'restoreDate', fhirdatetime.FHIRDateTime, False, None, False), ('status', 'status', codeableconcept.CodeableConcept, False, None, False), ('statusDate', 'statusDate', fhirdatetime.FHIRDateTime, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, False), ('validityPeriod', 'validityPeriod', period.Period, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MedicinalProductAuthorizationJurisdictionalAuthorization(backboneelement.BackboneElement):\n    \"\"\" Authorization in areas within a country.\n    \"\"\"\n    resource_type = 'MedicinalProductAuthorizationJurisdictionalAuthorization'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.country = None\n        ' Country of authorization.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' The assigned number for the marketing authorization.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Jurisdiction within a country.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.legalStatusOfSupply = None\n        ' The legal status of supply in a jurisdiction or region.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.validityPeriod = None\n        ' The start and expected end date of the authorization.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(MedicinalProductAuthorizationJurisdictionalAuthorization, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductAuthorizationJurisdictionalAuthorization, self).elementProperties()\n        js.extend([('country', 'country', codeableconcept.CodeableConcept, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('legalStatusOfSupply', 'legalStatusOfSupply', codeableconcept.CodeableConcept, False, None, False), ('validityPeriod', 'validityPeriod', period.Period, False, None, False)])\n        return js\n\nclass MedicinalProductAuthorizationProcedure(backboneelement.BackboneElement):\n    \"\"\" The regulatory procedure for granting or amending a marketing authorization.\n    \"\"\"\n    resource_type = 'MedicinalProductAuthorizationProcedure'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.application = None\n        ' Applcations submitted to obtain a marketing authorization.\\n        List of `MedicinalProductAuthorizationProcedure` items (represented as `dict` in JSON). '\n        self.dateDateTime = None\n        ' Date of procedure.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.datePeriod = None\n        ' Date of procedure.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Identifier for this procedure.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of procedure.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductAuthorizationProcedure, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductAuthorizationProcedure, self).elementProperties()\n        js.extend([('application', 'application', MedicinalProductAuthorizationProcedure, True, None, False), ('dateDateTime', 'dateDateTime', fhirdatetime.FHIRDateTime, False, 'date', False), ('datePeriod', 'datePeriod', period.Period, False, 'date', False), ('identifier', 'identifier', identifier.Identifier, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period"
  }
}