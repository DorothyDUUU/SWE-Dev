{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_master_package",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/structures/test_master_package.py",
  "test_code": "from mypy_boto3_builder.service_name import ServiceNameCatalog\nfrom mypy_boto3_builder.structures.master_package import MasterPackage\n\n\nclass TestMasterPackage:\n    def test_init(self) -> None:\n        package = MasterPackage([ServiceNameCatalog.ec2, ServiceNameCatalog.logs], [], \"1.2.3\")\n        assert package\n        assert package.essential_service_names == [ServiceNameCatalog.ec2]\n        assert package.literals == []\n",
  "GT_file_code": {
    "mypy_boto3_builder/structures/master_package.py": "\"\"\"\nStructure for boto3-stubs module.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom collections.abc import Iterable\nfrom typing import TYPE_CHECKING\n\nfrom mypy_boto3_builder.package_data import MypyBoto3PackageData\nfrom mypy_boto3_builder.service_name import ServiceName\nfrom mypy_boto3_builder.structures.package import Package\nfrom mypy_boto3_builder.structures.service_package import ServicePackage\n\nif TYPE_CHECKING:\n    from mypy_boto3_builder.type_annotations.type_literal import TypeLiteral\n\n\nclass MasterPackage(Package):\n    \"\"\"\n    Structure for mypy-boto3 package.\n\n    Arguments:\n        service_names -- List of included service names.\n        service_packages -- List of included service packages.\n        version -- Package version.\n    \"\"\"\n\n    def __init__(\n        self,\n        service_names: Iterable[ServiceName],\n        service_packages: Iterable[ServicePackage],\n        version: str,\n    ) -> None:\n        super().__init__(MypyBoto3PackageData, service_names, version=version)\n        self.service_packages = list(service_packages)\n        self.literals: list[TypeLiteral] = []\n\n    @property\n    def essential_service_names(self) -> list[ServiceName]:\n        \"\"\"\n        List of services maked as essential.\n        \"\"\"\n        return [service_name for service_name in self.service_names if service_name.is_essential()]\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/structures/master_package.py": {
      "MasterPackage.__init__": {
        "code": "    def __init__(self, service_names: Iterable[ServiceName], service_packages: Iterable[ServicePackage], version: str) -> None:\n        \"\"\"Initialize a MasterPackage instance, which represents the structure for a mypy-boto3 package.\n\nParameters:\n    service_names (Iterable[ServiceName]): A collection of service names to be included in the package.\n    service_packages (Iterable[ServicePackage]): A collection of service packages to be included.\n    version (str): The version of the package.\n\nThis constructor calls the parent class's initializer with MypyBoto3PackageData, which serves\nas the package data structure, and sets up the service packages as a list. It also initializes\nan empty list for literals. \n\nAttributes:\n    service_packages (list[ServicePackage]): A list containing the provided service packages.\n    literals (list[TypeLiteral]): An empty list intended to hold type literals, defined once the\n    class is instantiated.\"\"\"\n        super().__init__(MypyBoto3PackageData, service_names, version=version)\n        self.service_packages = list(service_packages)\n        self.literals: list[TypeLiteral] = []",
        "docstring": "Initialize a MasterPackage instance, which represents the structure for a mypy-boto3 package.\n\nParameters:\n    service_names (Iterable[ServiceName]): A collection of service names to be included in the package.\n    service_packages (Iterable[ServicePackage]): A collection of service packages to be included.\n    version (str): The version of the package.\n\nThis constructor calls the parent class's initializer with MypyBoto3PackageData, which serves\nas the package data structure, and sets up the service packages as a list. It also initializes\nan empty list for literals. \n\nAttributes:\n    service_packages (list[ServicePackage]): A list containing the provided service packages.\n    literals (list[TypeLiteral]): An empty list intended to hold type literals, defined once the\n    class is instantiated.",
        "signature": "def __init__(self, service_names: Iterable[ServiceName], service_packages: Iterable[ServicePackage], version: str) -> None:",
        "type": "Method",
        "class_signature": "class MasterPackage(Package):"
      },
      "MasterPackage.essential_service_names": {
        "code": "    def essential_service_names(self) -> list[ServiceName]:\n        \"\"\"Returns a list of essential service names from the MasterPackage instance.\n\nThis property filters the `service_names` attribute (inherited from the `Package` class) to include only those services that are marked as essential. It utilizes the `is_essential()` method from the `ServiceName` class to determine which services qualify as essential.\n\nReturns:\n    list[ServiceName]: A list of essential service names.\n\nDependencies:\n    - Requires access to the `service_names` attribute, which is a list of `ServiceName` instances.\n    - The `ServiceName` class must have an implemented `is_essential()` method for the filtering to function correctly.\"\"\"\n        '\\n        List of services maked as essential.\\n        '\n        return [service_name for service_name in self.service_names if service_name.is_essential()]",
        "docstring": "Returns a list of essential service names from the MasterPackage instance.\n\nThis property filters the `service_names` attribute (inherited from the `Package` class) to include only those services that are marked as essential. It utilizes the `is_essential()` method from the `ServiceName` class to determine which services qualify as essential.\n\nReturns:\n    list[ServiceName]: A list of essential service names.\n\nDependencies:\n    - Requires access to the `service_names` attribute, which is a list of `ServiceName` instances.\n    - The `ServiceName` class must have an implemented `is_essential()` method for the filtering to function correctly.",
        "signature": "def essential_service_names(self) -> list[ServiceName]:",
        "type": "Method",
        "class_signature": "class MasterPackage(Package):"
      }
    }
  },
  "dependency_dict": {
    "mypy_boto3_builder/structures/master_package.py:MasterPackage:__init__": {
      "mypy_boto3_builder/structures/package.py": {
        "Package.__init__": {
          "code": "    def __init__(\n        self,\n        data: type[BasePackageData],\n        service_names: Iterable[ServiceName] = (),\n        version: str = \"\",\n    ) -> None:\n        self.data = data\n        self._pypi_name = self.data.PYPI_NAME\n        self.library_version = data.get_library_version()\n        self.botocore_version = data.get_botocore_version()\n        self._version: str = \"\"\n        if version:\n            self.version = version\n        self.service_names = tuple(service_names)\n        self.logger = get_logger()\n        self.url = PackageURL(self.pypi_name, self.data)",
          "docstring": "",
          "signature": "def __init__(self, data: type[BasePackageData], service_names: Iterable[ServiceName]=(), version: str='') -> None:",
          "type": "Method",
          "class_signature": "class Package:"
        }
      }
    },
    "mypy_boto3_builder/structures/master_package.py:MasterPackage:essential_service_names": {
      "mypy_boto3_builder/service_name.py": {
        "ServiceName.is_essential": {
          "code": "    def is_essential(self) -> bool:\n        \"\"\"\n        Whether service is included to `boto3-stubs[essential]`.\n        \"\"\"\n        return self.name in self.ESSENTIAL_NAMES",
          "docstring": "Whether service is included to `boto3-stubs[essential]`.",
          "signature": "def is_essential(self) -> bool:",
          "type": "Method",
          "class_signature": "class ServiceName:"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_master_package\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 structures/\n        \u2514\u2500\u2500 master_package.py\n            \u251c\u2500\u2500 MasterPackage.__init__\n            \u2514\u2500\u2500 MasterPackage.essential_service_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the construction and management of a master package that consolidates multiple AWS service clients into a unified interface within the mypy-boto3 environment. It enables developers to specify, organize, and version essential AWS services and their associated components, such as service names and literals, to streamline type-safe interactions with AWS APIs. By providing a structured approach to grouping and managing service dependencies, the module simplifies the integration and scalability of AWS service usage in type-checked Python projects, ensuring a consistent and reliable development experience.\n\n## FILE 1: mypy_boto3_builder/structures/master_package.py\n\n- CLASS METHOD: MasterPackage.__init__\n  - CLASS SIGNATURE: class MasterPackage(Package):\n  - SIGNATURE: def __init__(self, service_names: Iterable[ServiceName], service_packages: Iterable[ServicePackage], version: str) -> None:\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MasterPackage instance, which represents the structure for a mypy-boto3 package.\n\nParameters:\n    service_names (Iterable[ServiceName]): A collection of service names to be included in the package.\n    service_packages (Iterable[ServicePackage]): A collection of service packages to be included.\n    version (str): The version of the package.\n\nThis constructor calls the parent class's initializer with MypyBoto3PackageData, which serves\nas the package data structure, and sets up the service packages as a list. It also initializes\nan empty list for literals. \n\nAttributes:\n    service_packages (list[ServicePackage]): A list containing the provided service packages.\n    literals (list[TypeLiteral]): An empty list intended to hold type literals, defined once the\n    class is instantiated.\n\"\"\"\n```\n\n- CLASS METHOD: MasterPackage.essential_service_names\n  - CLASS SIGNATURE: class MasterPackage(Package):\n  - SIGNATURE: def essential_service_names(self) -> list[ServiceName]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of essential service names from the MasterPackage instance.\n\nThis property filters the `service_names` attribute (inherited from the `Package` class) to include only those services that are marked as essential. It utilizes the `is_essential()` method from the `ServiceName` class to determine which services qualify as essential.\n\nReturns:\n    list[ServiceName]: A list of essential service names.\n\nDependencies:\n    - Requires access to the `service_names` attribute, which is a list of `ServiceName` instances.\n    - The `ServiceName` class must have an implemented `is_essential()` method for the filtering to function correctly.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/structures/master_package.py": "\"\"\"\nStructure for boto3-stubs module.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom collections.abc import Iterable\nfrom typing import TYPE_CHECKING\nfrom mypy_boto3_builder.package_data import MypyBoto3PackageData\nfrom mypy_boto3_builder.service_name import ServiceName\nfrom mypy_boto3_builder.structures.package import Package\nfrom mypy_boto3_builder.structures.service_package import ServicePackage\nif TYPE_CHECKING:\n    from mypy_boto3_builder.type_annotations.type_literal import TypeLiteral\n\nclass MasterPackage(Package):\n    \"\"\"\n    Structure for mypy-boto3 package.\n\n    Arguments:\n        service_names -- List of included service names.\n        service_packages -- List of included service packages.\n        version -- Package version.\n    \"\"\""
  },
  "call_tree": {
    "tests/structures/test_master_package.py:TestMasterPackage:test_init": {
      "mypy_boto3_builder/structures/master_package.py:MasterPackage:__init__": {
        "mypy_boto3_builder/structures/package.py:Package:__init__": {
          "mypy_boto3_builder/package_data.py:BasePackageData:get_library_version": {
            "mypy_boto3_builder/utils/version_getters.py:get_boto3_version": {}
          },
          "mypy_boto3_builder/package_data.py:BasePackageData:get_botocore_version": {
            "mypy_boto3_builder/utils/version_getters.py:get_botocore_version": {}
          },
          "mypy_boto3_builder/structures/package.py:Package:version": {},
          "mypy_boto3_builder/logger.py:get_logger": {},
          "mypy_boto3_builder/structures/package.py:Package:pypi_name": {},
          "mypy_boto3_builder/structures/package_url.py:PackageURL:__init__": {}
        }
      },
      "mypy_boto3_builder/structures/master_package.py:MasterPackage:essential_service_names": {
        "mypy_boto3_builder/service_name.py:ServiceName:is_essential": {}
      }
    }
  }
}