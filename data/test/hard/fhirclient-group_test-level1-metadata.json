{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-group_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/group_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import group\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass GroupTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Group\", js[\"resourceType\"])\n        return group.Group(js)\n    \n    def testGroup1(self):\n        inst = self.instantiate_from(\"group-example-herd1.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Group instance\")\n        self.implGroup1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Group\", js[\"resourceType\"])\n        inst2 = group.Group(js)\n        self.implGroup1(inst2)\n    \n    def implGroup1(self, inst):\n        self.assertTrue(inst.active)\n        self.assertTrue(inst.actual)\n        self.assertEqual(inst.characteristic[0].code.text, \"gender\")\n        self.assertFalse(inst.characteristic[0].exclude)\n        self.assertEqual(inst.characteristic[0].valueCodeableConcept.text, \"female\")\n        self.assertEqual(inst.code.coding[0].code, \"388393002\")\n        self.assertEqual(inst.code.coding[0].display, \"Genus Sus (organism)\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.coding[1].code, \"POR\")\n        self.assertEqual(inst.code.coding[1].display, \"porcine\")\n        self.assertEqual(inst.code.coding[1].system, \"https://www.aphis.usda.gov\")\n        self.assertEqual(inst.code.text, \"Porcine\")\n        self.assertEqual(inst.extension[0].url, \"http://example.org/fhir/StructureDefinition/owner\")\n        self.assertEqual(inst.id, \"herd1\")\n        self.assertEqual(inst.identifier[0].system, \"https://vetmed.iastate.edu/vdl\")\n        self.assertEqual(inst.identifier[0].value, \"20171120-1234\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name, \"Breeding herd\")\n        self.assertEqual(inst.quantity, 2500)\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"animal\")\n    \n    def testGroup2(self):\n        inst = self.instantiate_from(\"group-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Group instance\")\n        self.implGroup2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Group\", js[\"resourceType\"])\n        inst2 = group.Group(js)\n        self.implGroup2(inst2)\n    \n    def implGroup2(self, inst):\n        self.assertTrue(inst.actual)\n        self.assertEqual(inst.characteristic[0].code.text, \"gender\")\n        self.assertFalse(inst.characteristic[0].exclude)\n        self.assertEqual(inst.characteristic[0].valueCodeableConcept.text, \"mixed\")\n        self.assertEqual(inst.characteristic[1].code.text, \"owner\")\n        self.assertFalse(inst.characteristic[1].exclude)\n        self.assertEqual(inst.characteristic[1].valueCodeableConcept.text, \"John Smith\")\n        self.assertEqual(inst.code.text, \"Horse\")\n        self.assertEqual(inst.id, \"101\")\n        self.assertEqual(inst.identifier[0].system, \"http://someveterinarianclinic.org/fhir/NamingSystem/herds\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.name, \"John's herd\")\n        self.assertEqual(inst.quantity, 25)\n        self.assertEqual(inst.text.status, \"additional\")\n        self.assertEqual(inst.type, \"animal\")\n    \n    def testGroup3(self):\n        inst = self.instantiate_from(\"group-example-member.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Group instance\")\n        self.implGroup3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Group\", js[\"resourceType\"])\n        inst2 = group.Group(js)\n        self.implGroup3(inst2)\n    \n    def implGroup3(self, inst):\n        self.assertTrue(inst.actual)\n        self.assertEqual(inst.id, \"102\")\n        self.assertEqual(inst.member[0].period.start.datetime, FHIRDateTime(\"2014-10-08\").datetime)\n        self.assertEqual(inst.member[0].period.start.as_json(), \"2014-10-08\")\n        self.assertTrue(inst.member[1].inactive)\n        self.assertEqual(inst.member[1].period.start.datetime, FHIRDateTime(\"2015-04-02\").datetime)\n        self.assertEqual(inst.member[1].period.start.as_json(), \"2015-04-02\")\n        self.assertEqual(inst.member[2].period.start.datetime, FHIRDateTime(\"2015-08-06\").datetime)\n        self.assertEqual(inst.member[2].period.start.as_json(), \"2015-08-06\")\n        self.assertEqual(inst.member[3].period.start.datetime, FHIRDateTime(\"2015-08-06\").datetime)\n        self.assertEqual(inst.member[3].period.start.as_json(), \"2015-08-06\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"additional\")\n        self.assertEqual(inst.type, \"person\")\n    \n    def testGroup4(self):\n        inst = self.instantiate_from(\"group-example-patientlist.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Group instance\")\n        self.implGroup4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Group\", js[\"resourceType\"])\n        inst2 = group.Group(js)\n        self.implGroup4(inst2)\n    \n    def implGroup4(self, inst):\n        self.assertTrue(inst.actual)\n        self.assertEqual(inst.characteristic[0].code.coding[0].code, \"attributed-to\")\n        self.assertEqual(inst.characteristic[0].code.coding[0].system, \"http://example.org\")\n        self.assertEqual(inst.characteristic[0].code.text, \"Patients primarily attributed to\")\n        self.assertFalse(inst.characteristic[0].exclude)\n        self.assertEqual(inst.id, \"example-patientlist\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"additional\")\n        self.assertEqual(inst.type, \"person\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/group.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Group).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Group(domainresource.DomainResource):\n    \"\"\" Group of multiple entities.\n    \n    Represents a defined collection of entities that may be discussed or acted\n    upon collectively but which are not expected to act collectively, and are\n    not formally or legally recognized; i.e. a collection of entities that\n    isn't an Organization.\n    \"\"\"\n    \n    resource_type = \"Group\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.active = None\n        \"\"\" Whether this group's record is in active use.\n        Type `bool`. \"\"\"\n        \n        self.actual = None\n        \"\"\" Descriptive or actual.\n        Type `bool`. \"\"\"\n        \n        self.characteristic = None\n        \"\"\" Include / Exclude group members by Trait.\n        List of `GroupCharacteristic` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Kind of Group members.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique id.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.managingEntity = None\n        \"\"\" Entity that is the custodian of the Group's definition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.member = None\n        \"\"\" Who or what is in group.\n        List of `GroupMember` items (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Label for Group.\n        Type `str`. \"\"\"\n        \n        self.quantity = None\n        \"\"\" Number of members.\n        Type `int`. \"\"\"\n        \n        self.type = None\n        \"\"\" person | animal | practitioner | device | medication | substance.\n        Type `str`. \"\"\"\n        \n        super(Group, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Group, self).elementProperties()\n        js.extend([\n            (\"active\", \"active\", bool, False, None, False),\n            (\"actual\", \"actual\", bool, False, None, True),\n            (\"characteristic\", \"characteristic\", GroupCharacteristic, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"managingEntity\", \"managingEntity\", fhirreference.FHIRReference, False, None, False),\n            (\"member\", \"member\", GroupMember, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"quantity\", \"quantity\", int, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass GroupCharacteristic(backboneelement.BackboneElement):\n    \"\"\" Include / Exclude group members by Trait.\n    \n    Identifies traits whose presence r absence is shared by members of the\n    group.\n    \"\"\"\n    \n    resource_type = \"GroupCharacteristic\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Kind of characteristic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.exclude = None\n        \"\"\" Group includes or excludes.\n        Type `bool`. \"\"\"\n        \n        self.period = None\n        \"\"\" Period over which characteristic is tested.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Value held by characteristic.\n        Type `bool`. \"\"\"\n        \n        self.valueCodeableConcept = None\n        \"\"\" Value held by characteristic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Value held by characteristic.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRange = None\n        \"\"\" Value held by characteristic.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Value held by characteristic.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(GroupCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GroupCharacteristic, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"exclude\", \"exclude\", bool, False, None, True),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCodeableConcept\", \"valueCodeableConcept\", codeableconcept.CodeableConcept, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n            (\"valueRange\", \"valueRange\", range.Range, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n        ])\n        return js\n\n\nclass GroupMember(backboneelement.BackboneElement):\n    \"\"\" Who or what is in group.\n    \n    Identifies the resource instances that are members of the group.\n    \"\"\"\n    \n    resource_type = \"GroupMember\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.entity = None\n        \"\"\" Reference to the group member.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.inactive = None\n        \"\"\" If member is no longer in group.\n        Type `bool`. \"\"\"\n        \n        self.period = None\n        \"\"\" Period member belonged to the group.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(GroupMember, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(GroupMember, self).elementProperties()\n        js.extend([\n            (\"entity\", \"entity\", fhirreference.FHIRReference, False, None, True),\n            (\"inactive\", \"inactive\", bool, False, None, False),\n            (\"period\", \"period\", period.Period, False, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is not `None`, this method returns it; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` property via the `isostring` attribute. \n\nThis method is useful for retrieving the input string when working with FHIR date representations that may have been modified or normalized during instantiation. The `isostring` property handles transformations and may not accurately represent partial input dates, which are converted to the earliest full date.\n\nNo constants are used within this method.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is not `None`, this method returns it; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` property via the `isostring` attribute. \n\nThis method is useful for retrieving the input string when working with FHIR date representations that may have been modified or normalized during instantiation. The `isostring` property handles transformations and may not accurately represent partial input dates, which are converted to the earliest full date.\n\nNo constants are used within this method.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/group.py": {
      "Group.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Group instance representing a defined collection of entities that can be discussed or acted upon collectively, but are not legally recognized as an organization. This constructor initializes all valid properties related to the group's characteristics, identification, and membership based on an optional JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Group's properties. If provided, the Group will be populated with the corresponding values from this dictionary.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError. If False, these errors will be ignored.\n\nAttributes:\n- active (bool): Indicates if the group's record is actively in use.\n- actual (bool): Indicates if the group representation is descriptive or actual.\n- characteristic (list of GroupCharacteristic): Traits to include or exclude group members.\n- code (CodeableConcept): Describes the kind of group members.\n- identifier (list of Identifier): Provides unique identifiers for the group.\n- managingEntity (FHIRReference): The entity responsible for the group's definition.\n- member (list of GroupMember): References the entities that are members of the group.\n- name (str): The label for the group.\n- quantity (int): The number of members in the group.\n- type (str): Specifies what type of entities are in the group (e.g., person, animal, practitioner, device, medication, substance).\n\nThis constructor calls the superclass's constructor from domainresource.DomainResource to ensure proper initialization of inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.active = None\n        \" Whether this group's record is in active use.\\n        Type `bool`. \"\n        self.actual = None\n        ' Descriptive or actual.\\n        Type `bool`. '\n        self.characteristic = None\n        ' Include / Exclude group members by Trait.\\n        List of `GroupCharacteristic` items (represented as `dict` in JSON). '\n        self.code = None\n        ' Kind of Group members.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique id.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.managingEntity = None\n        \" Entity that is the custodian of the Group's definition.\\n        Type `FHIRReference` (represented as `dict` in JSON). \"\n        self.member = None\n        ' Who or what is in group.\\n        List of `GroupMember` items (represented as `dict` in JSON). '\n        self.name = None\n        ' Label for Group.\\n        Type `str`. '\n        self.quantity = None\n        ' Number of members.\\n        Type `int`. '\n        self.type = None\n        ' person | animal | practitioner | device | medication | substance.\\n        Type `str`. '\n        super(Group, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Group instance representing a defined collection of entities that can be discussed or acted upon collectively, but are not legally recognized as an organization. This constructor initializes all valid properties related to the group's characteristics, identification, and membership based on an optional JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Group's properties. If provided, the Group will be populated with the corresponding values from this dictionary.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError. If False, these errors will be ignored.\n\nAttributes:\n- active (bool): Indicates if the group's record is actively in use.\n- actual (bool): Indicates if the group representation is descriptive or actual.\n- characteristic (list of GroupCharacteristic): Traits to include or exclude group members.\n- code (CodeableConcept): Describes the kind of group members.\n- identifier (list of Identifier): Provides unique identifiers for the group.\n- managingEntity (FHIRReference): The entity responsible for the group's definition.\n- member (list of GroupMember): References the entities that are members of the group.\n- name (str): The label for the group.\n- quantity (int): The number of members in the group.\n- type (str): Specifies what type of entities are in the group (e.g., person, animal, practitioner, device, medication, substance).\n\nThis constructor calls the superclass's constructor from domainresource.DomainResource to ensure proper initialization of inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Group(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime object, which is a convenience class for working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in ISO 8601 format, or None. This value is passed to the parent class FHIRDate for initial processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property to hold the converted Python datetime object, initialized as None.\n\nThis constructor interacts with the FHIRDate parent class's constructor by passing the jsonval parameter to it, allowing for the initialization of attributes defined in FHIRDate. Notably, the FHIRDate class handles the parsing of the provided datetime string using its own methods, such as _parse_datetime.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime object, which is a convenience class for working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in ISO 8601 format, or None. This value is passed to the parent class FHIRDate for initial processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property to hold the converted Python datetime object, initialized as None.\n\nThis constructor interacts with the FHIRDate parent class's constructor by passing the jsonval parameter to it, allowing for the initialization of attributes defined in FHIRDate. Notably, the FHIRDate class handles the parsing of the provided datetime string using its own methods, such as _parse_datetime.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThe method calls the superclass's `as_json()` method to generate the base JSON representation and then adds the 'resourceType' field, which indicates the specific type of this FHIR resource. The `resource_type` attribute holds the value 'FHIRAbstractResource', which is defined as a class-level constant. This function does not take any parameters and returns a dictionary representing the FHIR resource instance in JSON format, suitable for serialization or transmission to a FHIR-compliant server.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThe method calls the superclass's `as_json()` method to generate the base JSON representation and then adds the 'resourceType' field, which indicates the specific type of this FHIR resource. The `resource_type` attribute holds the value 'FHIRAbstractResource', which is defined as a class-level constant. This function does not take any parameters and returns a dictionary representing the FHIR resource instance in JSON format, suitable for serialization or transmission to a FHIR-compliant server.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/group.py:Group:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/group_test.py:GroupTests:testGroup1": {
      "tests/models/group_test.py:GroupTests:instantiate_from": {
        "fhirclient/models/group.py:Group:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/group.py:Group:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/group_test.py:GroupTests:implGroup1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/group.py:Group:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/group.py:Group:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/group.py:Group:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/group_test.py:GroupTests:instantiate_from": {
      "fhirclient/models/group.py:Group:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/group.py:Group:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/group_test.py:GroupTests:testGroup2": {
      "tests/models/group_test.py:GroupTests:instantiate_from": {
        "fhirclient/models/group.py:Group:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/group.py:Group:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/group_test.py:GroupTests:implGroup2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/group.py:Group:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/group.py:Group:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/group.py:Group:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/group_test.py:GroupTests:testGroup3": {
      "tests/models/group_test.py:GroupTests:instantiate_from": {
        "fhirclient/models/group.py:Group:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/group.py:Group:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/group_test.py:GroupTests:implGroup3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/group.py:Group:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/group.py:Group:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/group.py:Group:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/group_test.py:GroupTests:testGroup4": {
      "tests/models/group_test.py:GroupTests:instantiate_from": {
        "fhirclient/models/group.py:Group:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/group.py:Group:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/group_test.py:GroupTests:implGroup4": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/group.py:Group:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/group.py:Group:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/group.py:Group:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-group_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 group.py\n            \u2514\u2500\u2500 Group.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for validating and testing the handling of FHIR Group resources, ensuring compliance with the FHIR (Fast Healthcare Interoperability Resources) specification. It supports the instantiation, serialization, deserialization, and integrity validation of Group data, which can represent collections of entities such as animals, people, or devices organized for various purposes like analysis or management. By validating key attributes such as membership, characteristics, and metadata, the module identifies inaccuracies or inconsistencies in FHIR Group resource implementations. This ensures developers and healthcare applications can reliably process and utilize Group resources in alignment with FHIR standards, addressing interoperability and data consistency challenges within the healthcare domain.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of the FHIRDate class. If the original JSON value (`origval`) is not `None`, this method returns it; otherwise, it returns the ISO 8601 string representation of the date stored in the `date` property via the `isostring` attribute. \n\nThis method is useful for retrieving the input string when working with FHIR date representations that may have been modified or normalized during instantiation. The `isostring` property handles transformations and may not accurately represent partial input dates, which are converted to the earliest full date.\n\nNo constants are used within this method.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/group.py\n\n- CLASS METHOD: Group.__init__\n  - CLASS SIGNATURE: class Group(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Group instance representing a defined collection of entities that can be discussed or acted upon collectively, but are not legally recognized as an organization. This constructor initializes all valid properties related to the group's characteristics, identification, and membership based on an optional JSON dictionary.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Group's properties. If provided, the Group will be populated with the corresponding values from this dictionary.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError. If False, these errors will be ignored.\n\nAttributes:\n- active (bool): Indicates if the group's record is actively in use.\n- actual (bool): Indicates if the group representation is descriptive or actual.\n- characteristic (list of GroupCharacteristic): Traits to include or exclude group members.\n- code (CodeableConcept): Describes the kind of group members.\n- identifier (list of Identifier): Provides unique identifiers for the group.\n- managingEntity (FHIRReference): The entity responsible for the group's definition.\n- member (list of GroupMember): References the entities that are members of the group.\n- name (str): The label for the group.\n- quantity (int): The number of members in the group.\n- type (str): Specifies what type of entities are in the group (e.g., person, animal, practitioner, device, medication, substance).\n\nThis constructor calls the superclass's constructor from domainresource.DomainResource to ensure proper initialization of inherited properties.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime object, which is a convenience class for working with FHIR datetimes in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a FHIR datetime in ISO 8601 format, or None. This value is passed to the parent class FHIRDate for initial processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A property to hold the converted Python datetime object, initialized as None.\n\nThis constructor interacts with the FHIRDate parent class's constructor by passing the jsonval parameter to it, allowing for the initialization of attributes defined in FHIRDate. Notably, the FHIRDate class handles the parsing of the provided datetime string using its own methods, such as _parse_datetime.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThe method calls the superclass's `as_json()` method to generate the base JSON representation and then adds the 'resourceType' field, which indicates the specific type of this FHIR resource. The `resource_type` attribute holds the value 'FHIRAbstractResource', which is defined as a class-level constant. This function does not take any parameters and returns a dictionary representing the FHIR resource instance in JSON format, suitable for serialization or transmission to a FHIR-compliant server.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/group.py": "from . import domainresource\n\nclass Group(domainresource.DomainResource):\n    \"\"\" Group of multiple entities.\n    \n    Represents a defined collection of entities that may be discussed or acted\n    upon collectively but which are not expected to act collectively, and are\n    not formally or legally recognized; i.e. a collection of entities that\n    isn't an Organization.\n    \"\"\"\n    resource_type = 'Group'\n\n    def elementProperties(self):\n        js = super(Group, self).elementProperties()\n        js.extend([('active', 'active', bool, False, None, False), ('actual', 'actual', bool, False, None, True), ('characteristic', 'characteristic', GroupCharacteristic, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('managingEntity', 'managingEntity', fhirreference.FHIRReference, False, None, False), ('member', 'member', GroupMember, True, None, False), ('name', 'name', str, False, None, False), ('quantity', 'quantity', int, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\nfrom . import backboneelement\n\nclass GroupCharacteristic(backboneelement.BackboneElement):\n    \"\"\" Include / Exclude group members by Trait.\n    \n    Identifies traits whose presence r absence is shared by members of the\n    group.\n    \"\"\"\n    resource_type = 'GroupCharacteristic'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Kind of characteristic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.exclude = None\n        ' Group includes or excludes.\\n        Type `bool`. '\n        self.period = None\n        ' Period over which characteristic is tested.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.valueBoolean = None\n        ' Value held by characteristic.\\n        Type `bool`. '\n        self.valueCodeableConcept = None\n        ' Value held by characteristic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueQuantity = None\n        ' Value held by characteristic.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueRange = None\n        ' Value held by characteristic.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Value held by characteristic.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(GroupCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GroupCharacteristic, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('exclude', 'exclude', bool, False, None, True), ('period', 'period', period.Period, False, None, False), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCodeableConcept', 'valueCodeableConcept', codeableconcept.CodeableConcept, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True), ('valueRange', 'valueRange', range.Range, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True)])\n        return js\n\nclass GroupMember(backboneelement.BackboneElement):\n    \"\"\" Who or what is in group.\n    \n    Identifies the resource instances that are members of the group.\n    \"\"\"\n    resource_type = 'GroupMember'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.entity = None\n        ' Reference to the group member.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.inactive = None\n        ' If member is no longer in group.\\n        Type `bool`. '\n        self.period = None\n        ' Period member belonged to the group.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(GroupMember, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(GroupMember, self).elementProperties()\n        js.extend([('entity', 'entity', fhirreference.FHIRReference, False, None, True), ('inactive', 'inactive', bool, False, None, False), ('period', 'period', period.Period, False, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}