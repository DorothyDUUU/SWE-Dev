{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicationknowledge_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicationknowledge_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicationknowledge\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicationKnowledgeTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicationKnowledge\", js[\"resourceType\"])\n        return medicationknowledge.MedicationKnowledge(js)\n    \n    def testMedicationKnowledge1(self):\n        inst = self.instantiate_from(\"medicationknowledge-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicationKnowledge instance\")\n        self.implMedicationKnowledge1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicationKnowledge\", js[\"resourceType\"])\n        inst2 = medicationknowledge.MedicationKnowledge(js)\n        self.implMedicationKnowledge1(inst2)\n    \n    def implMedicationKnowledge1(self, inst):\n        self.assertEqual(inst.amount.unit, \"mg/ml\")\n        self.assertEqual(inst.amount.value, 50)\n        self.assertEqual(inst.code.coding[0].code, \"0069-2587-10\")\n        self.assertEqual(inst.code.coding[0].display, \"Vancomycin Hydrochloride (VANCOMYCIN HYDROCHLORIDE)\")\n        self.assertEqual(inst.code.coding[0].system, \"http://hl7.org/fhir/sid/ndc\")\n        self.assertEqual(inst.contained[0].id, \"org4\")\n        self.assertEqual(inst.doseForm.coding[0].code, \"385219001\")\n        self.assertEqual(inst.doseForm.coding[0].display, \"Injection Solution (qualifier value)\")\n        self.assertEqual(inst.doseForm.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.synonym[0], \"Vancomycin Hydrochloride (VANCOMYCIN HYDROCHLORIDE)\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/medicationknowledge.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicationKnowledge).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicationKnowledge(domainresource.DomainResource):\n    \"\"\" Definition of Medication Knowledge.\n    \n    Information about a medication that is used to support knowledge.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledge\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.administrationGuidelines = None\n        \"\"\" Guidelines for administration of the medication.\n        List of `MedicationKnowledgeAdministrationGuidelines` items (represented as `dict` in JSON). \"\"\"\n        \n        self.amount = None\n        \"\"\" Amount of drug in package.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.associatedMedication = None\n        \"\"\" A medication resource that is associated with this medication.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Code that identifies this medication.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.contraindication = None\n        \"\"\" Potential clinical issue with or between medication(s).\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cost = None\n        \"\"\" The pricing of the medication.\n        List of `MedicationKnowledgeCost` items (represented as `dict` in JSON). \"\"\"\n        \n        self.doseForm = None\n        \"\"\" powder | tablets | capsule +.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.drugCharacteristic = None\n        \"\"\" Specifies descriptive properties of the medicine.\n        List of `MedicationKnowledgeDrugCharacteristic` items (represented as `dict` in JSON). \"\"\"\n        \n        self.ingredient = None\n        \"\"\" Active or inactive ingredient.\n        List of `MedicationKnowledgeIngredient` items (represented as `dict` in JSON). \"\"\"\n        \n        self.intendedRoute = None\n        \"\"\" The intended or approved route of administration.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.kinetics = None\n        \"\"\" The time course of drug absorption, distribution, metabolism and\n        excretion of a medication from the body.\n        List of `MedicationKnowledgeKinetics` items (represented as `dict` in JSON). \"\"\"\n        \n        self.manufacturer = None\n        \"\"\" Manufacturer of the item.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.medicineClassification = None\n        \"\"\" Categorization of the medication within a formulary or\n        classification system.\n        List of `MedicationKnowledgeMedicineClassification` items (represented as `dict` in JSON). \"\"\"\n        \n        self.monitoringProgram = None\n        \"\"\" Program under which a medication is reviewed.\n        List of `MedicationKnowledgeMonitoringProgram` items (represented as `dict` in JSON). \"\"\"\n        \n        self.monograph = None\n        \"\"\" Associated documentation about the medication.\n        List of `MedicationKnowledgeMonograph` items (represented as `dict` in JSON). \"\"\"\n        \n        self.packaging = None\n        \"\"\" Details about packaged medications.\n        Type `MedicationKnowledgePackaging` (represented as `dict` in JSON). \"\"\"\n        \n        self.preparationInstruction = None\n        \"\"\" The instructions for preparing the medication.\n        Type `str`. \"\"\"\n        \n        self.productType = None\n        \"\"\" Category of the medication or product.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.regulatory = None\n        \"\"\" Regulatory information about a medication.\n        List of `MedicationKnowledgeRegulatory` items (represented as `dict` in JSON). \"\"\"\n        \n        self.relatedMedicationKnowledge = None\n        \"\"\" Associated or related medication information.\n        List of `MedicationKnowledgeRelatedMedicationKnowledge` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | inactive | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.synonym = None\n        \"\"\" Additional names for a medication.\n        List of `str` items. \"\"\"\n        \n        super(MedicationKnowledge, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledge, self).elementProperties()\n        js.extend([\n            (\"administrationGuidelines\", \"administrationGuidelines\", MedicationKnowledgeAdministrationGuidelines, True, None, False),\n            (\"amount\", \"amount\", quantity.Quantity, False, None, False),\n            (\"associatedMedication\", \"associatedMedication\", fhirreference.FHIRReference, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"contraindication\", \"contraindication\", fhirreference.FHIRReference, True, None, False),\n            (\"cost\", \"cost\", MedicationKnowledgeCost, True, None, False),\n            (\"doseForm\", \"doseForm\", codeableconcept.CodeableConcept, False, None, False),\n            (\"drugCharacteristic\", \"drugCharacteristic\", MedicationKnowledgeDrugCharacteristic, True, None, False),\n            (\"ingredient\", \"ingredient\", MedicationKnowledgeIngredient, True, None, False),\n            (\"intendedRoute\", \"intendedRoute\", codeableconcept.CodeableConcept, True, None, False),\n            (\"kinetics\", \"kinetics\", MedicationKnowledgeKinetics, True, None, False),\n            (\"manufacturer\", \"manufacturer\", fhirreference.FHIRReference, False, None, False),\n            (\"medicineClassification\", \"medicineClassification\", MedicationKnowledgeMedicineClassification, True, None, False),\n            (\"monitoringProgram\", \"monitoringProgram\", MedicationKnowledgeMonitoringProgram, True, None, False),\n            (\"monograph\", \"monograph\", MedicationKnowledgeMonograph, True, None, False),\n            (\"packaging\", \"packaging\", MedicationKnowledgePackaging, False, None, False),\n            (\"preparationInstruction\", \"preparationInstruction\", str, False, None, False),\n            (\"productType\", \"productType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"regulatory\", \"regulatory\", MedicationKnowledgeRegulatory, True, None, False),\n            (\"relatedMedicationKnowledge\", \"relatedMedicationKnowledge\", MedicationKnowledgeRelatedMedicationKnowledge, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"synonym\", \"synonym\", str, True, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicationKnowledgeAdministrationGuidelines(backboneelement.BackboneElement):\n    \"\"\" Guidelines for administration of the medication.\n    \n    Guidelines for the administration of the medication.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeAdministrationGuidelines\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.dosage = None\n        \"\"\" Dosage for the medication for the specific guidelines.\n        List of `MedicationKnowledgeAdministrationGuidelinesDosage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.indicationCodeableConcept = None\n        \"\"\" Indication for use that apply to the specific administration\n        guidelines.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.indicationReference = None\n        \"\"\" Indication for use that apply to the specific administration\n        guidelines.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.patientCharacteristics = None\n        \"\"\" Characteristics of the patient that are relevant to the\n        administration guidelines.\n        List of `MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeAdministrationGuidelines, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelines, self).elementProperties()\n        js.extend([\n            (\"dosage\", \"dosage\", MedicationKnowledgeAdministrationGuidelinesDosage, True, None, False),\n            (\"indicationCodeableConcept\", \"indicationCodeableConcept\", codeableconcept.CodeableConcept, False, \"indication\", False),\n            (\"indicationReference\", \"indicationReference\", fhirreference.FHIRReference, False, \"indication\", False),\n            (\"patientCharacteristics\", \"patientCharacteristics\", MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, True, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeAdministrationGuidelinesDosage(backboneelement.BackboneElement):\n    \"\"\" Dosage for the medication for the specific guidelines.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeAdministrationGuidelinesDosage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.dosage = None\n        \"\"\" Dosage for the medication for the specific guidelines.\n        List of `Dosage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of dosage.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeAdministrationGuidelinesDosage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelinesDosage, self).elementProperties()\n        js.extend([\n            (\"dosage\", \"dosage\", dosage.Dosage, True, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(backboneelement.BackboneElement):\n    \"\"\" Characteristics of the patient that are relevant to the administration\n    guidelines.\n    \n    Characteristics of the patient that are relevant to the administration\n    guidelines (for example, height, weight, gender, etc.).\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.characteristicCodeableConcept = None\n        \"\"\" Specific characteristic that is relevant to the administration\n        guideline.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.characteristicQuantity = None\n        \"\"\" Specific characteristic that is relevant to the administration\n        guideline.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" The specific characteristic.\n        List of `str` items. \"\"\"\n        \n        super(MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, self).elementProperties()\n        js.extend([\n            (\"characteristicCodeableConcept\", \"characteristicCodeableConcept\", codeableconcept.CodeableConcept, False, \"characteristic\", True),\n            (\"characteristicQuantity\", \"characteristicQuantity\", quantity.Quantity, False, \"characteristic\", True),\n            (\"value\", \"value\", str, True, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeCost(backboneelement.BackboneElement):\n    \"\"\" The pricing of the medication.\n    \n    The price of the medication.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeCost\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.cost = None\n        \"\"\" The price of the medication.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.source = None\n        \"\"\" The source or owner for the price information.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" The category of the cost information.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeCost, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeCost, self).elementProperties()\n        js.extend([\n            (\"cost\", \"cost\", money.Money, False, None, True),\n            (\"source\", \"source\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeDrugCharacteristic(backboneelement.BackboneElement):\n    \"\"\" Specifies descriptive properties of the medicine.\n    \n    Specifies descriptive properties of the medicine, such as color, shape,\n    imprints, etc.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeDrugCharacteristic\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.type = None\n        \"\"\" Code specifying the type of characteristic of medication.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBase64Binary = None\n        \"\"\" Description of the characteristic.\n        Type `str`. \"\"\"\n        \n        self.valueCodeableConcept = None\n        \"\"\" Description of the characteristic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Description of the characteristic.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Description of the characteristic.\n        Type `str`. \"\"\"\n        \n        super(MedicationKnowledgeDrugCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeDrugCharacteristic, self).elementProperties()\n        js.extend([\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"valueBase64Binary\", \"valueBase64Binary\", str, False, \"value\", False),\n            (\"valueCodeableConcept\", \"valueCodeableConcept\", codeableconcept.CodeableConcept, False, \"value\", False),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", False),\n            (\"valueString\", \"valueString\", str, False, \"value\", False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeIngredient(backboneelement.BackboneElement):\n    \"\"\" Active or inactive ingredient.\n    \n    Identifies a particular constituent of interest in the product.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeIngredient\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.isActive = None\n        \"\"\" Active ingredient indicator.\n        Type `bool`. \"\"\"\n        \n        self.itemCodeableConcept = None\n        \"\"\" Medication(s) or substance(s) contained in the medication.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.itemReference = None\n        \"\"\" Medication(s) or substance(s) contained in the medication.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.strength = None\n        \"\"\" Quantity of ingredient present.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeIngredient, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeIngredient, self).elementProperties()\n        js.extend([\n            (\"isActive\", \"isActive\", bool, False, None, False),\n            (\"itemCodeableConcept\", \"itemCodeableConcept\", codeableconcept.CodeableConcept, False, \"item\", True),\n            (\"itemReference\", \"itemReference\", fhirreference.FHIRReference, False, \"item\", True),\n            (\"strength\", \"strength\", ratio.Ratio, False, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeKinetics(backboneelement.BackboneElement):\n    \"\"\" The time course of drug absorption, distribution, metabolism and excretion\n    of a medication from the body.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeKinetics\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.areaUnderCurve = None\n        \"\"\" The drug concentration measured at certain discrete points in time.\n        List of `Quantity` items (represented as `dict` in JSON). \"\"\"\n        \n        self.halfLifePeriod = None\n        \"\"\" Time required for concentration in the body to decrease by half.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.lethalDose50 = None\n        \"\"\" The median lethal dose of a drug.\n        List of `Quantity` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeKinetics, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeKinetics, self).elementProperties()\n        js.extend([\n            (\"areaUnderCurve\", \"areaUnderCurve\", quantity.Quantity, True, None, False),\n            (\"halfLifePeriod\", \"halfLifePeriod\", duration.Duration, False, None, False),\n            (\"lethalDose50\", \"lethalDose50\", quantity.Quantity, True, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeMedicineClassification(backboneelement.BackboneElement):\n    \"\"\" Categorization of the medication within a formulary or classification\n    system.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeMedicineClassification\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.classification = None\n        \"\"\" Specific category assigned to the medication.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The type of category for the medication (for example, therapeutic\n        classification, therapeutic sub-classification).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeMedicineClassification, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeMedicineClassification, self).elementProperties()\n        js.extend([\n            (\"classification\", \"classification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeMonitoringProgram(backboneelement.BackboneElement):\n    \"\"\" Program under which a medication is reviewed.\n    \n    The program under which the medication is reviewed.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeMonitoringProgram\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.name = None\n        \"\"\" Name of the reviewing program.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of program under which the medication is monitored.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeMonitoringProgram, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeMonitoringProgram, self).elementProperties()\n        js.extend([\n            (\"name\", \"name\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeMonograph(backboneelement.BackboneElement):\n    \"\"\" Associated documentation about the medication.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeMonograph\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.source = None\n        \"\"\" Associated documentation about the medication.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The category of medication document.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeMonograph, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeMonograph, self).elementProperties()\n        js.extend([\n            (\"source\", \"source\", fhirreference.FHIRReference, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgePackaging(backboneelement.BackboneElement):\n    \"\"\" Details about packaged medications.\n    \n    Information that only applies to packages (not products).\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgePackaging\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.quantity = None\n        \"\"\" The number of product units the package would contain if fully\n        loaded.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" A code that defines the specific type of packaging that the\n        medication can be found in.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgePackaging, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgePackaging, self).elementProperties()\n        js.extend([\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeRegulatory(backboneelement.BackboneElement):\n    \"\"\" Regulatory information about a medication.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeRegulatory\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.maxDispense = None\n        \"\"\" The maximum number of units of the medication that can be dispensed\n        in a period.\n        Type `MedicationKnowledgeRegulatoryMaxDispense` (represented as `dict` in JSON). \"\"\"\n        \n        self.regulatoryAuthority = None\n        \"\"\" Specifies the authority of the regulation.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.schedule = None\n        \"\"\" Specifies the schedule of a medication in jurisdiction.\n        List of `MedicationKnowledgeRegulatorySchedule` items (represented as `dict` in JSON). \"\"\"\n        \n        self.substitution = None\n        \"\"\" Specifies if changes are allowed when dispensing a medication from\n        a regulatory perspective.\n        List of `MedicationKnowledgeRegulatorySubstitution` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeRegulatory, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatory, self).elementProperties()\n        js.extend([\n            (\"maxDispense\", \"maxDispense\", MedicationKnowledgeRegulatoryMaxDispense, False, None, False),\n            (\"regulatoryAuthority\", \"regulatoryAuthority\", fhirreference.FHIRReference, False, None, True),\n            (\"schedule\", \"schedule\", MedicationKnowledgeRegulatorySchedule, True, None, False),\n            (\"substitution\", \"substitution\", MedicationKnowledgeRegulatorySubstitution, True, None, False),\n        ])\n        return js\n\n\nclass MedicationKnowledgeRegulatoryMaxDispense(backboneelement.BackboneElement):\n    \"\"\" The maximum number of units of the medication that can be dispensed in a\n    period.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeRegulatoryMaxDispense\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.period = None\n        \"\"\" The period that applies to the maximum number of units.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.quantity = None\n        \"\"\" The maximum number of units of the medication that can be dispensed.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeRegulatoryMaxDispense, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatoryMaxDispense, self).elementProperties()\n        js.extend([\n            (\"period\", \"period\", duration.Duration, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeRegulatorySchedule(backboneelement.BackboneElement):\n    \"\"\" Specifies the schedule of a medication in jurisdiction.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeRegulatorySchedule\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.schedule = None\n        \"\"\" Specifies the specific drug schedule.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeRegulatorySchedule, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatorySchedule, self).elementProperties()\n        js.extend([\n            (\"schedule\", \"schedule\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeRegulatorySubstitution(backboneelement.BackboneElement):\n    \"\"\" Specifies if changes are allowed when dispensing a medication from a\n    regulatory perspective.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeRegulatorySubstitution\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.allowed = None\n        \"\"\" Specifies if regulation allows for changes in the medication when\n        dispensing.\n        Type `bool`. \"\"\"\n        \n        self.type = None\n        \"\"\" Specifies the type of substitution allowed.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeRegulatorySubstitution, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatorySubstitution, self).elementProperties()\n        js.extend([\n            (\"allowed\", \"allowed\", bool, False, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nclass MedicationKnowledgeRelatedMedicationKnowledge(backboneelement.BackboneElement):\n    \"\"\" Associated or related medication information.\n    \n    Associated or related knowledge about a medication.\n    \"\"\"\n    \n    resource_type = \"MedicationKnowledgeRelatedMedicationKnowledge\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.reference = None\n        \"\"\" Associated documentation about the associated medication knowledge.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Category of medicationKnowledge.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicationKnowledgeRelatedMedicationKnowledge, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicationKnowledgeRelatedMedicationKnowledge, self).elementProperties()\n        js.extend([\n            (\"reference\", \"reference\", fhirreference.FHIRReference, True, None, True),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import dosage\nfrom . import duration\nfrom . import fhirreference\nfrom . import money\nfrom . import quantity\nfrom . import ratio\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nrepresentation and then adds the 'resourceType' key, which indicates the \nspecific type of FHIR resource. This key is set to the value of the \nresource_type class attribute, which is defined in the FHIRAbstractResource \nclass and defaults to 'FHIRAbstractResource'. \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, \n    including the 'resourceType' attribute.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the method from \n      the superclass to obtain the base representation before adding \n      additional information.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nrepresentation and then adds the 'resourceType' key, which indicates the \nspecific type of FHIR resource. This key is set to the value of the \nresource_type class attribute, which is defined in the FHIRAbstractResource \nclass and defaults to 'FHIRAbstractResource'. \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, \n    including the 'resourceType' attribute.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the method from \n      the superclass to obtain the base representation before adding \n      additional information.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/medicationknowledge.py": {
      "MedicationKnowledge.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicationKnowledge instance containing definitions and attributes related to medication knowledge, as specified by the FHIR standard.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object's properties. This can include various medication-related attributes as per the FHIR specification.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for any invalid variables during initialization; if False, non-conforming data will not raise an error.\n\nAttributes:\n- administrationGuidelines: Guidelines for administering the medication, represented as a list of MedicationKnowledgeAdministrationGuidelines.\n- amount: Indicates the amount of drug in the package as a Quantity object.\n- associatedMedication: References to other medications that correlate with this one.\n- code: Unique code identifying the medication, as a CodeableConcept.\n- contraindication: References potential clinical issues related to the medication.\n- cost: Pricing information about the medication, represented as a list of MedicationKnowledgeCost objects.\n- doseForm: Describes the form of the medication (e.g., powder, tablet, capsule), represented as CodeableConcept.\n- drugCharacteristic, ingredient, intendedRoute, kinetics, manufacturer, medicineClassification, monitoringProgram, monograph, packaging, preparationInstruction, productType, regulatory, relatedMedicationKnowledge, status, synonym: Various attributes capturing the detailed aspects of the medication, its use, and characteristics.\n\nInteractions:\nThis class inherits from domainresource.DomainResource, benefiting from its basic structure and functionality, which allows for consistent resource management as defined in the FHIR specification.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.administrationGuidelines = None\n        ' Guidelines for administration of the medication.\\n        List of `MedicationKnowledgeAdministrationGuidelines` items (represented as `dict` in JSON). '\n        self.amount = None\n        ' Amount of drug in package.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.associatedMedication = None\n        ' A medication resource that is associated with this medication.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.code = None\n        ' Code that identifies this medication.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.contraindication = None\n        ' Potential clinical issue with or between medication(s).\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.cost = None\n        ' The pricing of the medication.\\n        List of `MedicationKnowledgeCost` items (represented as `dict` in JSON). '\n        self.doseForm = None\n        ' powder | tablets | capsule +.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.drugCharacteristic = None\n        ' Specifies descriptive properties of the medicine.\\n        List of `MedicationKnowledgeDrugCharacteristic` items (represented as `dict` in JSON). '\n        self.ingredient = None\n        ' Active or inactive ingredient.\\n        List of `MedicationKnowledgeIngredient` items (represented as `dict` in JSON). '\n        self.intendedRoute = None\n        ' The intended or approved route of administration.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.kinetics = None\n        ' The time course of drug absorption, distribution, metabolism and\\n        excretion of a medication from the body.\\n        List of `MedicationKnowledgeKinetics` items (represented as `dict` in JSON). '\n        self.manufacturer = None\n        ' Manufacturer of the item.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.medicineClassification = None\n        ' Categorization of the medication within a formulary or\\n        classification system.\\n        List of `MedicationKnowledgeMedicineClassification` items (represented as `dict` in JSON). '\n        self.monitoringProgram = None\n        ' Program under which a medication is reviewed.\\n        List of `MedicationKnowledgeMonitoringProgram` items (represented as `dict` in JSON). '\n        self.monograph = None\n        ' Associated documentation about the medication.\\n        List of `MedicationKnowledgeMonograph` items (represented as `dict` in JSON). '\n        self.packaging = None\n        ' Details about packaged medications.\\n        Type `MedicationKnowledgePackaging` (represented as `dict` in JSON). '\n        self.preparationInstruction = None\n        ' The instructions for preparing the medication.\\n        Type `str`. '\n        self.productType = None\n        ' Category of the medication or product.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.regulatory = None\n        ' Regulatory information about a medication.\\n        List of `MedicationKnowledgeRegulatory` items (represented as `dict` in JSON). '\n        self.relatedMedicationKnowledge = None\n        ' Associated or related medication information.\\n        List of `MedicationKnowledgeRelatedMedicationKnowledge` items (represented as `dict` in JSON). '\n        self.status = None\n        ' active | inactive | entered-in-error.\\n        Type `str`. '\n        self.synonym = None\n        ' Additional names for a medication.\\n        List of `str` items. '\n        super(MedicationKnowledge, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicationKnowledge instance containing definitions and attributes related to medication knowledge, as specified by the FHIR standard.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object's properties. This can include various medication-related attributes as per the FHIR specification.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for any invalid variables during initialization; if False, non-conforming data will not raise an error.\n\nAttributes:\n- administrationGuidelines: Guidelines for administering the medication, represented as a list of MedicationKnowledgeAdministrationGuidelines.\n- amount: Indicates the amount of drug in the package as a Quantity object.\n- associatedMedication: References to other medications that correlate with this one.\n- code: Unique code identifying the medication, as a CodeableConcept.\n- contraindication: References potential clinical issues related to the medication.\n- cost: Pricing information about the medication, represented as a list of MedicationKnowledgeCost objects.\n- doseForm: Describes the form of the medication (e.g., powder, tablet, capsule), represented as CodeableConcept.\n- drugCharacteristic, ingredient, intendedRoute, kinetics, manufacturer, medicineClassification, monitoringProgram, monograph, packaging, preparationInstruction, productType, regulatory, relatedMedicationKnowledge, status, synonym: Various attributes capturing the detailed aspects of the medication, its use, and characteristics.\n\nInteractions:\nThis class inherits from domainresource.DomainResource, benefiting from its basic structure and functionality, which allows for consistent resource management as defined in the FHIR specification.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicationKnowledge(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicationknowledge.py:MedicationKnowledge:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/medicationknowledge_test.py:MedicationKnowledgeTests:testMedicationKnowledge1": {
      "tests/models/medicationknowledge_test.py:MedicationKnowledgeTests:instantiate_from": {
        "fhirclient/models/medicationknowledge.py:MedicationKnowledge:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicationknowledge.py:MedicationKnowledge:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicationknowledge_test.py:MedicationKnowledgeTests:implMedicationKnowledge1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicationknowledge.py:MedicationKnowledge:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicationknowledge.py:MedicationKnowledge:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicationknowledge.py:MedicationKnowledge:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicationknowledge_test.py:MedicationKnowledgeTests:instantiate_from": {
      "fhirclient/models/medicationknowledge.py:MedicationKnowledge:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicationknowledge.py:MedicationKnowledge:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicationknowledge_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 medicationknowledge.py\n            \u2514\u2500\u2500 MedicationKnowledge.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe MedicationKnowledge module facilitates the validation, instantiation, and manipulation of FHIR-compliant MedicationKnowledge resources, which represent detailed information about medications, including their properties, codes, dosages, and status. It enables the testing and verification of resource structure and data consistency against the FHIR (Fast Healthcare Interoperability Resources) standard by loading example data, mapping it to FHIR-compliant objects, and conducting structured assertions to ensure adherence to specifications. This module addresses the need for standardized and reliable integration of medication knowledge data within healthcare systems, supporting developers in building, testing, and maintaining interoperable, FHIR-compliant healthcare applications. By providing a framework for validating MedicationKnowledge resources, it ensures robust data handling and consistency across healthcare workflows.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource to a JSON representation.\n\nThis method calls the superclass's as_json method to obtain the base JSON \nrepresentation and then adds the 'resourceType' key, which indicates the \nspecific type of FHIR resource. This key is set to the value of the \nresource_type class attribute, which is defined in the FHIRAbstractResource \nclass and defaults to 'FHIRAbstractResource'. \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the FHIR resource, \n    including the 'resourceType' attribute.\n\nDependencies:\n    - `super(FHIRAbstractResource, self).as_json()`: Calls the method from \n      the superclass to obtain the base representation before adding \n      additional information.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/medicationknowledge.py\n\n- CLASS METHOD: MedicationKnowledge.__init__\n  - CLASS SIGNATURE: class MedicationKnowledge(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicationKnowledge instance containing definitions and attributes related to medication knowledge, as specified by the FHIR standard.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the object's properties. This can include various medication-related attributes as per the FHIR specification.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for any invalid variables during initialization; if False, non-conforming data will not raise an error.\n\nAttributes:\n- administrationGuidelines: Guidelines for administering the medication, represented as a list of MedicationKnowledgeAdministrationGuidelines.\n- amount: Indicates the amount of drug in the package as a Quantity object.\n- associatedMedication: References to other medications that correlate with this one.\n- code: Unique code identifying the medication, as a CodeableConcept.\n- contraindication: References potential clinical issues related to the medication.\n- cost: Pricing information about the medication, represented as a list of MedicationKnowledgeCost objects.\n- doseForm: Describes the form of the medication (e.g., powder, tablet, capsule), represented as CodeableConcept.\n- drugCharacteristic, ingredient, intendedRoute, kinetics, manufacturer, medicineClassification, monitoringProgram, monograph, packaging, preparationInstruction, productType, regulatory, relatedMedicationKnowledge, status, synonym: Various attributes capturing the detailed aspects of the medication, its use, and characteristics.\n\nInteractions:\nThis class inherits from domainresource.DomainResource, benefiting from its basic structure and functionality, which allows for consistent resource management as defined in the FHIR specification.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/medicationknowledge.py": "from . import domainresource\n\nclass MedicationKnowledge(domainresource.DomainResource):\n    \"\"\" Definition of Medication Knowledge.\n    \n    Information about a medication that is used to support knowledge.\n    \"\"\"\n    resource_type = 'MedicationKnowledge'\n\n    def elementProperties(self):\n        js = super(MedicationKnowledge, self).elementProperties()\n        js.extend([('administrationGuidelines', 'administrationGuidelines', MedicationKnowledgeAdministrationGuidelines, True, None, False), ('amount', 'amount', quantity.Quantity, False, None, False), ('associatedMedication', 'associatedMedication', fhirreference.FHIRReference, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('contraindication', 'contraindication', fhirreference.FHIRReference, True, None, False), ('cost', 'cost', MedicationKnowledgeCost, True, None, False), ('doseForm', 'doseForm', codeableconcept.CodeableConcept, False, None, False), ('drugCharacteristic', 'drugCharacteristic', MedicationKnowledgeDrugCharacteristic, True, None, False), ('ingredient', 'ingredient', MedicationKnowledgeIngredient, True, None, False), ('intendedRoute', 'intendedRoute', codeableconcept.CodeableConcept, True, None, False), ('kinetics', 'kinetics', MedicationKnowledgeKinetics, True, None, False), ('manufacturer', 'manufacturer', fhirreference.FHIRReference, False, None, False), ('medicineClassification', 'medicineClassification', MedicationKnowledgeMedicineClassification, True, None, False), ('monitoringProgram', 'monitoringProgram', MedicationKnowledgeMonitoringProgram, True, None, False), ('monograph', 'monograph', MedicationKnowledgeMonograph, True, None, False), ('packaging', 'packaging', MedicationKnowledgePackaging, False, None, False), ('preparationInstruction', 'preparationInstruction', str, False, None, False), ('productType', 'productType', codeableconcept.CodeableConcept, True, None, False), ('regulatory', 'regulatory', MedicationKnowledgeRegulatory, True, None, False), ('relatedMedicationKnowledge', 'relatedMedicationKnowledge', MedicationKnowledgeRelatedMedicationKnowledge, True, None, False), ('status', 'status', str, False, None, False), ('synonym', 'synonym', str, True, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MedicationKnowledgeAdministrationGuidelines(backboneelement.BackboneElement):\n    \"\"\" Guidelines for administration of the medication.\n    \n    Guidelines for the administration of the medication.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeAdministrationGuidelines'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.dosage = None\n        ' Dosage for the medication for the specific guidelines.\\n        List of `MedicationKnowledgeAdministrationGuidelinesDosage` items (represented as `dict` in JSON). '\n        self.indicationCodeableConcept = None\n        ' Indication for use that apply to the specific administration\\n        guidelines.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.indicationReference = None\n        ' Indication for use that apply to the specific administration\\n        guidelines.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.patientCharacteristics = None\n        ' Characteristics of the patient that are relevant to the\\n        administration guidelines.\\n        List of `MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics` items (represented as `dict` in JSON). '\n        super(MedicationKnowledgeAdministrationGuidelines, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelines, self).elementProperties()\n        js.extend([('dosage', 'dosage', MedicationKnowledgeAdministrationGuidelinesDosage, True, None, False), ('indicationCodeableConcept', 'indicationCodeableConcept', codeableconcept.CodeableConcept, False, 'indication', False), ('indicationReference', 'indicationReference', fhirreference.FHIRReference, False, 'indication', False), ('patientCharacteristics', 'patientCharacteristics', MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, True, None, False)])\n        return js\n\nclass MedicationKnowledgeAdministrationGuidelinesDosage(backboneelement.BackboneElement):\n    \"\"\" Dosage for the medication for the specific guidelines.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeAdministrationGuidelinesDosage'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.dosage = None\n        ' Dosage for the medication for the specific guidelines.\\n        List of `Dosage` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of dosage.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeAdministrationGuidelinesDosage, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelinesDosage, self).elementProperties()\n        js.extend([('dosage', 'dosage', dosage.Dosage, True, None, True), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(backboneelement.BackboneElement):\n    \"\"\" Characteristics of the patient that are relevant to the administration\n    guidelines.\n    \n    Characteristics of the patient that are relevant to the administration\n    guidelines (for example, height, weight, gender, etc.).\n    \"\"\"\n    resource_type = 'MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.characteristicCodeableConcept = None\n        ' Specific characteristic that is relevant to the administration\\n        guideline.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.characteristicQuantity = None\n        ' Specific characteristic that is relevant to the administration\\n        guideline.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.value = None\n        ' The specific characteristic.\\n        List of `str` items. '\n        super(MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics, self).elementProperties()\n        js.extend([('characteristicCodeableConcept', 'characteristicCodeableConcept', codeableconcept.CodeableConcept, False, 'characteristic', True), ('characteristicQuantity', 'characteristicQuantity', quantity.Quantity, False, 'characteristic', True), ('value', 'value', str, True, None, False)])\n        return js\n\nclass MedicationKnowledgeCost(backboneelement.BackboneElement):\n    \"\"\" The pricing of the medication.\n    \n    The price of the medication.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeCost'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.cost = None\n        ' The price of the medication.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.source = None\n        ' The source or owner for the price information.\\n        Type `str`. '\n        self.type = None\n        ' The category of the cost information.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeCost, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeCost, self).elementProperties()\n        js.extend([('cost', 'cost', money.Money, False, None, True), ('source', 'source', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicationKnowledgeDrugCharacteristic(backboneelement.BackboneElement):\n    \"\"\" Specifies descriptive properties of the medicine.\n    \n    Specifies descriptive properties of the medicine, such as color, shape,\n    imprints, etc.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeDrugCharacteristic'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.type = None\n        ' Code specifying the type of characteristic of medication.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueBase64Binary = None\n        ' Description of the characteristic.\\n        Type `str`. '\n        self.valueCodeableConcept = None\n        ' Description of the characteristic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueQuantity = None\n        ' Description of the characteristic.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Description of the characteristic.\\n        Type `str`. '\n        super(MedicationKnowledgeDrugCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeDrugCharacteristic, self).elementProperties()\n        js.extend([('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('valueBase64Binary', 'valueBase64Binary', str, False, 'value', False), ('valueCodeableConcept', 'valueCodeableConcept', codeableconcept.CodeableConcept, False, 'value', False), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', False), ('valueString', 'valueString', str, False, 'value', False)])\n        return js\n\nclass MedicationKnowledgeIngredient(backboneelement.BackboneElement):\n    \"\"\" Active or inactive ingredient.\n    \n    Identifies a particular constituent of interest in the product.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeIngredient'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.isActive = None\n        ' Active ingredient indicator.\\n        Type `bool`. '\n        self.itemCodeableConcept = None\n        ' Medication(s) or substance(s) contained in the medication.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.itemReference = None\n        ' Medication(s) or substance(s) contained in the medication.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.strength = None\n        ' Quantity of ingredient present.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeIngredient, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeIngredient, self).elementProperties()\n        js.extend([('isActive', 'isActive', bool, False, None, False), ('itemCodeableConcept', 'itemCodeableConcept', codeableconcept.CodeableConcept, False, 'item', True), ('itemReference', 'itemReference', fhirreference.FHIRReference, False, 'item', True), ('strength', 'strength', ratio.Ratio, False, None, False)])\n        return js\n\nclass MedicationKnowledgeKinetics(backboneelement.BackboneElement):\n    \"\"\" The time course of drug absorption, distribution, metabolism and excretion\n    of a medication from the body.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeKinetics'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.areaUnderCurve = None\n        ' The drug concentration measured at certain discrete points in time.\\n        List of `Quantity` items (represented as `dict` in JSON). '\n        self.halfLifePeriod = None\n        ' Time required for concentration in the body to decrease by half.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.lethalDose50 = None\n        ' The median lethal dose of a drug.\\n        List of `Quantity` items (represented as `dict` in JSON). '\n        super(MedicationKnowledgeKinetics, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeKinetics, self).elementProperties()\n        js.extend([('areaUnderCurve', 'areaUnderCurve', quantity.Quantity, True, None, False), ('halfLifePeriod', 'halfLifePeriod', duration.Duration, False, None, False), ('lethalDose50', 'lethalDose50', quantity.Quantity, True, None, False)])\n        return js\n\nclass MedicationKnowledgeMedicineClassification(backboneelement.BackboneElement):\n    \"\"\" Categorization of the medication within a formulary or classification\n    system.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeMedicineClassification'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.classification = None\n        ' Specific category assigned to the medication.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' The type of category for the medication (for example, therapeutic\\n        classification, therapeutic sub-classification).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeMedicineClassification, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeMedicineClassification, self).elementProperties()\n        js.extend([('classification', 'classification', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicationKnowledgeMonitoringProgram(backboneelement.BackboneElement):\n    \"\"\" Program under which a medication is reviewed.\n    \n    The program under which the medication is reviewed.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeMonitoringProgram'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.name = None\n        ' Name of the reviewing program.\\n        Type `str`. '\n        self.type = None\n        ' Type of program under which the medication is monitored.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeMonitoringProgram, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeMonitoringProgram, self).elementProperties()\n        js.extend([('name', 'name', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MedicationKnowledgeMonograph(backboneelement.BackboneElement):\n    \"\"\" Associated documentation about the medication.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeMonograph'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.source = None\n        ' Associated documentation about the medication.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.type = None\n        ' The category of medication document.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeMonograph, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeMonograph, self).elementProperties()\n        js.extend([('source', 'source', fhirreference.FHIRReference, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MedicationKnowledgePackaging(backboneelement.BackboneElement):\n    \"\"\" Details about packaged medications.\n    \n    Information that only applies to packages (not products).\n    \"\"\"\n    resource_type = 'MedicationKnowledgePackaging'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.quantity = None\n        ' The number of product units the package would contain if fully\\n        loaded.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.type = None\n        ' A code that defines the specific type of packaging that the\\n        medication can be found in.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgePackaging, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgePackaging, self).elementProperties()\n        js.extend([('quantity', 'quantity', quantity.Quantity, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MedicationKnowledgeRegulatory(backboneelement.BackboneElement):\n    \"\"\" Regulatory information about a medication.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeRegulatory'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.maxDispense = None\n        ' The maximum number of units of the medication that can be dispensed\\n        in a period.\\n        Type `MedicationKnowledgeRegulatoryMaxDispense` (represented as `dict` in JSON). '\n        self.regulatoryAuthority = None\n        ' Specifies the authority of the regulation.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.schedule = None\n        ' Specifies the schedule of a medication in jurisdiction.\\n        List of `MedicationKnowledgeRegulatorySchedule` items (represented as `dict` in JSON). '\n        self.substitution = None\n        ' Specifies if changes are allowed when dispensing a medication from\\n        a regulatory perspective.\\n        List of `MedicationKnowledgeRegulatorySubstitution` items (represented as `dict` in JSON). '\n        super(MedicationKnowledgeRegulatory, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatory, self).elementProperties()\n        js.extend([('maxDispense', 'maxDispense', MedicationKnowledgeRegulatoryMaxDispense, False, None, False), ('regulatoryAuthority', 'regulatoryAuthority', fhirreference.FHIRReference, False, None, True), ('schedule', 'schedule', MedicationKnowledgeRegulatorySchedule, True, None, False), ('substitution', 'substitution', MedicationKnowledgeRegulatorySubstitution, True, None, False)])\n        return js\n\nclass MedicationKnowledgeRegulatoryMaxDispense(backboneelement.BackboneElement):\n    \"\"\" The maximum number of units of the medication that can be dispensed in a\n    period.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeRegulatoryMaxDispense'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.period = None\n        ' The period that applies to the maximum number of units.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.quantity = None\n        ' The maximum number of units of the medication that can be dispensed.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeRegulatoryMaxDispense, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatoryMaxDispense, self).elementProperties()\n        js.extend([('period', 'period', duration.Duration, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, True)])\n        return js\n\nclass MedicationKnowledgeRegulatorySchedule(backboneelement.BackboneElement):\n    \"\"\" Specifies the schedule of a medication in jurisdiction.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeRegulatorySchedule'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.schedule = None\n        ' Specifies the specific drug schedule.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeRegulatorySchedule, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatorySchedule, self).elementProperties()\n        js.extend([('schedule', 'schedule', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicationKnowledgeRegulatorySubstitution(backboneelement.BackboneElement):\n    \"\"\" Specifies if changes are allowed when dispensing a medication from a\n    regulatory perspective.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeRegulatorySubstitution'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.allowed = None\n        ' Specifies if regulation allows for changes in the medication when\\n        dispensing.\\n        Type `bool`. '\n        self.type = None\n        ' Specifies the type of substitution allowed.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeRegulatorySubstitution, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeRegulatorySubstitution, self).elementProperties()\n        js.extend([('allowed', 'allowed', bool, False, None, True), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\n\nclass MedicationKnowledgeRelatedMedicationKnowledge(backboneelement.BackboneElement):\n    \"\"\" Associated or related medication information.\n    \n    Associated or related knowledge about a medication.\n    \"\"\"\n    resource_type = 'MedicationKnowledgeRelatedMedicationKnowledge'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.reference = None\n        ' Associated documentation about the associated medication knowledge.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Category of medicationKnowledge.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicationKnowledgeRelatedMedicationKnowledge, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicationKnowledgeRelatedMedicationKnowledge, self).elementProperties()\n        js.extend([('reference', 'reference', fhirreference.FHIRReference, True, None, True), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import dosage\nfrom . import duration\nfrom . import fhirreference\nfrom . import money\nfrom . import quantity\nfrom . import ratio"
  }
}