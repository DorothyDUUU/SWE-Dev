{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductinteraction_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductinteraction_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductinteraction\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductInteractionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductInteraction\", js[\"resourceType\"])\n        return medicinalproductinteraction.MedicinalProductInteraction(js)\n    \n    def testMedicinalProductInteraction1(self):\n        inst = self.instantiate_from(\"medicinalproductinteraction-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductInteraction instance\")\n        self.implMedicinalProductInteraction1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductInteraction\", js[\"resourceType\"])\n        inst2 = medicinalproductinteraction.MedicinalProductInteraction(js)\n        self.implMedicinalProductInteraction1(inst2)\n    \n    def implMedicinalProductInteraction1(self, inst):\n        self.assertEqual(inst.effect.coding[0].code, \"Increasedplasmaconcentrations\")\n        self.assertEqual(inst.effect.coding[0].system, \"http://ema.europa.eu/example/interactionseffect\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.interactant[0].itemCodeableConcept.coding[0].code, \"ketoconazole\")\n        self.assertEqual(inst.interactant[0].itemCodeableConcept.coding[0].system, \"http://ema.europa.eu/example/interactant\")\n        self.assertEqual(inst.interactant[1].itemCodeableConcept.coding[0].code, \"itraconazole\")\n        self.assertEqual(inst.interactant[1].itemCodeableConcept.coding[0].system, \"http://ema.europa.eu/example/interactant\")\n        self.assertEqual(inst.management.text, \"Coadministration not recommended in patients receiving concomitant systemic treatment strong inhibitors of both CYP3A4 and P-gp\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"StrongInhibitorofCYP3A4\")\n        self.assertEqual(inst.type.coding[0].system, \"http://ema.europa.eu/example/interactionsType\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/medicinalproductinteraction.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductInteraction).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductInteraction(domainresource.DomainResource):\n    \"\"\" MedicinalProductInteraction.\n    \n    The interactions of the medicinal product with other medicinal products, or\n    other forms of interactions.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductInteraction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" The interaction described.\n        Type `str`. \"\"\"\n        \n        self.effect = None\n        \"\"\" The effect of the interaction, for example \"reduced gastric\n        absorption of primary medication\".\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.incidence = None\n        \"\"\" The incidence of the interaction, e.g. theoretical, observed.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.interactant = None\n        \"\"\" The specific medication, food or laboratory test that interacts.\n        List of `MedicinalProductInteractionInteractant` items (represented as `dict` in JSON). \"\"\"\n        \n        self.management = None\n        \"\"\" Actions for managing the interaction.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" The medication for which this is a described interaction.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" The type of the interaction e.g. drug-drug interaction, drug-food\n        interaction, drug-lab test interaction.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductInteraction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductInteraction, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"effect\", \"effect\", codeableconcept.CodeableConcept, False, None, False),\n            (\"incidence\", \"incidence\", codeableconcept.CodeableConcept, False, None, False),\n            (\"interactant\", \"interactant\", MedicinalProductInteractionInteractant, True, None, False),\n            (\"management\", \"management\", codeableconcept.CodeableConcept, False, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductInteractionInteractant(backboneelement.BackboneElement):\n    \"\"\" The specific medication, food or laboratory test that interacts.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductInteractionInteractant\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.itemCodeableConcept = None\n        \"\"\" The specific medication, food or laboratory test that interacts.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.itemReference = None\n        \"\"\" The specific medication, food or laboratory test that interacts.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductInteractionInteractant, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductInteractionInteractant, self).elementProperties()\n        js.extend([\n            (\"itemCodeableConcept\", \"itemCodeableConcept\", codeableconcept.CodeableConcept, False, \"item\", True),\n            (\"itemReference\", \"itemReference\", fhirreference.FHIRReference, False, \"item\", True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from and validating that the provided JSON dictionary matches the expected resource type. Raises an exception if the \"resourceType\" defined in the JSON does not match the resource_type of the class.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource data, which may include a specific \"resourceType\" key.\n- strict (bool, optional): A flag indicating whether to enforce strict validation (default is True).\n\nRaises:\n- Exception: If jsondict is provided and the \"resourceType\" does not match this class's resource_type.\n\nAttributes:\n- _server (None): The server from which the resource instance was read, initialized to None.\n\nThis method leverages the superclass constructor from FHIRAbstractBase to perform additional setup while ensuring adherence to the FHIR specification.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from and validating that the provided JSON dictionary matches the expected resource type. Raises an exception if the \"resourceType\" defined in the JSON does not match the resource_type of the class.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource data, which may include a specific \"resourceType\" key.\n- strict (bool, optional): A flag indicating whether to enforce strict validation (default is True).\n\nRaises:\n- Exception: If jsondict is provided and the \"resourceType\" does not match this class's resource_type.\n\nAttributes:\n- _server (None): The server from which the resource instance was read, initialized to None.\n\nThis method leverages the superclass constructor from FHIRAbstractBase to perform additional setup while ensuring adherence to the FHIR specification.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It creates a JSON representation of the instance, adding the `resourceType` field that indicates the type of the FHIR resource. The resource type is derived from the class variable `resource_type`, which is set to 'FHIRAbstractResource' in this class.\n\nReturns:\n    dict: A dictionary representation of the instance that includes all the\n    fields defined in the instance, along with the `resourceType` key.\n\nDependencies:\n    - This method relies on the `as_json` implementation of the superclass \n    (`FHIRAbstractBase`) to retrieve the base JSON structure.\n    - The constant `resource_type` indicates the FHIR resource type and is \n    defined as a class variable.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It creates a JSON representation of the instance, adding the `resourceType` field that indicates the type of the FHIR resource. The resource type is derived from the class variable `resource_type`, which is set to 'FHIRAbstractResource' in this class.\n\nReturns:\n    dict: A dictionary representation of the instance that includes all the\n    fields defined in the instance, along with the `resourceType` key.\n\nDependencies:\n    - This method relies on the `as_json` implementation of the superclass \n    (`FHIRAbstractBase`) to retrieve the base JSON structure.\n    - The constant `resource_type` indicates the FHIR resource type and is \n    defined as a class variable.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a new Resource instance with given properties.\n\nThis constructor initializes a FHIR Resource object, setting its basic attributes like `id`, `implicitRules`, `language`, and `meta`. If provided, the `jsondict` parameter can be a dictionary that initializes these properties. The `strict` parameter determines whether validation errors raise exceptions. By default, it is set to True, which means invalid values will raise a FHIRValidationError unless overridden.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of resource properties.\n- strict (bool, optional): If True (default), invalid properties raise TypeError; if False, they are allowed.\n\nAttributes:\n- id (str): A logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which this content was created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nAdditionally, `super()` calls the initializer of the parent class FHIRAbstractResource to ensure integrity and proper handling of any inherited attributes or methods.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a new Resource instance with given properties.\n\nThis constructor initializes a FHIR Resource object, setting its basic attributes like `id`, `implicitRules`, `language`, and `meta`. If provided, the `jsondict` parameter can be a dictionary that initializes these properties. The `strict` parameter determines whether validation errors raise exceptions. By default, it is set to True, which means invalid values will raise a FHIRValidationError unless overridden.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of resource properties.\n- strict (bool, optional): If True (default), invalid properties raise TypeError; if False, they are allowed.\n\nAttributes:\n- id (str): A logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which this content was created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nAdditionally, `super()` calls the initializer of the parent class FHIRAbstractResource to ensure integrity and proper handling of any inherited attributes or methods.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Provides a list of the element properties for the Resource class, tracing its attributes and their types. This method extends the properties defined in the superclass, FHIRAbstractResource, by adding specific attributes associated with a FHIR Resource, including `id`, `implicitRules`, `language`, and `meta`. \n\nParameters:\n- None.\n\nReturns:\n- A list of tuples, where each tuple contains the property name, the corresponding JSON key, the expected data type, a boolean indicating if the property is required, and details on any nested resource.\n\nDependencies:\n- This method relies on the superclass's `elementProperties` method for its initial list of properties, ensuring that the Resource class adheres to the FHIR specifications. The `meta` part of the attribute list references the `Meta` class defined in the imported `meta` module, indicating that the `meta` attribute is expected to be of type `Meta`.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Provides a list of the element properties for the Resource class, tracing its attributes and their types. This method extends the properties defined in the superclass, FHIRAbstractResource, by adding specific attributes associated with a FHIR Resource, including `id`, `implicitRules`, `language`, and `meta`. \n\nParameters:\n- None.\n\nReturns:\n- A list of tuples, where each tuple contains the property name, the corresponding JSON key, the expected data type, a boolean indicating if the property is required, and details on any nested resource.\n\nDependencies:\n- This method relies on the superclass's `elementProperties` method for its initial list of properties, ensuring that the Resource class adheres to the FHIR specifications. The `meta` part of the attribute list references the `Meta` class defined in the imported `meta` module, indicating that the `meta` attribute is expected to be of type `Meta`.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR elements. This constructor sets up the initial state of an instance by optionally populating it with data from a provided JSON dictionary. If the `strict` parameter is set to True (default), it ensures that invalid variables raise a FHIRValidationError, while setting it to False allows the handling of validation errors through logging.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial data for the instance. If not provided, the instance is created with no initial data.\n- strict (bool, optional): A flag indicating whether to raise errors (True) or log warnings (False) during initialization. Defaults to True.\n\nAttributes:\n- _resolved: Initially set to None, this attribute is intended to hold a dictionary of resolved resources.\n- _owner: Initially set to None, it is used to point to the parent resource that contains this instance.\n\nSide Effects:\n- Calls the update_with_json method to populate the instance with data from jsondict, handling potential validation errors based on the strictness setting.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR elements. This constructor sets up the initial state of an instance by optionally populating it with data from a provided JSON dictionary. If the `strict` parameter is set to True (default), it ensures that invalid variables raise a FHIRValidationError, while setting it to False allows the handling of validation errors through logging.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial data for the instance. If not provided, the instance is created with no initial data.\n- strict (bool, optional): A flag indicating whether to raise errors (True) or log warnings (False) during initialization. Defaults to True.\n\nAttributes:\n- _resolved: Initially set to None, this attribute is intended to hold a dictionary of resolved resources.\n- _owner: Initially set to None, it is used to point to the parent resource that contains this instance.\n\nSide Effects:\n- Calls the update_with_json method to populate the instance with data from jsondict, handling potential validation errors based on the strictness setting.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class from a given JSON dictionary or a list of JSON dictionaries. If the provided JSON dictionary includes a \"resourceType\" that does not match the class type, it employs the `FHIRElementFactory` (not shown in the provided code) to create an appropriate class instance.\n\n:param jsonobj: A dictionary or a list of dictionaries that contains the JSON data used for instantiation.\n:returns: An instance of the class, or a list of instances if provided with a list of dictionaries.\n:raises TypeError: Occurs if the input is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: Raised if any instantiation errors occur while processing the JSON data.\n\nThis method interacts with the `_with_json_dict()` helper method to handle JSON dictionaries, ensuring that each property defined in `elementProperties()` is appropriately instantiated with validation against required types.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initializes an instance of the FHIRAbstractBase class from a given JSON dictionary or a list of JSON dictionaries. If the provided JSON dictionary includes a \"resourceType\" that does not match the class type, it employs the `FHIRElementFactory` (not shown in the provided code) to create an appropriate class instance.\n\n:param jsonobj: A dictionary or a list of dictionaries that contains the JSON data used for instantiation.\n:returns: An instance of the class, or a list of instances if provided with a list of dictionaries.\n:raises TypeError: Occurs if the input is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: Raised if any instantiation errors occur while processing the JSON data.\n\nThis method interacts with the `_with_json_dict()` helper method to handle JSON dictionaries, ensuring that each property defined in `elementProperties()` is appropriately instantiated with validation against required types.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal class method that instantiates an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing JSON data to be used for instantiation.\n:type jsondict: dict\n\n:raises TypeError: If `jsondict` is not of type dict. This ensures that only valid dictionaries are processed for instantiation.\n\n:returns: An instance of the class created using the provided `jsondict`.\n\nThis method is designed for internal use and ensures proper type validation before proceeding with instantiation, reflecting the main purpose of the FHIRAbstractBase class, which is to manage FHIR elements effectively. The error handling through TypeError helps maintain robustness against incorrect data types.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal class method that instantiates an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing JSON data to be used for instantiation.\n:type jsondict: dict\n\n:raises TypeError: If `jsondict` is not of type dict. This ensures that only valid dictionaries are processed for instantiation.\n\n:returns: An instance of the class created using the provided `jsondict`.\n\nThis method is designed for internal use and ensures proper type validation before proceeding with instantiation, reflecting the main purpose of the FHIRAbstractBase class, which is to manage FHIR elements effectively. The error handling through TypeError helps maintain robustness against incorrect data types.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates an element of the FHIRAbstractBase class or its subclasses from a JSON object, while also associating the instantiated element with its parent resource (owner). The owner is used to resolve contained resources, and the method ensures that the instantiated elements have access to their context within the FHIR structure.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list of dictionaries from which the element(s) will be initialized.\n- owner (FHIRElement): The parent resource that owns the instantiated element(s).\n\nReturns:\n- An instance or a list of instances created from the JSON data, with the owner property set to associate it with the parent resource.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are validation errors during the instantiation process.\n\nThis method leverages the `with_json` class method to perform the actual instantiation and then assigns the owner to the instantiated elements via the `_owner` attribute, enabling proper context resolution in the FHIR hierarchy.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates an element of the FHIRAbstractBase class or its subclasses from a JSON object, while also associating the instantiated element with its parent resource (owner). The owner is used to resolve contained resources, and the method ensures that the instantiated elements have access to their context within the FHIR structure.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list of dictionaries from which the element(s) will be initialized.\n- owner (FHIRElement): The parent resource that owns the instantiated element(s).\n\nReturns:\n- An instance or a list of instances created from the JSON data, with the owner property set to associate it with the parent resource.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are validation errors during the instantiation process.\n\nThis method leverages the `with_json` class method to perform the actual instantiation and then assigns the owner to the instantiated elements via the `_owner` attribute, enabling proper context resolution in the FHIR hierarchy.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal attribute name (\"name\"), the corresponding JSON key name (\"json_name\"), the data type of the property (\"type\"), a boolean indicating if the property is a list (\"is_list\"), optionally the name of a more complex type it belongs to (\"of_many\"), and a boolean indicating whether the property is not optional (\"not_optional\"). \n\nThis method serves as a template for subclasses to define their specific properties to be serialized, and it is crucial for the (de)serialization processes handled in other methods of the `FHIRAbstractBase` class, such as `update_with_json` and `as_json`. It is important to note that this method currently returns an empty list, and subclasses need to override it to provide the actual properties of the FHIR elements.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal attribute name (\"name\"), the corresponding JSON key name (\"json_name\"), the data type of the property (\"type\"), a boolean indicating if the property is a list (\"is_list\"), optionally the name of a more complex type it belongs to (\"of_many\"), and a boolean indicating whether the property is not optional (\"not_optional\"). \n\nThis method serves as a template for subclasses to define their specific properties to be serialized, and it is crucial for the (de)serialization processes handled in other methods of the `FHIRAbstractBase` class, such as `update_with_json` and `as_json`. It is important to note that this method currently returns an empty list, and subclasses need to override it to provide the actual properties of the FHIR elements.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Update the instance attributes of the receiver using data from a provided JSON dictionary.\n\nParameters:\n- jsondict (dict): A dictionary containing JSON data to update the receiver's properties. If `None`, the method does nothing. If the type of `jsondict` is not a dictionary, a FHIRValidationError is raised.\n\nReturns:\n- None: On successful update of the receiver's properties.\n\nRaises:\n- FHIRValidationError: If validation errors occur, e.g., missing non-optional properties or superfluous keys in the JSON.\n\nThis method interacts with `elementProperties()` to determine the properties that should be updated, which returns a list of tuples containing property details. The `valid`, `found`, and `nonoptionals` sets are used within the method to track valid property names, names found in the JSON data, and non-optional properties respectively. If any required properties are missing or if unexpected keys are present in the JSON, errors are collected and raised in a FHIRValidationError at the end of the method.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Update the instance attributes of the receiver using data from a provided JSON dictionary.\n\nParameters:\n- jsondict (dict): A dictionary containing JSON data to update the receiver's properties. If `None`, the method does nothing. If the type of `jsondict` is not a dictionary, a FHIRValidationError is raised.\n\nReturns:\n- None: On successful update of the receiver's properties.\n\nRaises:\n- FHIRValidationError: If validation errors occur, e.g., missing non-optional properties or superfluous keys in the JSON.\n\nThis method interacts with `elementProperties()` to determine the properties that should be updated, which returns a list of tuples containing property details. The `valid`, `found`, and `nonoptionals` sets are used within the method to track valid property names, names found in the JSON data, and non-optional properties respectively. If any required properties are missing or if unexpected keys are present in the JSON, errors are collected and raised in a FHIRValidationError at the end of the method.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of the FHIRAbstractBase class to a JSON dictionary by inspecting the properties defined in `elementProperties()`. The method checks that required properties are populated (non-None) and that all values conform to their expected types, raising a FHIRValidationError if discrepancies are found.\n\nReturns a validated dictionary that can be JSON serialized. If any non-optional properties are missing or if any properties have the wrong types, a FHIRValidationError is raised with detailed error messages.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the attributes of the instance and their defined characteristics for serialization.\n- `_matches_type(value, typ)`: to validate the types of the instance properties against their defined types.\n\nAttributes `found` and `nonoptionals` are used to track successfully serialized properties and ensure that all required (non-optional) properties are present in the output, respectively.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of the FHIRAbstractBase class to a JSON dictionary by inspecting the properties defined in `elementProperties()`. The method checks that required properties are populated (non-None) and that all values conform to their expected types, raising a FHIRValidationError if discrepancies are found.\n\nReturns a validated dictionary that can be JSON serialized. If any non-optional properties are missing or if any properties have the wrong types, a FHIRValidationError is raised with detailed error messages.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the attributes of the instance and their defined characteristics for serialization.\n- `_matches_type(value, typ)`: to validate the types of the instance properties against their defined types.\n\nAttributes `found` and `nonoptionals` are used to track successfully serialized properties and ensure that all required (non-optional) properties are present in the output, respectively.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if a given value matches the expected type.\n\n:param value: The value to check against the type.\n:param typ: The expected type for the value.\n\n:return: True if the value is either None or matches the expected type, otherwise False.\n\nThe method supports type checking for basic Python types, such as int and float, and accounts for differences between Python 2 and 3 string types by checking for both `str` and `unicode` in the context of Python 2 compatibility. The function utilizes `sys.version_info` to assess the Python version in use, ensuring proper handling of type checks. This method is primarily used by the `update_with_json` and `as_json` methods within the `FHIRAbstractBase` class to validate data types during JSON serialization and deserialization.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if a given value matches the expected type.\n\n:param value: The value to check against the type.\n:param typ: The expected type for the value.\n\n:return: True if the value is either None or matches the expected type, otherwise False.\n\nThe method supports type checking for basic Python types, such as int and float, and accounts for differences between Python 2 and 3 string types by checking for both `str` and `unicode` in the context of Python 2 compatibility. The function utilizes `sys.version_info` to assess the Python version in use, ensuring proper handling of type checks. This method is primarily used by the `update_with_json` and `as_json` methods within the `FHIRAbstractBase` class to validate data types during JSON serialization and deserialization.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, properties are set to None.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization.\n\nRaises:\n- FHIRValidationError: If validation errors occur when strict is True.\n\nAttributes:\n- contained (List[Resource]): A list of contained, inline resources (initially None).\n- extension (List[Extension]): A list of additional content defined by implementations (initially None).\n- modifierExtension (List[Extension]): A list of extensions that are critical and cannot be ignored (initially None).\n- text (Narrative, optional): A text summary of the resource for human interpretation (initially None).\n\nThis constructor also calls the parent class's __init__ method to ensure proper initialization of inherited properties from the resource.Resource class.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, properties are set to None.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization.\n\nRaises:\n- FHIRValidationError: If validation errors occur when strict is True.\n\nAttributes:\n- contained (List[Resource]): A list of contained, inline resources (initially None).\n- extension (List[Extension]): A list of additional content defined by implementations (initially None).\n- modifierExtension (List[Extension]): A list of extensions that are critical and cannot be ignored (initially None).\n- text (Narrative, optional): A text summary of the resource for human interpretation (initially None).\n\nThis constructor also calls the parent class's __init__ method to ensure proper initialization of inherited properties from the resource.Resource class.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve a list of property descriptors for the DomainResource class.\n\nThis method extends the base class's `elementProperties` method to include specific properties relevant to a DomainResource. It defines properties such as `contained`, `extension`, `modifierExtension`, and `text`, specifying their types and cardinality. \n\nParameters:\n- None\n\nReturns:\n- A list of tuples, each containing property information formatted as (property_name, json_key, property_type, is_list, required, is_reference).\n\nDependencies:\n- The method relies on the `elementProperties` method from the superclass `resource.Resource` to gather base properties. Additional dependencies include the `extension` module, which defines the `Extension` class used for `extension` and `modifierExtension`, and the `narrative` module, which defines the `Narrative` class used for the `text` property.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Retrieve a list of property descriptors for the DomainResource class.\n\nThis method extends the base class's `elementProperties` method to include specific properties relevant to a DomainResource. It defines properties such as `contained`, `extension`, `modifierExtension`, and `text`, specifying their types and cardinality. \n\nParameters:\n- None\n\nReturns:\n- A list of tuples, each containing property information formatted as (property_name, json_key, property_type, is_list, required, is_reference).\n\nDependencies:\n- The method relies on the `elementProperties` method from the superclass `resource.Resource` to gather base properties. Additional dependencies include the `extension` module, which defines the `Extension` class used for `extension` and `modifierExtension`, and the `narrative` module, which defines the `Narrative` class used for the `text` property.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/medicinalproductinteraction.py": {
      "MedicinalProductInteraction.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductInteraction instance, which describes interactions of a medicinal product with other products or interactions.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, mapping to the attributes of the class.\n- strict (bool, optional): If set to True (default), invalid values will raise a TypeError during initialization.\n\nAttributes:\n- description (str): A textual description of the interaction.\n- effect (CodeableConcept): The effect of the interaction (e.g., \"reduced gastric absorption\").\n- incidence (CodeableConcept): The occurrence status of the interaction (e.g., theoretical, observed).\n- interactant (list of MedicinalProductInteractionInteractant): A list of specific items interacting (e.g., medications or tests).\n- management (CodeableConcept): Recommended actions for managing the interaction.\n- subject (list of FHIRReference): The main medication for which this interaction is detailed.\n- type (CodeableConcept): The category of interaction (e.g., drug-drug, drug-food).\n\nDependencies:\nThis class extends domainresource.DomainResource, ensuring it adheres to FHIR standard structures for medicinal product interactions.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.description = None\n        ' The interaction described.\\n        Type `str`. '\n        self.effect = None\n        ' The effect of the interaction, for example \"reduced gastric\\n        absorption of primary medication\".\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.incidence = None\n        ' The incidence of the interaction, e.g. theoretical, observed.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.interactant = None\n        ' The specific medication, food or laboratory test that interacts.\\n        List of `MedicinalProductInteractionInteractant` items (represented as `dict` in JSON). '\n        self.management = None\n        ' Actions for managing the interaction.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subject = None\n        ' The medication for which this is a described interaction.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.type = None\n        ' The type of the interaction e.g. drug-drug interaction, drug-food\\n        interaction, drug-lab test interaction.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductInteraction, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductInteraction instance, which describes interactions of a medicinal product with other products or interactions.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, mapping to the attributes of the class.\n- strict (bool, optional): If set to True (default), invalid values will raise a TypeError during initialization.\n\nAttributes:\n- description (str): A textual description of the interaction.\n- effect (CodeableConcept): The effect of the interaction (e.g., \"reduced gastric absorption\").\n- incidence (CodeableConcept): The occurrence status of the interaction (e.g., theoretical, observed).\n- interactant (list of MedicinalProductInteractionInteractant): A list of specific items interacting (e.g., medications or tests).\n- management (CodeableConcept): Recommended actions for managing the interaction.\n- subject (list of FHIRReference): The main medication for which this interaction is detailed.\n- type (CodeableConcept): The category of interaction (e.g., drug-drug, drug-food).\n\nDependencies:\nThis class extends domainresource.DomainResource, ensuring it adheres to FHIR standard structures for medicinal product interactions.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductInteraction(domainresource.DomainResource):"
      },
      "MedicinalProductInteraction.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the element properties of the MedicinalProductInteraction resource.\n\nThis method overrides the `elementProperties` method from the `DomainResource` base class to define the specific attributes of the `MedicinalProductInteraction` class. It returns a list of tuples, where each tuple consists of the attribute name, the JSON key, the expected type, whether the attribute is repeated, and any additional constraints.\n\nParameters:\n- None\n\nReturns:\n- list: A list of tuples defining the properties of the `MedicinalProductInteraction`, which includes:\n    - `description` (str): A description of the interaction.\n    - `effect` (CodeableConcept): The effect of the interaction.\n    - `incidence` (CodeableConcept): The incidence of the interaction.\n    - `interactant` (List[MedicinalProductInteractionInteractant]): List of items that interact, represented by `MedicinalProductInteractionInteractant`.\n    - `management` (CodeableConcept): Actions for managing the interaction.\n    - `subject` (List[FHIRReference]): List of medications this interaction concerns.\n    - `type` (CodeableConcept): The type of the interaction.\n\nDependencies:\n- This method relies on the `super()` call to access and extend the properties from the parent class `DomainResource`. It also uses types defined in the `codeableconcept` and `fhirreference` modules to specify certain attributes' expected types.\"\"\"\n        js = super(MedicinalProductInteraction, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('effect', 'effect', codeableconcept.CodeableConcept, False, None, False), ('incidence', 'incidence', codeableconcept.CodeableConcept, False, None, False), ('interactant', 'interactant', MedicinalProductInteractionInteractant, True, None, False), ('management', 'management', codeableconcept.CodeableConcept, False, None, False), ('subject', 'subject', fhirreference.FHIRReference, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js",
        "docstring": "Retrieve the element properties of the MedicinalProductInteraction resource.\n\nThis method overrides the `elementProperties` method from the `DomainResource` base class to define the specific attributes of the `MedicinalProductInteraction` class. It returns a list of tuples, where each tuple consists of the attribute name, the JSON key, the expected type, whether the attribute is repeated, and any additional constraints.\n\nParameters:\n- None\n\nReturns:\n- list: A list of tuples defining the properties of the `MedicinalProductInteraction`, which includes:\n    - `description` (str): A description of the interaction.\n    - `effect` (CodeableConcept): The effect of the interaction.\n    - `incidence` (CodeableConcept): The incidence of the interaction.\n    - `interactant` (List[MedicinalProductInteractionInteractant]): List of items that interact, represented by `MedicinalProductInteractionInteractant`.\n    - `management` (CodeableConcept): Actions for managing the interaction.\n    - `subject` (List[FHIRReference]): List of medications this interaction concerns.\n    - `type` (CodeableConcept): The type of the interaction.\n\nDependencies:\n- This method relies on the `super()` call to access and extend the properties from the parent class `DomainResource`. It also uses types defined in the `codeableconcept` and `fhirreference` modules to specify certain attributes' expected types.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class MedicinalProductInteraction(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/medicinalproductinteraction_test.py:MedicinalProductInteractionTests:testMedicinalProductInteraction1": {
      "tests/models/medicinalproductinteraction_test.py:MedicinalProductInteractionTests:instantiate_from": {
        "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductinteraction_test.py:MedicinalProductInteractionTests:implMedicinalProductInteraction1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductinteraction_test.py:MedicinalProductInteractionTests:instantiate_from": {
      "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductinteraction.py:MedicinalProductInteraction:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductinteraction_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 medicinalproductinteraction.py\n        \u2502   \u251c\u2500\u2500 MedicinalProductInteraction.__init__\n        \u2502   \u2514\u2500\u2500 MedicinalProductInteraction.elementProperties\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Medicinal Product Interaction module is designed to facilitate the validation, representation, and handling of drug interaction data in compliance with the FHIR (Fast Healthcare Interoperability Resources) standard. It enables the creation, verification, and serialization of MedicinalProductInteraction resources, which model critical information such as interacting substances, their effects, interaction types, and clinical management recommendations. This module provides robust support for structured data exchange in healthcare systems, ensuring that drug interaction information is standardized and interoperable across platforms. It addresses the need for reliable interaction data management, aiding developers and healthcare organizations in building systems that improve clinical decision-making and patient safety.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRAbstractResource instance.\n\nThis constructor initializes the resource instance, setting the server it was read from and validating that the provided JSON dictionary matches the expected resource type. Raises an exception if the \"resourceType\" defined in the JSON does not match the resource_type of the class.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource data, which may include a specific \"resourceType\" key.\n- strict (bool, optional): A flag indicating whether to enforce strict validation (default is True).\n\nRaises:\n- Exception: If jsondict is provided and the \"resourceType\" does not match this class's resource_type.\n\nAttributes:\n- _server (None): The server from which the resource instance was read, initialized to None.\n\nThis method leverages the superclass constructor from FHIRAbstractBase to perform additional setup while ensuring adherence to the FHIR specification.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the parent class `FHIRAbstractBase`. It creates a JSON representation of the instance, adding the `resourceType` field that indicates the type of the FHIR resource. The resource type is derived from the class variable `resource_type`, which is set to 'FHIRAbstractResource' in this class.\n\nReturns:\n    dict: A dictionary representation of the instance that includes all the\n    fields defined in the instance, along with the `resourceType` key.\n\nDependencies:\n    - This method relies on the `as_json` implementation of the superclass \n    (`FHIRAbstractBase`) to retrieve the base JSON structure.\n    - The constant `resource_type` indicates the FHIR resource type and is \n    defined as a class variable.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new Resource instance with given properties.\n\nThis constructor initializes a FHIR Resource object, setting its basic attributes like `id`, `implicitRules`, `language`, and `meta`. If provided, the `jsondict` parameter can be a dictionary that initializes these properties. The `strict` parameter determines whether validation errors raise exceptions. By default, it is set to True, which means invalid values will raise a FHIRValidationError unless overridden.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initialization of resource properties.\n- strict (bool, optional): If True (default), invalid properties raise TypeError; if False, they are allowed.\n\nAttributes:\n- id (str): A logical identifier for the resource, initialized to None.\n- implicitRules (str): A set of rules under which this content was created, initialized to None.\n- language (str): The language of the resource content, initialized to None.\n- meta (Meta): Metadata about the resource, initialized to None.\n\nAdditionally, `super()` calls the initializer of the parent class FHIRAbstractResource to ensure integrity and proper handling of any inherited attributes or methods.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nProvides a list of the element properties for the Resource class, tracing its attributes and their types. This method extends the properties defined in the superclass, FHIRAbstractResource, by adding specific attributes associated with a FHIR Resource, including `id`, `implicitRules`, `language`, and `meta`. \n\nParameters:\n- None.\n\nReturns:\n- A list of tuples, where each tuple contains the property name, the corresponding JSON key, the expected data type, a boolean indicating if the property is required, and details on any nested resource.\n\nDependencies:\n- This method relies on the superclass's `elementProperties` method for its initial list of properties, ensuring that the Resource class adheres to the FHIR specifications. The `meta` part of the attribute list references the `Meta` class defined in the imported `meta` module, indicating that the `meta` attribute is expected to be of type `Meta`.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates an element of the FHIRAbstractBase class or its subclasses from a JSON object, while also associating the instantiated element with its parent resource (owner). The owner is used to resolve contained resources, and the method ensures that the instantiated elements have access to their context within the FHIR structure.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list of dictionaries from which the element(s) will be initialized.\n- owner (FHIRElement): The parent resource that owns the instantiated element(s).\n\nReturns:\n- An instance or a list of instances created from the JSON data, with the owner property set to associate it with the parent resource.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are validation errors during the instantiation process.\n\nThis method leverages the `with_json` class method to perform the actual instantiation and then assigns the owner to the instantiated elements via the `_owner` attribute, enabling proper context resolution in the FHIR hierarchy.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal attribute name (\"name\"), the corresponding JSON key name (\"json_name\"), the data type of the property (\"type\"), a boolean indicating if the property is a list (\"is_list\"), optionally the name of a more complex type it belongs to (\"of_many\"), and a boolean indicating whether the property is not optional (\"not_optional\"). \n\nThis method serves as a template for subclasses to define their specific properties to be serialized, and it is crucial for the (de)serialization processes handled in other methods of the `FHIRAbstractBase` class, such as `update_with_json` and `as_json`. It is important to note that this method currently returns an empty list, and subclasses need to override it to provide the actual properties of the FHIR elements.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRAbstractBase class, which serves as the abstract base for all FHIR elements. This constructor sets up the initial state of an instance by optionally populating it with data from a provided JSON dictionary. If the `strict` parameter is set to True (default), it ensures that invalid variables raise a FHIRValidationError, while setting it to False allows the handling of validation errors through logging.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial data for the instance. If not provided, the instance is created with no initial data.\n- strict (bool, optional): A flag indicating whether to raise errors (True) or log warnings (False) during initialization. Defaults to True.\n\nAttributes:\n- _resolved: Initially set to None, this attribute is intended to hold a dictionary of resolved resources.\n- _owner: Initially set to None, it is used to point to the parent resource that contains this instance.\n\nSide Effects:\n- Calls the update_with_json method to populate the instance with data from jsondict, handling potential validation errors based on the strictness setting.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class from a given JSON dictionary or a list of JSON dictionaries. If the provided JSON dictionary includes a \"resourceType\" that does not match the class type, it employs the `FHIRElementFactory` (not shown in the provided code) to create an appropriate class instance.\n\n:param jsonobj: A dictionary or a list of dictionaries that contains the JSON data used for instantiation.\n:returns: An instance of the class, or a list of instances if provided with a list of dictionaries.\n:raises TypeError: Occurs if the input is not a dictionary or a list of dictionaries.\n:raises FHIRValidationError: Raised if any instantiation errors occur while processing the JSON data.\n\nThis method interacts with the `_with_json_dict()` helper method to handle JSON dictionaries, ensuring that each property defined in `elementProperties()` is appropriately instantiated with validation against required types.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdate the instance attributes of the receiver using data from a provided JSON dictionary.\n\nParameters:\n- jsondict (dict): A dictionary containing JSON data to update the receiver's properties. If `None`, the method does nothing. If the type of `jsondict` is not a dictionary, a FHIRValidationError is raised.\n\nReturns:\n- None: On successful update of the receiver's properties.\n\nRaises:\n- FHIRValidationError: If validation errors occur, e.g., missing non-optional properties or superfluous keys in the JSON.\n\nThis method interacts with `elementProperties()` to determine the properties that should be updated, which returns a list of tuples containing property details. The `valid`, `found`, and `nonoptionals` sets are used within the method to track valid property names, names found in the JSON data, and non-optional properties respectively. If any required properties are missing or if unexpected keys are present in the JSON, errors are collected and raised in a FHIRValidationError at the end of the method.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of the FHIRAbstractBase class to a JSON dictionary by inspecting the properties defined in `elementProperties()`. The method checks that required properties are populated (non-None) and that all values conform to their expected types, raising a FHIRValidationError if discrepancies are found.\n\nReturns a validated dictionary that can be JSON serialized. If any non-optional properties are missing or if any properties have the wrong types, a FHIRValidationError is raised with detailed error messages.\n\nThe method utilizes:\n- `elementProperties()`: to retrieve the attributes of the instance and their defined characteristics for serialization.\n- `_matches_type(value, typ)`: to validate the types of the instance properties against their defined types.\n\nAttributes `found` and `nonoptionals` are used to track successfully serialized properties and ensure that all required (non-optional) properties are present in the output, respectively.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if a given value matches the expected type.\n\n:param value: The value to check against the type.\n:param typ: The expected type for the value.\n\n:return: True if the value is either None or matches the expected type, otherwise False.\n\nThe method supports type checking for basic Python types, such as int and float, and accounts for differences between Python 2 and 3 string types by checking for both `str` and `unicode` in the context of Python 2 compatibility. The function utilizes `sys.version_info` to assess the Python version in use, ensuring proper handling of type checks. This method is primarily used by the `update_with_json` and `as_json` methods within the `FHIRAbstractBase` class to validate data types during JSON serialization and deserialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal class method that instantiates an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing JSON data to be used for instantiation.\n:type jsondict: dict\n\n:raises TypeError: If `jsondict` is not of type dict. This ensures that only valid dictionaries are processed for instantiation.\n\n:returns: An instance of the class created using the provided `jsondict`.\n\nThis method is designed for internal use and ensures proper type validation before proceeding with instantiation, reflecting the main purpose of the FHIRAbstractBase class, which is to manage FHIR elements effectively. The error handling through TypeError helps maintain robustness against incorrect data types.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties. If not provided, properties are set to None.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization.\n\nRaises:\n- FHIRValidationError: If validation errors occur when strict is True.\n\nAttributes:\n- contained (List[Resource]): A list of contained, inline resources (initially None).\n- extension (List[Extension]): A list of additional content defined by implementations (initially None).\n- modifierExtension (List[Extension]): A list of extensions that are critical and cannot be ignored (initially None).\n- text (Narrative, optional): A text summary of the resource for human interpretation (initially None).\n\nThis constructor also calls the parent class's __init__ method to ensure proper initialization of inherited properties from the resource.Resource class.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a list of property descriptors for the DomainResource class.\n\nThis method extends the base class's `elementProperties` method to include specific properties relevant to a DomainResource. It defines properties such as `contained`, `extension`, `modifierExtension`, and `text`, specifying their types and cardinality. \n\nParameters:\n- None\n\nReturns:\n- A list of tuples, each containing property information formatted as (property_name, json_key, property_type, is_list, required, is_reference).\n\nDependencies:\n- The method relies on the `elementProperties` method from the superclass `resource.Resource` to gather base properties. Additional dependencies include the `extension` module, which defines the `Extension` class used for `extension` and `modifierExtension`, and the `narrative` module, which defines the `Narrative` class used for the `text` property.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/medicinalproductinteraction.py\n\n- CLASS METHOD: MedicinalProductInteraction.__init__\n  - CLASS SIGNATURE: class MedicinalProductInteraction(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductInteraction instance, which describes interactions of a medicinal product with other products or interactions.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initialization, mapping to the attributes of the class.\n- strict (bool, optional): If set to True (default), invalid values will raise a TypeError during initialization.\n\nAttributes:\n- description (str): A textual description of the interaction.\n- effect (CodeableConcept): The effect of the interaction (e.g., \"reduced gastric absorption\").\n- incidence (CodeableConcept): The occurrence status of the interaction (e.g., theoretical, observed).\n- interactant (list of MedicinalProductInteractionInteractant): A list of specific items interacting (e.g., medications or tests).\n- management (CodeableConcept): Recommended actions for managing the interaction.\n- subject (list of FHIRReference): The main medication for which this interaction is detailed.\n- type (CodeableConcept): The category of interaction (e.g., drug-drug, drug-food).\n\nDependencies:\nThis class extends domainresource.DomainResource, ensuring it adheres to FHIR standard structures for medicinal product interactions.\n\"\"\"\n```\n\n- CLASS METHOD: MedicinalProductInteraction.elementProperties\n  - CLASS SIGNATURE: class MedicinalProductInteraction(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the element properties of the MedicinalProductInteraction resource.\n\nThis method overrides the `elementProperties` method from the `DomainResource` base class to define the specific attributes of the `MedicinalProductInteraction` class. It returns a list of tuples, where each tuple consists of the attribute name, the JSON key, the expected type, whether the attribute is repeated, and any additional constraints.\n\nParameters:\n- None\n\nReturns:\n- list: A list of tuples defining the properties of the `MedicinalProductInteraction`, which includes:\n    - `description` (str): A description of the interaction.\n    - `effect` (CodeableConcept): The effect of the interaction.\n    - `incidence` (CodeableConcept): The incidence of the interaction.\n    - `interactant` (List[MedicinalProductInteractionInteractant]): List of items that interact, represented by `MedicinalProductInteractionInteractant`.\n    - `management` (CodeableConcept): Actions for managing the interaction.\n    - `subject` (List[FHIRReference]): List of medications this interaction concerns.\n    - `type` (CodeableConcept): The type of the interaction.\n\nDependencies:\n- This method relies on the `super()` call to access and extend the properties from the parent class `DomainResource`. It also uses types defined in the `codeableconcept` and `fhirreference` modules to specify certain attributes' expected types.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/medicinalproductinteraction.py": "from . import domainresource\n\nclass MedicinalProductInteraction(domainresource.DomainResource):\n    \"\"\" MedicinalProductInteraction.\n    \n    The interactions of the medicinal product with other medicinal products, or\n    other forms of interactions.\n    \"\"\"\n    resource_type = 'MedicinalProductInteraction'\nfrom . import backboneelement\n\nclass MedicinalProductInteractionInteractant(backboneelement.BackboneElement):\n    \"\"\" The specific medication, food or laboratory test that interacts.\n    \"\"\"\n    resource_type = 'MedicinalProductInteractionInteractant'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.itemCodeableConcept = None\n        ' The specific medication, food or laboratory test that interacts.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.itemReference = None\n        ' The specific medication, food or laboratory test that interacts.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(MedicinalProductInteractionInteractant, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductInteractionInteractant, self).elementProperties()\n        js.extend([('itemCodeableConcept', 'itemCodeableConcept', codeableconcept.CodeableConcept, False, 'item', True), ('itemReference', 'itemReference', fhirreference.FHIRReference, False, 'item', True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference"
  }
}