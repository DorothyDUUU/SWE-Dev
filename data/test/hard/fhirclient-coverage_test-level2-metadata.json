{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-coverage_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/coverage_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import coverage\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CoverageTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Coverage\", js[\"resourceType\"])\n        return coverage.Coverage(js)\n    \n    def testCoverage1(self):\n        inst = self.instantiate_from(\"coverage-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Coverage instance\")\n        self.implCoverage1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Coverage\", js[\"resourceType\"])\n        inst2 = coverage.Coverage(js)\n        self.implCoverage1(inst2)\n    \n    def implCoverage1(self, inst):\n        self.assertEqual(inst.class_fhir[0].name, \"Corporate Baker's Inc. Local #35\")\n        self.assertEqual(inst.class_fhir[0].type.coding[0].code, \"group\")\n        self.assertEqual(inst.class_fhir[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[0].value, \"CB135\")\n        self.assertEqual(inst.class_fhir[1].name, \"Trainee Part-time Benefits\")\n        self.assertEqual(inst.class_fhir[1].type.coding[0].code, \"subgroup\")\n        self.assertEqual(inst.class_fhir[1].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[1].value, \"123\")\n        self.assertEqual(inst.class_fhir[2].name, \"Full Coverage: Medical, Dental, Pharmacy, Vision, EHC\")\n        self.assertEqual(inst.class_fhir[2].type.coding[0].code, \"plan\")\n        self.assertEqual(inst.class_fhir[2].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[2].value, \"B37FC\")\n        self.assertEqual(inst.class_fhir[3].name, \"Includes afterlife benefits\")\n        self.assertEqual(inst.class_fhir[3].type.coding[0].code, \"subplan\")\n        self.assertEqual(inst.class_fhir[3].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[3].value, \"P7\")\n        self.assertEqual(inst.class_fhir[4].name, \"Silver: Family Plan spouse only\")\n        self.assertEqual(inst.class_fhir[4].type.coding[0].code, \"class\")\n        self.assertEqual(inst.class_fhir[4].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[4].value, \"SILVER\")\n        self.assertEqual(inst.class_fhir[5].name, \"Low deductable, max $20 copay\")\n        self.assertEqual(inst.class_fhir[5].type.coding[0].code, \"subclass\")\n        self.assertEqual(inst.class_fhir[5].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[5].value, \"Tier2\")\n        self.assertEqual(inst.class_fhir[6].type.coding[0].code, \"sequence\")\n        self.assertEqual(inst.class_fhir[6].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[6].value, \"9\")\n        self.assertEqual(inst.class_fhir[7].type.coding[0].code, \"rxid\")\n        self.assertEqual(inst.class_fhir[7].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[7].value, \"MDF12345\")\n        self.assertEqual(inst.class_fhir[8].type.coding[0].code, \"rxbin\")\n        self.assertEqual(inst.class_fhir[8].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[8].value, \"987654\")\n        self.assertEqual(inst.class_fhir[9].type.coding[0].code, \"rxgroup\")\n        self.assertEqual(inst.class_fhir[9].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[9].value, \"M35PT\")\n        self.assertEqual(inst.dependent, \"0\")\n        self.assertEqual(inst.id, \"9876B1\")\n        self.assertEqual(inst.identifier[0].system, \"http://benefitsinc.com/certificate\")\n        self.assertEqual(inst.identifier[0].value, \"12345\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2012-05-23\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2012-05-23\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2011-05-23\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2011-05-23\")\n        self.assertEqual(inst.relationship.coding[0].code, \"self\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the coverage</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"EHCPOL\")\n        self.assertEqual(inst.type.coding[0].display, \"extended healthcare\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n    \n    def testCoverage2(self):\n        inst = self.instantiate_from(\"coverage-example-selfpay.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Coverage instance\")\n        self.implCoverage2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Coverage\", js[\"resourceType\"])\n        inst2 = coverage.Coverage(js)\n        self.implCoverage2(inst2)\n    \n    def implCoverage2(self, inst):\n        self.assertEqual(inst.id, \"SP1234\")\n        self.assertEqual(inst.identifier[0].system, \"http://hospitalx.com/selfpayagreement\")\n        self.assertEqual(inst.identifier[0].value, \"SP12345678\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2012-03-17\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2012-03-17\")\n        self.assertEqual(inst.relationship.coding[0].code, \"self\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of a Self Pay Agreement.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"pay\")\n        self.assertEqual(inst.type.coding[0].display, \"PAY\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-selfpay\")\n    \n    def testCoverage3(self):\n        inst = self.instantiate_from(\"coverage-example-ehic.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Coverage instance\")\n        self.implCoverage3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Coverage\", js[\"resourceType\"])\n        inst2 = coverage.Coverage(js)\n        self.implCoverage3(inst2)\n    \n    def implCoverage3(self, inst):\n        self.assertEqual(inst.id, \"7547E\")\n        self.assertEqual(inst.identifier[0].system, \"http://ehic.com/insurer/123456789/member\")\n        self.assertEqual(inst.identifier[0].value, \"A123456780\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2012-03-17\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2012-03-17\")\n        self.assertEqual(inst.relationship.coding[0].code, \"self\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the European Health Insurance Card</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"EHCPOL\")\n        self.assertEqual(inst.type.coding[0].display, \"extended healthcare\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n    \n    def testCoverage4(self):\n        inst = self.instantiate_from(\"coverage-example-2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Coverage instance\")\n        self.implCoverage4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Coverage\", js[\"resourceType\"])\n        inst2 = coverage.Coverage(js)\n        self.implCoverage4(inst2)\n    \n    def implCoverage4(self, inst):\n        self.assertEqual(inst.class_fhir[0].name, \"Western Airlines\")\n        self.assertEqual(inst.class_fhir[0].type.coding[0].code, \"group\")\n        self.assertEqual(inst.class_fhir[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[0].value, \"WESTAIR\")\n        self.assertEqual(inst.class_fhir[1].name, \"Full Coverage: Medical, Dental, Pharmacy, Vision, EHC\")\n        self.assertEqual(inst.class_fhir[1].type.coding[0].code, \"plan\")\n        self.assertEqual(inst.class_fhir[1].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[1].value, \"BG4352\")\n        self.assertEqual(inst.class_fhir[2].name, \"Platinum\")\n        self.assertEqual(inst.class_fhir[2].type.coding[0].code, \"subplan\")\n        self.assertEqual(inst.class_fhir[2].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-class\")\n        self.assertEqual(inst.class_fhir[2].value, \"D15C9\")\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].period.end.datetime, FHIRDateTime(\"2018-12-31\").datetime)\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].period.end.as_json(), \"2018-12-31\")\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].period.start.datetime, FHIRDateTime(\"2018-01-01\").datetime)\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].period.start.as_json(), \"2018-01-01\")\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].type.coding[0].code, \"retired\")\n        self.assertEqual(inst.costToBeneficiary[0].exception[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/ex-coverage-financial-exception\")\n        self.assertEqual(inst.costToBeneficiary[0].type.coding[0].code, \"gpvisit\")\n        self.assertEqual(inst.costToBeneficiary[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/coverage-copay-type\")\n        self.assertEqual(inst.costToBeneficiary[0].valueMoney.currency, \"USD\")\n        self.assertEqual(inst.costToBeneficiary[0].valueMoney.value, 20.0)\n        self.assertEqual(inst.dependent, \"1\")\n        self.assertEqual(inst.id, \"7546D\")\n        self.assertEqual(inst.identifier[0].system, \"http://xyz.com/codes/identifier\")\n        self.assertEqual(inst.identifier[0].value, \"AB98761\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.network, \"5\")\n        self.assertEqual(inst.order, 2)\n        self.assertEqual(inst.period.end.datetime, FHIRDateTime(\"2012-03-17\").datetime)\n        self.assertEqual(inst.period.end.as_json(), \"2012-03-17\")\n        self.assertEqual(inst.period.start.datetime, FHIRDateTime(\"2011-03-17\").datetime)\n        self.assertEqual(inst.period.start.as_json(), \"2011-03-17\")\n        self.assertEqual(inst.relationship.coding[0].code, \"self\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.subscriberId, \"AB9876\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">A human-readable rendering of the coverage</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.coding[0].code, \"EHCPOL\")\n        self.assertEqual(inst.type.coding[0].display, \"extended healthcare\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActCode\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/coverage.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Coverage).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Coverage(domainresource.DomainResource):\n    \"\"\" Insurance or medical plan or a payment agreement.\n    \n    Financial instrument which may be used to reimburse or pay for health care\n    products and services. Includes both insurance and self-payment.\n    \"\"\"\n    \n    resource_type = \"Coverage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.beneficiary = None\n        \"\"\" Plan beneficiary.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.class_fhir = None\n        \"\"\" Additional coverage classifications.\n        List of `CoverageClass` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contract = None\n        \"\"\" Contract details.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.costToBeneficiary = None\n        \"\"\" Patient payments for services/products.\n        List of `CoverageCostToBeneficiary` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dependent = None\n        \"\"\" Dependent number.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for the coverage.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.network = None\n        \"\"\" Insurer network.\n        Type `str`. \"\"\"\n        \n        self.order = None\n        \"\"\" Relative order of the coverage.\n        Type `int`. \"\"\"\n        \n        self.payor = None\n        \"\"\" Issuer of the policy.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" Coverage start and end dates.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.policyHolder = None\n        \"\"\" Owner of the policy.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" Beneficiary relationship to the subscriber.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" active | cancelled | draft | entered-in-error.\n        Type `str`. \"\"\"\n        \n        self.subrogation = None\n        \"\"\" Reimbursement to insurer.\n        Type `bool`. \"\"\"\n        \n        self.subscriber = None\n        \"\"\" Subscriber to the policy.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subscriberId = None\n        \"\"\" ID assigned to the subscriber.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Coverage category such as medical or accident.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(Coverage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Coverage, self).elementProperties()\n        js.extend([\n            (\"beneficiary\", \"beneficiary\", fhirreference.FHIRReference, False, None, True),\n            (\"class_fhir\", \"class\", CoverageClass, True, None, False),\n            (\"contract\", \"contract\", fhirreference.FHIRReference, True, None, False),\n            (\"costToBeneficiary\", \"costToBeneficiary\", CoverageCostToBeneficiary, True, None, False),\n            (\"dependent\", \"dependent\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"network\", \"network\", str, False, None, False),\n            (\"order\", \"order\", int, False, None, False),\n            (\"payor\", \"payor\", fhirreference.FHIRReference, True, None, True),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"policyHolder\", \"policyHolder\", fhirreference.FHIRReference, False, None, False),\n            (\"relationship\", \"relationship\", codeableconcept.CodeableConcept, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subrogation\", \"subrogation\", bool, False, None, False),\n            (\"subscriber\", \"subscriber\", fhirreference.FHIRReference, False, None, False),\n            (\"subscriberId\", \"subscriberId\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CoverageClass(backboneelement.BackboneElement):\n    \"\"\" Additional coverage classifications.\n    \n    A suite of underwriter specific classifiers.\n    \"\"\"\n    \n    resource_type = \"CoverageClass\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.name = None\n        \"\"\" Human readable description of the type and value.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of class such as 'group' or 'plan'.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Value associated with the type.\n        Type `str`. \"\"\"\n        \n        super(CoverageClass, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageClass, self).elementProperties()\n        js.extend([\n            (\"name\", \"name\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"value\", \"value\", str, False, None, True),\n        ])\n        return js\n\n\nclass CoverageCostToBeneficiary(backboneelement.BackboneElement):\n    \"\"\" Patient payments for services/products.\n    \n    A suite of codes indicating the cost category and associated amount which\n    have been detailed in the policy and may have been  included on the health\n    card.\n    \"\"\"\n    \n    resource_type = \"CoverageCostToBeneficiary\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.exception = None\n        \"\"\" Exceptions for patient payments.\n        List of `CoverageCostToBeneficiaryException` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Cost category.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueMoney = None\n        \"\"\" The amount or percentage due from the beneficiary.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" The amount or percentage due from the beneficiary.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        super(CoverageCostToBeneficiary, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageCostToBeneficiary, self).elementProperties()\n        js.extend([\n            (\"exception\", \"exception\", CoverageCostToBeneficiaryException, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"valueMoney\", \"valueMoney\", money.Money, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n        ])\n        return js\n\n\nclass CoverageCostToBeneficiaryException(backboneelement.BackboneElement):\n    \"\"\" Exceptions for patient payments.\n    \n    A suite of codes indicating exceptions or reductions to patient costs and\n    their effective periods.\n    \"\"\"\n    \n    resource_type = \"CoverageCostToBeneficiaryException\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.period = None\n        \"\"\" The effective period of the exception.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Exception category.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(CoverageCostToBeneficiaryException, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CoverageCostToBeneficiaryException, self).elementProperties()\n        js.extend([\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance, which facilitates working with FHIR-compliant date strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a date in ISO 8601 format (e.g., \"2024-01-01\"). If provided, it must be a valid string conforming to the regex pattern specified by _REGEX, which ensures it matches the expected date format. If not provided, defaults to None.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date as a Python date object. If jsonval is not valid, it will remain None.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as defined by the _REGEX constant.\n\nConstants:\n- _REGEX: A compiled regular expression used to validate the format of the input date string. It ensures that the provided string adheres to the valid structure of FHIR dates before parsing or constructing the corresponding date object.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance, which facilitates working with FHIR-compliant date strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a date in ISO 8601 format (e.g., \"2024-01-01\"). If provided, it must be a valid string conforming to the regex pattern specified by _REGEX, which ensures it matches the expected date format. If not provided, defaults to None.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date as a Python date object. If jsonval is not valid, it will remain None.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as defined by the _REGEX constant.\n\nConstants:\n- _REGEX: A compiled regular expression used to validate the format of the input date string. It ensures that the provided string adheres to the valid structure of FHIR dates before parsing or constructing the corresponding date object.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Overrides the default `__setattr__` method to manage attribute assignments for instances of the FHIRDate class. This method ensures that the 'date' and '_FIELD' attributes are synchronized: when 'date' or '_FIELD' is set, it clears the 'origval' attribute and maintains the consistency of the FHIRDate state. For all other attributes, it behaves like the default behavior of `__setattr__`. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is assigned, 'origval' is set to None to prevent inconsistencies. The internal `_FIELD` constant is used to reference the 'date' attribute consistently, defined as \"date\" in the class.\n\nThis method is crucial for ensuring that incoming FHIR date strings and parsed dates are correctly represented and updated within instances of the FHIRDate class.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Overrides the default `__setattr__` method to manage attribute assignments for instances of the FHIRDate class. This method ensures that the 'date' and '_FIELD' attributes are synchronized: when 'date' or '_FIELD' is set, it clears the 'origval' attribute and maintains the consistency of the FHIRDate state. For all other attributes, it behaves like the default behavior of `__setattr__`. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is assigned, 'origval' is set to None to prevent inconsistencies. The internal `_FIELD` constant is used to reference the 'date' attribute consistently, defined as \"date\" in the class.\n\nThis method is crucial for ensuring that incoming FHIR date strings and parsed dates are correctly represented and updated within instances of the FHIRDate class.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON value (`origval`) is None, it returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` attribute, which represents the date as a Python `datetime.date` object. This method facilitates interaction with JSON data while providing a fallback for standardized date representation, ensuring compatibility with the FHIR specification.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON value (`origval`) is None, it returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` attribute, which represents the date as a Python `datetime.date` object. This method facilitates interaction with JSON data while providing a fallback for standardized date representation, ensuring compatibility with the FHIR specification.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIR element to JSON format by inspecting the properties defined in `elementProperties()`.\n\nThis method builds a JSON dictionary representing the object's state, ensuring that:\n- Required properties are not None (for non-optional properties) and lists are not empty.\n- Non-None properties are of the expected type.\n\nIt raises a `FHIRValidationError` if any properties have incorrect types or if required properties are not provided. The JSON dictionary created can be serialized for use in FHIR-compliant applications.\n\nThe method utilizes the following key variables:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list of errors encountered during serialization, which will trigger a `FHIRValidationError` if not empty.\n- `found`: A set that tracks properties that were successfully added to the JSON representation.\n- `nonoptionals`: A set that holds names of non-optional properties to check for completeness.\n\nThe method relies on `elementProperties()` to obtain the structure of the properties and validate their types against the class attributes realized during initialization or updates.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIR element to JSON format by inspecting the properties defined in `elementProperties()`.\n\nThis method builds a JSON dictionary representing the object's state, ensuring that:\n- Required properties are not None (for non-optional properties) and lists are not empty.\n- Non-None properties are of the expected type.\n\nIt raises a `FHIRValidationError` if any properties have incorrect types or if required properties are not provided. The JSON dictionary created can be serialized for use in FHIR-compliant applications.\n\nThe method utilizes the following key variables:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list of errors encountered during serialization, which will trigger a `FHIRValidationError` if not empty.\n- `found`: A set that tracks properties that were successfully added to the JSON representation.\n- `nonoptionals`: A set that holds names of non-optional properties to check for completeness.\n\nThe method relies on `elementProperties()` to obtain the structure of the properties and validate their types against the class attributes realized during initialization or updates.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/coverage.py": {
      "Coverage.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Coverage resource representing an insurance or medical plan, detailing coverage attributes relevant for reimbursement or payment for healthcare services.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the Coverage instance properties. It can include various attributes defined in the class.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid attributes during initialization. If False, allows invalid attributes without raising an error.\n\nAttributes:\n- beneficiary (FHIRReference): Reference to the plan beneficiary.\n- class_fhir (list of CoverageClass): Classifications associated with the coverage.\n- contract (list of FHIRReference): References to contracts that detail coverage.\n- costToBeneficiary (list of CoverageCostToBeneficiary): Payments expected from the beneficiary.\n- dependent (str): Indicates the dependent number.\n- identifier (list of Identifier): Business identifier for the coverage.\n- network (str): Insurer network.\n- order (int): The relative order of this coverage.\n- payor (list of FHIRReference): References to the policy issuer.\n- period (Period): Duration of coverage.\n- policyHolder (FHIRReference): Reference to the policy owner.\n- relationship (CodeableConcept): Relationship between the beneficiary and the subscriber.\n- status (str): The current status of the coverage (active, cancelled, etc.).\n- subrogation (bool): Indicates if reimbursement to the insurer is applicable.\n- subscriber (FHIRReference): Reference to the policy subscriber.\n- subscriberId (str): Identifier assigned to the subscriber.\n- type (CodeableConcept): Category of coverage, such as medical or accident.\n\nThe function interfaces with other classes like `FHIRReference`, `CoverageClass`, and `CoverageCostToBeneficiary`, which define the structure of related data in this context.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.beneficiary = None\n        ' Plan beneficiary.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.class_fhir = None\n        ' Additional coverage classifications.\\n        List of `CoverageClass` items (represented as `dict` in JSON). '\n        self.contract = None\n        ' Contract details.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.costToBeneficiary = None\n        ' Patient payments for services/products.\\n        List of `CoverageCostToBeneficiary` items (represented as `dict` in JSON). '\n        self.dependent = None\n        ' Dependent number.\\n        Type `str`. '\n        self.identifier = None\n        ' Business Identifier for the coverage.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.network = None\n        ' Insurer network.\\n        Type `str`. '\n        self.order = None\n        ' Relative order of the coverage.\\n        Type `int`. '\n        self.payor = None\n        ' Issuer of the policy.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.period = None\n        ' Coverage start and end dates.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.policyHolder = None\n        ' Owner of the policy.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relationship = None\n        ' Beneficiary relationship to the subscriber.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.status = None\n        ' active | cancelled | draft | entered-in-error.\\n        Type `str`. '\n        self.subrogation = None\n        ' Reimbursement to insurer.\\n        Type `bool`. '\n        self.subscriber = None\n        ' Subscriber to the policy.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subscriberId = None\n        ' ID assigned to the subscriber.\\n        Type `str`. '\n        self.type = None\n        ' Coverage category such as medical or accident.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(Coverage, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Coverage resource representing an insurance or medical plan, detailing coverage attributes relevant for reimbursement or payment for healthcare services.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the Coverage instance properties. It can include various attributes defined in the class.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid attributes during initialization. If False, allows invalid attributes without raising an error.\n\nAttributes:\n- beneficiary (FHIRReference): Reference to the plan beneficiary.\n- class_fhir (list of CoverageClass): Classifications associated with the coverage.\n- contract (list of FHIRReference): References to contracts that detail coverage.\n- costToBeneficiary (list of CoverageCostToBeneficiary): Payments expected from the beneficiary.\n- dependent (str): Indicates the dependent number.\n- identifier (list of Identifier): Business identifier for the coverage.\n- network (str): Insurer network.\n- order (int): The relative order of this coverage.\n- payor (list of FHIRReference): References to the policy issuer.\n- period (Period): Duration of coverage.\n- policyHolder (FHIRReference): Reference to the policy owner.\n- relationship (CodeableConcept): Relationship between the beneficiary and the subscriber.\n- status (str): The current status of the coverage (active, cancelled, etc.).\n- subrogation (bool): Indicates if reimbursement to the insurer is applicable.\n- subscriber (FHIRReference): Reference to the policy subscriber.\n- subscriberId (str): Identifier assigned to the subscriber.\n- type (CodeableConcept): Category of coverage, such as medical or accident.\n\nThe function interfaces with other classes like `FHIRReference`, `CoverageClass`, and `CoverageCostToBeneficiary`, which define the structure of related data in this context.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Coverage(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the superclass (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initialized as None; intended to hold the corresponding Python datetime representation of the provided jsonval after processing.\n\nThis constructor calls the superclass's __init__ method to initialize properties defined in FHIRDate, ensuring compatibility with the FHIR standard when handling datetime strings.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the superclass (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initialized as None; intended to hold the corresponding Python datetime representation of the provided jsonval after processing.\n\nThis constructor calls the superclass's __init__ method to initialize properties defined in FHIRDate, ensuring compatibility with the FHIR standard when handling datetime strings.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method extends the functionality of the base class's `as_json` method by adding the `resourceType` key, which signifies the type of FHIR resource being represented. \n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to get the base JSON structure.\n\nNotes:\n    - The `resource_type` attribute, defined as `'FHIRAbstractResource'` in the class, is critical as it informs the structure of the resulting JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method extends the functionality of the base class's `as_json` method by adding the `resourceType` key, which signifies the type of FHIR resource being represented. \n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to get the base JSON structure.\n\nNotes:\n    - The `resource_type` attribute, defined as `'FHIRAbstractResource'` in the class, is critical as it informs the structure of the resulting JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties.\n- strict (bool, default=True): If True, invalid properties raise a TypeError; otherwise, invalid variables may not be strictly enforced.\n\nAttributes initialized:\n- contained (List[Resource]): A list of inline resources contained within this resource.\n- extension (List[Extension]): Additional content defined by implementations to extend the resource.\n- modifierExtension (List[Extension]): Extensions that must be understood and cannot be ignored.\n- text (Narrative): A summary of the resource in textual format for human interpretation.\n\nThis method calls the superclass's initializer to ensure proper initialization of inherited properties from the `resource.Resource` class.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties.\n- strict (bool, default=True): If True, invalid properties raise a TypeError; otherwise, invalid variables may not be strictly enforced.\n\nAttributes initialized:\n- contained (List[Resource]): A list of inline resources contained within this resource.\n- extension (List[Extension]): Additional content defined by implementations to extend the resource.\n- modifierExtension (List[Extension]): Extensions that must be understood and cannot be ignored.\n- text (Narrative): A summary of the resource in textual format for human interpretation.\n\nThis method calls the superclass's initializer to ensure proper initialization of inherited properties from the `resource.Resource` class.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/coverage.py:Coverage:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/coverage.py": {
        "Coverage.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(Coverage, self).elementProperties()\n        js.extend([('beneficiary', 'beneficiary', fhirreference.FHIRReference, False, None, True), ('class_fhir', 'class', CoverageClass, True, None, False), ('contract', 'contract', fhirreference.FHIRReference, True, None, False), ('costToBeneficiary', 'costToBeneficiary', CoverageCostToBeneficiary, True, None, False), ('dependent', 'dependent', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('network', 'network', str, False, None, False), ('order', 'order', int, False, None, False), ('payor', 'payor', fhirreference.FHIRReference, True, None, True), ('period', 'period', period.Period, False, None, False), ('policyHolder', 'policyHolder', fhirreference.FHIRReference, False, None, False), ('relationship', 'relationship', codeableconcept.CodeableConcept, False, None, False), ('status', 'status', str, False, None, True), ('subrogation', 'subrogation', bool, False, None, False), ('subscriber', 'subscriber', fhirreference.FHIRReference, False, None, False), ('subscriberId', 'subscriberId', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class Coverage(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/coverage_test.py:CoverageTests:testCoverage1": {
      "tests/models/coverage_test.py:CoverageTests:instantiate_from": {
        "fhirclient/models/coverage.py:Coverage:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/coverage.py:Coverage:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverage_test.py:CoverageTests:implCoverage1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/coverage.py:Coverage:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/coverage.py:Coverage:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverage.py:Coverage:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverage_test.py:CoverageTests:instantiate_from": {
      "fhirclient/models/coverage.py:Coverage:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverage.py:Coverage:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverage_test.py:CoverageTests:testCoverage2": {
      "tests/models/coverage_test.py:CoverageTests:instantiate_from": {
        "fhirclient/models/coverage.py:Coverage:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/coverage.py:Coverage:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverage_test.py:CoverageTests:implCoverage2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/coverage.py:Coverage:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/coverage.py:Coverage:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverage.py:Coverage:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverage_test.py:CoverageTests:testCoverage3": {
      "tests/models/coverage_test.py:CoverageTests:instantiate_from": {
        "fhirclient/models/coverage.py:Coverage:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/coverage.py:Coverage:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverage_test.py:CoverageTests:implCoverage3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/coverage.py:Coverage:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/coverage.py:Coverage:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverage.py:Coverage:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/coverage_test.py:CoverageTests:testCoverage4": {
      "tests/models/coverage_test.py:CoverageTests:instantiate_from": {
        "fhirclient/models/coverage.py:Coverage:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/coverage.py:Coverage:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/coverage_test.py:CoverageTests:implCoverage4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/coverage.py:Coverage:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/coverage.py:Coverage:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/coverage.py:Coverage:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-coverage_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 coverage.py\n        \u2502   \u2514\u2500\u2500 Coverage.__init__\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Coverage Testing module is designed to validate the integrity, compliance, and accuracy of FHIR Coverage resources, ensuring they adhere to the HL7 FHIR standard (version 4.0.1). It provides functionality for loading sample FHIR Coverage resource data in JSON format, instantiating Coverage objects, and verifying their content through comprehensive assertions. This module is capable of testing various aspects of insurance coverage information, including coverage types, classifications, identifiers, periods, relationships, and associated attributes like copayment details and beneficiary benefits. By automating the validation of critical coverage resource attributes, the module ensures reliable data interoperability, streamlining the development and testing of healthcare applications leveraging FHIR-based insurance data.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance, which facilitates working with FHIR-compliant date strings in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of a date in ISO 8601 format (e.g., \"2024-01-01\"). If provided, it must be a valid string conforming to the regex pattern specified by _REGEX, which ensures it matches the expected date format. If not provided, defaults to None.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Represents the parsed date as a Python date object. If jsonval is not valid, it will remain None.\n- origval (Union[str, None]): Stores the original JSON string used to construct the instance.\n\nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected date format as defined by the _REGEX constant.\n\nConstants:\n- _REGEX: A compiled regular expression used to validate the format of the input date string. It ensures that the provided string adheres to the valid structure of FHIR dates before parsing or constructing the corresponding date object.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON value (`origval`) is None, it returns the standardized ISO 8601 string representation of the date (`isostring`). The `isostring` is derived from the `date` attribute, which represents the date as a Python `datetime.date` object. This method facilitates interaction with JSON data while providing a fallback for standardized date representation, ensuring compatibility with the FHIR specification.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nOverrides the default `__setattr__` method to manage attribute assignments for instances of the FHIRDate class. This method ensures that the 'date' and '_FIELD' attributes are synchronized: when 'date' or '_FIELD' is set, it clears the 'origval' attribute and maintains the consistency of the FHIRDate state. For all other attributes, it behaves like the default behavior of `__setattr__`. \n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the attribute.\n\nSide Effects:\n- If 'date' or '_FIELD' is assigned, 'origval' is set to None to prevent inconsistencies. The internal `_FIELD` constant is used to reference the 'date' attribute consistently, defined as \"date\" in the class.\n\nThis method is crucial for ensuring that incoming FHIR date strings and parsed dates are correctly represented and updated within instances of the FHIRDate class.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIR element to JSON format by inspecting the properties defined in `elementProperties()`.\n\nThis method builds a JSON dictionary representing the object's state, ensuring that:\n- Required properties are not None (for non-optional properties) and lists are not empty.\n- Non-None properties are of the expected type.\n\nIt raises a `FHIRValidationError` if any properties have incorrect types or if required properties are not provided. The JSON dictionary created can be serialized for use in FHIR-compliant applications.\n\nThe method utilizes the following key variables:\n- `js`: A dictionary that accumulates the serialized properties.\n- `errs`: A list of errors encountered during serialization, which will trigger a `FHIRValidationError` if not empty.\n- `found`: A set that tracks properties that were successfully added to the JSON representation.\n- `nonoptionals`: A set that holds names of non-optional properties to check for completeness.\n\nThe method relies on `elementProperties()` to obtain the structure of the properties and validate their types against the class attributes realized during initialization or updates.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/coverage.py\n\n- CLASS METHOD: Coverage.__init__\n  - CLASS SIGNATURE: class Coverage(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Coverage resource representing an insurance or medical plan, detailing coverage attributes relevant for reimbursement or payment for healthcare services.\n\nParameters:\n- jsondict (dict, optional): A dictionary to initialize the Coverage instance properties. It can include various attributes defined in the class.\n- strict (bool, optional): If True (default), raises a FHIRValidationError for invalid attributes during initialization. If False, allows invalid attributes without raising an error.\n\nAttributes:\n- beneficiary (FHIRReference): Reference to the plan beneficiary.\n- class_fhir (list of CoverageClass): Classifications associated with the coverage.\n- contract (list of FHIRReference): References to contracts that detail coverage.\n- costToBeneficiary (list of CoverageCostToBeneficiary): Payments expected from the beneficiary.\n- dependent (str): Indicates the dependent number.\n- identifier (list of Identifier): Business identifier for the coverage.\n- network (str): Insurer network.\n- order (int): The relative order of this coverage.\n- payor (list of FHIRReference): References to the policy issuer.\n- period (Period): Duration of coverage.\n- policyHolder (FHIRReference): Reference to the policy owner.\n- relationship (CodeableConcept): Relationship between the beneficiary and the subscriber.\n- status (str): The current status of the coverage (active, cancelled, etc.).\n- subrogation (bool): Indicates if reimbursement to the insurer is applicable.\n- subscriber (FHIRReference): Reference to the policy subscriber.\n- subscriberId (str): Identifier assigned to the subscriber.\n- type (CodeableConcept): Category of coverage, such as medical or accident.\n\nThe function interfaces with other classes like `FHIRReference`, `CoverageClass`, and `CoverageCostToBeneficiary`, which define the structure of related data in this context.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of the FHIRDateTime class, which facilitates working with FHIR datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the superclass (FHIRDate) for further processing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): Initialized as None; intended to hold the corresponding Python datetime representation of the provided jsonval after processing.\n\nThis constructor calls the superclass's __init__ method to initialize properties defined in FHIRDate, ensuring compatibility with the FHIR standard when handling datetime strings.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-serializable dictionary.\n\nThis method extends the functionality of the base class's `as_json` method by adding the `resourceType` key, which signifies the type of FHIR resource being represented. \n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including the `resourceType` attribute.\n\nDependencies:\n    - Calls the superclass method `super(FHIRAbstractResource, self).as_json()` to get the base JSON structure.\n\nNotes:\n    - The `resource_type` attribute, defined as `'FHIRAbstractResource'` in the class, is critical as it informs the structure of the resulting JSON.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource with narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource properties.\n- strict (bool, default=True): If True, invalid properties raise a TypeError; otherwise, invalid variables may not be strictly enforced.\n\nAttributes initialized:\n- contained (List[Resource]): A list of inline resources contained within this resource.\n- extension (List[Extension]): Additional content defined by implementations to extend the resource.\n- modifierExtension (List[Extension]): Extensions that must be understood and cannot be ignored.\n- text (Narrative): A summary of the resource in textual format for human interpretation.\n\nThis method calls the superclass's initializer to ensure proper initialization of inherited properties from the `resource.Resource` class.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/coverage.py": "from . import domainresource\n\nclass Coverage(domainresource.DomainResource):\n    \"\"\" Insurance or medical plan or a payment agreement.\n    \n    Financial instrument which may be used to reimburse or pay for health care\n    products and services. Includes both insurance and self-payment.\n    \"\"\"\n    resource_type = 'Coverage'\n\n    def elementProperties(self):\n        js = super(Coverage, self).elementProperties()\n        js.extend([('beneficiary', 'beneficiary', fhirreference.FHIRReference, False, None, True), ('class_fhir', 'class', CoverageClass, True, None, False), ('contract', 'contract', fhirreference.FHIRReference, True, None, False), ('costToBeneficiary', 'costToBeneficiary', CoverageCostToBeneficiary, True, None, False), ('dependent', 'dependent', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('network', 'network', str, False, None, False), ('order', 'order', int, False, None, False), ('payor', 'payor', fhirreference.FHIRReference, True, None, True), ('period', 'period', period.Period, False, None, False), ('policyHolder', 'policyHolder', fhirreference.FHIRReference, False, None, False), ('relationship', 'relationship', codeableconcept.CodeableConcept, False, None, False), ('status', 'status', str, False, None, True), ('subrogation', 'subrogation', bool, False, None, False), ('subscriber', 'subscriber', fhirreference.FHIRReference, False, None, False), ('subscriberId', 'subscriberId', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass CoverageClass(backboneelement.BackboneElement):\n    \"\"\" Additional coverage classifications.\n    \n    A suite of underwriter specific classifiers.\n    \"\"\"\n    resource_type = 'CoverageClass'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.name = None\n        ' Human readable description of the type and value.\\n        Type `str`. '\n        self.type = None\n        \" Type of class such as 'group' or 'plan'.\\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\n        self.value = None\n        ' Value associated with the type.\\n        Type `str`. '\n        super(CoverageClass, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageClass, self).elementProperties()\n        js.extend([('name', 'name', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('value', 'value', str, False, None, True)])\n        return js\n\nclass CoverageCostToBeneficiary(backboneelement.BackboneElement):\n    \"\"\" Patient payments for services/products.\n    \n    A suite of codes indicating the cost category and associated amount which\n    have been detailed in the policy and may have been  included on the health\n    card.\n    \"\"\"\n    resource_type = 'CoverageCostToBeneficiary'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.exception = None\n        ' Exceptions for patient payments.\\n        List of `CoverageCostToBeneficiaryException` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Cost category.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueMoney = None\n        ' The amount or percentage due from the beneficiary.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.valueQuantity = None\n        ' The amount or percentage due from the beneficiary.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        super(CoverageCostToBeneficiary, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageCostToBeneficiary, self).elementProperties()\n        js.extend([('exception', 'exception', CoverageCostToBeneficiaryException, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('valueMoney', 'valueMoney', money.Money, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True)])\n        return js\n\nclass CoverageCostToBeneficiaryException(backboneelement.BackboneElement):\n    \"\"\" Exceptions for patient payments.\n    \n    A suite of codes indicating exceptions or reductions to patient costs and\n    their effective periods.\n    \"\"\"\n    resource_type = 'CoverageCostToBeneficiaryException'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.period = None\n        ' The effective period of the exception.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.type = None\n        ' Exception category.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(CoverageCostToBeneficiaryException, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CoverageCostToBeneficiaryException, self).elementProperties()\n        js.extend([('period', 'period', period.Period, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirreference\nfrom . import identifier\nfrom . import money\nfrom . import period\nfrom . import quantity",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}