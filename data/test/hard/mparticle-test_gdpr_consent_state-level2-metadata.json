{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_gdpr_consent_state",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_gdpr_consent_state.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\nimport calendar\nimport time\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.gdpr_consent_state import GDPRConsentState\n\n\nclass TestGDPRConsentState(unittest.TestCase):\n    \"\"\" GDPRConsentState unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testGDPRConsentState(self):\n        \"\"\"\n        Test GDPRConsentState\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.gdpr_consent_state.GDPRConsentState(\n            'document_agreement.v2',\n            True,\n            now,\n            'dtmgbank.com/signup',\n            'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702',\n        )\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n    def testGDPRConsentStateMembers(self):\n        \"\"\"\n        Test GDPRConsentState Members\n        \"\"\"\n\n        now = calendar.timegm(time.gmtime())\n\n        model = mparticle.models.gdpr_consent_state.GDPRConsentState\n        model.document = 'document_agreement.v2'\n        model.consented = True\n        model.timestamp_unixtime_ms = now\n        model.location = 'dtmgbank.com/signup'\n        model.hardware_id = 'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702'\n\n        self.assertEqual(model.document, 'document_agreement.v2')\n        self.assertEqual(model.consented, True)\n        self.assertEqual(model.timestamp_unixtime_ms, now)\n        self.assertEqual(model.location,  'dtmgbank.com/signup')\n        self.assertEqual(model.hardware_id,\n                         'IDFA: a5d934n0-232f-4afc-2e9a-3832d95zc702')\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/gdpr_consent_state.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass GDPRConsentState(object):\n    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"\n        GDPRConsentState - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'document': 'str',\n            'consented': 'bool',\n            'timestamp_unixtime_ms': 'int',\n            'location': 'str',\n            'hardware_id': 'str'\n        }\n\n        self.attribute_map = {\n            'document': 'document',\n            'consented': 'consented',\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'location': 'location',\n            'hardware_id': 'hardware_id'\n        }\n\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id\n\n    @property\n    def document(self):\n        \"\"\"\n        Gets the document of this GDPRConsentState\n\n        :return The document of this GDPRConsentState\n        :rtype str\n        \"\"\"\n        return self._document\n\n    @document.setter\n    def document(self, document):\n        \"\"\"\n        Sets the document of this GDPR Consent State.\n\n\n        :param document: The document of this GDPR Consent State.\n        :type: str\n        \"\"\"\n\n        self._document = document\n\n    @property\n    def consented(self):\n        \"\"\"\n        Gets the consented of this GDPRConsentState\n\n        :return The consented of this GDPRConsentState\n        :rtype str\n        \"\"\"\n        return self._consented\n\n    @consented.setter\n    def consented(self, consented):\n        \"\"\"\n        Sets the consented of this GDPR Consent State.\n\n\n        :param consented: The consented of this GDPR Consent State.\n        :type: str\n        \"\"\"\n\n        self._consented = consented\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this GDPRConsentState\n\n        :return The timestamp_unixtime_ms of this GDPRConsentState\n        :rtype str\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this GDPR Consent State.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this GDPR Consent State.\n        :type: str\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this GDPRConsentState\n\n        :return The location of this GDPRConsentState\n        :rtype str\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this GDPR Consent State.\n\n\n        :param location: The location of this GDPR Consent State.\n        :type: str\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def hardware_id(self):\n        \"\"\"\n        Gets the hardware_id of this GDPRConsentState\n\n        :return The hardware_id of this GDPRConsentState\n        :rtype str\n        \"\"\"\n        return self._hardware_id\n\n    @hardware_id.setter\n    def hardware_id(self, hardware_id):\n        \"\"\"\n        Sets the hardware_id of this GDPR Consent State.\n\n\n        :param hardware_id: The hardware_id of this GDPR Consent State.\n        :type: str\n        \"\"\"\n\n        self._hardware_id = hardware_id\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/gdpr_consent_state.py": {
      "GDPRConsentState.__init__": {
        "code": "    def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n        \"\"\"Initializes a new instance of the GDPRConsentState class, which models the state of user consent in compliance with GDPR regulations. \n\n    The constructor accepts various parameters that describe the consent state, including a legal document reference, consent status, a timestamp indicating when the consent was recorded, user location, and a hardware identifier associated with the device.\n\n    Parameters:\n    - document (str, optional): Legal document associated with the consent.\n    - consented (bool, optional): Indicates whether the user has given consent.\n    - timestamp_unixtime_ms (int, optional): The timestamp in Unix format (milliseconds) representing when the consent was obtained.\n    - location (str, optional): Geographical location of the user at the time of consent.\n    - hardware_id (str, optional): Unique identifier for the hardware device used by the user.\n\n    Attributes:\n    - swagger_types (dict): Mapping of attribute names to their data types.\n    - attribute_map (dict): Mapping of attribute names to their corresponding JSON keys in the API definition.\n    \n    This initializer directly sets the provided parameters to the instance's attributes and uses property setters for several attributes to enforce encapsulation.\"\"\"\n        '\\n        GDPRConsentState - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'document': 'str', 'consented': 'bool', 'timestamp_unixtime_ms': 'int', 'location': 'str', 'hardware_id': 'str'}\n        self.attribute_map = {'document': 'document', 'consented': 'consented', 'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'location': 'location', 'hardware_id': 'hardware_id'}\n        self.document = document\n        self.consented = consented\n        self.timestamp_unixtime_ms = timestamp_unixtime_ms\n        self.location = location\n        self.hardware_id = hardware_id",
        "docstring": "Initializes a new instance of the GDPRConsentState class, which models the state of user consent in compliance with GDPR regulations. \n\nThe constructor accepts various parameters that describe the consent state, including a legal document reference, consent status, a timestamp indicating when the consent was recorded, user location, and a hardware identifier associated with the device.\n\nParameters:\n- document (str, optional): Legal document associated with the consent.\n- consented (bool, optional): Indicates whether the user has given consent.\n- timestamp_unixtime_ms (int, optional): The timestamp in Unix format (milliseconds) representing when the consent was obtained.\n- location (str, optional): Geographical location of the user at the time of consent.\n- hardware_id (str, optional): Unique identifier for the hardware device used by the user.\n\nAttributes:\n- swagger_types (dict): Mapping of attribute names to their data types.\n- attribute_map (dict): Mapping of attribute names to their corresponding JSON keys in the API definition.\n\nThis initializer directly sets the provided parameters to the instance's attributes and uses property setters for several attributes to enforce encapsulation.",
        "signature": "def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      },
      "GDPRConsentState.document": {
        "code": "    def document(self, document):\n        \"\"\"Sets the document of this GDPRConsentState, which represents the consent agreement provided by the user for data processing under GDPR regulations.\n\n:param document: The textual representation of the GDPR consent document.\n:type document: str\n\nThis attribute is critical for compliance with GDPR, as it records the specific terms of consent that the user has agreed to. The value is stored in the private attribute `_document` within the instance of the class. There are no return values or side effects from this method, but it directly influences the state of the GDPRConsentState instance.\"\"\"\n        '\\n        Sets the document of this GDPR Consent State.\\n\\n\\n        :param document: The document of this GDPR Consent State.\\n        :type: str\\n        '\n        self._document = document",
        "docstring": "Sets the document of this GDPRConsentState, which represents the consent agreement provided by the user for data processing under GDPR regulations.\n\n:param document: The textual representation of the GDPR consent document.\n:type document: str\n\nThis attribute is critical for compliance with GDPR, as it records the specific terms of consent that the user has agreed to. The value is stored in the private attribute `_document` within the instance of the class. There are no return values or side effects from this method, but it directly influences the state of the GDPRConsentState instance.",
        "signature": "def document(self, document):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      },
      "GDPRConsentState.consented": {
        "code": "    def consented(self, consented):\n        \"\"\"Sets the consented status for this GDPR Consent State.\n\n:param consented: A boolean indicating whether the user has consented to data processing under GDPR.\n:type consented: bool\n\nThis method updates the private attribute `_consented`, which stores the user's consent status. The change reflects the user's agreement or disagreement regarding data processing in accordance with GDPR regulations.\"\"\"\n        '\\n        Sets the consented of this GDPR Consent State.\\n\\n\\n        :param consented: The consented of this GDPR Consent State.\\n        :type: str\\n        '\n        self._consented = consented",
        "docstring": "Sets the consented status for this GDPR Consent State.\n\n:param consented: A boolean indicating whether the user has consented to data processing under GDPR.\n:type consented: bool\n\nThis method updates the private attribute `_consented`, which stores the user's consent status. The change reflects the user's agreement or disagreement regarding data processing in accordance with GDPR regulations.",
        "signature": "def consented(self, consented):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      },
      "GDPRConsentState.timestamp_unixtime_ms": {
        "code": "    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"Sets the timestamp (in Unix time milliseconds) of this GDPRConsentState instance, indicating when consent was given.\n\n:param timestamp_unixtime_ms: The Unix timestamp in milliseconds representing the time at which consent was recorded.\n:type timestamp_unixtime_ms: int\n\nThis method directly sets the private attribute `_timestamp_unixtime_ms`, which can be retrieved through the corresponding getter method. The timestamp can be crucial for compliance tracking under GDPR regulations. It should be provided as an integer value.\"\"\"\n        '\\n        Sets the timestamp_unixtime_ms of this GDPR Consent State.\\n\\n\\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this GDPR Consent State.\\n        :type: str\\n        '\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms",
        "docstring": "Sets the timestamp (in Unix time milliseconds) of this GDPRConsentState instance, indicating when consent was given.\n\n:param timestamp_unixtime_ms: The Unix timestamp in milliseconds representing the time at which consent was recorded.\n:type timestamp_unixtime_ms: int\n\nThis method directly sets the private attribute `_timestamp_unixtime_ms`, which can be retrieved through the corresponding getter method. The timestamp can be crucial for compliance tracking under GDPR regulations. It should be provided as an integer value.",
        "signature": "def timestamp_unixtime_ms(self, timestamp_unixtime_ms):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      },
      "GDPRConsentState.location": {
        "code": "    def location(self, location):\n        \"\"\"Sets the location of this GDPR Consent State.\n\n:param location: The geographical location associated with this GDPR Consent State, which is represented as a string.\n:type location: str\n\nThis method directly assigns the input 'location' to the private attribute '_location'. The 'GDPRConsentState' class uses this location information to contextualize user consent, which may be important for legal compliance under the GDPR (General Data Protection Regulation). The method does not return a value; it modifies the internal state of the object.\"\"\"\n        '\\n        Sets the location of this GDPR Consent State.\\n\\n\\n        :param location: The location of this GDPR Consent State.\\n        :type: str\\n        '\n        self._location = location",
        "docstring": "Sets the location of this GDPR Consent State.\n\n:param location: The geographical location associated with this GDPR Consent State, which is represented as a string.\n:type location: str\n\nThis method directly assigns the input 'location' to the private attribute '_location'. The 'GDPRConsentState' class uses this location information to contextualize user consent, which may be important for legal compliance under the GDPR (General Data Protection Regulation). The method does not return a value; it modifies the internal state of the object.",
        "signature": "def location(self, location):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      },
      "GDPRConsentState.hardware_id": {
        "code": "    def hardware_id(self, hardware_id):\n        \"\"\"Sets the hardware ID representing the unique identifier for the user's hardware in this GDPR Consent State.\n\n:param hardware_id: The hardware ID of this GDPR Consent State.\n:type: str\n\nThis method directly updates the `_hardware_id` attribute of the GDPRConsentState instance. \nNo return value is expected, and there are no side effects; it simply assigns the provided value to the instance's attribute. \nThe `_hardware_id` attribute is utilized to store and manage the hardware ID information, which can be crucial for compliance and tracking user consent under GDPR legislation.\"\"\"\n        '\\n        Sets the hardware_id of this GDPR Consent State.\\n\\n\\n        :param hardware_id: The hardware_id of this GDPR Consent State.\\n        :type: str\\n        '\n        self._hardware_id = hardware_id",
        "docstring": "Sets the hardware ID representing the unique identifier for the user's hardware in this GDPR Consent State.\n\n:param hardware_id: The hardware ID of this GDPR Consent State.\n:type: str\n\nThis method directly updates the `_hardware_id` attribute of the GDPRConsentState instance. \nNo return value is expected, and there are no side effects; it simply assigns the provided value to the instance's attribute. \nThe `_hardware_id` attribute is utilized to store and manage the hardware ID information, which can be crucial for compliance and tracking user consent under GDPR legislation.",
        "signature": "def hardware_id(self, hardware_id):",
        "type": "Method",
        "class_signature": "class GDPRConsentState(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:__init__": {},
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:document": {},
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:consented": {},
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:timestamp_unixtime_ms": {},
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:location": {},
    "mparticle/models/gdpr_consent_state.py:GDPRConsentState:hardware_id": {}
  },
  "PRD": "# PROJECT NAME: mparticle-test_gdpr_consent_state\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 gdpr_consent_state.py\n            \u251c\u2500\u2500 GDPRConsentState.__init__\n            \u251c\u2500\u2500 GDPRConsentState.consented\n            \u251c\u2500\u2500 GDPRConsentState.document\n            \u251c\u2500\u2500 GDPRConsentState.hardware_id\n            \u251c\u2500\u2500 GDPRConsentState.location\n            \u2514\u2500\u2500 GDPRConsentState.timestamp_unixtime_ms\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates interaction with the mParticle Event API, specifically focusing on managing GDPR (General Data Protection Regulation) consent data. Its primary functionality is to allow developers to create and validate `GDPRConsentState` objects, which capture critical user consent information, such as the consent document, consent status, timestamp, location, and hardware identifiers. By providing robust tools for defining and verifying GDPR compliance states, the module ensures accurate tracking and storage of consent data for downstream processing within the broader mParticle ecosystem. This solves the problem of handling complex consent requirements by providing a standardized framework for maintaining regulatory compliance, reducing development overhead, and ensuring reliable consent management workflows.\n\n## FILE 1: mparticle/models/gdpr_consent_state.py\n\n- CLASS METHOD: GDPRConsentState.timestamp_unixtime_ms\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the timestamp (in Unix time milliseconds) of this GDPRConsentState instance, indicating when consent was given.\n\n:param timestamp_unixtime_ms: The Unix timestamp in milliseconds representing the time at which consent was recorded.\n:type timestamp_unixtime_ms: int\n\nThis method directly sets the private attribute `_timestamp_unixtime_ms`, which can be retrieved through the corresponding getter method. The timestamp can be crucial for compliance tracking under GDPR regulations. It should be provided as an integer value.\n\"\"\"\n```\n\n- CLASS METHOD: GDPRConsentState.consented\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def consented(self, consented):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the consented status for this GDPR Consent State.\n\n:param consented: A boolean indicating whether the user has consented to data processing under GDPR.\n:type consented: bool\n\nThis method updates the private attribute `_consented`, which stores the user's consent status. The change reflects the user's agreement or disagreement regarding data processing in accordance with GDPR regulations.\n\"\"\"\n```\n\n- CLASS METHOD: GDPRConsentState.hardware_id\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def hardware_id(self, hardware_id):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the hardware ID representing the unique identifier for the user's hardware in this GDPR Consent State.\n\n:param hardware_id: The hardware ID of this GDPR Consent State.\n:type: str\n\nThis method directly updates the `_hardware_id` attribute of the GDPRConsentState instance. \nNo return value is expected, and there are no side effects; it simply assigns the provided value to the instance's attribute. \nThe `_hardware_id` attribute is utilized to store and manage the hardware ID information, which can be crucial for compliance and tracking user consent under GDPR legislation.\n\"\"\"\n```\n\n- CLASS METHOD: GDPRConsentState.__init__\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def __init__(self, document=None, consented=None, timestamp_unixtime_ms=None, location=None, hardware_id=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the GDPRConsentState class, which models the state of user consent in compliance with GDPR regulations. \n\nThe constructor accepts various parameters that describe the consent state, including a legal document reference, consent status, a timestamp indicating when the consent was recorded, user location, and a hardware identifier associated with the device.\n\nParameters:\n- document (str, optional): Legal document associated with the consent.\n- consented (bool, optional): Indicates whether the user has given consent.\n- timestamp_unixtime_ms (int, optional): The timestamp in Unix format (milliseconds) representing when the consent was obtained.\n- location (str, optional): Geographical location of the user at the time of consent.\n- hardware_id (str, optional): Unique identifier for the hardware device used by the user.\n\nAttributes:\n- swagger_types (dict): Mapping of attribute names to their data types.\n- attribute_map (dict): Mapping of attribute names to their corresponding JSON keys in the API definition.\n\nThis initializer directly sets the provided parameters to the instance's attributes and uses property setters for several attributes to enforce encapsulation.\n\"\"\"\n```\n\n- CLASS METHOD: GDPRConsentState.document\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def document(self, document):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the document of this GDPRConsentState, which represents the consent agreement provided by the user for data processing under GDPR regulations.\n\n:param document: The textual representation of the GDPR consent document.\n:type document: str\n\nThis attribute is critical for compliance with GDPR, as it records the specific terms of consent that the user has agreed to. The value is stored in the private attribute `_document` within the instance of the class. There are no return values or side effects from this method, but it directly influences the state of the GDPRConsentState instance.\n\"\"\"\n```\n\n- CLASS METHOD: GDPRConsentState.location\n  - CLASS SIGNATURE: class GDPRConsentState(object):\n  - SIGNATURE: def location(self, location):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the location of this GDPR Consent State.\n\n:param location: The geographical location associated with this GDPR Consent State, which is represented as a string.\n:type location: str\n\nThis method directly assigns the input 'location' to the private attribute '_location'. The 'GDPRConsentState' class uses this location information to contextualize user consent, which may be important for legal compliance under the GDPR (General Data Protection Regulation). The method does not return a value; it modifies the internal state of the object.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/gdpr_consent_state.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass GDPRConsentState(object):\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_gdpr_consent_state.py:TestGDPRConsentState:testGDPRConsentState": {
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:__init__": {
        "mparticle/models/gdpr_consent_state.py:GDPRConsentState:document": {},
        "mparticle/models/gdpr_consent_state.py:GDPRConsentState:consented": {},
        "mparticle/models/gdpr_consent_state.py:GDPRConsentState:timestamp_unixtime_ms": {},
        "mparticle/models/gdpr_consent_state.py:GDPRConsentState:location": {},
        "mparticle/models/gdpr_consent_state.py:GDPRConsentState:hardware_id": {}
      },
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:document": {},
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:consented": {},
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:timestamp_unixtime_ms": {},
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:location": {},
      "mparticle/models/gdpr_consent_state.py:GDPRConsentState:hardware_id": {}
    }
  }
}