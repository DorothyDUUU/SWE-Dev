{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-library_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/library_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import library\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass LibraryTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Library\", js[\"resourceType\"])\n        return library.Library(js)\n    \n    def testLibrary1(self):\n        inst = self.instantiate_from(\"library-cms146-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Library instance\")\n        self.implLibrary1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Library\", js[\"resourceType\"])\n        inst2 = library.Library(js)\n        self.implLibrary1(inst2)\n    \n    def implLibrary1(self, inst):\n        self.assertEqual(inst.content[0].contentType, \"text/cql\")\n        self.assertEqual(inst.content[0].url, \"library-cms146-example-content.cql\")\n        self.assertEqual(inst.dataRequirement[0].type, \"Patient\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[0].code[0].code, \"diagnosis\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[0].path, \"category\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[1].code[0].code, \"confirmed\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[1].path, \"clinicalStatus\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[2].path, \"code\")\n        self.assertEqual(inst.dataRequirement[1].codeFilter[2].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.102.12.1011\")\n        self.assertEqual(inst.dataRequirement[1].type, \"Condition\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[0].code[0].code, \"diagnosis\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[0].path, \"category\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[1].code[0].code, \"confirmed\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[1].path, \"clinicalStatus\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[2].path, \"code\")\n        self.assertEqual(inst.dataRequirement[2].codeFilter[2].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.102.12.1012\")\n        self.assertEqual(inst.dataRequirement[2].type, \"Condition\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[0].code[0].code, \"finished\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[0].path, \"status\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[1].code[0].code, \"ambulatory\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[1].path, \"class\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[2].path, \"type\")\n        self.assertEqual(inst.dataRequirement[3].codeFilter[2].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.101.12.1061\")\n        self.assertEqual(inst.dataRequirement[3].type, \"Encounter\")\n        self.assertEqual(inst.dataRequirement[4].codeFilter[0].path, \"diagnosis\")\n        self.assertEqual(inst.dataRequirement[4].codeFilter[0].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.198.12.1012\")\n        self.assertEqual(inst.dataRequirement[4].type, \"DiagnosticReport\")\n        self.assertEqual(inst.dataRequirement[5].codeFilter[0].path, \"code\")\n        self.assertEqual(inst.dataRequirement[5].codeFilter[0].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001\")\n        self.assertEqual(inst.dataRequirement[5].type, \"Medication\")\n        self.assertEqual(inst.dataRequirement[6].codeFilter[0].code[0].code, \"active\")\n        self.assertEqual(inst.dataRequirement[6].codeFilter[0].path, \"status\")\n        self.assertEqual(inst.dataRequirement[6].codeFilter[1].path, \"medication.code\")\n        self.assertEqual(inst.dataRequirement[6].codeFilter[1].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001\")\n        self.assertEqual(inst.dataRequirement[6].type, \"MedicationRequest\")\n        self.assertEqual(inst.dataRequirement[7].codeFilter[0].code[0].code, \"completed\")\n        self.assertEqual(inst.dataRequirement[7].codeFilter[0].path, \"status\")\n        self.assertEqual(inst.dataRequirement[7].codeFilter[1].path, \"medication.code\")\n        self.assertEqual(inst.dataRequirement[7].codeFilter[1].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.196.12.1001\")\n        self.assertEqual(inst.dataRequirement[7].type, \"MedicationStatement\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-07-22\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-07-22\")\n        self.assertEqual(inst.description, \"Logic for CMS 146: Appropriate Testing for Children with Pharyngitis\")\n        self.assertEqual(inst.id, \"library-cms146-example\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"CMS146\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatedArtifact[0].resource, \"Library/library-quick-model-definition\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"depends-on\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Appropriate Testing for Children with Pharyngitis\")\n        self.assertEqual(inst.type.coding[0].code, \"logic-library\")\n        self.assertEqual(inst.version, \"2.0.0\")\n    \n    def testLibrary2(self):\n        inst = self.instantiate_from(\"library-predecessor-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Library instance\")\n        self.implLibrary2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Library\", js[\"resourceType\"])\n        inst2 = library.Library(js)\n        self.implLibrary2(inst2)\n    \n    def implLibrary2(self, inst):\n        self.assertEqual(inst.content[0].contentType, \"text/cql\")\n        self.assertEqual(inst.content[0].title, \"FHIR Helpers\")\n        self.assertEqual(inst.content[0].url, \"library-fhir-helpers-content.cql\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2016-11-14\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2016-11-14\")\n        self.assertEqual(inst.description, \"FHIR Helpers\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"library-fhir-helpers-predecessor\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"FHIRHelpers\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatedArtifact[0].resource, \"Library/fhir-model-definition\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"depends-on\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"Library/library-fhir-helpers\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"successor\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"FHIR Helpers\")\n        self.assertEqual(inst.topic[0].text, \"FHIR Helpers\")\n        self.assertEqual(inst.type.coding[0].code, \"logic-library\")\n        self.assertEqual(inst.version, \"1.6\")\n    \n    def testLibrary3(self):\n        inst = self.instantiate_from(\"library-composition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Library instance\")\n        self.implLibrary3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Library\", js[\"resourceType\"])\n        inst2 = library.Library(js)\n        self.implLibrary3(inst2)\n    \n    def implLibrary3(self, inst):\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-03-10\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-03-10\")\n        self.assertEqual(inst.description, \"Artifacts required for implementation of Zika Virus Management\")\n        self.assertEqual(inst.id, \"composition-example\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.org\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"Zika Artifacts\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatedArtifact[0].resource, \"ActivityDefinition/administer-zika-virus-exposure-assessment\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"ActivityDefinition/order-serum-zika-dengue-virus-igm\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[2].resource, \"ActivityDefinition/provide-mosquito-prevention-advice\")\n        self.assertEqual(inst.relatedArtifact[2].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[3].resource, \"Library/zika-virus-intervention-logic\")\n        self.assertEqual(inst.relatedArtifact[3].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[4].resource, \"PlanDefinition/zika-virus-intervention\")\n        self.assertEqual(inst.relatedArtifact[4].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[5].resource, \"Questionnaire/zika-virus-exposure-assessment\")\n        self.assertEqual(inst.relatedArtifact[5].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[6].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[6].url, \"https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Zika Artifacts\")\n        self.assertEqual(inst.topic[0].text, \"Zika Virus Management\")\n        self.assertEqual(inst.type.coding[0].code, \"asset-collection\")\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testLibrary4(self):\n        inst = self.instantiate_from(\"library-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Library instance\")\n        self.implLibrary4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Library\", js[\"resourceType\"])\n        inst2 = library.Library(js)\n        self.implLibrary4(inst2)\n    \n    def implLibrary4(self, inst):\n        self.assertEqual(inst.content[0].contentType, \"text/cql\")\n        self.assertEqual(inst.content[0].url, \"library-example-content.cql\")\n        self.assertEqual(inst.dataRequirement[0].codeFilter[0].path, \"code\")\n        self.assertEqual(inst.dataRequirement[0].codeFilter[0].valueSet, \"urn:oid:2.16.840.1.113883.3.464.1003.111.12.1006\")\n        self.assertEqual(inst.dataRequirement[0].type, \"Condition\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-07-22\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-07-22\")\n        self.assertEqual(inst.description, \"Common Logic for adherence to Chlamydia Screening guidelines\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"ChalmydiaScreening_Common\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatedArtifact[0].resource, \"Library/library-quick-model-definition\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"depends-on\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Chlamydia Screening Common Library\")\n        self.assertEqual(inst.topic[0].text, \"Chlamydia Screening\")\n        self.assertEqual(inst.type.coding[0].code, \"logic-library\")\n        self.assertEqual(inst.version, \"2.0.0\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/library.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Library).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Library(domainresource.DomainResource):\n    \"\"\" Represents a library of quality improvement components.\n    \n    The Library resource is a general-purpose container for knowledge asset\n    definitions. It can be used to describe and expose existing knowledge\n    assets such as logic libraries and information model descriptions, as well\n    as to describe a collection of knowledge assets.\n    \"\"\"\n    \n    resource_type = \"Library\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the library was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.content = None\n        \"\"\" Contents of the library, either embedded or referenced.\n        List of `Attachment` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.dataRequirement = None\n        \"\"\" What data is referenced by this library.\n        List of `DataRequirement` items (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the library.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the library is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the library.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for library (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the library was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this library (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.parameter = None\n        \"\"\" Parameters defined by the library.\n        List of `ParameterDefinition` items (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this library is defined.\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" Type of individual the library content is focused on.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" Type of individual the library content is focused on.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the library.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this library (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" E.g. Education, Treatment, Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" logic-library | model-definition | asset-collection | module-\n        definition.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this library, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" Describes the clinical usage of the library.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the library.\n        Type `str`. \"\"\"\n        \n        super(Library, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Library, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"content\", \"content\", attachment.Attachment, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"dataRequirement\", \"dataRequirement\", datarequirement.DataRequirement, True, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"parameter\", \"parameter\", parameterdefinition.ParameterDefinition, True, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"url\", \"url\", str, False, None, False),\n            (\"usage\", \"usage\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import parameterdefinition\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON string (`origval`) is not present, it falls back to the ISO 8601 string representation of the date (via the `isostring` property). The method does not take any parameters and returns either the original JSON string or the standardized ISO format. This method allows for retrieval of the input representation, which may be important for use cases requiring the exact value as provided on input, especially when dealing with reduced precision dates that are normalized by the class.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON string (`origval`) is not present, it falls back to the ISO 8601 string representation of the date (via the `isostring` property). The method does not take any parameters and returns either the original JSON string or the standardized ISO format. This method allows for retrieval of the input representation, which may be important for use cases requiring the exact value as provided on input, especially when dealing with reduced precision dates that are normalized by the class.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/library.py": {
      "Library.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an instance of the Library class, which represents a collection of knowledge asset definitions related to quality improvement components.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Library properties. Each key corresponds to a specific attribute of the Library.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, allows invalid variables without raising an exception.\n\nAttributes:\n- approvalDate: When the library was approved by the publisher.\n- author: List of authors of the content.\n- contact: Contact details for the publisher.\n- content: Contents of the library, either embedded or referenced.\n- copyright: Use and/or publishing restrictions.\n- dataRequirement: What data is referenced by this library.\n- date: Date when the library was last changed.\n- description: Natural language description of the library.\n- editor: List of individuals who edited the content.\n- effectivePeriod: Expected period during which the library should be used.\n- endorser: List of individuals who endorsed the content.\n- experimental: Indicates if the library is for testing purposes.\n- identifier: Additional identifiers for the library.\n- jurisdiction: Intended jurisdiction for the library.\n- lastReviewDate: Date when the library was last reviewed.\n- name: Computer-friendly name of the library.\n- parameter: List of parameters defined by the library.\n- publisher: Name of the publisher (organization or individual).\n- purpose: Purpose of defining this library.\n- relatedArtifact: Additional documentation and citations.\n- reviewer: List of individuals who reviewed the content.\n- status: Current status of the library (draft, active, retired, unknown).\n- subjectCodeableConcept: Type of individual the library content is focused on.\n- subjectReference: Reference to the subject of the library content.\n- subtitle: Subordinate title of the library.\n- title: Human-friendly name of the library.\n- topic: Topics related to the library content.\n- type: Type of library (logic-library, model-definition, asset-collection, module-definition).\n- url: Canonical identifier (URI) for the library.\n- usage: Describes the clinical usage of the library.\n- useContext: Context intended to support the content.\n- version: Business version of the library.\n\nThis class inherits from the DomainResource class, found in the domainresource module, and relies on various other classes for complex attributes, such as ContactDetail, Attachment, DataRequirement, and others, that are imported at the beginning of the module.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the library was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.content = None\n        ' Contents of the library, either embedded or referenced.\\n        List of `Attachment` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.dataRequirement = None\n        ' What data is referenced by this library.\\n        List of `DataRequirement` items (represented as `dict` in JSON). '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the library.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the library is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.identifier = None\n        ' Additional identifier for the library.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for library (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the library was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.name = None\n        ' Name for this library (computer friendly).\\n        Type `str`. '\n        self.parameter = None\n        ' Parameters defined by the library.\\n        List of `ParameterDefinition` items (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this library is defined.\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' Type of individual the library content is focused on.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' Type of individual the library content is focused on.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate title of the library.\\n        Type `str`. '\n        self.title = None\n        ' Name for this library (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' E.g. Education, Treatment, Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' logic-library | model-definition | asset-collection | module-\\n        definition.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.url = None\n        ' Canonical identifier for this library, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.usage = None\n        ' Describes the clinical usage of the library.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the library.\\n        Type `str`. '\n        super(Library, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an instance of the Library class, which represents a collection of knowledge asset definitions related to quality improvement components.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Library properties. Each key corresponds to a specific attribute of the Library.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, allows invalid variables without raising an exception.\n\nAttributes:\n- approvalDate: When the library was approved by the publisher.\n- author: List of authors of the content.\n- contact: Contact details for the publisher.\n- content: Contents of the library, either embedded or referenced.\n- copyright: Use and/or publishing restrictions.\n- dataRequirement: What data is referenced by this library.\n- date: Date when the library was last changed.\n- description: Natural language description of the library.\n- editor: List of individuals who edited the content.\n- effectivePeriod: Expected period during which the library should be used.\n- endorser: List of individuals who endorsed the content.\n- experimental: Indicates if the library is for testing purposes.\n- identifier: Additional identifiers for the library.\n- jurisdiction: Intended jurisdiction for the library.\n- lastReviewDate: Date when the library was last reviewed.\n- name: Computer-friendly name of the library.\n- parameter: List of parameters defined by the library.\n- publisher: Name of the publisher (organization or individual).\n- purpose: Purpose of defining this library.\n- relatedArtifact: Additional documentation and citations.\n- reviewer: List of individuals who reviewed the content.\n- status: Current status of the library (draft, active, retired, unknown).\n- subjectCodeableConcept: Type of individual the library content is focused on.\n- subjectReference: Reference to the subject of the library content.\n- subtitle: Subordinate title of the library.\n- title: Human-friendly name of the library.\n- topic: Topics related to the library content.\n- type: Type of library (logic-library, model-definition, asset-collection, module-definition).\n- url: Canonical identifier (URI) for the library.\n- usage: Describes the clinical usage of the library.\n- useContext: Context intended to support the content.\n- version: Business version of the library.\n\nThis class inherits from the DomainResource class, found in the domainresource module, and relies on various other classes for complex attributes, such as ContactDetail, Attachment, DataRequirement, and others, that are imported at the beginning of the module.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Library(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"__init__(self, jsonval: Union[str, None] = None) -> None\n\nInitialize a FHIRDateTime instance, which extends FHIRDate for handling FHIR datetime values in Python. This constructor attempts to parse the input `jsonval`, which can be a string representation of a datetime in ISO 8601 format or None. The internal `datetime` attribute is initialized to None, ready to hold the converted datetime value after parsing.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime to be parsed or None. If provided, it is passed to the parent class's initializer for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Intended to store the Python datetime representation derived from the FHIR-compatible string, initialized to None until set by the parent class's parsing logic.\n\nInteractions:\n- Calls the parent class's `__init__` method via `super().__init__(jsonval)`, which is responsible for parsing the `jsonval` input. This setup ensures compatibility with FHIR datetime formats while preparing the instance for further operations.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "__init__(self, jsonval: Union[str, None] = None) -> None\n\nInitialize a FHIRDateTime instance, which extends FHIRDate for handling FHIR datetime values in Python. This constructor attempts to parse the input `jsonval`, which can be a string representation of a datetime in ISO 8601 format or None. The internal `datetime` attribute is initialized to None, ready to hold the converted datetime value after parsing.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime to be parsed or None. If provided, it is passed to the parent class's initializer for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Intended to store the Python datetime representation derived from the FHIR-compatible string, initialized to None until set by the parent class's parsing logic.\n\nInteractions:\n- Calls the parent class's `__init__` method via `super().__init__(jsonval)`, which is responsible for parsing the `jsonval` input. This setup ensures compatibility with FHIR datetime formats while preparing the instance for further operations.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIR resource instance to a JSON-compliant dictionary representation.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the resulting JSON object. The `resourceType` is set to the value of the `resource_type` class attribute, which is defined as 'FHIRAbstractResource' for instances of this class. The method does not take any parameters and returns a dictionary containing the resource's data, along with the specified `resourceType`.\n\nReturns:\n    dict: A JSON representation of the resource instance, including the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIR resource instance to a JSON-compliant dictionary representation.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the resulting JSON object. The `resourceType` is set to the value of the `resource_type` class attribute, which is defined as 'FHIRAbstractResource' for instances of this class. The method does not take any parameters and returns a dictionary containing the resource's data, along with the specified `resourceType`.\n\nReturns:\n    dict: A JSON representation of the resource instance, including the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/library.py:Library:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/library_test.py:LibraryTests:testLibrary1": {
      "tests/models/library_test.py:LibraryTests:instantiate_from": {
        "fhirclient/models/library.py:Library:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/library.py:Library:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/library_test.py:LibraryTests:implLibrary1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/library.py:Library:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/library.py:Library:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/library.py:Library:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/library_test.py:LibraryTests:instantiate_from": {
      "fhirclient/models/library.py:Library:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/library.py:Library:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/library_test.py:LibraryTests:testLibrary2": {
      "tests/models/library_test.py:LibraryTests:instantiate_from": {
        "fhirclient/models/library.py:Library:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/library.py:Library:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/library_test.py:LibraryTests:implLibrary2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/library.py:Library:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/library.py:Library:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/library.py:Library:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/library_test.py:LibraryTests:testLibrary3": {
      "tests/models/library_test.py:LibraryTests:instantiate_from": {
        "fhirclient/models/library.py:Library:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/library.py:Library:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/library_test.py:LibraryTests:implLibrary3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/library.py:Library:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/library.py:Library:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/library.py:Library:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/library_test.py:LibraryTests:testLibrary4": {
      "tests/models/library_test.py:LibraryTests:instantiate_from": {
        "fhirclient/models/library.py:Library:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/library.py:Library:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/library_test.py:LibraryTests:implLibrary4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/library.py:Library:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/library.py:Library:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/library.py:Library:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-library_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 library.py\n            \u2514\u2500\u2500 Library.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe presented module is responsible for validating and testing FHIR (Fast Healthcare Interoperability Resources) Library resources, ensuring compliance with the FHIR specification (version 4.0.1). Its core functionality involves parsing and instantiating Library resources from JSON files, verifying their structure, metadata, and relationships, and confirming their alignment with predetermined requirements. The module supports the validation of various aspects of a Library resource, such as its content types, data requirements, related artifacts, and metadata properties like versioning, identifiers, and descriptions, across different healthcare use cases (e.g., clinical decision support logic, guidelines implementation). By automating validation, the module streamlines the development and quality assurance of FHIR Libraries, reducing the risk of errors for developers working on healthcare applications involving interoperable standards.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate, if available. If the original JSON string (`origval`) is not present, it falls back to the ISO 8601 string representation of the date (via the `isostring` property). The method does not take any parameters and returns either the original JSON string or the standardized ISO format. This method allows for retrieval of the input representation, which may be important for use cases requiring the exact value as provided on input, especially when dealing with reduced precision dates that are normalized by the class.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/library.py\n\n- CLASS METHOD: Library.__init__\n  - CLASS SIGNATURE: class Library(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an instance of the Library class, which represents a collection of knowledge asset definitions related to quality improvement components.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the Library properties. Each key corresponds to a specific attribute of the Library.\n- strict (bool, optional): If True (default), raises a FHIRValidationError on validation errors; if False, allows invalid variables without raising an exception.\n\nAttributes:\n- approvalDate: When the library was approved by the publisher.\n- author: List of authors of the content.\n- contact: Contact details for the publisher.\n- content: Contents of the library, either embedded or referenced.\n- copyright: Use and/or publishing restrictions.\n- dataRequirement: What data is referenced by this library.\n- date: Date when the library was last changed.\n- description: Natural language description of the library.\n- editor: List of individuals who edited the content.\n- effectivePeriod: Expected period during which the library should be used.\n- endorser: List of individuals who endorsed the content.\n- experimental: Indicates if the library is for testing purposes.\n- identifier: Additional identifiers for the library.\n- jurisdiction: Intended jurisdiction for the library.\n- lastReviewDate: Date when the library was last reviewed.\n- name: Computer-friendly name of the library.\n- parameter: List of parameters defined by the library.\n- publisher: Name of the publisher (organization or individual).\n- purpose: Purpose of defining this library.\n- relatedArtifact: Additional documentation and citations.\n- reviewer: List of individuals who reviewed the content.\n- status: Current status of the library (draft, active, retired, unknown).\n- subjectCodeableConcept: Type of individual the library content is focused on.\n- subjectReference: Reference to the subject of the library content.\n- subtitle: Subordinate title of the library.\n- title: Human-friendly name of the library.\n- topic: Topics related to the library content.\n- type: Type of library (logic-library, model-definition, asset-collection, module-definition).\n- url: Canonical identifier (URI) for the library.\n- usage: Describes the clinical usage of the library.\n- useContext: Context intended to support the content.\n- version: Business version of the library.\n\nThis class inherits from the DomainResource class, found in the domainresource module, and relies on various other classes for complex attributes, such as ContactDetail, Attachment, DataRequirement, and others, that are imported at the beginning of the module.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\n__init__(self, jsonval: Union[str, None] = None) -> None\n\nInitialize a FHIRDateTime instance, which extends FHIRDate for handling FHIR datetime values in Python. This constructor attempts to parse the input `jsonval`, which can be a string representation of a datetime in ISO 8601 format or None. The internal `datetime` attribute is initialized to None, ready to hold the converted datetime value after parsing.\n\nParameters:\n- jsonval (Union[str, None]): A string representation of the datetime to be parsed or None. If provided, it is passed to the parent class's initializer for processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Intended to store the Python datetime representation derived from the FHIR-compatible string, initialized to None until set by the parent class's parsing logic.\n\nInteractions:\n- Calls the parent class's `__init__` method via `super().__init__(jsonval)`, which is responsible for parsing the `jsonval` input. This setup ensures compatibility with FHIR datetime formats while preparing the instance for further operations.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIR resource instance to a JSON-compliant dictionary representation.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the `resourceType` key in the resulting JSON object. The `resourceType` is set to the value of the `resource_type` class attribute, which is defined as 'FHIRAbstractResource' for instances of this class. The method does not take any parameters and returns a dictionary containing the resource's data, along with the specified `resourceType`.\n\nReturns:\n    dict: A JSON representation of the resource instance, including the `resourceType`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/library.py": "from . import domainresource\n\nclass Library(domainresource.DomainResource):\n    \"\"\" Represents a library of quality improvement components.\n    \n    The Library resource is a general-purpose container for knowledge asset\n    definitions. It can be used to describe and expose existing knowledge\n    assets such as logic libraries and information model descriptions, as well\n    as to describe a collection of knowledge assets.\n    \"\"\"\n    resource_type = 'Library'\n\n    def elementProperties(self):\n        js = super(Library, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('content', 'content', attachment.Attachment, True, None, False), ('copyright', 'copyright', str, False, None, False), ('dataRequirement', 'dataRequirement', datarequirement.DataRequirement, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('parameter', 'parameter', parameterdefinition.ParameterDefinition, True, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import parameterdefinition\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}