{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_commerce_event",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_commerce_event.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.commerce_event import CommerceEvent\n\n\nclass TestCommerceEvent(unittest.TestCase):\n    \"\"\" CommerceEvent unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testCommerceEvent(self):\n        event = mparticle.models.commerce_event.CommerceEvent(\n            product_action={})\n        pass\n\n    def testCommerceEventAttributeValues(self):\n        with self.assertRaises(ValueError):\n            event = mparticle.models.commerce_event.CommerceEvent(product_action={},\n                                                                  custom_attributes={\n                                                                      'example attribute key': ['something']}\n                                                                  )\n\n        event = mparticle.models.commerce_event.CommerceEvent(\n            product_action={})\n\n        with self.assertRaises(ValueError):\n            event.custom_attributes = {'example attribute key': ['something']}\n        pass\n\n    def testCommerceEventCustomAttributes(self):\n        custom_flags = {\n            \"foo\": 'bar',\n            'answer': 42,\n            'arrays': [\n                'foo', 'bar', 'baz'\n            ]\n        }\n\n        event = mparticle.models.commerce_event.CommerceEvent(\n            product_action='test',\n            custom_flags=custom_flags)\n\n        event_dict = event.to_dict()\n\n        self.assertEqual(\"bar\", event_dict[\"custom_flags\"][\"foo\"])\n        self.assertEqual(42, event_dict[\"custom_flags\"][\"answer\"])\n        self.assertEqual(\n            ['foo', 'bar', 'baz'],\n            event_dict[\"custom_flags\"][\"arrays\"])\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/commerce_event.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\nimport mparticle\n\n\nclass CommerceEvent(object):\n\n    def __init__(self, product_action=None, timestamp_unixtime_ms=None,\n                 event_id=None, source_message_id=None,\n                 session_id=None, session_uuid=None,\n                 custom_attributes=None, location=None,\n                 device_current_state=None, promotion_action=None,\n                 product_impressions=None, shopping_cart=None,\n                 currency_code=None, screen_name=None,\n                 is_non_interactive=None, custom_flags=None):\n        \"\"\"\n        CommerceEvent - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'timestamp_unixtime_ms': 'int',\n            'event_id': 'int',\n            'source_message_id': 'str',\n            'session_id': 'int',\n            'session_uuid': 'str',\n            'custom_attributes': 'dict(str, str)',\n            'location': 'GeoLocation',\n            'device_current_state': 'DeviceCurrentState',\n            'product_action': 'ProductAction',\n            'promotion_action': 'PromotionAction',\n            'product_impressions': 'list[ProductImpression]',\n            'shopping_cart': 'ShoppingCart',\n            'currency_code': 'str',\n            'screen_name': 'str',\n            'is_non_interactive': 'bool',\n            'custom_flags': 'dict(str, str)',\n        }\n\n        self.attribute_map = {\n            'timestamp_unixtime_ms': 'timestamp_unixtime_ms',\n            'event_id': 'event_id',\n            'source_message_id': 'source_message_id',\n            'session_id': 'session_id',\n            'session_uuid': 'session_uuid',\n            'custom_attributes': 'custom_attributes',\n            'location': 'location',\n            'device_current_state': 'device_current_state',\n            'product_action': 'product_action',\n            'promotion_action': 'promotion_action',\n            'product_impressions': 'product_impressions',\n            'shopping_cart': 'shopping_cart',\n            'currency_code': 'currency_code',\n            'screen_name': 'screen_name',\n            'is_non_interactive': 'is_non_interactive',\n            'custom_flags': 'custom_flags',\n        }\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self.custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._product_action = product_action\n        self._promotion_action = promotion_action\n        self._product_impressions = product_impressions\n        self._shopping_cart = shopping_cart\n        self._currency_code = currency_code\n        self._screen_name = screen_name\n        self._is_non_interactive = is_non_interactive\n        self._custom_flags = custom_flags\n\n        if (product_action is None and\n            product_impressions is None and\n                promotion_action is None):\n            raise ValueError(\n                \"At least one of: product_action, product_impressions, or promotion_action is required.\"\n            )\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n        :return: The timestamp_unixtime_ms of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CommerceEvent.\n        :type: int\n        \"\"\"\n\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this CommerceEvent.\n\n\n        :return: The event_id of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this CommerceEvent.\n\n\n        :param event_id: The event_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this CommerceEvent.\n\n\n        :return: The source_message_id of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this CommerceEvent.\n\n\n        :param source_message_id: The source_message_id of this CommerceEvent.\n        :type: str\n        \"\"\"\n\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this CommerceEvent.\n\n\n        :return: The session_id of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this CommerceEvent.\n\n\n        :param session_id: The session_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this CommerceEvent.\n\n\n        :return: The session_uuid of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this CommerceEvent.\n\n\n        :param session_uuid: The session_uuid of this CommerceEvent.\n        :type: str\n        \"\"\"\n\n        self._session_uuid = session_uuid\n\n    @property\n    def custom_attributes(self):\n        \"\"\"\n        Gets the custom_attributes of this CommerceEvent.\n\n\n        :return: The custom_attributes of this CommerceEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n\n        return self._custom_attributes\n\n    @custom_attributes.setter\n    def custom_attributes(self, custom_attributes):\n        \"\"\"\n        Sets the custom_attributes of this CommerceEvent.\n\n\n        :param custom_attributes: The custom_attributes of this CommerceEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        if not mparticle.ApiClient.validate_attribute_bag_values(custom_attributes):\n            raise ValueError(\n                \"Invalid custom_attributes passed to CommerceEvent: \" + str(custom_attributes))\n\n        self._custom_attributes = custom_attributes\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CommerceEvent.\n\n\n        :return: The location of this CommerceEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CommerceEvent.\n\n\n        :param location: The location of this CommerceEvent.\n        :type: GeoLocation\n        \"\"\"\n\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this CommerceEvent.\n\n\n        :return: The device_current_state of this CommerceEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this CommerceEvent.\n\n\n        :param device_current_state: The device_current_state of this CommerceEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n\n        self._device_current_state = device_current_state\n\n    @property\n    def product_action(self):\n        \"\"\"\n        Gets the product_action of this CommerceEvent.\n\n\n        :return: The product_action of this CommerceEvent.\n        :rtype: ProductAction\n        \"\"\"\n        return self._product_action\n\n    @product_action.setter\n    def product_action(self, product_action):\n        \"\"\"\n        Sets the product_action of this CommerceEvent.\n\n\n        :param product_action: The product_action of this CommerceEvent.\n        :type: ProductAction\n        \"\"\"\n\n        self._product_action = product_action\n\n    @property\n    def promotion_action(self):\n        \"\"\"\n        Gets the promotion_action of this CommerceEvent.\n\n\n        :return: The promotion_action of this CommerceEvent.\n        :rtype: PromotionAction\n        \"\"\"\n        return self._promotion_action\n\n    @promotion_action.setter\n    def promotion_action(self, promotion_action):\n        \"\"\"\n        Sets the promotion_action of this CommerceEvent.\n\n\n        :param promotion_action: The promotion_action of this CommerceEvent.\n        :type: PromotionAction\n        \"\"\"\n\n        self._promotion_action = promotion_action\n\n    @property\n    def product_impressions(self):\n        \"\"\"\n        Gets the product_impressions of this CommerceEvent.\n\n\n        :return: The product_impressions of this CommerceEvent.\n        :rtype: list[ProductImpression]\n        \"\"\"\n        return self._product_impressions\n\n    @product_impressions.setter\n    def product_impressions(self, product_impressions):\n        \"\"\"\n        Sets the product_impressions of this CommerceEvent.\n\n\n        :param product_impressions: The product_impressions of this CommerceEvent.\n        :type: list[ProductImpression]\n        \"\"\"\n\n        self._product_impressions = product_impressions\n\n    @property\n    def shopping_cart(self):\n        \"\"\"\n        Gets the shopping_cart of this CommerceEvent.\n\n\n        :return: The shopping_cart of this CommerceEvent.\n        :rtype: ShoppingCart\n        \"\"\"\n        return self._shopping_cart\n\n    @shopping_cart.setter\n    def shopping_cart(self, shopping_cart):\n        \"\"\"\n        Sets the shopping_cart of this CommerceEvent.\n\n\n        :param shopping_cart: The shopping_cart of this CommerceEvent.\n        :type: ShoppingCart\n        \"\"\"\n\n        self._shopping_cart = shopping_cart\n\n    @property\n    def currency_code(self):\n        \"\"\"\n        Gets the currency_code of this CommerceEvent.\n\n\n        :return: The currency_code of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._currency_code\n\n    @currency_code.setter\n    def currency_code(self, currency_code):\n        \"\"\"\n        Sets the currency_code of this CommerceEvent.\n\n\n        :param currency_code: The currency_code of this CommerceEvent.\n        :type: str\n        \"\"\"\n\n        self._currency_code = currency_code\n\n    @property\n    def screen_name(self):\n        \"\"\"\n        Gets the screen_name of this CommerceEvent.\n\n\n        :return: The screen_name of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._screen_name\n\n    @screen_name.setter\n    def screen_name(self, screen_name):\n        \"\"\"\n        Sets the screen_name of this CommerceEvent.\n\n\n        :param screen_name: The screen_name of this CommerceEvent.\n        :type: str\n        \"\"\"\n\n        self._screen_name = screen_name\n\n    @property\n    def is_non_interactive(self):\n        \"\"\"\n        Gets the is_non_interactive of this CommerceEvent.\n\n\n        :return: The is_non_interactive of this CommerceEvent.\n        :rtype: bool\n        \"\"\"\n        return self._is_non_interactive\n\n    @is_non_interactive.setter\n    def is_non_interactive(self, is_non_interactive):\n        \"\"\"\n        Sets the is_non_interactive of this CommerceEvent.\n\n\n        :param is_non_interactive: The is_non_interactive of this CommerceEvent.\n        :type: bool\n        \"\"\"\n\n        self._is_non_interactive = is_non_interactive\n\n    @property\n    def custom_flags(self):\n        \"\"\"\n        Gets the custom_flags of this CommerceEvent.\n\n\n        :return: The custom_flags of this CommerceEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_flags\n\n    @custom_flags.setter\n    def custom_flags(self, custom_flags):\n        \"\"\"\n        Sets the custom_flags of this CommerceEvent.\n\n\n        :param custom_flags: The custom_flags of this CommerceEvent.\n        :type: dict(str, str)\n        \"\"\"\n\n        self._custom_flags = custom_flags\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/commerce_event.py": {
      "CommerceEvent.__init__": {
        "code": "    def __init__(self, product_action=None, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, promotion_action=None, product_impressions=None, shopping_cart=None, currency_code=None, screen_name=None, is_non_interactive=None, custom_flags=None):\n        \"\"\"Initializes a CommerceEvent object that encapsulates the details of a commerce-related event, as defined in the mParticle Event API.\n\n    This constructor requires at least one of the product_action, product_impressions, or promotion_action parameters to be provided.\n    \n    Parameters:\n    - product_action (ProductAction, optional): Represents the action taken on a product, such as a purchase or addition to a cart.\n    - timestamp_unixtime_ms (int, optional): The event timestamp in Unix time format (milliseconds).\n    - event_id (int, optional): Unique identifier for the event.\n    - source_message_id (str, optional): Identifier for the message source.\n    - session_id (int, optional): Identifier for the user session.\n    - session_uuid (str, optional): Unique universal identifier for the session.\n    - custom_attributes (dict(str, str), optional): A dictionary containing custom attributes associated with the event.\n    - location (GeoLocation, optional): The geographical location related to the event.\n    - device_current_state (DeviceCurrentState, optional): A representation of the device's current state.\n    - promotion_action (PromotionAction, optional): Represents promotional actions involving products.\n    - product_impressions (list[ProductImpression], optional): List of products that were displayed to the user.\n    - shopping_cart (ShoppingCart, optional): Represents the shopping cart associated with the event.\n    - currency_code (str, optional): The currency code used in the transaction.\n    - screen_name (str, optional): The name of the screen where the event occurred.\n    - is_non_interactive (bool, optional): Indicates if the event is non-interactive.\n    - custom_flags (dict(str, str), optional): A dictionary of custom flags associated with the event.\n\n    Raises:\n    - ValueError: If none of product_action, product_impressions, or promotion_action are provided, indicating that at least one is required for a valid commerce event.\n    \n    This constructor depends on the mparticle module for validation of custom_attribute values.\"\"\"\n        '\\n        CommerceEvent - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'timestamp_unixtime_ms': 'int', 'event_id': 'int', 'source_message_id': 'str', 'session_id': 'int', 'session_uuid': 'str', 'custom_attributes': 'dict(str, str)', 'location': 'GeoLocation', 'device_current_state': 'DeviceCurrentState', 'product_action': 'ProductAction', 'promotion_action': 'PromotionAction', 'product_impressions': 'list[ProductImpression]', 'shopping_cart': 'ShoppingCart', 'currency_code': 'str', 'screen_name': 'str', 'is_non_interactive': 'bool', 'custom_flags': 'dict(str, str)'}\n        self.attribute_map = {'timestamp_unixtime_ms': 'timestamp_unixtime_ms', 'event_id': 'event_id', 'source_message_id': 'source_message_id', 'session_id': 'session_id', 'session_uuid': 'session_uuid', 'custom_attributes': 'custom_attributes', 'location': 'location', 'device_current_state': 'device_current_state', 'product_action': 'product_action', 'promotion_action': 'promotion_action', 'product_impressions': 'product_impressions', 'shopping_cart': 'shopping_cart', 'currency_code': 'currency_code', 'screen_name': 'screen_name', 'is_non_interactive': 'is_non_interactive', 'custom_flags': 'custom_flags'}\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n        self._event_id = event_id\n        self._source_message_id = source_message_id\n        self._session_id = session_id\n        self._session_uuid = session_uuid\n        self.custom_attributes = custom_attributes\n        self._location = location\n        self._device_current_state = device_current_state\n        self._product_action = product_action\n        self._promotion_action = promotion_action\n        self._product_impressions = product_impressions\n        self._shopping_cart = shopping_cart\n        self._currency_code = currency_code\n        self._screen_name = screen_name\n        self._is_non_interactive = is_non_interactive\n        self._custom_flags = custom_flags\n        if product_action is None and product_impressions is None and (promotion_action is None):\n            raise ValueError('At least one of: product_action, product_impressions, or promotion_action is required.')",
        "docstring": "Initializes a CommerceEvent object that encapsulates the details of a commerce-related event, as defined in the mParticle Event API.\n\nThis constructor requires at least one of the product_action, product_impressions, or promotion_action parameters to be provided.\n\nParameters:\n- product_action (ProductAction, optional): Represents the action taken on a product, such as a purchase or addition to a cart.\n- timestamp_unixtime_ms (int, optional): The event timestamp in Unix time format (milliseconds).\n- event_id (int, optional): Unique identifier for the event.\n- source_message_id (str, optional): Identifier for the message source.\n- session_id (int, optional): Identifier for the user session.\n- session_uuid (str, optional): Unique universal identifier for the session.\n- custom_attributes (dict(str, str), optional): A dictionary containing custom attributes associated with the event.\n- location (GeoLocation, optional): The geographical location related to the event.\n- device_current_state (DeviceCurrentState, optional): A representation of the device's current state.\n- promotion_action (PromotionAction, optional): Represents promotional actions involving products.\n- product_impressions (list[ProductImpression], optional): List of products that were displayed to the user.\n- shopping_cart (ShoppingCart, optional): Represents the shopping cart associated with the event.\n- currency_code (str, optional): The currency code used in the transaction.\n- screen_name (str, optional): The name of the screen where the event occurred.\n- is_non_interactive (bool, optional): Indicates if the event is non-interactive.\n- custom_flags (dict(str, str), optional): A dictionary of custom flags associated with the event.\n\nRaises:\n- ValueError: If none of product_action, product_impressions, or promotion_action are provided, indicating that at least one is required for a valid commerce event.\n\nThis constructor depends on the mparticle module for validation of custom_attribute values.",
        "signature": "def __init__(self, product_action=None, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, promotion_action=None, product_impressions=None, shopping_cart=None, currency_code=None, screen_name=None, is_non_interactive=None, custom_flags=None):",
        "type": "Method",
        "class_signature": "class CommerceEvent(object):"
      },
      "CommerceEvent.custom_attributes": {
        "code": "    def custom_attributes(self, custom_attributes):\n        \"\"\"Sets the `custom_attributes` of this `CommerceEvent`, allowing the user to specify additional attributes for the event in the form of a dictionary, where both keys and values are strings.\n\n:param custom_attributes: A dictionary of custom attributes to associate with the `CommerceEvent`.\n:type: dict(str, str)\n\nRaises:\n    ValueError: If the provided `custom_attributes` fail validation via `mparticle.ApiClient.validate_attribute_bag_values`, indicating that the input may contain invalid values.\n\nThis method interacts with the `mparticle` module, specifically utilizing the `ApiClient` class to ensure the validity of the custom attribute values. Properly validated attributes can enhance the contextual data attached to commerce events, improving tracking and analytics.\"\"\"\n        '\\n        Sets the custom_attributes of this CommerceEvent.\\n\\n\\n        :param custom_attributes: The custom_attributes of this CommerceEvent.\\n        :type: dict(str, str)\\n        '\n        if not mparticle.ApiClient.validate_attribute_bag_values(custom_attributes):\n            raise ValueError('Invalid custom_attributes passed to CommerceEvent: ' + str(custom_attributes))\n        self._custom_attributes = custom_attributes",
        "docstring": "Sets the `custom_attributes` of this `CommerceEvent`, allowing the user to specify additional attributes for the event in the form of a dictionary, where both keys and values are strings.\n\n:param custom_attributes: A dictionary of custom attributes to associate with the `CommerceEvent`.\n:type: dict(str, str)\n\nRaises:\n    ValueError: If the provided `custom_attributes` fail validation via `mparticle.ApiClient.validate_attribute_bag_values`, indicating that the input may contain invalid values.\n\nThis method interacts with the `mparticle` module, specifically utilizing the `ApiClient` class to ensure the validity of the custom attribute values. Properly validated attributes can enhance the contextual data attached to commerce events, improving tracking and analytics.",
        "signature": "def custom_attributes(self, custom_attributes):",
        "type": "Method",
        "class_signature": "class CommerceEvent(object):"
      },
      "CommerceEvent.to_dict": {
        "code": "    def to_dict(self):\n        \"\"\"Converts the properties of the CommerceEvent instance to a dictionary format.\n\n        This method iterates through each attribute defined in the `swagger_types` dictionary, retrieves its value, and\n        constructs a dictionary representation of the instance. If an attribute is a list or a dictionary that contains\n        other objects with their own `to_dict` methods, those are also converted to dictionaries. This facilitates easy\n        serialization of the event for API communication or storage.\n\n        Returns:\n            dict: A dictionary representation of the CommerceEvent instance, where keys are attribute names and values\n                  are their corresponding values, converted to a suitable format if they are complex objects.\n\n        Dependencies:\n            - `iteritems`: Imported from `six`, enables iteration over dictionary items in a compatible manner for\n              Python 2 and 3.\n            - Attributes are mapped from `swagger_types`, which defines the expected data types for each property in\n              the instance.\"\"\"\n        '\\n        Returns the model properties as a dict\\n        '\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result",
        "docstring": "Converts the properties of the CommerceEvent instance to a dictionary format.\n\nThis method iterates through each attribute defined in the `swagger_types` dictionary, retrieves its value, and\nconstructs a dictionary representation of the instance. If an attribute is a list or a dictionary that contains\nother objects with their own `to_dict` methods, those are also converted to dictionaries. This facilitates easy\nserialization of the event for API communication or storage.\n\nReturns:\n    dict: A dictionary representation of the CommerceEvent instance, where keys are attribute names and values\n          are their corresponding values, converted to a suitable format if they are complex objects.\n\nDependencies:\n    - `iteritems`: Imported from `six`, enables iteration over dictionary items in a compatible manner for\n      Python 2 and 3.\n    - Attributes are mapped from `swagger_types`, which defines the expected data types for each property in\n      the instance.",
        "signature": "def to_dict(self):",
        "type": "Method",
        "class_signature": "class CommerceEvent(object):"
      }
    }
  },
  "dependency_dict": {
    "mparticle/models/commerce_event.py:CommerceEvent:__init__": {},
    "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {
      "mparticle/api_client.py": {
        "ApiClient.validate_attribute_bag_values": {
          "code": "    def validate_attribute_bag_values(custom_attributes):\n        return not (custom_attributes is not None and not all(value is None or isinstance(value, (float, bool) + integer_types + string_types) for value in custom_attributes.values()))",
          "docstring": "",
          "signature": "def validate_attribute_bag_values(custom_attributes):",
          "type": "Method",
          "class_signature": "class ApiClient(object):"
        }
      }
    },
    "mparticle/models/commerce_event.py:CommerceEvent:to_dict": {
      "mparticle/models/commerce_event.py": {
        "CommerceEvent.timestamp_unixtime_ms": {
          "code": "    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms",
          "docstring": "Sets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n:param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CommerceEvent.\n:type: int",
          "signature": "def timestamp_unixtime_ms(self, timestamp_unixtime_ms):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.event_id": {
          "code": "    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this CommerceEvent.\n\n\n        :param event_id: The event_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id",
          "docstring": "Sets the event_id of this CommerceEvent.\n\n\n:param event_id: The event_id of this CommerceEvent.\n:type: int",
          "signature": "def event_id(self, event_id):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.source_message_id": {
          "code": "    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this CommerceEvent.\n\n\n        :param source_message_id: The source_message_id of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id",
          "docstring": "Sets the source_message_id of this CommerceEvent.\n\n\n:param source_message_id: The source_message_id of this CommerceEvent.\n:type: str",
          "signature": "def source_message_id(self, source_message_id):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.session_id": {
          "code": "    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this CommerceEvent.\n\n\n        :param session_id: The session_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id",
          "docstring": "Sets the session_id of this CommerceEvent.\n\n\n:param session_id: The session_id of this CommerceEvent.\n:type: int",
          "signature": "def session_id(self, session_id):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.session_uuid": {
          "code": "    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this CommerceEvent.\n\n\n        :param session_uuid: The session_uuid of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid",
          "docstring": "Sets the session_uuid of this CommerceEvent.\n\n\n:param session_uuid: The session_uuid of this CommerceEvent.\n:type: str",
          "signature": "def session_uuid(self, session_uuid):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.location": {
          "code": "    def location(self, location):\n        \"\"\"\n        Sets the location of this CommerceEvent.\n\n\n        :param location: The location of this CommerceEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location",
          "docstring": "Sets the location of this CommerceEvent.\n\n\n:param location: The location of this CommerceEvent.\n:type: GeoLocation",
          "signature": "def location(self, location):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.device_current_state": {
          "code": "    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this CommerceEvent.\n\n\n        :param device_current_state: The device_current_state of this CommerceEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state",
          "docstring": "Sets the device_current_state of this CommerceEvent.\n\n\n:param device_current_state: The device_current_state of this CommerceEvent.\n:type: DeviceCurrentState",
          "signature": "def device_current_state(self, device_current_state):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.product_action": {
          "code": "    def product_action(self, product_action):\n        \"\"\"\n        Sets the product_action of this CommerceEvent.\n\n\n        :param product_action: The product_action of this CommerceEvent.\n        :type: ProductAction\n        \"\"\"\n        self._product_action = product_action",
          "docstring": "Sets the product_action of this CommerceEvent.\n\n\n:param product_action: The product_action of this CommerceEvent.\n:type: ProductAction",
          "signature": "def product_action(self, product_action):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.promotion_action": {
          "code": "    def promotion_action(self, promotion_action):\n        \"\"\"\n        Sets the promotion_action of this CommerceEvent.\n\n\n        :param promotion_action: The promotion_action of this CommerceEvent.\n        :type: PromotionAction\n        \"\"\"\n        self._promotion_action = promotion_action",
          "docstring": "Sets the promotion_action of this CommerceEvent.\n\n\n:param promotion_action: The promotion_action of this CommerceEvent.\n:type: PromotionAction",
          "signature": "def promotion_action(self, promotion_action):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.product_impressions": {
          "code": "    def product_impressions(self, product_impressions):\n        \"\"\"\n        Sets the product_impressions of this CommerceEvent.\n\n\n        :param product_impressions: The product_impressions of this CommerceEvent.\n        :type: list[ProductImpression]\n        \"\"\"\n        self._product_impressions = product_impressions",
          "docstring": "Sets the product_impressions of this CommerceEvent.\n\n\n:param product_impressions: The product_impressions of this CommerceEvent.\n:type: list[ProductImpression]",
          "signature": "def product_impressions(self, product_impressions):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.shopping_cart": {
          "code": "    def shopping_cart(self, shopping_cart):\n        \"\"\"\n        Sets the shopping_cart of this CommerceEvent.\n\n\n        :param shopping_cart: The shopping_cart of this CommerceEvent.\n        :type: ShoppingCart\n        \"\"\"\n        self._shopping_cart = shopping_cart",
          "docstring": "Sets the shopping_cart of this CommerceEvent.\n\n\n:param shopping_cart: The shopping_cart of this CommerceEvent.\n:type: ShoppingCart",
          "signature": "def shopping_cart(self, shopping_cart):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.currency_code": {
          "code": "    def currency_code(self, currency_code):\n        \"\"\"\n        Sets the currency_code of this CommerceEvent.\n\n\n        :param currency_code: The currency_code of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._currency_code = currency_code",
          "docstring": "Sets the currency_code of this CommerceEvent.\n\n\n:param currency_code: The currency_code of this CommerceEvent.\n:type: str",
          "signature": "def currency_code(self, currency_code):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.screen_name": {
          "code": "    def screen_name(self, screen_name):\n        \"\"\"\n        Sets the screen_name of this CommerceEvent.\n\n\n        :param screen_name: The screen_name of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._screen_name = screen_name",
          "docstring": "Sets the screen_name of this CommerceEvent.\n\n\n:param screen_name: The screen_name of this CommerceEvent.\n:type: str",
          "signature": "def screen_name(self, screen_name):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.is_non_interactive": {
          "code": "    def is_non_interactive(self, is_non_interactive):\n        \"\"\"\n        Sets the is_non_interactive of this CommerceEvent.\n\n\n        :param is_non_interactive: The is_non_interactive of this CommerceEvent.\n        :type: bool\n        \"\"\"\n        self._is_non_interactive = is_non_interactive",
          "docstring": "Sets the is_non_interactive of this CommerceEvent.\n\n\n:param is_non_interactive: The is_non_interactive of this CommerceEvent.\n:type: bool",
          "signature": "def is_non_interactive(self, is_non_interactive):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        },
        "CommerceEvent.custom_flags": {
          "code": "    def custom_flags(self, custom_flags):\n        \"\"\"\n        Sets the custom_flags of this CommerceEvent.\n\n\n        :param custom_flags: The custom_flags of this CommerceEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_flags = custom_flags",
          "docstring": "Sets the custom_flags of this CommerceEvent.\n\n\n:param custom_flags: The custom_flags of this CommerceEvent.\n:type: dict(str, str)",
          "signature": "def custom_flags(self, custom_flags):",
          "type": "Method",
          "class_signature": "class CommerceEvent(object):"
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mparticle-test_commerce_event\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 commerce_event.py\n            \u251c\u2500\u2500 CommerceEvent.__init__\n            \u251c\u2500\u2500 CommerceEvent.custom_attributes\n            \u2514\u2500\u2500 CommerceEvent.to_dict\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe mParticle CommerceEvent module is designed to facilitate interaction with the mParticle Event API by enabling the creation, customization, and validation of commerce-related events within an integrated data environment. It provides the capabilities to construct detailed commerce events, assign attributes, set custom flags, and define product actions, ensuring that event data properly adheres to the expected structure and business logic. This module solves the problem of accurately modeling and validating user commerce interactions, empowering developers to efficiently capture and transmit high-quality, structured event data for analytics, personalization, and other downstream processing. It ensures consistency and robust validation, reducing the likelihood of errors and improving integration efficiency with mParticle's event-driven systems.\n\n## FILE 1: mparticle/models/commerce_event.py\n\n- CLASS METHOD: CommerceEvent.custom_attributes\n  - CLASS SIGNATURE: class CommerceEvent(object):\n  - SIGNATURE: def custom_attributes(self, custom_attributes):\n  - DOCSTRING: \n```python\n\"\"\"\nSets the `custom_attributes` of this `CommerceEvent`, allowing the user to specify additional attributes for the event in the form of a dictionary, where both keys and values are strings.\n\n:param custom_attributes: A dictionary of custom attributes to associate with the `CommerceEvent`.\n:type: dict(str, str)\n\nRaises:\n    ValueError: If the provided `custom_attributes` fail validation via `mparticle.ApiClient.validate_attribute_bag_values`, indicating that the input may contain invalid values.\n\nThis method interacts with the `mparticle` module, specifically utilizing the `ApiClient` class to ensure the validity of the custom attribute values. Properly validated attributes can enhance the contextual data attached to commerce events, improving tracking and analytics.\n\"\"\"\n```\n\n- CLASS METHOD: CommerceEvent.__init__\n  - CLASS SIGNATURE: class CommerceEvent(object):\n  - SIGNATURE: def __init__(self, product_action=None, timestamp_unixtime_ms=None, event_id=None, source_message_id=None, session_id=None, session_uuid=None, custom_attributes=None, location=None, device_current_state=None, promotion_action=None, product_impressions=None, shopping_cart=None, currency_code=None, screen_name=None, is_non_interactive=None, custom_flags=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a CommerceEvent object that encapsulates the details of a commerce-related event, as defined in the mParticle Event API.\n\nThis constructor requires at least one of the product_action, product_impressions, or promotion_action parameters to be provided.\n\nParameters:\n- product_action (ProductAction, optional): Represents the action taken on a product, such as a purchase or addition to a cart.\n- timestamp_unixtime_ms (int, optional): The event timestamp in Unix time format (milliseconds).\n- event_id (int, optional): Unique identifier for the event.\n- source_message_id (str, optional): Identifier for the message source.\n- session_id (int, optional): Identifier for the user session.\n- session_uuid (str, optional): Unique universal identifier for the session.\n- custom_attributes (dict(str, str), optional): A dictionary containing custom attributes associated with the event.\n- location (GeoLocation, optional): The geographical location related to the event.\n- device_current_state (DeviceCurrentState, optional): A representation of the device's current state.\n- promotion_action (PromotionAction, optional): Represents promotional actions involving products.\n- product_impressions (list[ProductImpression], optional): List of products that were displayed to the user.\n- shopping_cart (ShoppingCart, optional): Represents the shopping cart associated with the event.\n- currency_code (str, optional): The currency code used in the transaction.\n- screen_name (str, optional): The name of the screen where the event occurred.\n- is_non_interactive (bool, optional): Indicates if the event is non-interactive.\n- custom_flags (dict(str, str), optional): A dictionary of custom flags associated with the event.\n\nRaises:\n- ValueError: If none of product_action, product_impressions, or promotion_action are provided, indicating that at least one is required for a valid commerce event.\n\nThis constructor depends on the mparticle module for validation of custom_attribute values.\n\"\"\"\n```\n\n- CLASS METHOD: CommerceEvent.to_dict\n  - CLASS SIGNATURE: class CommerceEvent(object):\n  - SIGNATURE: def to_dict(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the properties of the CommerceEvent instance to a dictionary format.\n\nThis method iterates through each attribute defined in the `swagger_types` dictionary, retrieves its value, and\nconstructs a dictionary representation of the instance. If an attribute is a list or a dictionary that contains\nother objects with their own `to_dict` methods, those are also converted to dictionaries. This facilitates easy\nserialization of the event for API communication or storage.\n\nReturns:\n    dict: A dictionary representation of the CommerceEvent instance, where keys are attribute names and values\n          are their corresponding values, converted to a suitable format if they are complex objects.\n\nDependencies:\n    - `iteritems`: Imported from `six`, enables iteration over dictionary items in a compatible manner for\n      Python 2 and 3.\n    - Attributes are mapped from `swagger_types`, which defines the expected data types for each property in\n      the instance.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/commerce_event.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\nimport mparticle\n\nclass CommerceEvent(object):\n\n    @property\n    def timestamp_unixtime_ms(self):\n        \"\"\"\n        Gets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n        :return: The timestamp_unixtime_ms of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._timestamp_unixtime_ms\n\n    @timestamp_unixtime_ms.setter\n    def timestamp_unixtime_ms(self, timestamp_unixtime_ms):\n        \"\"\"\n        Sets the timestamp_unixtime_ms of this CommerceEvent.\n\n\n        :param timestamp_unixtime_ms: The timestamp_unixtime_ms of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._timestamp_unixtime_ms = timestamp_unixtime_ms\n\n    @property\n    def event_id(self):\n        \"\"\"\n        Gets the event_id of this CommerceEvent.\n\n\n        :return: The event_id of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._event_id\n\n    @event_id.setter\n    def event_id(self, event_id):\n        \"\"\"\n        Sets the event_id of this CommerceEvent.\n\n\n        :param event_id: The event_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._event_id = event_id\n\n    @property\n    def source_message_id(self):\n        \"\"\"\n        Gets the source_message_id of this CommerceEvent.\n\n\n        :return: The source_message_id of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._source_message_id\n\n    @source_message_id.setter\n    def source_message_id(self, source_message_id):\n        \"\"\"\n        Sets the source_message_id of this CommerceEvent.\n\n\n        :param source_message_id: The source_message_id of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._source_message_id = source_message_id\n\n    @property\n    def session_id(self):\n        \"\"\"\n        Gets the session_id of this CommerceEvent.\n\n\n        :return: The session_id of this CommerceEvent.\n        :rtype: int\n        \"\"\"\n        return self._session_id\n\n    @session_id.setter\n    def session_id(self, session_id):\n        \"\"\"\n        Sets the session_id of this CommerceEvent.\n\n\n        :param session_id: The session_id of this CommerceEvent.\n        :type: int\n        \"\"\"\n        self._session_id = session_id\n\n    @property\n    def session_uuid(self):\n        \"\"\"\n        Gets the session_uuid of this CommerceEvent.\n\n\n        :return: The session_uuid of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._session_uuid\n\n    @session_uuid.setter\n    def session_uuid(self, session_uuid):\n        \"\"\"\n        Sets the session_uuid of this CommerceEvent.\n\n\n        :param session_uuid: The session_uuid of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._session_uuid = session_uuid\n\n    @property\n    def location(self):\n        \"\"\"\n        Gets the location of this CommerceEvent.\n\n\n        :return: The location of this CommerceEvent.\n        :rtype: GeoLocation\n        \"\"\"\n        return self._location\n\n    @location.setter\n    def location(self, location):\n        \"\"\"\n        Sets the location of this CommerceEvent.\n\n\n        :param location: The location of this CommerceEvent.\n        :type: GeoLocation\n        \"\"\"\n        self._location = location\n\n    @property\n    def device_current_state(self):\n        \"\"\"\n        Gets the device_current_state of this CommerceEvent.\n\n\n        :return: The device_current_state of this CommerceEvent.\n        :rtype: DeviceCurrentState\n        \"\"\"\n        return self._device_current_state\n\n    @device_current_state.setter\n    def device_current_state(self, device_current_state):\n        \"\"\"\n        Sets the device_current_state of this CommerceEvent.\n\n\n        :param device_current_state: The device_current_state of this CommerceEvent.\n        :type: DeviceCurrentState\n        \"\"\"\n        self._device_current_state = device_current_state\n\n    @property\n    def product_action(self):\n        \"\"\"\n        Gets the product_action of this CommerceEvent.\n\n\n        :return: The product_action of this CommerceEvent.\n        :rtype: ProductAction\n        \"\"\"\n        return self._product_action\n\n    @product_action.setter\n    def product_action(self, product_action):\n        \"\"\"\n        Sets the product_action of this CommerceEvent.\n\n\n        :param product_action: The product_action of this CommerceEvent.\n        :type: ProductAction\n        \"\"\"\n        self._product_action = product_action\n\n    @property\n    def promotion_action(self):\n        \"\"\"\n        Gets the promotion_action of this CommerceEvent.\n\n\n        :return: The promotion_action of this CommerceEvent.\n        :rtype: PromotionAction\n        \"\"\"\n        return self._promotion_action\n\n    @promotion_action.setter\n    def promotion_action(self, promotion_action):\n        \"\"\"\n        Sets the promotion_action of this CommerceEvent.\n\n\n        :param promotion_action: The promotion_action of this CommerceEvent.\n        :type: PromotionAction\n        \"\"\"\n        self._promotion_action = promotion_action\n\n    @property\n    def product_impressions(self):\n        \"\"\"\n        Gets the product_impressions of this CommerceEvent.\n\n\n        :return: The product_impressions of this CommerceEvent.\n        :rtype: list[ProductImpression]\n        \"\"\"\n        return self._product_impressions\n\n    @product_impressions.setter\n    def product_impressions(self, product_impressions):\n        \"\"\"\n        Sets the product_impressions of this CommerceEvent.\n\n\n        :param product_impressions: The product_impressions of this CommerceEvent.\n        :type: list[ProductImpression]\n        \"\"\"\n        self._product_impressions = product_impressions\n\n    @property\n    def shopping_cart(self):\n        \"\"\"\n        Gets the shopping_cart of this CommerceEvent.\n\n\n        :return: The shopping_cart of this CommerceEvent.\n        :rtype: ShoppingCart\n        \"\"\"\n        return self._shopping_cart\n\n    @shopping_cart.setter\n    def shopping_cart(self, shopping_cart):\n        \"\"\"\n        Sets the shopping_cart of this CommerceEvent.\n\n\n        :param shopping_cart: The shopping_cart of this CommerceEvent.\n        :type: ShoppingCart\n        \"\"\"\n        self._shopping_cart = shopping_cart\n\n    @property\n    def currency_code(self):\n        \"\"\"\n        Gets the currency_code of this CommerceEvent.\n\n\n        :return: The currency_code of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._currency_code\n\n    @currency_code.setter\n    def currency_code(self, currency_code):\n        \"\"\"\n        Sets the currency_code of this CommerceEvent.\n\n\n        :param currency_code: The currency_code of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._currency_code = currency_code\n\n    @property\n    def screen_name(self):\n        \"\"\"\n        Gets the screen_name of this CommerceEvent.\n\n\n        :return: The screen_name of this CommerceEvent.\n        :rtype: str\n        \"\"\"\n        return self._screen_name\n\n    @screen_name.setter\n    def screen_name(self, screen_name):\n        \"\"\"\n        Sets the screen_name of this CommerceEvent.\n\n\n        :param screen_name: The screen_name of this CommerceEvent.\n        :type: str\n        \"\"\"\n        self._screen_name = screen_name\n\n    @property\n    def is_non_interactive(self):\n        \"\"\"\n        Gets the is_non_interactive of this CommerceEvent.\n\n\n        :return: The is_non_interactive of this CommerceEvent.\n        :rtype: bool\n        \"\"\"\n        return self._is_non_interactive\n\n    @is_non_interactive.setter\n    def is_non_interactive(self, is_non_interactive):\n        \"\"\"\n        Sets the is_non_interactive of this CommerceEvent.\n\n\n        :param is_non_interactive: The is_non_interactive of this CommerceEvent.\n        :type: bool\n        \"\"\"\n        self._is_non_interactive = is_non_interactive\n\n    @property\n    def custom_flags(self):\n        \"\"\"\n        Gets the custom_flags of this CommerceEvent.\n\n\n        :return: The custom_flags of this CommerceEvent.\n        :rtype: dict(str, str)\n        \"\"\"\n        return self._custom_flags\n\n    @custom_flags.setter\n    def custom_flags(self, custom_flags):\n        \"\"\"\n        Sets the custom_flags of this CommerceEvent.\n\n\n        :param custom_flags: The custom_flags of this CommerceEvent.\n        :type: dict(str, str)\n        \"\"\"\n        self._custom_flags = custom_flags\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_commerce_event.py:TestCommerceEvent:testCommerceEvent": {
      "mparticle/models/commerce_event.py:CommerceEvent:__init__": {
        "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {
          "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
        }
      }
    },
    "test/test_commerce_event.py:TestCommerceEvent:testCommerceEventAttributeValues": {
      "mparticle/models/commerce_event.py:CommerceEvent:__init__": {
        "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {
          "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
        }
      },
      "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {
        "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
      }
    },
    "test/test_commerce_event.py:TestCommerceEvent:testCommerceEventCustomAttributes": {
      "mparticle/models/commerce_event.py:CommerceEvent:__init__": {
        "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {
          "mparticle/api_client.py:ApiClient:validate_attribute_bag_values": {}
        }
      },
      "mparticle/models/commerce_event.py:CommerceEvent:to_dict": {
        "mparticle/models/commerce_event.py:CommerceEvent:timestamp_unixtime_ms": {},
        "mparticle/models/commerce_event.py:CommerceEvent:event_id": {},
        "mparticle/models/commerce_event.py:CommerceEvent:source_message_id": {},
        "mparticle/models/commerce_event.py:CommerceEvent:session_id": {},
        "mparticle/models/commerce_event.py:CommerceEvent:session_uuid": {},
        "mparticle/models/commerce_event.py:CommerceEvent:custom_attributes": {},
        "mparticle/models/commerce_event.py:CommerceEvent:location": {},
        "mparticle/models/commerce_event.py:CommerceEvent:device_current_state": {},
        "mparticle/models/commerce_event.py:CommerceEvent:product_action": {},
        "mparticle/models/commerce_event.py:CommerceEvent:promotion_action": {},
        "mparticle/models/commerce_event.py:CommerceEvent:product_impressions": {},
        "mparticle/models/commerce_event.py:CommerceEvent:shopping_cart": {},
        "mparticle/models/commerce_event.py:CommerceEvent:currency_code": {},
        "mparticle/models/commerce_event.py:CommerceEvent:screen_name": {},
        "mparticle/models/commerce_event.py:CommerceEvent:is_non_interactive": {},
        "mparticle/models/commerce_event.py:CommerceEvent:custom_flags": {}
      }
    }
  }
}