{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_version",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/utils/test_version.py",
  "test_code": "from packaging.version import Version\n\nfrom mypy_boto3_builder.utils.version import (\n    bump_postrelease,\n    get_builder_version,\n    get_max_build_version,\n    get_min_build_version,\n    get_release_version,\n)\n\n\nclass TestStrings:\n    def test_get_builder_version(self) -> None:\n        assert Version(get_builder_version())\n\n    def test_get_min_build_version(self) -> None:\n        assert get_min_build_version(\"1.22.36\") == \"1.22.0\"\n        assert get_min_build_version(\"1.22.48.post13\") == \"1.22.0\"\n        assert get_min_build_version(\"1.13.3\") == \"1.13.0\"\n        assert get_min_build_version(\"1.13.2.post56\") == \"1.13.0\"\n\n    def test_get_max_build_version(self) -> None:\n        assert get_max_build_version(\"1.22.36\") == \"1.23.0\"\n        assert get_max_build_version(\"1.22.48.post13\") == \"1.23.0\"\n        assert get_max_build_version(\"1.13.3\") == \"1.14.0\"\n        assert get_max_build_version(\"1.13.2.post56\") == \"1.14.0\"\n\n    def test_bump_postrelease(self) -> None:\n        assert bump_postrelease(\"1.22.36\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post0\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post5\") == \"1.22.36.post6\"\n\n    def test_get_release_version(self) -> None:\n        assert get_release_version(\"1.22.36\") == \"1.22.36\"\n        assert get_release_version(\"1.22.36.post13\") == \"1.22.36\"\n        assert get_release_version(\"1.13.2.post56+dev123\") == \"1.13.2\"\n",
  "GT_file_code": {
    "mypy_boto3_builder/utils/version.py": "\"\"\"\nVersion-related utils.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nimport contextlib\nimport importlib.metadata\nfrom collections.abc import Iterable\n\nfrom packaging.version import Version\n\nfrom mypy_boto3_builder.constants import PACKAGE_NAME\n\n\ndef get_builder_version() -> str:\n    \"\"\"\n    Get program version.\n    \"\"\"\n    with contextlib.suppress(importlib.metadata.PackageNotFoundError):\n        return importlib.metadata.version(PACKAGE_NAME)\n\n    return \"0.0.0\"\n\n\ndef get_min_build_version(version: str) -> str:\n    \"\"\"\n    Get min version build version by setting micro to 0.\n    \"\"\"\n    major, minor, _ = Version(version).release\n    return f\"{major}.{minor}.0\"\n\n\ndef get_release_version(version: str) -> str:\n    \"\"\"\n    Get release version by removing post.\n    \"\"\"\n    return Version(version).base_version\n\n\ndef get_max_build_version(version: str) -> str:\n    \"\"\"\n    Get min version build version by bumping minor.\n    \"\"\"\n    major, minor, _ = Version(version).release\n    return f\"{major}.{minor + 1}.0\"\n\n\ndef bump_postrelease(version: str) -> str:\n    \"\"\"\n    Bump postrelease version.\n    \"\"\"\n    v = Version(version)\n    major, minor, patch = v.release\n    post = (v.post + 1) if v.post else 1\n    return f\"{major}.{minor}.{patch}.post{post}\"\n\n\ndef sort_versions(version_list: Iterable[str]) -> list[str]:\n    \"\"\"\n    Sort version list.\n    \"\"\"\n    return sorted(version_list, key=Version)\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/utils/version.py": {
      "get_builder_version": {
        "code": "def get_builder_version() -> str:\n    \"\"\"Retrieve the program version of the specified package.\n\nThis function attempts to obtain the version of the package defined by the constant PACKAGE_NAME using the \nimportlib.metadata API. If the package is not found, it gracefully handles the exception and returns a default version \nof \"0.0.0\".\n\nReturns:\n    str: The version string of the package, or \"0.0.0\" if the package cannot be found.\n\nDependencies:\n- importlib.metadata: Used to access package version information.\n- contextlib: Used to suppress PackageNotFoundError exceptions.\n- PACKAGE_NAME: A constant defined in mypy_boto3_builder.constants, representing the name of the package \n  whose version is being retrieved.\"\"\"\n    '\\n    Get program version.\\n    '\n    with contextlib.suppress(importlib.metadata.PackageNotFoundError):\n        return importlib.metadata.version(PACKAGE_NAME)\n    return '0.0.0'",
        "docstring": "Retrieve the program version of the specified package.\n\nThis function attempts to obtain the version of the package defined by the constant PACKAGE_NAME using the \nimportlib.metadata API. If the package is not found, it gracefully handles the exception and returns a default version \nof \"0.0.0\".\n\nReturns:\n    str: The version string of the package, or \"0.0.0\" if the package cannot be found.\n\nDependencies:\n- importlib.metadata: Used to access package version information.\n- contextlib: Used to suppress PackageNotFoundError exceptions.\n- PACKAGE_NAME: A constant defined in mypy_boto3_builder.constants, representing the name of the package \n  whose version is being retrieved.",
        "signature": "def get_builder_version() -> str:",
        "type": "Function",
        "class_signature": null
      },
      "get_min_build_version": {
        "code": "def get_min_build_version(version: str) -> str:\n    \"\"\"Get the minimum build version by resetting the micro (patch) component of the provided version string to 0. \n\nParameters:\n- version (str): A version string in a format compatible with the `packaging.version` module, such as \"1.2.3\".\n\nReturns:\n- str: A new version string with the format \"major.minor.0\", where 'major' and 'minor' are taken from the input version.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module to parse and handle version strings correctly.\"\"\"\n    '\\n    Get min version build version by setting micro to 0.\\n    '\n    major, minor, _ = Version(version).release\n    return f'{major}.{minor}.0'",
        "docstring": "Get the minimum build version by resetting the micro (patch) component of the provided version string to 0. \n\nParameters:\n- version (str): A version string in a format compatible with the `packaging.version` module, such as \"1.2.3\".\n\nReturns:\n- str: A new version string with the format \"major.minor.0\", where 'major' and 'minor' are taken from the input version.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module to parse and handle version strings correctly.",
        "signature": "def get_min_build_version(version: str) -> str:",
        "type": "Function",
        "class_signature": null
      },
      "get_release_version": {
        "code": "def get_release_version(version: str) -> str:\n    \"\"\"Get the release version of a specified version string by removing any post-release identifier.\n\nParameters:\n- version (str): A version string in a format compliant with the `packaging.version` library.\n\nReturns:\n- str: The base version string without any post-release information.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module, which is used to parse the input version string and access its components. The `base_version` attribute of the `Version` instance provides the version without post-release tags.\"\"\"\n    '\\n    Get release version by removing post.\\n    '\n    return Version(version).base_version",
        "docstring": "Get the release version of a specified version string by removing any post-release identifier.\n\nParameters:\n- version (str): A version string in a format compliant with the `packaging.version` library.\n\nReturns:\n- str: The base version string without any post-release information.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module, which is used to parse the input version string and access its components. The `base_version` attribute of the `Version` instance provides the version without post-release tags.",
        "signature": "def get_release_version(version: str) -> str:",
        "type": "Function",
        "class_signature": null
      },
      "get_max_build_version": {
        "code": "def get_max_build_version(version: str) -> str:\n    \"\"\"Get the maximum build version by bumping the minor version of the given version string.\n\nParameters:\n- version (str): A string representing the current version in semantic versioning format (e.g., \"1.2.3\").\n\nReturns:\n- str: A string representing the maximum build version, with the minor version incremented by one and the patch version set to zero (e.g., \"1.3.0\").\n\nThis function uses the `Version` class from the `packaging.version` module to parse the input version string. It extracts the major and minor components from the version and modifies the minor component for the returned maximum build version.\"\"\"\n    '\\n    Get min version build version by bumping minor.\\n    '\n    major, minor, _ = Version(version).release\n    return f'{major}.{minor + 1}.0'",
        "docstring": "Get the maximum build version by bumping the minor version of the given version string.\n\nParameters:\n- version (str): A string representing the current version in semantic versioning format (e.g., \"1.2.3\").\n\nReturns:\n- str: A string representing the maximum build version, with the minor version incremented by one and the patch version set to zero (e.g., \"1.3.0\").\n\nThis function uses the `Version` class from the `packaging.version` module to parse the input version string. It extracts the major and minor components from the version and modifies the minor component for the returned maximum build version.",
        "signature": "def get_max_build_version(version: str) -> str:",
        "type": "Function",
        "class_signature": null
      },
      "bump_postrelease": {
        "code": "def bump_postrelease(version: str) -> str:\n    \"\"\"Bump the postrelease version of a given version string.\n\nParameters:\n- version (str): A string representation of a version (e.g., \"1.2.3.post1\"). It is expected to be formatted according to PEP 440.\n\nReturns:\n- str: A new version string with the postrelease component incremented by 1. \n  If the initial version does not have a postrelease component, it will be added and set to 1 (e.g., \"1.2.3\" becomes \"1.2.3.post1\").\n\nThis function relies on the `Version` class from the `packaging.version` module to parse and handle version components.\"\"\"\n    '\\n    Bump postrelease version.\\n    '\n    v = Version(version)\n    major, minor, patch = v.release\n    post = v.post + 1 if v.post else 1\n    return f'{major}.{minor}.{patch}.post{post}'",
        "docstring": "Bump the postrelease version of a given version string.\n\nParameters:\n- version (str): A string representation of a version (e.g., \"1.2.3.post1\"). It is expected to be formatted according to PEP 440.\n\nReturns:\n- str: A new version string with the postrelease component incremented by 1. \n  If the initial version does not have a postrelease component, it will be added and set to 1 (e.g., \"1.2.3\" becomes \"1.2.3.post1\").\n\nThis function relies on the `Version` class from the `packaging.version` module to parse and handle version components.",
        "signature": "def bump_postrelease(version: str) -> str:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_version\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 utils/\n        \u2514\u2500\u2500 version.py\n            \u251c\u2500\u2500 bump_postrelease\n            \u251c\u2500\u2500 get_builder_version\n            \u251c\u2500\u2500 get_max_build_version\n            \u251c\u2500\u2500 get_min_build_version\n            \u2514\u2500\u2500 get_release_version\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to facilitate semantic version handling and management within a software project, with a focus on parsing, manipulating, and incrementing version strings based on established conventions. It provides functionalities to retrieve normalized release versions, determine minimum and maximum build versions within a specific series, and increment post-release versions systematically. This module addresses the need for consistent versioning, ensuring compatibility across builds and simplifying version tracking for developers working on iterative software updates. By automating the processing of complex version strings, it reduces errors and improves workflow efficiency in version-controlled environments.\n\n## FILE 1: mypy_boto3_builder/utils/version.py\n\n- FUNCTION NAME: get_min_build_version\n  - SIGNATURE: def get_min_build_version(version: str) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the minimum build version by resetting the micro (patch) component of the provided version string to 0. \n\nParameters:\n- version (str): A version string in a format compatible with the `packaging.version` module, such as \"1.2.3\".\n\nReturns:\n- str: A new version string with the format \"major.minor.0\", where 'major' and 'minor' are taken from the input version.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module to parse and handle version strings correctly.\n\"\"\"\n```\n\n- FUNCTION NAME: get_release_version\n  - SIGNATURE: def get_release_version(version: str) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the release version of a specified version string by removing any post-release identifier.\n\nParameters:\n- version (str): A version string in a format compliant with the `packaging.version` library.\n\nReturns:\n- str: The base version string without any post-release information.\n\nDependencies:\n- This function relies on the `Version` class from the `packaging.version` module, which is used to parse the input version string and access its components. The `base_version` attribute of the `Version` instance provides the version without post-release tags.\n\"\"\"\n```\n\n- FUNCTION NAME: get_builder_version\n  - SIGNATURE: def get_builder_version() -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the program version of the specified package.\n\nThis function attempts to obtain the version of the package defined by the constant PACKAGE_NAME using the \nimportlib.metadata API. If the package is not found, it gracefully handles the exception and returns a default version \nof \"0.0.0\".\n\nReturns:\n    str: The version string of the package, or \"0.0.0\" if the package cannot be found.\n\nDependencies:\n- importlib.metadata: Used to access package version information.\n- contextlib: Used to suppress PackageNotFoundError exceptions.\n- PACKAGE_NAME: A constant defined in mypy_boto3_builder.constants, representing the name of the package \n  whose version is being retrieved.\n\"\"\"\n```\n\n- FUNCTION NAME: bump_postrelease\n  - SIGNATURE: def bump_postrelease(version: str) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nBump the postrelease version of a given version string.\n\nParameters:\n- version (str): A string representation of a version (e.g., \"1.2.3.post1\"). It is expected to be formatted according to PEP 440.\n\nReturns:\n- str: A new version string with the postrelease component incremented by 1. \n  If the initial version does not have a postrelease component, it will be added and set to 1 (e.g., \"1.2.3\" becomes \"1.2.3.post1\").\n\nThis function relies on the `Version` class from the `packaging.version` module to parse and handle version components.\n\"\"\"\n```\n\n- FUNCTION NAME: get_max_build_version\n  - SIGNATURE: def get_max_build_version(version: str) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the maximum build version by bumping the minor version of the given version string.\n\nParameters:\n- version (str): A string representing the current version in semantic versioning format (e.g., \"1.2.3\").\n\nReturns:\n- str: A string representing the maximum build version, with the minor version incremented by one and the patch version set to zero (e.g., \"1.3.0\").\n\nThis function uses the `Version` class from the `packaging.version` module to parse the input version string. It extracts the major and minor components from the version and modifies the minor component for the returned maximum build version.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/utils/version.py": "\"\"\"\nVersion-related utils.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nimport contextlib\nimport importlib.metadata\nfrom collections.abc import Iterable\nfrom packaging.version import Version\nfrom mypy_boto3_builder.constants import PACKAGE_NAME\n\ndef sort_versions(version_list: Iterable[str]) -> list[str]:\n    \"\"\"\n    Sort version list.\n    \"\"\"\n    return sorted(version_list, key=Version)"
  },
  "call_tree": {
    "tests/utils/test_version.py:TestStrings:test_get_builder_version": {
      "mypy_boto3_builder/utils/version.py:get_builder_version": {}
    },
    "tests/utils/test_version.py:TestStrings:test_get_min_build_version": {
      "mypy_boto3_builder/utils/version.py:get_min_build_version": {}
    },
    "tests/utils/test_version.py:TestStrings:test_get_max_build_version": {
      "mypy_boto3_builder/utils/version.py:get_max_build_version": {}
    },
    "tests/utils/test_version.py:TestStrings:test_bump_postrelease": {
      "mypy_boto3_builder/utils/version.py:bump_postrelease": {}
    },
    "tests/utils/test_version.py:TestStrings:test_get_release_version": {
      "mypy_boto3_builder/utils/version.py:get_release_version": {}
    }
  }
}