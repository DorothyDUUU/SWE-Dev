{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_cli_parser",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/test_cli_parser.py",
  "test_code": "from collections.abc import Iterator\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\n\nfrom mypy_boto3_builder.cli_parser import get_absolute_path, parse_args\n\n\nclass TestCLIParser:\n    @pytest.fixture(autouse=True)\n    def _patch_argparse(self) -> Iterator[None]:\n        with patch(\"mypy_boto3_builder.cli_parser.argparse\"):\n            yield\n\n    def test_parse_args(self) -> None:\n        result = parse_args([])\n        assert result\n\n    @patch(\"mypy_boto3_builder.cli_parser.Path\")\n    def test_get_absolute_path(self, PathMock: MagicMock) -> None:\n        result = get_absolute_path(\"test/output\")\n        PathMock.assert_called_with(\"test/output\")\n        assert result == PathMock().absolute()\n",
  "GT_file_code": {
    "mypy_boto3_builder/cli_parser.py": "\"\"\"\nCLI parser.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nimport argparse\nimport enum\nimport logging\nfrom collections.abc import Sequence\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Any\n\nfrom mypy_boto3_builder.constants import PROG_NAME\nfrom mypy_boto3_builder.enums.product import Product\nfrom mypy_boto3_builder.service_name import ServiceName\nfrom mypy_boto3_builder.utils.version import get_builder_version\n\n\ndef get_absolute_path(path: str) -> Path:\n    \"\"\"\n    Get absolute path from a string.\n\n    Arguments:\n        path -- String containing path.\n\n    Returns:\n        Absolute path.\n    \"\"\"\n    return Path(path).absolute()\n\n\nclass EnumListAction(argparse.Action):\n    \"\"\"\n    Argparse action for handling Enums.\n    \"\"\"\n\n    def __init__(\n        self,\n        type: type[enum.Enum],  # noqa: A002\n        option_strings: Sequence[str],\n        dest: str,\n        default: Sequence[enum.Enum] | None = None,\n        *,\n        required: bool = False,\n        **kwargs: str | None,\n    ) -> None:\n        self._enum_class = type\n\n        super().__init__(\n            choices=tuple(e.value for e in self._enum_class),\n            option_strings=option_strings,\n            default=default,\n            dest=dest,\n            type=None,\n            required=required,\n            **kwargs,\n        )\n\n    def __call__(\n        self,\n        parser: argparse.ArgumentParser,\n        namespace: argparse.Namespace,\n        value: str | Sequence[Any] | None,\n        _option_string: str | None = None,\n    ) -> None:\n        \"\"\"\n        Convert value back into an Enum.\n        \"\"\"\n        value_list: list[str] = []\n        if isinstance(value, str):\n            value_list.append(value)\n        if isinstance(value, list):\n            value_list.extend([i for i in value if isinstance(i, str)])\n        enum_values = [self._enum_class(i) for i in value_list]\n        setattr(namespace, self.dest, enum_values)\n\n\n@dataclass(kw_only=True, slots=True)\nclass CLINamespace:\n    \"\"\"\n    CLI arguments namespace.\n    \"\"\"\n\n    log_level: int\n    output_path: Path\n    service_names: list[str]\n    build_version: str\n    installed: bool\n    products: list[Product]\n    list_services: bool\n    partial_overload: bool\n    skip_published: bool\n    disable_smart_version: bool\n    download_static_stubs: bool\n\n\ndef parse_args(args: Sequence[str]) -> CLINamespace:\n    \"\"\"\n    Parse CLI arguments.\n\n    Returns:\n        Argument parser.\n    \"\"\"\n    version = get_builder_version()\n\n    parser = argparse.ArgumentParser(\n        PROG_NAME,\n        description=\"Builder for boto3-stubs and types-aiobotocore.\",\n    )\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\", help=\"Show debug messages\")\n    parser.add_argument(\n        \"-b\",\n        \"--build-version\",\n        help=\"Set custom output version, otherwise smart versioning is used.\",\n    )\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=version)\n    parser.add_argument(\n        \"--product\",\n        dest=\"products\",\n        type=Product,\n        action=EnumListAction,\n        metavar=\"PRODUCT\",\n        nargs=\"+\",\n        default=(Product.boto3, Product.boto3_services),\n        help=\"Package to generate (default: boto3 boto3-stubs)\",\n    )\n    parser.add_argument(\n        \"--skip-published\",\n        action=\"store_true\",\n        help=\"Skip packages that are already on PyPI\",\n    )\n    parser.add_argument(\n        \"--no-smart-version\",\n        action=\"store_true\",\n        help=(\n            \"Disable version bump based od last PyPI version. \"\n            \"Set this flag to run packages build in offline mode. \"\n            \"skip-published flag is ignored in this case.\"\n        ),\n    )\n    parser.add_argument(\n        \"--download-static-stubs\",\n        action=\"store_true\",\n        help=\"Download static stubs from GitHub repositories instead of using built-in files.\",\n    )\n    parser.add_argument(\n        \"--panic\",\n        action=\"store_true\",\n        help=\"Raise exception on logger warning and above\",\n    )\n    parser.add_argument(\n        \"output_path\",\n        metavar=\"OUTPUT_PATH\",\n        help=\"Output path\",\n        type=get_absolute_path,\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--services\",\n        dest=\"service_names\",\n        nargs=\"*\",\n        metavar=\"NAME\",\n        help=(\n            \"List of AWS services, by default all services are used.\"\n            \" Use `updated` to build only services updated in the release.\"\n            \" Use `essential` to build only essential services.\"\n            \" Use `all` to build all services. (default: all)\"\n        ),\n        default=(ServiceName.ALL,),\n    )\n    parser.add_argument(\n        \"--partial-overload\",\n        action=\"store_true\",\n        help=\"Build boto3-stubs client/service overload only for selected services\",\n    )\n    parser.add_argument(\n        \"--installed\",\n        action=\"store_true\",\n        help=\"Generate already installed packages for typings directory.\",\n    )\n    parser.add_argument(\n        \"--list-services\",\n        action=\"store_true\",\n        help=\"List supported boto3 service names.\",\n    )\n    result = parser.parse_args(args)\n\n    return CLINamespace(\n        log_level=logging.DEBUG if result.debug else logging.INFO,\n        output_path=result.output_path,\n        service_names=result.service_names,\n        products=result.products,\n        build_version=result.build_version,\n        installed=result.installed,\n        list_services=result.list_services,\n        partial_overload=result.partial_overload,\n        skip_published=result.skip_published,\n        disable_smart_version=result.no_smart_version,\n        download_static_stubs=result.download_static_stubs,\n    )\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/cli_parser.py": {
      "get_absolute_path": {
        "code": "def get_absolute_path(path: str) -> Path:\n    \"\"\"Get the absolute path from a specified string representation of a path.\n\nParameters:\n    path (str): A string containing the path to be converted.\n\nReturns:\n    Path: An absolute Path object representing the specified path.\n\nThis function utilizes the `Path` class from the `pathlib` module to convert the given string path into an absolute path. It is used in the `parse_args` function to ensure that the output path provided by the user is valid and absolute.\"\"\"\n    '\\n    Get absolute path from a string.\\n\\n    Arguments:\\n        path -- String containing path.\\n\\n    Returns:\\n        Absolute path.\\n    '\n    return Path(path).absolute()",
        "docstring": "Get the absolute path from a specified string representation of a path.\n\nParameters:\n    path (str): A string containing the path to be converted.\n\nReturns:\n    Path: An absolute Path object representing the specified path.\n\nThis function utilizes the `Path` class from the `pathlib` module to convert the given string path into an absolute path. It is used in the `parse_args` function to ensure that the output path provided by the user is valid and absolute.",
        "signature": "def get_absolute_path(path: str) -> Path:",
        "type": "Function",
        "class_signature": null
      },
      "parse_args": {
        "code": "def parse_args(args: Sequence[str]) -> CLINamespace:\n    \"\"\"Parse command-line interface (CLI) arguments for the boto3-stubs and types-aiobotocore builder tool.\n\nParameters:\n    args (Sequence[str]): A sequence of command-line arguments to parse.\n\nReturns:\n    CLINamespace: An instance of CLINamespace populated with parsed command-line arguments, including log level, output path, service names, and product selections.\n\nThe function utilizes argparse for parsing and incorporates several flags and options, such as:\n- `--debug`: Enables debug logging if provided.\n- `--build-version`: Allows setting a custom build version.\n- `--product`: Uses the EnumListAction to handle the selection of products from the Product Enum, with a default to `boto3` and `boto3_services`.\n- `--services`: Accepts a variable number of AWS service names, defaulting to all services as defined by `ServiceName.ALL`.\n- Additional flags like `--skip-published`, `--no-smart-version`, and `--download-static-stubs` to modify behavior during the build process.\n\nDependencies:\n- `PROG_NAME` is used as the program name in the ArgumentParser.\n- `get_builder_version()` is called to fetch the current version, which is displayed using the `-V` flag.\n- The `CLINamespace` data class is used to store the parsed output in a structured format for later use.\"\"\"\n    '\\n    Parse CLI arguments.\\n\\n    Returns:\\n        Argument parser.\\n    '\n    version = get_builder_version()\n    parser = argparse.ArgumentParser(PROG_NAME, description='Builder for boto3-stubs and types-aiobotocore.')\n    parser.add_argument('-d', '--debug', action='store_true', help='Show debug messages')\n    parser.add_argument('-b', '--build-version', help='Set custom output version, otherwise smart versioning is used.')\n    parser.add_argument('-V', '--version', action='version', version=version)\n    parser.add_argument('--product', dest='products', type=Product, action=EnumListAction, metavar='PRODUCT', nargs='+', default=(Product.boto3, Product.boto3_services), help='Package to generate (default: boto3 boto3-stubs)')\n    parser.add_argument('--skip-published', action='store_true', help='Skip packages that are already on PyPI')\n    parser.add_argument('--no-smart-version', action='store_true', help='Disable version bump based od last PyPI version. Set this flag to run packages build in offline mode. skip-published flag is ignored in this case.')\n    parser.add_argument('--download-static-stubs', action='store_true', help='Download static stubs from GitHub repositories instead of using built-in files.')\n    parser.add_argument('--panic', action='store_true', help='Raise exception on logger warning and above')\n    parser.add_argument('output_path', metavar='OUTPUT_PATH', help='Output path', type=get_absolute_path)\n    parser.add_argument('-s', '--services', dest='service_names', nargs='*', metavar='NAME', help='List of AWS services, by default all services are used. Use `updated` to build only services updated in the release. Use `essential` to build only essential services. Use `all` to build all services. (default: all)', default=(ServiceName.ALL,))\n    parser.add_argument('--partial-overload', action='store_true', help='Build boto3-stubs client/service overload only for selected services')\n    parser.add_argument('--installed', action='store_true', help='Generate already installed packages for typings directory.')\n    parser.add_argument('--list-services', action='store_true', help='List supported boto3 service names.')\n    result = parser.parse_args(args)\n    return CLINamespace(log_level=logging.DEBUG if result.debug else logging.INFO, output_path=result.output_path, service_names=result.service_names, products=result.products, build_version=result.build_version, installed=result.installed, list_services=result.list_services, partial_overload=result.partial_overload, skip_published=result.skip_published, disable_smart_version=result.no_smart_version, download_static_stubs=result.download_static_stubs)",
        "docstring": "Parse command-line interface (CLI) arguments for the boto3-stubs and types-aiobotocore builder tool.\n\nParameters:\n    args (Sequence[str]): A sequence of command-line arguments to parse.\n\nReturns:\n    CLINamespace: An instance of CLINamespace populated with parsed command-line arguments, including log level, output path, service names, and product selections.\n\nThe function utilizes argparse for parsing and incorporates several flags and options, such as:\n- `--debug`: Enables debug logging if provided.\n- `--build-version`: Allows setting a custom build version.\n- `--product`: Uses the EnumListAction to handle the selection of products from the Product Enum, with a default to `boto3` and `boto3_services`.\n- `--services`: Accepts a variable number of AWS service names, defaulting to all services as defined by `ServiceName.ALL`.\n- Additional flags like `--skip-published`, `--no-smart-version`, and `--download-static-stubs` to modify behavior during the build process.\n\nDependencies:\n- `PROG_NAME` is used as the program name in the ArgumentParser.\n- `get_builder_version()` is called to fetch the current version, which is displayed using the `-V` flag.\n- The `CLINamespace` data class is used to store the parsed output in a structured format for later use.",
        "signature": "def parse_args(args: Sequence[str]) -> CLINamespace:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {
    "mypy_boto3_builder/cli_parser.py:parse_args": {
      "mypy_boto3_builder/utils/version.py": {
        "get_builder_version": {
          "code": "def get_builder_version() -> str:\n    \"\"\"\n    Get program version.\n    \"\"\"\n    with contextlib.suppress(importlib.metadata.PackageNotFoundError):\n        return importlib.metadata.version(PACKAGE_NAME)\n\n    return \"0.0.0\"",
          "docstring": "Get program version.",
          "signature": "def get_builder_version() -> str:",
          "type": "Function",
          "class_signature": null
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_cli_parser\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 cli_parser.py\n        \u251c\u2500\u2500 get_absolute_path\n        \u2514\u2500\u2500 parse_args\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe CLI Parser Testing module validates the functionality and robustness of the CLI parsing and path resolution components within the `mypy_boto3_builder` framework. It ensures that command-line arguments are parsed correctly and that file paths are accurately resolved to their absolute forms. By providing automated tests for these core operations, the module helps detect and prevent potential issues in parsing logic or path manipulation, thereby improving the reliability and usability of developer-facing CLI tools. This module facilitates streamlined development workflows by guaranteeing that essential CLI functionalities behave as expected under varying input conditions.\n\n## FILE 1: mypy_boto3_builder/cli_parser.py\n\n- FUNCTION NAME: parse_args\n  - SIGNATURE: def parse_args(args: Sequence[str]) -> CLINamespace:\n  - DOCSTRING: \n```python\n\"\"\"\nParse command-line interface (CLI) arguments for the boto3-stubs and types-aiobotocore builder tool.\n\nParameters:\n    args (Sequence[str]): A sequence of command-line arguments to parse.\n\nReturns:\n    CLINamespace: An instance of CLINamespace populated with parsed command-line arguments, including log level, output path, service names, and product selections.\n\nThe function utilizes argparse for parsing and incorporates several flags and options, such as:\n- `--debug`: Enables debug logging if provided.\n- `--build-version`: Allows setting a custom build version.\n- `--product`: Uses the EnumListAction to handle the selection of products from the Product Enum, with a default to `boto3` and `boto3_services`.\n- `--services`: Accepts a variable number of AWS service names, defaulting to all services as defined by `ServiceName.ALL`.\n- Additional flags like `--skip-published`, `--no-smart-version`, and `--download-static-stubs` to modify behavior during the build process.\n\nDependencies:\n- `PROG_NAME` is used as the program name in the ArgumentParser.\n- `get_builder_version()` is called to fetch the current version, which is displayed using the `-V` flag.\n- The `CLINamespace` data class is used to store the parsed output in a structured format for later use.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - mypy_boto3_builder/utils/version.py:get_builder_version\n\n- FUNCTION NAME: get_absolute_path\n  - SIGNATURE: def get_absolute_path(path: str) -> Path:\n  - DOCSTRING: \n```python\n\"\"\"\nGet the absolute path from a specified string representation of a path.\n\nParameters:\n    path (str): A string containing the path to be converted.\n\nReturns:\n    Path: An absolute Path object representing the specified path.\n\nThis function utilizes the `Path` class from the `pathlib` module to convert the given string path into an absolute path. It is used in the `parse_args` function to ensure that the output path provided by the user is valid and absolute.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/cli_parser.py": "\"\"\"\nCLI parser.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nimport argparse\nimport enum\nimport logging\nfrom collections.abc import Sequence\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Any\nfrom mypy_boto3_builder.constants import PROG_NAME\nfrom mypy_boto3_builder.enums.product import Product\nfrom mypy_boto3_builder.service_name import ServiceName\nfrom mypy_boto3_builder.utils.version import get_builder_version\n\nclass EnumListAction(argparse.Action):\n    \"\"\"\n    Argparse action for handling Enums.\n    \"\"\"\n\n    def __init__(self, type: type[enum.Enum], option_strings: Sequence[str], dest: str, default: Sequence[enum.Enum] | None=None, *, required: bool=False, **kwargs: str | None) -> None:\n        self._enum_class = type\n        super().__init__(choices=tuple((e.value for e in self._enum_class)), option_strings=option_strings, default=default, dest=dest, type=None, required=required, **kwargs)\n\n    def __call__(self, parser: argparse.ArgumentParser, namespace: argparse.Namespace, value: str | Sequence[Any] | None, _option_string: str | None=None) -> None:\n        \"\"\"\n        Convert value back into an Enum.\n        \"\"\"\n        value_list: list[str] = []\n        if isinstance(value, str):\n            value_list.append(value)\n        if isinstance(value, list):\n            value_list.extend([i for i in value if isinstance(i, str)])\n        enum_values = [self._enum_class(i) for i in value_list]\n        setattr(namespace, self.dest, enum_values)\n\n@dataclass(kw_only=True, slots=True)\nclass CLINamespace:\n    \"\"\"\n    CLI arguments namespace.\n    \"\"\"\n    log_level: int\n    output_path: Path\n    service_names: list[str]\n    build_version: str\n    installed: bool\n    products: list[Product]\n    list_services: bool\n    partial_overload: bool\n    skip_published: bool\n    disable_smart_version: bool\n    download_static_stubs: bool"
  },
  "call_tree": {
    "tests/test_cli_parser.py:TestCLIParser:test_parse_args": {
      "mypy_boto3_builder/cli_parser.py:parse_args": {
        "mypy_boto3_builder/utils/version.py:get_builder_version": {}
      }
    },
    "tests/test_cli_parser.py:TestCLIParser:test_get_absolute_path": {
      "mypy_boto3_builder/cli_parser.py:get_absolute_path": {}
    }
  }
}