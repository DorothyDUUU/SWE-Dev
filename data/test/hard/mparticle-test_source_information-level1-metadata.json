{
  "dir_path": "/app/mparticle",
  "package_name": "mparticle",
  "sample_name": "mparticle-test_source_information",
  "src_dir": "mparticle/",
  "test_dir": "test/",
  "test_file": "test/test_source_information.py",
  "test_code": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom __future__ import absolute_import\n\nimport os\nimport sys\nimport unittest\n\nimport mparticle\nfrom mparticle.rest import ApiException\nfrom mparticle.models.source_information import SourceInformation\n\n\nclass TestSourceInformation(unittest.TestCase):\n    \"\"\" SourceInformation unit test stubs \"\"\"\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def testSourceInformation(self):\n        \"\"\"\n        Test SourceInformation\n        \"\"\"\n        model = mparticle.models.source_information.SourceInformation()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
  "GT_file_code": {
    "mparticle/models/source_information.py": "# coding: utf-8\n\n\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass SourceInformation(object):\n\n    def __init__(self, channel=None, partner=None, replay_request_id=None, replay_job_id=None):\n        \"\"\"\n        SourceInformation - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'channel': 'str',\n            'partner': 'str',\n            'replay_request_id': 'str',\n            'replay_job_id': 'str'\n        }\n\n        self.attribute_map = {\n            'channel': 'channel',\n            'partner': 'partner',\n            'replay_request_id': 'replay_request_id',\n            'replay_job_id': 'replay_job_id'\n        }\n\n        self._channel = channel\n        self._partner = partner\n        self._replay_request_id = replay_request_id\n        self._replay_job_id = replay_job_id\n\n    @property\n    def channel(self):\n        \"\"\"\n        Gets the channel of this SourceInformation.\n\n\n        :return: The channel of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._channel\n\n    @channel.setter\n    def channel(self, channel):\n        \"\"\"\n        Sets the channel of this SourceInformation.\n\n\n        :param channel: The channel of this SourceInformation.\n        :type: str\n        \"\"\"\n        allowed_values = [\"unknown\", \"native\", \"javascript\", \"pixel\", \"desktop\", \"partner\", \"server_to_server\", \"All\"]\n        if channel not in allowed_values:\n            raise ValueError(\n                \"Invalid value for `channel` ({0}), must be one of {1}\"\n                .format(channel, allowed_values)\n            )\n\n        self._channel = channel\n\n    @property\n    def partner(self):\n        \"\"\"\n        Gets the partner of this SourceInformation.\n\n\n        :return: The partner of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._partner\n\n    @partner.setter\n    def partner(self, partner):\n        \"\"\"\n        Sets the partner of this SourceInformation.\n\n\n        :param partner: The partner of this SourceInformation.\n        :type: str\n        \"\"\"\n\n        self._partner = partner\n\n    @property\n    def replay_request_id(self):\n        \"\"\"\n        Gets the replay_request_id of this SourceInformation.\n\n\n        :return: The replay_request_id of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._replay_request_id\n\n    @replay_request_id.setter\n    def replay_request_id(self, replay_request_id):\n        \"\"\"\n        Sets the replay_request_id of this SourceInformation.\n\n\n        :param replay_request_id: The replay_request_id of this SourceInformation.\n        :type: str\n        \"\"\"\n\n        self._replay_request_id = replay_request_id\n\n    @property\n    def replay_job_id(self):\n        \"\"\"\n        Gets the replay_job_id of this SourceInformation.\n\n\n        :return: The replay_job_id of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._replay_job_id\n\n    @replay_job_id.setter\n    def replay_job_id(self, replay_job_id):\n        \"\"\"\n        Sets the replay_job_id of this SourceInformation.\n\n\n        :param replay_job_id: The replay_job_id of this SourceInformation.\n        :type: str\n        \"\"\"\n\n        self._replay_job_id = replay_job_id\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(\n                    lambda item: (item[0], item[1].to_dict())\n                    if hasattr(item[1], \"to_dict\") else item,\n                    value.items()\n                ))\n            else:\n                result[attr] = value\n\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other\n"
  },
  "GT_src_dict": {
    "mparticle/models/source_information.py": {
      "SourceInformation.__init__": {
        "code": "    def __init__(self, channel=None, partner=None, replay_request_id=None, replay_job_id=None):\n        \"\"\"Initializes a SourceInformation instance, which represents metadata associated with the source of an event in the mParticle system.\n\n    Parameters:\n    - channel (str, optional): The source channel of the event (e.g., 'native', 'javascript'). It must be one of the allowed values: \n      \"unknown\", \"native\", \"javascript\", \"pixel\", \"desktop\", \"partner\", \"server_to_server\", or \"All\".\n    - partner (str, optional): The partner associated with the event.\n    - replay_request_id (str, optional): An identifier for the replay request.\n    - replay_job_id (str, optional): An identifier for the replay job.\n\n    Attributes:\n    - swagger_types (dict): A mapping of attribute names to their types, defined for API documentation purposes.\n    - attribute_map (dict): A mapping of attribute names to their corresponding JSON keys in the API definition.\n    \n    This constructor establishes the initial state of the SourceInformation instance by assigning the provided parameters to the instance attributes, allowing the representation and manipulation of source metadata in subsequent operations.\"\"\"\n        '\\n        SourceInformation - a model defined in Swagger\\n\\n        :param dict swaggerTypes: The key is attribute name\\n                                  and the value is attribute type.\\n        :param dict attributeMap: The key is attribute name\\n                                  and the value is json key in definition.\\n        '\n        self.swagger_types = {'channel': 'str', 'partner': 'str', 'replay_request_id': 'str', 'replay_job_id': 'str'}\n        self.attribute_map = {'channel': 'channel', 'partner': 'partner', 'replay_request_id': 'replay_request_id', 'replay_job_id': 'replay_job_id'}\n        self._channel = channel\n        self._partner = partner\n        self._replay_request_id = replay_request_id\n        self._replay_job_id = replay_job_id",
        "docstring": "Initializes a SourceInformation instance, which represents metadata associated with the source of an event in the mParticle system.\n\nParameters:\n- channel (str, optional): The source channel of the event (e.g., 'native', 'javascript'). It must be one of the allowed values: \n  \"unknown\", \"native\", \"javascript\", \"pixel\", \"desktop\", \"partner\", \"server_to_server\", or \"All\".\n- partner (str, optional): The partner associated with the event.\n- replay_request_id (str, optional): An identifier for the replay request.\n- replay_job_id (str, optional): An identifier for the replay job.\n\nAttributes:\n- swagger_types (dict): A mapping of attribute names to their types, defined for API documentation purposes.\n- attribute_map (dict): A mapping of attribute names to their corresponding JSON keys in the API definition.\n\nThis constructor establishes the initial state of the SourceInformation instance by assigning the provided parameters to the instance attributes, allowing the representation and manipulation of source metadata in subsequent operations.",
        "signature": "def __init__(self, channel=None, partner=None, replay_request_id=None, replay_job_id=None):",
        "type": "Method",
        "class_signature": "class SourceInformation(object):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mparticle-test_source_information\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mparticle/\n    \u2514\u2500\u2500 models/\n        \u2514\u2500\u2500 source_information.py\n            \u2514\u2500\u2500 SourceInformation.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and ensure the functionality of the `SourceInformation` object within the mParticle Event API, which is part of a comprehensive system for managing event data and integrations. It provides unit testing capabilities to confirm that the `SourceInformation` component correctly encapsulates and processes metadata related to data sources or event providers within the mParticle ecosystem. By serving as a testing interface, this module ensures the reliability and consistency of the `SourceInformation` model, which is critical for accurately attributing event data to its source. This solves the problem of verifying data integrity and proper handling of source metadata, reducing the risk of errors in data ingestion and downstream analytics for developers integrating with the mParticle system.\n\n## FILE 1: mparticle/models/source_information.py\n\n- CLASS METHOD: SourceInformation.__init__\n  - CLASS SIGNATURE: class SourceInformation(object):\n  - SIGNATURE: def __init__(self, channel=None, partner=None, replay_request_id=None, replay_job_id=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a SourceInformation instance, which represents metadata associated with the source of an event in the mParticle system.\n\nParameters:\n- channel (str, optional): The source channel of the event (e.g., 'native', 'javascript'). It must be one of the allowed values: \n  \"unknown\", \"native\", \"javascript\", \"pixel\", \"desktop\", \"partner\", \"server_to_server\", or \"All\".\n- partner (str, optional): The partner associated with the event.\n- replay_request_id (str, optional): An identifier for the replay request.\n- replay_job_id (str, optional): An identifier for the replay job.\n\nAttributes:\n- swagger_types (dict): A mapping of attribute names to their types, defined for API documentation purposes.\n- attribute_map (dict): A mapping of attribute names to their corresponding JSON keys in the API definition.\n\nThis constructor establishes the initial state of the SourceInformation instance by assigning the provided parameters to the instance attributes, allowing the representation and manipulation of source metadata in subsequent operations.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mparticle/models/source_information.py": "\"\"\"\n    mParticle\n\n    mParticle Event API\n\n    OpenAPI spec version: 1.0.1\n    Contact: support@mparticle.com\n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\nclass SourceInformation(object):\n\n    @property\n    def channel(self):\n        \"\"\"\n        Gets the channel of this SourceInformation.\n\n\n        :return: The channel of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._channel\n\n    @channel.setter\n    def channel(self, channel):\n        \"\"\"\n        Sets the channel of this SourceInformation.\n\n\n        :param channel: The channel of this SourceInformation.\n        :type: str\n        \"\"\"\n        allowed_values = ['unknown', 'native', 'javascript', 'pixel', 'desktop', 'partner', 'server_to_server', 'All']\n        if channel not in allowed_values:\n            raise ValueError('Invalid value for `channel` ({0}), must be one of {1}'.format(channel, allowed_values))\n        self._channel = channel\n\n    @property\n    def partner(self):\n        \"\"\"\n        Gets the partner of this SourceInformation.\n\n\n        :return: The partner of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._partner\n\n    @partner.setter\n    def partner(self, partner):\n        \"\"\"\n        Sets the partner of this SourceInformation.\n\n\n        :param partner: The partner of this SourceInformation.\n        :type: str\n        \"\"\"\n        self._partner = partner\n\n    @property\n    def replay_request_id(self):\n        \"\"\"\n        Gets the replay_request_id of this SourceInformation.\n\n\n        :return: The replay_request_id of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._replay_request_id\n\n    @replay_request_id.setter\n    def replay_request_id(self, replay_request_id):\n        \"\"\"\n        Sets the replay_request_id of this SourceInformation.\n\n\n        :param replay_request_id: The replay_request_id of this SourceInformation.\n        :type: str\n        \"\"\"\n        self._replay_request_id = replay_request_id\n\n    @property\n    def replay_job_id(self):\n        \"\"\"\n        Gets the replay_job_id of this SourceInformation.\n\n\n        :return: The replay_job_id of this SourceInformation.\n        :rtype: str\n        \"\"\"\n        return self._replay_job_id\n\n    @replay_job_id.setter\n    def replay_job_id(self, replay_job_id):\n        \"\"\"\n        Sets the replay_job_id of this SourceInformation.\n\n\n        :param replay_job_id: The replay_job_id of this SourceInformation.\n        :type: str\n        \"\"\"\n        self._replay_job_id = replay_job_id\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))\n            elif hasattr(value, 'to_dict'):\n                result[attr] = value.to_dict()\n            elif isinstance(value, dict):\n                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))\n            else:\n                result[attr] = value\n        return result\n\n    def to_str(self):\n        \"\"\"\n        Returns the string representation of the model\n        \"\"\"\n        return pformat(self.to_dict())\n\n    def __repr__(self):\n        \"\"\"\n        For `print` and `pprint`\n        \"\"\"\n        return self.to_str()\n\n    def __eq__(self, other):\n        \"\"\"\n        Returns true if both objects are equal\n        \"\"\"\n        return self.__dict__ == other.__dict__\n\n    def __ne__(self, other):\n        \"\"\"\n        Returns true if both objects are not equal\n        \"\"\"\n        return not self == other"
  },
  "call_tree": {
    "test/test_source_information.py:TestSourceInformation:testSourceInformation": {
      "mparticle/models/source_information.py:SourceInformation:__init__": {}
    }
  }
}