{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-medicinalproductpharmaceutical_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/medicinalproductpharmaceutical_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import medicinalproductpharmaceutical\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MedicinalProductPharmaceuticalTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"MedicinalProductPharmaceutical\", js[\"resourceType\"])\n        return medicinalproductpharmaceutical.MedicinalProductPharmaceutical(js)\n    \n    def testMedicinalProductPharmaceutical1(self):\n        inst = self.instantiate_from(\"medicinalproductpharmaceutical-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a MedicinalProductPharmaceutical instance\")\n        self.implMedicinalProductPharmaceutical1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"MedicinalProductPharmaceutical\", js[\"resourceType\"])\n        inst2 = medicinalproductpharmaceutical.MedicinalProductPharmaceutical(js)\n        self.implMedicinalProductPharmaceutical1(inst2)\n    \n    def implMedicinalProductPharmaceutical1(self, inst):\n        self.assertEqual(inst.administrableDoseForm.coding[0].code, \"Film-coatedtablet\")\n        self.assertEqual(inst.administrableDoseForm.coding[0].system, \"http://ema.europa.eu/example/administrabledoseform\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://ema.europa.eu/example/phpididentifiersets\")\n        self.assertEqual(inst.identifier[0].value, \"{PhPID}\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.routeOfAdministration[0].code.coding[0].code, \"OralUse\")\n        self.assertEqual(inst.routeOfAdministration[0].code.coding[0].system, \"http://ema.europa.eu/example/routeofadministration\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.unitOfPresentation.coding[0].code, \"Tablet\")\n        self.assertEqual(inst.unitOfPresentation.coding[0].system, \"http://ema.europa.eu/example/unitofpresentation\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/medicinalproductpharmaceutical.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/MedicinalProductPharmaceutical).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass MedicinalProductPharmaceutical(domainresource.DomainResource):\n    \"\"\" A pharmaceutical product described in terms of its composition and dose\n    form.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPharmaceutical\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.administrableDoseForm = None\n        \"\"\" The administrable dose form, after necessary reconstitution.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.characteristics = None\n        \"\"\" Characteristics e.g. a products onset of action.\n        List of `MedicinalProductPharmaceuticalCharacteristics` items (represented as `dict` in JSON). \"\"\"\n        \n        self.device = None\n        \"\"\" Accompanying device.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" An identifier for the pharmaceutical medicinal product.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.ingredient = None\n        \"\"\" Ingredient.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.routeOfAdministration = None\n        \"\"\" The path by which the pharmaceutical product is taken into or makes\n        contact with the body.\n        List of `MedicinalProductPharmaceuticalRouteOfAdministration` items (represented as `dict` in JSON). \"\"\"\n        \n        self.unitOfPresentation = None\n        \"\"\" Todo.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPharmaceutical, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceutical, self).elementProperties()\n        js.extend([\n            (\"administrableDoseForm\", \"administrableDoseForm\", codeableconcept.CodeableConcept, False, None, True),\n            (\"characteristics\", \"characteristics\", MedicinalProductPharmaceuticalCharacteristics, True, None, False),\n            (\"device\", \"device\", fhirreference.FHIRReference, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"ingredient\", \"ingredient\", fhirreference.FHIRReference, True, None, False),\n            (\"routeOfAdministration\", \"routeOfAdministration\", MedicinalProductPharmaceuticalRouteOfAdministration, True, None, True),\n            (\"unitOfPresentation\", \"unitOfPresentation\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MedicinalProductPharmaceuticalCharacteristics(backboneelement.BackboneElement):\n    \"\"\" Characteristics e.g. a products onset of action.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPharmaceuticalCharacteristics\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" A coded characteristic.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" The status of characteristic e.g. assigned or pending.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPharmaceuticalCharacteristics, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalCharacteristics, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"status\", \"status\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductPharmaceuticalRouteOfAdministration(backboneelement.BackboneElement):\n    \"\"\" The path by which the pharmaceutical product is taken into or makes contact\n    with the body.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPharmaceuticalRouteOfAdministration\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Coded expression for the route.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.firstDose = None\n        \"\"\" The first dose (dose quantity) administered in humans can be\n        specified, for a product under investigation, using a numerical\n        value and its unit of measurement.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.maxDosePerDay = None\n        \"\"\" The maximum dose per day (maximum dose quantity to be administered\n        in any one 24-h period) that can be administered as per the\n        protocol referenced in the clinical trial authorisation.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.maxDosePerTreatmentPeriod = None\n        \"\"\" The maximum dose per treatment period that can be administered as\n        per the protocol referenced in the clinical trial authorisation.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.maxSingleDose = None\n        \"\"\" The maximum single dose that can be administered as per the\n        protocol of a clinical trial can be specified using a numerical\n        value and its unit of measurement.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.maxTreatmentPeriod = None\n        \"\"\" The maximum treatment period during which an Investigational\n        Medicinal Product can be administered as per the protocol\n        referenced in the clinical trial authorisation.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.targetSpecies = None\n        \"\"\" A species for which this route applies.\n        List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPharmaceuticalRouteOfAdministration, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministration, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"firstDose\", \"firstDose\", quantity.Quantity, False, None, False),\n            (\"maxDosePerDay\", \"maxDosePerDay\", quantity.Quantity, False, None, False),\n            (\"maxDosePerTreatmentPeriod\", \"maxDosePerTreatmentPeriod\", ratio.Ratio, False, None, False),\n            (\"maxSingleDose\", \"maxSingleDose\", quantity.Quantity, False, None, False),\n            (\"maxTreatmentPeriod\", \"maxTreatmentPeriod\", duration.Duration, False, None, False),\n            (\"targetSpecies\", \"targetSpecies\", MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, True, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(backboneelement.BackboneElement):\n    \"\"\" A species for which this route applies.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Coded expression for the species.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.withdrawalPeriod = None\n        \"\"\" A species specific time during which consumption of animal product\n        is not appropriate.\n        List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, True),\n            (\"withdrawalPeriod\", \"withdrawalPeriod\", MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, True, None, False),\n        ])\n        return js\n\n\nclass MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(backboneelement.BackboneElement):\n    \"\"\" A species specific time during which consumption of animal product is not\n    appropriate.\n    \"\"\"\n    \n    resource_type = \"MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.supportingInformation = None\n        \"\"\" Extra information about the withdrawal period.\n        Type `str`. \"\"\"\n        \n        self.tissue = None\n        \"\"\" Coded expression for the type of tissue for which the withdrawal\n        period applues, e.g. meat, milk.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" A value for the time.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, self).elementProperties()\n        js.extend([\n            (\"supportingInformation\", \"supportingInformation\", str, False, None, False),\n            (\"tissue\", \"tissue\", codeableconcept.CodeableConcept, False, None, True),\n            (\"value\", \"value\", quantity.Quantity, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import ratio\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a FHIRAbstractResource instance.\n\nThis constructor sets the initial state of the resource by checking if a provided JSON dictionary (`jsondict`) has a matching `resourceType` with the class's `resource_type`. If they do not match, an exception is raised. It also initializes the private `_server` attribute that holds the reference to the server from which the resource was read.\n\nParameters:\n- jsondict (dict, optional): A dictionary representing the resource's JSON data. If provided, it must contain a `resourceType` that matches the class's `resource_type` to ensure correct instantiation.\n- strict (bool, optional): Indicates whether to enforce strict validation of the resource's attributes, defaulting to True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If `jsondict` is provided but the `resourceType` does not match the expected `resource_type` of the class.\n\nAttributes:\n- _server: Holds a reference to the server instance that the resource was read from, initialized to None.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a FHIRAbstractResource instance.\n\nThis constructor sets the initial state of the resource by checking if a provided JSON dictionary (`jsondict`) has a matching `resourceType` with the class's `resource_type`. If they do not match, an exception is raised. It also initializes the private `_server` attribute that holds the reference to the server from which the resource was read.\n\nParameters:\n- jsondict (dict, optional): A dictionary representing the resource's JSON data. If provided, it must contain a `resourceType` that matches the class's `resource_type` to ensure correct instantiation.\n- strict (bool, optional): Indicates whether to enforce strict validation of the resource's attributes, defaulting to True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If `jsondict` is provided but the `resourceType` does not match the expected `resource_type` of the class.\n\nAttributes:\n- _server: Holds a reference to the server instance that the resource was read from, initialized to None.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON dictionary representation.\n\nThis method overrides the `as_json` method from its superclass, **FHIRAbstractBase**, to include the `resourceType` key with the value of the instance's `resource_type`. It does not take any parameters and returns a JSON-compliant dictionary, which includes all attributes of the instance along with its type.\n\nDependencies:\n- Relies on the `super()` method to call the superclass implementation of `as_json`.\n- Uses the class attribute `resource_type`, defined in class-level scope, to specify the type of resource represented in the JSON output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON dictionary representation.\n\nThis method overrides the `as_json` method from its superclass, **FHIRAbstractBase**, to include the `resourceType` key with the value of the instance's `resource_type`. It does not take any parameters and returns a JSON-compliant dictionary, which includes all attributes of the instance along with its type.\n\nDependencies:\n- Relies on the `super()` method to call the superclass implementation of `as_json`.\n- Uses the class attribute `resource_type`, defined in class-level scope, to specify the type of resource represented in the JSON output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializer for the FHIRAbstractBase class, which serves as the abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. It prepares the instance by optionally accepting a JSON dictionary for initialization and setting strict validation behavior. \n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the JSON data used for initializing the FHIR element. If provided, it initializes the instance's properties based on this data.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced. When True (default), invalid variables raise a FHIRValidationError during initialization. When False, warnings are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary that holds resolved resources. Initially set to None.\n- _owner: A reference to the parent resource of the current instance, indicating its hierarchical relationship within the FHIR structure. Initially set to None.\n\nThe method relies on `update_with_json()` to validate and update the instance's properties based on the provided JSON data. If strict validation is enabled and a validation error occurs, an exception is raised; otherwise, any errors are logged.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializer for the FHIRAbstractBase class, which serves as the abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. It prepares the instance by optionally accepting a JSON dictionary for initialization and setting strict validation behavior. \n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the JSON data used for initializing the FHIR element. If provided, it initializes the instance's properties based on this data.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced. When True (default), invalid variables raise a FHIRValidationError during initialization. When False, warnings are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary that holds resolved resources. Initially set to None.\n- _owner: A reference to the parent resource of the current instance, indicating its hierarchical relationship within the FHIR structure. Initially set to None.\n\nThe method relies on `update_with_json()` to validate and update the instance's properties based on the provided JSON data. If strict validation is enabled and a validation error occurs, an exception is raised; otherwise, any errors are logged.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or array. If the input is a dictionary, it directly calls the internal method `_with_json_dict` to handle the instantiation. For a list of dictionaries, it tries to instantiate each dictionary and appends the resulting instances to an array. If any instantiation fails, a FHIRValidationError is raised, prefixed with the index of the failed instance for easier debugging.\n\nParameters:\n- jsonobj (dict or list): A dictionary representing the FHIR resource or a list of such dictionaries to be instantiated.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any dictionary fails.\n\nThis method relies on the `_with_json_dict` method for processing dictionaries and is part of the larger FHIR data model structure, which emphasizes consistent handling and validation of JSON representations of FHIR resources.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or array. If the input is a dictionary, it directly calls the internal method `_with_json_dict` to handle the instantiation. For a list of dictionaries, it tries to instantiate each dictionary and appends the resulting instances to an array. If any instantiation fails, a FHIRValidationError is raised, prefixed with the index of the failed instance for easier debugging.\n\nParameters:\n- jsonobj (dict or list): A dictionary representing the FHIR resource or a list of such dictionaries to be instantiated.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any dictionary fails.\n\nThis method relies on the `_with_json_dict` method for processing dictionaries and is part of the larger FHIR data model structure, which emphasizes consistent handling and validation of JSON representations of FHIR resources.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal method to create an instance of the class from a provided JSON dictionary.\n\n:param dict jsondict: The JSON dictionary used for instantiation. It must be a valid dictionary.\n:raises TypeError: If the provided argument is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class created using the data from `jsondict`.\n\nThe method ensures that the input `jsondict` is of the correct type (dictionary). It raises a TypeError if the input is invalid and delegates to the class's initializer to create the instance using the dictionary data.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal method to create an instance of the class from a provided JSON dictionary.\n\n:param dict jsondict: The JSON dictionary used for instantiation. It must be a valid dictionary.\n:raises TypeError: If the provided argument is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class created using the data from `jsondict`.\n\nThe method ensures that the input `jsondict` is of the correct type (dictionary). It raises a TypeError if the input is invalid and delegates to the class's initializer to create the instance using the dictionary data.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates an element from a given JSON dictionary or list of dictionaries \nand assigns its owning parent resource. This method provides a mechanism to \nmaintain the parent-child relationship between FHIR elements, allowing for \nproper resolution of contained resources.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list \n  of dictionaries used to create an FHIR element or elements.\n- owner (FHIRElement): The parent resource that owns the instantiated \n  element(s).\n\nReturns:\n- An instance of the class, or a list of instances created from the \n  JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If instantiation fails, indicating issues with \n  the provided data.\n\nThis method relies on `with_json()` for the actual instantiation logic and \nenhances it by establishing an ownership reference to aid in resource \nresolution later. The `_owner` attribute of the instantiated elements is set \nto the given `owner`, allowing for traversal of the owner hierarchy.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates an element from a given JSON dictionary or list of dictionaries \nand assigns its owning parent resource. This method provides a mechanism to \nmaintain the parent-child relationship between FHIR elements, allowing for \nproper resolution of contained resources.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list \n  of dictionaries used to create an FHIR element or elements.\n- owner (FHIRElement): The parent resource that owns the instantiated \n  element(s).\n\nReturns:\n- An instance of the class, or a list of instances created from the \n  JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If instantiation fails, indicating issues with \n  the provided data.\n\nThis method relies on `with_json()` for the actual instantiation logic and \nenhances it by establishing an ownership reference to aid in resource \nresolution later. The `_owner` attribute of the instantiated elements is set \nto the given `owner`, allowing for traversal of the owner hierarchy.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal property name (`name`), the corresponding JSON name (`json_name`), the expected data type (`type`), a boolean indicating if the property is a list (`is_list`), an optional designation for the array type (`of_many`), and a boolean (`not_optional`) indicating if the property is required. \n\nThis method is crucial for the serialization process of FHIR resources, allowing derived classes to define their properties while adhering to the FHIR specification. Derived classes should override this method to return the relevant property definitions. By default, it returns an empty list, indicating that no properties are defined. This method interacts with `update_with_json` and `as_json`, validating and serializing the properties of the FHIR elements based on the defined structure.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal property name (`name`), the corresponding JSON name (`json_name`), the expected data type (`type`), a boolean indicating if the property is a list (`is_list`), an optional designation for the array type (`of_many`), and a boolean (`not_optional`) indicating if the property is required. \n\nThis method is crucial for the serialization process of FHIR resources, allowing derived classes to define their properties while adhering to the FHIR specification. Derived classes should override this method to return the relevant property definitions. By default, it returns an empty list, indicating that no properties are defined. This method interacts with `update_with_json` and `as_json`, validating and serializing the properties of the FHIR elements based on the defined structure.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Updates the current instance of the FHIRAbstractBase class using data from a provided JSON dictionary. If the input is not a dictionary, a FHIRValidationError is raised. The method loops through each property defined in the `elementProperties()` method, validates the types and presence of required non-optional properties, and assigns values accordingly. It collects any errors encountered during the update process and raises a FHIRValidationError if any errors exist at the end.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance.\n\nReturns:\n- None on successful update; raises FHIRValidationError if validation errors occur.\n\nConstants:\n- valid: A set initialized with 'resourceType' to track valid property names in the input JSON.\n- found: A set of property names that were found and successfully assigned.\n- nonoptionals: A set of property names that are required but were not found in the input JSON.\n\nNote: This method relies on the `elementProperties()` method to define the properties that need to be updated and validated.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Updates the current instance of the FHIRAbstractBase class using data from a provided JSON dictionary. If the input is not a dictionary, a FHIRValidationError is raised. The method loops through each property defined in the `elementProperties()` method, validates the types and presence of required non-optional properties, and assigns values accordingly. It collects any errors encountered during the update process and raises a FHIRValidationError if any errors exist at the end.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance.\n\nReturns:\n- None on successful update; raises FHIRValidationError if validation errors occur.\n\nConstants:\n- valid: A set initialized with 'resourceType' to track valid property names in the input JSON.\n- found: A set of property names that were found and successfully assigned.\n- nonoptionals: A set of property names that are required but were not found in the input JSON.\n\nNote: This method relies on the `elementProperties()` method to define the properties that need to be updated and validated.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting its property definitions provided by the `elementProperties()` method. It ensures that required properties are present and have the correct types, raising a `FHIRValidationError` if there are discrepancies, such as missing mandatory properties or mismatched types.\n\nReturns a validated dictionary object suitable for JSON serialization. The method tracks all properties using:\n- `found`: A set that collects names of properties that have been successfully added to the output dictionary.\n- `nonoptionals`: A set that tracks non-optional properties to check for the presence of their values.\n\nThe method also references the `_matches_type()` utility for type checking and manages errors through an `errs` list, which aggregates any validation issues before raising them.\n\nRaises:\n- FHIRValidationError: If properties have incorrect types or if required properties fail to provide values. \n\nReturns:\n- dict: A JSON-serializable dictionary representation of the instance.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting its property definitions provided by the `elementProperties()` method. It ensures that required properties are present and have the correct types, raising a `FHIRValidationError` if there are discrepancies, such as missing mandatory properties or mismatched types.\n\nReturns a validated dictionary object suitable for JSON serialization. The method tracks all properties using:\n- `found`: A set that collects names of properties that have been successfully added to the output dictionary.\n- `nonoptionals`: A set that tracks non-optional properties to check for the presence of their values.\n\nThe method also references the `_matches_type()` utility for type checking and manages errors through an `errs` list, which aggregates any validation issues before raising them.\n\nRaises:\n- FHIRValidationError: If properties have incorrect types or if required properties fail to provide values. \n\nReturns:\n- dict: A JSON-serializable dictionary representation of the instance.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if the provided value matches the specified type.\n\n:param value: The value to be checked against the type.\n:param typ: The type to check the value against, which can be any type.\n\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method also handles special cases for numeric types such as int and float, allowing for a match with either. For Python 2 compatibility, it checks for str and unicode types when the Python version is below 3. The `sys.version_info` constant is used to determine the Python version being run, enabling backward compatibility checks for type matching.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if the provided value matches the specified type.\n\n:param value: The value to be checked against the type.\n:param typ: The type to check the value against, which can be any type.\n\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method also handles special cases for numeric types such as int and float, allowing for a match with either. For Python 2 compatibility, it checks for str and unicode types when the Python version is below 3. The `sys.version_info` constant is used to determine the Python version being run, enabling backward compatibility checks for type matching.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource object that includes narrative, extensions, and contained resources.\n\nThis constructor sets up basic properties for the DomainResource, which includes attributes for contained resources, extensions, modifier extensions, and a text summary. The `jsondict` parameter allows for initializing the object with data from a JSON representation, while the `strict` parameter controls whether to raise a FHIRValidationError on validation failures (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties.\n- strict (bool, optional): If True (default), invalid properties in `jsondict` raise a TypeError.\n\nAttributes initialized:\n- contained: List of contained Resource items (as dicts in JSON).\n- extension: List of additional Extension items (as dicts in JSON).\n- modifierExtension: List of mandatory Extension items (as dicts in JSON).\n- text: Textual summary of the resource, suitable for human interpretation, represented as a Narrative (as dict in JSON).\n\nThis constructor leverages the parent class `resource.Resource` for additional initialization.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource object that includes narrative, extensions, and contained resources.\n\nThis constructor sets up basic properties for the DomainResource, which includes attributes for contained resources, extensions, modifier extensions, and a text summary. The `jsondict` parameter allows for initializing the object with data from a JSON representation, while the `strict` parameter controls whether to raise a FHIRValidationError on validation failures (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties.\n- strict (bool, optional): If True (default), invalid properties in `jsondict` raise a TypeError.\n\nAttributes initialized:\n- contained: List of contained Resource items (as dicts in JSON).\n- extension: List of additional Extension items (as dicts in JSON).\n- modifierExtension: List of mandatory Extension items (as dicts in JSON).\n- text: Textual summary of the resource, suitable for human interpretation, represented as a Narrative (as dict in JSON).\n\nThis constructor leverages the parent class `resource.Resource` for additional initialization.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of property descriptors for the DomainResource, extending the properties of the base Resource class. The method retrieves properties using the superclass's `elementProperties` method and adds the following specific properties: `contained`, `extension`, `modifierExtension`, and `text`. \n\n- `contained`: A list of contained resources (of type `Resource`).\n- `extension`: A list of additional content defined by implementations (of type `Extension`).\n- `modifierExtension`: A list of extensions that cannot be ignored (of type `Extension`).\n- `text`: A summary of the resource for human interpretation (of type `Narrative`).\n\nThe return value is a list of tuples, where each tuple represents a property name, its JSON key, the expected type, whether it is repeated, any conditions, and whether it is a required field. This method is crucial for properly serializing and deserializing the DomainResource in the context of FHIR (Fast Healthcare Interoperability Resources).\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Returns a list of property descriptors for the DomainResource, extending the properties of the base Resource class. The method retrieves properties using the superclass's `elementProperties` method and adds the following specific properties: `contained`, `extension`, `modifierExtension`, and `text`. \n\n- `contained`: A list of contained resources (of type `Resource`).\n- `extension`: A list of additional content defined by implementations (of type `Extension`).\n- `modifierExtension`: A list of extensions that cannot be ignored (of type `Extension`).\n- `text`: A summary of the resource for human interpretation (of type `Narrative`).\n\nThe return value is a list of tuples, where each tuple represents a property name, its JSON key, the expected type, whether it is repeated, any conditions, and whether it is a required field. This method is crucial for properly serializing and deserializing the DomainResource in the context of FHIR (Fast Healthcare Interoperability Resources).",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Resource instance.\n\nThis constructor initializes the properties of the Resource class, which is the base for all FHIR resources. It accepts an optional JSON dictionary (`jsondict`) for initializing the resource attributes and a boolean flag (`strict`) to control validation behavior. If strict is True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for resource properties.\n- strict (bool, optional): If True, raises a FHIRValidationError for any invalid properties (default is True).\n\nAttributes:\n- id (str): A logical identifier for the resource.\n- implicitRules (str): A set of rules governing content creation.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata associated with the resource, defined as a dictionary in JSON format.\n\nThis constructor calls the parent class's initializer from `fhirabstractresource` to ensure proper initialization of inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Resource instance.\n\nThis constructor initializes the properties of the Resource class, which is the base for all FHIR resources. It accepts an optional JSON dictionary (`jsondict`) for initializing the resource attributes and a boolean flag (`strict`) to control validation behavior. If strict is True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for resource properties.\n- strict (bool, optional): If True, raises a FHIRValidationError for any invalid properties (default is True).\n\nAttributes:\n- id (str): A logical identifier for the resource.\n- implicitRules (str): A set of rules governing content creation.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata associated with the resource, defined as a dictionary in JSON format.\n\nThis constructor calls the parent class's initializer from `fhirabstractresource` to ensure proper initialization of inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the valid properties of the Resource.\n\nThis method extends the element properties defined in the superclass `FHIRAbstractResource` to include specific attributes of the `Resource` class. The properties include:\n- `id`: A logical identifier for the resource (type `str`).\n- `implicitRules`: A set of rules under which the resource was created (type `str`).\n- `language`: The language of the resource content (type `str`).\n- `meta`: Metadata about the resource which is represented as a `Meta` object (imported from the `meta` module).\n\nReturns a list of tuples where each tuple contains the property name, corresponding JSON key, data type, whether it is required, default value, and whether it is an array. This method helps in understanding the attributes available in the Resource and their expected types while interacting with FHIR data structures.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Retrieve the valid properties of the Resource.\n\nThis method extends the element properties defined in the superclass `FHIRAbstractResource` to include specific attributes of the `Resource` class. The properties include:\n- `id`: A logical identifier for the resource (type `str`).\n- `implicitRules`: A set of rules under which the resource was created (type `str`).\n- `language`: The language of the resource content (type `str`).\n- `meta`: Metadata about the resource which is represented as a `Meta` object (imported from the `meta` module).\n\nReturns a list of tuples where each tuple contains the property name, corresponding JSON key, data type, whether it is required, default value, and whether it is an array. This method helps in understanding the attributes available in the Resource and their expected types while interacting with FHIR data structures.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/medicinalproductpharmaceutical.py": {
      "MedicinalProductPharmaceutical.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a MedicinalProductPharmaceutical instance, which represents a pharmaceutical product characterized by its composition and dose form. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance's properties, corresponding to FHIR standards.\n- strict (bool): If True (default), raises a FHIRValidationError on validation errors; if False, allows for leniency in validation.\n\nAttributes:\n- administrableDoseForm (CodeableConcept): The administrable form of the pharmaceutical product post-reconstitution.\n- characteristics (List[MedicinalProductPharmaceuticalCharacteristics]): Specific characteristics of the product, such as onset of action.\n- device (List[FHIRReference]): References to any accompanying devices.\n- identifier (List[Identifier]): Identifiers for the medicinal product.\n- ingredient (List[FHIRReference]): Ingredients present in the medicinal product.\n- routeOfAdministration (List[MedicinalProductPharmaceuticalRouteOfAdministration]): Routes by which the product can be administered.\n- unitOfPresentation (CodeableConcept): Details regarding the presentation or packaging of the product.\n\nThis class extends `domainresource.DomainResource`, leveraging its initialization for managing FHIR resource elements.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.administrableDoseForm = None\n        ' The administrable dose form, after necessary reconstitution.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.characteristics = None\n        ' Characteristics e.g. a products onset of action.\\n        List of `MedicinalProductPharmaceuticalCharacteristics` items (represented as `dict` in JSON). '\n        self.device = None\n        ' Accompanying device.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' An identifier for the pharmaceutical medicinal product.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.ingredient = None\n        ' Ingredient.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.routeOfAdministration = None\n        ' The path by which the pharmaceutical product is taken into or makes\\n        contact with the body.\\n        List of `MedicinalProductPharmaceuticalRouteOfAdministration` items (represented as `dict` in JSON). '\n        self.unitOfPresentation = None\n        ' Todo.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductPharmaceutical, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a MedicinalProductPharmaceutical instance, which represents a pharmaceutical product characterized by its composition and dose form. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance's properties, corresponding to FHIR standards.\n- strict (bool): If True (default), raises a FHIRValidationError on validation errors; if False, allows for leniency in validation.\n\nAttributes:\n- administrableDoseForm (CodeableConcept): The administrable form of the pharmaceutical product post-reconstitution.\n- characteristics (List[MedicinalProductPharmaceuticalCharacteristics]): Specific characteristics of the product, such as onset of action.\n- device (List[FHIRReference]): References to any accompanying devices.\n- identifier (List[Identifier]): Identifiers for the medicinal product.\n- ingredient (List[FHIRReference]): Ingredients present in the medicinal product.\n- routeOfAdministration (List[MedicinalProductPharmaceuticalRouteOfAdministration]): Routes by which the product can be administered.\n- unitOfPresentation (CodeableConcept): Details regarding the presentation or packaging of the product.\n\nThis class extends `domainresource.DomainResource`, leveraging its initialization for managing FHIR resource elements.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class MedicinalProductPharmaceutical(domainresource.DomainResource):"
      },
      "MedicinalProductPharmaceutical.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of element properties for the MedicinalProductPharmaceutical class, which includes the various attributes and their types related to a pharmaceutical product's composition and dosage form. This method builds upon the base class's elementProperties method, extending it with specific attributes such as `administrableDoseForm`, `characteristics`, `device`, `identifier`, `ingredient`, `routeOfAdministration`, and `unitOfPresentation`. Each attribute is associated with its expected data type, such as `CodeableConcept` for `administrableDoseForm` and `unitOfPresentation`, and lists or references for others like `characteristics` and `device`. The method does not take any parameters and returns a list of tuples, each representing a property name, its corresponding JSON key, the expected type, and additional flags indicating their multiplicity (True for lists and False for singular values). It relies on imported classes such as `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, and `identifier.Identifier`, which define the structure and validation of the respective properties in the context of the FHIR (Fast Healthcare Interoperability Resources) standard.\"\"\"\n        js = super(MedicinalProductPharmaceutical, self).elementProperties()\n        js.extend([('administrableDoseForm', 'administrableDoseForm', codeableconcept.CodeableConcept, False, None, True), ('characteristics', 'characteristics', MedicinalProductPharmaceuticalCharacteristics, True, None, False), ('device', 'device', fhirreference.FHIRReference, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('ingredient', 'ingredient', fhirreference.FHIRReference, True, None, False), ('routeOfAdministration', 'routeOfAdministration', MedicinalProductPharmaceuticalRouteOfAdministration, True, None, True), ('unitOfPresentation', 'unitOfPresentation', codeableconcept.CodeableConcept, False, None, False)])\n        return js",
        "docstring": "Returns a list of element properties for the MedicinalProductPharmaceutical class, which includes the various attributes and their types related to a pharmaceutical product's composition and dosage form. This method builds upon the base class's elementProperties method, extending it with specific attributes such as `administrableDoseForm`, `characteristics`, `device`, `identifier`, `ingredient`, `routeOfAdministration`, and `unitOfPresentation`. Each attribute is associated with its expected data type, such as `CodeableConcept` for `administrableDoseForm` and `unitOfPresentation`, and lists or references for others like `characteristics` and `device`. The method does not take any parameters and returns a list of tuples, each representing a property name, its corresponding JSON key, the expected type, and additional flags indicating their multiplicity (True for lists and False for singular values). It relies on imported classes such as `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, and `identifier.Identifier`, which define the structure and validation of the respective properties in the context of the FHIR (Fast Healthcare Interoperability Resources) standard.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class MedicinalProductPharmaceutical(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/medicinalproductpharmaceutical_test.py:MedicinalProductPharmaceuticalTests:testMedicinalProductPharmaceutical1": {
      "tests/models/medicinalproductpharmaceutical_test.py:MedicinalProductPharmaceuticalTests:instantiate_from": {
        "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/medicinalproductpharmaceutical_test.py:MedicinalProductPharmaceuticalTests:implMedicinalProductPharmaceutical1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/medicinalproductpharmaceutical_test.py:MedicinalProductPharmaceuticalTests:instantiate_from": {
      "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/medicinalproductpharmaceutical.py:MedicinalProductPharmaceutical:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-medicinalproductpharmaceutical_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 medicinalproductpharmaceutical.py\n        \u2502   \u251c\u2500\u2500 MedicinalProductPharmaceutical.__init__\n        \u2502   \u2514\u2500\u2500 MedicinalProductPharmaceutical.elementProperties\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation and verification of data structures conforming to the FHIR (Fast Healthcare Interoperability Resources) standard, specifically focusing on the \"MedicinalProductPharmaceutical\" resource. Its primary purpose is to ensure the correctness, consistency, and integrity of data related to pharmaceutical products by testing key attributes such as dose forms, identifiers, routes of administration, and metadata. By providing automated tests that validate resource instantiation, serialization, and critical attribute comparisons against example data, the module enables developers to confidently implement and maintain FHIR-compliant healthcare applications. This functionality ensures interoperability and accuracy in handling pharmaceutical product data, solving the problem of managing and verifying complex healthcare data formats.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRAbstractResource instance.\n\nThis constructor sets the initial state of the resource by checking if a provided JSON dictionary (`jsondict`) has a matching `resourceType` with the class's `resource_type`. If they do not match, an exception is raised. It also initializes the private `_server` attribute that holds the reference to the server from which the resource was read.\n\nParameters:\n- jsondict (dict, optional): A dictionary representing the resource's JSON data. If provided, it must contain a `resourceType` that matches the class's `resource_type` to ensure correct instantiation.\n- strict (bool, optional): Indicates whether to enforce strict validation of the resource's attributes, defaulting to True.\n\nReturns:\n- None\n\nRaises:\n- Exception: If `jsondict` is provided but the `resourceType` does not match the expected `resource_type` of the class.\n\nAttributes:\n- _server: Holds a reference to the server instance that the resource was read from, initialized to None.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON dictionary representation.\n\nThis method overrides the `as_json` method from its superclass, **FHIRAbstractBase**, to include the `resourceType` key with the value of the instance's `resource_type`. It does not take any parameters and returns a JSON-compliant dictionary, which includes all attributes of the instance along with its type.\n\nDependencies:\n- Relies on the `super()` method to call the superclass implementation of `as_json`.\n- Uses the class attribute `resource_type`, defined in class-level scope, to specify the type of resource represented in the JSON output.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRAbstractBase class, which serves as the abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. It prepares the instance by optionally accepting a JSON dictionary for initialization and setting strict validation behavior. \n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the JSON data used for initializing the FHIR element. If provided, it initializes the instance's properties based on this data.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced. When True (default), invalid variables raise a FHIRValidationError during initialization. When False, warnings are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary that holds resolved resources. Initially set to None.\n- _owner: A reference to the parent resource of the current instance, indicating its hierarchical relationship within the FHIR structure. Initially set to None.\n\nThe method relies on `update_with_json()` to validate and update the instance's properties based on the provided JSON data. If strict validation is enabled and a validation error occurs, an exception is raised; otherwise, any errors are logged.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal method to create an instance of the class from a provided JSON dictionary.\n\n:param dict jsondict: The JSON dictionary used for instantiation. It must be a valid dictionary.\n:raises TypeError: If the provided argument is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class created using the data from `jsondict`.\n\nThe method ensures that the input `jsondict` is of the correct type (dictionary). It raises a TypeError if the input is invalid and delegates to the class's initializer to create the instance using the dictionary data.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if the provided value matches the specified type.\n\n:param value: The value to be checked against the type.\n:param typ: The type to check the value against, which can be any type.\n\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method also handles special cases for numeric types such as int and float, allowing for a match with either. For Python 2 compatibility, it checks for str and unicode types when the Python version is below 3. The `sys.version_info` constant is used to determine the Python version being run, enabling backward compatibility checks for type matching.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates an element from a given JSON dictionary or list of dictionaries \nand assigns its owning parent resource. This method provides a mechanism to \nmaintain the parent-child relationship between FHIR elements, allowing for \nproper resolution of contained resources.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or a list \n  of dictionaries used to create an FHIR element or elements.\n- owner (FHIRElement): The parent resource that owns the instantiated \n  element(s).\n\nReturns:\n- An instance of the class, or a list of instances created from the \n  JSON data.\n\nRaises:\n- TypeError: If `jsonobj` is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If instantiation fails, indicating issues with \n  the provided data.\n\nThis method relies on `with_json()` for the actual instantiation logic and \nenhances it by establishing an ownership reference to aid in resource \nresolution later. The `_owner` attribute of the instantiated elements is set \nto the given `owner`, allowing for traversal of the owner hierarchy.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples representing the properties of the FHIR element that should be serialized to JSON. Each tuple contains the following elements: the internal property name (`name`), the corresponding JSON name (`json_name`), the expected data type (`type`), a boolean indicating if the property is a list (`is_list`), an optional designation for the array type (`of_many`), and a boolean (`not_optional`) indicating if the property is required. \n\nThis method is crucial for the serialization process of FHIR resources, allowing derived classes to define their properties while adhering to the FHIR specification. Derived classes should override this method to return the relevant property definitions. By default, it returns an empty list, indicating that no properties are defined. This method interacts with `update_with_json` and `as_json`, validating and serializing the properties of the FHIR elements based on the defined structure.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class or a list of instances from a given JSON dictionary or array. If the input is a dictionary, it directly calls the internal method `_with_json_dict` to handle the instantiation. For a list of dictionaries, it tries to instantiate each dictionary and appends the resulting instances to an array. If any instantiation fails, a FHIRValidationError is raised, prefixed with the index of the failed instance for easier debugging.\n\nParameters:\n- jsonobj (dict or list): A dictionary representing the FHIR resource or a list of such dictionaries to be instantiated.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any dictionary fails.\n\nThis method relies on the `_with_json_dict` method for processing dictionaries and is part of the larger FHIR data model structure, which emphasizes consistent handling and validation of JSON representations of FHIR resources.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the FHIRAbstractBase instance to a JSON-compatible dictionary by inspecting its property definitions provided by the `elementProperties()` method. It ensures that required properties are present and have the correct types, raising a `FHIRValidationError` if there are discrepancies, such as missing mandatory properties or mismatched types.\n\nReturns a validated dictionary object suitable for JSON serialization. The method tracks all properties using:\n- `found`: A set that collects names of properties that have been successfully added to the output dictionary.\n- `nonoptionals`: A set that tracks non-optional properties to check for the presence of their values.\n\nThe method also references the `_matches_type()` utility for type checking and manages errors through an `errs` list, which aggregates any validation issues before raising them.\n\nRaises:\n- FHIRValidationError: If properties have incorrect types or if required properties fail to provide values. \n\nReturns:\n- dict: A JSON-serializable dictionary representation of the instance.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdates the current instance of the FHIRAbstractBase class using data from a provided JSON dictionary. If the input is not a dictionary, a FHIRValidationError is raised. The method loops through each property defined in the `elementProperties()` method, validates the types and presence of required non-optional properties, and assigns values accordingly. It collects any errors encountered during the update process and raises a FHIRValidationError if any errors exist at the end.\n\nParameters:\n- jsondict (dict): A dictionary containing the JSON data to update the instance.\n\nReturns:\n- None on successful update; raises FHIRValidationError if validation errors occur.\n\nConstants:\n- valid: A set initialized with 'resourceType' to track valid property names in the input JSON.\n- found: A set of property names that were found and successfully assigned.\n- nonoptionals: A set of property names that are required but were not found in the input JSON.\n\nNote: This method relies on the `elementProperties()` method to define the properties that need to be updated and validated.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource object that includes narrative, extensions, and contained resources.\n\nThis constructor sets up basic properties for the DomainResource, which includes attributes for contained resources, extensions, modifier extensions, and a text summary. The `jsondict` parameter allows for initializing the object with data from a JSON representation, while the `strict` parameter controls whether to raise a FHIRValidationError on validation failures (default is True).\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the resource's properties.\n- strict (bool, optional): If True (default), invalid properties in `jsondict` raise a TypeError.\n\nAttributes initialized:\n- contained: List of contained Resource items (as dicts in JSON).\n- extension: List of additional Extension items (as dicts in JSON).\n- modifierExtension: List of mandatory Extension items (as dicts in JSON).\n- text: Textual summary of the resource, suitable for human interpretation, represented as a Narrative (as dict in JSON).\n\nThis constructor leverages the parent class `resource.Resource` for additional initialization.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of property descriptors for the DomainResource, extending the properties of the base Resource class. The method retrieves properties using the superclass's `elementProperties` method and adds the following specific properties: `contained`, `extension`, `modifierExtension`, and `text`. \n\n- `contained`: A list of contained resources (of type `Resource`).\n- `extension`: A list of additional content defined by implementations (of type `Extension`).\n- `modifierExtension`: A list of extensions that cannot be ignored (of type `Extension`).\n- `text`: A summary of the resource for human interpretation (of type `Narrative`).\n\nThe return value is a list of tuples, where each tuple represents a property name, its JSON key, the expected type, whether it is repeated, any conditions, and whether it is a required field. This method is crucial for properly serializing and deserializing the DomainResource in the context of FHIR (Fast Healthcare Interoperability Resources).\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the valid properties of the Resource.\n\nThis method extends the element properties defined in the superclass `FHIRAbstractResource` to include specific attributes of the `Resource` class. The properties include:\n- `id`: A logical identifier for the resource (type `str`).\n- `implicitRules`: A set of rules under which the resource was created (type `str`).\n- `language`: The language of the resource content (type `str`).\n- `meta`: Metadata about the resource which is represented as a `Meta` object (imported from the `meta` module).\n\nReturns a list of tuples where each tuple contains the property name, corresponding JSON key, data type, whether it is required, default value, and whether it is an array. This method helps in understanding the attributes available in the Resource and their expected types while interacting with FHIR data structures.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Resource instance.\n\nThis constructor initializes the properties of the Resource class, which is the base for all FHIR resources. It accepts an optional JSON dictionary (`jsondict`) for initializing the resource attributes and a boolean flag (`strict`) to control validation behavior. If strict is True (default), invalid properties will raise a TypeError.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for resource properties.\n- strict (bool, optional): If True, raises a FHIRValidationError for any invalid properties (default is True).\n\nAttributes:\n- id (str): A logical identifier for the resource.\n- implicitRules (str): A set of rules governing content creation.\n- language (str): The language of the resource content.\n- meta (Meta): Metadata associated with the resource, defined as a dictionary in JSON format.\n\nThis constructor calls the parent class's initializer from `fhirabstractresource` to ensure proper initialization of inherited properties.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/medicinalproductpharmaceutical.py\n\n- CLASS METHOD: MedicinalProductPharmaceutical.elementProperties\n  - CLASS SIGNATURE: class MedicinalProductPharmaceutical(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of element properties for the MedicinalProductPharmaceutical class, which includes the various attributes and their types related to a pharmaceutical product's composition and dosage form. This method builds upon the base class's elementProperties method, extending it with specific attributes such as `administrableDoseForm`, `characteristics`, `device`, `identifier`, `ingredient`, `routeOfAdministration`, and `unitOfPresentation`. Each attribute is associated with its expected data type, such as `CodeableConcept` for `administrableDoseForm` and `unitOfPresentation`, and lists or references for others like `characteristics` and `device`. The method does not take any parameters and returns a list of tuples, each representing a property name, its corresponding JSON key, the expected type, and additional flags indicating their multiplicity (True for lists and False for singular values). It relies on imported classes such as `codeableconcept.CodeableConcept`, `fhirreference.FHIRReference`, and `identifier.Identifier`, which define the structure and validation of the respective properties in the context of the FHIR (Fast Healthcare Interoperability Resources) standard.\n\"\"\"\n```\n\n- CLASS METHOD: MedicinalProductPharmaceutical.__init__\n  - CLASS SIGNATURE: class MedicinalProductPharmaceutical(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a MedicinalProductPharmaceutical instance, which represents a pharmaceutical product characterized by its composition and dose form. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing initial values for the instance's properties, corresponding to FHIR standards.\n- strict (bool): If True (default), raises a FHIRValidationError on validation errors; if False, allows for leniency in validation.\n\nAttributes:\n- administrableDoseForm (CodeableConcept): The administrable form of the pharmaceutical product post-reconstitution.\n- characteristics (List[MedicinalProductPharmaceuticalCharacteristics]): Specific characteristics of the product, such as onset of action.\n- device (List[FHIRReference]): References to any accompanying devices.\n- identifier (List[Identifier]): Identifiers for the medicinal product.\n- ingredient (List[FHIRReference]): Ingredients present in the medicinal product.\n- routeOfAdministration (List[MedicinalProductPharmaceuticalRouteOfAdministration]): Routes by which the product can be administered.\n- unitOfPresentation (CodeableConcept): Details regarding the presentation or packaging of the product.\n\nThis class extends `domainresource.DomainResource`, leveraging its initialization for managing FHIR resource elements.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/medicinalproductpharmaceutical.py": "from . import domainresource\n\nclass MedicinalProductPharmaceutical(domainresource.DomainResource):\n    \"\"\" A pharmaceutical product described in terms of its composition and dose\n    form.\n    \"\"\"\n    resource_type = 'MedicinalProductPharmaceutical'\nfrom . import backboneelement\n\nclass MedicinalProductPharmaceuticalCharacteristics(backboneelement.BackboneElement):\n    \"\"\" Characteristics e.g. a products onset of action.\n    \"\"\"\n    resource_type = 'MedicinalProductPharmaceuticalCharacteristics'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' A coded characteristic.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.status = None\n        ' The status of characteristic e.g. assigned or pending.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(MedicinalProductPharmaceuticalCharacteristics, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalCharacteristics, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('status', 'status', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass MedicinalProductPharmaceuticalRouteOfAdministration(backboneelement.BackboneElement):\n    \"\"\" The path by which the pharmaceutical product is taken into or makes contact\n    with the body.\n    \"\"\"\n    resource_type = 'MedicinalProductPharmaceuticalRouteOfAdministration'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Coded expression for the route.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.firstDose = None\n        ' The first dose (dose quantity) administered in humans can be\\n        specified, for a product under investigation, using a numerical\\n        value and its unit of measurement.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.maxDosePerDay = None\n        ' The maximum dose per day (maximum dose quantity to be administered\\n        in any one 24-h period) that can be administered as per the\\n        protocol referenced in the clinical trial authorisation.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.maxDosePerTreatmentPeriod = None\n        ' The maximum dose per treatment period that can be administered as\\n        per the protocol referenced in the clinical trial authorisation.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.maxSingleDose = None\n        ' The maximum single dose that can be administered as per the\\n        protocol of a clinical trial can be specified using a numerical\\n        value and its unit of measurement.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.maxTreatmentPeriod = None\n        ' The maximum treatment period during which an Investigational\\n        Medicinal Product can be administered as per the protocol\\n        referenced in the clinical trial authorisation.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.targetSpecies = None\n        ' A species for which this route applies.\\n        List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies` items (represented as `dict` in JSON). '\n        super(MedicinalProductPharmaceuticalRouteOfAdministration, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministration, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('firstDose', 'firstDose', quantity.Quantity, False, None, False), ('maxDosePerDay', 'maxDosePerDay', quantity.Quantity, False, None, False), ('maxDosePerTreatmentPeriod', 'maxDosePerTreatmentPeriod', ratio.Ratio, False, None, False), ('maxSingleDose', 'maxSingleDose', quantity.Quantity, False, None, False), ('maxTreatmentPeriod', 'maxTreatmentPeriod', duration.Duration, False, None, False), ('targetSpecies', 'targetSpecies', MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, True, None, False)])\n        return js\n\nclass MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(backboneelement.BackboneElement):\n    \"\"\" A species for which this route applies.\n    \"\"\"\n    resource_type = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Coded expression for the species.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.withdrawalPeriod = None\n        ' A species specific time during which consumption of animal product\\n        is not appropriate.\\n        List of `MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod` items (represented as `dict` in JSON). '\n        super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, True), ('withdrawalPeriod', 'withdrawalPeriod', MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, True, None, False)])\n        return js\n\nclass MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(backboneelement.BackboneElement):\n    \"\"\" A species specific time during which consumption of animal product is not\n    appropriate.\n    \"\"\"\n    resource_type = 'MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.supportingInformation = None\n        ' Extra information about the withdrawal period.\\n        Type `str`. '\n        self.tissue = None\n        ' Coded expression for the type of tissue for which the withdrawal\\n        period applues, e.g. meat, milk.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' A value for the time.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod, self).elementProperties()\n        js.extend([('supportingInformation', 'supportingInformation', str, False, None, False), ('tissue', 'tissue', codeableconcept.CodeableConcept, False, None, True), ('value', 'value', quantity.Quantity, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import duration\nfrom . import fhirreference\nfrom . import identifier\nfrom . import quantity\nfrom . import ratio"
  }
}