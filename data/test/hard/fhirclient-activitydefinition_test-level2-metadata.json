{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-activitydefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/activitydefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import activitydefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ActivityDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        return activitydefinition.ActivityDefinition(js)\n    \n    def testActivityDefinition1(self):\n        inst = self.instantiate_from(\"activitydefinition-supplyrequest-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ActivityDefinition instance\")\n        self.implActivityDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        inst2 = activitydefinition.ActivityDefinition(js)\n        self.implActivityDefinition1(inst2)\n    \n    def implActivityDefinition1(self, inst):\n        self.assertEqual(inst.code.coding[0].code, \"BlueTubes\")\n        self.assertEqual(inst.code.coding[0].display, \"Blood collect tubes blue cap\")\n        self.assertEqual(inst.description, \"10 Blood collect tubes blue cap\")\n        self.assertEqual(inst.id, \"blood-tubes-supply\")\n        self.assertEqual(inst.kind, \"SupplyRequest\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.purpose, \"Describes a request for 10 Blood collection tubes with blue caps.\")\n        self.assertEqual(inst.quantity.value, 10)\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.transform, \"StructureMap/supplyrequest-transform\")\n    \n    def testActivityDefinition2(self):\n        inst = self.instantiate_from(\"activitydefinition-predecessor-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ActivityDefinition instance\")\n        self.implActivityDefinition2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        inst2 = activitydefinition.ActivityDefinition(js)\n        self.implActivityDefinition2(inst2)\n    \n    def implActivityDefinition2(self, inst):\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2016-03-12\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2016-03-12\")\n        self.assertEqual(inst.author[0].name, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.author[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.author[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.author[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.author[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.code.coding[0].code, \"306206005\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.text, \"Referral to service (procedure)\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.contact[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.copyright, \"\u00a9 Copyright 2016 Motive Medical Intelligence. All rights reserved.\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-03-03T14:06:00Z\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-03-03T14:06:00Z\")\n        self.assertEqual(inst.description, \"refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2017-12-31\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2017-12-31\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2016-01-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2016-01-01\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"referralPrimaryCareMentalHealth-initial\")\n        self.assertEqual(inst.identifier[0].system, \"http://motivemi.com/artifacts\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.kind, \"ServiceRequest\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2016-08-15\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2016-08-15\")\n        self.assertEqual(inst.name, \"ReferralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.participant[0].type, \"practitioner\")\n        self.assertEqual(inst.publisher, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Practice Guideline for the Treatment of Patients with Major Depressive Disorder\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"citation\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"ActivityDefinition/referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"successor\")\n        self.assertEqual(inst.status, \"retired\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Referral to Primary Care Mental Health\")\n        self.assertEqual(inst.topic[0].text, \"Mental Health Referral\")\n        self.assertEqual(inst.url, \"http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.useContext[0].code.code, \"age\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"D000328\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Adult\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"https://meshb.nlm.nih.gov\")\n        self.assertEqual(inst.useContext[1].code.code, \"focus\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, \"87512008\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, \"Mild major depression\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[2].code.code, \"focus\")\n        self.assertEqual(inst.useContext[2].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, \"40379007\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, \"Major depression, recurrent, mild\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[3].code.code, \"focus\")\n        self.assertEqual(inst.useContext[3].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, \"225444004\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, \"At risk for suicide (finding)\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[4].code.code, \"focus\")\n        self.assertEqual(inst.useContext[4].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, \"306206005\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, \"Referral to service (procedure)\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[5].code.code, \"user\")\n        self.assertEqual(inst.useContext[5].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, \"309343006\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, \"Physician\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[6].code.code, \"venue\")\n        self.assertEqual(inst.useContext[6].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, \"440655000\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, \"Outpatient environment\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testActivityDefinition3(self):\n        inst = self.instantiate_from(\"activitydefinition-medicationorder-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ActivityDefinition instance\")\n        self.implActivityDefinition3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        inst2 = activitydefinition.ActivityDefinition(js)\n        self.implActivityDefinition3(inst2)\n    \n    def implActivityDefinition3(self, inst):\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2016-03-12\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2016-03-12\")\n        self.assertEqual(inst.author[0].name, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.author[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.author[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.author[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.author[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.contact[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.contained[0].id, \"citalopramMedication\")\n        self.assertEqual(inst.contained[1].id, \"citalopramSubstance\")\n        self.assertEqual(inst.copyright, \"\u00a9 Copyright 2016 Motive Medical Intelligence. All rights reserved.\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-08-15\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-08-15\")\n        self.assertEqual(inst.description, \"Citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills\")\n        self.assertEqual(inst.dosage[0].doseAndRate[0].doseQuantity.unit, \"{tbl}\")\n        self.assertEqual(inst.dosage[0].doseAndRate[0].doseQuantity.value, 1)\n        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].code, \"ordered\")\n        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].display, \"Ordered\")\n        self.assertEqual(inst.dosage[0].doseAndRate[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/dose-rate-type\")\n        self.assertEqual(inst.dosage[0].route.coding[0].code, \"26643006\")\n        self.assertEqual(inst.dosage[0].route.coding[0].display, \"Oral route (qualifier value)\")\n        self.assertEqual(inst.dosage[0].route.text, \"Oral route (qualifier value)\")\n        self.assertEqual(inst.dosage[0].text, \"1 tablet oral 1 time daily\")\n        self.assertEqual(inst.dosage[0].timing.repeat.frequency, 1)\n        self.assertEqual(inst.dosage[0].timing.repeat.period, 1)\n        self.assertEqual(inst.dosage[0].timing.repeat.periodUnit, \"d\")\n        self.assertEqual(inst.dynamicValue[0].expression.description, \"dispenseRequest.numberOfRepeatsAllowed is three (3)\")\n        self.assertEqual(inst.dynamicValue[0].expression.expression, \"3\")\n        self.assertEqual(inst.dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.dynamicValue[0].path, \"dispenseRequest.numberOfRepeatsAllowed\")\n        self.assertEqual(inst.dynamicValue[1].expression.description, \"dispenseRequest.quantity is thirty (30) tablets\")\n        self.assertEqual(inst.dynamicValue[1].expression.expression, \"30 '{tbl}'\")\n        self.assertEqual(inst.dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.dynamicValue[1].path, \"dispenseRequest.quantity\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2017-12-31\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2017-12-31\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2016-01-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2016-01-01\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"citalopramPrescription\")\n        self.assertEqual(inst.identifier[0].system, \"http://motivemi.com\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"citalopramPrescription\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.kind, \"MedicationRequest\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2016-08-15\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2016-08-15\")\n        self.assertEqual(inst.name, \"CitalopramPrescription\")\n        self.assertEqual(inst.publisher, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.purpose, \"Defines a guideline supported prescription for the treatment of depressive disorders\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Practice Guideline for the Treatment of Patients with Major Depressive Disorder\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"citation\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"#citalopramMedication\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"composed-of\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Citalopram Prescription\")\n        self.assertEqual(inst.topic[0].text, \"Mental Health Treatment\")\n        self.assertEqual(inst.url, \"http://motivemi.com/artifacts/ActivityDefinition/citalopramPrescription\")\n        self.assertEqual(inst.usage, \"This activity definition is used as part of various suicide risk order sets\")\n        self.assertEqual(inst.useContext[0].code.code, \"age\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"D000328\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Adult\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"https://meshb.nlm.nih.gov\")\n        self.assertEqual(inst.useContext[1].code.code, \"focus\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, \"87512008\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, \"Mild major depression\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[2].code.code, \"focus\")\n        self.assertEqual(inst.useContext[2].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, \"40379007\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, \"Major depression, recurrent, mild\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[3].code.code, \"focus\")\n        self.assertEqual(inst.useContext[3].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, \"225444004\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, \"At risk for suicide (finding)\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[4].code.code, \"focus\")\n        self.assertEqual(inst.useContext[4].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, \"306206005\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, \"Referral to service (procedure)\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[5].code.code, \"user\")\n        self.assertEqual(inst.useContext[5].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, \"309343006\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, \"Physician\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[6].code.code, \"venue\")\n        self.assertEqual(inst.useContext[6].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, \"440655000\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, \"Outpatient environment\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testActivityDefinition4(self):\n        inst = self.instantiate_from(\"activitydefinition-servicerequest-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ActivityDefinition instance\")\n        self.implActivityDefinition4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        inst2 = activitydefinition.ActivityDefinition(js)\n        self.implActivityDefinition4(inst2)\n    \n    def implActivityDefinition4(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"17401000\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Heart valve structure\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.coding[0].code, \"34068001\")\n        self.assertEqual(inst.code.coding[0].display, \"Heart valve replacement\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.description, \"Heart valve replacement\")\n        self.assertEqual(inst.id, \"heart-valve-replacement\")\n        self.assertEqual(inst.kind, \"ServiceRequest\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.participant[0].role.coding[0].code, \"207RI0011X\")\n        self.assertEqual(inst.participant[0].role.coding[0].display, \"Interventional Cardiology\")\n        self.assertEqual(inst.participant[0].role.coding[0].system, \"http://nucc.org/provider-taxonomy\")\n        self.assertEqual(inst.participant[0].role.text, \"Interventional Cardiology\")\n        self.assertEqual(inst.participant[0].type, \"practitioner\")\n        self.assertEqual(inst.purpose, \"Describes the proposal to perform a Heart Valve replacement.\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.topic[0].coding[0].code, \"34068001\")\n        self.assertEqual(inst.topic[0].coding[0].display, \"Heart valve replacement\")\n        self.assertEqual(inst.topic[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[0].code.code, \"age\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"D000328\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Adult\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"https://meshb.nlm.nih.gov\")\n        self.assertEqual(inst.useContext[1].code.code, \"user\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, \"309343006\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, \"Physician\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n    \n    def testActivityDefinition5(self):\n        inst = self.instantiate_from(\"activitydefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ActivityDefinition instance\")\n        self.implActivityDefinition5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ActivityDefinition\", js[\"resourceType\"])\n        inst2 = activitydefinition.ActivityDefinition(js)\n        self.implActivityDefinition5(inst2)\n    \n    def implActivityDefinition5(self, inst):\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2017-03-01\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2017-03-01\")\n        self.assertEqual(inst.author[0].name, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.author[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.author[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.author[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.author[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.code.coding[0].code, \"306206005\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.text, \"Referral to service (procedure)\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.contact[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.copyright, \"\u00a9 Copyright 2016 Motive Medical Intelligence. All rights reserved.\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-03-03T14:06:00Z\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-03-03T14:06:00Z\")\n        self.assertEqual(inst.description, \"refer to primary care mental-health integrated care program for evaluation and treatment of mental health conditions now\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2017-12-31\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2017-12-31\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2017-03-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2017-03-01\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.identifier[0].system, \"http://motivemi.com/artifacts\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.kind, \"ServiceRequest\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2017-03-01\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2017-03-01\")\n        self.assertEqual(inst.name, \"ReferralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.participant[0].type, \"practitioner\")\n        self.assertEqual(inst.publisher, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Practice Guideline for the Treatment of Patients with Major Depressive Disorder\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"citation\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"ActivityDefinition/referralPrimaryCareMentalHealth-initial\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"predecessor\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Referral to Primary Care Mental Health\")\n        self.assertEqual(inst.topic[0].text, \"Mental Health Referral\")\n        self.assertEqual(inst.url, \"http://motivemi.com/artifacts/ActivityDefinition/referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.useContext[0].code.code, \"age\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"D000328\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Adult\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"https://meshb.nlm.nih.gov\")\n        self.assertEqual(inst.useContext[1].code.code, \"focus\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, \"87512008\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, \"Mild major depression\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[2].code.code, \"focus\")\n        self.assertEqual(inst.useContext[2].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, \"40379007\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, \"Major depression, recurrent, mild\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[3].code.code, \"focus\")\n        self.assertEqual(inst.useContext[3].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, \"225444004\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, \"At risk for suicide (finding)\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[4].code.code, \"focus\")\n        self.assertEqual(inst.useContext[4].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, \"306206005\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, \"Referral to service (procedure)\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[5].code.code, \"user\")\n        self.assertEqual(inst.useContext[5].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, \"309343006\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, \"Physician\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[6].code.code, \"venue\")\n        self.assertEqual(inst.useContext[6].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, \"440655000\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, \"Outpatient environment\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"1.1.0\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/activitydefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ActivityDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ActivityDefinition(domainresource.DomainResource):\n    \"\"\" The definition of a specific activity to be taken, independent of any\n    particular patient or context.\n    \n    This resource allows for the definition of some activity to be performed,\n    independent of a particular patient, practitioner, or other performance\n    context.\n    \"\"\"\n    \n    resource_type = \"ActivityDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the activity definition was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" What part of body to perform on.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Detail type of activity.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the activity definition.\n        Type `str`. \"\"\"\n        \n        self.doNotPerform = None\n        \"\"\" True if the activity should not be performed.\n        Type `bool`. \"\"\"\n        \n        self.dosage = None\n        \"\"\" Detailed dosage instructions.\n        List of `Dosage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dynamicValue = None\n        \"\"\" Dynamic aspects of the definition.\n        List of `ActivityDefinitionDynamicValue` items (represented as `dict` in JSON). \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the activity definition is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the activity definition.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.intent = None\n        \"\"\" proposal | plan | directive | order | original-order | reflex-order\n        | filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for activity definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.kind = None\n        \"\"\" Kind of resource.\n        Type `str`. \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the activity definition was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.library = None\n        \"\"\" Logic used by the activity definition.\n        List of `str` items. \"\"\"\n        \n        self.location = None\n        \"\"\" Where it should happen.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this activity definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.observationRequirement = None\n        \"\"\" What observations are required to perform this action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.observationResultRequirement = None\n        \"\"\" What observations must be produced by this action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.participant = None\n        \"\"\" Who should participate in the action.\n        List of `ActivityDefinitionParticipant` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.productCodeableConcept = None\n        \"\"\" What's administered/supplied.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.productReference = None\n        \"\"\" What's administered/supplied.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.profile = None\n        \"\"\" What profile the resource needs to conform to.\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this activity definition is defined.\n        Type `str`. \"\"\"\n        \n        self.quantity = None\n        \"\"\" How much is administered/consumed/supplied.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.specimenRequirement = None\n        \"\"\" What specimens are required to perform this action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" Type of individual the activity definition is intended for.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" Type of individual the activity definition is intended for.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the activity definition.\n        Type `str`. \"\"\"\n        \n        self.timingAge = None\n        \"\"\" When activity is to occur.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingDateTime = None\n        \"\"\" When activity is to occur.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timingDuration = None\n        \"\"\" When activity is to occur.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" When activity is to occur.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingRange = None\n        \"\"\" When activity is to occur.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingTiming = None\n        \"\"\" When activity is to occur.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this activity definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" E.g. Education, Treatment, Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.transform = None\n        \"\"\" Transform to apply the template.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this activity definition, represented as a\n        URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" Describes the clinical usage of the activity definition.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the activity definition.\n        Type `str`. \"\"\"\n        \n        super(ActivityDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ActivityDefinition, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"doNotPerform\", \"doNotPerform\", bool, False, None, False),\n            (\"dosage\", \"dosage\", dosage.Dosage, True, None, False),\n            (\"dynamicValue\", \"dynamicValue\", ActivityDefinitionDynamicValue, True, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"intent\", \"intent\", str, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"kind\", \"kind\", str, False, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"library\", \"library\", str, True, None, False),\n            (\"location\", \"location\", fhirreference.FHIRReference, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"observationRequirement\", \"observationRequirement\", fhirreference.FHIRReference, True, None, False),\n            (\"observationResultRequirement\", \"observationResultRequirement\", fhirreference.FHIRReference, True, None, False),\n            (\"participant\", \"participant\", ActivityDefinitionParticipant, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"productCodeableConcept\", \"productCodeableConcept\", codeableconcept.CodeableConcept, False, \"product\", False),\n            (\"productReference\", \"productReference\", fhirreference.FHIRReference, False, \"product\", False),\n            (\"profile\", \"profile\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"quantity\", \"quantity\", quantity.Quantity, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"specimenRequirement\", \"specimenRequirement\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"timingAge\", \"timingAge\", age.Age, False, \"timing\", False),\n            (\"timingDateTime\", \"timingDateTime\", fhirdatetime.FHIRDateTime, False, \"timing\", False),\n            (\"timingDuration\", \"timingDuration\", duration.Duration, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"timingRange\", \"timingRange\", range.Range, False, \"timing\", False),\n            (\"timingTiming\", \"timingTiming\", timing.Timing, False, \"timing\", False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"transform\", \"transform\", str, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"usage\", \"usage\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ActivityDefinitionDynamicValue(backboneelement.BackboneElement):\n    \"\"\" Dynamic aspects of the definition.\n    \n    Dynamic values that will be evaluated to produce values for elements of the\n    resulting resource. For example, if the dosage of a medication must be\n    computed based on the patient's weight, a dynamic value would be used to\n    specify an expression that calculated the weight, and the path on the\n    request resource that would contain the result.\n    \"\"\"\n    \n    resource_type = \"ActivityDefinitionDynamicValue\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.expression = None\n        \"\"\" An expression that provides the dynamic value for the customization.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.path = None\n        \"\"\" The path to the element to be set dynamically.\n        Type `str`. \"\"\"\n        \n        super(ActivityDefinitionDynamicValue, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ActivityDefinitionDynamicValue, self).elementProperties()\n        js.extend([\n            (\"expression\", \"expression\", expression.Expression, False, None, True),\n            (\"path\", \"path\", str, False, None, True),\n        ])\n        return js\n\n\nclass ActivityDefinitionParticipant(backboneelement.BackboneElement):\n    \"\"\" Who should participate in the action.\n    \n    Indicates who should participate in performing the action described.\n    \"\"\"\n    \n    resource_type = \"ActivityDefinitionParticipant\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.role = None\n        \"\"\" E.g. Nurse, Surgeon, Parent, etc..\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" patient | practitioner | related-person | device.\n        Type `str`. \"\"\"\n        \n        super(ActivityDefinitionParticipant, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ActivityDefinitionParticipant, self).elementProperties()\n        js.extend([\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import age\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\nfrom . import usagecontext\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance for working with FHIR date representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date in ISO 8601 format. If provided, it must be a string that matches a specific regex pattern defined in the class. If the format is invalid, a ValueError is raised. If not provided, the date attribute is initialized to None.\n\nAttributes Initialized:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation extracted from jsonval if valid.\n- origval (Union[str, None]): Stores the original input string (jsonval) for reference or output via the as_json() method.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regex pattern that validates the format of the provided FHIR date string.\n\nThis constructor sets up the basic structure for a FHIRDate object, enabling secure handling of date values in line with FHIR specifications.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance for working with FHIR date representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date in ISO 8601 format. If provided, it must be a string that matches a specific regex pattern defined in the class. If the format is invalid, a ValueError is raised. If not provided, the date attribute is initialized to None.\n\nAttributes Initialized:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation extracted from jsonval if valid.\n- origval (Union[str, None]): Stores the original input string (jsonval) for reference or output via the as_json() method.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regex pattern that validates the format of the provided FHIR date string.\n\nThis constructor sets up the basic structure for a FHIRDate object, enabling secure handling of date values in line with FHIR specifications.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Handles attribute setting for the FHIRDate instance, specifically for properties related to FHIR date representation.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the property being set is either 'date' or the private field defined by _FIELD, it clears the original JSON value (origval), ensuring consistency between the 'origval' and 'date' attributes. For properties other than 'date', it sets them directly without additional logic.\n\nConstants:\n- _FIELD (str): Defined as \"date\", used to maintain synchronization between the origval and date attributes.\n\nThis method overrides the default behavior of __setattr__ to introduce special handling for specific attributes, ensuring that changes to the 'date' and origval fields are managed together.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Handles attribute setting for the FHIRDate instance, specifically for properties related to FHIR date representation.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the property being set is either 'date' or the private field defined by _FIELD, it clears the original JSON value (origval), ensuring consistency between the 'origval' and 'date' attributes. For properties other than 'date', it sets them directly without additional logic.\n\nConstants:\n- _FIELD (str): Defined as \"date\", used to maintain synchronization between the origval and date attributes.\n\nThis method overrides the default behavior of __setattr__ to introduce special handling for specific attributes, ensuring that changes to the 'date' and origval fields are managed together.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance, if available. If the original JSON string is not present, it will return the standardized ISO 8601 string representation of the date, as provided by the `isostring` property. This method interacts with the `origval` attribute, which stores the initial input string, and the `isostring` property, which processes the date into an ISO format. This ensures that any date representations conforming to FHIR standards can be accurately retrieved or converted as needed.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance, if available. If the original JSON string is not present, it will return the standardized ISO 8601 string representation of the date, as provided by the `isostring` property. This method interacts with the `origval` attribute, which stores the initial input string, and the `isostring` property, which processes the date into an ISO format. This ensures that any date representations conforming to FHIR standards can be accurately retrieved or converted as needed.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate._from_string": {
        "code": "    def _from_string(value: str) -> Any:\n        \"\"\"Converts a FHIR date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in the FHIR format. The string is expected to match the regex pattern defined in the class. This includes full dates as well as partial dates of reduced precision, such as \"2024\" or \"2024-12\".\n\nReturns:\n- Any: A `datetime.date` object corresponding to the input FHIR date string. If the input string is in a recognized format, it will be transformed into the earliest possible date representation (e.g., \"2024\" becomes \"2024-01-01\").\n\nDependencies:\n- This method relies on the `_parse_date` static method to handle the actual conversion. The `_parse_date` method utilizes the `_parse_partial` method to accommodate partial date formats by filling in missing components with default values. The `_REGEX` constant defined in the `FHIRDate` class ensures validation of the input string before processing.\"\"\"\n        return FHIRDate._parse_date(value)",
        "docstring": "Converts a FHIR date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in the FHIR format. The string is expected to match the regex pattern defined in the class. This includes full dates as well as partial dates of reduced precision, such as \"2024\" or \"2024-12\".\n\nReturns:\n- Any: A `datetime.date` object corresponding to the input FHIR date string. If the input string is in a recognized format, it will be transformed into the earliest possible date representation (e.g., \"2024\" becomes \"2024-01-01\").\n\nDependencies:\n- This method relies on the `_parse_date` static method to handle the actual conversion. The `_parse_date` method utilizes the `_parse_partial` method to accommodate partial date formats by filling in missing components with default values. The `_REGEX` constant defined in the `FHIRDate` class ensures validation of the input string before processing.",
        "signature": "def _from_string(value: str) -> Any:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/activitydefinition.py": {
      "ActivityDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an ActivityDefinition instance, representing a definition of a specific activity to be taken within a healthcare context, independent of a particular patient or situation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It can contain various fields related to the activity definition.\n- strict (bool, optional): When set to True (default), invalid fields in the jsondict will raise a TypeError, otherwise they will be ignored.\n\nAttributes initialized:\n- approvalDate: Date when the activity definition was approved.\n- author: List of authors of the activity definition.\n- bodySite: List of body sites relevant to the activity.\n- code: Type of activity.\n- contact: Publisher contact details.\n- copyright: Usage restrictions.\n- date: Last change date.\n- description: Activity definition description.\n- doNotPerform: Indicates if the activity should not be performed.\n- dosage: Dosage instructions.\n- dynamicValue: Evaluation expressions for dynamic properties.\n- editor: List of content editors.\n- effectivePeriod: Period when the definition is applicable.\n- endorser: Endorsement details.\n- experimental: If the activity is experimental.\n- identifier: Additional identifiers for the definition.\n- intent: Specified intent types for the activity.\n- jurisdiction: Applicable jurisdiction.\n- kind: Type of resource.\n- lastReviewDate: Last review date.\n- library: Associated logic.\n- location: Specified location for the activity.\n- name: Computer-friendly name for the definition.\n- observationRequirement: Required observations.\n- observationResultRequirement: Required observation results.\n- participant: List of participants in the action.\n- priority: Activity priority levels.\n- productCodeableConcept: Conceptual information about the product.\n- productReference: Reference to the product.\n- profile: Required resource profiles.\n- publisher: Publisher's name.\n- purpose: Purpose for the activity definition.\n- quantity: Administered quantity.\n- relatedArtifact: Additional documentation references.\n- reviewer: List of reviewers of content.\n- specimenRequirement: Required specimens.\n- status: Current status of the activity definition.\n- subjectCodeableConcept: Type of subject intended for the activity.\n- subjectReference: Reference to the target subject.\n- subtitle: Subordinate title.\n- timingAge, timingDateTime, timingDuration, timingPeriod, timingRange, timingTiming: Timing specifications for the activity.\n- title: Human-friendly title for the definition.\n- topic: List of topics relevant to the activity.\n- transform: Transformation details for templates.\n- url: Canonical identifier for the activity definition.\n- usage: Describes clinical usage.\n- useContext: Contexts that the content supports.\n- version: Business version of the definition.\n\nDependencies:\nThe implementation relies on various data types from the FHIR model (e.g., FHIRDate, CodeableConcept, FHIRReference, etc.) that ensure the correct representation of the healthcare activity attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the activity definition was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' What part of body to perform on.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.code = None\n        ' Detail type of activity.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the activity definition.\\n        Type `str`. '\n        self.doNotPerform = None\n        ' True if the activity should not be performed.\\n        Type `bool`. '\n        self.dosage = None\n        ' Detailed dosage instructions.\\n        List of `Dosage` items (represented as `dict` in JSON). '\n        self.dynamicValue = None\n        ' Dynamic aspects of the definition.\\n        List of `ActivityDefinitionDynamicValue` items (represented as `dict` in JSON). '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the activity definition is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.identifier = None\n        ' Additional identifier for the activity definition.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.intent = None\n        ' proposal | plan | directive | order | original-order | reflex-order\\n        | filler-order | instance-order | option.\\n        Type `str`. '\n        self.jurisdiction = None\n        ' Intended jurisdiction for activity definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.kind = None\n        ' Kind of resource.\\n        Type `str`. '\n        self.lastReviewDate = None\n        ' When the activity definition was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.library = None\n        ' Logic used by the activity definition.\\n        List of `str` items. '\n        self.location = None\n        ' Where it should happen.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.name = None\n        ' Name for this activity definition (computer friendly).\\n        Type `str`. '\n        self.observationRequirement = None\n        ' What observations are required to perform this action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.observationResultRequirement = None\n        ' What observations must be produced by this action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.participant = None\n        ' Who should participate in the action.\\n        List of `ActivityDefinitionParticipant` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.productCodeableConcept = None\n        \" What's administered/supplied.\\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\n        self.productReference = None\n        \" What's administered/supplied.\\n        Type `FHIRReference` (represented as `dict` in JSON). \"\n        self.profile = None\n        ' What profile the resource needs to conform to.\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this activity definition is defined.\\n        Type `str`. '\n        self.quantity = None\n        ' How much is administered/consumed/supplied.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.specimenRequirement = None\n        ' What specimens are required to perform this action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' Type of individual the activity definition is intended for.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' Type of individual the activity definition is intended for.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate title of the activity definition.\\n        Type `str`. '\n        self.timingAge = None\n        ' When activity is to occur.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.timingDateTime = None\n        ' When activity is to occur.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timingDuration = None\n        ' When activity is to occur.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.timingPeriod = None\n        ' When activity is to occur.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.timingRange = None\n        ' When activity is to occur.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.timingTiming = None\n        ' When activity is to occur.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this activity definition (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' E.g. Education, Treatment, Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.transform = None\n        ' Transform to apply the template.\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this activity definition, represented as a\\n        URI (globally unique).\\n        Type `str`. '\n        self.usage = None\n        ' Describes the clinical usage of the activity definition.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the activity definition.\\n        Type `str`. '\n        super(ActivityDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an ActivityDefinition instance, representing a definition of a specific activity to be taken within a healthcare context, independent of a particular patient or situation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It can contain various fields related to the activity definition.\n- strict (bool, optional): When set to True (default), invalid fields in the jsondict will raise a TypeError, otherwise they will be ignored.\n\nAttributes initialized:\n- approvalDate: Date when the activity definition was approved.\n- author: List of authors of the activity definition.\n- bodySite: List of body sites relevant to the activity.\n- code: Type of activity.\n- contact: Publisher contact details.\n- copyright: Usage restrictions.\n- date: Last change date.\n- description: Activity definition description.\n- doNotPerform: Indicates if the activity should not be performed.\n- dosage: Dosage instructions.\n- dynamicValue: Evaluation expressions for dynamic properties.\n- editor: List of content editors.\n- effectivePeriod: Period when the definition is applicable.\n- endorser: Endorsement details.\n- experimental: If the activity is experimental.\n- identifier: Additional identifiers for the definition.\n- intent: Specified intent types for the activity.\n- jurisdiction: Applicable jurisdiction.\n- kind: Type of resource.\n- lastReviewDate: Last review date.\n- library: Associated logic.\n- location: Specified location for the activity.\n- name: Computer-friendly name for the definition.\n- observationRequirement: Required observations.\n- observationResultRequirement: Required observation results.\n- participant: List of participants in the action.\n- priority: Activity priority levels.\n- productCodeableConcept: Conceptual information about the product.\n- productReference: Reference to the product.\n- profile: Required resource profiles.\n- publisher: Publisher's name.\n- purpose: Purpose for the activity definition.\n- quantity: Administered quantity.\n- relatedArtifact: Additional documentation references.\n- reviewer: List of reviewers of content.\n- specimenRequirement: Required specimens.\n- status: Current status of the activity definition.\n- subjectCodeableConcept: Type of subject intended for the activity.\n- subjectReference: Reference to the target subject.\n- subtitle: Subordinate title.\n- timingAge, timingDateTime, timingDuration, timingPeriod, timingRange, timingTiming: Timing specifications for the activity.\n- title: Human-friendly title for the definition.\n- topic: List of topics relevant to the activity.\n- transform: Transformation details for templates.\n- url: Canonical identifier for the activity definition.\n- usage: Describes clinical usage.\n- useContext: Contexts that the content supports.\n- version: Business version of the definition.\n\nDependencies:\nThe implementation relies on various data types from the FHIR model (e.g., FHIRDate, CodeableConcept, FHIRReference, etc.) that ensure the correct representation of the healthcare activity attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ActivityDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of the FHIRAbstractBase class to a JSON dictionary by examining its registered properties returned by `elementProperties()`. It checks that all required properties (non-optional) are provided and that the types of the properties match the expected types. \n\n    If any validation errors occur, such as incorrect types or missing non-optional properties, a FHIRValidationError is raised containing details of the errors encountered.\n\n    Returns:\n        A validated dictionary representation of the instance suitable for JSON serialization.\n\n    Raises:\n        FHIRValidationError: If validation rules are not adhered to, including:\n            - Properties having the wrong type.\n            - Required properties being empty or missing.\n\n    Constants and Variables:\n        - `js`: A dictionary that accumulates serialized property data.\n        - `errs`: A list that collects any validation errors encountered during serialization.\n        - `found`: A set used to track which properties have been set during the serialization process.\n        - `nonoptionals`: A set that gathers the names of non-optional properties that must not be missing in the serialized output.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of the FHIRAbstractBase class to a JSON dictionary by examining its registered properties returned by `elementProperties()`. It checks that all required properties (non-optional) are provided and that the types of the properties match the expected types. \n\nIf any validation errors occur, such as incorrect types or missing non-optional properties, a FHIRValidationError is raised containing details of the errors encountered.\n\nReturns:\n    A validated dictionary representation of the instance suitable for JSON serialization.\n\nRaises:\n    FHIRValidationError: If validation rules are not adhered to, including:\n        - Properties having the wrong type.\n        - Required properties being empty or missing.\n\nConstants and Variables:\n    - `js`: A dictionary that accumulates serialized property data.\n    - `errs`: A list that collects any validation errors encountered during serialization.\n    - `found`: A set used to track which properties have been set during the serialization process.\n    - `nonoptionals`: A set that gathers the names of non-optional properties that must not be missing in the serialized output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the parent class, FHIRDate, for parsing.\n\nAttributes initialized:\n- datetime (Union[datetime.datetime, None]): A placeholder for a Python datetime object representing the parsed FHIR datetime. Initially set to None until a value is provided through jsonval.\n\nThis constructor leverages the FHIRDate class's initialization to handle the JSON parsing, ensuring compatibility with FHIR datetime specifications while also preparing to store the Python representation of the datetime.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the parent class, FHIRDate, for parsing.\n\nAttributes initialized:\n- datetime (Union[datetime.datetime, None]): A placeholder for a Python datetime object representing the parsed FHIR datetime. Initially set to None until a value is provided through jsonval.\n\nThis constructor leverages the FHIRDate class's initialization to handle the JSON parsing, ensuring compatibility with FHIR datetime specifications while also preparing to store the Python representation of the datetime.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource to a JSON-serializable dictionary format.\n\nThis method calls the parent class's `as_json` method to obtain the basic JSON representation and then adds the `resourceType` key, which is set to the class's `resource_type`, indicating the type of FHIR resource.\n\nReturns:\n    dict: A JSON-serializable dictionary representing the instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on `super(FHIRAbstractResource, self).as_json()` to get the base JSON representation.\n    - The class variable `resource_type` (defined as 'FHIRAbstractResource') is used to populate the `resourceType` field in the returned JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource to a JSON-serializable dictionary format.\n\nThis method calls the parent class's `as_json` method to obtain the basic JSON representation and then adds the `resourceType` key, which is set to the class's `resource_type`, indicating the type of FHIR resource.\n\nReturns:\n    dict: A JSON-serializable dictionary representing the instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on `super(FHIRAbstractResource, self).as_json()` to get the base JSON representation.\n    - The class variable `resource_type` (defined as 'FHIRAbstractResource') is used to populate the `resourceType` field in the returned JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor allows the creation of a DomainResource object with valid properties, while facilitating the initialization with a JSON dictionary if provided. If strict mode is enabled (default), any invalid properties in the JSON dictionary will raise a FHIRValidationError. The instance attributes initialized include:\n- `contained`: A list for inline contained Resource items (represented as `dict`).\n- `extension`: A list for additional content defined by implementations (represented as `Extension` items).\n- `modifierExtension`: A list for extensions that are critical and cannot be ignored (also `Extension` items).\n- `text`: A summary text for human interpretation, represented as a `Narrative` type.\n\nParameters:\n- `jsondict`: Optional; a dictionary used for initializing the instance's properties.\n- `strict`: Optional; a boolean that controls strict validation of properties, defaulting to True.\n\nAttributes like `contained`, `extension`, `modifierExtension`, and `text` are integral to ensuring the DomainResource properly adheres to FHIR specifications, providing the foundation for how resources are structured and presented.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor allows the creation of a DomainResource object with valid properties, while facilitating the initialization with a JSON dictionary if provided. If strict mode is enabled (default), any invalid properties in the JSON dictionary will raise a FHIRValidationError. The instance attributes initialized include:\n- `contained`: A list for inline contained Resource items (represented as `dict`).\n- `extension`: A list for additional content defined by implementations (represented as `Extension` items).\n- `modifierExtension`: A list for extensions that are critical and cannot be ignored (also `Extension` items).\n- `text`: A summary text for human interpretation, represented as a `Narrative` type.\n\nParameters:\n- `jsondict`: Optional; a dictionary used for initializing the instance's properties.\n- `strict`: Optional; a boolean that controls strict validation of properties, defaulting to True.\n\nAttributes like `contained`, `extension`, `modifierExtension`, and `text` are integral to ensuring the DomainResource properly adheres to FHIR specifications, providing the foundation for how resources are structured and presented.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/activitydefinition.py": {
        "ActivityDefinition.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(ActivityDefinition, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('doNotPerform', 'doNotPerform', bool, False, None, False), ('dosage', 'dosage', dosage.Dosage, True, None, False), ('dynamicValue', 'dynamicValue', ActivityDefinitionDynamicValue, True, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('intent', 'intent', str, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('kind', 'kind', str, False, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('library', 'library', str, True, None, False), ('location', 'location', fhirreference.FHIRReference, False, None, False), ('name', 'name', str, False, None, False), ('observationRequirement', 'observationRequirement', fhirreference.FHIRReference, True, None, False), ('observationResultRequirement', 'observationResultRequirement', fhirreference.FHIRReference, True, None, False), ('participant', 'participant', ActivityDefinitionParticipant, True, None, False), ('priority', 'priority', str, False, None, False), ('productCodeableConcept', 'productCodeableConcept', codeableconcept.CodeableConcept, False, 'product', False), ('productReference', 'productReference', fhirreference.FHIRReference, False, 'product', False), ('profile', 'profile', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('specimenRequirement', 'specimenRequirement', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('timingAge', 'timingAge', age.Age, False, 'timing', False), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingDuration', 'timingDuration', duration.Duration, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingRange', 'timingRange', range.Range, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('transform', 'transform', str, False, None, False), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class ActivityDefinition(domainresource.DomainResource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate._parse_date": {
          "code": "    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)",
          "docstring": "",
          "signature": "def _parse_date(value: str) -> datetime.date:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
  },
  "call_tree": {
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:testActivityDefinition1": {
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
        "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:implActivityDefinition1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:testActivityDefinition2": {
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
        "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:implActivityDefinition2": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:testActivityDefinition3": {
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
        "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:implActivityDefinition3": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {},
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:testActivityDefinition4": {
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
        "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:implActivityDefinition4": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/activitydefinition_test.py:ActivityDefinitionTests:testActivityDefinition5": {
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:instantiate_from": {
        "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/activitydefinition_test.py:ActivityDefinitionTests:implActivityDefinition5": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/activitydefinition.py:ActivityDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/activitydefinition.py:ActivityDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-activitydefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 activitydefinition.py\n        \u2502   \u2514\u2500\u2500 ActivityDefinition.__init__\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u251c\u2500\u2500 FHIRDate._from_string\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates testing and validation of the `ActivityDefinition` resource in compliance with the FHIR (Fast Healthcare Interoperability Resources) v4.0.1 standard. Its primary purpose is to ensure the integrity, accuracy, and proper representation of `ActivityDefinition` instances, which define reusable protocols or actions within a healthcare system, such as requests for supplies, medications, or services. This module provides capabilities to create, parse, and validate `ActivityDefinition` JSON resources, checking for conformity with expected structures, data integrity, and relationships to FHIR-compliant specifications. By automating these validations, the module helps developers ensure the interoperability and correctness of healthcare applications that make use of the FHIR standard, reducing the risk of misconfiguration or errors within clinical workflows.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance for working with FHIR date representations in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the FHIR date in ISO 8601 format. If provided, it must be a string that matches a specific regex pattern defined in the class. If the format is invalid, a ValueError is raised. If not provided, the date attribute is initialized to None.\n\nAttributes Initialized:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the corresponding Python date representation extracted from jsonval if valid.\n- origval (Union[str, None]): Stores the original input string (jsonval) for reference or output via the as_json() method.\n\nConstants:\n- _REGEX (re.Pattern): A compiled regex pattern that validates the format of the provided FHIR date string.\n\nThis constructor sets up the basic structure for a FHIRDate object, enabling secure handling of date values in line with FHIR specifications.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate._from_string\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def _from_string(value: str) -> Any:\n  - DOCSTRING: \n```python\n\"\"\"\nConverts a FHIR date string into a Python `datetime.date` object.\n\nParameters:\n- value (str): A string representing a date in the FHIR format. The string is expected to match the regex pattern defined in the class. This includes full dates as well as partial dates of reduced precision, such as \"2024\" or \"2024-12\".\n\nReturns:\n- Any: A `datetime.date` object corresponding to the input FHIR date string. If the input string is in a recognized format, it will be transformed into the earliest possible date representation (e.g., \"2024\" becomes \"2024-01-01\").\n\nDependencies:\n- This method relies on the `_parse_date` static method to handle the actual conversion. The `_parse_date` method utilizes the `_parse_partial` method to accommodate partial date formats by filling in missing components with default values. The `_REGEX` constant defined in the `FHIRDate` class ensures validation of the input string before processing.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance, if available. If the original JSON string is not present, it will return the standardized ISO 8601 string representation of the date, as provided by the `isostring` property. This method interacts with the `origval` attribute, which stores the initial input string, and the `isostring` property, which processes the date into an ISO format. This ensures that any date representations conforming to FHIR standards can be accurately retrieved or converted as needed.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nHandles attribute setting for the FHIRDate instance, specifically for properties related to FHIR date representation.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nIf the property being set is either 'date' or the private field defined by _FIELD, it clears the original JSON value (origval), ensuring consistency between the 'origval' and 'date' attributes. For properties other than 'date', it sets them directly without additional logic.\n\nConstants:\n- _FIELD (str): Defined as \"date\", used to maintain synchronization between the origval and date attributes.\n\nThis method overrides the default behavior of __setattr__ to introduce special handling for specific attributes, ensuring that changes to the 'date' and origval fields are managed together.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/activitydefinition.py\n\n- CLASS METHOD: ActivityDefinition.__init__\n  - CLASS SIGNATURE: class ActivityDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an ActivityDefinition instance, representing a definition of a specific activity to be taken within a healthcare context, independent of a particular patient or situation.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It can contain various fields related to the activity definition.\n- strict (bool, optional): When set to True (default), invalid fields in the jsondict will raise a TypeError, otherwise they will be ignored.\n\nAttributes initialized:\n- approvalDate: Date when the activity definition was approved.\n- author: List of authors of the activity definition.\n- bodySite: List of body sites relevant to the activity.\n- code: Type of activity.\n- contact: Publisher contact details.\n- copyright: Usage restrictions.\n- date: Last change date.\n- description: Activity definition description.\n- doNotPerform: Indicates if the activity should not be performed.\n- dosage: Dosage instructions.\n- dynamicValue: Evaluation expressions for dynamic properties.\n- editor: List of content editors.\n- effectivePeriod: Period when the definition is applicable.\n- endorser: Endorsement details.\n- experimental: If the activity is experimental.\n- identifier: Additional identifiers for the definition.\n- intent: Specified intent types for the activity.\n- jurisdiction: Applicable jurisdiction.\n- kind: Type of resource.\n- lastReviewDate: Last review date.\n- library: Associated logic.\n- location: Specified location for the activity.\n- name: Computer-friendly name for the definition.\n- observationRequirement: Required observations.\n- observationResultRequirement: Required observation results.\n- participant: List of participants in the action.\n- priority: Activity priority levels.\n- productCodeableConcept: Conceptual information about the product.\n- productReference: Reference to the product.\n- profile: Required resource profiles.\n- publisher: Publisher's name.\n- purpose: Purpose for the activity definition.\n- quantity: Administered quantity.\n- relatedArtifact: Additional documentation references.\n- reviewer: List of reviewers of content.\n- specimenRequirement: Required specimens.\n- status: Current status of the activity definition.\n- subjectCodeableConcept: Type of subject intended for the activity.\n- subjectReference: Reference to the target subject.\n- subtitle: Subordinate title.\n- timingAge, timingDateTime, timingDuration, timingPeriod, timingRange, timingTiming: Timing specifications for the activity.\n- title: Human-friendly title for the definition.\n- topic: List of topics relevant to the activity.\n- transform: Transformation details for templates.\n- url: Canonical identifier for the activity definition.\n- usage: Describes clinical usage.\n- useContext: Contexts that the content supports.\n- version: Business version of the definition.\n\nDependencies:\nThe implementation relies on various data types from the FHIR model (e.g., FHIRDate, CodeableConcept, FHIRReference, etc.) that ensure the correct representation of the healthcare activity attributes.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of the FHIRAbstractBase class to a JSON dictionary by examining its registered properties returned by `elementProperties()`. It checks that all required properties (non-optional) are provided and that the types of the properties match the expected types. \n\nIf any validation errors occur, such as incorrect types or missing non-optional properties, a FHIRValidationError is raised containing details of the errors encountered.\n\nReturns:\n    A validated dictionary representation of the instance suitable for JSON serialization.\n\nRaises:\n    FHIRValidationError: If validation rules are not adhered to, including:\n        - Properties having the wrong type.\n        - Required properties being empty or missing.\n\nConstants and Variables:\n    - `js`: A dictionary that accumulates serialized property data.\n    - `errs`: A list that collects any validation errors encountered during serialization.\n    - `found`: A set used to track which properties have been set during the serialization process.\n    - `nonoptionals`: A set that gathers the names of non-optional properties that must not be missing in the serialized output.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nParameters:\n- jsonval (Union[str, None], optional): A JSON string representation of a FHIR datetime. Defaults to None. This value is passed to the parent class, FHIRDate, for parsing.\n\nAttributes initialized:\n- datetime (Union[datetime.datetime, None]): A placeholder for a Python datetime object representing the parsed FHIR datetime. Initially set to None until a value is provided through jsonval.\n\nThis constructor leverages the FHIRDate class's initialization to handle the JSON parsing, ensuring compatibility with FHIR datetime specifications while also preparing to store the Python representation of the datetime.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource to a JSON-serializable dictionary format.\n\nThis method calls the parent class's `as_json` method to obtain the basic JSON representation and then adds the `resourceType` key, which is set to the class's `resource_type`, indicating the type of FHIR resource.\n\nReturns:\n    dict: A JSON-serializable dictionary representing the instance, including the `resourceType`.\n\nDependencies:\n    - The method relies on `super(FHIRAbstractResource, self).as_json()` to get the base JSON representation.\n    - The class variable `resource_type` (defined as 'FHIRAbstractResource') is used to populate the `resourceType` field in the returned JSON.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nThis constructor allows the creation of a DomainResource object with valid properties, while facilitating the initialization with a JSON dictionary if provided. If strict mode is enabled (default), any invalid properties in the JSON dictionary will raise a FHIRValidationError. The instance attributes initialized include:\n- `contained`: A list for inline contained Resource items (represented as `dict`).\n- `extension`: A list for additional content defined by implementations (represented as `Extension` items).\n- `modifierExtension`: A list for extensions that are critical and cannot be ignored (also `Extension` items).\n- `text`: A summary text for human interpretation, represented as a `Narrative` type.\n\nParameters:\n- `jsondict`: Optional; a dictionary used for initializing the instance's properties.\n- `strict`: Optional; a boolean that controls strict validation of properties, defaulting to True.\n\nAttributes like `contained`, `extension`, `modifierExtension`, and `text` are integral to ensuring the DomainResource properly adheres to FHIR specifications, providing the foundation for how resources are structured and presented.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')",
    "fhirclient/models/activitydefinition.py": "from . import domainresource\n\nclass ActivityDefinition(domainresource.DomainResource):\n    \"\"\" The definition of a specific activity to be taken, independent of any\n    particular patient or context.\n    \n    This resource allows for the definition of some activity to be performed,\n    independent of a particular patient, practitioner, or other performance\n    context.\n    \"\"\"\n    resource_type = 'ActivityDefinition'\n\n    def elementProperties(self):\n        js = super(ActivityDefinition, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('doNotPerform', 'doNotPerform', bool, False, None, False), ('dosage', 'dosage', dosage.Dosage, True, None, False), ('dynamicValue', 'dynamicValue', ActivityDefinitionDynamicValue, True, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('intent', 'intent', str, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('kind', 'kind', str, False, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('library', 'library', str, True, None, False), ('location', 'location', fhirreference.FHIRReference, False, None, False), ('name', 'name', str, False, None, False), ('observationRequirement', 'observationRequirement', fhirreference.FHIRReference, True, None, False), ('observationResultRequirement', 'observationResultRequirement', fhirreference.FHIRReference, True, None, False), ('participant', 'participant', ActivityDefinitionParticipant, True, None, False), ('priority', 'priority', str, False, None, False), ('productCodeableConcept', 'productCodeableConcept', codeableconcept.CodeableConcept, False, 'product', False), ('productReference', 'productReference', fhirreference.FHIRReference, False, 'product', False), ('profile', 'profile', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('quantity', 'quantity', quantity.Quantity, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('specimenRequirement', 'specimenRequirement', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('timingAge', 'timingAge', age.Age, False, 'timing', False), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingDuration', 'timingDuration', duration.Duration, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingRange', 'timingRange', range.Range, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('transform', 'transform', str, False, None, False), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ActivityDefinitionDynamicValue(backboneelement.BackboneElement):\n    \"\"\" Dynamic aspects of the definition.\n    \n    Dynamic values that will be evaluated to produce values for elements of the\n    resulting resource. For example, if the dosage of a medication must be\n    computed based on the patient's weight, a dynamic value would be used to\n    specify an expression that calculated the weight, and the path on the\n    request resource that would contain the result.\n    \"\"\"\n    resource_type = 'ActivityDefinitionDynamicValue'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.expression = None\n        ' An expression that provides the dynamic value for the customization.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.path = None\n        ' The path to the element to be set dynamically.\\n        Type `str`. '\n        super(ActivityDefinitionDynamicValue, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ActivityDefinitionDynamicValue, self).elementProperties()\n        js.extend([('expression', 'expression', expression.Expression, False, None, True), ('path', 'path', str, False, None, True)])\n        return js\n\nclass ActivityDefinitionParticipant(backboneelement.BackboneElement):\n    \"\"\" Who should participate in the action.\n    \n    Indicates who should participate in performing the action described.\n    \"\"\"\n    resource_type = 'ActivityDefinitionParticipant'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.role = None\n        ' E.g. Nurse, Surgeon, Parent, etc..\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.type = None\n        ' patient | practitioner | related-person | device.\\n        Type `str`. '\n        super(ActivityDefinitionParticipant, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ActivityDefinitionParticipant, self).elementProperties()\n        js.extend([('role', 'role', codeableconcept.CodeableConcept, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\nfrom . import age\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\nfrom . import usagecontext",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}