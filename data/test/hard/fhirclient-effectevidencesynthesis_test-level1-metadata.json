{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-effectevidencesynthesis_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/effectevidencesynthesis_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import effectevidencesynthesis\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass EffectEvidenceSynthesisTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"EffectEvidenceSynthesis\", js[\"resourceType\"])\n        return effectevidencesynthesis.EffectEvidenceSynthesis(js)\n    \n    def testEffectEvidenceSynthesis1(self):\n        inst = self.instantiate_from(\"effectevidencesynthesis-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a EffectEvidenceSynthesis instance\")\n        self.implEffectEvidenceSynthesis1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"EffectEvidenceSynthesis\", js[\"resourceType\"])\n        inst2 = effectevidencesynthesis.EffectEvidenceSynthesis(js)\n        self.implEffectEvidenceSynthesis1(inst2)\n    \n    def implEffectEvidenceSynthesis1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/effectevidencesynthesis.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass EffectEvidenceSynthesis(domainresource.DomainResource):\n    \"\"\" A quantified estimate of effect based on a body of evidence.\n    \n    The EffectEvidenceSynthesis resource describes the difference in an outcome\n    between exposures states in a population where the effect estimate is\n    derived from a combination of research studies.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesis\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the effect evidence synthesis was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.certainty = None\n        \"\"\" How certain is the effect.\n        List of `EffectEvidenceSynthesisCertainty` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the effect evidence synthesis.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectEstimate = None\n        \"\"\" What was the estimated effect.\n        List of `EffectEvidenceSynthesisEffectEstimate` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the effect evidence synthesis is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.exposure = None\n        \"\"\" What exposure?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.exposureAlternative = None\n        \"\"\" What comparison exposure?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the effect evidence synthesis.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for effect evidence synthesis (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the effect evidence synthesis was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this effect evidence synthesis (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.outcome = None\n        \"\"\" What outcome?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.population = None\n        \"\"\" What population?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.resultsByExposure = None\n        \"\"\" What was the result per exposure?.\n        List of `EffectEvidenceSynthesisResultsByExposure` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.sampleSize = None\n        \"\"\" What sample size was involved?.\n        Type `EffectEvidenceSynthesisSampleSize` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.studyType = None\n        \"\"\" Type of study.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.synthesisType = None\n        \"\"\" Type of synthesis.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this effect evidence synthesis (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" The category of the EffectEvidenceSynthesis, such as Education,\n        Treatment, Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this effect evidence synthesis,\n        represented as a URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the effect evidence synthesis.\n        Type `str`. \"\"\"\n        \n        super(EffectEvidenceSynthesis, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesis, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"certainty\", \"certainty\", EffectEvidenceSynthesisCertainty, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectEstimate\", \"effectEstimate\", EffectEvidenceSynthesisEffectEstimate, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"exposure\", \"exposure\", fhirreference.FHIRReference, False, None, True),\n            (\"exposureAlternative\", \"exposureAlternative\", fhirreference.FHIRReference, False, None, True),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"outcome\", \"outcome\", fhirreference.FHIRReference, False, None, True),\n            (\"population\", \"population\", fhirreference.FHIRReference, False, None, True),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"resultsByExposure\", \"resultsByExposure\", EffectEvidenceSynthesisResultsByExposure, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"sampleSize\", \"sampleSize\", EffectEvidenceSynthesisSampleSize, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"studyType\", \"studyType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"synthesisType\", \"synthesisType\", codeableconcept.CodeableConcept, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass EffectEvidenceSynthesisCertainty(backboneelement.BackboneElement):\n    \"\"\" How certain is the effect.\n    \n    A description of the certainty of the effect estimate.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisCertainty\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.certaintySubcomponent = None\n        \"\"\" A component that contributes to the overall certainty.\n        List of `EffectEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.rating = None\n        \"\"\" Certainty rating.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisCertainty, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertainty, self).elementProperties()\n        js.extend([\n            (\"certaintySubcomponent\", \"certaintySubcomponent\", EffectEvidenceSynthesisCertaintyCertaintySubcomponent, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"rating\", \"rating\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisCertaintyCertaintySubcomponent(backboneelement.BackboneElement):\n    \"\"\" A component that contributes to the overall certainty.\n    \n    A description of a component of the overall certainty.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisCertaintyCertaintySubcomponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.note = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.rating = None\n        \"\"\" Subcomponent certainty rating.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of subcomponent of certainty rating.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).elementProperties()\n        js.extend([\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"rating\", \"rating\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisEffectEstimate(backboneelement.BackboneElement):\n    \"\"\" What was the estimated effect.\n    \n    The estimated effect of the exposure variant.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisEffectEstimate\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of effect estimate.\n        Type `str`. \"\"\"\n        \n        self.precisionEstimate = None\n        \"\"\" How precise the estimate is.\n        List of `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Type of efffect estimate.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.unitOfMeasure = None\n        \"\"\" What unit is the outcome described in?.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.value = None\n        \"\"\" Point estimate.\n        Type `float`. \"\"\"\n        \n        self.variantState = None\n        \"\"\" Variant exposure states.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisEffectEstimate, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimate, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"precisionEstimate\", \"precisionEstimate\", EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"unitOfMeasure\", \"unitOfMeasure\", codeableconcept.CodeableConcept, False, None, False),\n            (\"value\", \"value\", float, False, None, False),\n            (\"variantState\", \"variantState\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(backboneelement.BackboneElement):\n    \"\"\" How precise the estimate is.\n    \n    A description of the precision of the estimate for the effect.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisEffectEstimatePrecisionEstimate\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.from_fhir = None\n        \"\"\" Lower bound.\n        Type `float`. \"\"\"\n        \n        self.level = None\n        \"\"\" Level of confidence interval.\n        Type `float`. \"\"\"\n        \n        self.to = None\n        \"\"\" Upper bound.\n        Type `float`. \"\"\"\n        \n        self.type = None\n        \"\"\" Type of precision estimate.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).elementProperties()\n        js.extend([\n            (\"from_fhir\", \"from\", float, False, None, False),\n            (\"level\", \"level\", float, False, None, False),\n            (\"to\", \"to\", float, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisResultsByExposure(backboneelement.BackboneElement):\n    \"\"\" What was the result per exposure?.\n    \n    A description of the results for each exposure considered in the effect\n    estimate.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisResultsByExposure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of results by exposure.\n        Type `str`. \"\"\"\n        \n        self.exposureState = None\n        \"\"\" exposure | exposure-alternative.\n        Type `str`. \"\"\"\n        \n        self.riskEvidenceSynthesis = None\n        \"\"\" Risk evidence synthesis.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.variantState = None\n        \"\"\" Variant exposure states.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(EffectEvidenceSynthesisResultsByExposure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisResultsByExposure, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"exposureState\", \"exposureState\", str, False, None, False),\n            (\"riskEvidenceSynthesis\", \"riskEvidenceSynthesis\", fhirreference.FHIRReference, False, None, True),\n            (\"variantState\", \"variantState\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass EffectEvidenceSynthesisSampleSize(backboneelement.BackboneElement):\n    \"\"\" What sample size was involved?.\n    \n    A description of the size of the sample involved in the synthesis.\n    \"\"\"\n    \n    resource_type = \"EffectEvidenceSynthesisSampleSize\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.description = None\n        \"\"\" Description of sample size.\n        Type `str`. \"\"\"\n        \n        self.numberOfParticipants = None\n        \"\"\" How many participants?.\n        Type `int`. \"\"\"\n        \n        self.numberOfStudies = None\n        \"\"\" How many studies?.\n        Type `int`. \"\"\"\n        \n        super(EffectEvidenceSynthesisSampleSize, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisSampleSize, self).elementProperties()\n        js.extend([\n            (\"description\", \"description\", str, False, None, False),\n            (\"numberOfParticipants\", \"numberOfParticipants\", int, False, None, False),\n            (\"numberOfStudies\", \"numberOfStudies\", int, False, None, False),\n        ])\n        return js\n\n\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/effectevidencesynthesis.py": {
      "EffectEvidenceSynthesis.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize an EffectEvidenceSynthesis resource, representing a quantified estimate of effect based on a body of evidence derived from research studies. \n\nThis constructor sets up all the valid properties for the EffectEvidenceSynthesis resource, including metadata such as approval date, authors, certainty, exposure details, outcomes, and other relevant information. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing the properties to be populated based on provided data.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError, enforcing strict validation against the FHIR standard.\n\nAttributes:\n- approvalDate (FHIRDate): When the effect evidence synthesis was approved.\n- author (list of ContactDetail): Authors of the synthesis content.\n- certainty (list of EffectEvidenceSynthesisCertainty): Certainty assessments related to the effect estimate.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Use and/or publishing restrictions.\n- date (FHIRDateTime): Last changed date.\n- description (str): Natural language description of the synthesis.\n- effectEstimate (list of EffectEvidenceSynthesisEffectEstimate): Estimated effects derived from the evidence.\n- exposure (FHIRReference): The specific exposure being evaluated.\n- population (FHIRReference): The population related to the synthesis.\n- status (str): Status indicating draft, active, retired, or unknown.\n- title (str): Human-friendly name for this synthesis.\n- url (str): Canonical URI for globally identifying this synthesis.\n\nIn addition, the method invokes the superclass's initializer to handle shared setup tasks, ensuring that the EffectEvidenceSynthesis class is prepared for use.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the effect evidence synthesis was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.certainty = None\n        ' How certain is the effect.\\n        List of `EffectEvidenceSynthesisCertainty` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the effect evidence synthesis.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectEstimate = None\n        ' What was the estimated effect.\\n        List of `EffectEvidenceSynthesisEffectEstimate` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the effect evidence synthesis is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.exposure = None\n        ' What exposure?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.exposureAlternative = None\n        ' What comparison exposure?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the effect evidence synthesis.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for effect evidence synthesis (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the effect evidence synthesis was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.name = None\n        ' Name for this effect evidence synthesis (computer friendly).\\n        Type `str`. '\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.outcome = None\n        ' What outcome?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.population = None\n        ' What population?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.resultsByExposure = None\n        ' What was the result per exposure?.\\n        List of `EffectEvidenceSynthesisResultsByExposure` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.sampleSize = None\n        ' What sample size was involved?.\\n        Type `EffectEvidenceSynthesisSampleSize` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.studyType = None\n        ' Type of study.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.synthesisType = None\n        ' Type of synthesis.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this effect evidence synthesis (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' The category of the EffectEvidenceSynthesis, such as Education,\\n        Treatment, Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.url = None\n        ' Canonical identifier for this effect evidence synthesis,\\n        represented as a URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the effect evidence synthesis.\\n        Type `str`. '\n        super(EffectEvidenceSynthesis, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize an EffectEvidenceSynthesis resource, representing a quantified estimate of effect based on a body of evidence derived from research studies. \n\nThis constructor sets up all the valid properties for the EffectEvidenceSynthesis resource, including metadata such as approval date, authors, certainty, exposure details, outcomes, and other relevant information. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing the properties to be populated based on provided data.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError, enforcing strict validation against the FHIR standard.\n\nAttributes:\n- approvalDate (FHIRDate): When the effect evidence synthesis was approved.\n- author (list of ContactDetail): Authors of the synthesis content.\n- certainty (list of EffectEvidenceSynthesisCertainty): Certainty assessments related to the effect estimate.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Use and/or publishing restrictions.\n- date (FHIRDateTime): Last changed date.\n- description (str): Natural language description of the synthesis.\n- effectEstimate (list of EffectEvidenceSynthesisEffectEstimate): Estimated effects derived from the evidence.\n- exposure (FHIRReference): The specific exposure being evaluated.\n- population (FHIRReference): The population related to the synthesis.\n- status (str): Status indicating draft, active, retired, or unknown.\n- title (str): Human-friendly name for this synthesis.\n- url (str): Canonical URI for globally identifying this synthesis.\n\nIn addition, the method invokes the superclass's initializer to handle shared setup tasks, ensuring that the EffectEvidenceSynthesis class is prepared for use.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class EffectEvidenceSynthesis(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource to a JSON serializable dictionary.\n\nThis method first calls the `as_json` method of the superclass to retrieve the base JSON representation, then adds the `resourceType` key, indicating the type of FHIR resource represented by this instance. The `resource_type` attribute, set to 'FHIRAbstractResource', is used to define the JSON structure's `resourceType`, which is crucial for proper identification and handling of the resource in FHIR-compliant systems.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nDependencies:\n    - The superclass's `as_json` method must be defined and return a dictionary format.\n    - The `resource_type` is defined as a class attribute and is fundamental to the JSON structure's compliance with FHIR standards.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource to a JSON serializable dictionary.\n\nThis method first calls the `as_json` method of the superclass to retrieve the base JSON representation, then adds the `resourceType` key, indicating the type of FHIR resource represented by this instance. The `resource_type` attribute, set to 'FHIRAbstractResource', is used to define the JSON structure's `resourceType`, which is crucial for proper identification and handling of the resource in FHIR-compliant systems.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nDependencies:\n    - The superclass's `as_json` method must be defined and return a dictionary format.\n    - The `resource_type` is defined as a class attribute and is fundamental to the JSON structure's compliance with FHIR standards.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:testEffectEvidenceSynthesis1": {
      "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:instantiate_from": {
        "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:implEffectEvidenceSynthesis1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/effectevidencesynthesis_test.py:EffectEvidenceSynthesisTests:instantiate_from": {
      "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/effectevidencesynthesis.py:EffectEvidenceSynthesis:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-effectevidencesynthesis_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 effectevidencesynthesis.py\n        \u2502   \u2514\u2500\u2500 EffectEvidenceSynthesis.__init__\n        \u2514\u2500\u2500 fhirabstractresource.py\n            \u2514\u2500\u2500 FHIRAbstractResource.as_json\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and work with FHIR (Fast Healthcare Interoperability Resources) EffectEvidenceSynthesis resources, enabling the testing and verification of data conformance to the FHIR standard (version 4.0.1). It facilitates the instantiation, manipulation, and serialization of EffectEvidenceSynthesis resources, ensuring that these complex healthcare data structures are correctly formed and adherent to required specifications. The module allows users to verify resource attributes, metadata, and status, providing a reliable mechanism to test the validity of such resources. By automating the validation and instantiation process, it streamlines the development and testing workflows for systems handling clinical evidence synthesis data, ultimately ensuring interoperability and data quality in healthcare applications.\n\n## FILE 1: fhirclient/models/effectevidencesynthesis.py\n\n- CLASS METHOD: EffectEvidenceSynthesis.__init__\n  - CLASS SIGNATURE: class EffectEvidenceSynthesis(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an EffectEvidenceSynthesis resource, representing a quantified estimate of effect based on a body of evidence derived from research studies. \n\nThis constructor sets up all the valid properties for the EffectEvidenceSynthesis resource, including metadata such as approval date, authors, certainty, exposure details, outcomes, and other relevant information. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to use for initialization, allowing the properties to be populated based on provided data.\n- strict (bool, optional): If True (default), invalid variables will raise a TypeError, enforcing strict validation against the FHIR standard.\n\nAttributes:\n- approvalDate (FHIRDate): When the effect evidence synthesis was approved.\n- author (list of ContactDetail): Authors of the synthesis content.\n- certainty (list of EffectEvidenceSynthesisCertainty): Certainty assessments related to the effect estimate.\n- contact (list of ContactDetail): Publisher contact details.\n- copyright (str): Use and/or publishing restrictions.\n- date (FHIRDateTime): Last changed date.\n- description (str): Natural language description of the synthesis.\n- effectEstimate (list of EffectEvidenceSynthesisEffectEstimate): Estimated effects derived from the evidence.\n- exposure (FHIRReference): The specific exposure being evaluated.\n- population (FHIRReference): The population related to the synthesis.\n- status (str): Status indicating draft, active, retired, or unknown.\n- title (str): Human-friendly name for this synthesis.\n- url (str): Canonical URI for globally identifying this synthesis.\n\nIn addition, the method invokes the superclass's initializer to handle shared setup tasks, ensuring that the EffectEvidenceSynthesis class is prepared for use.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource to a JSON serializable dictionary.\n\nThis method first calls the `as_json` method of the superclass to retrieve the base JSON representation, then adds the `resourceType` key, indicating the type of FHIR resource represented by this instance. The `resource_type` attribute, set to 'FHIRAbstractResource', is used to define the JSON structure's `resourceType`, which is crucial for proper identification and handling of the resource in FHIR-compliant systems.\n\nReturns:\n    dict: A dictionary representation of the FHIRAbstractResource instance, including its `resourceType`.\n\nDependencies:\n    - The superclass's `as_json` method must be defined and return a dictionary format.\n    - The `resource_type` is defined as a class attribute and is fundamental to the JSON structure's compliance with FHIR standards.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/effectevidencesynthesis.py": "from . import domainresource\n\nclass EffectEvidenceSynthesis(domainresource.DomainResource):\n    \"\"\" A quantified estimate of effect based on a body of evidence.\n    \n    The EffectEvidenceSynthesis resource describes the difference in an outcome\n    between exposures states in a population where the effect estimate is\n    derived from a combination of research studies.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesis'\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesis, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('certainty', 'certainty', EffectEvidenceSynthesisCertainty, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectEstimate', 'effectEstimate', EffectEvidenceSynthesisEffectEstimate, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('exposure', 'exposure', fhirreference.FHIRReference, False, None, True), ('exposureAlternative', 'exposureAlternative', fhirreference.FHIRReference, False, None, True), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('name', 'name', str, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('outcome', 'outcome', fhirreference.FHIRReference, False, None, True), ('population', 'population', fhirreference.FHIRReference, False, None, True), ('publisher', 'publisher', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('resultsByExposure', 'resultsByExposure', EffectEvidenceSynthesisResultsByExposure, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('sampleSize', 'sampleSize', EffectEvidenceSynthesisSampleSize, False, None, False), ('status', 'status', str, False, None, True), ('studyType', 'studyType', codeableconcept.CodeableConcept, False, None, False), ('synthesisType', 'synthesisType', codeableconcept.CodeableConcept, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('url', 'url', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass EffectEvidenceSynthesisCertainty(backboneelement.BackboneElement):\n    \"\"\" How certain is the effect.\n    \n    A description of the certainty of the effect estimate.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisCertainty'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.certaintySubcomponent = None\n        ' A component that contributes to the overall certainty.\\n        List of `EffectEvidenceSynthesisCertaintyCertaintySubcomponent` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.rating = None\n        ' Certainty rating.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisCertainty, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertainty, self).elementProperties()\n        js.extend([('certaintySubcomponent', 'certaintySubcomponent', EffectEvidenceSynthesisCertaintyCertaintySubcomponent, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('rating', 'rating', codeableconcept.CodeableConcept, True, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisCertaintyCertaintySubcomponent(backboneelement.BackboneElement):\n    \"\"\" A component that contributes to the overall certainty.\n    \n    A description of a component of the overall certainty.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisCertaintyCertaintySubcomponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.note = None\n        ' Used for footnotes or explanatory notes.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.rating = None\n        ' Subcomponent certainty rating.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of subcomponent of certainty rating.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisCertaintyCertaintySubcomponent, self).elementProperties()\n        js.extend([('note', 'note', annotation.Annotation, True, None, False), ('rating', 'rating', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisEffectEstimate(backboneelement.BackboneElement):\n    \"\"\" What was the estimated effect.\n    \n    The estimated effect of the exposure variant.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisEffectEstimate'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of effect estimate.\\n        Type `str`. '\n        self.precisionEstimate = None\n        ' How precise the estimate is.\\n        List of `EffectEvidenceSynthesisEffectEstimatePrecisionEstimate` items (represented as `dict` in JSON). '\n        self.type = None\n        ' Type of efffect estimate.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.unitOfMeasure = None\n        ' What unit is the outcome described in?.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.value = None\n        ' Point estimate.\\n        Type `float`. '\n        self.variantState = None\n        ' Variant exposure states.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisEffectEstimate, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimate, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('precisionEstimate', 'precisionEstimate', EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('unitOfMeasure', 'unitOfMeasure', codeableconcept.CodeableConcept, False, None, False), ('value', 'value', float, False, None, False), ('variantState', 'variantState', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisEffectEstimatePrecisionEstimate(backboneelement.BackboneElement):\n    \"\"\" How precise the estimate is.\n    \n    A description of the precision of the estimate for the effect.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisEffectEstimatePrecisionEstimate'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.from_fhir = None\n        ' Lower bound.\\n        Type `float`. '\n        self.level = None\n        ' Level of confidence interval.\\n        Type `float`. '\n        self.to = None\n        ' Upper bound.\\n        Type `float`. '\n        self.type = None\n        ' Type of precision estimate.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisEffectEstimatePrecisionEstimate, self).elementProperties()\n        js.extend([('from_fhir', 'from', float, False, None, False), ('level', 'level', float, False, None, False), ('to', 'to', float, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisResultsByExposure(backboneelement.BackboneElement):\n    \"\"\" What was the result per exposure?.\n    \n    A description of the results for each exposure considered in the effect\n    estimate.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisResultsByExposure'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of results by exposure.\\n        Type `str`. '\n        self.exposureState = None\n        ' exposure | exposure-alternative.\\n        Type `str`. '\n        self.riskEvidenceSynthesis = None\n        ' Risk evidence synthesis.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.variantState = None\n        ' Variant exposure states.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(EffectEvidenceSynthesisResultsByExposure, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisResultsByExposure, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('exposureState', 'exposureState', str, False, None, False), ('riskEvidenceSynthesis', 'riskEvidenceSynthesis', fhirreference.FHIRReference, False, None, True), ('variantState', 'variantState', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass EffectEvidenceSynthesisSampleSize(backboneelement.BackboneElement):\n    \"\"\" What sample size was involved?.\n    \n    A description of the size of the sample involved in the synthesis.\n    \"\"\"\n    resource_type = 'EffectEvidenceSynthesisSampleSize'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.description = None\n        ' Description of sample size.\\n        Type `str`. '\n        self.numberOfParticipants = None\n        ' How many participants?.\\n        Type `int`. '\n        self.numberOfStudies = None\n        ' How many studies?.\\n        Type `int`. '\n        super(EffectEvidenceSynthesisSampleSize, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(EffectEvidenceSynthesisSampleSize, self).elementProperties()\n        js.extend([('description', 'description', str, False, None, False), ('numberOfParticipants', 'numberOfParticipants', int, False, None, False), ('numberOfStudies', 'numberOfStudies', int, False, None, False)])\n        return js\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}