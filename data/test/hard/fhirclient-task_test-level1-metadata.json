{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-task_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/task_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import task\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass TaskTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Task\", js[\"resourceType\"])\n        return task.Task(js)\n    \n    def testTask1(self):\n        inst = self.instantiate_from(\"task-example2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask1(inst2)\n    \n    def implTask1(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2016-10-31T08:45:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2016-10-31T08:45:05+10:00\")\n        self.assertEqual(inst.businessStatus.text, \"waiting for patient\")\n        self.assertEqual(inst.code.text, \"Specimen Collection\")\n        self.assertEqual(inst.executionPeriod.start.datetime, FHIRDateTime(\"2016-10-31T08:45:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.start.as_json(), \"2016-10-31T08:45:05+10:00\")\n        self.assertEqual(inst.groupIdentifier.system, \"http:/goodhealth.org/accession/identifiers\")\n        self.assertEqual(inst.groupIdentifier.use, \"official\")\n        self.assertEqual(inst.groupIdentifier.value, \"G20170201-001\")\n        self.assertEqual(inst.id, \"example2\")\n        self.assertEqual(inst.identifier[0].system, \"http:/goodhealth.org/identifiers\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20170201-002\")\n        self.assertEqual(inst.intent, \"filler-order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2016-10-31T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2016-10-31T09:45:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.performerType[0].coding[0].code, \"performer\")\n        self.assertEqual(inst.performerType[0].coding[0].display, \"Performer\")\n        self.assertEqual(inst.performerType[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/task-performer-type\")\n        self.assertEqual(inst.performerType[0].text, \"Performer\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.restriction.period.end.datetime, FHIRDateTime(\"2016-11-01T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.restriction.period.end.as_json(), \"2016-11-01T09:45:05+10:00\")\n        self.assertEqual(inst.restriction.repetitions, 1)\n        self.assertEqual(inst.status, \"accepted\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask2(self):\n        inst = self.instantiate_from(\"task-example4.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask2(inst2)\n    \n    def implTask2(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2016-10-31T08:45:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2016-10-31T08:45:05+10:00\")\n        self.assertEqual(inst.code.text, \"Specimen Collection\")\n        self.assertEqual(inst.executionPeriod.end.datetime, FHIRDateTime(\"2016-10-31T14:45:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.end.as_json(), \"2016-10-31T14:45:05+10:00\")\n        self.assertEqual(inst.executionPeriod.start.datetime, FHIRDateTime(\"2016-10-31T08:45:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.start.as_json(), \"2016-10-31T08:45:05+10:00\")\n        self.assertEqual(inst.groupIdentifier.system, \"http:/goodhealth.org/accession/identifiers\")\n        self.assertEqual(inst.groupIdentifier.use, \"official\")\n        self.assertEqual(inst.groupIdentifier.value, \"G20170201-001\")\n        self.assertEqual(inst.id, \"example4\")\n        self.assertEqual(inst.identifier[0].system, \"http:/goodhealth.org/identifiers\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20170201-002\")\n        self.assertEqual(inst.intent, \"filler-order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2016-10-31T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2016-10-31T09:45:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.output[0].type.text, \"collected specimen\")\n        self.assertEqual(inst.performerType[0].coding[0].code, \"performer\")\n        self.assertEqual(inst.performerType[0].coding[0].display, \"Performer\")\n        self.assertEqual(inst.performerType[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/task-performer-type\")\n        self.assertEqual(inst.performerType[0].text, \"Performer\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.restriction.period.end.datetime, FHIRDateTime(\"2016-11-01T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.restriction.period.end.as_json(), \"2016-11-01T09:45:05+10:00\")\n        self.assertEqual(inst.restriction.repetitions, 1)\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask3(self):\n        inst = self.instantiate_from(\"task-example3.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask3(inst2)\n    \n    def implTask3(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2016-03-10T22:39:32-04:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2016-03-10T22:39:32-04:00\")\n        self.assertEqual(inst.code.text, \"Refill Request\")\n        self.assertEqual(inst.id, \"example3\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2016-03-10T22:39:32-04:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2016-03-10T22:39:32-04:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask4(self):\n        inst = self.instantiate_from(\"task-example-fm-status-resp.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask4(inst2)\n    \n    def implTask4(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.code.coding[0].code, \"status\")\n        self.assertEqual(inst.code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskcode\")\n        self.assertEqual(inst.id, \"fm-example6\")\n        self.assertEqual(inst.identifier[0].system, \"http:/happyvalley.com/task\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20181012-001\")\n        self.assertEqual(inst.identifier[1].system, \"http://nationalinsurers.com/identifiers/12345\")\n        self.assertEqual(inst.identifier[1].use, \"official\")\n        self.assertEqual(inst.identifier[1].value, \"123GB5674\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.output[0].type.coding[0].code, \"status\")\n        self.assertEqual(inst.output[0].type.coding[0].system, \"http://hl7.org/financial-taskoutputtype\")\n        self.assertEqual(inst.output[0].valueCode, \"complete\")\n        self.assertEqual(inst.priority, \"stat\")\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask5(self):\n        inst = self.instantiate_from(\"task-example-fm-cancel.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask5(inst2)\n    \n    def implTask5(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.code.coding[0].code, \"cancel\")\n        self.assertEqual(inst.code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskcode\")\n        self.assertEqual(inst.id, \"fm-example1\")\n        self.assertEqual(inst.identifier[0].system, \"http:/happyvalley.com/task\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20181012-001\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"stat\")\n        self.assertEqual(inst.status, \"requested\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask6(self):\n        inst = self.instantiate_from(\"task-example-fm-poll.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask6(inst2)\n    \n    def implTask6(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2018-10-12T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2018-10-12T08:25:05+10:00\")\n        self.assertEqual(inst.code.coding[0].code, \"poll\")\n        self.assertEqual(inst.code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskcode\")\n        self.assertEqual(inst.id, \"fm-example2\")\n        self.assertEqual(inst.identifier[0].system, \"http:/happyvalley.com/task\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20181012-005\")\n        self.assertEqual(inst.input[0].type.coding[0].code, \"include\")\n        self.assertEqual(inst.input[0].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskinputtype\")\n        self.assertEqual(inst.input[0].valueCode, \"ClaimResponse\")\n        self.assertEqual(inst.input[1].type.coding[0].code, \"period\")\n        self.assertEqual(inst.input[1].type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskinputtype\")\n        self.assertEqual(inst.input[1].valuePeriod.end.datetime, FHIRDateTime(\"2018-10-12\").datetime)\n        self.assertEqual(inst.input[1].valuePeriod.end.as_json(), \"2018-10-12\")\n        self.assertEqual(inst.input[1].valuePeriod.start.datetime, FHIRDateTime(\"2018-10-01\").datetime)\n        self.assertEqual(inst.input[1].valuePeriod.start.as_json(), \"2018-10-01\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2018-10-12T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2018-10-12T08:25:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"stat\")\n        self.assertEqual(inst.status, \"requested\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask7(self):\n        inst = self.instantiate_from(\"task-example6.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask7(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask7(inst2)\n    \n    def implTask7(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2016-10-31T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2016-10-31T08:25:05+10:00\")\n        self.assertEqual(inst.businessStatus.text, \"test completed and posted\")\n        self.assertEqual(inst.code.text, \"Lipid Panel\")\n        self.assertEqual(inst.description, \"Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen\")\n        self.assertEqual(inst.executionPeriod.end.datetime, FHIRDateTime(\"2016-10-31T18:45:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.end.as_json(), \"2016-10-31T18:45:05+10:00\")\n        self.assertEqual(inst.executionPeriod.start.datetime, FHIRDateTime(\"2016-10-31T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.start.as_json(), \"2016-10-31T08:25:05+10:00\")\n        self.assertEqual(inst.groupIdentifier.system, \"http:/goodhealth.org/accession/identifiers\")\n        self.assertEqual(inst.groupIdentifier.use, \"official\")\n        self.assertEqual(inst.groupIdentifier.value, \"G20170201-001\")\n        self.assertEqual(inst.id, \"example6\")\n        self.assertEqual(inst.identifier[0].system, \"http:/goodhealth.org/identifiers\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20170201-001\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2016-10-31T18:45:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2016-10-31T18:45:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.output[0].type.text, \"DiagnosticReport generated\")\n        self.assertEqual(inst.output[1].type.text, \"collected specimen\")\n        self.assertEqual(inst.performerType[0].coding[0].code, \"performer\")\n        self.assertEqual(inst.performerType[0].coding[0].display, \"Performer\")\n        self.assertEqual(inst.performerType[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/task-performer-type\")\n        self.assertEqual(inst.performerType[0].text, \"Performer\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.reasonCode.text, \"The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus\")\n        self.assertEqual(inst.restriction.period.end.datetime, FHIRDateTime(\"2016-11-02T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.restriction.period.end.as_json(), \"2016-11-02T09:45:05+10:00\")\n        self.assertEqual(inst.restriction.repetitions, 1)\n        self.assertEqual(inst.status, \"completed\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask8(self):\n        inst = self.instantiate_from(\"task-example5.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask8(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask8(inst2)\n    \n    def implTask8(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2016-10-31T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2016-10-31T08:25:05+10:00\")\n        self.assertEqual(inst.businessStatus.text, \"specimen received, test in progress\")\n        self.assertEqual(inst.code.text, \"Lipid Panel\")\n        self.assertEqual(inst.description, \"Create order for getting specimen, Set up inhouse testing,  generate order for any sendouts and submit with specimen\")\n        self.assertEqual(inst.executionPeriod.start.datetime, FHIRDateTime(\"2016-10-31T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.executionPeriod.start.as_json(), \"2016-10-31T08:25:05+10:00\")\n        self.assertEqual(inst.groupIdentifier.system, \"http:/goodhealth.org/accession/identifiers\")\n        self.assertEqual(inst.groupIdentifier.use, \"official\")\n        self.assertEqual(inst.groupIdentifier.value, \"G20170201-001\")\n        self.assertEqual(inst.id, \"example5\")\n        self.assertEqual(inst.identifier[0].system, \"http:/goodhealth.org/identifiers\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20170201-001\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2016-10-31T16:45:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2016-10-31T16:45:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.output[0].type.text, \"collected specimen\")\n        self.assertEqual(inst.performerType[0].coding[0].code, \"performer\")\n        self.assertEqual(inst.performerType[0].coding[0].display, \"Performer\")\n        self.assertEqual(inst.performerType[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/task-performer-type\")\n        self.assertEqual(inst.performerType[0].text, \"Performer\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.reasonCode.text, \"The Task.reason should only be included if there is no Task.focus or if it differs from the reason indicated on the focus\")\n        self.assertEqual(inst.restriction.period.end.datetime, FHIRDateTime(\"2016-11-02T09:45:05+10:00\").datetime)\n        self.assertEqual(inst.restriction.period.end.as_json(), \"2016-11-02T09:45:05+10:00\")\n        self.assertEqual(inst.restriction.repetitions, 1)\n        self.assertEqual(inst.status, \"in-progress\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask9(self):\n        inst = self.instantiate_from(\"task-example-fm-release.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask9(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask9(inst2)\n    \n    def implTask9(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.code.coding[0].code, \"release\")\n        self.assertEqual(inst.code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskcode\")\n        self.assertEqual(inst.id, \"fm-example3\")\n        self.assertEqual(inst.identifier[0].system, \"http:/happyvalley.com/task\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20181012-001\")\n        self.assertEqual(inst.input[0].type.coding[0].code, \"origresponse\")\n        self.assertEqual(inst.input[0].type.coding[0].system, \"http://hl7.org/financial-taskinputtype\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"stat\")\n        self.assertEqual(inst.status, \"requested\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testTask10(self):\n        inst = self.instantiate_from(\"task-example-fm-status.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Task instance\")\n        self.implTask10(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Task\", js[\"resourceType\"])\n        inst2 = task.Task(js)\n        self.implTask10(inst2)\n    \n    def implTask10(self, inst):\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.code.coding[0].code, \"status\")\n        self.assertEqual(inst.code.coding[0].system, \"http://terminology.hl7.org/CodeSystem/financialtaskcode\")\n        self.assertEqual(inst.id, \"fm-example5\")\n        self.assertEqual(inst.identifier[0].system, \"http:/happyvalley.com/task\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"20181012-001\")\n        self.assertEqual(inst.intent, \"order\")\n        self.assertEqual(inst.lastModified.datetime, FHIRDateTime(\"2018-10-04T08:25:05+10:00\").datetime)\n        self.assertEqual(inst.lastModified.as_json(), \"2018-10-04T08:25:05+10:00\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"stat\")\n        self.assertEqual(inst.status, \"requested\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/task.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Task).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Task(domainresource.DomainResource):\n    \"\"\" A task to be performed.\n    \"\"\"\n    \n    resource_type = \"Task\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.authoredOn = None\n        \"\"\" Task Creation Date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Request fulfilled by this task.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.businessStatus = None\n        \"\"\" E.g. \"Specimen collected\", \"IV prepped\".\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Task Type.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Human-readable explanation of task.\n        Type `str`. \"\"\"\n        \n        self.encounter = None\n        \"\"\" Healthcare event during which this task originated.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.executionPeriod = None\n        \"\"\" Start and end time of execution.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.focus = None\n        \"\"\" What task is acting on.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.for_fhir = None\n        \"\"\" Beneficiary of the Task.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.groupIdentifier = None\n        \"\"\" Requisition or grouper id.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Task Instance Identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.input = None\n        \"\"\" Information used to perform task.\n        List of `TaskInput` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Formal definition of task.\n        Type `str`. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Formal definition of task.\n        Type `str`. \"\"\"\n        \n        self.insurance = None\n        \"\"\" Associated insurance coverage.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.intent = None\n        \"\"\" unknown | proposal | plan | order | original-order | reflex-order |\n        filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.lastModified = None\n        \"\"\" Task Last Modified Date.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.location = None\n        \"\"\" Where task occurs.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Comments made about the task.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.output = None\n        \"\"\" Information produced as part of task.\n        List of `TaskOutput` items (represented as `dict` in JSON). \"\"\"\n        \n        self.owner = None\n        \"\"\" Responsible individual.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.partOf = None\n        \"\"\" Composite task.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.performerType = None\n        \"\"\" Requested performer.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why task is needed.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why task is needed.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relevantHistory = None\n        \"\"\" Key events in history of the Task.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requester = None\n        \"\"\" Who is asking for task to be done.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.restriction = None\n        \"\"\" Constraints on fulfillment tasks.\n        Type `TaskRestriction` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | requested | received | accepted | +.\n        Type `str`. \"\"\"\n        \n        self.statusReason = None\n        \"\"\" Reason for current status.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(Task, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Task, self).elementProperties()\n        js.extend([\n            (\"authoredOn\", \"authoredOn\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"businessStatus\", \"businessStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"executionPeriod\", \"executionPeriod\", period.Period, False, None, False),\n            (\"focus\", \"focus\", fhirreference.FHIRReference, False, None, False),\n            (\"for_fhir\", \"for\", fhirreference.FHIRReference, False, None, False),\n            (\"groupIdentifier\", \"groupIdentifier\", identifier.Identifier, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"input\", \"input\", TaskInput, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, False, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, False, None, False),\n            (\"insurance\", \"insurance\", fhirreference.FHIRReference, True, None, False),\n            (\"intent\", \"intent\", str, False, None, True),\n            (\"lastModified\", \"lastModified\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"location\", \"location\", fhirreference.FHIRReference, False, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"output\", \"output\", TaskOutput, True, None, False),\n            (\"owner\", \"owner\", fhirreference.FHIRReference, False, None, False),\n            (\"partOf\", \"partOf\", fhirreference.FHIRReference, True, None, False),\n            (\"performerType\", \"performerType\", codeableconcept.CodeableConcept, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, False, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, False, None, False),\n            (\"relevantHistory\", \"relevantHistory\", fhirreference.FHIRReference, True, None, False),\n            (\"requester\", \"requester\", fhirreference.FHIRReference, False, None, False),\n            (\"restriction\", \"restriction\", TaskRestriction, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"statusReason\", \"statusReason\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass TaskInput(backboneelement.BackboneElement):\n    \"\"\" Information used to perform task.\n    \n    Additional information that may be needed in the execution of the task.\n    \"\"\"\n    \n    resource_type = \"TaskInput\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.type = None\n        \"\"\" Label for the input.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAddress = None\n        \"\"\" Content to use in performing the task.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAge = None\n        \"\"\" Content to use in performing the task.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAnnotation = None\n        \"\"\" Content to use in performing the task.\n        Type `Annotation` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" Content to use in performing the task.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBase64Binary = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Content to use in performing the task.\n        Type `bool`. \"\"\"\n        \n        self.valueCanonical = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueCode = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueCodeableConcept = None\n        \"\"\" Content to use in performing the task.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Content to use in performing the task.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContactDetail = None\n        \"\"\" Content to use in performing the task.\n        Type `ContactDetail` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContactPoint = None\n        \"\"\" Content to use in performing the task.\n        Type `ContactPoint` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContributor = None\n        \"\"\" Content to use in performing the task.\n        Type `Contributor` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueCount = None\n        \"\"\" Content to use in performing the task.\n        Type `Count` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDataRequirement = None\n        \"\"\" Content to use in performing the task.\n        Type `DataRequirement` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" Content to use in performing the task.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" Content to use in performing the task.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Content to use in performing the task.\n        Type `float`. \"\"\"\n        \n        self.valueDistance = None\n        \"\"\" Content to use in performing the task.\n        Type `Distance` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDosage = None\n        \"\"\" Content to use in performing the task.\n        Type `Dosage` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDuration = None\n        \"\"\" Content to use in performing the task.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueExpression = None\n        \"\"\" Content to use in performing the task.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueHumanName = None\n        \"\"\" Content to use in performing the task.\n        Type `HumanName` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueId = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueIdentifier = None\n        \"\"\" Content to use in performing the task.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueInstant = None\n        \"\"\" Content to use in performing the task.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Content to use in performing the task.\n        Type `int`. \"\"\"\n        \n        self.valueMarkdown = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueMeta = None\n        \"\"\" Content to use in performing the task.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueMoney = None\n        \"\"\" Content to use in performing the task.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueOid = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueParameterDefinition = None\n        \"\"\" Content to use in performing the task.\n        Type `ParameterDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.valuePeriod = None\n        \"\"\" Content to use in performing the task.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.valuePositiveInt = None\n        \"\"\" Content to use in performing the task.\n        Type `int`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Content to use in performing the task.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRange = None\n        \"\"\" Content to use in performing the task.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRatio = None\n        \"\"\" Content to use in performing the task.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Content to use in performing the task.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRelatedArtifact = None\n        \"\"\" Content to use in performing the task.\n        Type `RelatedArtifact` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueSampledData = None\n        \"\"\" Content to use in performing the task.\n        Type `SampledData` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueSignature = None\n        \"\"\" Content to use in performing the task.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" Content to use in performing the task.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueTiming = None\n        \"\"\" Content to use in performing the task.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueTriggerDefinition = None\n        \"\"\" Content to use in performing the task.\n        Type `TriggerDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueUnsignedInt = None\n        \"\"\" Content to use in performing the task.\n        Type `int`. \"\"\"\n        \n        self.valueUri = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueUrl = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        self.valueUsageContext = None\n        \"\"\" Content to use in performing the task.\n        Type `UsageContext` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueUuid = None\n        \"\"\" Content to use in performing the task.\n        Type `str`. \"\"\"\n        \n        super(TaskInput, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TaskInput, self).elementProperties()\n        js.extend([\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"valueAddress\", \"valueAddress\", address.Address, False, \"value\", True),\n            (\"valueAge\", \"valueAge\", age.Age, False, \"value\", True),\n            (\"valueAnnotation\", \"valueAnnotation\", annotation.Annotation, False, \"value\", True),\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", True),\n            (\"valueBase64Binary\", \"valueBase64Binary\", str, False, \"value\", True),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCanonical\", \"valueCanonical\", str, False, \"value\", True),\n            (\"valueCode\", \"valueCode\", str, False, \"value\", True),\n            (\"valueCodeableConcept\", \"valueCodeableConcept\", codeableconcept.CodeableConcept, False, \"value\", True),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueContactDetail\", \"valueContactDetail\", contactdetail.ContactDetail, False, \"value\", True),\n            (\"valueContactPoint\", \"valueContactPoint\", contactpoint.ContactPoint, False, \"value\", True),\n            (\"valueContributor\", \"valueContributor\", contributor.Contributor, False, \"value\", True),\n            (\"valueCount\", \"valueCount\", count.Count, False, \"value\", True),\n            (\"valueDataRequirement\", \"valueDataRequirement\", datarequirement.DataRequirement, False, \"value\", True),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", True),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueDistance\", \"valueDistance\", distance.Distance, False, \"value\", True),\n            (\"valueDosage\", \"valueDosage\", dosage.Dosage, False, \"value\", True),\n            (\"valueDuration\", \"valueDuration\", duration.Duration, False, \"value\", True),\n            (\"valueExpression\", \"valueExpression\", expression.Expression, False, \"value\", True),\n            (\"valueHumanName\", \"valueHumanName\", humanname.HumanName, False, \"value\", True),\n            (\"valueId\", \"valueId\", str, False, \"value\", True),\n            (\"valueIdentifier\", \"valueIdentifier\", identifier.Identifier, False, \"value\", True),\n            (\"valueInstant\", \"valueInstant\", fhirinstant.FHIRInstant, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueMarkdown\", \"valueMarkdown\", str, False, \"value\", True),\n            (\"valueMeta\", \"valueMeta\", meta.Meta, False, \"value\", True),\n            (\"valueMoney\", \"valueMoney\", money.Money, False, \"value\", True),\n            (\"valueOid\", \"valueOid\", str, False, \"value\", True),\n            (\"valueParameterDefinition\", \"valueParameterDefinition\", parameterdefinition.ParameterDefinition, False, \"value\", True),\n            (\"valuePeriod\", \"valuePeriod\", period.Period, False, \"value\", True),\n            (\"valuePositiveInt\", \"valuePositiveInt\", int, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n            (\"valueRange\", \"valueRange\", range.Range, False, \"value\", True),\n            (\"valueRatio\", \"valueRatio\", ratio.Ratio, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n            (\"valueRelatedArtifact\", \"valueRelatedArtifact\", relatedartifact.RelatedArtifact, False, \"value\", True),\n            (\"valueSampledData\", \"valueSampledData\", sampleddata.SampledData, False, \"value\", True),\n            (\"valueSignature\", \"valueSignature\", signature.Signature, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", True),\n            (\"valueTiming\", \"valueTiming\", timing.Timing, False, \"value\", True),\n            (\"valueTriggerDefinition\", \"valueTriggerDefinition\", triggerdefinition.TriggerDefinition, False, \"value\", True),\n            (\"valueUnsignedInt\", \"valueUnsignedInt\", int, False, \"value\", True),\n            (\"valueUri\", \"valueUri\", str, False, \"value\", True),\n            (\"valueUrl\", \"valueUrl\", str, False, \"value\", True),\n            (\"valueUsageContext\", \"valueUsageContext\", usagecontext.UsageContext, False, \"value\", True),\n            (\"valueUuid\", \"valueUuid\", str, False, \"value\", True),\n        ])\n        return js\n\n\nclass TaskOutput(backboneelement.BackboneElement):\n    \"\"\" Information produced as part of task.\n    \n    Outputs produced by the Task.\n    \"\"\"\n    \n    resource_type = \"TaskOutput\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.type = None\n        \"\"\" Label for output.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAddress = None\n        \"\"\" Result of output.\n        Type `Address` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAge = None\n        \"\"\" Result of output.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAnnotation = None\n        \"\"\" Result of output.\n        Type `Annotation` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueAttachment = None\n        \"\"\" Result of output.\n        Type `Attachment` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueBase64Binary = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueBoolean = None\n        \"\"\" Result of output.\n        Type `bool`. \"\"\"\n        \n        self.valueCanonical = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueCode = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueCodeableConcept = None\n        \"\"\" Result of output.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueCoding = None\n        \"\"\" Result of output.\n        Type `Coding` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContactDetail = None\n        \"\"\" Result of output.\n        Type `ContactDetail` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContactPoint = None\n        \"\"\" Result of output.\n        Type `ContactPoint` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueContributor = None\n        \"\"\" Result of output.\n        Type `Contributor` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueCount = None\n        \"\"\" Result of output.\n        Type `Count` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDataRequirement = None\n        \"\"\" Result of output.\n        Type `DataRequirement` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDate = None\n        \"\"\" Result of output.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDateTime = None\n        \"\"\" Result of output.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueDecimal = None\n        \"\"\" Result of output.\n        Type `float`. \"\"\"\n        \n        self.valueDistance = None\n        \"\"\" Result of output.\n        Type `Distance` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDosage = None\n        \"\"\" Result of output.\n        Type `Dosage` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueDuration = None\n        \"\"\" Result of output.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueExpression = None\n        \"\"\" Result of output.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueHumanName = None\n        \"\"\" Result of output.\n        Type `HumanName` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueId = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueIdentifier = None\n        \"\"\" Result of output.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueInstant = None\n        \"\"\" Result of output.\n        Type `FHIRInstant` (represented as `str` in JSON). \"\"\"\n        \n        self.valueInteger = None\n        \"\"\" Result of output.\n        Type `int`. \"\"\"\n        \n        self.valueMarkdown = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueMeta = None\n        \"\"\" Result of output.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueMoney = None\n        \"\"\" Result of output.\n        Type `Money` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueOid = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueParameterDefinition = None\n        \"\"\" Result of output.\n        Type `ParameterDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.valuePeriod = None\n        \"\"\" Result of output.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.valuePositiveInt = None\n        \"\"\" Result of output.\n        Type `int`. \"\"\"\n        \n        self.valueQuantity = None\n        \"\"\" Result of output.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRange = None\n        \"\"\" Result of output.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRatio = None\n        \"\"\" Result of output.\n        Type `Ratio` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueReference = None\n        \"\"\" Result of output.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueRelatedArtifact = None\n        \"\"\" Result of output.\n        Type `RelatedArtifact` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueSampledData = None\n        \"\"\" Result of output.\n        Type `SampledData` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueSignature = None\n        \"\"\" Result of output.\n        Type `Signature` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueString = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueTime = None\n        \"\"\" Result of output.\n        Type `FHIRTime` (represented as `str` in JSON). \"\"\"\n        \n        self.valueTiming = None\n        \"\"\" Result of output.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueTriggerDefinition = None\n        \"\"\" Result of output.\n        Type `TriggerDefinition` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueUnsignedInt = None\n        \"\"\" Result of output.\n        Type `int`. \"\"\"\n        \n        self.valueUri = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueUrl = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        self.valueUsageContext = None\n        \"\"\" Result of output.\n        Type `UsageContext` (represented as `dict` in JSON). \"\"\"\n        \n        self.valueUuid = None\n        \"\"\" Result of output.\n        Type `str`. \"\"\"\n        \n        super(TaskOutput, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TaskOutput, self).elementProperties()\n        js.extend([\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, True),\n            (\"valueAddress\", \"valueAddress\", address.Address, False, \"value\", True),\n            (\"valueAge\", \"valueAge\", age.Age, False, \"value\", True),\n            (\"valueAnnotation\", \"valueAnnotation\", annotation.Annotation, False, \"value\", True),\n            (\"valueAttachment\", \"valueAttachment\", attachment.Attachment, False, \"value\", True),\n            (\"valueBase64Binary\", \"valueBase64Binary\", str, False, \"value\", True),\n            (\"valueBoolean\", \"valueBoolean\", bool, False, \"value\", True),\n            (\"valueCanonical\", \"valueCanonical\", str, False, \"value\", True),\n            (\"valueCode\", \"valueCode\", str, False, \"value\", True),\n            (\"valueCodeableConcept\", \"valueCodeableConcept\", codeableconcept.CodeableConcept, False, \"value\", True),\n            (\"valueCoding\", \"valueCoding\", coding.Coding, False, \"value\", True),\n            (\"valueContactDetail\", \"valueContactDetail\", contactdetail.ContactDetail, False, \"value\", True),\n            (\"valueContactPoint\", \"valueContactPoint\", contactpoint.ContactPoint, False, \"value\", True),\n            (\"valueContributor\", \"valueContributor\", contributor.Contributor, False, \"value\", True),\n            (\"valueCount\", \"valueCount\", count.Count, False, \"value\", True),\n            (\"valueDataRequirement\", \"valueDataRequirement\", datarequirement.DataRequirement, False, \"value\", True),\n            (\"valueDate\", \"valueDate\", fhirdate.FHIRDate, False, \"value\", True),\n            (\"valueDateTime\", \"valueDateTime\", fhirdatetime.FHIRDateTime, False, \"value\", True),\n            (\"valueDecimal\", \"valueDecimal\", float, False, \"value\", True),\n            (\"valueDistance\", \"valueDistance\", distance.Distance, False, \"value\", True),\n            (\"valueDosage\", \"valueDosage\", dosage.Dosage, False, \"value\", True),\n            (\"valueDuration\", \"valueDuration\", duration.Duration, False, \"value\", True),\n            (\"valueExpression\", \"valueExpression\", expression.Expression, False, \"value\", True),\n            (\"valueHumanName\", \"valueHumanName\", humanname.HumanName, False, \"value\", True),\n            (\"valueId\", \"valueId\", str, False, \"value\", True),\n            (\"valueIdentifier\", \"valueIdentifier\", identifier.Identifier, False, \"value\", True),\n            (\"valueInstant\", \"valueInstant\", fhirinstant.FHIRInstant, False, \"value\", True),\n            (\"valueInteger\", \"valueInteger\", int, False, \"value\", True),\n            (\"valueMarkdown\", \"valueMarkdown\", str, False, \"value\", True),\n            (\"valueMeta\", \"valueMeta\", meta.Meta, False, \"value\", True),\n            (\"valueMoney\", \"valueMoney\", money.Money, False, \"value\", True),\n            (\"valueOid\", \"valueOid\", str, False, \"value\", True),\n            (\"valueParameterDefinition\", \"valueParameterDefinition\", parameterdefinition.ParameterDefinition, False, \"value\", True),\n            (\"valuePeriod\", \"valuePeriod\", period.Period, False, \"value\", True),\n            (\"valuePositiveInt\", \"valuePositiveInt\", int, False, \"value\", True),\n            (\"valueQuantity\", \"valueQuantity\", quantity.Quantity, False, \"value\", True),\n            (\"valueRange\", \"valueRange\", range.Range, False, \"value\", True),\n            (\"valueRatio\", \"valueRatio\", ratio.Ratio, False, \"value\", True),\n            (\"valueReference\", \"valueReference\", fhirreference.FHIRReference, False, \"value\", True),\n            (\"valueRelatedArtifact\", \"valueRelatedArtifact\", relatedartifact.RelatedArtifact, False, \"value\", True),\n            (\"valueSampledData\", \"valueSampledData\", sampleddata.SampledData, False, \"value\", True),\n            (\"valueSignature\", \"valueSignature\", signature.Signature, False, \"value\", True),\n            (\"valueString\", \"valueString\", str, False, \"value\", True),\n            (\"valueTime\", \"valueTime\", fhirtime.FHIRTime, False, \"value\", True),\n            (\"valueTiming\", \"valueTiming\", timing.Timing, False, \"value\", True),\n            (\"valueTriggerDefinition\", \"valueTriggerDefinition\", triggerdefinition.TriggerDefinition, False, \"value\", True),\n            (\"valueUnsignedInt\", \"valueUnsignedInt\", int, False, \"value\", True),\n            (\"valueUri\", \"valueUri\", str, False, \"value\", True),\n            (\"valueUrl\", \"valueUrl\", str, False, \"value\", True),\n            (\"valueUsageContext\", \"valueUsageContext\", usagecontext.UsageContext, False, \"value\", True),\n            (\"valueUuid\", \"valueUuid\", str, False, \"value\", True),\n        ])\n        return js\n\n\nclass TaskRestriction(backboneelement.BackboneElement):\n    \"\"\" Constraints on fulfillment tasks.\n    \n    If the Task.focus is a request resource and the task is seeking fulfillment\n    (i.e. is asking for the request to be actioned), this element identifies\n    any limitations on what parts of the referenced request should be actioned.\n    \"\"\"\n    \n    resource_type = \"TaskRestriction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.period = None\n        \"\"\" When fulfillment sought.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.recipient = None\n        \"\"\" For whom is fulfillment sought?.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.repetitions = None\n        \"\"\" How many times to repeat.\n        Type `int`. \"\"\"\n        \n        super(TaskRestriction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(TaskRestriction, self).elementProperties()\n        js.extend([\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"recipient\", \"recipient\", fhirreference.FHIRReference, True, None, False),\n            (\"repetitions\", \"repetitions\", int, False, None, False),\n        ])\n        return js\n\n\nfrom . import address\nfrom . import age\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import contactpoint\nfrom . import contributor\nfrom . import count\nfrom . import datarequirement\nfrom . import distance\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import humanname\nfrom . import identifier\nfrom . import meta\nfrom . import money\nfrom . import parameterdefinition\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import ratio\nfrom . import relatedartifact\nfrom . import sampleddata\nfrom . import signature\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/task.py": {
      "Task.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a Task instance representing a healthcare task to be performed. The constructor accepts a JSON dictionary for initializing the object's properties and validates according to the FHIR specifications. Each task can have attributes such as creation date (`authoredOn`), status (`status`), type (`code`), input and output specifications (`input` and `output`), and links to related resources (`basedOn`, `encounter`, etc.). \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that populates the Task's properties upon initialization.\n- strict (bool, optional): If True (default), any invalid properties in the jsondict will raise a FHIRValidationError.\n\nRaises:\n- FHIRValidationError: If strict is True and the jsondict contains invalid data.\n\nAttributes:\n- authoredOn (FHIRDateTime): The date the task was created.\n- basedOn (List[FHIRReference]): Requests that this task fulfills.\n- businessStatus (CodeableConcept): The current business status of the task.\n- code (CodeableConcept): The type of task.\n- description (str): A human-readable description of the task.\n- executionPeriod (Period): Time frame during which the task is executed.\n- focus (FHIRReference): The primary subject of the task.\n- input (List[TaskInput]): Information required to perform the task.\n- output (List[TaskOutput]): Information generated by the task upon completion.\n- status (str): The current status of the task.\n\nThis class interacts with various FHIR data types, such as `FHIRDateTime`, `CodeableConcept`, `FHIRReference`, `Period`, and others that define the structure and validation requirements for each property.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.authoredOn = None\n        ' Task Creation Date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.basedOn = None\n        ' Request fulfilled by this task.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.businessStatus = None\n        ' E.g. \"Specimen collected\", \"IV prepped\".\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.code = None\n        ' Task Type.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.description = None\n        ' Human-readable explanation of task.\\n        Type `str`. '\n        self.encounter = None\n        ' Healthcare event during which this task originated.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.executionPeriod = None\n        ' Start and end time of execution.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.focus = None\n        ' What task is acting on.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.for_fhir = None\n        ' Beneficiary of the Task.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.groupIdentifier = None\n        ' Requisition or grouper id.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Task Instance Identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.input = None\n        ' Information used to perform task.\\n        List of `TaskInput` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Formal definition of task.\\n        Type `str`. '\n        self.instantiatesUri = None\n        ' Formal definition of task.\\n        Type `str`. '\n        self.insurance = None\n        ' Associated insurance coverage.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.intent = None\n        ' unknown | proposal | plan | order | original-order | reflex-order |\\n        filler-order | instance-order | option.\\n        Type `str`. '\n        self.lastModified = None\n        ' Task Last Modified Date.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.location = None\n        ' Where task occurs.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.note = None\n        ' Comments made about the task.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.output = None\n        ' Information produced as part of task.\\n        List of `TaskOutput` items (represented as `dict` in JSON). '\n        self.owner = None\n        ' Responsible individual.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.partOf = None\n        ' Composite task.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.performerType = None\n        ' Requested performer.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reasonCode = None\n        ' Why task is needed.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why task is needed.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relevantHistory = None\n        ' Key events in history of the Task.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.requester = None\n        ' Who is asking for task to be done.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.restriction = None\n        ' Constraints on fulfillment tasks.\\n        Type `TaskRestriction` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | requested | received | accepted | +.\\n        Type `str`. '\n        self.statusReason = None\n        ' Reason for current status.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(Task, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a Task instance representing a healthcare task to be performed. The constructor accepts a JSON dictionary for initializing the object's properties and validates according to the FHIR specifications. Each task can have attributes such as creation date (`authoredOn`), status (`status`), type (`code`), input and output specifications (`input` and `output`), and links to related resources (`basedOn`, `encounter`, etc.). \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that populates the Task's properties upon initialization.\n- strict (bool, optional): If True (default), any invalid properties in the jsondict will raise a FHIRValidationError.\n\nRaises:\n- FHIRValidationError: If strict is True and the jsondict contains invalid data.\n\nAttributes:\n- authoredOn (FHIRDateTime): The date the task was created.\n- basedOn (List[FHIRReference]): Requests that this task fulfills.\n- businessStatus (CodeableConcept): The current business status of the task.\n- code (CodeableConcept): The type of task.\n- description (str): A human-readable description of the task.\n- executionPeriod (Period): Time frame during which the task is executed.\n- focus (FHIRReference): The primary subject of the task.\n- input (List[TaskInput]): Information required to perform the task.\n- output (List[TaskOutput]): Information generated by the task upon completion.\n- status (str): The current status of the task.\n\nThis class interacts with various FHIR data types, such as `FHIRDateTime`, `CodeableConcept`, `FHIRReference`, `Period`, and others that define the structure and validation requirements for each property.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Task(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance, if available. If the original value is not present (i.e., if the instance was initialized directly from a date string), it provides a standardized ISO 8601 string representation of the date using the `isostring` property. This method interacts with the `origval` attribute, which holds the original JSON input, and the `isostring` property, which normalizes the internal date representation to an ISO format. This ensures consistency in how the date is represented and serialized back to JSON.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance, if available. If the original value is not present (i.e., if the instance was initialized directly from a date string), it provides a standardized ISO 8601 string representation of the date using the `isostring` property. This method interacts with the `origval` attribute, which holds the original JSON input, and the `isostring` property, which normalizes the internal date representation to an ISO format. This ensures consistency in how the date is represented and serialized back to JSON.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of FHIRDateTime.\n\nThis constructor sets up the FHIRDateTime object by initializing the `datetime` attribute to None. It also calls the constructor of the parent class, FHIRDate, with the provided `jsonval`, which can be a string representation of a datetime or None. The parent class handles parsing the input into the appropriate FHIR format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime value or None. This value is passed to the superclass constructor for further processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the Python datetime representation of the provided FHIR datetime string, initially set to None.\n\nDependencies:\n- datetime: The standard Python datetime module is used for handling date and time.\n- FHIRDate: The parent class from which FHIRDateTime inherits, responsible for handling FHIR-specific parsing logic.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of FHIRDateTime.\n\nThis constructor sets up the FHIRDateTime object by initializing the `datetime` attribute to None. It also calls the constructor of the parent class, FHIRDate, with the provided `jsonval`, which can be a string representation of a datetime or None. The parent class handles parsing the input into the appropriate FHIR format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime value or None. This value is passed to the superclass constructor for further processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the Python datetime representation of the provided FHIR datetime string, initially set to None.\n\nDependencies:\n- datetime: The standard Python datetime module is used for handling date and time.\n- FHIRDate: The parent class from which FHIRDateTime inherits, responsible for handling FHIR-specific parsing logic.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns the JSON representation of the FHIRAbstractResource instance. This method overrides the inherited `as_json` method from the parent class, adding a mandatory 'resourceType' key to the output JSON. \n\nThe output is a dictionary that includes all key-value pairs from the base class's JSON representation as well as the `resourceType` which identifies the type of resource represented by the instance, set by the class-level attribute `resource_type`.\n\nReturns:\n    dict: A dictionary representing the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase.as_json`, which provides the foundational JSON structure.\n    - `self.resource_type`: A class attribute defining the type of the resource (in this case, 'FHIRAbstractResource').\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns the JSON representation of the FHIRAbstractResource instance. This method overrides the inherited `as_json` method from the parent class, adding a mandatory 'resourceType' key to the output JSON. \n\nThe output is a dictionary that includes all key-value pairs from the base class's JSON representation as well as the `resourceType` which identifies the type of resource represented by the instance, set by the class-level attribute `resource_type`.\n\nReturns:\n    dict: A dictionary representing the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase.as_json`, which provides the foundational JSON structure.\n    - `self.resource_type`: A class attribute defining the type of the resource (in this case, 'FHIRAbstractResource').",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/task.py:Task:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/task_test.py:TaskTests:testTask1": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:instantiate_from": {
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask10": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask10": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask2": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask3": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask4": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask5": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask6": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask6": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask7": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask7": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask8": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask8": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/task_test.py:TaskTests:testTask9": {
      "tests/models/task_test.py:TaskTests:instantiate_from": {
        "fhirclient/models/task.py:Task:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/task.py:Task:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/task_test.py:TaskTests:implTask9": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/task.py:Task:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/task.py:Task:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/task.py:Task:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-task_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 task.py\n            \u2514\u2500\u2500 Task.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe Task Testing Module validates the behavior and data integrity of FHIR Task resources as defined by the HL7 FHIR standard (version 4.0.1). It ensures that Task instances are correctly constructed, adhere to expected resource attributes, and can be serialized and deserialized according to FHIR specifications. The module performs comprehensive validation of key Task functionalities, including tracking task statuses, intent, priorities, identifiers, execution periods, and metadata associated with healthcare activities or financial processes. By providing automated tests for various FHIR Task scenarios, this module helps developers and integrators maintain compliance with FHIR standards, ensuring reliable interoperability and data consistency in health IT systems. It streamlines the testing of complex workflows, reducing errors and improving the robustness of FHIR-based implementations.\n\n## FILE 1: fhirclient/models/task.py\n\n- CLASS METHOD: Task.__init__\n  - CLASS SIGNATURE: class Task(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a Task instance representing a healthcare task to be performed. The constructor accepts a JSON dictionary for initializing the object's properties and validates according to the FHIR specifications. Each task can have attributes such as creation date (`authoredOn`), status (`status`), type (`code`), input and output specifications (`input` and `output`), and links to related resources (`basedOn`, `encounter`, etc.). \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary that populates the Task's properties upon initialization.\n- strict (bool, optional): If True (default), any invalid properties in the jsondict will raise a FHIRValidationError.\n\nRaises:\n- FHIRValidationError: If strict is True and the jsondict contains invalid data.\n\nAttributes:\n- authoredOn (FHIRDateTime): The date the task was created.\n- basedOn (List[FHIRReference]): Requests that this task fulfills.\n- businessStatus (CodeableConcept): The current business status of the task.\n- code (CodeableConcept): The type of task.\n- description (str): A human-readable description of the task.\n- executionPeriod (Period): Time frame during which the task is executed.\n- focus (FHIRReference): The primary subject of the task.\n- input (List[TaskInput]): Information required to perform the task.\n- output (List[TaskOutput]): Information generated by the task upon completion.\n- status (str): The current status of the task.\n\nThis class interacts with various FHIR data types, such as `FHIRDateTime`, `CodeableConcept`, `FHIRReference`, `Period`, and others that define the structure and validation requirements for each property.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance, if available. If the original value is not present (i.e., if the instance was initialized directly from a date string), it provides a standardized ISO 8601 string representation of the date using the `isostring` property. This method interacts with the `origval` attribute, which holds the original JSON input, and the `isostring` property, which normalizes the internal date representation to an ISO format. This ensures consistency in how the date is represented and serialized back to JSON.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of FHIRDateTime.\n\nThis constructor sets up the FHIRDateTime object by initializing the `datetime` attribute to None. It also calls the constructor of the parent class, FHIRDate, with the provided `jsonval`, which can be a string representation of a datetime or None. The parent class handles parsing the input into the appropriate FHIR format.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR datetime value or None. This value is passed to the superclass constructor for further processing.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): This attribute will hold the Python datetime representation of the provided FHIR datetime string, initially set to None.\n\nDependencies:\n- datetime: The standard Python datetime module is used for handling date and time.\n- FHIRDate: The parent class from which FHIRDateTime inherits, responsible for handling FHIR-specific parsing logic.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the JSON representation of the FHIRAbstractResource instance. This method overrides the inherited `as_json` method from the parent class, adding a mandatory 'resourceType' key to the output JSON. \n\nThe output is a dictionary that includes all key-value pairs from the base class's JSON representation as well as the `resourceType` which identifies the type of resource represented by the instance, set by the class-level attribute `resource_type`.\n\nReturns:\n    dict: A dictionary representing the FHIR resource, including the 'resourceType' key.\n\nDependencies:\n    - Inherits from `fhirabstractbase.FHIRAbstractBase.as_json`, which provides the foundational JSON structure.\n    - `self.resource_type`: A class attribute defining the type of the resource (in this case, 'FHIRAbstractResource').\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/task.py": "from . import domainresource\n\nclass Task(domainresource.DomainResource):\n    \"\"\" A task to be performed.\n    \"\"\"\n    resource_type = 'Task'\n\n    def elementProperties(self):\n        js = super(Task, self).elementProperties()\n        js.extend([('authoredOn', 'authoredOn', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('businessStatus', 'businessStatus', codeableconcept.CodeableConcept, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('description', 'description', str, False, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('executionPeriod', 'executionPeriod', period.Period, False, None, False), ('focus', 'focus', fhirreference.FHIRReference, False, None, False), ('for_fhir', 'for', fhirreference.FHIRReference, False, None, False), ('groupIdentifier', 'groupIdentifier', identifier.Identifier, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('input', 'input', TaskInput, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, False, None, False), ('instantiatesUri', 'instantiatesUri', str, False, None, False), ('insurance', 'insurance', fhirreference.FHIRReference, True, None, False), ('intent', 'intent', str, False, None, True), ('lastModified', 'lastModified', fhirdatetime.FHIRDateTime, False, None, False), ('location', 'location', fhirreference.FHIRReference, False, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('output', 'output', TaskOutput, True, None, False), ('owner', 'owner', fhirreference.FHIRReference, False, None, False), ('partOf', 'partOf', fhirreference.FHIRReference, True, None, False), ('performerType', 'performerType', codeableconcept.CodeableConcept, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, False, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, False, None, False), ('relevantHistory', 'relevantHistory', fhirreference.FHIRReference, True, None, False), ('requester', 'requester', fhirreference.FHIRReference, False, None, False), ('restriction', 'restriction', TaskRestriction, False, None, False), ('status', 'status', str, False, None, True), ('statusReason', 'statusReason', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass TaskInput(backboneelement.BackboneElement):\n    \"\"\" Information used to perform task.\n    \n    Additional information that may be needed in the execution of the task.\n    \"\"\"\n    resource_type = 'TaskInput'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.type = None\n        ' Label for the input.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueAddress = None\n        ' Content to use in performing the task.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.valueAge = None\n        ' Content to use in performing the task.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.valueAnnotation = None\n        ' Content to use in performing the task.\\n        Type `Annotation` (represented as `dict` in JSON). '\n        self.valueAttachment = None\n        ' Content to use in performing the task.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBase64Binary = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueBoolean = None\n        ' Content to use in performing the task.\\n        Type `bool`. '\n        self.valueCanonical = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueCode = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueCodeableConcept = None\n        ' Content to use in performing the task.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueCoding = None\n        ' Content to use in performing the task.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueContactDetail = None\n        ' Content to use in performing the task.\\n        Type `ContactDetail` (represented as `dict` in JSON). '\n        self.valueContactPoint = None\n        ' Content to use in performing the task.\\n        Type `ContactPoint` (represented as `dict` in JSON). '\n        self.valueContributor = None\n        ' Content to use in performing the task.\\n        Type `Contributor` (represented as `dict` in JSON). '\n        self.valueCount = None\n        ' Content to use in performing the task.\\n        Type `Count` (represented as `dict` in JSON). '\n        self.valueDataRequirement = None\n        ' Content to use in performing the task.\\n        Type `DataRequirement` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' Content to use in performing the task.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueDateTime = None\n        ' Content to use in performing the task.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' Content to use in performing the task.\\n        Type `float`. '\n        self.valueDistance = None\n        ' Content to use in performing the task.\\n        Type `Distance` (represented as `dict` in JSON). '\n        self.valueDosage = None\n        ' Content to use in performing the task.\\n        Type `Dosage` (represented as `dict` in JSON). '\n        self.valueDuration = None\n        ' Content to use in performing the task.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.valueExpression = None\n        ' Content to use in performing the task.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.valueHumanName = None\n        ' Content to use in performing the task.\\n        Type `HumanName` (represented as `dict` in JSON). '\n        self.valueId = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueIdentifier = None\n        ' Content to use in performing the task.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.valueInstant = None\n        ' Content to use in performing the task.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.valueInteger = None\n        ' Content to use in performing the task.\\n        Type `int`. '\n        self.valueMarkdown = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueMeta = None\n        ' Content to use in performing the task.\\n        Type `Meta` (represented as `dict` in JSON). '\n        self.valueMoney = None\n        ' Content to use in performing the task.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.valueOid = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueParameterDefinition = None\n        ' Content to use in performing the task.\\n        Type `ParameterDefinition` (represented as `dict` in JSON). '\n        self.valuePeriod = None\n        ' Content to use in performing the task.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.valuePositiveInt = None\n        ' Content to use in performing the task.\\n        Type `int`. '\n        self.valueQuantity = None\n        ' Content to use in performing the task.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueRange = None\n        ' Content to use in performing the task.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.valueRatio = None\n        ' Content to use in performing the task.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Content to use in performing the task.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueRelatedArtifact = None\n        ' Content to use in performing the task.\\n        Type `RelatedArtifact` (represented as `dict` in JSON). '\n        self.valueSampledData = None\n        ' Content to use in performing the task.\\n        Type `SampledData` (represented as `dict` in JSON). '\n        self.valueSignature = None\n        ' Content to use in performing the task.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueTime = None\n        ' Content to use in performing the task.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.valueTiming = None\n        ' Content to use in performing the task.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.valueTriggerDefinition = None\n        ' Content to use in performing the task.\\n        Type `TriggerDefinition` (represented as `dict` in JSON). '\n        self.valueUnsignedInt = None\n        ' Content to use in performing the task.\\n        Type `int`. '\n        self.valueUri = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueUrl = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        self.valueUsageContext = None\n        ' Content to use in performing the task.\\n        Type `UsageContext` (represented as `dict` in JSON). '\n        self.valueUuid = None\n        ' Content to use in performing the task.\\n        Type `str`. '\n        super(TaskInput, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TaskInput, self).elementProperties()\n        js.extend([('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('valueAddress', 'valueAddress', address.Address, False, 'value', True), ('valueAge', 'valueAge', age.Age, False, 'value', True), ('valueAnnotation', 'valueAnnotation', annotation.Annotation, False, 'value', True), ('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', True), ('valueBase64Binary', 'valueBase64Binary', str, False, 'value', True), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCanonical', 'valueCanonical', str, False, 'value', True), ('valueCode', 'valueCode', str, False, 'value', True), ('valueCodeableConcept', 'valueCodeableConcept', codeableconcept.CodeableConcept, False, 'value', True), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueContactDetail', 'valueContactDetail', contactdetail.ContactDetail, False, 'value', True), ('valueContactPoint', 'valueContactPoint', contactpoint.ContactPoint, False, 'value', True), ('valueContributor', 'valueContributor', contributor.Contributor, False, 'value', True), ('valueCount', 'valueCount', count.Count, False, 'value', True), ('valueDataRequirement', 'valueDataRequirement', datarequirement.DataRequirement, False, 'value', True), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', True), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueDistance', 'valueDistance', distance.Distance, False, 'value', True), ('valueDosage', 'valueDosage', dosage.Dosage, False, 'value', True), ('valueDuration', 'valueDuration', duration.Duration, False, 'value', True), ('valueExpression', 'valueExpression', expression.Expression, False, 'value', True), ('valueHumanName', 'valueHumanName', humanname.HumanName, False, 'value', True), ('valueId', 'valueId', str, False, 'value', True), ('valueIdentifier', 'valueIdentifier', identifier.Identifier, False, 'value', True), ('valueInstant', 'valueInstant', fhirinstant.FHIRInstant, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueMarkdown', 'valueMarkdown', str, False, 'value', True), ('valueMeta', 'valueMeta', meta.Meta, False, 'value', True), ('valueMoney', 'valueMoney', money.Money, False, 'value', True), ('valueOid', 'valueOid', str, False, 'value', True), ('valueParameterDefinition', 'valueParameterDefinition', parameterdefinition.ParameterDefinition, False, 'value', True), ('valuePeriod', 'valuePeriod', period.Period, False, 'value', True), ('valuePositiveInt', 'valuePositiveInt', int, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True), ('valueRange', 'valueRange', range.Range, False, 'value', True), ('valueRatio', 'valueRatio', ratio.Ratio, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True), ('valueRelatedArtifact', 'valueRelatedArtifact', relatedartifact.RelatedArtifact, False, 'value', True), ('valueSampledData', 'valueSampledData', sampleddata.SampledData, False, 'value', True), ('valueSignature', 'valueSignature', signature.Signature, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', True), ('valueTiming', 'valueTiming', timing.Timing, False, 'value', True), ('valueTriggerDefinition', 'valueTriggerDefinition', triggerdefinition.TriggerDefinition, False, 'value', True), ('valueUnsignedInt', 'valueUnsignedInt', int, False, 'value', True), ('valueUri', 'valueUri', str, False, 'value', True), ('valueUrl', 'valueUrl', str, False, 'value', True), ('valueUsageContext', 'valueUsageContext', usagecontext.UsageContext, False, 'value', True), ('valueUuid', 'valueUuid', str, False, 'value', True)])\n        return js\n\nclass TaskOutput(backboneelement.BackboneElement):\n    \"\"\" Information produced as part of task.\n    \n    Outputs produced by the Task.\n    \"\"\"\n    resource_type = 'TaskOutput'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.type = None\n        ' Label for output.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueAddress = None\n        ' Result of output.\\n        Type `Address` (represented as `dict` in JSON). '\n        self.valueAge = None\n        ' Result of output.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.valueAnnotation = None\n        ' Result of output.\\n        Type `Annotation` (represented as `dict` in JSON). '\n        self.valueAttachment = None\n        ' Result of output.\\n        Type `Attachment` (represented as `dict` in JSON). '\n        self.valueBase64Binary = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueBoolean = None\n        ' Result of output.\\n        Type `bool`. '\n        self.valueCanonical = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueCode = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueCodeableConcept = None\n        ' Result of output.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.valueCoding = None\n        ' Result of output.\\n        Type `Coding` (represented as `dict` in JSON). '\n        self.valueContactDetail = None\n        ' Result of output.\\n        Type `ContactDetail` (represented as `dict` in JSON). '\n        self.valueContactPoint = None\n        ' Result of output.\\n        Type `ContactPoint` (represented as `dict` in JSON). '\n        self.valueContributor = None\n        ' Result of output.\\n        Type `Contributor` (represented as `dict` in JSON). '\n        self.valueCount = None\n        ' Result of output.\\n        Type `Count` (represented as `dict` in JSON). '\n        self.valueDataRequirement = None\n        ' Result of output.\\n        Type `DataRequirement` (represented as `dict` in JSON). '\n        self.valueDate = None\n        ' Result of output.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.valueDateTime = None\n        ' Result of output.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.valueDecimal = None\n        ' Result of output.\\n        Type `float`. '\n        self.valueDistance = None\n        ' Result of output.\\n        Type `Distance` (represented as `dict` in JSON). '\n        self.valueDosage = None\n        ' Result of output.\\n        Type `Dosage` (represented as `dict` in JSON). '\n        self.valueDuration = None\n        ' Result of output.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.valueExpression = None\n        ' Result of output.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.valueHumanName = None\n        ' Result of output.\\n        Type `HumanName` (represented as `dict` in JSON). '\n        self.valueId = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueIdentifier = None\n        ' Result of output.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.valueInstant = None\n        ' Result of output.\\n        Type `FHIRInstant` (represented as `str` in JSON). '\n        self.valueInteger = None\n        ' Result of output.\\n        Type `int`. '\n        self.valueMarkdown = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueMeta = None\n        ' Result of output.\\n        Type `Meta` (represented as `dict` in JSON). '\n        self.valueMoney = None\n        ' Result of output.\\n        Type `Money` (represented as `dict` in JSON). '\n        self.valueOid = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueParameterDefinition = None\n        ' Result of output.\\n        Type `ParameterDefinition` (represented as `dict` in JSON). '\n        self.valuePeriod = None\n        ' Result of output.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.valuePositiveInt = None\n        ' Result of output.\\n        Type `int`. '\n        self.valueQuantity = None\n        ' Result of output.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.valueRange = None\n        ' Result of output.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.valueRatio = None\n        ' Result of output.\\n        Type `Ratio` (represented as `dict` in JSON). '\n        self.valueReference = None\n        ' Result of output.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.valueRelatedArtifact = None\n        ' Result of output.\\n        Type `RelatedArtifact` (represented as `dict` in JSON). '\n        self.valueSampledData = None\n        ' Result of output.\\n        Type `SampledData` (represented as `dict` in JSON). '\n        self.valueSignature = None\n        ' Result of output.\\n        Type `Signature` (represented as `dict` in JSON). '\n        self.valueString = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueTime = None\n        ' Result of output.\\n        Type `FHIRTime` (represented as `str` in JSON). '\n        self.valueTiming = None\n        ' Result of output.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.valueTriggerDefinition = None\n        ' Result of output.\\n        Type `TriggerDefinition` (represented as `dict` in JSON). '\n        self.valueUnsignedInt = None\n        ' Result of output.\\n        Type `int`. '\n        self.valueUri = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueUrl = None\n        ' Result of output.\\n        Type `str`. '\n        self.valueUsageContext = None\n        ' Result of output.\\n        Type `UsageContext` (represented as `dict` in JSON). '\n        self.valueUuid = None\n        ' Result of output.\\n        Type `str`. '\n        super(TaskOutput, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TaskOutput, self).elementProperties()\n        js.extend([('type', 'type', codeableconcept.CodeableConcept, False, None, True), ('valueAddress', 'valueAddress', address.Address, False, 'value', True), ('valueAge', 'valueAge', age.Age, False, 'value', True), ('valueAnnotation', 'valueAnnotation', annotation.Annotation, False, 'value', True), ('valueAttachment', 'valueAttachment', attachment.Attachment, False, 'value', True), ('valueBase64Binary', 'valueBase64Binary', str, False, 'value', True), ('valueBoolean', 'valueBoolean', bool, False, 'value', True), ('valueCanonical', 'valueCanonical', str, False, 'value', True), ('valueCode', 'valueCode', str, False, 'value', True), ('valueCodeableConcept', 'valueCodeableConcept', codeableconcept.CodeableConcept, False, 'value', True), ('valueCoding', 'valueCoding', coding.Coding, False, 'value', True), ('valueContactDetail', 'valueContactDetail', contactdetail.ContactDetail, False, 'value', True), ('valueContactPoint', 'valueContactPoint', contactpoint.ContactPoint, False, 'value', True), ('valueContributor', 'valueContributor', contributor.Contributor, False, 'value', True), ('valueCount', 'valueCount', count.Count, False, 'value', True), ('valueDataRequirement', 'valueDataRequirement', datarequirement.DataRequirement, False, 'value', True), ('valueDate', 'valueDate', fhirdate.FHIRDate, False, 'value', True), ('valueDateTime', 'valueDateTime', fhirdatetime.FHIRDateTime, False, 'value', True), ('valueDecimal', 'valueDecimal', float, False, 'value', True), ('valueDistance', 'valueDistance', distance.Distance, False, 'value', True), ('valueDosage', 'valueDosage', dosage.Dosage, False, 'value', True), ('valueDuration', 'valueDuration', duration.Duration, False, 'value', True), ('valueExpression', 'valueExpression', expression.Expression, False, 'value', True), ('valueHumanName', 'valueHumanName', humanname.HumanName, False, 'value', True), ('valueId', 'valueId', str, False, 'value', True), ('valueIdentifier', 'valueIdentifier', identifier.Identifier, False, 'value', True), ('valueInstant', 'valueInstant', fhirinstant.FHIRInstant, False, 'value', True), ('valueInteger', 'valueInteger', int, False, 'value', True), ('valueMarkdown', 'valueMarkdown', str, False, 'value', True), ('valueMeta', 'valueMeta', meta.Meta, False, 'value', True), ('valueMoney', 'valueMoney', money.Money, False, 'value', True), ('valueOid', 'valueOid', str, False, 'value', True), ('valueParameterDefinition', 'valueParameterDefinition', parameterdefinition.ParameterDefinition, False, 'value', True), ('valuePeriod', 'valuePeriod', period.Period, False, 'value', True), ('valuePositiveInt', 'valuePositiveInt', int, False, 'value', True), ('valueQuantity', 'valueQuantity', quantity.Quantity, False, 'value', True), ('valueRange', 'valueRange', range.Range, False, 'value', True), ('valueRatio', 'valueRatio', ratio.Ratio, False, 'value', True), ('valueReference', 'valueReference', fhirreference.FHIRReference, False, 'value', True), ('valueRelatedArtifact', 'valueRelatedArtifact', relatedartifact.RelatedArtifact, False, 'value', True), ('valueSampledData', 'valueSampledData', sampleddata.SampledData, False, 'value', True), ('valueSignature', 'valueSignature', signature.Signature, False, 'value', True), ('valueString', 'valueString', str, False, 'value', True), ('valueTime', 'valueTime', fhirtime.FHIRTime, False, 'value', True), ('valueTiming', 'valueTiming', timing.Timing, False, 'value', True), ('valueTriggerDefinition', 'valueTriggerDefinition', triggerdefinition.TriggerDefinition, False, 'value', True), ('valueUnsignedInt', 'valueUnsignedInt', int, False, 'value', True), ('valueUri', 'valueUri', str, False, 'value', True), ('valueUrl', 'valueUrl', str, False, 'value', True), ('valueUsageContext', 'valueUsageContext', usagecontext.UsageContext, False, 'value', True), ('valueUuid', 'valueUuid', str, False, 'value', True)])\n        return js\n\nclass TaskRestriction(backboneelement.BackboneElement):\n    \"\"\" Constraints on fulfillment tasks.\n    \n    If the Task.focus is a request resource and the task is seeking fulfillment\n    (i.e. is asking for the request to be actioned), this element identifies\n    any limitations on what parts of the referenced request should be actioned.\n    \"\"\"\n    resource_type = 'TaskRestriction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.period = None\n        ' When fulfillment sought.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.recipient = None\n        ' For whom is fulfillment sought?.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.repetitions = None\n        ' How many times to repeat.\\n        Type `int`. '\n        super(TaskRestriction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(TaskRestriction, self).elementProperties()\n        js.extend([('period', 'period', period.Period, False, None, False), ('recipient', 'recipient', fhirreference.FHIRReference, True, None, False), ('repetitions', 'repetitions', int, False, None, False)])\n        return js\nfrom . import address\nfrom . import age\nfrom . import annotation\nfrom . import attachment\nfrom . import codeableconcept\nfrom . import coding\nfrom . import contactdetail\nfrom . import contactpoint\nfrom . import contributor\nfrom . import count\nfrom . import datarequirement\nfrom . import distance\nfrom . import dosage\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirinstant\nfrom . import fhirreference\nfrom . import fhirtime\nfrom . import humanname\nfrom . import identifier\nfrom . import meta\nfrom . import money\nfrom . import parameterdefinition\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import ratio\nfrom . import relatedartifact\nfrom . import sampleddata\nfrom . import signature\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}