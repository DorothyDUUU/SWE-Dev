{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-researchelementdefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/researchelementdefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import researchelementdefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ResearchElementDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ResearchElementDefinition\", js[\"resourceType\"])\n        return researchelementdefinition.ResearchElementDefinition(js)\n    \n    def testResearchElementDefinition1(self):\n        inst = self.instantiate_from(\"researchelementdefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ResearchElementDefinition instance\")\n        self.implResearchElementDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ResearchElementDefinition\", js[\"resourceType\"])\n        inst2 = researchelementdefinition.ResearchElementDefinition(js)\n        self.implResearchElementDefinition1(inst2)\n    \n    def implResearchElementDefinition1(self, inst):\n        self.assertEqual(inst.characteristic[0].definitionCodeableConcept.text, \"Diabetic patients over 65\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"population\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/researchelementdefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ResearchElementDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ResearchElementDefinition(domainresource.DomainResource):\n    \"\"\" A population, intervention, or exposure definition.\n    \n    The ResearchElementDefinition resource describes a \"PICO\" element that\n    knowledge (evidence, assertion, recommendation) is about.\n    \"\"\"\n    \n    resource_type = \"ResearchElementDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the research element definition was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.characteristic = None\n        \"\"\" What defines the members of the research element.\n        List of `ResearchElementDefinitionCharacteristic` items (represented as `dict` in JSON). \"\"\"\n        \n        self.comment = None\n        \"\"\" Used for footnotes or explanatory notes.\n        List of `str` items. \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the research element definition.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the research element definition is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the research element definition.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for research element definition (if\n        applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the research element definition was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.library = None\n        \"\"\" Logic used by the ResearchElementDefinition.\n        List of `str` items. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this research element definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this research element definition is defined.\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.shortTitle = None\n        \"\"\" Title for use in informal contexts.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\n        Device.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\n        Device.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the ResearchElementDefinition.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this research element definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" The category of the ResearchElementDefinition, such as Education,\n        Treatment, Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" population | exposure | outcome.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this research element definition,\n        represented as a URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" Describes the clinical usage of the ResearchElementDefinition.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.variableType = None\n        \"\"\" dichotomous | continuous | descriptive.\n        Type `str`. \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the research element definition.\n        Type `str`. \"\"\"\n        \n        super(ResearchElementDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ResearchElementDefinition, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"characteristic\", \"characteristic\", ResearchElementDefinitionCharacteristic, True, None, True),\n            (\"comment\", \"comment\", str, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"library\", \"library\", str, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"shortTitle\", \"shortTitle\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", str, False, None, True),\n            (\"url\", \"url\", str, False, None, False),\n            (\"usage\", \"usage\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"variableType\", \"variableType\", str, False, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ResearchElementDefinitionCharacteristic(backboneelement.BackboneElement):\n    \"\"\" What defines the members of the research element.\n    \n    A characteristic that defines the members of the research element. Multiple\n    characteristics are applied with \"and\" semantics.\n    \"\"\"\n    \n    resource_type = \"ResearchElementDefinitionCharacteristic\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.definitionCanonical = None\n        \"\"\" What code or expression defines members?.\n        Type `str`. \"\"\"\n        \n        self.definitionCodeableConcept = None\n        \"\"\" What code or expression defines members?.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionDataRequirement = None\n        \"\"\" What code or expression defines members?.\n        Type `DataRequirement` (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionExpression = None\n        \"\"\" What code or expression defines members?.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.exclude = None\n        \"\"\" Whether the characteristic includes or excludes members.\n        Type `bool`. \"\"\"\n        \n        self.participantEffectiveDateTime = None\n        \"\"\" What time period do participants cover.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.participantEffectiveDescription = None\n        \"\"\" What time period do participants cover.\n        Type `str`. \"\"\"\n        \n        self.participantEffectiveDuration = None\n        \"\"\" What time period do participants cover.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.participantEffectiveGroupMeasure = None\n        \"\"\" mean | median | mean-of-mean | mean-of-median | median-of-mean |\n        median-of-median.\n        Type `str`. \"\"\"\n        \n        self.participantEffectivePeriod = None\n        \"\"\" What time period do participants cover.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.participantEffectiveTimeFromStart = None\n        \"\"\" Observation time from study start.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.participantEffectiveTiming = None\n        \"\"\" What time period do participants cover.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.studyEffectiveDateTime = None\n        \"\"\" What time period does the study cover.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.studyEffectiveDescription = None\n        \"\"\" What time period does the study cover.\n        Type `str`. \"\"\"\n        \n        self.studyEffectiveDuration = None\n        \"\"\" What time period does the study cover.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.studyEffectiveGroupMeasure = None\n        \"\"\" mean | median | mean-of-mean | mean-of-median | median-of-mean |\n        median-of-median.\n        Type `str`. \"\"\"\n        \n        self.studyEffectivePeriod = None\n        \"\"\" What time period does the study cover.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.studyEffectiveTimeFromStart = None\n        \"\"\" Observation time from study start.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.studyEffectiveTiming = None\n        \"\"\" What time period does the study cover.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.unitOfMeasure = None\n        \"\"\" What unit is the outcome described in?.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.usageContext = None\n        \"\"\" What code/value pairs define members?.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ResearchElementDefinitionCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ResearchElementDefinitionCharacteristic, self).elementProperties()\n        js.extend([\n            (\"definitionCanonical\", \"definitionCanonical\", str, False, \"definition\", True),\n            (\"definitionCodeableConcept\", \"definitionCodeableConcept\", codeableconcept.CodeableConcept, False, \"definition\", True),\n            (\"definitionDataRequirement\", \"definitionDataRequirement\", datarequirement.DataRequirement, False, \"definition\", True),\n            (\"definitionExpression\", \"definitionExpression\", expression.Expression, False, \"definition\", True),\n            (\"exclude\", \"exclude\", bool, False, None, False),\n            (\"participantEffectiveDateTime\", \"participantEffectiveDateTime\", fhirdatetime.FHIRDateTime, False, \"participantEffective\", False),\n            (\"participantEffectiveDescription\", \"participantEffectiveDescription\", str, False, None, False),\n            (\"participantEffectiveDuration\", \"participantEffectiveDuration\", duration.Duration, False, \"participantEffective\", False),\n            (\"participantEffectiveGroupMeasure\", \"participantEffectiveGroupMeasure\", str, False, None, False),\n            (\"participantEffectivePeriod\", \"participantEffectivePeriod\", period.Period, False, \"participantEffective\", False),\n            (\"participantEffectiveTimeFromStart\", \"participantEffectiveTimeFromStart\", duration.Duration, False, None, False),\n            (\"participantEffectiveTiming\", \"participantEffectiveTiming\", timing.Timing, False, \"participantEffective\", False),\n            (\"studyEffectiveDateTime\", \"studyEffectiveDateTime\", fhirdatetime.FHIRDateTime, False, \"studyEffective\", False),\n            (\"studyEffectiveDescription\", \"studyEffectiveDescription\", str, False, None, False),\n            (\"studyEffectiveDuration\", \"studyEffectiveDuration\", duration.Duration, False, \"studyEffective\", False),\n            (\"studyEffectiveGroupMeasure\", \"studyEffectiveGroupMeasure\", str, False, None, False),\n            (\"studyEffectivePeriod\", \"studyEffectivePeriod\", period.Period, False, \"studyEffective\", False),\n            (\"studyEffectiveTimeFromStart\", \"studyEffectiveTimeFromStart\", duration.Duration, False, None, False),\n            (\"studyEffectiveTiming\", \"studyEffectiveTiming\", timing.Timing, False, \"studyEffective\", False),\n            (\"unitOfMeasure\", \"unitOfMeasure\", codeableconcept.CodeableConcept, False, None, False),\n            (\"usageContext\", \"usageContext\", usagecontext.UsageContext, True, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import timing\nfrom . import usagecontext\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a `FHIRAbstractResource` instance.\n\nThis constructor sets up the instance by optionally processing a JSON dictionary (`jsondict`) that represents the FHIR resource. It also checks that the `resourceType` in the provided JSON matches the class's `resource_type` constant; otherwise, an exception is raised. The `_server` attribute is initialized to `None` to keep track of the server from which this instance is read.\n\nParameters:\n- `jsondict` (dict or None): An optional dictionary containing resource data in JSON format. If provided, it must include a `resourceType` that matches the class's `resource_type`.\n- `strict` (bool): A flag to enforce strict parsing of the JSON data passed to the (`super`) class initializer.\n\nReturns:\n- None: The method initializes the object in place.\n\nAttributes:\n- `_server`: Stores the FHIR server instance from which the resource is read.\n\nDependencies:\n- The method relies on the superclass, `FHIRAbstractBase`, which it initializes with the provided `jsondict` and `strict` parameters.\n- It also checks the `resource_type` attribute defined at the class level, which is crucial for validation.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a `FHIRAbstractResource` instance.\n\nThis constructor sets up the instance by optionally processing a JSON dictionary (`jsondict`) that represents the FHIR resource. It also checks that the `resourceType` in the provided JSON matches the class's `resource_type` constant; otherwise, an exception is raised. The `_server` attribute is initialized to `None` to keep track of the server from which this instance is read.\n\nParameters:\n- `jsondict` (dict or None): An optional dictionary containing resource data in JSON format. If provided, it must include a `resourceType` that matches the class's `resource_type`.\n- `strict` (bool): A flag to enforce strict parsing of the JSON data passed to the (`super`) class initializer.\n\nReturns:\n- None: The method initializes the object in place.\n\nAttributes:\n- `_server`: Stores the FHIR server instance from which the resource is read.\n\nDependencies:\n- The method relies on the superclass, `FHIRAbstractBase`, which it initializes with the provided `jsondict` and `strict` parameters.\n- It also checks the `resource_type` attribute defined at the class level, which is crucial for validation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of the FHIRAbstractResource class to a JSON representation.\n\nThis method overrides the base class's `as_json()` method to ensure that the resulting JSON dictionary includes the 'resourceType' key, which is set to the resource_type of the instance (defined as 'FHIRAbstractResource'). \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including all attributes inherited from the base class and the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()` to fetch the base attributes in JSON format.\n    - Uses the `resource_type` attribute to add the 'resourceType' key to the resulting JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of the FHIRAbstractResource class to a JSON representation.\n\nThis method overrides the base class's `as_json()` method to ensure that the resulting JSON dictionary includes the 'resourceType' key, which is set to the resource_type of the instance (defined as 'FHIRAbstractResource'). \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including all attributes inherited from the base class and the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()` to fetch the base attributes in JSON format.\n    - Uses the `resource_type` attribute to add the 'resourceType' key to the resulting JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializer for the FHIRAbstractBase class, which serves as an abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. The constructor accepts an optional JSON dictionary for initializing the instance and a boolean flag, `strict`, that determines whether to raise exceptions on validation errors or log warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the object. If provided, the `_update_with_json` method is called to populate the object's attributes based on this dictionary.\n- strict (bool, optional): A flag indicating whether to raise `FHIRValidationError` on validation errors (default is True). If False, instead of raising, it logs any validation issues as warnings.\n\nAttributes:\n- self._resolved: A dictionary to cache resolved resources.\n- self._owner: References the parent resource containing this instance, aiding in resource resolution.\n\nExceptions:\n- Raises `FHIRValidationError` if validation errors occur and `strict` is True.\n\nInteractivity:\n- The method calls `update_with_json` to set instance properties based on the JSON data, ensuring it conforms to the FHIR specifications.\n- Utilizes the `logger` for logging warnings, illustrating interactions with the logging framework.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializer for the FHIRAbstractBase class, which serves as an abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. The constructor accepts an optional JSON dictionary for initializing the instance and a boolean flag, `strict`, that determines whether to raise exceptions on validation errors or log warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the object. If provided, the `_update_with_json` method is called to populate the object's attributes based on this dictionary.\n- strict (bool, optional): A flag indicating whether to raise `FHIRValidationError` on validation errors (default is True). If False, instead of raising, it logs any validation issues as warnings.\n\nAttributes:\n- self._resolved: A dictionary to cache resolved resources.\n- self._owner: References the parent resource containing this instance, aiding in resource resolution.\n\nExceptions:\n- Raises `FHIRValidationError` if validation errors occur and `strict` is True.\n\nInteractivity:\n- The method calls `update_with_json` to set instance properties based on the JSON data, ensuring it conforms to the FHIR specifications.\n- Utilizes the `logger` for logging warnings, illustrating interactions with the logging framework.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class from a JSON dictionary or a list of dictionaries. This method checks the input type and delegates to an internal method for instantiation. If a JSON dictionary with a \"resourceType\" attribute is provided, it may utilize `FHIRElementFactory` to ensure a proper class instance is created based on the resource type. \n\nParameters:\n- jsonobj: A dictionary or a list of dictionaries that contains data to instantiate the FHIR element.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any JSON dictionary fails, the error is propagated with additional context about its position in the list.\n\nThis method relies on the class method `_with_json_dict`, which handles the actual conversion of a dictionary to an instance and raises appropriate exceptions based on validation failures.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initializes an instance of the FHIRAbstractBase class from a JSON dictionary or a list of dictionaries. This method checks the input type and delegates to an internal method for instantiation. If a JSON dictionary with a \"resourceType\" attribute is provided, it may utilize `FHIRElementFactory` to ensure a proper class instance is created based on the resource type. \n\nParameters:\n- jsonobj: A dictionary or a list of dictionaries that contains data to instantiate the FHIR element.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any JSON dictionary fails, the error is propagated with additional context about its position in the list.\n\nThis method relies on the class method `_with_json_dict`, which handles the actual conversion of a dictionary to an instance and raises appropriate exceptions based on validation failures.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal method to create an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing data to instantiate an object of the class.\n:raises TypeError: If `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If the instantiation fails due to validation issues.\n:returns: An instance of the class initialized with the data from `jsondict`.\n\nThis method is called internally within the `with_json` method for handling JSON data and ensures the provided input is a dictionary. It leverages the class constructor to create and return a new instance upon successful type validation.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal method to create an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing data to instantiate an object of the class.\n:raises TypeError: If `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If the instantiation fails due to validation issues.\n:returns: An instance of the class initialized with the data from `jsondict`.\n\nThis method is called internally within the `with_json` method for handling JSON data and ensures the provided input is a dictionary. It leverages the class constructor to create and return a new instance upon successful type validation.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates a FHIRAbstractBase element by decoding a JSON dictionary or list, while also linking the instantiated element to its owning parent resource.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list of dictionaries used for instantiation.\n- owner (FHIRElement): The parent resource that owns the instantiated element, facilitating the resolution of contained resources.\n\nReturns:\n- An instance of the FHIRAbstractBase class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are errors during the instantiation process, such as validation failures.\n\nThis method leverages the `with_json` class method for instantiation, ensuring that the owner of each instantiated element is set appropriately by assigning it to the `_owner` attribute. This connection aids in resource resolution during further operations.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates a FHIRAbstractBase element by decoding a JSON dictionary or list, while also linking the instantiated element to its owning parent resource.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list of dictionaries used for instantiation.\n- owner (FHIRElement): The parent resource that owns the instantiated element, facilitating the resolution of contained resources.\n\nReturns:\n- An instance of the FHIRAbstractBase class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are errors during the instantiation process, such as validation failures.\n\nThis method leverages the `with_json` class method for instantiation, ensuring that the owner of each instantiated element is set appropriately by assigning it to the `_owner` attribute. This connection aids in resource resolution during further operations.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples, where each tuple represents a property that should be serialized for FHIR elements. Each tuple contains the following information: the property name, its JSON representation name, its expected type, a boolean indicating if it is a list, the name of a related property (if applicable), and a boolean indicating if it is a non-optional property.\n\nThis method is intended to be overridden by subclasses to specify the properties relevant to that specific FHIR element, as it currently returns an empty list. The tuples returned by this method help in the serialization process defined in `as_json()` by ensuring that the correct properties are converted to JSON format. It also plays a crucial role in the `update_with_json()` method to validate incoming data against expected types and required fields.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples, where each tuple represents a property that should be serialized for FHIR elements. Each tuple contains the following information: the property name, its JSON representation name, its expected type, a boolean indicating if it is a list, the name of a related property (if applicable), and a boolean indicating if it is a non-optional property.\n\nThis method is intended to be overridden by subclasses to specify the properties relevant to that specific FHIR element, as it currently returns an empty list. The tuples returned by this method help in the serialization process defined in `as_json()` by ensuring that the correct properties are converted to JSON format. It also plays a crucial role in the `update_with_json()` method to validate incoming data against expected types and required fields.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Update the instance with data from a provided JSON dictionary.\n\nThis method parses the input JSON dictionary, checks for valid properties defined by `elementProperties()`, and assigns values to the instance attributes accordingly. If `strict` mode is enabled and validation errors occur, they are raised as `FHIRValidationError`. Non-optional properties that are missing and superfluous properties in the input are also reported through exceptions.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing data to update the instance attributes.\n\nRaises:\n- FHIRValidationError: If there are validation errors during the update process.\n- TypeError: If the provided jsondict is not a dictionary.\n- KeyError: If required non-optional properties are missing.\n- AttributeError: If there are extra keys in the jsondict that are not defined in the instance's properties.\n\nConstants and Variables:\n- `errs`: A list collecting validation errors encountered during the update.\n- `valid`: A set initialized with 'resourceType', representing valid property names expected in the jsondict.\n- `found`: A set tracking which properties from the jsondict were successfully found and assigned.\n- `nonoptionals`: A set used to keep track of which required properties (non-optional) were not found during the update.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Update the instance with data from a provided JSON dictionary.\n\nThis method parses the input JSON dictionary, checks for valid properties defined by `elementProperties()`, and assigns values to the instance attributes accordingly. If `strict` mode is enabled and validation errors occur, they are raised as `FHIRValidationError`. Non-optional properties that are missing and superfluous properties in the input are also reported through exceptions.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing data to update the instance attributes.\n\nRaises:\n- FHIRValidationError: If there are validation errors during the update process.\n- TypeError: If the provided jsondict is not a dictionary.\n- KeyError: If required non-optional properties are missing.\n- AttributeError: If there are extra keys in the jsondict that are not defined in the instance's properties.\n\nConstants and Variables:\n- `errs`: A list collecting validation errors encountered during the update.\n- `valid`: A set initialized with 'resourceType', representing valid property names expected in the jsondict.\n- `found`: A set tracking which properties from the jsondict were successfully found and assigned.\n- `nonoptionals`: A set used to keep track of which required properties (non-optional) were not found during the update.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that required properties are not None and that values adhere to their expected types. \n\nReturns a validated dictionary suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If properties have the wrong type, if required properties are empty, or if there are issues in serializing the values.\n\nDuring the serialization, it checks for:\n- `nonoptionals`: A set that tracks properties that must have values based on `not_optional` from `elementProperties()`. \n- `found`: A set that records which properties have been successfully processed.\n\nThe method utilizes the `_matches_type` helper method to verify type consistency of attributes against their declared types. Any encountered issues are collected and raised as a `FHIRValidationError` containing all relevant error messages.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that required properties are not None and that values adhere to their expected types. \n\nReturns a validated dictionary suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If properties have the wrong type, if required properties are empty, or if there are issues in serializing the values.\n\nDuring the serialization, it checks for:\n- `nonoptionals`: A set that tracks properties that must have values based on `not_optional` from `elementProperties()`. \n- `found`: A set that records which properties have been successfully processed.\n\nThe method utilizes the `_matches_type` helper method to verify type consistency of attributes against their declared types. Any encountered issues are collected and raised as a `FHIRValidationError` containing all relevant error messages.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Determines if the provided value matches the expected type.\n\nThis method checks if the given `value` is of the specified type `typ`. It accounts for special conditions such as when the value is `None`, or when the type is an integer or float. If the Python version is below 3.0, it also ensures compatibility with both `str` and `unicode` types.\n\nParameters:\n- value: The value to be checked against the expected type.\n- typ: The type against which the value is to be validated.\n\nReturns:\n- True if the value matches the expected type, False otherwise.\n\nImportant constants:\n- `sys.version_info`: Used to determine the running Python version to enable compatibility checks for string types (`str` and `unicode`).\n    \nNote that the method can be called from other parts of the class, particularly during JSON update or validation processes, ensuring that properties are only set if they match their expected types.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Determines if the provided value matches the expected type.\n\nThis method checks if the given `value` is of the specified type `typ`. It accounts for special conditions such as when the value is `None`, or when the type is an integer or float. If the Python version is below 3.0, it also ensures compatibility with both `str` and `unicode` types.\n\nParameters:\n- value: The value to be checked against the expected type.\n- typ: The type against which the value is to be validated.\n\nReturns:\n- True if the value matches the expected type, False otherwise.\n\nImportant constants:\n- `sys.version_info`: Used to determine the running Python version to enable compatibility checks for string types (`str` and `unicode`).\n    \nNote that the method can be called from other parts of the class, particularly during JSON update or validation processes, ensuring that properties are only set if they match their expected types.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/researchelementdefinition.py": {
      "ResearchElementDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a ResearchElementDefinition instance representing the definition of a research element, such as a population, intervention, or exposure, corresponding to the PICO framework.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's properties.\n- strict (bool, optional): If True (default), raises TypeError on invalid variables; otherwise, allows non-conforming inputs.\n\nAttributes initialized include:\n- approvalDate: Date the definition was approved (FHIRDate).\n- author: List of authors (ContactDetail).\n- characteristic: List of characteristics defining the research element (ResearchElementDefinitionCharacteristic).\n- comment: Explanatory notes (list of str).\n- contact: Publisher contact details (list of ContactDetail).\n- copyright: Use and publishing restrictions (str).\n- date: Last changed date (FHIRDateTime).\n- description: Natural language description (str).\n- editor: List of editors (ContactDetail).\n- effectivePeriod: Period the definition is expected to be used (Period).\n- endorser: List of endorsers (ContactDetail).\n- experimental: Indicates if for testing purposes (bool).\n- identifier: Additional identifiers (list of Identifier).\n- jurisdiction: Intended jurisdiction (list of CodeableConcept).\n- lastReviewDate: Last review date (FHIRDate).\n- library: Logic used by the definition (list of str).\n- name: Computer-friendly definition name (str).\n- publisher: Publisher name (str).\n- purpose: Purpose of the definition (str).\n- relatedArtifact: Additional documentation (list of RelatedArtifact).\n- reviewer: List of reviewers (ContactDetail).\n- shortTitle: Informal title (str).\n- status: Status of the definition (str, may be 'draft', 'active', 'retired', or 'unknown').\n- subjectCodeableConcept: Subject type (CodeableConcept).\n- subjectReference: Subject reference (FHIRReference).\n- subtitle: Subordinate title (str).\n- title: Human-friendly name (str).\n- topic: Category of the definition (list of CodeableConcept).\n- type: Type of research element (str, may be 'population', 'exposure', or 'outcome').\n- url: Canonical identifier (str).\n- usage: Clinical usage description (str).\n- useContext: Context the content supports (list of UsageContext).\n- variableType: Type of variable (str, may be 'dichotomous', 'continuous', or 'descriptive').\n- version: Business version (str).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the research element definition was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.characteristic = None\n        ' What defines the members of the research element.\\n        List of `ResearchElementDefinitionCharacteristic` items (represented as `dict` in JSON). '\n        self.comment = None\n        ' Used for footnotes or explanatory notes.\\n        List of `str` items. '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the research element definition.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the research element definition is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.identifier = None\n        ' Additional identifier for the research element definition.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for research element definition (if\\n        applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the research element definition was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.library = None\n        ' Logic used by the ResearchElementDefinition.\\n        List of `str` items. '\n        self.name = None\n        ' Name for this research element definition (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this research element definition is defined.\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.shortTitle = None\n        ' Title for use in informal contexts.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\\n        Device.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\\n        Device.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate title of the ResearchElementDefinition.\\n        Type `str`. '\n        self.title = None\n        ' Name for this research element definition (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' The category of the ResearchElementDefinition, such as Education,\\n        Treatment, Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' population | exposure | outcome.\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this research element definition,\\n        represented as a URI (globally unique).\\n        Type `str`. '\n        self.usage = None\n        ' Describes the clinical usage of the ResearchElementDefinition.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.variableType = None\n        ' dichotomous | continuous | descriptive.\\n        Type `str`. '\n        self.version = None\n        ' Business version of the research element definition.\\n        Type `str`. '\n        super(ResearchElementDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a ResearchElementDefinition instance representing the definition of a research element, such as a population, intervention, or exposure, corresponding to the PICO framework.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's properties.\n- strict (bool, optional): If True (default), raises TypeError on invalid variables; otherwise, allows non-conforming inputs.\n\nAttributes initialized include:\n- approvalDate: Date the definition was approved (FHIRDate).\n- author: List of authors (ContactDetail).\n- characteristic: List of characteristics defining the research element (ResearchElementDefinitionCharacteristic).\n- comment: Explanatory notes (list of str).\n- contact: Publisher contact details (list of ContactDetail).\n- copyright: Use and publishing restrictions (str).\n- date: Last changed date (FHIRDateTime).\n- description: Natural language description (str).\n- editor: List of editors (ContactDetail).\n- effectivePeriod: Period the definition is expected to be used (Period).\n- endorser: List of endorsers (ContactDetail).\n- experimental: Indicates if for testing purposes (bool).\n- identifier: Additional identifiers (list of Identifier).\n- jurisdiction: Intended jurisdiction (list of CodeableConcept).\n- lastReviewDate: Last review date (FHIRDate).\n- library: Logic used by the definition (list of str).\n- name: Computer-friendly definition name (str).\n- publisher: Publisher name (str).\n- purpose: Purpose of the definition (str).\n- relatedArtifact: Additional documentation (list of RelatedArtifact).\n- reviewer: List of reviewers (ContactDetail).\n- shortTitle: Informal title (str).\n- status: Status of the definition (str, may be 'draft', 'active', 'retired', or 'unknown').\n- subjectCodeableConcept: Subject type (CodeableConcept).\n- subjectReference: Subject reference (FHIRReference).\n- subtitle: Subordinate title (str).\n- title: Human-friendly name (str).\n- topic: Category of the definition (list of CodeableConcept).\n- type: Type of research element (str, may be 'population', 'exposure', or 'outcome').\n- url: Canonical identifier (str).\n- usage: Clinical usage description (str).\n- useContext: Context the content supports (list of UsageContext).\n- variableType: Type of variable (str, may be 'dichotomous', 'continuous', or 'descriptive').\n- version: Business version (str).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ResearchElementDefinition(domainresource.DomainResource):"
      },
      "ResearchElementDefinition.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve a list of element properties for the ResearchElementDefinition resource.\n\nThis method extends the base class's properties by adding specific attributes relevant to the ResearchElementDefinition, including approvalDate, author, characteristic, comment, and others. Each property is defined with its corresponding data type and cardinality, which indicates whether it is required or optional. \n\nReturns:\n    List: A list of tuples, where each tuple contains:\n        - The Python attribute name\n        - The JSON key name\n        - The expected data type for serialization\n        - A boolean indicating if the attribute is listable\n        - An optional profile reference\n        - An indicator of whether the element is required (True/False).\n        \nDependencies:\n    - `fhirdate` for handling FHIRDate types.\n    - `contactdetail` for contact-related properties.\n    - `ResearchElementDefinitionCharacteristic` for characteristics definitions.\n    - `period`, `relatedartifact`, `codeableconcept`, `fhirreference`, and `usagecontext` modules for defining their respective types.\"\"\"\n        js = super(ResearchElementDefinition, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('characteristic', 'characteristic', ResearchElementDefinitionCharacteristic, True, None, True), ('comment', 'comment', str, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('library', 'library', str, True, None, False), ('name', 'name', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('shortTitle', 'shortTitle', str, False, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', str, False, None, True), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('variableType', 'variableType', str, False, None, False), ('version', 'version', str, False, None, False)])\n        return js",
        "docstring": "Retrieve a list of element properties for the ResearchElementDefinition resource.\n\nThis method extends the base class's properties by adding specific attributes relevant to the ResearchElementDefinition, including approvalDate, author, characteristic, comment, and others. Each property is defined with its corresponding data type and cardinality, which indicates whether it is required or optional. \n\nReturns:\n    List: A list of tuples, where each tuple contains:\n        - The Python attribute name\n        - The JSON key name\n        - The expected data type for serialization\n        - A boolean indicating if the attribute is listable\n        - An optional profile reference\n        - An indicator of whether the element is required (True/False).\n        \nDependencies:\n    - `fhirdate` for handling FHIRDate types.\n    - `contactdetail` for contact-related properties.\n    - `ResearchElementDefinitionCharacteristic` for characteristics definitions.\n    - `period`, `relatedartifact`, `codeableconcept`, `fhirreference`, and `usagecontext` modules for defining their respective types.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class ResearchElementDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Resource object, which serves as the base type for all FHIR resources.\n\nThis constructor sets up the foundational properties for a FHIR Resource, including its unique identifier (`id`), rules governing its structure (`implicitRules`), language of the content (`language`), and associated metadata (`meta`). The method can accept a JSON dictionary to initialize these properties and performs validation based on the `strict` parameter. If `strict` is set to True and an invalid property is provided, a `TypeError` will be raised.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing resource properties.\n- strict (bool, optional): If True (default), ensures that invalid properties result in a TypeError. If False, allows validation errors to be ignored.\n\nReturns:\n- None: The method initializes the instance attributes without returning a value.\n\nAttributes:\n- id (str): The logical identifier for the resource.\n- implicitRules (str): The FHIR rules that inform the structure of the resource.\n- language (str): The language in which the content is represented.\n- meta (Meta): Metadata related to the resource, represented as a dictionary in JSON.\n\nDependencies:\n- This class inherits from `FHIRAbstractResource` imported from `fhirabstractresource`, which may provide additional behavior and definitions for this and other resource classes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Resource object, which serves as the base type for all FHIR resources.\n\nThis constructor sets up the foundational properties for a FHIR Resource, including its unique identifier (`id`), rules governing its structure (`implicitRules`), language of the content (`language`), and associated metadata (`meta`). The method can accept a JSON dictionary to initialize these properties and performs validation based on the `strict` parameter. If `strict` is set to True and an invalid property is provided, a `TypeError` will be raised.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing resource properties.\n- strict (bool, optional): If True (default), ensures that invalid properties result in a TypeError. If False, allows validation errors to be ignored.\n\nReturns:\n- None: The method initializes the instance attributes without returning a value.\n\nAttributes:\n- id (str): The logical identifier for the resource.\n- implicitRules (str): The FHIR rules that inform the structure of the resource.\n- language (str): The language in which the content is represented.\n- meta (Meta): Metadata related to the resource, represented as a dictionary in JSON.\n\nDependencies:\n- This class inherits from `FHIRAbstractResource` imported from `fhirabstractresource`, which may provide additional behavior and definitions for this and other resource classes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the element properties for the Resource class.\n\nThis method overrides the `elementProperties` method from the parent class `FHIRAbstractResource`. It returns a list of tuples representing the properties of the Resource instance, including their names, types, and whether they are required. The properties returned are:\n- `id`: Logical identifier of the resource (`str` type).\n- `implicitRules`: Set of rules under which the content was created (`str` type).\n- `language`: Language of the resource content (`str` type).\n- `meta`: Metadata about the resource, represented as a `Meta` object from the `meta` module.\n\nReturns:\n    list: A list of tuples, where each tuple contains the property name, the corresponding field name, its type, whether it's required, default value, and if it's repeated.\n\nDependencies:\n- The method relies on the `meta` module for the `Meta` type reference and calls the superclass method `elementProperties` to ensure inherited properties are included.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Retrieve the element properties for the Resource class.\n\nThis method overrides the `elementProperties` method from the parent class `FHIRAbstractResource`. It returns a list of tuples representing the properties of the Resource instance, including their names, types, and whether they are required. The properties returned are:\n- `id`: Logical identifier of the resource (`str` type).\n- `implicitRules`: Set of rules under which the content was created (`str` type).\n- `language`: Language of the resource content (`str` type).\n- `meta`: Metadata about the resource, represented as a `Meta` object from the `meta` module.\n\nReturns:\n    list: A list of tuples, where each tuple contains the property name, the corresponding field name, its type, whether it's required, default value, and if it's repeated.\n\nDependencies:\n- The method relies on the `meta` module for the `Meta` type reference and calls the superclass method `elementProperties` to ensure inherited properties are included.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a resource containing narrative, extensions, and contained resources in the FHIR format.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should conform to the FHIR structure.\n- strict (bool, optional): When True (default), invalid fields in jsondict will raise a FHIRValidationError. If False, such errors are suppressed.\n\nAttributes initialized:\n- contained (list of Resource): Represents contained, inline resources.\n- extension (list of Extension): Additional content defined by implementations.\n- modifierExtension (list of Extension): Extensions that cannot be ignored.\n- text (Narrative): A textual summary of the resource for human interpretation.\n\nThis constructor calls the parent class's initializer from `resource.Resource`, ensuring proper initialization within the FHIR framework.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a resource containing narrative, extensions, and contained resources in the FHIR format.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should conform to the FHIR structure.\n- strict (bool, optional): When True (default), invalid fields in jsondict will raise a FHIRValidationError. If False, such errors are suppressed.\n\nAttributes initialized:\n- contained (list of Resource): Represents contained, inline resources.\n- extension (list of Extension): Additional content defined by implementations.\n- modifierExtension (list of Extension): Extensions that cannot be ignored.\n- text (Narrative): A textual summary of the resource for human interpretation.\n\nThis constructor calls the parent class's initializer from `resource.Resource`, ensuring proper initialization within the FHIR framework.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve a list of element properties for the DomainResource instance.\n\nThis method extends the properties inherited from the superclass `Resource` to include specific attributes such as `contained`, `extension`, `modifierExtension`, and `text`. Each attribute represents elements of the FHIR DomainResource structure, indicating the types of resources contained, additional extensions, critical modifier extensions, and the narrative text summary, respectively.\n\nReturns:\n    list: A list of tuples representing the properties of the DomainResource. Each tuple contains:\n        - The name of the property as it appears in the object.\n        - The corresponding JSON field name.\n        - The expected type of the property.\n        - A boolean indicating if the property is required.\n        - Any additional constraints (if applicable).\n        - A boolean indicating if the property is to be collected in the serialized output.\n\nDependencies:\n    - `resource.Resource`: The superclass from which DomainResource inherits properties.\n    - `extension.Extension`: Represents additional content defined by implementations.\n    - `narrative.Narrative`: Represents the text summary for human interpretation of the resource.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Retrieve a list of element properties for the DomainResource instance.\n\nThis method extends the properties inherited from the superclass `Resource` to include specific attributes such as `contained`, `extension`, `modifierExtension`, and `text`. Each attribute represents elements of the FHIR DomainResource structure, indicating the types of resources contained, additional extensions, critical modifier extensions, and the narrative text summary, respectively.\n\nReturns:\n    list: A list of tuples representing the properties of the DomainResource. Each tuple contains:\n        - The name of the property as it appears in the object.\n        - The corresponding JSON field name.\n        - The expected type of the property.\n        - A boolean indicating if the property is required.\n        - Any additional constraints (if applicable).\n        - A boolean indicating if the property is to be collected in the serialized output.\n\nDependencies:\n    - `resource.Resource`: The superclass from which DomainResource inherits properties.\n    - `extension.Extension`: Represents additional content defined by implementations.\n    - `narrative.Narrative`: Represents the text summary for human interpretation of the resource.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/researchelementdefinition_test.py:ResearchElementDefinitionTests:testResearchElementDefinition1": {
      "tests/models/researchelementdefinition_test.py:ResearchElementDefinitionTests:instantiate_from": {
        "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/researchelementdefinition_test.py:ResearchElementDefinitionTests:implResearchElementDefinition1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/researchelementdefinition_test.py:ResearchElementDefinitionTests:instantiate_from": {
      "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/researchelementdefinition.py:ResearchElementDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-researchelementdefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 researchelementdefinition.py\n        \u2502   \u251c\u2500\u2500 ResearchElementDefinition.__init__\n        \u2502   \u2514\u2500\u2500 ResearchElementDefinition.elementProperties\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the functionality of the ResearchElementDefinition resource within the context of the FHIR (Fast Healthcare Interoperability Resources) standard. It ensures that instances of ResearchElementDefinition, which define criteria used in clinical research (e.g., population characteristics or exposure criteria), adhere to expected structural and semantic requirements. By parsing and verifying FHIR-compliant JSON data against defined resource attributes, the module supports the validation of health data interoperability and standardization. This functionality addresses the need for reliable integration and debugging of FHIR-based applications, enabling developers to ensure accurate representation of research elements critical for healthcare systems and data exchange.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a `FHIRAbstractResource` instance.\n\nThis constructor sets up the instance by optionally processing a JSON dictionary (`jsondict`) that represents the FHIR resource. It also checks that the `resourceType` in the provided JSON matches the class's `resource_type` constant; otherwise, an exception is raised. The `_server` attribute is initialized to `None` to keep track of the server from which this instance is read.\n\nParameters:\n- `jsondict` (dict or None): An optional dictionary containing resource data in JSON format. If provided, it must include a `resourceType` that matches the class's `resource_type`.\n- `strict` (bool): A flag to enforce strict parsing of the JSON data passed to the (`super`) class initializer.\n\nReturns:\n- None: The method initializes the object in place.\n\nAttributes:\n- `_server`: Stores the FHIR server instance from which the resource is read.\n\nDependencies:\n- The method relies on the superclass, `FHIRAbstractBase`, which it initializes with the provided `jsondict` and `strict` parameters.\n- It also checks the `resource_type` attribute defined at the class level, which is crucial for validation.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of the FHIRAbstractResource class to a JSON representation.\n\nThis method overrides the base class's `as_json()` method to ensure that the resulting JSON dictionary includes the 'resourceType' key, which is set to the resource_type of the instance (defined as 'FHIRAbstractResource'). \n\nReturns:\n    dict: A JSON-compatible dictionary representation of the instance, including all attributes inherited from the base class and the 'resourceType' key.\n\nDependencies:\n    - Calls `super(FHIRAbstractResource, self).as_json()` to fetch the base attributes in JSON format.\n    - Uses the `resource_type` attribute to add the 'resourceType' key to the resulting JSON.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializer for the FHIRAbstractBase class, which serves as an abstract base class for all FHIR (Fast Healthcare Interoperability Resources) elements. The constructor accepts an optional JSON dictionary for initializing the instance and a boolean flag, `strict`, that determines whether to raise exceptions on validation errors or log warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the object. If provided, the `_update_with_json` method is called to populate the object's attributes based on this dictionary.\n- strict (bool, optional): A flag indicating whether to raise `FHIRValidationError` on validation errors (default is True). If False, instead of raising, it logs any validation issues as warnings.\n\nAttributes:\n- self._resolved: A dictionary to cache resolved resources.\n- self._owner: References the parent resource containing this instance, aiding in resource resolution.\n\nExceptions:\n- Raises `FHIRValidationError` if validation errors occur and `strict` is True.\n\nInteractivity:\n- The method calls `update_with_json` to set instance properties based on the JSON data, ensuring it conforms to the FHIR specifications.\n- Utilizes the `logger` for logging warnings, illustrating interactions with the logging framework.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal method to create an instance of the class from a given JSON dictionary.\n\n:param jsondict: A dictionary containing data to instantiate an object of the class.\n:raises TypeError: If `jsondict` is not of type `dict`.\n:raises FHIRValidationError: If the instantiation fails due to validation issues.\n:returns: An instance of the class initialized with the data from `jsondict`.\n\nThis method is called internally within the `with_json` method for handling JSON data and ensures the provided input is a dictionary. It leverages the class constructor to create and return a new instance upon successful type validation.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nDetermines if the provided value matches the expected type.\n\nThis method checks if the given `value` is of the specified type `typ`. It accounts for special conditions such as when the value is `None`, or when the type is an integer or float. If the Python version is below 3.0, it also ensures compatibility with both `str` and `unicode` types.\n\nParameters:\n- value: The value to be checked against the expected type.\n- typ: The type against which the value is to be validated.\n\nReturns:\n- True if the value matches the expected type, False otherwise.\n\nImportant constants:\n- `sys.version_info`: Used to determine the running Python version to enable compatibility checks for string types (`str` and `unicode`).\n    \nNote that the method can be called from other parts of the class, particularly during JSON update or validation processes, ensuring that properties are only set if they match their expected types.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates a FHIRAbstractBase element by decoding a JSON dictionary or list, while also linking the instantiated element to its owning parent resource.\n\nParameters:\n- jsonobj (dict or list of dicts): A decoded JSON dictionary or list of dictionaries used for instantiation.\n- owner (FHIRElement): The parent resource that owns the instantiated element, facilitating the resolution of contained resources.\n\nReturns:\n- An instance of the FHIRAbstractBase class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the provided jsonobj is not a dictionary or a list of dictionaries.\n- FHIRValidationError: If there are errors during the instantiation process, such as validation failures.\n\nThis method leverages the `with_json` class method for instantiation, ensuring that the owner of each instantiated element is set appropriately by assigning it to the `_owner` attribute. This connection aids in resource resolution during further operations.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples, where each tuple represents a property that should be serialized for FHIR elements. Each tuple contains the following information: the property name, its JSON representation name, its expected type, a boolean indicating if it is a list, the name of a related property (if applicable), and a boolean indicating if it is a non-optional property.\n\nThis method is intended to be overridden by subclasses to specify the properties relevant to that specific FHIR element, as it currently returns an empty list. The tuples returned by this method help in the serialization process defined in `as_json()` by ensuring that the correct properties are converted to JSON format. It also plays a crucial role in the `update_with_json()` method to validate incoming data against expected types and required fields.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class from a JSON dictionary or a list of dictionaries. This method checks the input type and delegates to an internal method for instantiation. If a JSON dictionary with a \"resourceType\" attribute is provided, it may utilize `FHIRElementFactory` to ensure a proper class instance is created based on the resource type. \n\nParameters:\n- jsonobj: A dictionary or a list of dictionaries that contains data to instantiate the FHIR element.\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError: If instantiation of any JSON dictionary fails, the error is propagated with additional context about its position in the list.\n\nThis method relies on the class method `_with_json_dict`, which handles the actual conversion of a dictionary to an instance and raises appropriate exceptions based on validation failures.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance to a JSON dictionary by inspecting the properties defined in `elementProperties()`. It validates that required properties are not None and that values adhere to their expected types. \n\nReturns a validated dictionary suitable for JSON serialization.\n\nRaises:\n- FHIRValidationError: If properties have the wrong type, if required properties are empty, or if there are issues in serializing the values.\n\nDuring the serialization, it checks for:\n- `nonoptionals`: A set that tracks properties that must have values based on `not_optional` from `elementProperties()`. \n- `found`: A set that records which properties have been successfully processed.\n\nThe method utilizes the `_matches_type` helper method to verify type consistency of attributes against their declared types. Any encountered issues are collected and raised as a `FHIRValidationError` containing all relevant error messages.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdate the instance with data from a provided JSON dictionary.\n\nThis method parses the input JSON dictionary, checks for valid properties defined by `elementProperties()`, and assigns values to the instance attributes accordingly. If `strict` mode is enabled and validation errors occur, they are raised as `FHIRValidationError`. Non-optional properties that are missing and superfluous properties in the input are also reported through exceptions.\n\nParameters:\n- jsondict (dict): A JSON dictionary containing data to update the instance attributes.\n\nRaises:\n- FHIRValidationError: If there are validation errors during the update process.\n- TypeError: If the provided jsondict is not a dictionary.\n- KeyError: If required non-optional properties are missing.\n- AttributeError: If there are extra keys in the jsondict that are not defined in the instance's properties.\n\nConstants and Variables:\n- `errs`: A list collecting validation errors encountered during the update.\n- `valid`: A set initialized with 'resourceType', representing valid property names expected in the jsondict.\n- `found`: A set tracking which properties from the jsondict were successfully found and assigned.\n- `nonoptionals`: A set used to keep track of which required properties (non-optional) were not found during the update.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/researchelementdefinition.py\n\n- CLASS METHOD: ResearchElementDefinition.__init__\n  - CLASS SIGNATURE: class ResearchElementDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a ResearchElementDefinition instance representing the definition of a research element, such as a population, intervention, or exposure, corresponding to the PICO framework.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the object's properties.\n- strict (bool, optional): If True (default), raises TypeError on invalid variables; otherwise, allows non-conforming inputs.\n\nAttributes initialized include:\n- approvalDate: Date the definition was approved (FHIRDate).\n- author: List of authors (ContactDetail).\n- characteristic: List of characteristics defining the research element (ResearchElementDefinitionCharacteristic).\n- comment: Explanatory notes (list of str).\n- contact: Publisher contact details (list of ContactDetail).\n- copyright: Use and publishing restrictions (str).\n- date: Last changed date (FHIRDateTime).\n- description: Natural language description (str).\n- editor: List of editors (ContactDetail).\n- effectivePeriod: Period the definition is expected to be used (Period).\n- endorser: List of endorsers (ContactDetail).\n- experimental: Indicates if for testing purposes (bool).\n- identifier: Additional identifiers (list of Identifier).\n- jurisdiction: Intended jurisdiction (list of CodeableConcept).\n- lastReviewDate: Last review date (FHIRDate).\n- library: Logic used by the definition (list of str).\n- name: Computer-friendly definition name (str).\n- publisher: Publisher name (str).\n- purpose: Purpose of the definition (str).\n- relatedArtifact: Additional documentation (list of RelatedArtifact).\n- reviewer: List of reviewers (ContactDetail).\n- shortTitle: Informal title (str).\n- status: Status of the definition (str, may be 'draft', 'active', 'retired', or 'unknown').\n- subjectCodeableConcept: Subject type (CodeableConcept).\n- subjectReference: Subject reference (FHIRReference).\n- subtitle: Subordinate title (str).\n- title: Human-friendly name (str).\n- topic: Category of the definition (list of CodeableConcept).\n- type: Type of research element (str, may be 'population', 'exposure', or 'outcome').\n- url: Canonical identifier (str).\n- usage: Clinical usage description (str).\n- useContext: Context the content supports (list of UsageContext).\n- variableType: Type of variable (str, may be 'dichotomous', 'continuous', or 'descriptive').\n- version: Business version (str).\n\nThis method also calls the superclass initializer to ensure proper setup of inherited properties.\n\"\"\"\n```\n\n- CLASS METHOD: ResearchElementDefinition.elementProperties\n  - CLASS SIGNATURE: class ResearchElementDefinition(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a list of element properties for the ResearchElementDefinition resource.\n\nThis method extends the base class's properties by adding specific attributes relevant to the ResearchElementDefinition, including approvalDate, author, characteristic, comment, and others. Each property is defined with its corresponding data type and cardinality, which indicates whether it is required or optional. \n\nReturns:\n    List: A list of tuples, where each tuple contains:\n        - The Python attribute name\n        - The JSON key name\n        - The expected data type for serialization\n        - A boolean indicating if the attribute is listable\n        - An optional profile reference\n        - An indicator of whether the element is required (True/False).\n        \nDependencies:\n    - `fhirdate` for handling FHIRDate types.\n    - `contactdetail` for contact-related properties.\n    - `ResearchElementDefinitionCharacteristic` for characteristics definitions.\n    - `period`, `relatedartifact`, `codeableconcept`, `fhirreference`, and `usagecontext` modules for defining their respective types.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the element properties for the Resource class.\n\nThis method overrides the `elementProperties` method from the parent class `FHIRAbstractResource`. It returns a list of tuples representing the properties of the Resource instance, including their names, types, and whether they are required. The properties returned are:\n- `id`: Logical identifier of the resource (`str` type).\n- `implicitRules`: Set of rules under which the content was created (`str` type).\n- `language`: Language of the resource content (`str` type).\n- `meta`: Metadata about the resource, represented as a `Meta` object from the `meta` module.\n\nReturns:\n    list: A list of tuples, where each tuple contains the property name, the corresponding field name, its type, whether it's required, default value, and if it's repeated.\n\nDependencies:\n- The method relies on the `meta` module for the `Meta` type reference and calls the superclass method `elementProperties` to ensure inherited properties are included.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Resource object, which serves as the base type for all FHIR resources.\n\nThis constructor sets up the foundational properties for a FHIR Resource, including its unique identifier (`id`), rules governing its structure (`implicitRules`), language of the content (`language`), and associated metadata (`meta`). The method can accept a JSON dictionary to initialize these properties and performs validation based on the `strict` parameter. If `strict` is set to True and an invalid property is provided, a `TypeError` will be raised.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing resource properties.\n- strict (bool, optional): If True (default), ensures that invalid properties result in a TypeError. If False, allows validation errors to be ignored.\n\nReturns:\n- None: The method initializes the instance attributes without returning a value.\n\nAttributes:\n- id (str): The logical identifier for the resource.\n- implicitRules (str): The FHIR rules that inform the structure of the resource.\n- language (str): The language in which the content is represented.\n- meta (Meta): Metadata related to the resource, represented as a dictionary in JSON.\n\nDependencies:\n- This class inherits from `FHIRAbstractResource` imported from `fhirabstractresource`, which may provide additional behavior and definitions for this and other resource classes.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a list of element properties for the DomainResource instance.\n\nThis method extends the properties inherited from the superclass `Resource` to include specific attributes such as `contained`, `extension`, `modifierExtension`, and `text`. Each attribute represents elements of the FHIR DomainResource structure, indicating the types of resources contained, additional extensions, critical modifier extensions, and the narrative text summary, respectively.\n\nReturns:\n    list: A list of tuples representing the properties of the DomainResource. Each tuple contains:\n        - The name of the property as it appears in the object.\n        - The corresponding JSON field name.\n        - The expected type of the property.\n        - A boolean indicating if the property is required.\n        - Any additional constraints (if applicable).\n        - A boolean indicating if the property is to be collected in the serialized output.\n\nDependencies:\n    - `resource.Resource`: The superclass from which DomainResource inherits properties.\n    - `extension.Extension`: Represents additional content defined by implementations.\n    - `narrative.Narrative`: Represents the text summary for human interpretation of the resource.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a resource containing narrative, extensions, and contained resources in the FHIR format.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the resource properties. If provided, it should conform to the FHIR structure.\n- strict (bool, optional): When True (default), invalid fields in jsondict will raise a FHIRValidationError. If False, such errors are suppressed.\n\nAttributes initialized:\n- contained (list of Resource): Represents contained, inline resources.\n- extension (list of Extension): Additional content defined by implementations.\n- modifierExtension (list of Extension): Extensions that cannot be ignored.\n- text (Narrative): A textual summary of the resource for human interpretation.\n\nThis constructor calls the parent class's initializer from `resource.Resource`, ensuring proper initialization within the FHIR framework.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/researchelementdefinition.py": "from . import domainresource\n\nclass ResearchElementDefinition(domainresource.DomainResource):\n    \"\"\" A population, intervention, or exposure definition.\n    \n    The ResearchElementDefinition resource describes a \"PICO\" element that\n    knowledge (evidence, assertion, recommendation) is about.\n    \"\"\"\n    resource_type = 'ResearchElementDefinition'\nfrom . import backboneelement\n\nclass ResearchElementDefinitionCharacteristic(backboneelement.BackboneElement):\n    \"\"\" What defines the members of the research element.\n    \n    A characteristic that defines the members of the research element. Multiple\n    characteristics are applied with \"and\" semantics.\n    \"\"\"\n    resource_type = 'ResearchElementDefinitionCharacteristic'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.definitionCanonical = None\n        ' What code or expression defines members?.\\n        Type `str`. '\n        self.definitionCodeableConcept = None\n        ' What code or expression defines members?.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.definitionDataRequirement = None\n        ' What code or expression defines members?.\\n        Type `DataRequirement` (represented as `dict` in JSON). '\n        self.definitionExpression = None\n        ' What code or expression defines members?.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.exclude = None\n        ' Whether the characteristic includes or excludes members.\\n        Type `bool`. '\n        self.participantEffectiveDateTime = None\n        ' What time period do participants cover.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.participantEffectiveDescription = None\n        ' What time period do participants cover.\\n        Type `str`. '\n        self.participantEffectiveDuration = None\n        ' What time period do participants cover.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.participantEffectiveGroupMeasure = None\n        ' mean | median | mean-of-mean | mean-of-median | median-of-mean |\\n        median-of-median.\\n        Type `str`. '\n        self.participantEffectivePeriod = None\n        ' What time period do participants cover.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.participantEffectiveTimeFromStart = None\n        ' Observation time from study start.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.participantEffectiveTiming = None\n        ' What time period do participants cover.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.studyEffectiveDateTime = None\n        ' What time period does the study cover.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.studyEffectiveDescription = None\n        ' What time period does the study cover.\\n        Type `str`. '\n        self.studyEffectiveDuration = None\n        ' What time period does the study cover.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.studyEffectiveGroupMeasure = None\n        ' mean | median | mean-of-mean | mean-of-median | median-of-mean |\\n        median-of-median.\\n        Type `str`. '\n        self.studyEffectivePeriod = None\n        ' What time period does the study cover.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.studyEffectiveTimeFromStart = None\n        ' Observation time from study start.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.studyEffectiveTiming = None\n        ' What time period does the study cover.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.unitOfMeasure = None\n        ' What unit is the outcome described in?.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.usageContext = None\n        ' What code/value pairs define members?.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        super(ResearchElementDefinitionCharacteristic, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ResearchElementDefinitionCharacteristic, self).elementProperties()\n        js.extend([('definitionCanonical', 'definitionCanonical', str, False, 'definition', True), ('definitionCodeableConcept', 'definitionCodeableConcept', codeableconcept.CodeableConcept, False, 'definition', True), ('definitionDataRequirement', 'definitionDataRequirement', datarequirement.DataRequirement, False, 'definition', True), ('definitionExpression', 'definitionExpression', expression.Expression, False, 'definition', True), ('exclude', 'exclude', bool, False, None, False), ('participantEffectiveDateTime', 'participantEffectiveDateTime', fhirdatetime.FHIRDateTime, False, 'participantEffective', False), ('participantEffectiveDescription', 'participantEffectiveDescription', str, False, None, False), ('participantEffectiveDuration', 'participantEffectiveDuration', duration.Duration, False, 'participantEffective', False), ('participantEffectiveGroupMeasure', 'participantEffectiveGroupMeasure', str, False, None, False), ('participantEffectivePeriod', 'participantEffectivePeriod', period.Period, False, 'participantEffective', False), ('participantEffectiveTimeFromStart', 'participantEffectiveTimeFromStart', duration.Duration, False, None, False), ('participantEffectiveTiming', 'participantEffectiveTiming', timing.Timing, False, 'participantEffective', False), ('studyEffectiveDateTime', 'studyEffectiveDateTime', fhirdatetime.FHIRDateTime, False, 'studyEffective', False), ('studyEffectiveDescription', 'studyEffectiveDescription', str, False, None, False), ('studyEffectiveDuration', 'studyEffectiveDuration', duration.Duration, False, 'studyEffective', False), ('studyEffectiveGroupMeasure', 'studyEffectiveGroupMeasure', str, False, None, False), ('studyEffectivePeriod', 'studyEffectivePeriod', period.Period, False, 'studyEffective', False), ('studyEffectiveTimeFromStart', 'studyEffectiveTimeFromStart', duration.Duration, False, None, False), ('studyEffectiveTiming', 'studyEffectiveTiming', timing.Timing, False, 'studyEffective', False), ('unitOfMeasure', 'unitOfMeasure', codeableconcept.CodeableConcept, False, None, False), ('usageContext', 'usageContext', usagecontext.UsageContext, True, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import timing\nfrom . import usagecontext",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative"
  }
}