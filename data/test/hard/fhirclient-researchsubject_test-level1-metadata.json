{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-researchsubject_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/researchsubject_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import researchsubject\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ResearchSubjectTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"ResearchSubject\", js[\"resourceType\"])\n        return researchsubject.ResearchSubject(js)\n    \n    def testResearchSubject1(self):\n        inst = self.instantiate_from(\"researchsubject-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a ResearchSubject instance\")\n        self.implResearchSubject1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"ResearchSubject\", js[\"resourceType\"])\n        inst2 = researchsubject.ResearchSubject(js)\n        self.implResearchSubject1(inst2)\n    \n    def implResearchSubject1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.org/studysubjectids\")\n        self.assertEqual(inst.identifier[0].type.text, \"Subject id\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"candidate\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/researchsubject.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/ResearchSubject).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass ResearchSubject(domainresource.DomainResource):\n    \"\"\" Physical entity which is the primary unit of interest in the study.\n    \n    A physical entity which is the primary unit of operational and/or\n    administrative interest in a study.\n    \"\"\"\n    \n    resource_type = \"ResearchSubject\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actualArm = None\n        \"\"\" What path was followed.\n        Type `str`. \"\"\"\n        \n        self.assignedArm = None\n        \"\"\" What path should be followed.\n        Type `str`. \"\"\"\n        \n        self.consent = None\n        \"\"\" Agreement to participate in study.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business Identifier for research subject in a study.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.individual = None\n        \"\"\" Who is part of study.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.period = None\n        \"\"\" Start and end of participation.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" candidate | eligible | follow-up | ineligible | not-registered |\n        off-study | on-study | on-study-intervention | on-study-observation\n        | pending-on-study | potential-candidate | screening | withdrawn.\n        Type `str`. \"\"\"\n        \n        self.study = None\n        \"\"\" Study subject is part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(ResearchSubject, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ResearchSubject, self).elementProperties()\n        js.extend([\n            (\"actualArm\", \"actualArm\", str, False, None, False),\n            (\"assignedArm\", \"assignedArm\", str, False, None, False),\n            (\"consent\", \"consent\", fhirreference.FHIRReference, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"individual\", \"individual\", fhirreference.FHIRReference, False, None, True),\n            (\"period\", \"period\", period.Period, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"study\", \"study\", fhirreference.FHIRReference, False, None, True),\n        ])\n        return js\n\n\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/researchsubject.py": {
      "ResearchSubject.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a ResearchSubject instance representing a participant in a study.\n\nThis constructor initializes all valid properties related to a research subject,\nincluding identifiers, consent, status, and study association. It takes an optional\nJSON dictionary for initializing its attributes and a strict flag to control validation\nbehavior.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the attributes of \n  the ResearchSubject. If provided, the attributes will be populated with values\n  from this dictionary.\n- strict (bool, optional): If True (default), raises a FHIRValidationError\n  for any invalid attributes during initialization; if False, allows \n  for invalid attributes without raising an error.\n\nAttributes:\n- actualArm (str): Represents the path followed by the research subject during\n  the study.\n- assignedArm (str): Indicates the path that the research subject is supposed\n  to follow in the study.\n- consent (FHIRReference): Represents the subject's agreement to participate in\n  the study (refers to a consent document).\n- identifier (list of Identifier): Contains business identifiers for the research\n  subject in the study.\n- individual (FHIRReference): Reference to the individual who is part of the study.\n- period (Period): Denotes the start and end dates of participation.\n- status (str): Current status of the research subject (e.g., eligible, on-study).\n- study (FHIRReference): Reference to the study that this subject is a part of.\n\nDependencies:\nThis class inherits from `domainresource.DomainResource` and utilizes other modules:\n- `fhirreference`: For referencing other FHIR entities such as consent and individual.\n- `identifier`: For handling identifiers related to the research subject.\n- `period`: For defining the period of participation in the study.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.actualArm = None\n        ' What path was followed.\\n        Type `str`. '\n        self.assignedArm = None\n        ' What path should be followed.\\n        Type `str`. '\n        self.consent = None\n        ' Agreement to participate in study.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business Identifier for research subject in a study.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.individual = None\n        ' Who is part of study.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.period = None\n        ' Start and end of participation.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.status = None\n        ' candidate | eligible | follow-up | ineligible | not-registered |\\n        off-study | on-study | on-study-intervention | on-study-observation\\n        | pending-on-study | potential-candidate | screening | withdrawn.\\n        Type `str`. '\n        self.study = None\n        ' Study subject is part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(ResearchSubject, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a ResearchSubject instance representing a participant in a study.\n\nThis constructor initializes all valid properties related to a research subject,\nincluding identifiers, consent, status, and study association. It takes an optional\nJSON dictionary for initializing its attributes and a strict flag to control validation\nbehavior.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the attributes of \n  the ResearchSubject. If provided, the attributes will be populated with values\n  from this dictionary.\n- strict (bool, optional): If True (default), raises a FHIRValidationError\n  for any invalid attributes during initialization; if False, allows \n  for invalid attributes without raising an error.\n\nAttributes:\n- actualArm (str): Represents the path followed by the research subject during\n  the study.\n- assignedArm (str): Indicates the path that the research subject is supposed\n  to follow in the study.\n- consent (FHIRReference): Represents the subject's agreement to participate in\n  the study (refers to a consent document).\n- identifier (list of Identifier): Contains business identifiers for the research\n  subject in the study.\n- individual (FHIRReference): Reference to the individual who is part of the study.\n- period (Period): Denotes the start and end dates of participation.\n- status (str): Current status of the research subject (e.g., eligible, on-study).\n- study (FHIRReference): Reference to the study that this subject is a part of.\n\nDependencies:\nThis class inherits from `domainresource.DomainResource` and utilizes other modules:\n- `fhirreference`: For referencing other FHIR entities such as consent and individual.\n- `identifier`: For handling identifiers related to the research subject.\n- `period`: For defining the period of participation in the study.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class ResearchSubject(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThe method overrides the `as_json` method from the superclass `FHIRAbstractBase`, adding a key-value pair for `resourceType` that indicates the type of the resource. This is essential for correctly identifying the resource type when sending data to or receiving data from a FHIR server.\n\nReturns:\n    dict: A dictionary representation of the resource, including the `resourceType` key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json()` to retrieve the base serialized data.\n- `self.resource_type`: A class-level attribute representing the type of the FHIR resource, which is defined as `'FHIRAbstractResource'`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThe method overrides the `as_json` method from the superclass `FHIRAbstractBase`, adding a key-value pair for `resourceType` that indicates the type of the resource. This is essential for correctly identifying the resource type when sending data to or receiving data from a FHIR server.\n\nReturns:\n    dict: A dictionary representation of the resource, including the `resourceType` key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json()` to retrieve the base serialized data.\n- `self.resource_type`: A class-level attribute representing the type of the FHIR resource, which is defined as `'FHIRAbstractResource'`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/researchsubject.py:ResearchSubject:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/researchsubject_test.py:ResearchSubjectTests:testResearchSubject1": {
      "tests/models/researchsubject_test.py:ResearchSubjectTests:instantiate_from": {
        "fhirclient/models/researchsubject.py:ResearchSubject:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/researchsubject.py:ResearchSubject:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/researchsubject_test.py:ResearchSubjectTests:implResearchSubject1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/researchsubject.py:ResearchSubject:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/researchsubject.py:ResearchSubject:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/researchsubject.py:ResearchSubject:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/researchsubject_test.py:ResearchSubjectTests:instantiate_from": {
      "fhirclient/models/researchsubject.py:ResearchSubject:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/researchsubject.py:ResearchSubject:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-researchsubject_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 researchsubject.py\n            \u2514\u2500\u2500 ResearchSubject.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the testing and validation of FHIR (Fast Healthcare Interoperability Resources) ResearchSubject resources, ensuring conformance to the FHIR 4.0.1 standard. It provides functionality to parse and instantiate ResearchSubject data from JSON files, validate the resource type, and verify the expected structure and attributes, such as identifiers, metadata, status, and narrative content. By enabling automated tests for FHIR-compliant ResearchSubject resource instances, the module ensures data consistency and alignment with healthcare interoperability standards. This streamlines the development and quality assurance process for systems leveraging FHIR protocols by providing a reliable means of verifying resource validity.\n\n## FILE 1: fhirclient/models/researchsubject.py\n\n- CLASS METHOD: ResearchSubject.__init__\n  - CLASS SIGNATURE: class ResearchSubject(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a ResearchSubject instance representing a participant in a study.\n\nThis constructor initializes all valid properties related to a research subject,\nincluding identifiers, consent, status, and study association. It takes an optional\nJSON dictionary for initializing its attributes and a strict flag to control validation\nbehavior.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the attributes of \n  the ResearchSubject. If provided, the attributes will be populated with values\n  from this dictionary.\n- strict (bool, optional): If True (default), raises a FHIRValidationError\n  for any invalid attributes during initialization; if False, allows \n  for invalid attributes without raising an error.\n\nAttributes:\n- actualArm (str): Represents the path followed by the research subject during\n  the study.\n- assignedArm (str): Indicates the path that the research subject is supposed\n  to follow in the study.\n- consent (FHIRReference): Represents the subject's agreement to participate in\n  the study (refers to a consent document).\n- identifier (list of Identifier): Contains business identifiers for the research\n  subject in the study.\n- individual (FHIRReference): Reference to the individual who is part of the study.\n- period (Period): Denotes the start and end dates of participation.\n- status (str): Current status of the research subject (e.g., eligible, on-study).\n- study (FHIRReference): Reference to the study that this subject is a part of.\n\nDependencies:\nThis class inherits from `domainresource.DomainResource` and utilizes other modules:\n- `fhirreference`: For referencing other FHIR entities such as consent and individual.\n- `identifier`: For handling identifiers related to the research subject.\n- `period`: For defining the period of participation in the study.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThe method overrides the `as_json` method from the superclass `FHIRAbstractBase`, adding a key-value pair for `resourceType` that indicates the type of the resource. This is essential for correctly identifying the resource type when sending data to or receiving data from a FHIR server.\n\nReturns:\n    dict: A dictionary representation of the resource, including the `resourceType` key.\n\nDependencies:\n- `super(FHIRAbstractResource, self).as_json()`: Calls the parent class's `as_json()` to retrieve the base serialized data.\n- `self.resource_type`: A class-level attribute representing the type of the FHIR resource, which is defined as `'FHIRAbstractResource'`.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/researchsubject.py": "from . import domainresource\n\nclass ResearchSubject(domainresource.DomainResource):\n    \"\"\" Physical entity which is the primary unit of interest in the study.\n    \n    A physical entity which is the primary unit of operational and/or\n    administrative interest in a study.\n    \"\"\"\n    resource_type = 'ResearchSubject'\n\n    def elementProperties(self):\n        js = super(ResearchSubject, self).elementProperties()\n        js.extend([('actualArm', 'actualArm', str, False, None, False), ('assignedArm', 'assignedArm', str, False, None, False), ('consent', 'consent', fhirreference.FHIRReference, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('individual', 'individual', fhirreference.FHIRReference, False, None, True), ('period', 'period', period.Period, False, None, False), ('status', 'status', str, False, None, True), ('study', 'study', fhirreference.FHIRReference, False, None, True)])\n        return js\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}