{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_hashmergeopts",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_hashmergeopts.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.hashmergeopts import (\n\tHashMergeOpts)\n\n\nclass Test_merger_enums_hashmergeopts():\n\t\"\"\"Tests for the HashMergeOpts enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert HashMergeOpts.get_names() == [\n\t\t\t\"DEEP\",\n\t\t\t\"LEFT\",\n\t\t\t\"RIGHT\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert HashMergeOpts.get_choices() == [\n\t\t\t\"deep\",\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"DEEP\", HashMergeOpts.DEEP),\n\t\t(\"LEFT\", HashMergeOpts.LEFT),\n\t\t(\"RIGHT\", HashMergeOpts.RIGHT),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == HashMergeOpts.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tHashMergeOpts.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/hashmergeopts.py": "\"\"\"\nImplements the HashMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass HashMergeOpts(Enum):\n    \"\"\"\n    Supported Hash (AKA: Map, dict) Merge Options.\n\n    Options include:\n\n    `DEEP`\n        RHS Hashes are deeply merged into LHS Hashes (full merge).\n\n    `LEFT`\n        LHS Hashes are not overwritten by RHS Hashes (no merge).\n\n    `RIGHT`\n        RHS Hashes fully replace LHS Hashes (no merge).\n    \"\"\"\n\n    DEEP = auto()\n    LEFT = auto()\n    RIGHT = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in HashMergeOpts]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in HashMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"HashMergeOpts\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (HashMergeOpts) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in HashMergeOpts.get_names():\n            return HashMergeOpts[check]\n        raise NameError(\n            \"HashMergeOpts has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/hashmergeopts.py": {
      "HashMergeOpts.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all upper-cased entry names for the HashMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the HashMergeOpts class,\nconverting them to upper case for standardization. It utilizes the enum members defined in the \nHashMergeOpts class which represent different hash merging options.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of upper-case string names for each member of the enumeration.\n\nRaises:  \n    N/A\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in HashMergeOpts]",
        "docstring": "Get all upper-cased entry names for the HashMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the HashMergeOpts class,\nconverting them to upper case for standardization. It utilizes the enum members defined in the \nHashMergeOpts class which represent different hash merging options.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of upper-case string names for each member of the enumeration.\n\nRaises:  \n    N/A",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class HashMergeOpts(Enum):"
      },
      "HashMergeOpts.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Get all entry names of the HashMergeOpts enumeration in lower case.\n\nThis method fetches the names of the enumeration members, converts them to lower case, and returns them as a sorted list. It utilizes the `get_names` method to retrieve the names of the enumeration members, which are defined by the `HashMergeOpts` class.\n\nReturns:\n    List[str]: A sorted list of lower-cased names from the HashMergeOpts enumeration.\n\nRaises:\n    N/A\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in HashMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Get all entry names of the HashMergeOpts enumeration in lower case.\n\nThis method fetches the names of the enumeration members, converts them to lower case, and returns them as a sorted list. It utilizes the `get_names` method to retrieve the names of the enumeration members, which are defined by the `HashMergeOpts` class.\n\nReturns:\n    List[str]: A sorted list of lower-cased names from the HashMergeOpts enumeration.\n\nRaises:\n    N/A",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class HashMergeOpts(Enum):"
      },
      "HashMergeOpts.from_str": {
        "code": "    def from_str(name: str) -> 'HashMergeOpts':\n        \"\"\"Convert a string representation of a HashMergeOpts enumeration name to its corresponding enumeration value.\n\nParameters:\n    name (str): The name of the enumeration to convert, which should correspond to one of the enumeration entries.\n\nReturns:\n    HashMergeOpts: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration entries.\n\nThis method relies on the `get_names` static method of the HashMergeOpts class, which returns a list of the enumeration names in upper case. The method checks if the upper-cased version of the input name exists in this list and converts it to the corresponding HashMergeOpts member, otherwise, it raises a NameError indicating the invalid input.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (HashMergeOpts) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in HashMergeOpts.get_names():\n            return HashMergeOpts[check]\n        raise NameError('HashMergeOpts has no such item:  {}'.format(name))",
        "docstring": "Convert a string representation of a HashMergeOpts enumeration name to its corresponding enumeration value.\n\nParameters:\n    name (str): The name of the enumeration to convert, which should correspond to one of the enumeration entries.\n\nReturns:\n    HashMergeOpts: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration entries.\n\nThis method relies on the `get_names` static method of the HashMergeOpts class, which returns a list of the enumeration names in upper case. The method checks if the upper-cased version of the input name exists in this list and converts it to the corresponding HashMergeOpts member, otherwise, it raises a NameError indicating the invalid input.",
        "signature": "def from_str(name: str) -> 'HashMergeOpts':",
        "type": "Method",
        "class_signature": "class HashMergeOpts(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_choices": {},
    "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_hashmergeopts\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 hashmergeopts.py\n                \u251c\u2500\u2500 HashMergeOpts.from_str\n                \u251c\u2500\u2500 HashMergeOpts.get_choices\n                \u2514\u2500\u2500 HashMergeOpts.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and test the functionality of the `HashMergeOpts` enumeration within the context of YAML path merging. It ensures the enumeration correctly defines and retrieves valid options for hash merge strategies, such as \"DEEP,\" \"LEFT,\" and \"RIGHT,\" and that these options are appropriately mapped between their string representations and enumeration values. By providing methods to verify the enumeration's capabilities and handle invalid input, the module streamlines the process of validating merge options and enhances reliability when integrating YAML merging behavior into broader systems. This mitigates potential errors for developers, ensuring consistent and predictable behavior when working with merge strategies.\n\n## FILE 1: yamlpath/merger/enums/hashmergeopts.py\n\n- CLASS METHOD: HashMergeOpts.get_names\n  - CLASS SIGNATURE: class HashMergeOpts(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all upper-cased entry names for the HashMergeOpts enumeration.\n\nThis static method retrieves the names of all enumeration members in the HashMergeOpts class,\nconverting them to upper case for standardization. It utilizes the enum members defined in the \nHashMergeOpts class which represent different hash merging options.\n\nParameters:  \n    N/A\n\nReturns:  \n    List[str]: A list of upper-case string names for each member of the enumeration.\n\nRaises:  \n    N/A\n\"\"\"\n```\n\n- CLASS METHOD: HashMergeOpts.from_str\n  - CLASS SIGNATURE: class HashMergeOpts(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'HashMergeOpts':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string representation of a HashMergeOpts enumeration name to its corresponding enumeration value.\n\nParameters:\n    name (str): The name of the enumeration to convert, which should correspond to one of the enumeration entries.\n\nReturns:\n    HashMergeOpts: The enumeration value that corresponds to the provided name.\n\nRaises:\n    NameError: If the provided name does not match any valid enumeration entries.\n\nThis method relies on the `get_names` static method of the HashMergeOpts class, which returns a list of the enumeration names in upper case. The method checks if the upper-cased version of the input name exists in this list and converts it to the corresponding HashMergeOpts member, otherwise, it raises a NameError indicating the invalid input.\n\"\"\"\n```\n\n- CLASS METHOD: HashMergeOpts.get_choices\n  - CLASS SIGNATURE: class HashMergeOpts(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names of the HashMergeOpts enumeration in lower case.\n\nThis method fetches the names of the enumeration members, converts them to lower case, and returns them as a sorted list. It utilizes the `get_names` method to retrieve the names of the enumeration members, which are defined by the `HashMergeOpts` class.\n\nReturns:\n    List[str]: A sorted list of lower-cased names from the HashMergeOpts enumeration.\n\nRaises:\n    N/A\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/hashmergeopts.py": "\"\"\"\nImplements the HashMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass HashMergeOpts(Enum):\n    \"\"\"\n    Supported Hash (AKA: Map, dict) Merge Options.\n\n    Options include:\n\n    `DEEP`\n        RHS Hashes are deeply merged into LHS Hashes (full merge).\n\n    `LEFT`\n        LHS Hashes are not overwritten by RHS Hashes (no merge).\n\n    `RIGHT`\n        RHS Hashes fully replace LHS Hashes (no merge).\n    \"\"\"\n    DEEP = auto()\n    LEFT = auto()\n    RIGHT = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_hashmergeopts.py:Test_merger_enums_hashmergeopts:test_get_names": {
      "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_names": {}
    },
    "tests/test_merger_enums_hashmergeopts.py:Test_merger_enums_hashmergeopts:test_get_choices": {
      "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_choices": {
        "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_hashmergeopts.py:Test_merger_enums_hashmergeopts:test_from_str": {
      "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:from_str": {
        "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_hashmergeopts.py:Test_merger_enums_hashmergeopts:test_from_str_nameerror": {
      "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:from_str": {
        "yamlpath/merger/enums/hashmergeopts.py:HashMergeOpts:get_names": {}
      }
    }
  }
}