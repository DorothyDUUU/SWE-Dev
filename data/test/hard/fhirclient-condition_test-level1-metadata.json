{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-condition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/condition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import condition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass ConditionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Condition\", js[\"resourceType\"])\n        return condition.Condition(js)\n    \n    def testCondition1(self):\n        inst = self.instantiate_from(\"condition-example-f204-renal.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition1(inst2)\n    \n    def implCondition1(self, inst):\n        self.assertEqual(inst.abatementDateTime.datetime, FHIRDateTime(\"2013-03-20\").datetime)\n        self.assertEqual(inst.abatementDateTime.as_json(), \"2013-03-20\")\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"181414000\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Kidney\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[0].code, \"55607006\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Problem\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[1].code, \"problem-list-item\")\n        self.assertEqual(inst.category[0].coding[1].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"inactive\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"36225005\")\n        self.assertEqual(inst.code.coding[0].display, \"Acute renal insufficiency specified as due to procedure\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f204\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"The patient is anuric.\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2013-03-11\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2013-03-11\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2013-03-11\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2013-03-11\")\n        self.assertEqual(inst.severity.coding[0].code, \"24484000\")\n        self.assertEqual(inst.severity.coding[0].display, \"Severe\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.stage[0].summary.coding[0].code, \"14803004\")\n        self.assertEqual(inst.stage[0].summary.coding[0].display, \"Temporary\")\n        self.assertEqual(inst.stage[0].summary.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"differential\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition2(self):\n        inst = self.instantiate_from(\"condition-example2.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition2(inst2)\n    \n    def implCondition2(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"problem-list-item\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Problem List Item\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.text, \"Asthma\")\n        self.assertEqual(inst.id, \"example2\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetString, \"approximately November 2012\")\n        self.assertEqual(inst.severity.coding[0].code, \"255604002\")\n        self.assertEqual(inst.severity.coding[0].display, \"Mild\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Mild Asthma (Date: 12-Nov 2012)</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition3(self):\n        inst = self.instantiate_from(\"condition-example-stroke.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition3(inst2)\n    \n    def implCondition3(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"encounter-diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Encounter Diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"422504002\")\n        self.assertEqual(inst.code.coding[0].display, \"Ischemic stroke (disorder)\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.text, \"Stroke\")\n        self.assertEqual(inst.id, \"stroke\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2010-07-18\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2010-07-18\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Ischemic stroke, July 18, 2010</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition4(self):\n        inst = self.instantiate_from(\"condition-example-f002-lung.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition4(inst2)\n    \n    def implCondition4(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"51185008\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Thorax\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[0].code, \"439401001\")\n        self.assertEqual(inst.category[0].coding[0].display, \"diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"254637007\")\n        self.assertEqual(inst.code.coding[0].display, \"NSCLC - Non-small cell lung cancer\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].code, \"169069000\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].display, \"CT of thorax\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f002\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2011-05-05\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2011-05-05\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2012-06-03\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2012-06-03\")\n        self.assertEqual(inst.severity.coding[0].code, \"24484000\")\n        self.assertEqual(inst.severity.coding[0].display, \"Severe\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.stage[0].summary.coding[0].code, \"258219007\")\n        self.assertEqual(inst.stage[0].summary.coding[0].display, \"stage II\")\n        self.assertEqual(inst.stage[0].summary.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.stage[0].type.coding[0].code, \"260998006\")\n        self.assertEqual(inst.stage[0].type.coding[0].display, \"Clinical staging (qualifier value)\")\n        self.assertEqual(inst.stage[0].type.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition5(self):\n        inst = self.instantiate_from(\"condition-example-f203-sepsis.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition5(inst2)\n    \n    def implCondition5(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"281158006\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Pulmonary vascular structure\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[0].code, \"55607006\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Problem\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[1].code, \"problem-list-item\")\n        self.assertEqual(inst.category[0].coding[1].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"10001005\")\n        self.assertEqual(inst.code.coding[0].display, \"Bacterial sepsis\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f203\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2013-03-08\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2013-03-08\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2013-03-11\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2013-03-11\")\n        self.assertEqual(inst.severity.coding[0].code, \"371924009\")\n        self.assertEqual(inst.severity.coding[0].display, \"Moderate to severe\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition6(self):\n        inst = self.instantiate_from(\"condition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition6(inst2)\n    \n    def implCondition6(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"49521004\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Left external ear structure\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.bodySite[0].text, \"Left Ear\")\n        self.assertEqual(inst.category[0].coding[0].code, \"encounter-diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Encounter Diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.category[0].coding[1].code, \"439401001\")\n        self.assertEqual(inst.category[0].coding[1].display, \"Diagnosis\")\n        self.assertEqual(inst.category[0].coding[1].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"39065001\")\n        self.assertEqual(inst.code.coding[0].display, \"Burn of ear\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.code.text, \"Burnt Ear\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2012-05-24\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2012-05-24\")\n        self.assertEqual(inst.severity.coding[0].code, \"24484000\")\n        self.assertEqual(inst.severity.coding[0].display, \"Severe\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Severe burn of left ear (Date: 24-May 2012)</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition7(self):\n        inst = self.instantiate_from(\"condition-example-family-history.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition7(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition7(inst2)\n    \n    def implCondition7(self, inst):\n        self.assertEqual(inst.category[0].coding[0].code, \"problem-list-item\")\n        self.assertEqual(inst.category[0].coding[0].display, \"Problem List Item\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-category\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"312824007\")\n        self.assertEqual(inst.code.coding[0].display, \"Family history of cancer of colon\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"family-history\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Family history of cancer of colon</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testCondition8(self):\n        inst = self.instantiate_from(\"condition-example-f003-abscess.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition8(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition8(inst2)\n    \n    def implCondition8(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"280193007\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Entire retropharyngeal area\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.category[0].coding[0].code, \"439401001\")\n        self.assertEqual(inst.category[0].coding[0].display, \"diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"18099001\")\n        self.assertEqual(inst.code.coding[0].display, \"Retropharyngeal abscess\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].code, \"169068008\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].display, \"CT of neck\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f003\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2012-02-27\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2012-02-27\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2012-02-20\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2012-02-20\")\n        self.assertEqual(inst.severity.coding[0].code, \"371923003\")\n        self.assertEqual(inst.severity.coding[0].display, \"Mild to moderate\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition9(self):\n        inst = self.instantiate_from(\"condition-example-f205-infection.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition9(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition9(inst2)\n    \n    def implCondition9(self, inst):\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"87628006\")\n        self.assertEqual(inst.code.coding[0].display, \"Bacterial infectious disease\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f205\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2013-04-04\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2013-04-04\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"differential\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n    \n    def testCondition10(self):\n        inst = self.instantiate_from(\"condition-example-f001-heart.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Condition instance\")\n        self.implCondition10(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Condition\", js[\"resourceType\"])\n        inst2 = condition.Condition(js)\n        self.implCondition10(inst2)\n    \n    def implCondition10(self, inst):\n        self.assertEqual(inst.bodySite[0].coding[0].code, \"40768004\")\n        self.assertEqual(inst.bodySite[0].coding[0].display, \"Left thorax\")\n        self.assertEqual(inst.bodySite[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.bodySite[0].text, \"heart structure\")\n        self.assertEqual(inst.category[0].coding[0].code, \"439401001\")\n        self.assertEqual(inst.category[0].coding[0].display, \"diagnosis\")\n        self.assertEqual(inst.category[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.clinicalStatus.coding[0].code, \"active\")\n        self.assertEqual(inst.clinicalStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-clinical\")\n        self.assertEqual(inst.code.coding[0].code, \"368009\")\n        self.assertEqual(inst.code.coding[0].display, \"Heart valve disorder\")\n        self.assertEqual(inst.code.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].code, \"426396005\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].display, \"Cardiac chest pain\")\n        self.assertEqual(inst.evidence[0].code[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.id, \"f001\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.onsetDateTime.datetime, FHIRDateTime(\"2011-08-05\").datetime)\n        self.assertEqual(inst.onsetDateTime.as_json(), \"2011-08-05\")\n        self.assertEqual(inst.recordedDate.datetime, FHIRDateTime(\"2011-10-05\").datetime)\n        self.assertEqual(inst.recordedDate.as_json(), \"2011-10-05\")\n        self.assertEqual(inst.severity.coding[0].code, \"6736007\")\n        self.assertEqual(inst.severity.coding[0].display, \"Moderate\")\n        self.assertEqual(inst.severity.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.verificationStatus.coding[0].code, \"confirmed\")\n        self.assertEqual(inst.verificationStatus.coding[0].system, \"http://terminology.hl7.org/CodeSystem/condition-ver-status\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/condition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Condition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Condition(domainresource.DomainResource):\n    \"\"\" Detailed information about conditions, problems or diagnoses.\n    \n    A clinical condition, problem, diagnosis, or other event, situation, issue,\n    or clinical concept that has risen to a level of concern.\n    \"\"\"\n    \n    resource_type = \"Condition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.abatementAge = None\n        \"\"\" When in resolution/remission.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.abatementDateTime = None\n        \"\"\" When in resolution/remission.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.abatementPeriod = None\n        \"\"\" When in resolution/remission.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.abatementRange = None\n        \"\"\" When in resolution/remission.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.abatementString = None\n        \"\"\" When in resolution/remission.\n        Type `str`. \"\"\"\n        \n        self.asserter = None\n        \"\"\" Person who asserts this condition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.bodySite = None\n        \"\"\" Anatomical location, if relevant.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" problem-list-item | encounter-diagnosis.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.clinicalStatus = None\n        \"\"\" active | recurrence | relapse | inactive | remission | resolved.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" Identification of the condition, problem or diagnosis.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Encounter created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.evidence = None\n        \"\"\" Supporting evidence.\n        List of `ConditionEvidence` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" External Ids for this condition.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.note = None\n        \"\"\" Additional information about the Condition.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.onsetAge = None\n        \"\"\" Estimated or actual date,  date-time, or age.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.onsetDateTime = None\n        \"\"\" Estimated or actual date,  date-time, or age.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.onsetPeriod = None\n        \"\"\" Estimated or actual date,  date-time, or age.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.onsetRange = None\n        \"\"\" Estimated or actual date,  date-time, or age.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.onsetString = None\n        \"\"\" Estimated or actual date,  date-time, or age.\n        Type `str`. \"\"\"\n        \n        self.recordedDate = None\n        \"\"\" Date record was first recorded.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.recorder = None\n        \"\"\" Who recorded the condition.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.severity = None\n        \"\"\" Subjective severity of condition.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.stage = None\n        \"\"\" Stage/grade, usually assessed formally.\n        List of `ConditionStage` items (represented as `dict` in JSON). \"\"\"\n        \n        self.subject = None\n        \"\"\" Who has the condition?.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.verificationStatus = None\n        \"\"\" unconfirmed | provisional | differential | confirmed | refuted |\n        entered-in-error.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(Condition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Condition, self).elementProperties()\n        js.extend([\n            (\"abatementAge\", \"abatementAge\", age.Age, False, \"abatement\", False),\n            (\"abatementDateTime\", \"abatementDateTime\", fhirdatetime.FHIRDateTime, False, \"abatement\", False),\n            (\"abatementPeriod\", \"abatementPeriod\", period.Period, False, \"abatement\", False),\n            (\"abatementRange\", \"abatementRange\", range.Range, False, \"abatement\", False),\n            (\"abatementString\", \"abatementString\", str, False, \"abatement\", False),\n            (\"asserter\", \"asserter\", fhirreference.FHIRReference, False, None, False),\n            (\"bodySite\", \"bodySite\", codeableconcept.CodeableConcept, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, True, None, False),\n            (\"clinicalStatus\", \"clinicalStatus\", codeableconcept.CodeableConcept, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"evidence\", \"evidence\", ConditionEvidence, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"onsetAge\", \"onsetAge\", age.Age, False, \"onset\", False),\n            (\"onsetDateTime\", \"onsetDateTime\", fhirdatetime.FHIRDateTime, False, \"onset\", False),\n            (\"onsetPeriod\", \"onsetPeriod\", period.Period, False, \"onset\", False),\n            (\"onsetRange\", \"onsetRange\", range.Range, False, \"onset\", False),\n            (\"onsetString\", \"onsetString\", str, False, \"onset\", False),\n            (\"recordedDate\", \"recordedDate\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"recorder\", \"recorder\", fhirreference.FHIRReference, False, None, False),\n            (\"severity\", \"severity\", codeableconcept.CodeableConcept, False, None, False),\n            (\"stage\", \"stage\", ConditionStage, True, None, False),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, True),\n            (\"verificationStatus\", \"verificationStatus\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass ConditionEvidence(backboneelement.BackboneElement):\n    \"\"\" Supporting evidence.\n    \n    Supporting evidence / manifestations that are the basis of the Condition's\n    verification status, such as evidence that confirmed or refuted the\n    condition.\n    \"\"\"\n    \n    resource_type = \"ConditionEvidence\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Manifestation/symptom.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.detail = None\n        \"\"\" Supporting information found elsewhere.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        super(ConditionEvidence, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ConditionEvidence, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"detail\", \"detail\", fhirreference.FHIRReference, True, None, False),\n        ])\n        return js\n\n\nclass ConditionStage(backboneelement.BackboneElement):\n    \"\"\" Stage/grade, usually assessed formally.\n    \n    Clinical stage or grade of a condition. May include formal severity\n    assessments.\n    \"\"\"\n    \n    resource_type = \"ConditionStage\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.assessment = None\n        \"\"\" Formal record of assessment.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.summary = None\n        \"\"\" Simple summary (disease specific).\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" Kind of staging.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(ConditionStage, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(ConditionStage, self).elementProperties()\n        js.extend([\n            (\"assessment\", \"assessment\", fhirreference.FHIRReference, True, None, False),\n            (\"summary\", \"summary\", codeableconcept.CodeableConcept, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this FHIRDate instance. If the original input value (`origval`) is not None, it will be returned directly, preserving the exact JSON format. If the original value is None, it defaults to returning the ISO 8601 string representation of the date stored in the `date` attribute using the `isostring` property. \n\nThe method does not take any parameters and returns either the original JSON string or the ISO 8601 formatted date as a string. This allows seamless access to the representation of the date in its original form or in a standardized format, depending on what is available.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this FHIRDate instance. If the original input value (`origval`) is not None, it will be returned directly, preserving the exact JSON format. If the original value is None, it defaults to returning the ISO 8601 string representation of the date stored in the `date` attribute using the `isostring` property. \n\nThe method does not take any parameters and returns either the original JSON string or the ISO 8601 formatted date as a string. This allows seamless access to the representation of the date in its original form or in a standardized format, depending on what is available.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime value. It initializes the `datetime` attribute to None and calls the constructor of the superclass, `FHIRDate`, to handle the input. \n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the JSON value used to construct the instance; typically an ISO 8601 formatted datetime string. If None, it defaults to an uninitialized state.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that represents the parsed FHIR datetime. It is initialized to None until a valid `jsonval` is provided and processed.\n\nInteraction:\nThis method leverages the `FHIRDate` superclass to handle JSON formatting, and the initialization of the `datetime` attribute will depend on further processing of the input JSON value in the superclass.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime value. It initializes the `datetime` attribute to None and calls the constructor of the superclass, `FHIRDate`, to handle the input. \n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the JSON value used to construct the instance; typically an ISO 8601 formatted datetime string. If None, it defaults to an uninitialized state.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that represents the parsed FHIR datetime. It is initialized to None until a valid `jsonval` is provided and processed.\n\nInteraction:\nThis method leverages the `FHIRDate` superclass to handle JSON formatting, and the initialization of the `datetime` attribute will depend on further processing of the input JSON value in the superclass.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Transform the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass (`FHIRAbstractBase`) to include the `resourceType` key in the resulting JSON representation, which identifies the type of resource being serialized. The `resource_type` constant, defined in the class, holds the value that gets assigned to this key. This is crucial for accurately representing the resource in the context of FHIR (Fast Healthcare Interoperability Resources) standards.\n\n:return: A dictionary containing the serialized JSON representation of the resource, including the `resourceType`.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Transform the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass (`FHIRAbstractBase`) to include the `resourceType` key in the resulting JSON representation, which identifies the type of resource being serialized. The `resource_type` constant, defined in the class, holds the value that gets assigned to this key. This is crucial for accurately representing the resource in the context of FHIR (Fast Healthcare Interoperability Resources) standards.\n\n:return: A dictionary containing the serialized JSON representation of the resource, including the `resourceType`.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/condition.py": {
      "Condition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Condition instance representing clinical conditions, problems, or diagnoses.\n\nThis constructor initializes attributes related to the Condition resource, such as details on the condition's onset, abatement, clinical status, categorization, and associated evidence. It allows for representation in scenarios of resolution or remission and supports different types of data formats through properties like Age, FHIRDateTime, Period, and CodeableConcept.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary with initial property values for the instance.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables; if False, allows more flexibility in property assignment.\n\nAttributes:\n- abatementAge: Indicates when the condition is in resolution/remission as an Age object.\n- abatementDateTime: Represents the resolution/remission date and time as a FHIRDateTime string.\n- clinicalStatus: Describes the condition's current status using a CodeableConcept.\n- code: Identification of the condition, problem, or diagnosis as a CodeableConcept.\n- evidence: Supporting evidence for the condition, represented as a list of ConditionEvidence objects.\n- subject: The individual with the condition, referenced using FHIRReference.\n\nAdditionally, this constructor calls the superclass's initializer (domainresource.DomainResource) to ensure proper setup of inherited properties and behavior. Relevant imports include age, annotation, codeableconcept, fhirdatetime, fhirreference, identifier, period, and range, which provide data types for the attributes.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.abatementAge = None\n        ' When in resolution/remission.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.abatementDateTime = None\n        ' When in resolution/remission.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.abatementPeriod = None\n        ' When in resolution/remission.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.abatementRange = None\n        ' When in resolution/remission.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.abatementString = None\n        ' When in resolution/remission.\\n        Type `str`. '\n        self.asserter = None\n        ' Person who asserts this condition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.bodySite = None\n        ' Anatomical location, if relevant.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.category = None\n        ' problem-list-item | encounter-diagnosis.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.clinicalStatus = None\n        ' active | recurrence | relapse | inactive | remission | resolved.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.code = None\n        ' Identification of the condition, problem or diagnosis.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.encounter = None\n        ' Encounter created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.evidence = None\n        ' Supporting evidence.\\n        List of `ConditionEvidence` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' External Ids for this condition.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.note = None\n        ' Additional information about the Condition.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.onsetAge = None\n        ' Estimated or actual date,  date-time, or age.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.onsetDateTime = None\n        ' Estimated or actual date,  date-time, or age.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.onsetPeriod = None\n        ' Estimated or actual date,  date-time, or age.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.onsetRange = None\n        ' Estimated or actual date,  date-time, or age.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.onsetString = None\n        ' Estimated or actual date,  date-time, or age.\\n        Type `str`. '\n        self.recordedDate = None\n        ' Date record was first recorded.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.recorder = None\n        ' Who recorded the condition.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.severity = None\n        ' Subjective severity of condition.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.stage = None\n        ' Stage/grade, usually assessed formally.\\n        List of `ConditionStage` items (represented as `dict` in JSON). '\n        self.subject = None\n        ' Who has the condition?.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.verificationStatus = None\n        ' unconfirmed | provisional | differential | confirmed | refuted |\\n        entered-in-error.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(Condition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Condition instance representing clinical conditions, problems, or diagnoses.\n\nThis constructor initializes attributes related to the Condition resource, such as details on the condition's onset, abatement, clinical status, categorization, and associated evidence. It allows for representation in scenarios of resolution or remission and supports different types of data formats through properties like Age, FHIRDateTime, Period, and CodeableConcept.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary with initial property values for the instance.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables; if False, allows more flexibility in property assignment.\n\nAttributes:\n- abatementAge: Indicates when the condition is in resolution/remission as an Age object.\n- abatementDateTime: Represents the resolution/remission date and time as a FHIRDateTime string.\n- clinicalStatus: Describes the condition's current status using a CodeableConcept.\n- code: Identification of the condition, problem, or diagnosis as a CodeableConcept.\n- evidence: Supporting evidence for the condition, represented as a list of ConditionEvidence objects.\n- subject: The individual with the condition, referenced using FHIRReference.\n\nAdditionally, this constructor calls the superclass's initializer (domainresource.DomainResource) to ensure proper setup of inherited properties and behavior. Relevant imports include age, annotation, codeableconcept, fhirdatetime, fhirreference, identifier, period, and range, which provide data types for the attributes.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Condition(domainresource.DomainResource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/condition.py:Condition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/condition_test.py:ConditionTests:testCondition1": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:instantiate_from": {
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition10": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition10": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition2": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition3": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition4": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition5": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition6": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition6": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition7": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition7": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition8": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition8": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/condition_test.py:ConditionTests:testCondition9": {
      "tests/models/condition_test.py:ConditionTests:instantiate_from": {
        "fhirclient/models/condition.py:Condition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/condition.py:Condition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/condition_test.py:ConditionTests:implCondition9": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/condition.py:Condition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/condition.py:Condition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/condition.py:Condition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-condition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 condition.py\n        \u2502   \u2514\u2500\u2500 Condition.__init__\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u2514\u2500\u2500 fhirdatetime.py\n            \u2514\u2500\u2500 FHIRDateTime.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation, instantiation, and testing of FHIR-compliant Condition resource objects as per the FHIR 4.0.1 standard. It ensures comprehensive verification of the structure, content, and compliance of Condition resources, including attributes such as clinical status, verification status, severity, onset and abatement details, body sites, and coding systems (e.g., SNOMED, HL7). By enabling structured testing and validation against example datasets, the module addresses the need for consistent and reliable handling of Condition resources in healthcare applications, supporting developers in building robust FHIR integrations and ensuring data accuracy and interoperability in clinical systems.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this FHIRDate instance. If the original input value (`origval`) is not None, it will be returned directly, preserving the exact JSON format. If the original value is None, it defaults to returning the ISO 8601 string representation of the date stored in the `date` attribute using the `isostring` property. \n\nThe method does not take any parameters and returns either the original JSON string or the ISO 8601 formatted date as a string. This allows seamless access to the representation of the date in its original form or in a standardized format, depending on what is available.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor accepts an optional JSON string representation of a FHIR datetime value. It initializes the `datetime` attribute to None and calls the constructor of the superclass, `FHIRDate`, to handle the input. \n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the JSON value used to construct the instance; typically an ISO 8601 formatted datetime string. If None, it defaults to an uninitialized state.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): A datetime object that represents the parsed FHIR datetime. It is initialized to None until a valid `jsonval` is provided and processed.\n\nInteraction:\nThis method leverages the `FHIRDate` superclass to handle JSON formatting, and the initialization of the `datetime` attribute will depend on further processing of the input JSON value in the superclass.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nTransform the FHIR resource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass (`FHIRAbstractBase`) to include the `resourceType` key in the resulting JSON representation, which identifies the type of resource being serialized. The `resource_type` constant, defined in the class, holds the value that gets assigned to this key. This is crucial for accurately representing the resource in the context of FHIR (Fast Healthcare Interoperability Resources) standards.\n\n:return: A dictionary containing the serialized JSON representation of the resource, including the `resourceType`.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/condition.py\n\n- CLASS METHOD: Condition.__init__\n  - CLASS SIGNATURE: class Condition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Condition instance representing clinical conditions, problems, or diagnoses.\n\nThis constructor initializes attributes related to the Condition resource, such as details on the condition's onset, abatement, clinical status, categorization, and associated evidence. It allows for representation in scenarios of resolution or remission and supports different types of data formats through properties like Age, FHIRDateTime, Period, and CodeableConcept.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary with initial property values for the instance.\n- strict (bool, optional): If True (default), raises a TypeError for invalid variables; if False, allows more flexibility in property assignment.\n\nAttributes:\n- abatementAge: Indicates when the condition is in resolution/remission as an Age object.\n- abatementDateTime: Represents the resolution/remission date and time as a FHIRDateTime string.\n- clinicalStatus: Describes the condition's current status using a CodeableConcept.\n- code: Identification of the condition, problem, or diagnosis as a CodeableConcept.\n- evidence: Supporting evidence for the condition, represented as a list of ConditionEvidence objects.\n- subject: The individual with the condition, referenced using FHIRReference.\n\nAdditionally, this constructor calls the superclass's initializer (domainresource.DomainResource) to ensure proper setup of inherited properties and behavior. Relevant imports include age, annotation, codeableconcept, fhirdatetime, fhirreference, identifier, period, and range, which provide data types for the attributes.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/condition.py": "from . import domainresource\n\nclass Condition(domainresource.DomainResource):\n    \"\"\" Detailed information about conditions, problems or diagnoses.\n    \n    A clinical condition, problem, diagnosis, or other event, situation, issue,\n    or clinical concept that has risen to a level of concern.\n    \"\"\"\n    resource_type = 'Condition'\n\n    def elementProperties(self):\n        js = super(Condition, self).elementProperties()\n        js.extend([('abatementAge', 'abatementAge', age.Age, False, 'abatement', False), ('abatementDateTime', 'abatementDateTime', fhirdatetime.FHIRDateTime, False, 'abatement', False), ('abatementPeriod', 'abatementPeriod', period.Period, False, 'abatement', False), ('abatementRange', 'abatementRange', range.Range, False, 'abatement', False), ('abatementString', 'abatementString', str, False, 'abatement', False), ('asserter', 'asserter', fhirreference.FHIRReference, False, None, False), ('bodySite', 'bodySite', codeableconcept.CodeableConcept, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, True, None, False), ('clinicalStatus', 'clinicalStatus', codeableconcept.CodeableConcept, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('evidence', 'evidence', ConditionEvidence, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('note', 'note', annotation.Annotation, True, None, False), ('onsetAge', 'onsetAge', age.Age, False, 'onset', False), ('onsetDateTime', 'onsetDateTime', fhirdatetime.FHIRDateTime, False, 'onset', False), ('onsetPeriod', 'onsetPeriod', period.Period, False, 'onset', False), ('onsetRange', 'onsetRange', range.Range, False, 'onset', False), ('onsetString', 'onsetString', str, False, 'onset', False), ('recordedDate', 'recordedDate', fhirdatetime.FHIRDateTime, False, None, False), ('recorder', 'recorder', fhirreference.FHIRReference, False, None, False), ('severity', 'severity', codeableconcept.CodeableConcept, False, None, False), ('stage', 'stage', ConditionStage, True, None, False), ('subject', 'subject', fhirreference.FHIRReference, False, None, True), ('verificationStatus', 'verificationStatus', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass ConditionEvidence(backboneelement.BackboneElement):\n    \"\"\" Supporting evidence.\n    \n    Supporting evidence / manifestations that are the basis of the Condition's\n    verification status, such as evidence that confirmed or refuted the\n    condition.\n    \"\"\"\n    resource_type = 'ConditionEvidence'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Manifestation/symptom.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.detail = None\n        ' Supporting information found elsewhere.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        super(ConditionEvidence, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ConditionEvidence, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('detail', 'detail', fhirreference.FHIRReference, True, None, False)])\n        return js\n\nclass ConditionStage(backboneelement.BackboneElement):\n    \"\"\" Stage/grade, usually assessed formally.\n    \n    Clinical stage or grade of a condition. May include formal severity\n    assessments.\n    \"\"\"\n    resource_type = 'ConditionStage'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.assessment = None\n        ' Formal record of assessment.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.summary = None\n        ' Simple summary (disease specific).\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.type = None\n        ' Kind of staging.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(ConditionStage, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(ConditionStage, self).elementProperties()\n        js.extend([('assessment', 'assessment', fhirreference.FHIRReference, True, None, False), ('summary', 'summary', codeableconcept.CodeableConcept, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range"
  }
}