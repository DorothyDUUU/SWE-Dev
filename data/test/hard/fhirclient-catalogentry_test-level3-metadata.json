{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-catalogentry_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/catalogentry_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import catalogentry\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass CatalogEntryTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"CatalogEntry\", js[\"resourceType\"])\n        return catalogentry.CatalogEntry(js)\n    \n    def testCatalogEntry1(self):\n        inst = self.instantiate_from(\"catalogentry-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a CatalogEntry instance\")\n        self.implCatalogEntry1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"CatalogEntry\", js[\"resourceType\"])\n        inst2 = catalogentry.CatalogEntry(js)\n        self.implCatalogEntry1(inst2)\n    \n    def implCatalogEntry1(self, inst):\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.com/identifier\")\n        self.assertEqual(inst.identifier[0].value, \"123\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertTrue(inst.orderable)\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type.text, \"Medication\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/resource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Resource).\n# 2024, SMART Health IT.\n\n\nfrom . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    \n    resource_type = \"Resource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Resource, self).elementProperties()\n        js.extend([\n            (\"id\", \"id\", str, False, None, False),\n            (\"implicitRules\", \"implicitRules\", str, False, None, False),\n            (\"language\", \"language\", str, False, None, False),\n            (\"meta\", \"meta\", meta.Meta, False, None, False),\n        ])\n        return js\n\n\nfrom . import meta\n",
    "fhirclient/models/catalogentry.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/CatalogEntry).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass CatalogEntry(domainresource.DomainResource):\n    \"\"\" An entry in a catalog.\n    \n    Catalog entries are wrappers that contextualize items included in a\n    catalog.\n    \"\"\"\n    \n    resource_type = \"CatalogEntry\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.additionalCharacteristic = None\n        \"\"\" Additional characteristics of the catalog entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.additionalClassification = None\n        \"\"\" Additional classification of the catalog entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.additionalIdentifier = None\n        \"\"\" Any additional identifier(s) for the catalog item, in the same\n        granularity or concept.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.classification = None\n        \"\"\" Classification (category or class) of the item entry.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Unique identifier of the catalog item.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastUpdated = None\n        \"\"\" When was this catalog last updated.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.orderable = None\n        \"\"\" Whether the entry represents an orderable item.\n        Type `bool`. \"\"\"\n        \n        self.referencedItem = None\n        \"\"\" The item that is being defined.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relatedEntry = None\n        \"\"\" An item that this catalog entry is related to.\n        List of `CatalogEntryRelatedEntry` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" The type of item - medication, device, service, protocol or other.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.validTo = None\n        \"\"\" The date until which this catalog entry is expected to be active.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.validityPeriod = None\n        \"\"\" The time period in which this catalog entry is expected to be\n        active.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        super(CatalogEntry, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CatalogEntry, self).elementProperties()\n        js.extend([\n            (\"additionalCharacteristic\", \"additionalCharacteristic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"additionalClassification\", \"additionalClassification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"additionalIdentifier\", \"additionalIdentifier\", identifier.Identifier, True, None, False),\n            (\"classification\", \"classification\", codeableconcept.CodeableConcept, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"lastUpdated\", \"lastUpdated\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"orderable\", \"orderable\", bool, False, None, True),\n            (\"referencedItem\", \"referencedItem\", fhirreference.FHIRReference, False, None, True),\n            (\"relatedEntry\", \"relatedEntry\", CatalogEntryRelatedEntry, True, None, False),\n            (\"status\", \"status\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"validTo\", \"validTo\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"validityPeriod\", \"validityPeriod\", period.Period, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass CatalogEntryRelatedEntry(backboneelement.BackboneElement):\n    \"\"\" An item that this catalog entry is related to.\n    \n    Used for example, to point to a substance, or to a device used to\n    administer a medication.\n    \"\"\"\n    \n    resource_type = \"CatalogEntryRelatedEntry\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.item = None\n        \"\"\" The reference to the related item.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationtype = None\n        \"\"\" triggers | is-replaced-by.\n        Type `str`. \"\"\"\n        \n        super(CatalogEntryRelatedEntry, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(CatalogEntryRelatedEntry, self).elementProperties()\n        js.extend([\n            (\"item\", \"item\", fhirreference.FHIRReference, False, None, True),\n            (\"relationtype\", \"relationtype\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes an instance of the FHIRAbstractResource class, which represents a FHIR resource with server interaction capabilities.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource, which should include a 'resourceType' field that matches the resource_type of the class. If the resourceType does not match, an Exception is raised.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced (default is True).\n\nAttributes:\n- _server: Stores the server instance from which the resource was read. Initially set to None.\n\nThe constructor raises an Exception if the 'resourceType' in jsondict does not match the defined resource_type of the class, ensuring the integrity of the resource instantiation. It also calls the parent constructor from FHIRAbstractBase, passing along the jsondict and strict parameters.\"\"\"\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes an instance of the FHIRAbstractResource class, which represents a FHIR resource with server interaction capabilities.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource, which should include a 'resourceType' field that matches the resource_type of the class. If the resourceType does not match, an Exception is raised.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced (default is True).\n\nAttributes:\n- _server: Stores the server instance from which the resource was read. Initially set to None.\n\nThe constructor raises an Exception if the 'resourceType' in jsondict does not match the defined resource_type of the class, ensuring the integrity of the resource instantiation. It also calls the parent constructor from FHIRAbstractBase, passing along the jsondict and strict parameters.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      },
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the instance of the FHIRAbstractResource to a JSON-compatible dictionary. This method extends the base class's as_json method to include the resource type in the resulting dictionary. \n\nReturns:\n    dict: A JSON representation of the resource, including the 'resourceType' key set to the instance's resource type.\n\nDependencies:\n    - Calls the superclass method `as_json()` from FHIRAbstractBase to build the initial JSON structure.\n\nConstants:\n    - `self.resource_type`: This constant defines the type of the resource, crucial for distinguishing between different FHIR resource types when serialized to JSON.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the instance of the FHIRAbstractResource to a JSON-compatible dictionary. This method extends the base class's as_json method to include the resource type in the resulting dictionary. \n\nReturns:\n    dict: A JSON representation of the resource, including the 'resourceType' key set to the instance's resource type.\n\nDependencies:\n    - Calls the superclass method `as_json()` from FHIRAbstractBase to build the initial JSON structure.\n\nConstants:\n    - `self.resource_type`: This constant defines the type of the resource, crucial for distinguishing between different FHIR resource types when serialized to JSON.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes an instance of the FHIRAbstractBase class. This constructor sets up internal attributes and updates the instance using a provided JSON dictionary, applying validation. The `jsondict` parameter allows for the initialization of the object from JSON data, while the `strict` parameter determines whether validation errors raise exceptions or are logged as warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing data to initialize the object. If None, no initialization occurs.\n- strict (bool, default=True): When True, invalid data raises a FHIRValidationError; if False, errors are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary for caching resolved resources, initially set to None.\n- _owner (FHIRAbstractBase or None): Indicates the parent resource of this instance, initially set to None.\n\nSide Effects:\nIf `jsondict` is provided, the function updates the instance's properties according to its values, raising validation errors if `strict` is True or logging warnings if False.\"\"\"\n        ' Initializer. If strict is true, raises on errors, otherwise uses\\n        `logger.warning()`.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)",
        "docstring": "Initializes an instance of the FHIRAbstractBase class. This constructor sets up internal attributes and updates the instance using a provided JSON dictionary, applying validation. The `jsondict` parameter allows for the initialization of the object from JSON data, while the `strict` parameter determines whether validation errors raise exceptions or are logged as warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing data to initialize the object. If None, no initialization occurs.\n- strict (bool, default=True): When True, invalid data raises a FHIRValidationError; if False, errors are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary for caching resolved resources, initially set to None.\n- _owner (FHIRAbstractBase or None): Indicates the parent resource of this instance, initially set to None.\n\nSide Effects:\nIf `jsondict` is provided, the function updates the instance's properties according to its values, raising validation errors if `strict` is True or logging warnings if False.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json": {
        "code": "    def with_json(cls, jsonobj):\n        \"\"\"Initialize an element of the FHIRAbstractBase class from a provided JSON dictionary or list of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` to create an instance. If it's a list, it attempts to create instances for each dictionary within the list, handling any validation errors by prefixing their indices for easier debugging. Raises a `TypeError` if the input is neither a dictionary nor a list. \n\nParameters:\n- jsonobj (dict | list): A JSON dictionary or a list of dictionaries from which to instantiate the FHIR element(s).\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dict nor a list of dicts.\n- FHIRValidationError: If instantiation fails for an entry in a list, with errors prefixed to indicate the specific problem with that entry.\"\"\"\n        ' Initialize an element from a JSON dictionary or array.\\n        \\n        If the JSON dictionary has a \"resourceType\" entry and the specified\\n        resource type is not the receiving classes type, uses\\n        `FHIRElementFactory` to return a correct class instance.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param jsonobj: A dict or list of dicts to instantiate from\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))",
        "docstring": "Initialize an element of the FHIRAbstractBase class from a provided JSON dictionary or list of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` to create an instance. If it's a list, it attempts to create instances for each dictionary within the list, handling any validation errors by prefixing their indices for easier debugging. Raises a `TypeError` if the input is neither a dictionary nor a list. \n\nParameters:\n- jsonobj (dict | list): A JSON dictionary or a list of dictionaries from which to instantiate the FHIR element(s).\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dict nor a list of dicts.\n- FHIRValidationError: If instantiation fails for an entry in a list, with errors prefixed to indicate the specific problem with that entry.",
        "signature": "def with_json(cls, jsonobj):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._with_json_dict": {
        "code": "    def _with_json_dict(cls, jsondict):\n        \"\"\"Internal class method that creates an instance of the class from a provided JSON dictionary.\n\n:param jsondict: A JSON dictionary from which to instantiate the object.\n:raises TypeError: If `jsondict` is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class initialized with data from `jsondict`.\n\nThis method serves as a helper to construct instances of `FHIRAbstractBase` or its subclasses while ensuring that the input data is in the expected format (a dictionary). It interacts with the class's initialization process, delegating the actual instantiation to the class constructor (`cls(jsondict)`), which assumes that `jsondict` conforms to the expected structure as defined by `elementProperties()`.\"\"\"\n        ' Internal method to instantiate from JSON dictionary.\\n        \\n        :raises: TypeError on anything but dict\\n        :raises: FHIRValidationError if instantiation fails\\n        :returns: An instance created from dictionary data\\n        '\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)",
        "docstring": "Internal class method that creates an instance of the class from a provided JSON dictionary.\n\n:param jsondict: A JSON dictionary from which to instantiate the object.\n:raises TypeError: If `jsondict` is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class initialized with data from `jsondict`.\n\nThis method serves as a helper to construct instances of `FHIRAbstractBase` or its subclasses while ensuring that the input data is in the expected format (a dictionary). It interacts with the class's initialization process, delegating the actual instantiation to the class constructor (`cls(jsondict)`), which assumes that `jsondict` conforms to the expected structure as defined by `elementProperties()`.",
        "signature": "def _with_json_dict(cls, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.with_json_and_owner": {
        "code": "    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\"Instantiates an element from a JSON dictionary while associating it with an owning parent resource. This method extends the functionality of `with_json()` by ensuring that the instantiated elements maintain a reference to their \"owner,\" which is crucial for resolving contained resources in the FHIR model.\n\nParameters:\n- jsonobj (dict or list): A decoded JSON dictionary or a list of dictionaries to create instances from.\n- owner (FHIRElement): The parent resource that owns the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the provided JSON data, with each instance's `_owner` attribute set to the given owner.\n\nRaises:\n- TypeError if the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError if the instantiation from JSON fails.\n\nThis method utilizes the `with_json()` class method to perform the initial instantiation, which handles the actual creation of the instances. The result is that each instantiated element will have access to its context within the FHIR resource hierarchy, enhancing the ability to manage references and associated resources.\"\"\"\n        ' Instantiates by forwarding to `with_json()`, then remembers the\\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\\n        containing the receiver and is used to resolve contained resources.\\n        \\n        :raises: TypeError on anything but dict or list of dicts\\n        :raises: FHIRValidationError if instantiation fails\\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\\n        :param FHIRElement owner: The owning parent\\n        :returns: An instance or a list of instances created from JSON data\\n        '\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance",
        "docstring": "Instantiates an element from a JSON dictionary while associating it with an owning parent resource. This method extends the functionality of `with_json()` by ensuring that the instantiated elements maintain a reference to their \"owner,\" which is crucial for resolving contained resources in the FHIR model.\n\nParameters:\n- jsonobj (dict or list): A decoded JSON dictionary or a list of dictionaries to create instances from.\n- owner (FHIRElement): The parent resource that owns the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the provided JSON data, with each instance's `_owner` attribute set to the given owner.\n\nRaises:\n- TypeError if the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError if the instantiation from JSON fails.\n\nThis method utilizes the `with_json()` class method to perform the initial instantiation, which handles the actual creation of the instances. The result is that each instantiated element will have access to its context within the FHIR resource hierarchy, enhancing the ability to manage references and associated resources.",
        "signature": "def with_json_and_owner(cls, jsonobj, owner):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of tuples representing the properties that should be serialized for the FHIR element. Each tuple contains the following data: the internal property name, the corresponding JSON name, the expected type, a boolean indicating if the property is a list, an optional string for the \"of many\" type, and a boolean indicating whether the property is not optional. This method serves as a blueprint for subclasses to define their specific properties that can be serialized to JSON.\n\nThe returned list is essential for the correct serialization and validation of FHIR resources, as it allows the framework to dynamically generate the JSON representation of the resources based on their defined attributes.\"\"\"\n        ' Returns a list of tuples, one tuple for each property that should\\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\\n        '\n        return []",
        "docstring": "Returns a list of tuples representing the properties that should be serialized for the FHIR element. Each tuple contains the following data: the internal property name, the corresponding JSON name, the expected type, a boolean indicating if the property is a list, an optional string for the \"of many\" type, and a boolean indicating whether the property is not optional. This method serves as a blueprint for subclasses to define their specific properties that can be serialized to JSON.\n\nThe returned list is essential for the correct serialization and validation of FHIR resources, as it allows the framework to dynamically generate the JSON representation of the resources based on their defined attributes.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.update_with_json": {
        "code": "    def update_with_json(self, jsondict):\n        \"\"\"Updates the instance attributes of the FHIRAbstractBase subclass with values from a given JSON dictionary.\n\n:param dict jsondict: A dictionary containing data used to update the instance. It must be in the format expected by the class and should only contain keys defined in the `elementProperties()` method.\n:raises FHIRValidationError: Raised if there are validation errors, such as if a non-dict type is provided, if required properties are missing, or if there are extra keys in the JSON that don't correspond to class properties.\n\nThe function loops through the properties defined in the `elementProperties()` method, validating and assigning values from the input dictionary to the instance's attributes. Key sets such as `valid` (to hold expected keys) and `found` (to track which properties were populated) are utilized throughout the validation process. The method also handles the references through `typ.with_json_and_owner()` for properties that are of type `FHIRElement` or its subclasses.\"\"\"\n        ' Update the receiver with data in a JSON dictionary.\\n        \\n        :raises: FHIRValidationError on validation errors\\n        :param dict jsondict: The JSON dictionary to use to update the receiver\\n        :returns: None on success, a list of errors if there were errors\\n        '\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)",
        "docstring": "Updates the instance attributes of the FHIRAbstractBase subclass with values from a given JSON dictionary.\n\n:param dict jsondict: A dictionary containing data used to update the instance. It must be in the format expected by the class and should only contain keys defined in the `elementProperties()` method.\n:raises FHIRValidationError: Raised if there are validation errors, such as if a non-dict type is provided, if required properties are missing, or if there are extra keys in the JSON that don't correspond to class properties.\n\nThe function loops through the properties defined in the `elementProperties()` method, validating and assigning values from the input dictionary to the instance's attributes. Key sets such as `valid` (to hold expected keys) and `found` (to track which properties were populated) are utilized throughout the validation process. The method also handles the references through `typ.with_json_and_owner()` for properties that are of type `FHIRElement` or its subclasses.",
        "signature": "def update_with_json(self, jsondict):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its properties defined in `elementProperties()`. This method ensures that required properties are not None (and that lists are not empty) and validates that non-None properties conform to the expected data types.\n\nRaises:\n- FHIRValidationError: If any properties are of the wrong type, if required properties are missing, or if there are superfluous keys in the dictionary.\n\nReturns:\n- dict: A validated dictionary representation of the instance, ready for JSON serialization.\n\nThe method uses:\n- `found`: A set to track which properties have been found and added to the serialized JSON.\n- `nonoptionals`: A set to record properties that are required but may not have been provided, triggering errors if they are missing in the serialization.\n\nThis method interacts closely with the element properties defined in `elementProperties()` and relies on the `_matches_type` method to validate data types accordingly. It also relies on the presence of an `as_json()` method in any nested objects for deep serialization.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its properties defined in `elementProperties()`. This method ensures that required properties are not None (and that lists are not empty) and validates that non-None properties conform to the expected data types.\n\nRaises:\n- FHIRValidationError: If any properties are of the wrong type, if required properties are missing, or if there are superfluous keys in the dictionary.\n\nReturns:\n- dict: A validated dictionary representation of the instance, ready for JSON serialization.\n\nThe method uses:\n- `found`: A set to track which properties have been found and added to the serialized JSON.\n- `nonoptionals`: A set to record properties that are required but may not have been provided, triggering errors if they are missing in the serialization.\n\nThis method interacts closely with the element properties defined in `elementProperties()` and relies on the `_matches_type` method to validate data types accordingly. It also relies on the presence of an `as_json()` method in any nested objects for deep serialization.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      },
      "FHIRAbstractBase._matches_type": {
        "code": "    def _matches_type(self, value, typ):\n        \"\"\"Checks if a given value matches a specified data type.\n\n:param value: The value to check against the specified type.\n:param typ: The expected type to compare the value with.\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method handles type checks for built-in types including int, float, str, and unicode (the latter being applicable for Python 2.7 as detected by the `sys.version_info` check). It is primarily used within the FHIRAbstractBase class to validate property types during JSON deserialization and serialization processes, ensuring that input data adheres to expected formats.\"\"\"\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
        "docstring": "Checks if a given value matches a specified data type.\n\n:param value: The value to check against the specified type.\n:param typ: The expected type to compare the value with.\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method handles type checks for built-in types including int, float, str, and unicode (the latter being applicable for Python 2.7 as detected by the `sys.version_info` check). It is primarily used within the FHIRAbstractBase class to validate property types during JSON deserialization and serialization processes, ensuring that input data adheres to expected formats.",
        "signature": "def _matches_type(self, value, typ):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/resource.py": {
      "Resource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a FHIR Resource object.\n\nThis constructor initializes the base properties of a FHIR resource, including `id`, `implicitRules`, `language`, and `meta`. If a `jsondict` is provided, it can be used to pre-fill these properties based on a JSON representation of the resource. The `strict` parameter determines whether invalid variables raise a TypeError; if set to False, validation errors are ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): Whether to enforce strict property validation.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which the resource content was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata information about the resource, should be represented as a dictionary in JSON.\n\nThis constructor also calls the constructor of the superclass `FHIRAbstractResource`, ensuring that any additional initialization from the parent class is performed.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.id = None\n        ' Logical id of this artifact.\\n        Type `str`. '\n        self.implicitRules = None\n        ' A set of rules under which this content was created.\\n        Type `str`. '\n        self.language = None\n        ' Language of the resource content.\\n        Type `str`. '\n        self.meta = None\n        ' Metadata about the resource.\\n        Type `Meta` (represented as `dict` in JSON). '\n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a FHIR Resource object.\n\nThis constructor initializes the base properties of a FHIR resource, including `id`, `implicitRules`, `language`, and `meta`. If a `jsondict` is provided, it can be used to pre-fill these properties based on a JSON representation of the resource. The `strict` parameter determines whether invalid variables raise a TypeError; if set to False, validation errors are ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): Whether to enforce strict property validation.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which the resource content was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata information about the resource, should be represented as a dictionary in JSON.\n\nThis constructor also calls the constructor of the superclass `FHIRAbstractResource`, ensuring that any additional initialization from the parent class is performed.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      },
      "Resource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve the list of element properties for the Resource instance.\n\nThis method extends the properties inherited from the superclass `FHIRAbstractResource` and defines specific attributes for the Resource class. The returned list includes tuples, where each tuple consists of the property name, the corresponding JSON key, the expected data type, whether it is required, any applicable values, and additional flags. The attributes defined include:\n- `id`: Logical identifier (str).\n- `implicitRules`: Set of rules under which the content was created (str).\n- `language`: Language of the resource content (str).\n- `meta`: Metadata about the resource (dict, represented as `meta.Meta`).\n\nReturns:\n    list: A list of tuples representing resource element properties.\n\nDependencies:\n    - `meta.Meta`: This is imported from the `meta` module and represents the structure for metadata associated with the resource.\"\"\"\n        js = super(Resource, self).elementProperties()\n        js.extend([('id', 'id', str, False, None, False), ('implicitRules', 'implicitRules', str, False, None, False), ('language', 'language', str, False, None, False), ('meta', 'meta', meta.Meta, False, None, False)])\n        return js",
        "docstring": "Retrieve the list of element properties for the Resource instance.\n\nThis method extends the properties inherited from the superclass `FHIRAbstractResource` and defines specific attributes for the Resource class. The returned list includes tuples, where each tuple consists of the property name, the corresponding JSON key, the expected data type, whether it is required, any applicable values, and additional flags. The attributes defined include:\n- `id`: Logical identifier (str).\n- `implicitRules`: Set of rules under which the content was created (str).\n- `language`: Language of the resource content (str).\n- `meta`: Metadata about the resource (dict, represented as `meta.Meta`).\n\nReturns:\n    list: A list of tuples representing resource element properties.\n\nDependencies:\n    - `meta.Meta`: This is imported from the `meta` module and represents the structure for metadata associated with the resource.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
      }
    },
    "fhirclient/models/catalogentry.py": {
      "CatalogEntry.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a CatalogEntry instance.\n\nThis constructor sets up all valid properties of the catalog entry, which serves as a wrapper providing context for items in a catalog. It allows for detailed metadata that includes classifications, identifiers, and references to other items. If a JSON dictionary is provided, it will initialize the class properties accordingly. Validation is enforced, and errors are raised unless strict initialization is turned off.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the catalog entry properties.\n- strict (bool, optional): If True (default), raising a TypeError for invalid variables; if False, allows flexibility in initialization.\n\nAttributes:\n- additionalCharacteristic: Additional characteristics of the catalog entry (list of CodeableConcept).\n- additionalClassification: Additional classification information (list of CodeableConcept).\n- additionalIdentifier: Additional identifiers for the catalog item (list of Identifier).\n- classification: Primary classification of the item entry (list of CodeableConcept).\n- identifier: Unique identifier for the catalog item (list of Identifier).\n- lastUpdated: Timestamp for the last update (FHIRDateTime).\n- orderable: Indicates if the entry is orderable (bool).\n- referencedItem: Reference to the item being defined (FHIRReference).\n- relatedEntry: Related catalog entries (list of CatalogEntryRelatedEntry).\n- status: Current status of the catalog entry (string).\n- type: Type of item (CodeableConcept).\n- validTo: Date until which the entry is valid (FHIRDateTime).\n- validityPeriod: Expected period of activity for the entry (Period).\n\nDependencies include:\n- domainresource.DomainResource: Inherited for basic resource functionalities.\n- codeableconcept, fhirdatetime, fhirreference, identifier, and period modules for specific property types.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.additionalCharacteristic = None\n        ' Additional characteristics of the catalog entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.additionalClassification = None\n        ' Additional classification of the catalog entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.additionalIdentifier = None\n        ' Any additional identifier(s) for the catalog item, in the same\\n        granularity or concept.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.classification = None\n        ' Classification (category or class) of the item entry.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Unique identifier of the catalog item.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.lastUpdated = None\n        ' When was this catalog last updated.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.orderable = None\n        ' Whether the entry represents an orderable item.\\n        Type `bool`. '\n        self.referencedItem = None\n        ' The item that is being defined.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relatedEntry = None\n        ' An item that this catalog entry is related to.\\n        List of `CatalogEntryRelatedEntry` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.type = None\n        ' The type of item - medication, device, service, protocol or other.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.validTo = None\n        ' The date until which this catalog entry is expected to be active.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.validityPeriod = None\n        ' The time period in which this catalog entry is expected to be\\n        active.\\n        Type `Period` (represented as `dict` in JSON). '\n        super(CatalogEntry, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a CatalogEntry instance.\n\nThis constructor sets up all valid properties of the catalog entry, which serves as a wrapper providing context for items in a catalog. It allows for detailed metadata that includes classifications, identifiers, and references to other items. If a JSON dictionary is provided, it will initialize the class properties accordingly. Validation is enforced, and errors are raised unless strict initialization is turned off.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the catalog entry properties.\n- strict (bool, optional): If True (default), raising a TypeError for invalid variables; if False, allows flexibility in initialization.\n\nAttributes:\n- additionalCharacteristic: Additional characteristics of the catalog entry (list of CodeableConcept).\n- additionalClassification: Additional classification information (list of CodeableConcept).\n- additionalIdentifier: Additional identifiers for the catalog item (list of Identifier).\n- classification: Primary classification of the item entry (list of CodeableConcept).\n- identifier: Unique identifier for the catalog item (list of Identifier).\n- lastUpdated: Timestamp for the last update (FHIRDateTime).\n- orderable: Indicates if the entry is orderable (bool).\n- referencedItem: Reference to the item being defined (FHIRReference).\n- relatedEntry: Related catalog entries (list of CatalogEntryRelatedEntry).\n- status: Current status of the catalog entry (string).\n- type: Type of item (CodeableConcept).\n- validTo: Date until which the entry is valid (FHIRDateTime).\n- validityPeriod: Expected period of activity for the entry (Period).\n\nDependencies include:\n- domainresource.DomainResource: Inherited for basic resource functionalities.\n- codeableconcept, fhirdatetime, fhirreference, identifier, and period modules for specific property types.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class CatalogEntry(domainresource.DomainResource):"
      },
      "CatalogEntry.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Retrieve a list of property elements for the CatalogEntry class.\n\nThis method builds upon the properties defined in the superclass, DomainResource, and appends additional specific properties for the CatalogEntry. Each property includes details such as its name, type, and whether it is a collection (list) or a single value. The properties enabled by this method include characteristics like additional identifiers, classifications, and references to related items.\n\nReturns:\n    list: A list of tuples, where each tuple represents a property element with the following format:\n        (name_in_instance, name_in_json, property_type, is_list, condition, is_required).\n\nDependencies:\n    - Requires the `codeableconcept`, `identifier`, `fhirdatetime`, `fhirreference`, and `period` modules/classes to define specific data types for the properties.\n    - Interacts with the superclass method `elementProperties` to inherit additional properties.\n\nThe property definitions include:\n- `additionalCharacteristic`: A list of additional characteristics as `CodeableConcept`.\n- `additionalClassification`: A list of additional classifications as `CodeableConcept`.\n- `additionalIdentifier`: A list of additional identifiers as `Identifier`.\n- `classification`: A list of classifications as `CodeableConcept`.\n- `identifier`: A list of unique identifiers as `Identifier`.\n- `lastUpdated`: A timestamp of the last update as `FHIRDateTime`.\n- `orderable`: A boolean indicating if the entry is orderable.\n- `referencedItem`: A reference to the item being defined as `FHIRReference`.\n- `relatedEntry`: A list of related catalog entries as `CatalogEntryRelatedEntry`.\n- `status`: A string representing the status of the catalog entry.\n- `type`: A type identifier as `CodeableConcept`.\n- `validTo`: A timestamp indicating the validity expiration as `FHIRDateTime`.\n- `validityPeriod`: A period within which the entry is valid as `Period`.\"\"\"\n        js = super(CatalogEntry, self).elementProperties()\n        js.extend([('additionalCharacteristic', 'additionalCharacteristic', codeableconcept.CodeableConcept, True, None, False), ('additionalClassification', 'additionalClassification', codeableconcept.CodeableConcept, True, None, False), ('additionalIdentifier', 'additionalIdentifier', identifier.Identifier, True, None, False), ('classification', 'classification', codeableconcept.CodeableConcept, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('lastUpdated', 'lastUpdated', fhirdatetime.FHIRDateTime, False, None, False), ('orderable', 'orderable', bool, False, None, True), ('referencedItem', 'referencedItem', fhirreference.FHIRReference, False, None, True), ('relatedEntry', 'relatedEntry', CatalogEntryRelatedEntry, True, None, False), ('status', 'status', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('validTo', 'validTo', fhirdatetime.FHIRDateTime, False, None, False), ('validityPeriod', 'validityPeriod', period.Period, False, None, False)])\n        return js",
        "docstring": "Retrieve a list of property elements for the CatalogEntry class.\n\nThis method builds upon the properties defined in the superclass, DomainResource, and appends additional specific properties for the CatalogEntry. Each property includes details such as its name, type, and whether it is a collection (list) or a single value. The properties enabled by this method include characteristics like additional identifiers, classifications, and references to related items.\n\nReturns:\n    list: A list of tuples, where each tuple represents a property element with the following format:\n        (name_in_instance, name_in_json, property_type, is_list, condition, is_required).\n\nDependencies:\n    - Requires the `codeableconcept`, `identifier`, `fhirdatetime`, `fhirreference`, and `period` modules/classes to define specific data types for the properties.\n    - Interacts with the superclass method `elementProperties` to inherit additional properties.\n\nThe property definitions include:\n- `additionalCharacteristic`: A list of additional characteristics as `CodeableConcept`.\n- `additionalClassification`: A list of additional classifications as `CodeableConcept`.\n- `additionalIdentifier`: A list of additional identifiers as `Identifier`.\n- `classification`: A list of classifications as `CodeableConcept`.\n- `identifier`: A list of unique identifiers as `Identifier`.\n- `lastUpdated`: A timestamp of the last update as `FHIRDateTime`.\n- `orderable`: A boolean indicating if the entry is orderable.\n- `referencedItem`: A reference to the item being defined as `FHIRReference`.\n- `relatedEntry`: A list of related catalog entries as `CatalogEntryRelatedEntry`.\n- `status`: A string representing the status of the catalog entry.\n- `type`: A type identifier as `CodeableConcept`.\n- `validTo`: A timestamp indicating the validity expiration as `FHIRDateTime`.\n- `validityPeriod`: A period within which the entry is valid as `Period`.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class CatalogEntry(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource object, a resource type which includes narrative, extensions, and contained resources as defined in FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource attributes. Defaults to None.\n- strict (bool, optional): If set to True (default), the constructor will raise a TypeError on invalid attribute values during initialization. If False, validation errors will be ignored.\n\nAttributes initialized:\n- contained (list): Represents inline Resources contained within this resource, defaulting to None.\n- extension (list): A list of additional content defined by implementations, defaulting to None.\n- modifierExtension (list): Extensions that are critical and should not be ignored, defaulting to None.\n- text (Narrative or None): A text summary of the resource for human interpretation, defaulting to None.\n\nThe constructor calls the parent class (resource.Resource) initializer to handle generic resource initialization as part of the FHIR framework. This interaction ensures that all valid properties from the base class are also initialized.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource object, a resource type which includes narrative, extensions, and contained resources as defined in FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource attributes. Defaults to None.\n- strict (bool, optional): If set to True (default), the constructor will raise a TypeError on invalid attribute values during initialization. If False, validation errors will be ignored.\n\nAttributes initialized:\n- contained (list): Represents inline Resources contained within this resource, defaulting to None.\n- extension (list): A list of additional content defined by implementations, defaulting to None.\n- modifierExtension (list): Extensions that are critical and should not be ignored, defaulting to None.\n- text (Narrative or None): A text summary of the resource for human interpretation, defaulting to None.\n\nThe constructor calls the parent class (resource.Resource) initializer to handle generic resource initialization as part of the FHIR framework. This interaction ensures that all valid properties from the base class are also initialized.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      },
      "DomainResource.elementProperties": {
        "code": "    def elementProperties(self):\n        \"\"\"Returns a list of element properties for the DomainResource class, extending the properties from its superclass Resource. This method constructs a list of tuples, each representing a property of the DomainResource instance. \n\nThe properties include:\n- \"contained\" (List of contained inline Resources, represented as `resource.Resource`).\n- \"extension\" (List of additional content defined by implementations, represented as `extension.Extension`).\n- \"modifierExtension\" (List of extensions that cannot be ignored, also represented as `extension.Extension`).\n- \"text\" (Text summary of the resource for human interpretation, represented as `narrative.Narrative`).\n\nThe method utilizes `super()` to call the `elementProperties` method of its superclass and appends the specific properties for DomainResource before returning the complete list. No parameters are taken, and the output is a list of tuples detailing the properties and their types.\"\"\"\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js",
        "docstring": "Returns a list of element properties for the DomainResource class, extending the properties from its superclass Resource. This method constructs a list of tuples, each representing a property of the DomainResource instance. \n\nThe properties include:\n- \"contained\" (List of contained inline Resources, represented as `resource.Resource`).\n- \"extension\" (List of additional content defined by implementations, represented as `extension.Extension`).\n- \"modifierExtension\" (List of extensions that cannot be ignored, also represented as `extension.Extension`).\n- \"text\" (Text summary of the resource for human interpretation, represented as `narrative.Narrative`).\n\nThe method utilizes `super()` to call the `elementProperties` method of its superclass and appends the specific properties for DomainResource before returning the complete list. No parameters are taken, and the output is a list of tuples detailing the properties and their types.",
        "signature": "def elementProperties(self):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {},
    "fhirclient/models/resource.py:Resource:__init__": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {},
    "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {},
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {},
    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {},
    "fhirclient/models/resource.py:Resource:elementProperties": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
  },
  "call_tree": {
    "tests/models/catalogentry_test.py:CatalogEntryTests:testCatalogEntry1": {
      "tests/models/catalogentry_test.py:CatalogEntryTests:instantiate_from": {
        "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/catalogentry_test.py:CatalogEntryTests:implCatalogEntry1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/catalogentry_test.py:CatalogEntryTests:instantiate_from": {
      "fhirclient/models/catalogentry.py:CatalogEntry:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/catalogentry.py:CatalogEntry:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-catalogentry_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 catalogentry.py\n        \u2502   \u251c\u2500\u2500 CatalogEntry.__init__\n        \u2502   \u2514\u2500\u2500 CatalogEntry.elementProperties\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u251c\u2500\u2500 DomainResource.__init__\n        \u2502   \u2514\u2500\u2500 DomainResource.elementProperties\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.__init__\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._matches_type\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase._with_json_dict\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.as_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.elementProperties\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.update_with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json\n        \u2502   \u251c\u2500\u2500 FHIRAbstractBase.with_json_and_owner\n        \u2502   \u2514\u2500\u2500 FHIRValidationError.FHIRValidationError\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u251c\u2500\u2500 FHIRAbstractResource.__init__\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u2514\u2500\u2500 resource.py\n            \u251c\u2500\u2500 Resource.__init__\n            \u2514\u2500\u2500 Resource.elementProperties\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test the correctness of FHIR CatalogEntry resources, ensuring compliance with the FHIR standard (version 4.0.1). It provides functionality for instantiating, loading, and verifying the structure and content of CatalogEntry resources as defined in example data files. This supports developers and implementers by allowing them to confirm that the CatalogEntry instances adhere to expected schemas, maintain data integrity, and include necessary metadata for interoperability. By automating the validation process, the module simplifies the development and testing of FHIR-compliant applications, reducing the risk of errors and enhancing reliability.\n\n## FILE 1: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.__init__\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractResource class, which represents a FHIR resource with server interaction capabilities.\n\nParameters:\n- jsondict (dict, optional): A dictionary representation of the resource, which should include a 'resourceType' field that matches the resource_type of the class. If the resourceType does not match, an Exception is raised.\n- strict (bool, optional): A flag indicating whether strict validation should be enforced (default is True).\n\nAttributes:\n- _server: Stores the server instance from which the resource was read. Initially set to None.\n\nThe constructor raises an Exception if the 'resourceType' in jsondict does not match the defined resource_type of the class, ensuring the integrity of the resource instantiation. It also calls the parent constructor from FHIRAbstractBase, passing along the jsondict and strict parameters.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the instance of the FHIRAbstractResource to a JSON-compatible dictionary. This method extends the base class's as_json method to include the resource type in the resulting dictionary. \n\nReturns:\n    dict: A JSON representation of the resource, including the 'resourceType' key set to the instance's resource type.\n\nDependencies:\n    - Calls the superclass method `as_json()` from FHIRAbstractBase to build the initial JSON structure.\n\nConstants:\n    - `self.resource_type`: This constant defines the type of the resource, crucial for distinguishing between different FHIR resource types when serialized to JSON.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.__init__\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRAbstractBase class. This constructor sets up internal attributes and updates the instance using a provided JSON dictionary, applying validation. The `jsondict` parameter allows for the initialization of the object from JSON data, while the `strict` parameter determines whether validation errors raise exceptions or are logged as warnings.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing data to initialize the object. If None, no initialization occurs.\n- strict (bool, default=True): When True, invalid data raises a FHIRValidationError; if False, errors are logged instead.\n\nAttributes:\n- _resolved (dict): A dictionary for caching resolved resources, initially set to None.\n- _owner (FHIRAbstractBase or None): Indicates the parent resource of this instance, initially set to None.\n\nSide Effects:\nIf `jsondict` is provided, the function updates the instance's properties according to its values, raising validation errors if `strict` is True or logging warnings if False.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._with_json_dict\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _with_json_dict(cls, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nInternal class method that creates an instance of the class from a provided JSON dictionary.\n\n:param jsondict: A JSON dictionary from which to instantiate the object.\n:raises TypeError: If `jsondict` is not a dictionary.\n:raises FHIRValidationError: If the instantiation fails due to validation errors.\n:returns: An instance of the class initialized with data from `jsondict`.\n\nThis method serves as a helper to construct instances of `FHIRAbstractBase` or its subclasses while ensuring that the input data is in the expected format (a dictionary). It interacts with the class's initialization process, delegating the actual instantiation to the class constructor (`cls(jsondict)`), which assumes that `jsondict` conforms to the expected structure as defined by `elementProperties()`.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase._matches_type\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def _matches_type(self, value, typ):\n  - DOCSTRING: \n```python\n\"\"\"\nChecks if a given value matches a specified data type.\n\n:param value: The value to check against the specified type.\n:param typ: The expected type to compare the value with.\n:returns: True if the value matches the type or is None; otherwise, False.\n\nThis method handles type checks for built-in types including int, float, str, and unicode (the latter being applicable for Python 2.7 as detected by the `sys.version_info` check). It is primarily used within the FHIRAbstractBase class to validate property types during JSON deserialization and serialization processes, ensuring that input data adheres to expected formats.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json_and_owner\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json_and_owner(cls, jsonobj, owner):\n  - DOCSTRING: \n```python\n\"\"\"\nInstantiates an element from a JSON dictionary while associating it with an owning parent resource. This method extends the functionality of `with_json()` by ensuring that the instantiated elements maintain a reference to their \"owner,\" which is crucial for resolving contained resources in the FHIR model.\n\nParameters:\n- jsonobj (dict or list): A decoded JSON dictionary or a list of dictionaries to create instances from.\n- owner (FHIRElement): The parent resource that owns the instantiated elements.\n\nReturns:\n- An instance or a list of instances created from the provided JSON data, with each instance's `_owner` attribute set to the given owner.\n\nRaises:\n- TypeError if the provided jsonobj is neither a dictionary nor a list of dictionaries.\n- FHIRValidationError if the instantiation from JSON fails.\n\nThis method utilizes the `with_json()` class method to perform the initial instantiation, which handles the actual creation of the instances. The result is that each instantiated element will have access to its context within the FHIR resource hierarchy, enhancing the ability to manage references and associated resources.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.elementProperties\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of tuples representing the properties that should be serialized for the FHIR element. Each tuple contains the following data: the internal property name, the corresponding JSON name, the expected type, a boolean indicating if the property is a list, an optional string for the \"of many\" type, and a boolean indicating whether the property is not optional. This method serves as a blueprint for subclasses to define their specific properties that can be serialized to JSON.\n\nThe returned list is essential for the correct serialization and validation of FHIR resources, as it allows the framework to dynamically generate the JSON representation of the resources based on their defined attributes.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def with_json(cls, jsonobj):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize an element of the FHIRAbstractBase class from a provided JSON dictionary or list of dictionaries. This method checks the type of the input; if it's a dictionary, it calls the internal method `_with_json_dict` to create an instance. If it's a list, it attempts to create instances for each dictionary within the list, handling any validation errors by prefixing their indices for easier debugging. Raises a `TypeError` if the input is neither a dictionary nor a list. \n\nParameters:\n- jsonobj (dict | list): A JSON dictionary or a list of dictionaries from which to instantiate the FHIR element(s).\n\nReturns:\n- An instance of the class or a list of instances created from the provided JSON data.\n\nRaises:\n- TypeError: If the input is neither a dict nor a list of dicts.\n- FHIRValidationError: If instantiation fails for an entry in a list, with errors prefixed to indicate the specific problem with that entry.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the instance of FHIRAbstractBase to a JSON-compatible dictionary by inspecting its properties defined in `elementProperties()`. This method ensures that required properties are not None (and that lists are not empty) and validates that non-None properties conform to the expected data types.\n\nRaises:\n- FHIRValidationError: If any properties are of the wrong type, if required properties are missing, or if there are superfluous keys in the dictionary.\n\nReturns:\n- dict: A validated dictionary representation of the instance, ready for JSON serialization.\n\nThe method uses:\n- `found`: A set to track which properties have been found and added to the serialized JSON.\n- `nonoptionals`: A set to record properties that are required but may not have been provided, triggering errors if they are missing in the serialization.\n\nThis method interacts closely with the element properties defined in `elementProperties()` and relies on the `_matches_type` method to validate data types accordingly. It also relies on the presence of an `as_json()` method in any nested objects for deep serialization.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRAbstractBase.update_with_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def update_with_json(self, jsondict):\n  - DOCSTRING: \n```python\n\"\"\"\nUpdates the instance attributes of the FHIRAbstractBase subclass with values from a given JSON dictionary.\n\n:param dict jsondict: A dictionary containing data used to update the instance. It must be in the format expected by the class and should only contain keys defined in the `elementProperties()` method.\n:raises FHIRValidationError: Raised if there are validation errors, such as if a non-dict type is provided, if required properties are missing, or if there are extra keys in the JSON that don't correspond to class properties.\n\nThe function loops through the properties defined in the `elementProperties()` method, validating and assigning values from the input dictionary to the instance's attributes. Key sets such as `valid` (to hold expected keys) and `found` (to track which properties were populated) are utilized throughout the validation process. The method also handles the references through `typ.with_json_and_owner()` for properties that are of type `FHIRElement` or its subclasses.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/resource.py\n\n- CLASS METHOD: Resource.elementProperties\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the list of element properties for the Resource instance.\n\nThis method extends the properties inherited from the superclass `FHIRAbstractResource` and defines specific attributes for the Resource class. The returned list includes tuples, where each tuple consists of the property name, the corresponding JSON key, the expected data type, whether it is required, any applicable values, and additional flags. The attributes defined include:\n- `id`: Logical identifier (str).\n- `implicitRules`: Set of rules under which the content was created (str).\n- `language`: Language of the resource content (str).\n- `meta`: Metadata about the resource (dict, represented as `meta.Meta`).\n\nReturns:\n    list: A list of tuples representing resource element properties.\n\nDependencies:\n    - `meta.Meta`: This is imported from the `meta` module and represents the structure for metadata associated with the resource.\n\"\"\"\n```\n\n- CLASS METHOD: Resource.__init__\n  - CLASS SIGNATURE: class Resource(fhirabstractresource.FHIRAbstractResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIR Resource object.\n\nThis constructor initializes the base properties of a FHIR resource, including `id`, `implicitRules`, `language`, and `meta`. If a `jsondict` is provided, it can be used to pre-fill these properties based on a JSON representation of the resource. The `strict` parameter determines whether invalid variables raise a TypeError; if set to False, validation errors are ignored.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties.\n- strict (bool, default=True): Whether to enforce strict property validation.\n\nAttributes:\n- id (str): Logical identifier for the resource.\n- implicitRules (str): Set of rules under which the resource content was created.\n- language (str): Language of the resource content.\n- meta (Meta, optional): Metadata information about the resource, should be represented as a dictionary in JSON.\n\nThis constructor also calls the constructor of the superclass `FHIRAbstractResource`, ensuring that any additional initialization from the parent class is performed.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/catalogentry.py\n\n- CLASS METHOD: CatalogEntry.__init__\n  - CLASS SIGNATURE: class CatalogEntry(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a CatalogEntry instance.\n\nThis constructor sets up all valid properties of the catalog entry, which serves as a wrapper providing context for items in a catalog. It allows for detailed metadata that includes classifications, identifiers, and references to other items. If a JSON dictionary is provided, it will initialize the class properties accordingly. Validation is enforced, and errors are raised unless strict initialization is turned off.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary containing initial values for the catalog entry properties.\n- strict (bool, optional): If True (default), raising a TypeError for invalid variables; if False, allows flexibility in initialization.\n\nAttributes:\n- additionalCharacteristic: Additional characteristics of the catalog entry (list of CodeableConcept).\n- additionalClassification: Additional classification information (list of CodeableConcept).\n- additionalIdentifier: Additional identifiers for the catalog item (list of Identifier).\n- classification: Primary classification of the item entry (list of CodeableConcept).\n- identifier: Unique identifier for the catalog item (list of Identifier).\n- lastUpdated: Timestamp for the last update (FHIRDateTime).\n- orderable: Indicates if the entry is orderable (bool).\n- referencedItem: Reference to the item being defined (FHIRReference).\n- relatedEntry: Related catalog entries (list of CatalogEntryRelatedEntry).\n- status: Current status of the catalog entry (string).\n- type: Type of item (CodeableConcept).\n- validTo: Date until which the entry is valid (FHIRDateTime).\n- validityPeriod: Expected period of activity for the entry (Period).\n\nDependencies include:\n- domainresource.DomainResource: Inherited for basic resource functionalities.\n- codeableconcept, fhirdatetime, fhirreference, identifier, and period modules for specific property types.\n\"\"\"\n```\n\n- CLASS METHOD: CatalogEntry.elementProperties\n  - CLASS SIGNATURE: class CatalogEntry(domainresource.DomainResource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve a list of property elements for the CatalogEntry class.\n\nThis method builds upon the properties defined in the superclass, DomainResource, and appends additional specific properties for the CatalogEntry. Each property includes details such as its name, type, and whether it is a collection (list) or a single value. The properties enabled by this method include characteristics like additional identifiers, classifications, and references to related items.\n\nReturns:\n    list: A list of tuples, where each tuple represents a property element with the following format:\n        (name_in_instance, name_in_json, property_type, is_list, condition, is_required).\n\nDependencies:\n    - Requires the `codeableconcept`, `identifier`, `fhirdatetime`, `fhirreference`, and `period` modules/classes to define specific data types for the properties.\n    - Interacts with the superclass method `elementProperties` to inherit additional properties.\n\nThe property definitions include:\n- `additionalCharacteristic`: A list of additional characteristics as `CodeableConcept`.\n- `additionalClassification`: A list of additional classifications as `CodeableConcept`.\n- `additionalIdentifier`: A list of additional identifiers as `Identifier`.\n- `classification`: A list of classifications as `CodeableConcept`.\n- `identifier`: A list of unique identifiers as `Identifier`.\n- `lastUpdated`: A timestamp of the last update as `FHIRDateTime`.\n- `orderable`: A boolean indicating if the entry is orderable.\n- `referencedItem`: A reference to the item being defined as `FHIRReference`.\n- `relatedEntry`: A list of related catalog entries as `CatalogEntryRelatedEntry`.\n- `status`: A string representing the status of the catalog entry.\n- `type`: A type identifier as `CodeableConcept`.\n- `validTo`: A timestamp indicating the validity expiration as `FHIRDateTime`.\n- `validityPeriod`: A period within which the entry is valid as `Period`.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.elementProperties\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def elementProperties(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a list of element properties for the DomainResource class, extending the properties from its superclass Resource. This method constructs a list of tuples, each representing a property of the DomainResource instance. \n\nThe properties include:\n- \"contained\" (List of contained inline Resources, represented as `resource.Resource`).\n- \"extension\" (List of additional content defined by implementations, represented as `extension.Extension`).\n- \"modifierExtension\" (List of extensions that cannot be ignored, also represented as `extension.Extension`).\n- \"text\" (Text summary of the resource for human interpretation, represented as `narrative.Narrative`).\n\nThe method utilizes `super()` to call the `elementProperties` method of its superclass and appends the specific properties for DomainResource before returning the complete list. No parameters are taken, and the output is a list of tuples detailing the properties and their types.\n\"\"\"\n```\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource object, a resource type which includes narrative, extensions, and contained resources as defined in FHIR specifications.\n\nParameters:\n- jsondict (dict, optional): A dictionary containing JSON data to initialize the resource attributes. Defaults to None.\n- strict (bool, optional): If set to True (default), the constructor will raise a TypeError on invalid attribute values during initialization. If False, validation errors will be ignored.\n\nAttributes initialized:\n- contained (list): Represents inline Resources contained within this resource, defaulting to None.\n- extension (list): A list of additional content defined by implementations, defaulting to None.\n- modifierExtension (list): Extensions that are critical and should not be ignored, defaulting to None.\n- text (Narrative or None): A text summary of the resource for human interpretation, defaulting to None.\n\nThe constructor calls the parent class (resource.Resource) initializer to handle generic resource initialization as part of the FHIR framework. This interaction ensures that all valid properties from the base class are also initialized.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/resource.py": "from . import fhirabstractresource\n\nclass Resource(fhirabstractresource.FHIRAbstractResource):\n    \"\"\" Base Resource.\n    \n    This is the base resource type for everything.\n    \"\"\"\n    resource_type = 'Resource'\nfrom . import meta",
    "fhirclient/models/catalogentry.py": "from . import domainresource\n\nclass CatalogEntry(domainresource.DomainResource):\n    \"\"\" An entry in a catalog.\n    \n    Catalog entries are wrappers that contextualize items included in a\n    catalog.\n    \"\"\"\n    resource_type = 'CatalogEntry'\nfrom . import backboneelement\n\nclass CatalogEntryRelatedEntry(backboneelement.BackboneElement):\n    \"\"\" An item that this catalog entry is related to.\n    \n    Used for example, to point to a substance, or to a device used to\n    administer a medication.\n    \"\"\"\n    resource_type = 'CatalogEntryRelatedEntry'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.item = None\n        ' The reference to the related item.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.relationtype = None\n        ' triggers | is-replaced-by.\\n        Type `str`. '\n        super(CatalogEntryRelatedEntry, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(CatalogEntryRelatedEntry, self).elementProperties()\n        js.extend([('item', 'item', fhirreference.FHIRReference, False, None, True), ('relationtype', 'relationtype', str, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\nfrom . import extension\nfrom . import narrative"
  }
}