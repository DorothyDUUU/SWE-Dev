{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-searchparameter_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/searchparameter_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import searchparameter\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass SearchParameterTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"SearchParameter\", js[\"resourceType\"])\n        return searchparameter.SearchParameter(js)\n    \n    def testSearchParameter1(self):\n        inst = self.instantiate_from(\"searchparameter-example-reference.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a SearchParameter instance\")\n        self.implSearchParameter1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"SearchParameter\", js[\"resourceType\"])\n        inst2 = searchparameter.SearchParameter(js)\n        self.implSearchParameter1(inst2)\n    \n    def implSearchParameter1(self, inst):\n        self.assertEqual(inst.base[0], \"Condition\")\n        self.assertEqual(inst.chain[0], \"name\")\n        self.assertEqual(inst.chain[1], \"identifier\")\n        self.assertEqual(inst.code, \"subject\")\n        self.assertEqual(inst.contact[0].name, \"[string]\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2013-10-23\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2013-10-23\")\n        self.assertEqual(inst.description, \"Search by condition subject\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.expression, \"Condition.subject\")\n        self.assertEqual(inst.id, \"example-reference\")\n        self.assertEqual(inst.modifier[0], \"missing\")\n        self.assertEqual(inst.name, \"Example Search Parameter\")\n        self.assertEqual(inst.publisher, \"Health Level Seven International (FHIR Infrastructure)\")\n        self.assertEqual(inst.purpose, \"Need to search Condition by subject\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.target[0], \"Organization\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"reference\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/SearchParameter/example-reference\")\n        self.assertEqual(inst.xpathUsage, \"normal\")\n    \n    def testSearchParameter2(self):\n        inst = self.instantiate_from(\"searchparameter-example-extension.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a SearchParameter instance\")\n        self.implSearchParameter2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"SearchParameter\", js[\"resourceType\"])\n        inst2 = searchparameter.SearchParameter(js)\n        self.implSearchParameter2(inst2)\n    \n    def implSearchParameter2(self, inst):\n        self.assertEqual(inst.base[0], \"Patient\")\n        self.assertEqual(inst.code, \"part-agree\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.description, \"Search by url for a participation agreement, which is stored in a DocumentReference\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.expression, \"DocumentReference.extension('http://example.org/fhir/StructureDefinition/participation-agreement')\")\n        self.assertEqual(inst.id, \"example-extension\")\n        self.assertEqual(inst.name, \"Example Search Parameter on an extension\")\n        self.assertEqual(inst.publisher, \"Health Level Seven International (FHIR Infrastructure)\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.target[0], \"DocumentReference\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"reference\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/SearchParameter/example-extension\")\n        self.assertEqual(inst.xpath, \"f:DocumentReference/f:extension[@url='http://example.org/fhir/StructureDefinition/participation-agreement']\")\n        self.assertEqual(inst.xpathUsage, \"normal\")\n    \n    def testSearchParameter3(self):\n        inst = self.instantiate_from(\"searchparameter-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a SearchParameter instance\")\n        self.implSearchParameter3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"SearchParameter\", js[\"resourceType\"])\n        inst2 = searchparameter.SearchParameter(js)\n        self.implSearchParameter3(inst2)\n    \n    def implSearchParameter3(self, inst):\n        self.assertEqual(inst.base[0], \"Resource\")\n        self.assertEqual(inst.code, \"_id\")\n        self.assertEqual(inst.comparator[0], \"eq\")\n        self.assertEqual(inst.contact[0].name, \"[string]\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://hl7.org/fhir\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2013-10-23\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2013-10-23\")\n        self.assertEqual(inst.derivedFrom, \"http://hl7.org/fhir/SearchParameter/Resource-id\")\n        self.assertEqual(inst.description, \"Search by resource identifier - e.g. same as the read interaction, but can return included resources\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.expression, \"id\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].display, \"United States of America (the)\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.name, \"ID-SEARCH-PARAMETER\")\n        self.assertEqual(inst.publisher, \"Health Level Seven International (FHIR Infrastructure)\")\n        self.assertEqual(inst.purpose, \"Need to search by identifier for various infrastructural cases - mainly retrieving packages, and matching as part of a chain\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.type, \"token\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/SearchParameter/example\")\n        self.assertEqual(inst.useContext[0].code.code, \"focus\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"positive\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://terminology.hl7.org/CodeSystem/variant-state\")\n        self.assertEqual(inst.version, \"1\")\n        self.assertEqual(inst.xpath, \"f:*/f:id\")\n        self.assertEqual(inst.xpathUsage, \"normal\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/searchparameter.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/SearchParameter).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass SearchParameter(domainresource.DomainResource):\n    \"\"\" Search parameter for a resource.\n    \n    A search parameter that defines a named search item that can be used to\n    search/filter on a resource.\n    \"\"\"\n    \n    resource_type = \"SearchParameter\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.base = None\n        \"\"\" The resource type(s) this search parameter applies to.\n        List of `str` items. \"\"\"\n        \n        self.chain = None\n        \"\"\" Chained names supported.\n        List of `str` items. \"\"\"\n        \n        self.code = None\n        \"\"\" Code used in URL.\n        Type `str`. \"\"\"\n        \n        self.comparator = None\n        \"\"\" eq | ne | gt | lt | ge | le | sa | eb | ap.\n        List of `str` items. \"\"\"\n        \n        self.component = None\n        \"\"\" For Composite resources to define the parts.\n        List of `SearchParameterComponent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.derivedFrom = None\n        \"\"\" Original definition for the search parameter.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the search parameter.\n        Type `str`. \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.expression = None\n        \"\"\" FHIRPath expression that extracts the values.\n        Type `str`. \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for search parameter (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifier = None\n        \"\"\" missing | exact | contains | not | text | in | not-in | below |\n        above | type | identifier | ofType.\n        List of `str` items. \"\"\"\n        \n        self.multipleAnd = None\n        \"\"\" Allow multiple parameters (and).\n        Type `bool`. \"\"\"\n        \n        self.multipleOr = None\n        \"\"\" Allow multiple values per parameter (or).\n        Type `bool`. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this search parameter (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this search parameter is defined.\n        Type `str`. \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.target = None\n        \"\"\" Types of resource (if a resource reference).\n        List of `str` items. \"\"\"\n        \n        self.type = None\n        \"\"\" number | date | string | token | reference | composite | quantity |\n        uri | special.\n        Type `str`. \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this search parameter, represented as a\n        URI (globally unique).\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the search parameter.\n        Type `str`. \"\"\"\n        \n        self.xpath = None\n        \"\"\" XPath that extracts the values.\n        Type `str`. \"\"\"\n        \n        self.xpathUsage = None\n        \"\"\" normal | phonetic | nearby | distance | other.\n        Type `str`. \"\"\"\n        \n        super(SearchParameter, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SearchParameter, self).elementProperties()\n        js.extend([\n            (\"base\", \"base\", str, True, None, True),\n            (\"chain\", \"chain\", str, True, None, False),\n            (\"code\", \"code\", str, False, None, True),\n            (\"comparator\", \"comparator\", str, True, None, False),\n            (\"component\", \"component\", SearchParameterComponent, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"derivedFrom\", \"derivedFrom\", str, False, None, False),\n            (\"description\", \"description\", str, False, None, True),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"expression\", \"expression\", str, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"modifier\", \"modifier\", str, True, None, False),\n            (\"multipleAnd\", \"multipleAnd\", bool, False, None, False),\n            (\"multipleOr\", \"multipleOr\", bool, False, None, False),\n            (\"name\", \"name\", str, False, None, True),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"target\", \"target\", str, True, None, False),\n            (\"type\", \"type\", str, False, None, True),\n            (\"url\", \"url\", str, False, None, True),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n            (\"xpath\", \"xpath\", str, False, None, False),\n            (\"xpathUsage\", \"xpathUsage\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass SearchParameterComponent(backboneelement.BackboneElement):\n    \"\"\" For Composite resources to define the parts.\n    \n    Used to define the parts of a composite search parameter.\n    \"\"\"\n    \n    resource_type = \"SearchParameterComponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.definition = None\n        \"\"\" Defines how the part works.\n        Type `str`. \"\"\"\n        \n        self.expression = None\n        \"\"\" Subexpression relative to main expression.\n        Type `str`. \"\"\"\n        \n        super(SearchParameterComponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(SearchParameterComponent, self).elementProperties()\n        js.extend([\n            (\"definition\", \"definition\", str, False, None, True),\n            (\"expression\", \"expression\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext\n",
    "fhirclient/models/fhirabstractbase.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for all FHIR elements.\n\nimport sys\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n    \n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = \"\\n  \".join([str(e).replace(\"\\n\", \"\\n  \") for e in errors])\n        message = \"{}:\\n  {}\".format(path or \"{root}\", msgs)\n        \n        super(FHIRValidationError, self).__init__(message)\n        \n        self.errors = errors\n        \"\"\" A list of validation errors encountered. Typically contains\n        TypeError, KeyError, possibly AttributeError and others. \"\"\"\n        \n        self.path = path\n        \"\"\" The path on the object where the errors occurred. \"\"\"\n    \n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self._resolved = None\n        \"\"\" Dictionary of resolved resources. \"\"\"\n        \n        self._owner = None\n        \"\"\" Points to the parent resource, if there is one. \"\"\"\n        \n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n    \n    \n    # MARK: Instantiation from JSON\n    \n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        \n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        \n        raise TypeError(\"`with_json()` on {} only takes dict or list of dict, but you provided {}\"\n            .format(cls, type(jsonobj)))\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError(\"Can only use `_with_json_dict()` on {} with a dictionary, got {}\"\n                .format(type(self), type(jsondict)))\n        return cls(jsondict)\n    \n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        \n        return instance\n    \n    \n    # MARK: (De)Serialization\n    \n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n    \n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        \n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError(\"Non-dict type {} fed to `update_with_json` on {}\"\n                .format(type(jsondict), type(self)))\n        \n        # loop all registered properties and instantiate\n        errs = []\n        valid = set(['resourceType'])   # used to also contain `fhir_comments` until STU-3\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            \n            # bring the value in shape\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            \n            # got a value, test if it is of required type and assign\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError(\"Wrong type {} for list property \\\"{}\\\" on {}, expecting a list of {}\"\n                            .format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                \n                if testval is not None and not self._matches_type(testval, typ):\n                    err = TypeError(\"Wrong type {} for property \\\"{}\\\" on {}, expecting {}\"\n                        .format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                \n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            \n            # not optional and missing, report (we clean `of_many` later on)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            # TODO: look at `_name` only if this is a primitive!\n            _jsname = '_'+jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            \n            # report errors\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # were there missing non-optional entries?\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError(\"Non-optional property \\\"{}\\\" on {} is missing\"\n                    .format(miss, self)))\n        \n        # were there superfluous dictionary keys?\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError(\"Superfluous entry \\\"{}\\\" in data for {}\"\n                    .format(supflu, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n    \n    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js\n    \n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return (isinstance(value, int) or isinstance(value, float))\n        if (sys.version_info < (3, 0)) and (str == typ or unicode == typ):\n            return (isinstance(value, str) or isinstance(value, unicode))\n        return False\n    \n    \n    # MARK: Handling References\n    \n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not hasattr(owner, \"contained\"):\n            owner = owner._owner\n        return owner\n    \n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and not 'Bundle' == owner.resource_type:\n            owner = owner._owner\n        return owner\n    \n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n    \n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}\n\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n",
    "fhirclient/models/domainresource.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/DomainResource).\n# 2024, SMART Health IT.\n\n\nfrom . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    \n    resource_type = \"DomainResource\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([\n            (\"contained\", \"contained\", resource.Resource, True, None, False),\n            (\"extension\", \"extension\", extension.Extension, True, None, False),\n            (\"modifierExtension\", \"modifierExtension\", extension.Extension, True, None, False),\n            (\"text\", \"text\", narrative.Narrative, False, None, False),\n        ])\n        return js\n\n\nfrom . import extension\nfrom . import narrative\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance for handling FHIR date representations.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representing a date in FHIR format (ISO 8601), or None. \n  If provided, the string must match a specific regex format defined by _REGEX. If the string\n  represents a partial date, it will be expanded to the earliest possible date.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not conform to the expected date format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the parsed date representation.\n- origval (Union[str, None]): Stores the original input JSON value for reference.\n\nConstants:\n- _REGEX: A compiled regular expression from the class, used to validate the format of the input date string.\n- _FIELD: A constant string used internally to synchronize the `date` attribute with its storage when setting values.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance for handling FHIR date representations.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representing a date in FHIR format (ISO 8601), or None. \n  If provided, the string must match a specific regex format defined by _REGEX. If the string\n  represents a partial date, it will be expanded to the earliest possible date.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not conform to the expected date format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the parsed date representation.\n- origval (Union[str, None]): Stores the original input JSON value for reference.\n\nConstants:\n- _REGEX: A compiled regular expression from the class, used to validate the format of the input date string.\n- _FIELD: A constant string used internally to synchronize the `date` attribute with its storage when setting values.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.__setattr__": {
        "code": "    def __setattr__(self, prop, value):\n        \"\"\"Sets attributes for the FHIRDate instance. If the attribute being set is either 'date' or the private _FIELD, the original value (origval) is cleared, and both the date and _FIELD are synchronized to the new value. For all other attributes, the default behavior to set the attribute is invoked.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or _FIELD is set, origval is set to None to maintain data integrity.\n\nConstants:\n- _FIELD (str): A private constant indicating the name of the field ('date') used for synchronization between date and the specified property.\"\"\"\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
        "docstring": "Sets attributes for the FHIRDate instance. If the attribute being set is either 'date' or the private _FIELD, the original value (origval) is cleared, and both the date and _FIELD are synchronized to the new value. For all other attributes, the default behavior to set the attribute is invoked.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or _FIELD is set, origval is set to None to maintain data integrity.\n\nConstants:\n- _FIELD (str): A private constant indicating the name of the field ('date') used for synchronization between date and the specified property.",
        "signature": "def __setattr__(self, prop, value):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method prioritizes returning `self.origval`, which is the original value provided during initialization, and if that is `None`, it defaults to the `isostring` property, which formats the date in ISO 8601 format. This functionality is critical for maintaining the fidelity of the original data while also providing a standard format representation.\n\nAttributes:\n- `self.origval`: Stores the original JSON string input during initialization. If this is not `None`, it will be returned.\n- `self.isostring`: Returns an ISO 8601 formatted string version of the date, produced by the `isostring` property, ensuring compatibility with standard date representations.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method prioritizes returning `self.origval`, which is the original value provided during initialization, and if that is `None`, it defaults to the `isostring` property, which formats the date in ISO 8601 format. This functionality is critical for maintaining the fidelity of the original data while also providing a standard format representation.\n\nAttributes:\n- `self.origval`: Stores the original JSON string input during initialization. If this is not `None`, it will be returned.\n- `self.isostring`: Returns an ISO 8601 formatted string version of the date, produced by the `isostring` property, ensuring compatibility with standard date representations.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/searchparameter.py": {
      "SearchParameter.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a SearchParameter instance, used to define a named search item for FHIR resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It should contain valid keys corresponding to the attributes of the SearchParameter class.\n- strict (bool, optional): If set to True (default), raises a TypeError on invalid variables during initialization.\n\nAttributes:\n- base: Defines the resource type(s) applicable for this search parameter.\n- chain: Lists the supported chained names.\n- code: The code utilized in the URL for the search parameter.\n- comparator: Enumerates allowable comparison operators (e.g., eq, ne).\n- component: Specifies components of composite resources, if applicable.\n- contact: Contains contact details for the publisher.\n- date: The last modification date.\n- derivedFrom: Identifies the original definition for this search parameter.\n- description: A natural language description.\n- experimental: Indicates if the parameter is for testing purposes.\n- expression: A FHIRPath expression for value extraction.\n- jurisdiction: Intended jurisdiction, if applicable.\n- modifier: Lists the supported modifiers for the parameter.\n- multipleAnd: Indicates if multiple parameters (AND) are allowed.\n- multipleOr: Indicates if multiple values per parameter (OR) are allowed.\n- name: The computer-friendly name for this search parameter.\n- publisher: Name of the publisher (individual or organization).\n- purpose: Clarifies why the parameter is defined.\n- status: Indicates the current status (draft, active, retired, unknown).\n- target: Specifies resource types if a resource reference.\n- type: Describes the type of search parameter (e.g., number, date, string).\n- url: A globally unique canonical identifier for the search parameter.\n- useContext: Context intended to support, if applicable.\n- version: The business version of the search parameter.\n- xpath: An XPath expression for value extraction.\n- xpathUsage: Defines the method of XPath value extraction (normal, phonetic, etc.).\n\nThis initialization method also invokes the constructor of the superclass `DomainResource`, passing the `jsondict` and `strict` parameters for further validation.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.base = None\n        ' The resource type(s) this search parameter applies to.\\n        List of `str` items. '\n        self.chain = None\n        ' Chained names supported.\\n        List of `str` items. '\n        self.code = None\n        ' Code used in URL.\\n        Type `str`. '\n        self.comparator = None\n        ' eq | ne | gt | lt | ge | le | sa | eb | ap.\\n        List of `str` items. '\n        self.component = None\n        ' For Composite resources to define the parts.\\n        List of `SearchParameterComponent` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.derivedFrom = None\n        ' Original definition for the search parameter.\\n        Type `str`. '\n        self.description = None\n        ' Natural language description of the search parameter.\\n        Type `str`. '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.expression = None\n        ' FHIRPath expression that extracts the values.\\n        Type `str`. '\n        self.jurisdiction = None\n        ' Intended jurisdiction for search parameter (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.modifier = None\n        ' missing | exact | contains | not | text | in | not-in | below |\\n        above | type | identifier | ofType.\\n        List of `str` items. '\n        self.multipleAnd = None\n        ' Allow multiple parameters (and).\\n        Type `bool`. '\n        self.multipleOr = None\n        ' Allow multiple values per parameter (or).\\n        Type `bool`. '\n        self.name = None\n        ' Name for this search parameter (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this search parameter is defined.\\n        Type `str`. '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.target = None\n        ' Types of resource (if a resource reference).\\n        List of `str` items. '\n        self.type = None\n        ' number | date | string | token | reference | composite | quantity |\\n        uri | special.\\n        Type `str`. '\n        self.url = None\n        ' Canonical identifier for this search parameter, represented as a\\n        URI (globally unique).\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the search parameter.\\n        Type `str`. '\n        self.xpath = None\n        ' XPath that extracts the values.\\n        Type `str`. '\n        self.xpathUsage = None\n        ' normal | phonetic | nearby | distance | other.\\n        Type `str`. '\n        super(SearchParameter, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a SearchParameter instance, used to define a named search item for FHIR resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It should contain valid keys corresponding to the attributes of the SearchParameter class.\n- strict (bool, optional): If set to True (default), raises a TypeError on invalid variables during initialization.\n\nAttributes:\n- base: Defines the resource type(s) applicable for this search parameter.\n- chain: Lists the supported chained names.\n- code: The code utilized in the URL for the search parameter.\n- comparator: Enumerates allowable comparison operators (e.g., eq, ne).\n- component: Specifies components of composite resources, if applicable.\n- contact: Contains contact details for the publisher.\n- date: The last modification date.\n- derivedFrom: Identifies the original definition for this search parameter.\n- description: A natural language description.\n- experimental: Indicates if the parameter is for testing purposes.\n- expression: A FHIRPath expression for value extraction.\n- jurisdiction: Intended jurisdiction, if applicable.\n- modifier: Lists the supported modifiers for the parameter.\n- multipleAnd: Indicates if multiple parameters (AND) are allowed.\n- multipleOr: Indicates if multiple values per parameter (OR) are allowed.\n- name: The computer-friendly name for this search parameter.\n- publisher: Name of the publisher (individual or organization).\n- purpose: Clarifies why the parameter is defined.\n- status: Indicates the current status (draft, active, retired, unknown).\n- target: Specifies resource types if a resource reference.\n- type: Describes the type of search parameter (e.g., number, date, string).\n- url: A globally unique canonical identifier for the search parameter.\n- useContext: Context intended to support, if applicable.\n- version: The business version of the search parameter.\n- xpath: An XPath expression for value extraction.\n- xpathUsage: Defines the method of XPath value extraction (normal, phonetic, etc.).\n\nThis initialization method also invokes the constructor of the superclass `DomainResource`, passing the `jsondict` and `strict` parameters for further validation.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class SearchParameter(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirabstractbase.py": {
      "FHIRAbstractBase.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Serializes the current instance to a JSON-compliant dictionary by inspecting its registered properties defined in `elementProperties()`. The method ensures that required properties are not None (and lists are not empty) and validates that values are of the correct types before serialization. \n\nIf any errors occur during the serialization process, such as type mismatches or missing non-optional properties, a `FHIRValidationError` is raised with detailed information about the issues encountered.\n\nReturns:\n    dict: A validated dictionary that can be serialized to JSON.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, or if required properties are missing or empty.\n\nDependencies:\n    - `elementProperties()`: Defines the properties to be serialized and their requirements (e.g., types, whether they are lists, and whether they are optional).\n    - `_matches_type(value, typ)`: Validates the type of values being serialized.\n    - `FHIRValidationError`: Used for error reporting during validation.\n\nConstants:\n    - `found`: A set that tracks which properties have been included in the serialized JSON.\n    - `nonoptionals`: A set that collects names of non-optional properties that must be present in the serialized output.\"\"\"\n        ' Serializes to JSON by inspecting `elementProperties()` and creating\\n        a JSON dictionary of all registered properties. Checks:\\n        \\n        - whether required properties are not None (and lists not empty)\\n        - whether not-None properties are of the correct type\\n        \\n        :raises: FHIRValidationError if properties have the wrong type or if\\n            required properties are empty\\n        :returns: A validated dict object that can be JSON serialized\\n        '\n        js = {}\n        errs = []\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            if is_list:\n                if not isinstance(value, list):\n                    err = TypeError('Expecting property \"{}\" on {} to be list, but is {}'.format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            elif not self._matches_type(value, typ):\n                err = TypeError('Expecting property \"{}\" on {} to be {}, but is {}'.format(name, type(self), typ, type(value)))\n            else:\n                try:\n                    found.add(of_many or jsname)\n                    js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                except FHIRValidationError as e:\n                    err = e.prefixed(name)\n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError('Property \"{}\" on {} is not optional, you must provide a value for it'.format(nonop, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
        "docstring": "Serializes the current instance to a JSON-compliant dictionary by inspecting its registered properties defined in `elementProperties()`. The method ensures that required properties are not None (and lists are not empty) and validates that values are of the correct types before serialization. \n\nIf any errors occur during the serialization process, such as type mismatches or missing non-optional properties, a `FHIRValidationError` is raised with detailed information about the issues encountered.\n\nReturns:\n    dict: A validated dictionary that can be serialized to JSON.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, or if required properties are missing or empty.\n\nDependencies:\n    - `elementProperties()`: Defines the properties to be serialized and their requirements (e.g., types, whether they are lists, and whether they are optional).\n    - `_matches_type(value, typ)`: Validates the type of values being serialized.\n    - `FHIRValidationError`: Used for error reporting during validation.\n\nConstants:\n    - `found`: A set that tracks which properties have been included in the serialized JSON.\n    - `nonoptionals`: A set that collects names of non-optional properties that must be present in the serialized output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractBase(object):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDateTime instance.\n\nThis constructor initializes a new FHIRDateTime object, setting up the `datetime` attribute to hold a Python `datetime.datetime` object. If provided, the `jsonval` parameter is passed to the superclass (FHIRDate) for further processing.\n\nParameters:\n- `jsonval` (Union[str, None]): An optional string representation of a datetime in FHIR format. If None, the instance will initialize with a None `datetime`.\n\nAttributes:\n- `datetime` (Union[datetime.datetime, None]): Holds the Python representation of the datetime, either as a naive or aware datetime object.\n\nDependencies:\n- Uses the FHIRDate superclass to handle the FHIR JSON string processing. The superclass's constructor is called to ensure that the base functionality for FHIRDate is properly initialized.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a FHIRDateTime instance.\n\nThis constructor initializes a new FHIRDateTime object, setting up the `datetime` attribute to hold a Python `datetime.datetime` object. If provided, the `jsonval` parameter is passed to the superclass (FHIRDate) for further processing.\n\nParameters:\n- `jsonval` (Union[str, None]): An optional string representation of a datetime in FHIR format. If None, the instance will initialize with a None `datetime`.\n\nAttributes:\n- `datetime` (Union[datetime.datetime, None]): Holds the Python representation of the datetime, either as a naive or aware datetime object.\n\nDependencies:\n- Uses the FHIRDate superclass to handle the FHIR JSON string processing. The superclass's constructor is called to ensure that the base functionality for FHIRDate is properly initialized.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Convert the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the superclass to include a 'resourceType' key in the output dictionary, which indicates the type of the FHIR resource represented by the instance. \n\nParameters:\n- None\n\nReturns:\n- dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' set to the class's `resource_type` attribute, which defaults to 'FHIRAbstractResource'.\n\nDependencies:\n- Relies on the `super()` function to call the parent class's `as_json` method, ensuring that all attributes of the parent class are included in the output.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Convert the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the superclass to include a 'resourceType' key in the output dictionary, which indicates the type of the FHIR resource represented by the instance. \n\nParameters:\n- None\n\nReturns:\n- dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' set to the class's `resource_type` attribute, which defaults to 'FHIRAbstractResource'.\n\nDependencies:\n- Relies on the `super()` function to call the parent class's `as_json` method, ensuring that all attributes of the parent class are included in the output.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    },
    "fhirclient/models/domainresource.py": {
      "DomainResource.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties. If provided, the content will be used to set up the DomainResource.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError; if False, it will allow for non-strict parsing.\n\nAttributes:\n- contained (List[Resource]): Inline resources contained within the DomainResource, initialized to None.\n- extension (List[Extension]): Additional content defined by implementations, initialized to None.\n- modifierExtension (List[Extension]): Extensions that cannot be ignored, initialized to None.\n- text (Narrative): A text summary of the resource for human interpretation, initialized to None.\n\nThe initialization process calls the superclass constructor (resource.Resource) with the provided jsondict and strict parameters to ensure proper baseline setup for all resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.contained = None\n        ' Contained, inline Resources.\\n        List of `Resource` items (represented as `dict` in JSON). '\n        self.extension = None\n        ' Additional content defined by implementations.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.modifierExtension = None\n        ' Extensions that cannot be ignored.\\n        List of `Extension` items (represented as `dict` in JSON). '\n        self.text = None\n        ' Text summary of the resource, for human interpretation.\\n        Type `Narrative` (represented as `dict` in JSON). '\n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties. If provided, the content will be used to set up the DomainResource.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError; if False, it will allow for non-strict parsing.\n\nAttributes:\n- contained (List[Resource]): Inline resources contained within the DomainResource, initialized to None.\n- extension (List[Extension]): Additional content defined by implementations, initialized to None.\n- modifierExtension (List[Extension]): Extensions that cannot be ignored, initialized to None.\n- text (Narrative): A text summary of the resource for human interpretation, initialized to None.\n\nThe initialization process calls the superclass constructor (resource.Resource) with the provided jsondict and strict parameters to ensure proper baseline setup for all resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class DomainResource(resource.Resource):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/searchparameter.py:SearchParameter:__init__": {},
    "fhirclient/models/domainresource.py:DomainResource:__init__": {
      "fhirclient/models/resource.py": {
        "Resource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.id = None\n        \"\"\" Logical id of this artifact.\n        Type `str`. \"\"\"\n        \n        self.implicitRules = None\n        \"\"\" A set of rules under which this content was created.\n        Type `str`. \"\"\"\n        \n        self.language = None\n        \"\"\" Language of the resource content.\n        Type `str`. \"\"\"\n        \n        self.meta = None\n        \"\"\" Metadata about the resource.\n        Type `Meta` (represented as `dict` in JSON). \"\"\"\n        \n        super(Resource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class Resource(fhirabstractresource.FHIRAbstractResource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {},
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdatetime.py": {
        "FHIRDateTime._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDateTime(FHIRDate):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {},
    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase._matches_type": {
          "code": "    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False",
          "docstring": "",
          "signature": "def _matches_type(self, value, typ):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      },
      "fhirclient/models/searchparameter.py": {
        "SearchParameter.elementProperties": {
          "code": "    def elementProperties(self):\n        js = super(SearchParameter, self).elementProperties()\n        js.extend([('base', 'base', str, True, None, True), ('chain', 'chain', str, True, None, False), ('code', 'code', str, False, None, True), ('comparator', 'comparator', str, True, None, False), ('component', 'component', SearchParameterComponent, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('derivedFrom', 'derivedFrom', str, False, None, False), ('description', 'description', str, False, None, True), ('experimental', 'experimental', bool, False, None, False), ('expression', 'expression', str, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('modifier', 'modifier', str, True, None, False), ('multipleAnd', 'multipleAnd', bool, False, None, False), ('multipleOr', 'multipleOr', bool, False, None, False), ('name', 'name', str, False, None, True), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('target', 'target', str, True, None, False), ('type', 'type', str, False, None, True), ('url', 'url', str, False, None, True), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False), ('xpath', 'xpath', str, False, None, False), ('xpathUsage', 'xpathUsage', str, False, None, False)])\n        return js",
          "docstring": "",
          "signature": "def elementProperties(self):",
          "type": "Method",
          "class_signature": "class SearchParameter(domainresource.DomainResource):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/searchparameter_test.py:SearchParameterTests:testSearchParameter1": {
      "tests/models/searchparameter_test.py:SearchParameterTests:instantiate_from": {
        "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/searchparameter_test.py:SearchParameterTests:implSearchParameter1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/searchparameter_test.py:SearchParameterTests:instantiate_from": {
      "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/searchparameter_test.py:SearchParameterTests:testSearchParameter2": {
      "tests/models/searchparameter_test.py:SearchParameterTests:instantiate_from": {
        "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/searchparameter_test.py:SearchParameterTests:implSearchParameter2": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/searchparameter_test.py:SearchParameterTests:testSearchParameter3": {
      "tests/models/searchparameter_test.py:SearchParameterTests:instantiate_from": {
        "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/searchparameter_test.py:SearchParameterTests:implSearchParameter3": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/searchparameter.py:SearchParameter:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/searchparameter.py:SearchParameter:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-searchparameter_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 domainresource.py\n        \u2502   \u2514\u2500\u2500 DomainResource.__init__\n        \u251c\u2500\u2500 fhirabstractbase.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractBase.as_json\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u251c\u2500\u2500 FHIRDate.__setattr__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 searchparameter.py\n            \u2514\u2500\u2500 SearchParameter.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and test the functionality of FHIR (Fast Healthcare Interoperability Resources) SearchParameter resources, ensuring compliance with the FHIR standard (version 4.0.1). It provides capabilities to load, instantiate, and verify SearchParameter examples, evaluate their attributes such as base resources, code, expression, and metadata, and test their alignment with expected use cases. By doing so, the module facilitates the creation and validation of searchable parameters in FHIR-based healthcare systems, enabling efficient querying and retrieval of structured health information. It addresses the need for standardized and interoperable search mechanisms, supporting developers in building reliable FHIR-compliant implementations for various healthcare applications.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance for handling FHIR date representations.\n\nParameters:\n- jsonval (Union[str, None], optional): A string representing a date in FHIR format (ISO 8601), or None. \n  If provided, the string must match a specific regex format defined by _REGEX. If the string\n  represents a partial date, it will be expanded to the earliest possible date.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not conform to the expected date format.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Holds the parsed date representation.\n- origval (Union[str, None]): Stores the original input JSON value for reference.\n\nConstants:\n- _REGEX: A compiled regular expression from the class, used to validate the format of the input date string.\n- _FIELD: A constant string used internally to synchronize the `date` attribute with its storage when setting values.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method prioritizes returning `self.origval`, which is the original value provided during initialization, and if that is `None`, it defaults to the `isostring` property, which formats the date in ISO 8601 format. This functionality is critical for maintaining the fidelity of the original data while also providing a standard format representation.\n\nAttributes:\n- `self.origval`: Stores the original JSON string input during initialization. If this is not `None`, it will be returned.\n- `self.isostring`: Returns an ISO 8601 formatted string version of the date, produced by the `isostring` property, ensuring compatibility with standard date representations.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.__setattr__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __setattr__(self, prop, value):\n  - DOCSTRING: \n```python\n\"\"\"\nSets attributes for the FHIRDate instance. If the attribute being set is either 'date' or the private _FIELD, the original value (origval) is cleared, and both the date and _FIELD are synchronized to the new value. For all other attributes, the default behavior to set the attribute is invoked.\n\nParameters:\n- prop (str): The name of the attribute to set.\n- value (Any): The value to assign to the specified attribute.\n\nSide Effects:\n- If 'date' or _FIELD is set, origval is set to None to maintain data integrity.\n\nConstants:\n- _FIELD (str): A private constant indicating the name of the field ('date') used for synchronization between date and the specified property.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/searchparameter.py\n\n- CLASS METHOD: SearchParameter.__init__\n  - CLASS SIGNATURE: class SearchParameter(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a SearchParameter instance, used to define a named search item for FHIR resources. \n\nParameters:\n- jsondict (dict, optional): A JSON dictionary for initializing the instance. It should contain valid keys corresponding to the attributes of the SearchParameter class.\n- strict (bool, optional): If set to True (default), raises a TypeError on invalid variables during initialization.\n\nAttributes:\n- base: Defines the resource type(s) applicable for this search parameter.\n- chain: Lists the supported chained names.\n- code: The code utilized in the URL for the search parameter.\n- comparator: Enumerates allowable comparison operators (e.g., eq, ne).\n- component: Specifies components of composite resources, if applicable.\n- contact: Contains contact details for the publisher.\n- date: The last modification date.\n- derivedFrom: Identifies the original definition for this search parameter.\n- description: A natural language description.\n- experimental: Indicates if the parameter is for testing purposes.\n- expression: A FHIRPath expression for value extraction.\n- jurisdiction: Intended jurisdiction, if applicable.\n- modifier: Lists the supported modifiers for the parameter.\n- multipleAnd: Indicates if multiple parameters (AND) are allowed.\n- multipleOr: Indicates if multiple values per parameter (OR) are allowed.\n- name: The computer-friendly name for this search parameter.\n- publisher: Name of the publisher (individual or organization).\n- purpose: Clarifies why the parameter is defined.\n- status: Indicates the current status (draft, active, retired, unknown).\n- target: Specifies resource types if a resource reference.\n- type: Describes the type of search parameter (e.g., number, date, string).\n- url: A globally unique canonical identifier for the search parameter.\n- useContext: Context intended to support, if applicable.\n- version: The business version of the search parameter.\n- xpath: An XPath expression for value extraction.\n- xpathUsage: Defines the method of XPath value extraction (normal, phonetic, etc.).\n\nThis initialization method also invokes the constructor of the superclass `DomainResource`, passing the `jsondict` and `strict` parameters for further validation.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirabstractbase.py\n\n- CLASS METHOD: FHIRAbstractBase.as_json\n  - CLASS SIGNATURE: class FHIRAbstractBase(object):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nSerializes the current instance to a JSON-compliant dictionary by inspecting its registered properties defined in `elementProperties()`. The method ensures that required properties are not None (and lists are not empty) and validates that values are of the correct types before serialization. \n\nIf any errors occur during the serialization process, such as type mismatches or missing non-optional properties, a `FHIRValidationError` is raised with detailed information about the issues encountered.\n\nReturns:\n    dict: A validated dictionary that can be serialized to JSON.\n\nRaises:\n    FHIRValidationError: If properties have the wrong type, or if required properties are missing or empty.\n\nDependencies:\n    - `elementProperties()`: Defines the properties to be serialized and their requirements (e.g., types, whether they are lists, and whether they are optional).\n    - `_matches_type(value, typ)`: Validates the type of values being serialized.\n    - `FHIRValidationError`: Used for error reporting during validation.\n\nConstants:\n    - `found`: A set that tracks which properties have been included in the serialized JSON.\n    - `nonoptionals`: A set that collects names of non-optional properties that must be present in the serialized output.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDateTime instance.\n\nThis constructor initializes a new FHIRDateTime object, setting up the `datetime` attribute to hold a Python `datetime.datetime` object. If provided, the `jsonval` parameter is passed to the superclass (FHIRDate) for further processing.\n\nParameters:\n- `jsonval` (Union[str, None]): An optional string representation of a datetime in FHIR format. If None, the instance will initialize with a None `datetime`.\n\nAttributes:\n- `datetime` (Union[datetime.datetime, None]): Holds the Python representation of the datetime, either as a naive or aware datetime object.\n\nDependencies:\n- Uses the FHIRDate superclass to handle the FHIR JSON string processing. The superclass's constructor is called to ensure that the base functionality for FHIRDate is properly initialized.\n\"\"\"\n```\n\n## FILE 5: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConvert the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method of the superclass to include a 'resourceType' key in the output dictionary, which indicates the type of the FHIR resource represented by the instance. \n\nParameters:\n- None\n\nReturns:\n- dict: A JSON-compatible dictionary representation of the FHIRAbstractResource instance, including the 'resourceType' set to the class's `resource_type` attribute, which defaults to 'FHIRAbstractResource'.\n\nDependencies:\n- Relies on the `super()` function to call the parent class's `as_json` method, ensuring that all attributes of the parent class are included in the output.\n\"\"\"\n```\n\n## FILE 6: fhirclient/models/domainresource.py\n\n- CLASS METHOD: DomainResource.__init__\n  - CLASS SIGNATURE: class DomainResource(resource.Resource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a DomainResource instance, which represents a FHIR resource containing narrative, extensions, and contained resources.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary to initialize the resource's properties. If provided, the content will be used to set up the DomainResource.\n- strict (bool, optional): If True (default), invalid properties in jsondict will raise a FHIRValidationError; if False, it will allow for non-strict parsing.\n\nAttributes:\n- contained (List[Resource]): Inline resources contained within the DomainResource, initialized to None.\n- extension (List[Extension]): Additional content defined by implementations, initialized to None.\n- modifierExtension (List[Extension]): Extensions that cannot be ignored, initialized to None.\n- text (Narrative): A text summary of the resource for human interpretation, initialized to None.\n\nThe initialization process calls the superclass constructor (resource.Resource) with the provided jsondict and strict parameters to ensure proper baseline setup for all resources.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/searchparameter.py": "from . import domainresource\n\nclass SearchParameter(domainresource.DomainResource):\n    \"\"\" Search parameter for a resource.\n    \n    A search parameter that defines a named search item that can be used to\n    search/filter on a resource.\n    \"\"\"\n    resource_type = 'SearchParameter'\n\n    def elementProperties(self):\n        js = super(SearchParameter, self).elementProperties()\n        js.extend([('base', 'base', str, True, None, True), ('chain', 'chain', str, True, None, False), ('code', 'code', str, False, None, True), ('comparator', 'comparator', str, True, None, False), ('component', 'component', SearchParameterComponent, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('derivedFrom', 'derivedFrom', str, False, None, False), ('description', 'description', str, False, None, True), ('experimental', 'experimental', bool, False, None, False), ('expression', 'expression', str, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('modifier', 'modifier', str, True, None, False), ('multipleAnd', 'multipleAnd', bool, False, None, False), ('multipleOr', 'multipleOr', bool, False, None, False), ('name', 'name', str, False, None, True), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('status', 'status', str, False, None, True), ('target', 'target', str, True, None, False), ('type', 'type', str, False, None, True), ('url', 'url', str, False, None, True), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False), ('xpath', 'xpath', str, False, None, False), ('xpathUsage', 'xpathUsage', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass SearchParameterComponent(backboneelement.BackboneElement):\n    \"\"\" For Composite resources to define the parts.\n    \n    Used to define the parts of a composite search parameter.\n    \"\"\"\n    resource_type = 'SearchParameterComponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.definition = None\n        ' Defines how the part works.\\n        Type `str`. '\n        self.expression = None\n        ' Subexpression relative to main expression.\\n        Type `str`. '\n        super(SearchParameterComponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(SearchParameterComponent, self).elementProperties()\n        js.extend([('definition', 'definition', str, False, None, True), ('expression', 'expression', str, False, None, True)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import fhirdatetime\nfrom . import usagecontext",
    "fhirclient/models/fhirabstractbase.py": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\n\nclass FHIRValidationError(Exception):\n    \"\"\" Exception raised when one or more errors occurred during model\n    validation.\n    \"\"\"\n\n    def __init__(self, errors, path=None):\n        \"\"\" Initializer.\n        \n        :param errors: List of Exception instances. Also accepts a string,\n            which is converted to a TypeError.\n        :param str path: The property path on the object where errors occurred\n        \"\"\"\n        if not isinstance(errors, list):\n            errors = [TypeError(errors)]\n        msgs = '\\n  '.join([str(e).replace('\\n', '\\n  ') for e in errors])\n        message = '{}:\\n  {}'.format(path or '{root}', msgs)\n        super(FHIRValidationError, self).__init__(message)\n        self.errors = errors\n        ' A list of validation errors encountered. Typically contains\\n        TypeError, KeyError, possibly AttributeError and others. '\n        self.path = path\n        ' The path on the object where the errors occurred. '\n\n    def prefixed(self, path_prefix):\n        \"\"\" Creates a new instance of the receiver, with the given path prefix\n        applied. \"\"\"\n        path = '{}.{}'.format(path_prefix, self.path) if self.path is not None else path_prefix\n        return self.__class__(self.errors, path)\n\nclass FHIRAbstractBase(object):\n    \"\"\" Abstract base class for all FHIR elements.\n    \"\"\"\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initializer. If strict is true, raises on errors, otherwise uses\n        `logger.warning()`.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self._resolved = None\n        ' Dictionary of resolved resources. '\n        self._owner = None\n        ' Points to the parent resource, if there is one. '\n        if jsondict is not None:\n            if strict:\n                self.update_with_json(jsondict)\n            else:\n                try:\n                    self.update_with_json(jsondict)\n                except FHIRValidationError as e:\n                    for err in e.errors:\n                        logger.warning(err)\n\n    @classmethod\n    def with_json(cls, jsonobj):\n        \"\"\" Initialize an element from a JSON dictionary or array.\n        \n        If the JSON dictionary has a \"resourceType\" entry and the specified\n        resource type is not the receiving classes type, uses\n        `FHIRElementFactory` to return a correct class instance.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param jsonobj: A dict or list of dicts to instantiate from\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        if isinstance(jsonobj, dict):\n            return cls._with_json_dict(jsonobj)\n        if isinstance(jsonobj, list):\n            arr = []\n            for jsondict in jsonobj:\n                try:\n                    arr.append(cls._with_json_dict(jsondict))\n                except FHIRValidationError as e:\n                    raise e.prefixed(str(len(arr)))\n            return arr\n        raise TypeError('`with_json()` on {} only takes dict or list of dict, but you provided {}'.format(cls, type(jsonobj)))\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Internal method to instantiate from JSON dictionary.\n        \n        :raises: TypeError on anything but dict\n        :raises: FHIRValidationError if instantiation fails\n        :returns: An instance created from dictionary data\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise TypeError('Can only use `_with_json_dict()` on {} with a dictionary, got {}'.format(type(self), type(jsondict)))\n        return cls(jsondict)\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj, owner):\n        \"\"\" Instantiates by forwarding to `with_json()`, then remembers the\n        \"owner\" of the instantiated elements. The \"owner\" is the resource\n        containing the receiver and is used to resolve contained resources.\n        \n        :raises: TypeError on anything but dict or list of dicts\n        :raises: FHIRValidationError if instantiation fails\n        :param dict jsonobj: Decoded JSON dictionary (or list thereof)\n        :param FHIRElement owner: The owning parent\n        :returns: An instance or a list of instances created from JSON data\n        \"\"\"\n        instance = cls.with_json(jsonobj)\n        if isinstance(instance, list):\n            for inst in instance:\n                inst._owner = owner\n        else:\n            instance._owner = owner\n        return instance\n\n    def elementProperties(self):\n        \"\"\" Returns a list of tuples, one tuple for each property that should\n        be serialized, as: (\"name\", \"json_name\", type, is_list, \"of_many\", not_optional)\n        \"\"\"\n        return []\n\n    def update_with_json(self, jsondict):\n        \"\"\" Update the receiver with data in a JSON dictionary.\n        \n        :raises: FHIRValidationError on validation errors\n        :param dict jsondict: The JSON dictionary to use to update the receiver\n        :returns: None on success, a list of errors if there were errors\n        \"\"\"\n        if jsondict is None:\n            return\n        if not isinstance(jsondict, dict):\n            raise FHIRValidationError('Non-dict type {} fed to `update_with_json` on {}'.format(type(jsondict), type(self)))\n        errs = []\n        valid = set(['resourceType'])\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            valid.add(jsname)\n            if of_many is not None:\n                valid.add(of_many)\n            err = None\n            value = jsondict.get(jsname)\n            if value is not None and hasattr(typ, 'with_json_and_owner'):\n                try:\n                    value = typ.with_json_and_owner(value, self)\n                except Exception as e:\n                    value = None\n                    err = e\n            if value is not None:\n                testval = value\n                if is_list:\n                    if not isinstance(value, list):\n                        err = TypeError('Wrong type {} for list property \"{}\" on {}, expecting a list of {}'.format(type(value), name, type(self), typ))\n                        testval = None\n                    else:\n                        testval = value[0] if value and len(value) > 0 else None\n                if testval is not None and (not self._matches_type(testval, typ)):\n                    err = TypeError('Wrong type {} for property \"{}\" on {}, expecting {}'.format(type(testval), name, type(self), typ))\n                else:\n                    setattr(self, name, value)\n                found.add(jsname)\n                if of_many is not None:\n                    found.add(of_many)\n            elif not_optional:\n                nonoptionals.add(of_many or jsname)\n            _jsname = '_' + jsname\n            _value = jsondict.get(_jsname)\n            if _value is not None:\n                valid.add(_jsname)\n                found.add(_jsname)\n            if err is not None:\n                errs.append(err.prefixed(name) if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        if len(nonoptionals) > 0:\n            for miss in nonoptionals - found:\n                errs.append(KeyError('Non-optional property \"{}\" on {} is missing'.format(miss, self)))\n        if len(set(jsondict.keys()) - valid) > 0:\n            for supflu in set(jsondict.keys()) - valid:\n                errs.append(AttributeError('Superfluous entry \"{}\" in data for {}'.format(supflu, self)))\n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n\n    def _matches_type(self, value, typ):\n        if value is None:\n            return True\n        if isinstance(value, typ):\n            return True\n        if int == typ or float == typ:\n            return isinstance(value, int) or isinstance(value, float)\n        if sys.version_info < (3, 0) and (str == typ or unicode == typ):\n            return isinstance(value, str) or isinstance(value, unicode)\n        return False\n\n    def owningResource(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `DomainResource` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not hasattr(owner, 'contained')):\n            owner = owner._owner\n        return owner\n\n    def owningBundle(self):\n        \"\"\" Walks the owner hierarchy and returns the next parent that is a\n        `Bundle` instance.\n        \"\"\"\n        owner = self._owner\n        while owner is not None and (not 'Bundle' == owner.resource_type):\n            owner = owner._owner\n        return owner\n\n    def resolvedReference(self, refid):\n        \"\"\" Returns the resolved reference with the given id, if it has been\n        resolved already. If it hasn't, forwards the call to its owner if it\n        has one.\n        \n        You should probably use `resolve()` on the `FHIRReference` itself.\n        \n        :param refid: The id of the resource to resolve\n        :returns: An instance of `Resource`, if it was found\n        \"\"\"\n        if self._resolved and refid in self._resolved:\n            return self._resolved[refid]\n        return self._owner.resolvedReference(refid) if self._owner is not None else None\n\n    def didResolveReference(self, refid, resolved):\n        \"\"\" Called by `FHIRResource` when it resolves a reference. Stores the\n        resolved reference into the `_resolved` dictionary.\n        \n        :param refid: The id of the resource that was resolved\n        :param refid: The resolved resource, ready to be cached\n        \"\"\"\n        if self._resolved is not None:\n            self._resolved[refid] = resolved\n        else:\n            self._resolved = {refid: resolved}",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory",
    "fhirclient/models/domainresource.py": "from . import resource\n\nclass DomainResource(resource.Resource):\n    \"\"\" A resource with narrative, extensions, and contained resources.\n    \n    A resource that includes narrative, extensions, and contained resources.\n    \"\"\"\n    resource_type = 'DomainResource'\n\n    def elementProperties(self):\n        js = super(DomainResource, self).elementProperties()\n        js.extend([('contained', 'contained', resource.Resource, True, None, False), ('extension', 'extension', extension.Extension, True, None, False), ('modifierExtension', 'modifierExtension', extension.Extension, True, None, False), ('text', 'text', narrative.Narrative, False, None, False)])\n        return js\nfrom . import extension\nfrom . import narrative"
  }
}